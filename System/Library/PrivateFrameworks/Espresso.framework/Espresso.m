uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t Espresso::net::_tag_inputs_and_outputs(Espresso::net *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  _BOOL4 v34;
  uint64_t *v35;
  std::string::size_type size;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::string *p_s1;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v47;
  BOOL v48;
  void *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  uint64_t *v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *v68;
  std::string *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 *v72;
  std::string *v73;
  std::string *v74;
  Espresso::net *v75;
  Espresso::net *v76;
  BOOL v77;
  __int128 *v78;
  std::string *v79;
  std::string *v80;
  Espresso::net *v81;
  Espresso::net *v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  char *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  _QWORD *v96;
  char **v97;
  char **v98;
  _QWORD **v99;
  uint64_t **v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::string __s1;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  _QWORD v108[4];
  int v109;
  __int128 __p;
  __int128 v111;
  int v112;
  _QWORD v113[4];
  int v114;

  v3 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + v4) + 64);
      if (v6)
      {
        std::string::operator=((std::string *)(v6 + 104), (const std::string *)((char *)this + 424));
        v7 = *((_DWORD *)this + 124);
        v8 = *(_QWORD *)(*(_QWORD *)(v3 + v4) + 64);
        *(_DWORD *)(v8 + 128) = v5;
        *(_DWORD *)(v8 + 132) = v7;
        v3 = *((_QWORD *)this + 4);
        v2 = *((_QWORD *)this + 5);
      }
      ++v5;
      v4 += 16;
    }
    while (v5 < (v2 - v3) >> 4);
  }
  v9 = (_QWORD *)((char *)this + 240);
  v10 = (char *)this + 232;
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  *((_QWORD *)this + 29) = (char *)this + 240;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  v100 = (uint64_t **)((char *)this + 256);
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  v98 = (char **)((char *)this + 664);
  v99 = (_QWORD **)((char *)this + 264);
  *((_QWORD *)this + 32) = (char *)this + 264;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 83);
  v97 = (char **)((char *)this + 640);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 80);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 86);
  memset(v113, 0, sizeof(v113));
  v114 = 1065353216;
  __p = 0u;
  v111 = 0u;
  v112 = 1065353216;
  memset(v108, 0, sizeof(v108));
  v109 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v113, (unint64_t)(float)*((unint64_t *)this + 25));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&__p, vcvtps_u32_f32((float)*((unint64_t *)this + 25) / 1.0));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v108, vcvtps_u32_f32((float)*((unint64_t *)this + 25) / 1.0));
  v106 = 0;
  v11 = *((_QWORD *)this + 5);
  if (v11 == *((_QWORD *)this + 4))
  {
    v19 = *((_QWORD *)this + 5);
  }
  else
  {
    do
    {
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v106, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 96, &v106, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      v15 = v12[3];
      v14 = v12[4];
      while (v15 != v14)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v108, v15, v15);
        v15 += 24;
      }
      v17 = v13[3];
      v16 = v13[4];
      while (v17 != v16)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&__p, v17))
        {
          v18 = v106;
          __s1.__r_.__value_.__r.__words[0] = v17;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, v17, (uint64_t)&std::piecewise_construct, (__int128 **)&__s1)[5] = v18;
        }
        v17 += 24;
      }
      ++v106;
      v11 = *((_QWORD *)this + 4);
      v19 = *((_QWORD *)this + 5);
    }
    while (v106 < (v19 - v11) >> 4);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  v106 = *((_QWORD *)this + 121);
  v107 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v11 = *((_QWORD *)this + 4);
    v19 = *((_QWORD *)this + 5);
  }
  v105 = 0;
  if (v19 != v11)
  {
    v23 = 0;
    while (1)
    {
      v24 = *(_OWORD *)(v11 + 16 * v23);
      v104 = v24;
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v105, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 96, &v105, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      v30 = v28[3];
      v31 = v28[4];
      while (v30 != v31)
      {
        if (*(char *)(v30 + 23) < 0)
        {
          if (!*(_QWORD *)(v30 + 8))
            goto LABEL_79;
        }
        else if (!*(_BYTE *)(v30 + 23))
        {
          goto LABEL_79;
        }
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v113, v30))
        {
          v32 = (std::string *)*((_QWORD *)this + 87);
          if ((unint64_t)v32 >= *((_QWORD *)this + 88))
          {
            v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)this + 86, v30);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 688, (__int128 *)v30);
            v33 = v32 + 1;
          }
          *((_QWORD *)this + 87) = v33;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v113, v30, v30);
        }
        v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 36), (_QWORD *)v30)|| (v35 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&__p, v30)) == 0|| v35[5] >= v105;
        if (!v106)
        {
          if (!v34)
            goto LABEL_79;
          goto LABEL_73;
        }
        Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__s1, (_QWORD *)(v106 + 184), v30, v30);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v37 = *(unsigned __int8 *)(v30 + 23);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = *(_QWORD *)(v30 + 8);
        if (size != v37)
        {
          v48 = 0;
          goto LABEL_65;
        }
        if (v38 >= 0)
          v39 = (unsigned __int8 *)v30;
        else
          v39 = *(unsigned __int8 **)v30;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v50 = __s1.__r_.__value_.__r.__words[0];
          if (memcmp(__s1.__r_.__value_.__l.__data_, v39, __s1.__r_.__value_.__l.__size_))
            LOBYTE(v34) = 0;
          v49 = (void *)v50;
LABEL_72:
          operator delete(v49);
          if (!v34)
            goto LABEL_79;
          goto LABEL_73;
        }
        if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v40 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v43 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v42 = v43;
            v45 = *v39++;
            v44 = v45;
            v47 = v40-- != 0;
            v48 = v42 == v44;
          }
          while (v48 && v47);
LABEL_65:
          LOBYTE(v34) = v34 && v48;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v49 = (void *)__s1.__r_.__value_.__r.__words[0];
            goto LABEL_72;
          }
        }
        if (!v34)
          goto LABEL_79;
LABEL_73:
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)*v9, (_QWORD *)v30))
        {
          v51 = (std::string *)*((_QWORD *)this + 81);
          if ((unint64_t)v51 >= *((_QWORD *)this + 82))
          {
            v52 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v97, v30);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v97, (__int128 *)v30);
            v52 = v51 + 1;
          }
          *((_QWORD *)this + 81) = v52;
        }
        __s1.__r_.__value_.__r.__words[0] = v30;
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (_QWORD *)v30, (__int128 **)&__s1)[56] = 1;
LABEL_79:
        v30 += 24;
      }
      v53 = v29[3];
      v54 = v29[4];
      if (v53 != v54)
        break;
LABEL_122:
      if (v25)
      {
        v70 = (unint64_t *)&v25->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v23 = v105 + 1;
      v105 = v23;
      v11 = *((_QWORD *)this + 4);
      if (v23 >= (*((_QWORD *)this + 5) - v11) >> 4)
        goto LABEL_128;
    }
    v55 = 0;
    while (*(char *)(v53 + 23) < 0)
    {
      if (*(_QWORD *)(v53 + 8))
        goto LABEL_86;
LABEL_120:
      v53 += 24;
      if (v53 == v54)
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        goto LABEL_122;
      }
    }
    if (!*(_BYTE *)(v53 + 23))
      goto LABEL_120;
LABEL_86:
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v113, v53))
    {
      v56 = (std::string *)*((_QWORD *)this + 87);
      if ((unint64_t)v56 >= *((_QWORD *)this + 88))
      {
        v57 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)this + 86, v53);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 688, (__int128 *)v53);
        v57 = v56 + 1;
      }
      *((_QWORD *)this + 87) = v57;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v113, v53, v53);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 39), (_QWORD *)v53))
    {
      v59 = (uint64_t *)(v104 + 64);
      v58 = *(_QWORD *)(v104 + 64);
      if (!v58)
      {
LABEL_109:
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v99, (_QWORD *)v53))
        {
          v68 = (std::string *)*((_QWORD *)this + 84);
          if ((unint64_t)v68 >= *((_QWORD *)this + 85))
          {
            v69 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v98, v53);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v98, (__int128 *)v53);
            v69 = v68 + 1;
          }
          *((_QWORD *)this + 84) = v69;
        }
        __s1.__r_.__value_.__r.__words[0] = v53;
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, (_QWORD *)v53, (__int128 **)&__s1)[56] = 1;
        goto LABEL_119;
      }
      v60 = 1;
    }
    else
    {
      v61 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v108, v53);
      v60 = v61 == 0;
      v59 = (uint64_t *)(v104 + 64);
      v58 = *(_QWORD *)(v104 + 64);
      if (!v58)
      {
        if (!v61)
          goto LABEL_109;
        goto LABEL_119;
      }
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 24))(&v101, v58, 1, v55);
    if (v101 && *(_BYTE *)(v101 + 64))
      v60 = 0;
    v62 = *v59;
    std::string::basic_string[abi:ne180100]<0>(&__s1, "is_output");
    v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v62 + 240), (unsigned __int8 *)&__s1);
    v64 = v63;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
      if (!v64)
        goto LABEL_104;
    }
    else if (!v63)
    {
      goto LABEL_104;
    }
    if (*((_DWORD *)v64 + 10))
    {
      __s1.__r_.__value_.__r.__words[0] = v53;
      v60 = 1;
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 38, (_QWORD *)v53, (__int128 **)&__s1)[56] = 1;
    }
LABEL_104:
    v65 = v102;
    if (!v102)
      goto LABEL_108;
    v66 = (unint64_t *)&v102->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      if (v60)
        goto LABEL_109;
    }
    else
    {
LABEL_108:
      if (v60)
        goto LABEL_109;
    }
LABEL_119:
    v55 = (v55 + 1);
    goto LABEL_120;
  }
LABEL_128:
  v72 = (__int128 *)*((_QWORD *)this + 35);
  if (v72 != (__int128 *)((char *)this + 288))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)*v9, (_QWORD *)v72 + 4)|| (__s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v72 + 2), !std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (_QWORD *)v72 + 4, (__int128 **)&__s1)[56]))
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v108, (uint64_t)(v72 + 2))|| std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&__p, (uint64_t)(v72 + 2)))
        {
          __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v72 + 2);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (_QWORD *)v72 + 4, (__int128 **)&__s1)[56] = 1;
          v73 = (std::string *)*((_QWORD *)this + 81);
          if ((unint64_t)v73 >= *((_QWORD *)this + 82))
          {
            v74 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v97, (uint64_t)(v72 + 2));
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v97, v72 + 2);
            v74 = v73 + 1;
          }
          *((_QWORD *)this + 81) = v74;
        }
      }
      v75 = (Espresso::net *)*((_QWORD *)v72 + 1);
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = *(Espresso::net **)v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (Espresso::net *)*((_QWORD *)v72 + 2);
          v77 = *(_QWORD *)v76 == (_QWORD)v72;
          v72 = (__int128 *)v76;
        }
        while (!v77);
      }
      v72 = (__int128 *)v76;
    }
    while (v76 != (Espresso::net *)((char *)this + 288));
  }
  v78 = (__int128 *)*((_QWORD *)this + 38);
  if (v78 != (__int128 *)((char *)this + 312))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v99, (_QWORD *)v78 + 4)|| (__s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v78 + 2), !std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, (_QWORD *)v78 + 4, (__int128 **)&__s1)[56]))
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v108, (uint64_t)(v78 + 2))|| std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&__p, (uint64_t)(v78 + 2)))
        {
          __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v78 + 2);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, (_QWORD *)v78 + 4, (__int128 **)&__s1)[56] = 1;
          v79 = (std::string *)*((_QWORD *)this + 84);
          if ((unint64_t)v79 >= *((_QWORD *)this + 85))
          {
            v80 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v98, (uint64_t)(v78 + 2));
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v98, v78 + 2);
            v80 = v79 + 1;
          }
          *((_QWORD *)this + 84) = v80;
        }
      }
      v81 = (Espresso::net *)*((_QWORD *)v78 + 1);
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = *(Espresso::net **)v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (Espresso::net *)*((_QWORD *)v78 + 2);
          v77 = *(_QWORD *)v82 == (_QWORD)v78;
          v78 = (__int128 *)v82;
        }
        while (!v77);
      }
      v78 = (__int128 *)v82;
    }
    while (v82 != (Espresso::net *)((char *)this + 312));
  }
  v83 = (_QWORD *)*((_QWORD *)this + 97);
  v84 = (char *)this + 784;
  if (v83 != (_QWORD *)((char *)this + 784))
  {
    do
    {
      v85 = (_QWORD *)v83[10];
      if (v85 != v83 + 11)
      {
        do
        {
          v86 = v85 + 4;
          if (v9 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v10, v85 + 4))
          {
            v96 = v83 + 4;
            if (*((char *)v83 + 55) < 0)
              v96 = (_QWORD *)*v96;
            if (*((char *)v85 + 55) < 0)
              v86 = (_QWORD *)*v86;
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Configuration: %s, the blob %s is not an input", (uint64_t)v96, (uint64_t)v86);
          }
          v87 = (_QWORD *)v85[1];
          if (v87)
          {
            do
            {
              v88 = v87;
              v87 = (_QWORD *)*v87;
            }
            while (v87);
          }
          else
          {
            do
            {
              v88 = (_QWORD *)v85[2];
              v77 = *v88 == (_QWORD)v85;
              v85 = v88;
            }
            while (!v77);
          }
          v85 = v88;
        }
        while (v88 != v83 + 11);
      }
      v89 = (char *)v83[1];
      if (v89)
      {
        do
        {
          v90 = v89;
          v89 = *(char **)v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          v90 = (char *)v83[2];
          v77 = *(_QWORD *)v90 == (_QWORD)v83;
          v83 = v90;
        }
        while (!v77);
      }
      v83 = v90;
    }
    while (v90 != v84);
  }
  v91 = v107;
  if (v107)
  {
    v92 = (unint64_t *)&v107->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v108);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v111);
  v94 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v94)
    operator delete(v94);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v113);
}

void sub_190DB1C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v36 - 144);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v13 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v13;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_190DB1F00(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190DB257C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190DB2590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a1;
    v4 = 1;
    do
    {
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v3 + 4))
      {
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2))
          return v4;
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

void Espresso::base_kernel::blob_options(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v16 == v8)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_190DB2B58(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void Espresso::net::get_producers_of_blobs(Espresso::net *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 20));
  v5 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)this + 12, v6);
      if (v7)
      {
        v8 = (__int128 *)v7[3];
        v9 = (__int128 *)v7[4];
        if (v8 != v9)
        {
          do
          {
            v10 = v8;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v8, (uint64_t)&std::piecewise_construct, &v10)[5] = v6;
            v8 = (__int128 *)((char *)v8 + 24);
          }
          while (v8 != v9);
          v5 = *((_QWORD *)this + 4);
          v4 = *((_QWORD *)this + 5);
        }
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 4);
  }
}

void sub_190DB2F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190DB33A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190DB33B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
  }
}

_QWORD *Espresso::inner_product_kernel_cpu::blob_options@<X0>(_QWORD *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  if ((a2 & 1) != 0 || *((_DWORD *)this + 85) != 5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = operator new(0x70uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E2DBE228;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[13] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((_BYTE *)v4 + 88) = 0;
    v4[10] = 0;
    a3[1] = v4;
    *((_BYTE *)v4 + 32) = 1;
    *((_DWORD *)v4 + 9) = 2;
    v4[3] = &off_1E2D9B4D8;
    this = v4 + 3;
    *a3 = this;
  }
  return this;
}

Espresso::network_optimization_graph *Espresso::network_optimization_graph::network_optimization_graph(Espresso::network_optimization_graph *this, Espresso::net *a2)
{
  uint64_t **v2;
  uint64_t **v3;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  _QWORD *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  char *v45;
  uint64_t **v46;
  uint64_t **v47;
  char *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v61;
  std::string v62;
  char **v63;
  char *v64[2];
  uint64_t *v65;
  _QWORD *v66[2];
  std::string *v67;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  v2 = (uint64_t **)((char *)this + 16);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  v3 = (uint64_t **)((char *)this + 40);
  *((_QWORD *)this + 7) = 0;
  v66[0] = 0;
  v66[1] = 0;
  v64[1] = 0;
  v65 = (uint64_t *)v66;
  v63 = v64;
  v64[0] = 0;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v5 = 0;
    v6 = (char *)a2 + 96;
    v7 = (char *)a2 + 56;
    do
    {
      v62.__r_.__value_.__r.__words[0] = v5;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v6, v5, &v62);
      v9 = (__int128 *)v8[3];
      v10 = (__int128 *)v8[4];
      while (v9 != v10)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        }
        else
        {
          v11 = *v9;
          v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
        }
        v67 = &v62;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, &v62, (__int128 **)&v67)+ 14) = v5;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v9 = (__int128 *)((char *)v9 + 24);
      }
      v62.__r_.__value_.__r.__words[0] = v5;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v7, v5, &v62);
      v13 = (__int128 *)v12[3];
      v14 = (__int128 *)v12[4];
      while (v13 != v14)
      {
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v15 = *v13;
          v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
        }
        v67 = &v62;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v63, &v62, (__int128 **)&v67)+ 14) = v5;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v13 = (__int128 *)((char *)v13 + 24);
      }
      ++v5;
      v17 = *((_QWORD *)a2 + 4);
      v16 = *((_QWORD *)a2 + 5);
    }
    while (v5 < (v16 - v17) >> 4);
    v61 = (uint64_t)v7;
    LODWORD(v67) = 0;
    if (v16 != v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v62.__r_.__value_.__r.__words[0] = v19;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v61, v19, &v62);
        v22 = (_QWORD *)v20[3];
        v21 = (_QWORD *)v20[4];
        if (v22 != v21)
        {
          do
          {
            v23 = (int)v67;
            v24 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * (int)v67);
            v25 = *(const void **)(v24 + 64);
            if (v25
            {
              v26 = *(std::__shared_weak_count **)(v24 + 72);
              if (v26)
              {
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldxr(p_shared_owners);
                while (__stxr(v28 + 1, p_shared_owners));
                do
                  v29 = __ldaxr(p_shared_owners);
                while (__stlxr(v29 - 1, p_shared_owners));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
            else if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v66[0], v22))
            {
              v30 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3, v23, &v67);
              v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v31 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, v22, (__int128 **)&v62);
              v32 = v31;
              v33 = (char *)v30[6];
              v34 = v30[7];
              if (v33 >= (char *)v34)
              {
                v36 = v30[5];
                v37 = (v33 - (char *)v36) >> 2;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_67;
                v38 = (char *)v34 - (char *)v36;
                v39 = ((char *)v34 - (char *)v36) >> 1;
                if (v39 <= v37 + 1)
                  v39 = v37 + 1;
                v40 = v38 >= 0x7FFFFFFFFFFFFFFCLL;
                v41 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v40)
                  v41 = v39;
                if (v41)
                {
                  v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
                  v36 = v30[5];
                  v33 = (char *)v30[6];
                }
                else
                {
                  v42 = 0;
                }
                v43 = (uint64_t *)(v41 + 4 * v37);
                *(_DWORD *)v43 = *((_DWORD *)v32 + 14);
                v35 = (uint64_t *)((char *)v43 + 4);
                while (v33 != (char *)v36)
                {
                  v44 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 = (uint64_t *)((char *)v43 - 4);
                }
                v30[5] = v43;
                v30[6] = v35;
                v30[7] = (uint64_t *)(v41 + 4 * v42);
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v33 = *((_DWORD *)v31 + 14);
                v35 = (uint64_t *)(v33 + 4);
              }
              v30[6] = v35;
              v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v45 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, v22, (__int128 **)&v62);
              v46 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v2, *((_DWORD *)v45 + 14), (_DWORD *)v45 + 14);
              v47 = v46;
              v48 = (char *)v46[6];
              v49 = v46[7];
              if (v48 >= (char *)v49)
              {
                v51 = v46[5];
                v52 = (v48 - (char *)v51) >> 2;
                if ((unint64_t)(v52 + 1) >> 62)
LABEL_67:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v53 = (char *)v49 - (char *)v51;
                v54 = ((char *)v49 - (char *)v51) >> 1;
                if (v54 <= v52 + 1)
                  v54 = v52 + 1;
                v40 = v53 >= 0x7FFFFFFFFFFFFFFCLL;
                v55 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v40)
                  v55 = v54;
                if (v55)
                {
                  v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v55);
                  v51 = v47[5];
                  v48 = (char *)v47[6];
                }
                else
                {
                  v56 = 0;
                }
                v57 = (uint64_t *)(v55 + 4 * v52);
                *(_DWORD *)v57 = (_DWORD)v67;
                v50 = (uint64_t *)((char *)v57 + 4);
                while (v48 != (char *)v51)
                {
                  v58 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v57 - 1) = v58;
                  v57 = (uint64_t *)((char *)v57 - 4);
                }
                v47[5] = v57;
                v47[6] = v50;
                v47[7] = (uint64_t *)(v55 + 4 * v56);
                if (v51)
                  operator delete(v51);
              }
              else
              {
                *(_DWORD *)v48 = (_DWORD)v67;
                v50 = (uint64_t *)(v48 + 4);
              }
              v47[6] = v50;
            }
            v22 += 3;
          }
          while (v22 != v21);
          v18 = (int)v67;
        }
        LODWORD(v67) = ++v18;
        v19 = v18;
      }
      while (v18 < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4));
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v63, v64[0]);
  std::__tree<std::string>::destroy((uint64_t)&v65, (char *)v66[0]);
  return this;
}

void sub_190DB3A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18, uint64_t a19, char a20,char *a21)
{
  std::__tree<std::string>::destroy((uint64_t)&a17, a18);
  std::__tree<std::string>::destroy((uint64_t)&a20, a21);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a9 + 48));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a9 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_190DB3B8C(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_190DB3E2C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
    return v2;
  return v5;
}

void Espresso::SerDes::serdes_object_json_objc::get_obj_array(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::logic_error *exception;
  std::string *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::string v36;
  std::string v37;
  char *v38;
  _QWORD *v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v32 = std::string::append(&v36, "\" not found");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v37);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v6 = objc_msgSend(v4, "count");
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i, v34, v35);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(&v36, v8);
      v9 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      v35 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      if (v36.__r_.__value_.__l.__size_)
      {
        v10 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v13 = a3[1];
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        v34 = v9;
        v15 = (v13 - *a3) >> 4;
        if ((unint64_t)(v15 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v16 = v12 - (_QWORD)*a3;
        v17 = v16 >> 3;
        if (v16 >> 3 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v39 = a3 + 2;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v18);
        v21 = &v19[16 * v15];
        *(_OWORD *)v21 = v34;
        v23 = *a3;
        v22 = a3[1];
        if (v22 == *a3)
        {
          v26 = vdupq_n_s64((unint64_t)v22);
          v24 = &v19[16 * v15];
        }
        else
        {
          v24 = &v19[16 * v15];
          do
          {
            v25 = *((_OWORD *)v22 - 1);
            v22 -= 16;
            *((_OWORD *)v24 - 1) = v25;
            v24 -= 16;
            *(_QWORD *)v22 = 0;
            *((_QWORD *)v22 + 1) = 0;
          }
          while (v22 != v23);
          v26 = *(int64x2_t *)a3;
        }
        v14 = v21 + 16;
        *a3 = v24;
        a3[1] = v21 + 16;
        *(int64x2_t *)&v37.__r_.__value_.__r.__words[1] = v26;
        v27 = a3[2];
        a3[2] = &v19[16 * v20];
        v38 = v27;
        v37.__r_.__value_.__r.__words[0] = v26.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v37);
      }
      else
      {
        *(_OWORD *)v13 = v9;
        v14 = v13 + 16;
      }
      a3[1] = v14;
      size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
      if (v36.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }

    }
  }

}

void sub_190DB43FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  int v27;

  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((v27 & 1) == 0)
    {
LABEL_8:

      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void Espresso::SerDes::params_io<Espresso::elementwise_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *__p[2];
  char v52;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "operation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v28 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v31 = v50;
    if (v50)
    {
      v32 = (unint64_t *)&v50->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v49 + 96))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v34 = v50;
    if (v50)
    {
      v35 = (unint64_t *)&v50->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v49 + 96))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v37 = v50;
    if (v50)
    {
      v38 = (unint64_t *)&v50->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(float *)(a2 + 16) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v49 + 96))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v40 = v50;
    if (v50)
    {
      v41 = (unint64_t *)&v50->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "no_broadcast");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v43 = v50;
    if (v50)
    {
      v44 = (unint64_t *)&v50->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 88))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v25 = v50;
    if (!v50)
      goto LABEL_140;
    v46 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v46);
    while (__stlxr(v27 - 1, v46));
    goto LABEL_138;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "operation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2);
  if (v52 < 0)
    operator delete(__p[0]);
  v5 = v50;
  if (v50)
  {
    v6 = (unint64_t *)&v50->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "fused_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 4);
  if (v52 < 0)
    operator delete(__p[0]);
  v8 = v50;
  if (v50)
  {
    v9 = (unint64_t *)&v50->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 216))(v49, __p, a2 + 8);
  if (v52 < 0)
    operator delete(__p[0]);
  v11 = v50;
  if (v50)
  {
    v12 = (unint64_t *)&v50->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 216))(v49, __p, a2 + 12);
  if (v52 < 0)
    operator delete(__p[0]);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  if (*(float *)(a2 + 16) != 0.000001)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 216))(v49, __p, a2 + 16);
    if (v52 < 0)
      operator delete(__p[0]);
    v17 = v50;
    if (v50)
    {
      v18 = (unint64_t *)&v50->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "no_broadcast");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 20);
    if (v52 < 0)
      operator delete(__p[0]);
    v20 = v50;
    if (v50)
    {
      v21 = (unint64_t *)&v50->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  v24 = *(unsigned __int8 *)(a2 + 24);
  v23 = a2 + 24;
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 208))(v49, __p, v23);
    if (v52 < 0)
      operator delete(__p[0]);
    v25 = v50;
    if (!v50)
      goto LABEL_140;
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_138:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_140:
    if (v48 < 0)
      operator delete(v47[0]);
  }
}

void sub_190DB4DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::convolution_uniforms>(uint64_t a1, uint64_t a2, int a3)
{
  __int16 *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  float v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  __int16 v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  __int16 v242;
  void *v243[2];
  char v244;
  void *v245;
  std::__shared_weak_count *v246;
  void *__p[2];
  char v248;

  v5 = (__int16 *)(a2 + 72);
  v6 = *(unsigned __int16 *)(a2 + 72);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v243, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 40);
    if (v248 < 0)
      operator delete(__p[0]);
    v7 = v246;
    if (v246)
    {
      p_shared_owners = (unint64_t *)&v246->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "K");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 44);
    if (v248 < 0)
      operator delete(__p[0]);
    v10 = v246;
    if (v246)
    {
      v11 = (unint64_t *)&v246->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "Nx");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 48);
    if (v248 < 0)
      operator delete(__p[0]);
    v13 = v246;
    if (v246)
    {
      v14 = (unint64_t *)&v246->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "Ny");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 52);
    if (v248 < 0)
      operator delete(__p[0]);
    v16 = v246;
    if (v246)
    {
      v17 = (unint64_t *)&v246->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 24);
    if (v248 < 0)
      operator delete(__p[0]);
    v19 = v246;
    if (v246)
    {
      v20 = (unint64_t *)&v246->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 28);
    if (v248 < 0)
      operator delete(__p[0]);
    v22 = v246;
    if (v246)
    {
      v23 = (unint64_t *)&v246->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "has_biases");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 32);
    if (v248 < 0)
      operator delete(__p[0]);
    v25 = v246;
    if (v246)
    {
      v26 = (unint64_t *)&v246->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    if (*(_DWORD *)(a2 + 104))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "has_8bit_weights");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 104);
      if (v248 < 0)
        operator delete(__p[0]);
      v28 = v246;
      if (v246)
      {
        v29 = (unint64_t *)&v246->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 108))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "do_ncc");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 108);
      if (v248 < 0)
        operator delete(__p[0]);
      v31 = v246;
      if (v246)
      {
        v32 = (unint64_t *)&v246->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v243, "has_batch_norm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 112);
    if (v248 < 0)
      operator delete(__p[0]);
    v34 = v246;
    if (v246)
    {
      v35 = (unint64_t *)&v246->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    std::string::basic_string[abi:ne180100]<0>(v243, "n_groups");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 116);
    if (v248 < 0)
      operator delete(__p[0]);
    v37 = v246;
    if (v246)
    {
      v38 = (unint64_t *)&v246->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v244 < 0)
      operator delete(v243[0]);
    if (*(_DWORD *)(a2 + 120))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "n_parallel");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 120);
      if (v248 < 0)
        operator delete(__p[0]);
      v40 = v246;
      if (v246)
      {
        v41 = (unint64_t *)&v246->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 124))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "start_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 184))(v245, __p, a2 + 124);
      if (v248 < 0)
        operator delete(__p[0]);
      v43 = v246;
      if (v246)
      {
        v44 = (unint64_t *)&v246->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 126))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "start_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 184))(v245, __p, a2 + 126);
      if (v248 < 0)
        operator delete(__p[0]);
      v46 = v246;
      if (v246)
      {
        v47 = (unint64_t *)&v246->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 130))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "total_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 184))(v245, __p, a2 + 130);
      if (v248 < 0)
        operator delete(__p[0]);
      v49 = v246;
      if (v246)
      {
        v50 = (unint64_t *)&v246->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 92) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "stride_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 92);
      if (v248 < 0)
        operator delete(__p[0]);
      v52 = v246;
      if (v246)
      {
        v53 = (unint64_t *)&v246->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 94) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "stride_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 94);
      if (v248 < 0)
        operator delete(__p[0]);
      v55 = v246;
      if (v246)
      {
        v56 = (unint64_t *)&v246->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (v6 != 0xFFFF)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_l");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 80);
      if (v248 < 0)
        operator delete(__p[0]);
      v58 = v246;
      if (v246)
      {
        v59 = (unint64_t *)&v246->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_r");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 82);
      if (v248 < 0)
        operator delete(__p[0]);
      v61 = v246;
      if (v246)
      {
        v62 = (unint64_t *)&v246->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 84);
      if (v248 < 0)
        operator delete(__p[0]);
      v64 = v246;
      if (v246)
      {
        v65 = (unint64_t *)&v246->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_b");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 86);
      if (v248 < 0)
        operator delete(__p[0]);
      v67 = v246;
      if (v246)
      {
        v68 = (unint64_t *)&v246->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_value");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 216))(v245, __p, a2 + 76);
      if (v248 < 0)
        operator delete(__p[0]);
      v70 = v246;
      if (v246)
      {
        v71 = (unint64_t *)&v246->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, __int16 *))(*(_QWORD *)v245 + 176))(v245, __p, v5);
      if (v248 < 0)
        operator delete(__p[0]);
      v73 = v246;
      if (v246)
      {
        v74 = (unint64_t *)&v246->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
      std::string::basic_string[abi:ne180100]<0>(v243, "pad_fill_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 74);
      if (v248 < 0)
        operator delete(__p[0]);
      v76 = v246;
      if (v246)
      {
        v77 = (unint64_t *)&v246->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "leaky_relu_alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 216))(v245, __p, a2 + 36);
      if (v248 < 0)
        operator delete(__p[0]);
      v79 = v246;
      if (v246)
      {
        v80 = (unint64_t *)&v246->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 136))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "deconv_out_width");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 136);
      if (v248 < 0)
        operator delete(__p[0]);
      v82 = v246;
      if (v246)
      {
        v83 = (unint64_t *)&v246->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 140))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "deconv_out_height");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 140);
      if (v248 < 0)
        operator delete(__p[0]);
      v85 = v246;
      if (v246)
      {
        v86 = (unint64_t *)&v246->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(__int16 *)(a2 + 96) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "dilation_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 96);
      if (v248 < 0)
        operator delete(__p[0]);
      v88 = v246;
      if (v246)
      {
        v89 = (unint64_t *)&v246->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(__int16 *)(a2 + 98) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "dilation_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 98);
      if (v248 < 0)
        operator delete(__p[0]);
      v91 = v246;
      if (v246)
      {
        v92 = (unint64_t *)&v246->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 144))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "low_precision_accumulation");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 144);
      if (v248 < 0)
        operator delete(__p[0]);
      v94 = v246;
      if (v246)
      {
        v95 = (unint64_t *)&v246->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 148))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "hint_use_winograd_win_size");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 148);
      if (v248 < 0)
        operator delete(__p[0]);
      v97 = v246;
      if (v246)
      {
        v98 = (unint64_t *)&v246->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 152))
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "Nt");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 152);
      if (v248 < 0)
        operator delete(__p[0]);
      v100 = v246;
      if (v246)
      {
        v101 = (unint64_t *)&v246->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_WORD *)(a2 + 156) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "stride_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 176))(v245, __p, a2 + 156);
      if (v248 < 0)
        operator delete(__p[0]);
      v103 = v246;
      if (v246)
      {
        v104 = (unint64_t *)&v246->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(_DWORD *)(a2 + 60) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 160))(v245, __p, a2 + 60);
      if (v248 < 0)
        operator delete(__p[0]);
      v106 = v246;
      if (v246)
      {
        v107 = (unint64_t *)&v246->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    if (*(float *)(a2 + 64) != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 216))(v245, __p, a2 + 64);
      if (v248 < 0)
        operator delete(__p[0]);
      v109 = v246;
      if (v246)
      {
        v110 = (unint64_t *)&v246->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    v113 = *(float *)(a2 + 68);
    v112 = a2 + 68;
    if (v113 != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v245 + 216))(v245, __p, v112);
      if (v248 < 0)
        operator delete(__p[0]);
      v114 = v246;
      if (v246)
      {
        v115 = (unint64_t *)&v246->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      if (v244 < 0)
        operator delete(v243[0]);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v243, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v117 = v246;
  if (v246)
  {
    v118 = (unint64_t *)&v246->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "K");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v120 = v246;
  if (v246)
  {
    v121 = (unint64_t *)&v246->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "Nx");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v123 = v246;
  if (v246)
  {
    v124 = (unint64_t *)&v246->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "Ny");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v126 = v246;
  if (v246)
  {
    v127 = (unint64_t *)&v246->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "fused_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v129 = v246;
  if (v246)
  {
    v130 = (unint64_t *)&v246->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "fused_tanh");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v132 = v246;
  if (v246)
  {
    v133 = (unint64_t *)&v246->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "has_biases");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v135 = v246;
  if (v246)
  {
    v136 = (unint64_t *)&v246->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "has_8bit_weights");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 104) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v138 = v246;
  if (v246)
  {
    v139 = (unint64_t *)&v246->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "do_ncc");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 108) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v141 = v246;
  if (v246)
  {
    v142 = (unint64_t *)&v246->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "has_batch_norm");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 112) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v144 = v246;
  if (v246)
  {
    v145 = (unint64_t *)&v246->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "n_groups");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 116) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v147 = v246;
  if (v246)
  {
    v148 = (unint64_t *)&v246->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "n_parallel");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 120) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v150 = v246;
  if (v246)
  {
    v151 = (unint64_t *)&v246->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "start_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 124) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 64))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v153 = v246;
  if (v246)
  {
    v154 = (unint64_t *)&v246->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "start_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 126) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 64))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v156 = v246;
  if (v246)
  {
    v157 = (unint64_t *)&v246->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "total_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 130) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 64))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v159 = v246;
  if (v246)
  {
    v160 = (unint64_t *)&v246->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 92) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v162 = v246;
  if (v246)
  {
    v163 = (unint64_t *)&v246->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 94) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v165 = v246;
  if (v246)
  {
    v166 = (unint64_t *)&v246->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 80) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v168 = v246;
  if (v246)
  {
    v169 = (unint64_t *)&v246->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 82) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v171 = v246;
  if (v246)
  {
    v172 = (unint64_t *)&v246->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 84) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v174 = v246;
  if (v246)
  {
    v175 = (unint64_t *)&v246->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 86) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v177 = v246;
  if (v246)
  {
    v178 = (unint64_t *)&v246->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(float *)(a2 + 76) = (*(float (**)(void *, void **))(*(_QWORD *)v245 + 96))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v180 = v246;
  if (v246)
  {
    v181 = (unint64_t *)&v246->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *v5 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v183 = v246;
  if (v246)
  {
    v184 = (unint64_t *)&v246->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 74) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v186 = v246;
  if (v246)
  {
    v187 = (unint64_t *)&v246->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "leaky_relu_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(float *)(a2 + 36) = (*(float (**)(void *, void **))(*(_QWORD *)v245 + 96))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v189 = v246;
  if (v246)
  {
    v190 = (unint64_t *)&v246->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "deconv_out_width");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 136) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v192 = v246;
  if (v246)
  {
    v193 = (unint64_t *)&v246->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "deconv_out_height");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 140) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v195 = v246;
  if (v246)
  {
    v196 = (unint64_t *)&v246->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "dilation_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 96) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v198 = v246;
  if (v246)
  {
    v199 = (unint64_t *)&v246->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "dilation_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 98) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v201 = v246;
  if (v246)
  {
    v202 = (unint64_t *)&v246->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "low_precision_accumulation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 144) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v204 = v246;
  if (v246)
  {
    v205 = (unint64_t *)&v246->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "hint_use_winograd_win_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 148) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v207 = v246;
  if (v246)
  {
    v208 = (unint64_t *)&v246->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "Nt");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 152) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v210 = v246;
  if (v246)
  {
    v211 = (unint64_t *)&v246->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "stride_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_WORD *)(a2 + 156) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 56))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v213 = v246;
  if (v246)
  {
    v214 = (unint64_t *)&v246->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v245 + 40))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v216 = v246;
  if (v246)
  {
    v217 = (unint64_t *)&v246->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(float *)(a2 + 64) = (*(float (**)(void *, void **))(*(_QWORD *)v245 + 96))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v219 = v246;
  if (v246)
  {
    v220 = (unint64_t *)&v246->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(v243, "fused_activation_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v243, &v245);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v245 + 24))(v245, __p))
    *(float *)(a2 + 68) = (*(float (**)(void *, void **))(*(_QWORD *)v245 + 96))(v245, __p);
  if (v248 < 0)
    operator delete(__p[0]);
  v222 = v246;
  if (v246)
  {
    v223 = (unint64_t *)&v246->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  if (v244 < 0)
    operator delete(v243[0]);
  std::string::basic_string[abi:ne180100]<0>(&v245, "pad_pad_mode");
  v225 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v245);
  v226 = v225;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v245);
    if (!v226)
      goto LABEL_749;
  }
  else if (!v225)
  {
    goto LABEL_749;
  }
  std::string::basic_string[abi:ne180100]<0>(&v245, "pad_pad_mode");
  *v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v245);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v245);
LABEL_749:
  std::string::basic_string[abi:ne180100]<0>(&v245, "no_padding");
  v227 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v245);
  v228 = v227;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v245);
    if (!v228)
      goto LABEL_762;
  }
  else if (!v227)
  {
    goto LABEL_762;
  }
  std::string::basic_string[abi:ne180100]<0>(&v245, "no_padding");
  v229 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v245);
  v230 = v229;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v229)
      goto LABEL_755;
LABEL_758:
    v231 = 4;
    goto LABEL_759;
  }
  operator delete(v245);
  if (!v230)
    goto LABEL_758;
LABEL_755:
  if (v230 == 1)
  {
    v231 = 3;
LABEL_759:
    *v5 = v231;
    goto LABEL_762;
  }
  if (v230 < 0)
  {
    *(_WORD *)(a2 + 72) = 0;
    *(int16x4_t *)(a2 + 80) = vdup_n_s16(-v230);
  }
LABEL_762:
  std::string::basic_string[abi:ne180100]<0>(&v245, "total_pad_w");
  v232 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v245);
  v233 = v232;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v245);
    if (!v233)
      goto LABEL_772;
  }
  else if (!v232)
  {
    goto LABEL_772;
  }
  std::string::basic_string[abi:ne180100]<0>(&v245, "total_pad_w");
  v234 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v245);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v245);
  v228 = 0;
  *(_WORD *)(a2 + 72) = 0;
  if (v234 >= 0)
    v235 = v234;
  else
    v235 = v234 + 1;
  *(_WORD *)(a2 + 80) = v235 >> 1;
  *(_WORD *)(a2 + 82) = v234 - (v235 >> 1);
LABEL_772:
  std::string::basic_string[abi:ne180100]<0>(&v245, "total_pad_h");
  v236 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v245);
  v237 = v236;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v245);
    if (!v237)
      goto LABEL_782;
  }
  else if (!v236)
  {
    goto LABEL_782;
  }
  std::string::basic_string[abi:ne180100]<0>(&v245, "total_pad_h");
  v238 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v245);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v245);
  v228 = 0;
  *(_WORD *)(a2 + 72) = 0;
  if (v238 >= 0)
    v239 = v238;
  else
    v239 = v238 + 1;
  *(_WORD *)(a2 + 84) = v239 >> 1;
  *(_WORD *)(a2 + 86) = v238 - (v239 >> 1);
LABEL_782:
  std::string::basic_string[abi:ne180100]<0>(&v245, "stride");
  v240 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v245);
  v241 = v240;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v240)
      goto LABEL_784;
LABEL_789:
    if (!v228)
      return;
    goto LABEL_790;
  }
  operator delete(v245);
  if (!v241)
    goto LABEL_789;
LABEL_784:
  std::string::basic_string[abi:ne180100]<0>(&v245, "stride");
  v242 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v245);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v245);
  *(_WORD *)(a2 + 92) = v242;
  *(_WORD *)(a2 + 94) = v242;
  if (v228)
LABEL_790:
    Espresso::padding_params_t::simplify_legacy(v5, *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52));
}

void sub_190DB8040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::generic_serdes_object::operator[](uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v7;
  std::string *v8;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = v5;
  if (!v4)
  {
    a3[1] = 0;
LABEL_7:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = std::__shared_weak_count::lock(v4);
  a3[1] = v7;
  if (!v7)
    goto LABEL_7;
  v8 = (std::string *)(a3 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3[4] = *(_QWORD *)(a2 + 16);
  }
}

void sub_190DB8344(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_int(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "intValue");

  return v4;
}

void sub_190DB8434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

BOOL Espresso::SerDes::serdes_object_json_objc::has_key(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

id Espresso::SerDes::fast_dict_lookup(void *a1, uint64_t a2)
{
  const __CFDictionary *v3;
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  CFStringRef v7;
  id Value;

  v3 = a1;
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const UInt8 *)a2;
  else
    v5 = *(const UInt8 **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = CFStringCreateWithBytesNoCopy(0, v5, v6, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v7)
  {
    Value = (id)CFDictionaryGetValue(v3, v7);
    CFRelease(v7);

    if (Value)
      Value = Value;
  }
  else
  {

    Value = 0;
  }

  return Value;
}

void sub_190DB8580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::~serdes_object_json_objc(id *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_short(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "shortValue");

  return v4;
}

void sub_190DB86B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(Espresso::abstract_blob_container_options_aliasing *this)
{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::abstract_blob_container_options::~abstract_blob_container_options(Espresso::abstract_blob_container_options *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D9B4D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

float Espresso::SerDes::serdes_object_json_objc::get_float(uint64_t a1, uint64_t a2)
{
  void *v3;
  const char *v4;
  size_t v5;
  float v6;
  float v7;
  std::logic_error *exception;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v10 = std::string::append(&v12, "\" not found");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    v5 = strlen(v4);
    v6 = Espresso::SerDes::generic_serdes_object::try_parse_special_float_val(a2, (uint64_t)v4, v5);
  }
  else
  {
    objc_msgSend(v3, "floatValue");
  }
  v7 = v6;

  return v7;
}

void sub_190DB88F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::abstract_blob_container::~abstract_blob_container(Espresso::abstract_blob_container *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E2D8F108;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::blob_container::~blob_container(Espresso::ANERuntimeEngine::blob_container *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E2D69518;
  v2 = (char *)*((_QWORD *)this + 32);
  v3 = (char *)this + 264;
  if (v2 != (char *)this + 264)
  {
    do
    {
      free(*((void **)v2 + 7));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 33));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = v3;
  Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(this);
  v7 = (void *)*((_QWORD *)this + 35);
  if (v7)
  {
    *((_QWORD *)this + 36) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 33));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = *((_QWORD *)this + 27);
  if (v9)
  {
    v10 = *((_QWORD *)this + 28);
    v11 = (void *)*((_QWORD *)this + 27);
    if (v10 != v9)
    {
      do
      {
        v12 = *(void **)(v10 - 8);
        v10 -= 8;

      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v9;
    operator delete(v11);
  }
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  Espresso::ANERuntimeEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(Espresso::ANERuntimeEngine::blob_container *this)
{
  id *v2;
  id *v3;
  id v4;
  id *v5;
  void *v6;

  v2 = (id *)*((_QWORD *)this + 27);
  v3 = (id *)*((_QWORD *)this + 28);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      objc_msgSend(v4, "cleanup");

      ++v2;
    }
    while (v2 != v3);
    v5 = (id *)*((_QWORD *)this + 27);
    v2 = (id *)*((_QWORD *)this + 28);
    if (v2 != v5)
    {
      do
      {
        v6 = *--v2;

      }
      while (v2 != v5);
      v2 = v5;
    }
  }
  *((_QWORD *)this + 28) = v2;
}

void sub_190DB8B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<float,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11F0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_BOOL(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "BOOLValue");

  return v4;
}

void sub_190DB8D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::convolution_kernel::~convolution_kernel(Espresso::ANERuntimeEngine::convolution_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D77DB8;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D78048;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D77DB8;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D78048;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::on_dealloc(Espresso *this, void *a2)
{
  BOOL v3;
  _QWORD block[5];

  if (Espresso::onceToken != -1)
    dispatch_once(&Espresso::onceToken, &__block_literal_global_3_11108);
  if (Espresso::alloc_dbg_queue)
    v3 = Espresso::debug_allocated_mem == 0;
  else
    v3 = 1;
  if (!v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso10on_deallocEPv_block_invoke_2;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_async((dispatch_queue_t)Espresso::alloc_dbg_queue, block);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::convolution_kernel_cpu::~convolution_kernel_cpu(void **this)
{
  *this = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  *this = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  *this = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  *this = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void Espresso::abstract_batch::~abstract_batch(Espresso::abstract_batch *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E2D67058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<float,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1190;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::analysis_pass_graph_coloring::~analysis_pass_graph_coloring(Espresso::analysis_pass_graph_coloring *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D97B28;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  Espresso::analysis_pass_graph_coloring::~analysis_pass_graph_coloring(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANERuntimeEngine::mix_activation_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D7A1C8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  *(_QWORD *)this = &off_1E2D770D8;
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D7A1C8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  *(_QWORD *)this = &off_1E2D770D8;
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = a1 + 24;
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 80);
  v4 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::context_cpu::~context_cpu(id *this)
{
  *this = &off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  Espresso::abstract_context::~abstract_context(this);
}

{
  *this = &off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  Espresso::abstract_context::~abstract_context(this);
}

{
  *this = &off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(*(_QWORD **)(a1 + 256));
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  std::__tree<std::string>::destroy(a1 + 192, *(char **)(a1 + 200));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 120));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::concat_kernel::~concat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::stir_slice_kernel::~stir_slice_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::pass_unpack_layers::~pass_unpack_layers(Espresso::pass_unpack_layers *this)
{
  *(_QWORD *)this = &off_1E2D83E40;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 24);
  Espresso::net_pass::~net_pass(this);
}

{
  *(_QWORD *)this = &off_1E2D83E40;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 24);
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::context_metal::~context_metal(id *this)
{

  Espresso::abstract_context::~abstract_context(this);
}

{
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANERuntimeEngine::deconvolution_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D79180;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D79418;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D79180;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D79418;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::context_cpu>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(Espresso::generic_inner_product_kernel *this)
{
  *(_QWORD *)this = off_1E2D98338;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 528);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  *(_QWORD *)this = off_1E2D97660;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::MPSBuffersEngine::context::~context(id *this)
{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
}

{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::context>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 200);
  *(_QWORD *)(v1 + 24) = &off_1E2D5F9E8;
  v1 += 24;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 144);
  Espresso::abstract_context::~abstract_context((id *)v1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void Espresso::ANERuntimeEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::deconvolution_kernel_cpu::~deconvolution_kernel_cpu(void **this)
{
  *this = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  *this = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  *this = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  *this = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::copy_kernel::~copy_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANERuntimeEngine::mix_inner_product_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::general_concat_kernel::~general_concat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_squeeze_kernel::~mix_squeeze_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 53);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 53);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  *this = off_1E2D8A8E8;
  v4 = this + 49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  v2 = this[40];
  if (v2)
  {
    this[41] = v2;
    operator delete(v2);
  }
  v3 = this[37];
  if (v3)
  {
    this[38] = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_pool_kernel::~generic_pool_kernel(Espresso::generic_pool_kernel *this)
{
  *(_QWORD *)this = off_1E2D96B38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::ANERuntimeEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::split_kernel::~split_kernel(Espresso::ANERuntimeEngine::split_kernel *this)
{
  void **v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D74760;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D74760;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::__on_zero_shared(uint64_t a1)
{
  Espresso::interpreter_state_t::~interpreter_state_t((Espresso::interpreter_state_t *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::load_constant_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(Espresso::generic_load_constant_kernel *this)
{
  *(_QWORD *)this = off_1E2D98558;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  *(_QWORD *)this = off_1E2D974C8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::ANERuntimeEngine::load_constant_kernel::~load_constant_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::upsample_kernel::~upsample_kernel(Espresso::ANERuntimeEngine::upsample_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76680;
  v2 = (void **)((char *)this + 352);
  *((_QWORD *)this + 44) = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76680;
  v2 = (void **)((char *)this + 352);
  *((_QWORD *)this + 44) = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_pool_kernel::~mix_pool_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_kernel>::__on_zero_shared(id *a1)
{
  Espresso::generic_inner_product_kernel *v2;

  v2 = (Espresso::generic_inner_product_kernel *)(a1 + 3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 73));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

uint64_t std::__shared_ptr_emplace<Espresso::layer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAAC30;
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAAC30;
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>::~meta_texarray_kernel(void **a1)
{
  void **v2;

  *a1 = &off_1E2DA9A18;
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9A18;
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(Espresso::generic_context_transfer_kernel *this)
{
  *(_QWORD *)this = off_1E2D9B958;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(Espresso::inner_product_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D91CF8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 928);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 896);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 880);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 864);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 848);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 832);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 816);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 800);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 784);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 768);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 752);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 736);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 720);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 704);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 672);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 544);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::inner_product_kernel::~inner_product_kernel(void **this)
{
  *this = &off_1E2D5E138;
  BNNSFilterDestroy(this[114]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 119));
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu((Espresso::inner_product_kernel_cpu *)this);
}

{
  Espresso::BNNSEngine::inner_product_kernel::~inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(_QWORD *a1, uint64_t a2, char **a3)
{
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  const void *v37;
  unint64_t *v38;
  _QWORD *v39;
  std::string::size_type v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __int128 v77;
  const void *v78;
  _QWORD *v79;
  void *v80;
  std::string::size_type v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  _BOOL4 v85;
  char *v86;
  char *v87;
  unsigned __int8 *jj;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint8x8_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *kk;
  unint64_t v97;
  int v98;
  void *v99;
  void *v100;
  uint64_t *v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  const void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t k;
  _BYTE *m;
  uint64_t v129;
  char *v130;
  Espresso *v131;
  int v132;
  const char *v133;
  NSObject *v134;
  _BYTE *v135;
  uint64_t n;
  __int128 *ii;
  std::string::size_type size;
  uint64_t **v140;
  char *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  uint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v160;
  int v161;
  _QWORD *v162;
  uint64_t v163;
  _BOOL4 v165;
  uint64_t v166;
  _QWORD *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  size_t v175;
  __int128 *v176;
  const void *v177;
  const std::string::value_type *v178;
  std::string::size_type v179;
  std::string *v180;
  std::string::size_type v181;
  char v182;
  void *v183;
  uint64_t v184;
  unsigned __int8 *i;
  unsigned __int8 *v186;
  int v187;
  unsigned __int8 *v188;
  __int128 *j;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::runtime_error *exception;
  __int128 *v200;
  _BYTE *v201;
  uint64_t *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v206;
  char *v207;
  _QWORD *v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  char *v212;
  int v213;
  uint64_t v215;
  std::__shared_weak_count *v216;
  _OWORD v217[2];
  int v218;
  __int128 v219;
  __int128 v220;
  int v221;
  _BYTE v222[32];
  int v223;
  __int128 *v224;
  char *v225;
  std::__shared_weak_count *v226;
  void *v227[3];
  _OWORD v228[2];
  int v229;
  uint64_t v230[4];
  int v231;
  _OWORD v232[2];
  int v233;
  _QWORD v234[4];
  int v235;
  void *v236[2];
  __int128 v237;
  int v238;
  void *v239[2];
  __int128 v240;
  int v241;
  uint64_t v242[4];
  int v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint8_t buf[8];
  _BYTE v247[10];
  __int16 v248;
  int v249;
  __int128 v250;
  __int128 v251;
  std::__shared_weak_count *v252;
  __int128 v253;
  std::string v254;
  __int128 __p;
  uint64_t v256;
  uint64_t v257;
  _QWORD v258[23];

  v258[20] = *MEMORY[0x1E0C80C00];
  v212 = a3[1];
  if (*a3 == v212)
  {
    v24 = a3;
LABEL_44:
    v27 = 0;
    goto LABEL_45;
  }
  v3 = *a3;
  do
  {
    v4 = *(uint64_t **)(*(_QWORD *)v3 + 32);
    v5 = *(uint64_t **)(*(_QWORD *)v3 + 40);
    if (*(_QWORD *)(*(_QWORD *)v3 + 200))
    {
      while (v4 != v5)
      {
        v6 = *v4;
        v7 = (std::__shared_weak_count *)v4[1];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        v11 = *(_QWORD *)(v6 + 104);
        v10 = *(_QWORD *)(v6 + 112);
        while (v11 != v10)
        {
          v12 = *(_QWORD **)v11;
          v13 = *(std::__shared_weak_count **)(v11 + 8);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = v12[9] == *(_QWORD *)a2 || *(_QWORD *)a2 == 0;
          if (v16)
          {
            v256 = 0;
            *(_OWORD *)&v254.__r_.__value_.__r.__words[1] = 0u;
            __p = 0u;
            v253 = 0uLL;
            v254.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000000;
            v245 = 0;
            v244 = 0;
            (*(void (**)(_QWORD *, __int128 *, uint64_t *))(*v12 + 16))(v12, &v253, &v244);
            v17 = v245;
            if (v245)
            {
              v18 = (unint64_t *)&v245->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          if (v13)
          {
            v20 = (unint64_t *)&v13->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 += 16;
        }
        if (v7)
        {
          v22 = (unint64_t *)&v7->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v4 += 2;
      }
    }
    else if (v4 != v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "network not prepared for reshape_networks");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v3 += 8;
  }
  while (v3 != v212);
  v24 = a3;
  v25 = *a3;
  v26 = a3[1];
  if (*a3 == v26)
    goto LABEL_44;
  v27 = 0;
  do
  {
    v28 = *(_QWORD *)v25;
    v25 += 8;
    v27 += *(_QWORD *)(v28 + 160);
  }
  while (v25 != v26);
LABEL_45:
  memset(v242, 0, sizeof(v242));
  v243 = 1065353216;
  *(_OWORD *)v239 = 0u;
  v240 = 0u;
  v241 = 1065353216;
  *(_OWORD *)v236 = 0u;
  v237 = 0u;
  v238 = 1065353216;
  memset(v234, 0, sizeof(v234));
  v235 = 1065353216;
  memset(v232, 0, sizeof(v232));
  v233 = 1065353216;
  memset(v230, 0, sizeof(v230));
  v231 = 1065353216;
  memset(v228, 0, sizeof(v228));
  v229 = 1065353216;
  *(_QWORD *)&v253 = 0;
  std::vector<unsigned long>::vector(v227, v27, &v253);
  v29 = *v24;
  v210 = v24[1];
  if (*v24 == v210)
  {
    v54 = *v24;
  }
  else
  {
    do
    {
      v30 = v29;
      v31 = *(_QWORD *)v29;
      v32 = *(uint64_t **)(*(_QWORD *)v29 + 152);
      if (v32)
      {
        v33 = v31 + 184;
        v34 = (_QWORD *)(v31 + 192);
        do
        {
          v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v33, v32 + 2);
          if (v34 == v35)
          {
            v256 = 0;
            *(_OWORD *)&v254.__r_.__value_.__r.__words[1] = 0u;
            __p = 0u;
            v253 = xmmword_191A8AA80;
            v254.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
          }
          else
          {
            v36 = *(_OWORD *)(v35 + 9);
            v253 = *(_OWORD *)(v35 + 7);
            *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v36;
            v37 = (const void *)v35[12];
            v254.__r_.__value_.__r.__words[2] = v35[11];
            __p = 0uLL;
            v256 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v37, v35[13], (uint64_t)(v35[13] - (_QWORD)v37) >> 2);
          }
          v38 = (unint64_t *)(v32 + 5);
          v39 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v234, v32[5], v32 + 5);
          v40 = v254.__r_.__value_.__r.__words[2];
          v41 = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
          *((_OWORD *)v39 + 2) = v253;
          *((_OWORD *)v39 + 3) = v41;
          v39[8] = v40;
          if (v39 + 4 != (_QWORD *)&v253)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v39 + 72, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
          v42 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v232, *v38, v32 + 5);
          std::string::operator=((std::string *)(v42 + 4), (const std::string *)(v32 + 2));
          if (*(_QWORD *)(*v38 + 72) == *(_QWORD *)a2 || !*(_QWORD *)a2)
          {
            v43 = operator new(0x98uLL);
            v43[1] = 0;
            v44 = v43 + 1;
            v43[2] = 0;
            *v43 = &off_1E2DBE998;
            *((_OWORD *)v43 + 4) = 0u;
            *((_OWORD *)v43 + 5) = 0u;
            *((_OWORD *)v43 + 2) = 0u;
            *((_OWORD *)v43 + 3) = 0u;
            *((_OWORD *)v43 + 6) = 0u;
            *((_OWORD *)v43 + 7) = 0u;
            *((_OWORD *)v43 + 8) = 0u;
            v43[17] = 0;
            v43[18] = 0;
            *((_DWORD *)v43 + 12) = 1065353216;
            v43[7] = 0x1FFFFFFFFLL;
            v43[12] = 0;
            v43[13] = 0;
            v43[8] = 0;
            v43[9] = 0;
            *((_BYTE *)v43 + 88) = 0;
            v43[10] = 0;
            v43[3] = &off_1E2DA0BF0;
            v43[15] = 0;
            v43[16] = 0;
            *((_BYTE *)v43 + 144) = 0;
            *(_QWORD *)&v250 = v43 + 3;
            *((_QWORD *)&v250 + 1) = v43;
            *((_BYTE *)v43 + 112) = 1;
            v45 = *v38;
            v225 = (char *)(v43 + 3);
            v226 = (std::__shared_weak_count *)v43;
            do
              v46 = __ldxr(v44);
            while (__stxr(v46 + 1, v44));
            (*(void (**)(unint64_t, __int128 *, char **))(*(_QWORD *)v45 + 16))(v45, &v253, &v225);
            v47 = v226;
            if (v226)
            {
              v48 = (unint64_t *)&v226->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = *(_QWORD *)(v250 + 96);
            std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v230, *v38, v32 + 5)[4] = v50;
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
            if (*((_QWORD *)&v250 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      v29 = v30 + 8;
    }
    while (v30 + 8 != v210);
    v24 = a3;
    v29 = *a3;
    v54 = a3[1];
  }
  if (v54 - v29 == 8)
  {
    if (*(_QWORD *)a2)
    {
      v55 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
      v29 = *v24;
      if (v55)
      {
        v56 = *(_QWORD *)v29;
        std::string::basic_string[abi:ne180100]<0>(&v253, "colors_file");
        std::string::basic_string[abi:ne180100]<0>(&v250, "");
        Espresso::map_const_get<std::map<std::string,std::string>>(v56 + 472, (uint64_t)&v253, (uint64_t)&v250, (std::string *)v222);
        if (SBYTE7(v251) < 0)
          operator delete((void *)v250);
        if (v254.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v253);
        v57 = getenv("ESPRESSO_COLOR_FILE");
        if (v57)
          MEMORY[0x19401C808](v222, v57);
        if ((v222[23] & 0x80000000) != 0)
        {
          v58 = *(_BYTE **)v222;
          if (*(_QWORD *)&v222[8])
          {
LABEL_86:
            if (*v58 != 47)
            {
              v59 = *(_QWORD *)v29;
              if ((*(char *)(*(_QWORD *)v29 + 1047) & 0x80000000) == 0)
              {
                if (!*(_BYTE *)(*(_QWORD *)v29 + 1047))
                  goto LABEL_290;
LABEL_270:
                if (*(char *)(*(_QWORD *)v29 + 1047) >= 0)
                  v175 = *(unsigned __int8 *)(*(_QWORD *)v29 + 1047);
                else
                  v175 = *(_QWORD *)(v59 + 1032);
                v176 = &v253;
                std::string::basic_string[abi:ne180100]((uint64_t)&v253, v175 + 1);
                if (v254.__r_.__value_.__s.__data_[7] < 0)
                  v176 = (__int128 *)v253;
                if (v175)
                {
                  if (*(char *)(v59 + 1047) >= 0)
                    v177 = (const void *)(v59 + 1024);
                  else
                    v177 = *(const void **)(v59 + 1024);
                  memmove(v176, v177, v175);
                }
                *(_WORD *)((char *)v176 + v175) = 47;
                if (v222[23] >= 0)
                  v178 = v222;
                else
                  v178 = *(const std::string::value_type **)v222;
                if (v222[23] >= 0)
                  v179 = v222[23];
                else
                  v179 = *(_QWORD *)&v222[8];
                v180 = std::string::append((std::string *)&v253, v178, v179);
                v181 = v180->__r_.__value_.__r.__words[0];
                *(_QWORD *)&v250 = v180->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)&v250 + 7) = *(std::string::size_type *)((char *)&v180->__r_.__value_.__r.__words[1]
                                                                           + 7);
                v182 = HIBYTE(v180->__r_.__value_.__r.__words[2]);
                v180->__r_.__value_.__l.__size_ = 0;
                v180->__r_.__value_.__r.__words[2] = 0;
                v180->__r_.__value_.__r.__words[0] = 0;
                if ((v222[23] & 0x80000000) != 0)
                  operator delete(*(void **)v222);
                *(_QWORD *)v222 = v181;
                *(_QWORD *)&v222[8] = v250;
                *(_QWORD *)&v222[15] = *(_QWORD *)((char *)&v250 + 7);
                v222[23] = v182;
                if (v254.__r_.__value_.__s.__data_[7] < 0)
                  operator delete((void *)v253);
                goto LABEL_290;
              }
              if (*(_QWORD *)(v59 + 1032))
                goto LABEL_270;
            }
LABEL_290:
            std::ifstream::basic_ifstream(&v253);
            if (*(_DWORD *)((char *)&v254.__r_.__value_.__r.__words[2] + *(_QWORD *)(v253 - 24)))
            {
              if (v222[23] >= 0)
                v201 = v222;
              else
                v201 = *(_BYTE **)v222;
              Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot load '%s'", (uint64_t)v201);
            }
            v183 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            std::string::basic_string[abi:ne180100]<0>(&v250, "json");
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v217, (uint64_t)v183, &v250);
            if (SBYTE7(v251) < 0)
              operator delete((void *)v250);
            v184 = *(_QWORD *)&v217[0];
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)&v217[0] + 280))(*(_QWORD *)&v217[0], &v253);
            std::string::basic_string[abi:ne180100]<0>(&v250, "colors");
            (*(void (**)(uint8_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v184 + 120))(buf, v184, &v250);
            if (SBYTE7(v251) < 0)
              operator delete((void *)v250);
            v219 = 0uLL;
            *(_QWORD *)&v220 = 0;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)buf + 32))(*(_QWORD *)buf, &v219);
            v186 = (unsigned __int8 *)*((_QWORD *)&v219 + 1);
            for (i = (unsigned __int8 *)v219; i != v186; i += 24)
            {
              v187 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, i);
              v188 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*(_QWORD *)v29 + 136), i);
              if (!v188)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v242, *((_QWORD *)v188 + 5), (_QWORD *)v188 + 5)+ 8) = v187;
            }
            for (j = *(__int128 **)(*(_QWORD *)v29 + 152); j; j = *(__int128 **)j)
            {
              std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)&v250, j + 1);
              if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v242[0], v242[1], *((unint64_t *)&v251 + 1)))
              {
                v200 = &v250;
                if (SBYTE7(v251) < 0)
                  v200 = (__int128 *)v250;
                v224 = v200;
                Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("missing color for: %s", &v224);
              }
              v190 = v252;
              if (v252)
              {
                v191 = (unint64_t *)&v252->__shared_owners_;
                do
                  v192 = __ldaxr(v191);
                while (__stlxr(v192 - 1, v191));
                if (!v192)
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                }
              }
              if (SBYTE7(v251) < 0)
                operator delete((void *)v250);
            }
            Espresso::allocate_blobs((Espresso *)v242, (const char *)v230, v234);
            *a1 = 0;
            a1[1] = 0;
            *(_QWORD *)&v250 = &v219;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
            v193 = *(std::__shared_weak_count **)v247;
            if (*(_QWORD *)v247)
            {
              v194 = (unint64_t *)(*(_QWORD *)v247 + 8);
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            v196 = (std::__shared_weak_count *)*((_QWORD *)&v217[0] + 1);
            if (*((_QWORD *)&v217[0] + 1))
            {
              v197 = (unint64_t *)(*((_QWORD *)&v217[0] + 1) + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            *(_QWORD *)&v253 = *MEMORY[0x1E0DE4F40];
            *(_QWORD *)((char *)&v253 + *(_QWORD *)(v253 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
            MEMORY[0x19401C8BC](&v254);
            std::istream::~istream();
            MEMORY[0x19401CCD0](v258);
            if ((v222[23] & 0x80000000) != 0)
              operator delete(*(void **)v222);
            goto LABEL_147;
          }
          operator delete(*(void **)v222);
        }
        else if (v222[23])
        {
          v58 = v222;
          goto LABEL_86;
        }
        v29 = *v24;
      }
    }
  }
  v60 = v24[1];
  if (v29 == v60)
    goto LABEL_123;
  v61 = 0;
  do
  {
    v62 = *(unsigned __int8 **)(*(_QWORD *)v29 + 232);
    v63 = *(_QWORD *)v29 + 240;
    if (v62 != (unsigned __int8 *)v63)
    {
      do
      {
        v64 = *(_QWORD *)v29 + 136;
        *(_QWORD *)&v253 = v62 + 32;
        v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, v62 + 32, (__int128 **)&v253);
        v67 = (unint64_t *)(v65 + 40);
        v66 = *((_QWORD *)v65 + 5);
        if (v66)
        {
          if (*(_QWORD *)(v66 + 72) == *(_QWORD *)a2 || *(_QWORD *)a2 == 0)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v242, v66, v67)+ 8) = v61;
            v69 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v230, *v67, v67);
            *((_QWORD *)v227[0] + v61) = v69[4];
            std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>((uint64_t)v239, *((_QWORD *)v65 + 5), *((_QWORD *)v65 + 5), *((_QWORD *)v65 + 6));
            ++v61;
          }
        }
        v70 = (unsigned __int8 *)*((_QWORD *)v62 + 1);
        if (v70)
        {
          do
          {
            v71 = v70;
            v70 = *(unsigned __int8 **)v70;
          }
          while (v70);
        }
        else
        {
          do
          {
            v71 = (unsigned __int8 *)*((_QWORD *)v62 + 2);
            v16 = *(_QWORD *)v71 == (_QWORD)v62;
            v62 = v71;
          }
          while (!v16);
        }
        v62 = v71;
      }
      while (v71 != (unsigned __int8 *)v63);
    }
    v29 += 8;
  }
  while (v29 != v60);
  v72 = *v24;
  v207 = v24[1];
  if (*v24 == v207)
    goto LABEL_123;
  do
  {
    v211 = v72;
    v73 = *(_QWORD *)v72 + 184;
    v74 = *(_QWORD *)v72 + 152;
    v75 = *(_QWORD *)v72 + 192;
    while (1)
    {
      v74 = *(_QWORD *)v74;
      if (!v74)
        break;
      v76 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v73, (_QWORD *)(v74 + 16));
      if ((_QWORD *)v75 == v76)
      {
        v256 = 0;
        *(_OWORD *)&v254.__r_.__value_.__r.__words[1] = 0u;
        __p = 0u;
        v253 = xmmword_191A8AA80;
        v254.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
      }
      else
      {
        v77 = *(_OWORD *)(v76 + 9);
        v253 = *(_OWORD *)(v76 + 7);
        *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v77;
        v78 = (const void *)v76[12];
        v254.__r_.__value_.__r.__words[2] = v76[11];
        __p = 0uLL;
        v256 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v78, v76[13], (uint64_t)(v76[13] - (_QWORD)v78) >> 2);
      }
      v79 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v234, *(_QWORD *)(v74 + 40), (_QWORD *)(v74 + 40));
      v80 = (void *)v79[9];
      v81 = v254.__r_.__value_.__r.__words[2];
      v82 = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
      *((_OWORD *)v79 + 2) = v253;
      *((_OWORD *)v79 + 3) = v82;
      v79[8] = v81;
      if (v80)
      {
        v79[10] = v80;
        operator delete(v80);
        v79[9] = 0;
        v79[10] = 0;
        v79[11] = 0;
      }
      *(_OWORD *)(v79 + 9) = __p;
      v79[11] = v256;
      v83 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v232, *(_QWORD *)(v74 + 40), (_QWORD *)(v74 + 40));
      std::string::operator=((std::string *)(v83 + 4), (const std::string *)(v74 + 16));
    }
    v72 = v211 + 8;
  }
  while (v211 + 8 != v207);
  if (*a3 == a3[1])
  {
LABEL_123:
    v250 = 0u;
    v251 = 0u;
    LODWORD(v252) = 1065353216;
    goto LABEL_124;
  }
  v84 = *(_QWORD *)*a3;
  std::string::basic_string[abi:ne180100]<0>(&v250, "nitro");
  std::string::basic_string[abi:ne180100]<0>(v222, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v84 + 472, (uint64_t)&v250, (uint64_t)v222, (std::string *)&v253);
  if (v254.__r_.__value_.__s.__data_[7] < 0)
  {
    v85 = *((_QWORD *)&v253 + 1) == 1 && *(unsigned __int8 *)v253 == 49;
    operator delete((void *)v253);
  }
  else
  {
    v85 = v254.__r_.__value_.__s.__data_[7] == 1 && v253 == 49;
  }
  if ((v222[23] & 0x80000000) != 0)
    operator delete(*(void **)v222);
  if (SBYTE7(v251) < 0)
    operator delete((void *)v250);
  v103 = (uint64_t *)*a3;
  v102 = (uint64_t *)a3[1];
  v250 = 0u;
  v251 = 0u;
  LODWORD(v252) = 1065353216;
  v203 = v102;
  if (v103 != v102)
  {
    v213 = !v85;
    do
    {
      memset(v222, 0, sizeof(v222));
      v223 = 1065353216;
      if (*(_QWORD *)a2)
        v104 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
      else
        v104 = 40000;
      v105 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*v103 + 528), v104);
      if (v105)
      {
        v106 = v105;
        v107 = (const void *)v105[3];
        v206 = (std::__shared_weak_count *)v106[4];
        if (v206)
        {
          v108 = (unint64_t *)&v206->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        if (v107)
        {
          if (v208)
          {
            if (v206)
            {
              v110 = (unint64_t *)&v206->__shared_owners_;
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            if (*(_QWORD *)a2)
            {
              v219 = 0u;
              v220 = 0u;
              v221 = 1065353216;
              v112 = v208[4];
              if (v208[5] != v112)
              {
                v113 = 0;
                do
                {
                  memset(v217, 0, sizeof(v217));
                  v218 = 1065353216;
                  v114 = *(_DWORD *)(v112 + 120 * v113);
                  v115 = (v114 - 1);
                  if (v114 >= 1)
                  {
                    v116 = *(_QWORD *)(*(_QWORD *)(*v103 + 32) + 16 * (v114 - 1));
                    v117 = *(const void **)(v116 + 64);
                    if (v117)
                    {
                      {
                        v118 = *(std::__shared_weak_count **)(v116 + 72);
                        if (v118)
                        {
                          v119 = (unint64_t *)&v118->__shared_owners_;
                          do
                            v120 = __ldxr(v119);
                          while (__stxr(v120 + 1, v119));
                          do
                            v121 = __ldaxr(v119);
                          while (__stlxr(v121 - 1, v119));
                          if (!v121)
                          {
                            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                            std::__shared_weak_count::__release_weak(v118);
                          }
                        }
                        v122 = *v103 + 96;
                        *(_QWORD *)&v253 = v115;
                        v123 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v122, v115, &v253);
                        v124 = v123[3];
                        v125 = v123[4];
                        while (v124 != v125)
                        {
                          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v217, v124, v124);
                          v124 += 24;
                        }
                      }
                    }
                  }
                  std::unordered_set<std::string>::unordered_set((uint64_t)&v253, v112 + 120 * v113 + 16);
                  v126 = v115;
                  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, v112 + 120 * v113 + 56);
                  std::unordered_set<std::string>::unordered_set((uint64_t)&v257, (uint64_t)v217);
                  for (k = 0; k != 3; ++k)
                  {
                    for (m = (char *)&v253 + 40 * k + 16;
                          ;
                          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v219, (uint64_t)(m + 16), (uint64_t)(m + 16)))
                    {
                      m = *(_BYTE **)m;
                      if (!m)
                        break;
                      v129 = *v103 + 136;
                      *(_QWORD *)buf = m + 16;
                      v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v129, m + 16, (__int128 **)buf);
                      v131 = (Espresso *)Espresso::allocate_and_color_blob((_QWORD *)m + 2, (uint64_t)(v130 + 40), (uint64_t)v239, (uint64_t)v242, (uint64_t)&v250, *v103, v27, 0, v230[0], v230[1], v227);
                      v132 = (int)v131;
                      Espresso::espresso_os_log_subsystem(v131, v133);
                      v134 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
                      {
                        v135 = m + 16;
                        if ((char)m[39] < 0)
                          v135 = (_BYTE *)*((_QWORD *)m + 2);
                        *(_DWORD *)buf = 67109634;
                        *(_DWORD *)&buf[4] = v113;
                        *(_WORD *)v247 = 2080;
                        *(_QWORD *)&v247[2] = v135;
                        v248 = 1024;
                        v249 = v132;
                        _os_log_debug_impl(&dword_190DAF000, v134, OS_LOG_TYPE_DEBUG, "GColor segment=%d blob=%s color=%d", buf, 0x18u);
                      }

                    }
                  }
                  for (n = 80; n != -40; n -= 40)
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v253 + n);
                  Espresso::deallocate_dead_blobs(v239, v126 & ~(v126 >> 31), v236, *v103, (uint64_t *)v222);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v217);
                  ++v113;
                  v112 = v208[4];
                }
                while (0xEEEEEEEEEEEEEEEFLL * ((v208[5] - v112) >> 3) > v113);
              }
              for (ii = *(__int128 **)(*v103 + 152); ii; ii = *(__int128 **)ii)
              {
                std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)&v253, ii + 1);
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v219, (uint64_t)&v253))
                {
                  size = v254.__r_.__value_.__l.__size_;
                  if (*(_QWORD *)(v254.__r_.__value_.__l.__size_ + 72) == *(_QWORD *)a2 || *(_QWORD *)a2 == 0)
                  {
                    v140 = (uint64_t **)(*v103 + 184);
                    *(_QWORD *)&v217[0] = &v253;
                    v141 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v140, &v253, (__int128 **)v217);
                    v215 = 0;
                    v216 = 0;
                    (*(void (**)(std::string::size_type, char *, uint64_t *))(*(_QWORD *)size + 16))(size, v141 + 56, &v215);
                    v142 = v216;
                    if (v216)
                    {
                      v143 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v144 = __ldaxr(v143);
                      while (__stlxr(v144 - 1, v143));
                      if (!v144)
                      {
                        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                        std::__shared_weak_count::__release_weak(v142);
                      }
                    }
                  }
                }
                v145 = (std::__shared_weak_count *)v254.__r_.__value_.__r.__words[2];
                if (v254.__r_.__value_.__r.__words[2])
                {
                  v146 = (unint64_t *)(v254.__r_.__value_.__r.__words[2] + 8);
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                if (v254.__r_.__value_.__s.__data_[7] < 0)
                  operator delete((void *)v253);
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v219);
              v148 = v206;
              v149 = v206;
              if (v206)
                goto LABEL_257;
              goto LABEL_260;
            }
            v149 = v206;
            goto LABEL_228;
          }
        }
      }
      else
      {
        v206 = 0;
      }
      v149 = 0;
LABEL_228:
      v150 = *(uint64_t **)(*v103 + 32);
      v209 = *(uint64_t **)(*v103 + 40);
      if (v150 == v209)
      {
        v148 = v206;
        if (!v149)
          goto LABEL_260;
        goto LABEL_257;
      }
      v204 = v149;
      v151 = 0;
      do
      {
        v152 = *(_QWORD *)(*v150 + 112) - *(_QWORD *)(*v150 + 104);
        if (v152)
        {
          v153 = 0;
          v154 = 0;
          v155 = v152 >> 4;
          if (v155 <= 1)
            v156 = 1;
          else
            v156 = v155;
          while (2)
          {
            v157 = *v150;
            v158 = *(_QWORD *)(*v150 + 104) + v153;
            if (*(_QWORD *)(*(_QWORD *)v158 + 72) != *(_QWORD *)a2 && *(_QWORD *)a2 != 0)
              goto LABEL_252;
            v160 = (_QWORD *)(v157 + 40);
            v161 = *(char *)(v157 + 63);
            if (v161 < 0)
            {
              if (*(_QWORD *)(v157 + 48) != 13)
                goto LABEL_250;
              v160 = (_QWORD *)*v160;
            }
            else if (v161 != 13)
            {
LABEL_250:
              v165 = 0;
              goto LABEL_251;
            }
            v162 = (_QWORD *)*v160;
            v163 = *(_QWORD *)((char *)v160 + 5);
            v165 = v162 == (_QWORD *)0x6E6F635F64616F6CLL && v163 == 0x746E6174736E6F63;
LABEL_251:
            v166 = *v103 + 96;
            *(_QWORD *)&v253 = v151;
            v167 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v166, v151, &v253);
            Espresso::allocate_and_color_blob((_QWORD *)(v167[3] + v154), v158, (uint64_t)v239, (uint64_t)v242, (uint64_t)&v250, *v103, v27, v213 & v165, v230[0], v230[1], v227);
LABEL_252:
            v154 += 24;
            v153 += 16;
            if (!--v156)
              break;
            continue;
          }
        }
        Espresso::deallocate_dead_blobs(v239, v151++, v236, *v103, (uint64_t *)v222);
        v150 += 2;
      }
      while (v150 != v209);
      v148 = v206;
      v149 = v204;
      if (!v204)
        goto LABEL_260;
LABEL_257:
      v168 = v148;
      v169 = (unint64_t *)&v149->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      v148 = v168;
      if (v170)
      {
LABEL_260:
        if (v148)
          goto LABEL_261;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
        v148 = v168;
        if (v168)
        {
LABEL_261:
          v171 = v148;
          v172 = (unint64_t *)&v148->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            v174 = v171;
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v222);
      ++v103;
    }
    while (v103 != v203);
  }
LABEL_124:
  Espresso::allocate_blobs((Espresso *)v242, (const char *)v230, v234);
  v253 = 0u;
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = 0u;
  LODWORD(v254.__r_.__value_.__r.__words[2]) = 1065353216;
  v86 = *a3;
  v87 = a3[1];
  if (*a3 != v87)
  {
    do
    {
      for (jj = *(unsigned __int8 **)(*(_QWORD *)v86 + 152); jj; jj = *(unsigned __int8 **)jj)
      {
        if (v242[1])
        {
          v89 = *((_QWORD *)jj + 5);
          v90 = 0x9DDFEA08EB382D69 * (((8 * v89) + 8) ^ HIDWORD(v89));
          v91 = 0x9DDFEA08EB382D69 * (HIDWORD(v89) ^ (v90 >> 47) ^ v90);
          v92 = 0x9DDFEA08EB382D69 * (v91 ^ (v91 >> 47));
          v93 = (uint8x8_t)vcnt_s8((int8x8_t)v242[1]);
          v93.i16[0] = vaddlv_u8(v93);
          if (v93.u32[0] > 1uLL)
          {
            v94 = v92;
            if (v92 >= v242[1])
              v94 = v92 % v242[1];
          }
          else
          {
            v94 = v92 & (v242[1] - 1);
          }
          v95 = *(_QWORD **)(v242[0] + 8 * v94);
          if (v95)
          {
            for (kk = (_QWORD *)*v95; kk; kk = (_QWORD *)*kk)
            {
              v97 = kk[1];
              if (v97 == v92)
              {
                if (kk[2] == v89)
                {
                  v98 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v242, v89, (_QWORD *)jj + 5)+ 8);
                  *(_QWORD *)v222 = jj + 16;
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v253, jj + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v222)+ 10) = v98;
                  break;
                }
              }
              else
              {
                if (v93.u32[0] > 1uLL)
                {
                  if (v97 >= v242[1])
                    v97 %= v242[1];
                }
                else
                {
                  v97 &= v242[1] - 1;
                }
                if (v97 != v94)
                  break;
              }
            }
          }
        }
      }
      v86 += 8;
    }
    while (v86 != v87);
  }
  std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(a1, (uint64_t)&v253, (uint64_t)v227);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v254.__r_.__value_.__l.__data_);
  v99 = (void *)v253;
  *(_QWORD *)&v253 = 0;
  if (v99)
    operator delete(v99);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v250);
LABEL_147:
  if (v227[0])
  {
    v227[1] = v227[0];
    operator delete(v227[0]);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v228);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v230);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table((uint64_t)v232);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table((uint64_t)v234);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((_QWORD *)v237);
  if (v236[0])
    operator delete(v236[0]);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((_QWORD *)v240);
  v100 = v239[0];
  v239[0] = 0;
  if (v100)
    operator delete(v100);
  return std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v242);
}

void sub_190DBB458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a68;
  char a72;
  void *v73;

  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  if (a46 < 0)
    operator delete(a41);
  if (a53)
    operator delete(a53);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a56);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&a62);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table((uint64_t)&a68);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a72);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((_QWORD *)STACK[0x230]);
  if (STACK[0x220])
    operator delete((void *)STACK[0x220]);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((_QWORD *)STACK[0x260]);
  v73 = (void *)STACK[0x250];
  STACK[0x250] = 0;
  if (v73)
    operator delete(v73);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x60uLL);
  v40[0] = v15;
  v40[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  v16 = a3[1];
  *((_QWORD *)v15 + 2) = *a3;
  *((_QWORD *)v15 + 3) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_QWORD *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_OWORD *)v15 + 2) = xmmword_191A8AA80;
  *((_QWORD *)v15 + 6) = 0xFFFFFFFF00000001;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_190DBBCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL4 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  void *lpsrc;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  _OWORD v37[2];

  v5 = *(std::__shared_weak_count **)(a3 + 8);
  v36[0] = *(_QWORD *)a3;
  v36[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::ANECompilerEngine::blob_container::resize(a1, a2, (uint64_t)v36);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *(std::__shared_weak_count **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (*(_QWORD *)a3)
  {
    v12 = v11;
    lpsrc = 0;
    v35 = 0;
    if (v11)
    {
      v13 = *((_BYTE *)v11 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&lpsrc, v11[13], v11[14]);
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    lpsrc = 0;
    v35 = 0;
  }
  if (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    if (v13)
    {
      v14 = *(_OWORD *)(a1 + 176);
      v37[0] = *(_OWORD *)(a1 + 160);
      v37[1] = v14;
      compute_for_iosurface_params((uint64_t)v29, (int *)v37, *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 192), *(_DWORD **)(a1 + 128), *(_QWORD *)(a1 + 136));
      v12[12] = v30 * v31;
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      goto LABEL_42;
    }
    v15 = *(std::__shared_weak_count **)(a1 + 248);
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    if (lpsrc && *((_DWORD *)lpsrc + 6) * *((_DWORD *)lpsrc + 5) == *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20))
    {
      if (v16)
      {
        v17 = v35;
        if (v35)
        {
          v18 = (unint64_t *)&v35->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
          do
            v21 = __ldxr(p_shared_weak_owners);
          while (__stxr(v21 + 1, p_shared_weak_owners));
          v22 = 0;
          goto LABEL_35;
        }
      }
      else
      {
        v17 = 0;
      }
      v22 = 1;
LABEL_35:
      v23 = *(std::__shared_weak_count **)(a1 + 248);
      *(_QWORD *)(a1 + 240) = v16;
      *(_QWORD *)(a1 + 248) = v17;
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      if ((v22 & 1) == 0)
      {
        v24 = (unint64_t *)&v17->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  else if (v13)
  {
    v12[12] = 0;
  }
LABEL_42:
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_190DBBF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  void *__p;
  void *v30;

  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("espresso.aneruntime.tmp_allow_batching"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "BOOLValue") & 1) != 0)
  {

  }
  else
  {
    v9 = *(_DWORD *)(a1 + 200);

    if (!v9)
      goto LABEL_7;
  }
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 <= 1)
    v10 = 1;
  *(_DWORD *)(a1 + 204) = v10 * *(_DWORD *)(a1 + 20);
LABEL_7:
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a1 + 124);
  v11 = *(int **)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) - (_QWORD)v11 != 4)
    goto LABEL_41;
  v12 = *v11;
  v13 = 4;
  if (v12 <= 843264055)
  {
    if (v12 > 759967847)
    {
      if (v12 <= 792872768)
      {
        if (v12 == 759967848)
          goto LABEL_39;
        v14 = 760375361;
        goto LABEL_37;
      }
      if (v12 != 792872769)
      {
        if (v12 == 793522280)
          goto LABEL_39;
        v14 = 793929793;
        goto LABEL_37;
      }
    }
    else
    {
      if (v12 <= 642527335)
      {
        if (v12 == 641877825)
          goto LABEL_40;
        v15 = 642527288;
LABEL_33:
        if (v12 != v15)
          goto LABEL_41;
        goto LABEL_39;
      }
      if (v12 == 642527336)
        goto LABEL_39;
      if (v12 != 642934849)
      {
        v14 = 759318337;
        goto LABEL_37;
      }
    }
LABEL_40:
    *(_DWORD *)(a1 + 192) = v13;
    goto LABEL_41;
  }
  if (v12 <= 1380411456)
  {
    if ((v12 - 843264056) <= 0x30 && ((1 << (v12 - 56)) & 0x1400000000001) != 0)
    {
      v13 = 2;
      goto LABEL_40;
    }
    if ((v12 - 1278226488) > 0x30 || ((1 << (v12 - 56)) & 0x1400000000001) == 0)
    {
      v14 = 1111970369;
      goto LABEL_37;
    }
LABEL_39:
    v13 = 1;
    goto LABEL_40;
  }
  if (v12 <= 2084718400)
  {
    if (v12 == 1380411457)
      goto LABEL_40;
    v15 = 1751411059;
    goto LABEL_33;
  }
  if (v12 == 2084718401)
    goto LABEL_40;
  if (v12 == 2085367912)
    goto LABEL_39;
  v14 = 2085775425;
LABEL_37:
  if (v12 == v14)
    goto LABEL_40;
LABEL_41:
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("espresso.aneruntime.interleave_factor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "intValue"))
  {
    v17 = *(_DWORD *)(a1 + 124);

    if (v17 > 1)
      goto LABEL_45;
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("espresso.aneruntime.interleave_factor"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a1 + 192) = objc_msgSend(v16, "intValue");
  }

LABEL_45:
  v18 = *((_DWORD *)a2 + 6);
  if (v18)
    v19 = v18;
  else
    v19 = 64;
  compiler_compute_for_iosurface_params((uint64_t)v26, (int *)(a1 + 160), *(_DWORD *)(a1 + 196), v19, *(_DWORD *)(a1 + 192), *(_DWORD **)(a1 + 128), *(_QWORD *)(a1 + 136));
  if (*(_QWORD *)a3)
  {
    if (v20)
    {
      v21 = *(std::__shared_weak_count **)(a3 + 8);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      if (*((_BYTE *)v20 + 88))
        v20[12] = v27 * v28;
      if (v21)
      {
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }

}

void sub_190DBC348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *Espresso::abstract_blob_container::set_shape(Espresso::abstract_blob_container *this, const Espresso::layer_shape *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v2 = *((_DWORD *)a2 + 5);
  v3 = *(_DWORD *)a2;
  if (v2 == -1)
  {
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 1);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 2);
    v6 = *((_DWORD *)a2 + 3);
    if (*((_DWORD *)a2 + 4) == 1)
      v7 = 4;
    else
      v7 = 5;
  }
  else
  {
    if (v2 < 1)
      v3 = 1;
    *((_DWORD *)this + 2) = v3;
    v4 = *((_DWORD *)a2 + 1);
    if (v2 <= 1)
      v4 = 1;
    *((_DWORD *)this + 3) = v4;
    v5 = *((_DWORD *)a2 + 2);
    if (v2 <= 2)
      v5 = 1;
    *((_DWORD *)this + 4) = v5;
    v6 = *((_DWORD *)a2 + 3);
    if (v2 <= 3)
      v6 = 1;
    v7 = v2;
  }
  *((_DWORD *)this + 5) = v6;
  v8 = *((_DWORD *)a2 + 4);
  if (v7 <= 4)
    v8 = 1;
  *((_DWORD *)this + 6) = v8;
  *((_DWORD *)this + 7) = v2;
  *((_OWORD *)this + 2) = *(_OWORD *)((char *)a2 + 24);
  result = (char *)this + 48;
  if (result != (char *)a2 + 40)
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(result, *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  return result;
}

double compiler_compute_for_iosurface_params(uint64_t a1, int *a2, int a3, unint64_t a4, int a5, _DWORD *a6, uint64_t a7)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v28;
  double result;
  uint64_t v30;

  v8 = a2[1];
  v9 = *a2 * (uint64_t)(((int)v8 - 1) / a5 + 1) * a2[2] * (uint64_t)a2[3];
  v10 = a7 - (_QWORD)a6;
  if ((_DWORD *)a7 == a6)
  {
    if ((a3 - 1) > 0xC)
      v23 = 4;
    else
      v23 = qword_191AC0CA0[a3 - 1];
    v30 = a2[4] * (uint64_t)a5;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = a4 + a4 * ((v23 * v30 - 1) / a4);
    *(_QWORD *)(a1 + 24) = v23;
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    return result;
  }
  v11 = 0;
  v12 = 0;
  v13 = v10 >> 2;
  if ((unint64_t)(v10 >> 2) <= 1)
    v14 = 1;
  else
    v14 = v10 >> 2;
  do
  {
    v15 = a6[v11];
    if (v15 <= 875836533)
    {
      if (v15 <= 875704421)
      {
        if (v15 == 641230384 || v15 == 641234480)
LABEL_24:
          ++v12;
      }
      else if (v15 == 875704422 || v15 == 875704438 || v15 == 875836518)
      {
        goto LABEL_24;
      }
    }
    else if (v15 > 1886859823)
    {
      if (v15 == 1886859824 || v15 == 2019963440 || v15 == 2016686640)
        goto LABEL_24;
    }
    else if (v15 == 875836534 || v15 == 1882468912 || v15 == 1885745712)
    {
      goto LABEL_24;
    }
    ++v11;
  }
  while (v14 != v11);
  if (v13 == v12)
  {
    v9 /= v8;
  }
  else if (v12)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible surfaces.");
  }
  v24 = 0;
  v25 = 0;
  do
  {
    v26 = a6[v24];
    if (v26 == 706956392 || v26 == 707153000)
      ++v25;
    ++v24;
  }
  while (v14 != v24);
  if (v13 == v25)
  {
    v9 /= v8;
    if (v25)
    {
      *(_QWORD *)a1 = a2[4];
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v28 = (_QWORD *)(a1 + 40);
      goto LABEL_57;
    }
  }
  else if (v25)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible surfaces: mix of multi-slice and non-multi-slice formats specified.");
  }
  *(_QWORD *)a1 = a2[4];
  *(_QWORD *)(a1 + 8) = v9;
  v28 = (_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
LABEL_57:
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28, a6, a7, v13);
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x38uLL);
  v40[0] = v15;
  v40[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_190DBCAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = (std::string *)(v14 + 16);
  v17 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_DWORD *)v14 + 10) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_41:
    *v26 = v14;
    goto LABEL_42;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190DBCD40(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::allocate_and_color_blob(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, uint64_t a9, unint64_t a10, _QWORD *a11)
{
  _QWORD *v18;
  unint64_t v19;
  _QWORD *i;
  _QWORD *v21;
  uint64_t *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v37;
  void *__p;

  v18 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(a9, a10, *(_QWORD *)a2);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v19 = v18[4];
  LOBYTE(v37) = 1;
  std::vector<BOOL>::vector(&__p, a7, (unsigned __int8 *)&v37);
  for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
  {
    v21 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(a4, i[2], i + 2);
    *(_QWORD *)((char *)__p + (((unint64_t)*((int *)v21 + 8) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *((_DWORD *)v21 + 8));
  }
  v22 = *(uint64_t **)(a5 + 16);
  if (v22)
  {
    v23 = (char *)__p;
    do
    {
      *(_QWORD *)&v23[((unint64_t)*((int *)v22 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << *((_DWORD *)v22 + 4));
      v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  v24 = 0;
  v25 = 0;
  v37 = 256;
  v26 = 0xFFFFFFFFLL;
  while (1)
  {
    v27 = v24;
    if (a7)
      break;
LABEL_21:
    v24 = 1;
    v25 = 1;
    if ((v27 & 1) != 0)
      goto LABEL_24;
  }
  v28 = 0;
  v29 = 0;
  v30 = *((unsigned __int8 *)&v37 + v25);
  while (1)
  {
    if (((*(_QWORD *)((char *)__p + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      goto LABEL_19;
    v31 = *(_QWORD *)(*a11 + 8 * v28);
    if (!v30 && v19 > v31)
      goto LABEL_19;
    v32 = v31 - v19;
    if (v19 > v31)
      v32 = v19 - v31;
    if (v32 >= v29 && (v26 & 0x80000000) == 0)
      goto LABEL_19;
    if (!v31)
      break;
    v26 = v28;
    v29 = v32;
LABEL_19:
    if (a7 == ++v28)
    {
      if ((v26 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_21;
    }
  }
  v26 = v28;
  if ((v28 & 0x80000000) != 0)
    goto LABEL_21;
LABEL_24:
  v33 = *(_QWORD *)a2;
  if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)a2))
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(a4, v33, (_QWORD *)a2)+ 8) = v26;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a6 + 264), a1))
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a5, v26, v26);
    }
    if (a8)
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a5, v26, v26);
    v34 = *(_QWORD *)(*a11 + 8 * (int)v26);
    if (v34 <= v19)
      v34 = v19;
    *(_QWORD *)(*a11 + 8 * (int)v26) = v34;
    v33 = *(_QWORD *)a2;
  }
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>(a3, v33, v33, *(_QWORD *)(a2 + 8));
  if (__p)
    operator delete(__p);
  return v26;
}

void sub_190DBCFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v40[0] = v15;
  v40[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_DWORD *)v15 + 8) = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_190DBD420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v29[2];
  char v30;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x20uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v17[2] = a3;
  v17[3] = a4;
  if (a4)
  {
    v18 = (unint64_t *)(a4 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *v17 = *v27;
LABEL_41:
    *v27 = v17;
    goto LABEL_42;
  }
  *v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v26 + 8 * v4) = v16;
  if (*v17)
  {
    v28 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
}

void sub_190DBD69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void compute_for_iosurface_params(uint64_t a1, int *a2, int a3, int a4, _DWORD *a5, uint64_t a6)
{
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  char v21;

  compiler_compute_for_iosurface_params((uint64_t)v17, a2, a3, 0x40uLL, a4, a5, a6);
  v10 = v17[0];
  v11 = v17[1];
  v12 = v18;
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
  v16 = v21;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  v7 = __p;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (uint64_t)v14;
  v9 = (v14 - v7) >> 2;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 40), v7, v8, v9);
  *(_BYTE *)(a1 + 64) = v16;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_190DBD928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_190DBDB4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_190DBDE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::shape_network_recursive(Espresso *this, Espresso::net *a2, const Espresso::network_shape *a3, int a4)
{
  Espresso *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  const void **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  int v41;
  void *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  const char *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  BOOL v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  BOOL v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t i;
  uint64_t v106;
  uint64_t j;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  __int128 *v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  char v134;
  char v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  __int128 v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  char *v160;
  __int128 v161;
  int64x2_t v162;
  uint64_t v163;
  _QWORD **v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t *blob_container;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  char *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  char v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  __int128 v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  char *v216;
  __int128 v217;
  int64x2_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned __int8 *v223;
  uint64_t v224;
  int v225;
  int v226;
  void *v228;
  int v229;
  unint64_t v230;
  _QWORD *v231;
  const void *v232;
  _QWORD *v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD **v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  char *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  char v250;
  char *v251;
  __int128 v252;
  const void *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  __int128 v264;
  uint64_t v265;
  char *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  char *k;
  uint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  __int128 v299;
  __int128 *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  __int128 *v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  char *v319;
  __int128 v320;
  _QWORD *v321;
  _QWORD *v322;
  std::__shared_weak_count *v323;
  BOOL v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  const std::string *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::runtime_error *exception;
  int v343;
  std::__shared_weak_count *v344;
  _QWORD *v345;
  _QWORD *v346;
  std::__shared_weak_count *v347;
  unsigned int v348;
  int v349;
  int v350;
  char v351;
  char v352;
  uint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t **v362;
  char v363[16];
  std::__shared_weak_count *v364;
  __int128 *v365;
  std::__shared_weak_count *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count *v368;
  unsigned __int8 *v369;
  std::__shared_weak_count *v370;
  std::__shared_weak_count *v371;
  std::__shared_weak_count *v372;
  __int128 *v373;
  std::__shared_weak_count *v374;
  _BYTE v375[40];
  __int128 __p;
  uint64_t v377;
  std::__shared_weak_count *v378;
  std::__shared_weak_count *v379;
  unsigned int v380;
  char *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  __int128 *v386;
  _BYTE buf[56];
  __int128 v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;

  v343 = (int)a3;
  v5 = this;
  v391 = *MEMORY[0x1E0C80C00];
  Espresso::net::_tag_inputs_and_outputs(this);
  if ((Espresso *)((char *)v5 + 184) != a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v5 + 23, *(__int128 **)a2, (__int128 *)((char *)a2 + 8));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v5 + 26, *((__int128 **)a2 + 3), (__int128 *)a2 + 2);
  }
  v362 = (uint64_t **)((char *)v5 + 184);
  v381 = 0;
  v6 = *((_QWORD *)v5 + 4);
  v354 = (uint64_t *)v5;
  if (*((_QWORD *)v5 + 5) != v6)
  {
    v7 = 0;
    v360 = (uint64_t)v5 + 96;
    v359 = (uint64_t)v5 + 56;
    v8 = (uint64_t **)((char *)v5 + 352);
    v9 = (_QWORD *)((char *)v5 + 360);
    do
    {
      v10 = *(_QWORD *)(v6 + 16 * v7);
      v11 = (_QWORD *)(v10 + 40);
      v12 = *(char *)(v10 + 63);
      if (v12 < 0)
      {
        if (*(_QWORD *)(v10 + 48) == 16)
        {
          v11 = (_QWORD *)*v11;
LABEL_10:
          v14 = (_QWORD *)*v11;
          v13 = v11[1];
          v15 = v14 == (_QWORD *)0x5F747865746E6F63 && v13 == 0x726566736E617274;
          if (v15)
          {
            *(_QWORD *)buf = &v381;
            v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v360, (unint64_t *)&v381, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            *(_QWORD *)buf = &v381;
            v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v359, (unint64_t *)&v381, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            v18 = v16[3];
            if (v16[4] != v18)
            {
              v19 = v17;
              v20 = 0;
              v21 = 0;
              do
              {
                v22 = (_QWORD *)v354[24];
                if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v22, (_QWORD *)(v18 + v20)))
                {
                  v23 = v19[3];
                  if (v21 < 0xAAAAAAAAAAAAAAABLL * ((v19[4] - v23) >> 3))
                  {
                    v24 = (_QWORD *)(v23 + v20);
                    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v22, (_QWORD *)(v23 + v20)))
                    {
                      *(_QWORD *)buf = v24;
                      v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v362, v24, (__int128 **)buf);
                      *(_QWORD *)buf = v16[3] + v20;
                      v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v362, *(_QWORD **)buf, (__int128 **)buf);
                      v27 = *(_OWORD *)(v25 + 56);
                      v28 = *(_OWORD *)(v25 + 72);
                      *((_QWORD *)v26 + 11) = *((_QWORD *)v25 + 11);
                      *(_OWORD *)(v26 + 72) = v28;
                      *(_OWORD *)(v26 + 56) = v27;
                      if (v26 != v25)
                        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v26 + 96, *((char **)v25 + 12), *((_QWORD *)v25 + 13), (uint64_t)(*((_QWORD *)v25 + 13) - *((_QWORD *)v25 + 12)) >> 2);
                    }
                  }
                }
                if (*(_BYTE *)(v354[2] + 54))
                {
                  v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v8, (_QWORD *)(v19[3] + v20));
                  if (v9 != v29)
                  {
                    v30 = v16[3];
                    *(_OWORD *)buf = *(_OWORD *)(v29 + 7);
                    memset(&buf[16], 0, 24);
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[16], (const void *)v29[9], v29[10], (uint64_t)(v29[10] - v29[9]) >> 2);
                    *(_QWORD *)v375 = v30 + v20;
                    v31 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (_QWORD *)(v30 + v20), (uint64_t)&std::piecewise_construct, (__int128 **)v375);
                    *(_OWORD *)(v31 + 56) = *(_OWORD *)buf;
                    if (v31 + 56 != buf)
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v31 + 72, *(char **)&buf[16], *(uint64_t *)&buf[24], (uint64_t)(*(_QWORD *)&buf[24] - *(_QWORD *)&buf[16]) >> 2);
                    if (*(_QWORD *)&buf[16])
                    {
                      *(_QWORD *)&buf[24] = *(_QWORD *)&buf[16];
                      operator delete(*(void **)&buf[16]);
                    }
                  }
                }
                ++v21;
                v18 = v16[3];
                v20 += 24;
              }
              while (v21 < 0xAAAAAAAAAAAAAAABLL * ((v16[4] - v18) >> 3));
            }
          }
        }
      }
      else if (v12 == 16)
      {
        goto LABEL_10;
      }
      v7 = (unint64_t)(v381 + 1);
      v381 = (char *)v7;
      v5 = (Espresso *)v354;
      v6 = v354[4];
    }
    while (v7 < (v354[5] - v6) >> 4);
  }
  v32 = (const void **)((char *)v5 + 16);
  (*(void (**)(_QWORD, Espresso *))(**((_QWORD **)v5 + 2) + 64))(*((_QWORD *)v5 + 2), v5);
  v33 = (uint64_t)v354;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v34 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>(v354 + 140, (uint64_t)v375);
  v35 = v34;
  v36 = (uint64_t)v362;
  if (!v34)
  {
    v46 = 0;
    goto LABEL_47;
  }
  v37 = (const void *)v34[3];
  v38 = (std::__shared_weak_count *)v35[4];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v41 = a4;
  if (!v37
  {
    v46 = 0;
    v43 = 0;
    if (v38)
      goto LABEL_41;
LABEL_47:
    v49 = operator new(0x58uLL);
    v49[1] = 0;
    v49[2] = 0;
    *v49 = &off_1E2DBBB38;
    v49[3] = &off_1E2D83E40;
    v50 = (char *)(v49 + 3);
    v49[10] = 0;
    *((_OWORD *)v49 + 3) = 0u;
    *((_OWORD *)v49 + 4) = 0u;
    *((_OWORD *)v49 + 2) = 0u;
    *((_DWORD *)v49 + 20) = 1065353216;
    *(_QWORD *)v375 = v49 + 3;
    *(_QWORD *)&v375[8] = v49;
    Espresso::espresso_os_log_subsystem((Espresso *)v49, v51);
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = (unint64_t)"N8Espresso18pass_unpack_layersE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v52, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
    }

    v33 = (uint64_t)v354;
    (*(void (**)(_BYTE *__return_ptr, char *, uint64_t *))(*(_QWORD *)v50 + 24))(buf, v50, v354);
    LOBYTE(v381) = 0;
    (*(void (**)(char *, char **))(*(_QWORD *)v50 + 16))(v50, &v381);
    v36 = (uint64_t)v362;
    if ((_BYTE)v381)
    {
      if (buf[0])
        Espresso::net::set_analysis<Espresso::analysis_result>((uint64_t)v354, (uint64_t *)&buf[8]);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>(v354 + 140, (uint64_t)"N8Espresso27analysis_pass_unpack_layersE");
    }
    v53 = *(std::__shared_weak_count **)&buf[16];
    v41 = a4;
    if (*(_QWORD *)&buf[16])
    {
      v54 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)&v375[8];
    if (*(_QWORD *)&v375[8])
    {
      v57 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_66;
  }
  if (!v38)
  {
    v46 = 0;
    goto LABEL_66;
  }
  v43 = v42;
  v44 = (unint64_t *)&v38->__shared_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v46 = v38;
LABEL_41:
  v47 = (unint64_t *)&v38->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
    if (!v43)
      goto LABEL_47;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v43)
      goto LABEL_47;
  }
LABEL_66:
  v344 = v46;
  if (!Espresso::net::is_root_module((Espresso::net *)v33) && *(_QWORD *)(v33 + 224))
    Espresso::throw_exception_selector<Espresso::generic_error>("only root module can have globals");
  v59 = *(unsigned __int8 **)(v33 + 208);
  v60 = (unsigned __int8 *)(v33 + 216);
  if (v59 != (unsigned __int8 *)(v33 + 216))
  {
    do
    {
      Espresso::net::get_global(v375, v33, v59 + 32);
      v61 = *(_QWORD *)v375;
      if (!*(_QWORD *)v375)
      {
        LODWORD(v381) = (***((uint64_t (****)(_QWORD))*v32 + 1))(*((_QWORD *)*v32 + 1));
        Espresso::abstract_blob_container::make((uint64_t)v32, (int *)&v381, (unsigned int *)(**(_QWORD **)(v33 + 32) + 12), buf);
        v62 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v63 = *(std::__shared_weak_count **)&v375[8];
        *(_OWORD *)v375 = v62;
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v61 = *(_QWORD *)v375;
      }
      if (!v41)
        goto LABEL_85;
      Espresso::abstract_blob_container::shape(buf, v61);
      v69 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)(v59 + 56));
      if (*(_QWORD *)&buf[40])
      {
        *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
        operator delete(*(void **)&buf[40]);
      }
      if (!v69)
      {
LABEL_85:
        v384 = 0;
        v385 = 0;
        (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v61 + 16))(v61, (_QWORD *)v59 + 7, &v384);
        v70 = v385;
        if (v385)
        {
          v71 = (unint64_t *)&v385->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        Espresso::net::set_global((uint64_t)v354, (__int128 *)v59 + 2, (uint64_t *)v375);
      }
      v73 = *(std::__shared_weak_count **)&v375[8];
      if (*(_QWORD *)&v375[8])
      {
        v74 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = *(unsigned __int8 **)v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (unsigned __int8 *)*((_QWORD *)v59 + 2);
          v15 = *(_QWORD *)v77 == (_QWORD)v59;
          v59 = v77;
        }
        while (!v15);
      }
      v59 = v77;
      v33 = (uint64_t)v354;
    }
    while (v77 != v60);
  }
  v349 = *((unsigned __int8 *)*v32 + 44);
  if (*((_BYTE *)*v32 + 127)
  {
    v78 = *(std::__shared_weak_count **)(v33 + 24);
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
      do
        v81 = __ldaxr(v79);
      while (__stlxr(v81 - 1, v79));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v349 = 0;
  }
  v82 = (_QWORD *)(v33 + 136);
  if (v41)
  {
    v83 = *(_QWORD **)(v33 + 152);
    while (v83)
    {
      if ((_QWORD *)(v33 + 192) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v36, v83 + 2))goto LABEL_117;
      Espresso::abstract_blob_container::shape(buf, v83[5]);
      v84 = std::map<std::string,Espresso::blob_numerical_properties>::at(v36, v83 + 2);
      v85 = Espresso::layer_shape::operator==((uint64_t)buf, v84);
      if (*(_QWORD *)&buf[40])
      {
        *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
        operator delete(*(void **)&buf[40]);
      }
      if (v85)
      {
LABEL_117:
        v83 = (_QWORD *)*v83;
      }
      else
      {
        v86 = (_QWORD *)*v83;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)buf, (_QWORD *)(v33 + 136), v83);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        v83 = v86;
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(v33 + 136);
  }
  v381 = 0;
  v382 = 0;
  v383 = 0;
  v87 = *(_QWORD **)(v33 + 32);
  v88 = *(_QWORD **)(v33 + 40);
  if (v87 == v88)
  {
    LOBYTE(v348) = 0;
    goto LABEL_390;
  }
  v352 = 0;
  v89 = *(_QWORD **)(v33 + 32);
  do
  {
    v90 = *v89 + 40;
    v91 = *(char *)(*v89 + 63);
    if (v91 < 0)
    {
      if (*(_QWORD *)(*v89 + 48) != 5)
      {
LABEL_135:
        v95 = 0;
        goto LABEL_136;
      }
      v90 = *(_QWORD *)v90;
    }
    else if (v91 != 5)
    {
      goto LABEL_135;
    }
    v92 = *(_DWORD *)v90;
    v93 = *(unsigned __int8 *)(v90 + 4);
    v95 = v92 == 1667854946 && v93 == 107;
LABEL_136:
    v352 |= v95;
    v89 += 2;
  }
  while (v89 != v88);
  v348 = 0;
  v356 = v33 + 96;
  v361 = (_QWORD *)(v33 + 192);
  v353 = v33 + 56;
  v358 = 0;
  v345 = *(_QWORD **)(v33 + 40);
  do
  {
    v97 = *v87;
    v96 = (std::__shared_weak_count *)v87[1];
    if (v96)
    {
      v98 = (unint64_t *)&v96->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v346 = v87;
    v347 = v96;
    v350 = *(_DWORD *)(v97 + 8);
    v380 = *(_DWORD *)(v97 + 12);
    v100 = *(_QWORD *)(v97 + 64);
    v102 = *(std::__shared_weak_count **)(v100 + 8);
    v101 = *(std::__shared_weak_count **)(v100 + 16);
    v378 = v102;
    v379 = v101;
    if (v101)
    {
      v103 = (unint64_t *)&v101->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v106 = *(_QWORD *)(v97 + 104);
    for (i = *(_QWORD *)(v97 + 112); i != v106; i = std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16))
      ;
    *(_QWORD *)(v97 + 112) = v106;
    v108 = *(_QWORD *)(v97 + 80);
    for (j = *(_QWORD *)(v97 + 88); j != v108; j = std::shared_ptr<void>::~shared_ptr[abi:ne180100](j - 16))
      ;
    *(_QWORD *)(v97 + 88) = v108;
    *(_QWORD *)buf = v358;
    v109 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v356, v358, buf);
    v110 = v109[4] - v109[3];
    if (v110)
    {
      v111 = 0;
      v112 = v110 / 24;
      if (v112 <= 1)
        v112 = 1;
      v355 = v112;
      v113 = v348;
      while (1)
      {
        *(_QWORD *)buf = v358;
        v114 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v356, v358, buf)[3]+ 24 * v111);
        if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v82, v114))break;
        v115 = v113;
LABEL_197:
        v138 = v115;
        *(_QWORD *)buf = v114;
        v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, v114, (__int128 **)buf);
        v140 = v139;
        v141 = *(_QWORD **)(v97 + 112);
        v142 = *(_QWORD *)(v97 + 120);
        if ((unint64_t)v141 >= v142)
        {
          v147 = *(_QWORD *)(v97 + 104);
          v148 = ((uint64_t)v141 - v147) >> 4;
          v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v150 = v142 - v147;
          if (v150 >> 3 > v149)
            v149 = v150 >> 3;
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
            v151 = 0xFFFFFFFFFFFFFFFLL;
          else
            v151 = v149;
          *(_QWORD *)&buf[32] = v97 + 120;
          v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v151);
          v154 = &v152[16 * v148];
          v155 = *(_OWORD *)(v140 + 40);
          *(_OWORD *)v154 = v155;
          if (*((_QWORD *)&v155 + 1))
          {
            v156 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
            do
              v157 = __ldxr(v156);
            while (__stxr(v157 + 1, v156));
          }
          v159 = *(_QWORD **)(v97 + 104);
          v158 = *(_QWORD **)(v97 + 112);
          if (v158 == v159)
          {
            v162 = vdupq_n_s64((unint64_t)v158);
            v160 = &v152[16 * v148];
          }
          else
          {
            v160 = &v152[16 * v148];
            do
            {
              v161 = *((_OWORD *)v158 - 1);
              v158 -= 2;
              *((_OWORD *)v160 - 1) = v161;
              v160 -= 16;
              *v158 = 0;
              v158[1] = 0;
            }
            while (v158 != v159);
            v162 = *(int64x2_t *)(v97 + 104);
          }
          v146 = v154 + 16;
          *(_QWORD *)(v97 + 104) = v160;
          *(_QWORD *)(v97 + 112) = v154 + 16;
          *(int64x2_t *)&buf[8] = v162;
          v163 = *(_QWORD *)(v97 + 120);
          *(_QWORD *)(v97 + 120) = &v152[16 * v153];
          *(_QWORD *)&buf[24] = v163;
          *(_QWORD *)buf = v162.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *v141 = *((_QWORD *)v139 + 5);
          v143 = *((_QWORD *)v139 + 6);
          v141[1] = v143;
          if (v143)
          {
            v144 = (unint64_t *)(v143 + 8);
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
          }
          v146 = v141 + 2;
        }
        *(_QWORD *)(v97 + 112) = v146;
        v115 = v138;
LABEL_218:
        ++v111;
        v113 = v115;
        if (v111 == v355)
          goto LABEL_249;
      }
      v377 = 0;
      *(_OWORD *)&v375[24] = 0u;
      __p = 0u;
      *(_OWORD *)v375 = xmmword_191A8AA80;
      *(_QWORD *)&v375[16] = 0xFFFFFFFF00000001;
      v116 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v362, v114);
      if (v361 == v116)
      {
        *(_QWORD *)buf = v358;
        v118 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v353, v358, buf);
        std::vector<Espresso::layer_shape>::vector(&v373, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118[4] - v118[3]) >> 3));
        *(_QWORD *)buf = v358;
        v119 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v353, v358, buf);
        v120 = (_QWORD *)v119[3];
        v121 = (_QWORD *)v119[4];
        if (v120 != v121)
        {
          v122 = 0;
          do
          {
            *(_QWORD *)&v388 = 0;
            memset(&buf[24], 0, 32);
            *(_OWORD *)buf = xmmword_191A8AA80;
            *(_QWORD *)&buf[16] = 0xFFFFFFFF00000001;
            v123 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v362, v120);
            if (v361 != v123)
            {
              v124 = *(_OWORD *)(v123 + 9);
              *(_OWORD *)buf = *(_OWORD *)(v123 + 7);
              *(_OWORD *)&buf[16] = v124;
              *(_QWORD *)&buf[32] = v123[11];
              if (buf != (_BYTE *)(v123 + 7))
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], (char *)v123[12], v123[13], (uint64_t)(v123[13] - v123[12]) >> 2);
            }
            v125 = &v373[v122];
            v126 = *(_OWORD *)buf;
            v127 = *(_OWORD *)&buf[16];
            *((_QWORD *)v125 + 4) = *(_QWORD *)&buf[32];
            *v125 = v126;
            v125[1] = v127;
            if (v125 != (__int128 *)buf)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v125 + 40, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(_QWORD *)&buf[48] - *(_QWORD *)&buf[40]) >> 2);
            if (*(_QWORD *)&buf[40])
            {
              *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
              operator delete(*(void **)&buf[40]);
            }
            v120 += 3;
            v122 += 4;
          }
          while (v120 != v121);
        }
        (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 **))(**(_QWORD **)(v97 + 64) + 64))(buf, *(_QWORD *)(v97 + 64), &v373);
        v33 = (uint64_t)v354;
        if (v111 >= (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 6)
        {
          *(_QWORD *)&v375[32] = 0;
          *(_QWORD *)&v131 = 0x100000001;
          *((_QWORD *)&v131 + 1) = 0x100000001;
          *(_OWORD *)v375 = v131;
          *(_OWORD *)&v375[16] = 0xFFFFFFFF00000001;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          __p = 0uLL;
          v377 = 0;
        }
        else
        {
          v128 = *(_QWORD *)buf + (v111 << 6);
          v129 = *(_OWORD *)v128;
          v130 = *(_OWORD *)(v128 + 16);
          *(_QWORD *)&v375[32] = *(_QWORD *)(v128 + 32);
          *(_OWORD *)v375 = v129;
          *(_OWORD *)&v375[16] = v130;
          if (v375 != (_BYTE *)v128)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(v128 + 40), *(_QWORD *)(v128 + 48), (uint64_t)(*(_QWORD *)(v128 + 48) - *(_QWORD *)(v128 + 40)) >> 2);
        }
        v386 = (__int128 *)v114;
        v132 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v362, v114, &v386);
        v133 = *(_OWORD *)&v375[16];
        *(_OWORD *)(v132 + 56) = *(_OWORD *)v375;
        *(_OWORD *)(v132 + 72) = v133;
        *((_QWORD *)v132 + 11) = *(_QWORD *)&v375[32];
        if (v132 + 56 != v375)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v132 + 96, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
        v369 = buf;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v369);
        *(_QWORD *)buf = &v373;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        v117 = *(_OWORD *)(v116 + 9);
        *(_OWORD *)v375 = *(_OWORD *)(v116 + 7);
        *(_OWORD *)&v375[16] = v117;
        *(_QWORD *)&v375[32] = v116[11];
        if (v375 != (_BYTE *)(v116 + 7))
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v116[12], v116[13], (uint64_t)(v116[13] - v116[12]) >> 2);
      }
      if ((v352 & 1) != 0 && !*(_QWORD *)(v33 + 968))
      {
        v135 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, *(int32x4_t *)&v375[4])));
        if (*(_DWORD *)&v375[20] == -1)
          v136 = *(_DWORD *)&v375[16] != 1;
        else
          v136 = *(_DWORD *)&v375[20] == 5;
        if (*(_DWORD *)&v375[16])
          v136 = 0;
        v134 = 1;
        if ((v135 & 1) == 0 && *(int *)v375 >= 1)
        {
          v115 = 1;
          if (v136)
            goto LABEL_194;
          goto LABEL_182;
        }
      }
      else
      {
        v134 = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_s32(*(int32x4_t *)&v375[4]))) & 1) == 0)
        {
          v115 = 1;
          if ((*(_DWORD *)v375 & 0x80000000) != 0)
            goto LABEL_194;
LABEL_182:
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v82, v114))
          {
            (*(void (**)(__int128 **__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v97 + 64)
                                                                                               + 24))(&v373, *(_QWORD *)(v97 + 64), 1, v111);
            v164 = *(_QWORD ***)(v97 + 64);
            v371 = v378;
            v372 = v379;
            if (v379)
            {
              v165 = (unint64_t *)&v379->__shared_owners_;
              do
                v166 = __ldxr(v165);
              while (__stxr(v166 + 1, v165));
            }
            blob_container = (uint64_t *)Espresso::make_blob_container(v350, &v380, v33, v164, &v371, (__int128 *)v114, 1, v111);
            *(_QWORD *)buf = v114;
            v168 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, v114, (__int128 **)buf);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v168 + 5, *blob_container, blob_container[1]);
            v169 = v372;
            if (v372)
            {
              v170 = (unint64_t *)&v372->__shared_owners_;
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            if (!v349)
            {
              v369 = v114;
              v175 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, v114, (__int128 **)&v369);
              _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_((uint64_t)buf, *((_QWORD *)v175 + 5), *((_QWORD *)v175 + 6), (__int128 *)v375, &v373);
              v176 = v382;
              if ((unint64_t)v382 >= v383)
              {
                v179 = std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>((void **)&v381, (__int128 *)buf);
                v180 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
                v382 = v179;
                if (*((_QWORD *)&v390 + 1))
                {
                  v181 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              else
              {
                *(_OWORD *)v382 = *(_OWORD *)buf;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                v177 = *(_QWORD *)&buf[48];
                v178 = *(_OWORD *)&buf[32];
                *((_OWORD *)v176 + 1) = *(_OWORD *)&buf[16];
                *((_OWORD *)v176 + 2) = v178;
                *((_QWORD *)v176 + 6) = v177;
                *((_QWORD *)v176 + 7) = 0;
                *((_QWORD *)v176 + 8) = 0;
                *((_QWORD *)v176 + 9) = 0;
                *(_OWORD *)(v176 + 56) = v388;
                *((_QWORD *)v176 + 9) = v389;
                v388 = 0uLL;
                v389 = 0;
                *((_OWORD *)v176 + 5) = v390;
                v390 = 0uLL;
                v382 = v176 + 96;
              }
              if ((_QWORD)v388)
              {
                *((_QWORD *)&v388 + 1) = v388;
                operator delete((void *)v388);
              }
              v183 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v184 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
            }
            v172 = v374;
            if (v374)
            {
              v173 = (unint64_t *)&v374->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
          }
          v134 = 0;
          v115 = v113;
LABEL_194:
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            v137 = v115;
            operator delete((void *)__p);
            v115 = v137;
          }
          if ((v134 & 1) != 0)
            goto LABEL_218;
          goto LABEL_197;
        }
      }
      v115 = 1;
      goto LABEL_194;
    }
    LODWORD(v115) = v348;
LABEL_249:
    v348 = v115;
    v186 = *(std::__shared_weak_count **)(v33 + 976);
    v373 = *(__int128 **)(v33 + 968);
    v374 = v186;
    if (v186)
    {
      v187 = (unint64_t *)&v186->__shared_owners_;
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    *(_QWORD *)buf = v358;
    v189 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v353, v358, buf);
    v190 = v189[3];
    v191 = v189[4];
    if (v190 != v191)
    {
      v192 = 0;
      if (v349)
        v193 = v358 == 0;
      else
        v193 = 1;
      v194 = !v193;
      v351 = v194;
      while (1)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v82, (unsigned __int8 *)v190))
        {
          goto LABEL_261;
        }
        v219 = v191;
        if (!v373)
          goto LABEL_304;
        Espresso::map_const_get<std::unordered_map<std::string,std::string>>((std::string *)buf, (_QWORD *)v373 + 23, v190, v190);
        if (buf[23] >= 0)
          v220 = buf[23];
        else
          v220 = *(_QWORD *)&buf[8];
        v221 = *(unsigned __int8 *)(v190 + 23);
        v222 = (char)v221;
        if ((v221 & 0x80u) != 0)
          v221 = *(_QWORD *)(v190 + 8);
        if (v220 == v221)
        {
          if (v222 >= 0)
            v223 = (unsigned __int8 *)v190;
          else
            v223 = *(unsigned __int8 **)v190;
          if ((buf[23] & 0x80) != 0)
          {
            v228 = *(void **)buf;
            v229 = memcmp(*(const void **)buf, v223, *(size_t *)&buf[8]);
            operator delete(v228);
            if (!v229)
              goto LABEL_304;
          }
          else
          {
            if (!buf[23])
              goto LABEL_304;
            v224 = 0;
            do
            {
              v225 = buf[v224];
              v226 = v223[v224];
            }
            while (v225 == v226 && buf[23] - 1 != v224++);
            if (v225 == v226)
            {
LABEL_304:
              (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v97 + 64)
                                                                                              + 24))(&v369, *(_QWORD *)(v97 + 64), 0, v192);
              v232 = *(const void **)(v97 + 64);
              if (v232)
              {
                if (v233)
                {
                  v234 = v233;
                  v235 = *(std::__shared_weak_count **)(v97 + 72);
                  *(_QWORD *)buf = v233;
                  *(_QWORD *)&buf[8] = v235;
                  if (v235)
                  {
                    v236 = (unint64_t *)&v235->__shared_owners_;
                    do
                      v237 = __ldxr(v236);
                    while (__stxr(v237 + 1, v236));
                  }
                  v350 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v233 + 320))(v233) + 16);
                  v380 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v234 + 320))(v234) + 24);
                  v238 = v234[41];
                  if (v238)
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v378, v238, v234[42]);
                  if (v235)
                  {
                    v239 = (unint64_t *)&v235->__shared_owners_;
                    do
                      v240 = __ldaxr(v239);
                    while (__stlxr(v240 - 1, v239));
                    if (!v240)
                    {
                      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                      std::__shared_weak_count::__release_weak(v235);
                    }
                  }
                }
              }
              v241 = *(_QWORD ***)(v97 + 64);
              v367 = v378;
              v368 = v379;
              if (v379)
              {
                v242 = (unint64_t *)&v379->__shared_owners_;
                do
                  v243 = __ldxr(v242);
                while (__stxr(v243 + 1, v242));
              }
              v244 = (uint64_t *)Espresso::make_blob_container(v350, &v380, v33, v241, &v367, (__int128 *)v190, 0, v192);
              v191 = v219;
              *(_QWORD *)buf = v190;
              v245 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, (unsigned __int8 *)v190, (__int128 **)buf);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v245 + 5, *v244, v244[1]);
              v246 = v368;
              if (v368)
              {
                v247 = (unint64_t *)&v368->__shared_owners_;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
              v249 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v33 + 240), (_QWORD *)v190);
              v250 = v351;
              if (v249)
                v250 = 0;
              if ((v250 & 1) == 0)
              {
                *(_QWORD *)buf = v190;
                v251 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v362, (_QWORD *)v190, (__int128 **)buf);
                v252 = *(_OWORD *)(v251 + 72);
                *(_OWORD *)v375 = *(_OWORD *)(v251 + 56);
                *(_OWORD *)&v375[16] = v252;
                v253 = (const void *)*((_QWORD *)v251 + 12);
                *(_QWORD *)&v375[32] = *((_QWORD *)v251 + 11);
                __p = 0uLL;
                v377 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v253, *((_QWORD *)v251 + 13), (uint64_t)(*((_QWORD *)v251 + 13) - (_QWORD)v253) >> 2);
                v386 = (__int128 *)v190;
                v254 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, (unsigned __int8 *)v190, &v386);
                _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_((uint64_t)buf, *((_QWORD *)v254 + 5), *((_QWORD *)v254 + 6), (__int128 *)v375, &v369);
                v255 = v382;
                if ((unint64_t)v382 >= v383)
                {
                  v266 = std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>((void **)&v381, (__int128 *)buf);
                  v267 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
                  v382 = v266;
                  if (*((_QWORD *)&v390 + 1))
                  {
                    v268 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
                    do
                      v269 = __ldaxr(v268);
                    while (__stlxr(v269 - 1, v268));
                    if (!v269)
                    {
                      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                      std::__shared_weak_count::__release_weak(v267);
                    }
                  }
                }
                else
                {
                  *(_OWORD *)v382 = *(_OWORD *)buf;
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = 0;
                  v256 = *(_QWORD *)&buf[48];
                  v257 = *(_OWORD *)&buf[32];
                  *((_OWORD *)v255 + 1) = *(_OWORD *)&buf[16];
                  *((_OWORD *)v255 + 2) = v257;
                  *((_QWORD *)v255 + 6) = v256;
                  *((_QWORD *)v255 + 7) = 0;
                  *((_QWORD *)v255 + 8) = 0;
                  *((_QWORD *)v255 + 9) = 0;
                  *(_OWORD *)(v255 + 56) = v388;
                  *((_QWORD *)v255 + 9) = v389;
                  v388 = 0uLL;
                  v389 = 0;
                  *((_OWORD *)v255 + 5) = v390;
                  v390 = 0uLL;
                  v382 = v255 + 96;
                }
                if ((_QWORD)v388)
                {
                  *((_QWORD *)&v388 + 1) = v388;
                  operator delete((void *)v388);
                }
                v270 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v271 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v272 = __ldaxr(v271);
                  while (__stlxr(v272 - 1, v271));
                  if (!v272)
                  {
                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                    std::__shared_weak_count::__release_weak(v270);
                  }
                }
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              v273 = v370;
              if (v370)
              {
                v274 = (unint64_t *)&v370->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
LABEL_261:
              *(_QWORD *)buf = v190;
              v195 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, (unsigned __int8 *)v190, (__int128 **)buf);
              v196 = v195;
              v197 = *(_QWORD **)(v97 + 88);
              v198 = *(_QWORD *)(v97 + 96);
              if ((unint64_t)v197 < v198)
              {
                *v197 = *((_QWORD *)v195 + 5);
                v199 = *((_QWORD *)v195 + 6);
                v197[1] = v199;
                if (v199)
                {
                  v200 = (unint64_t *)(v199 + 8);
                  do
                    v201 = __ldxr(v200);
                  while (__stxr(v201 + 1, v200));
                }
                v202 = v197 + 2;
                goto LABEL_341;
              }
              v203 = *(_QWORD *)(v97 + 80);
              v204 = ((uint64_t)v197 - v203) >> 4;
              v205 = v204 + 1;
              if ((unint64_t)(v204 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v206 = v198 - v203;
              if (v206 >> 3 > v205)
                v205 = v206 >> 3;
              if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0)
                v207 = 0xFFFFFFFFFFFFFFFLL;
              else
                v207 = v205;
              *(_QWORD *)&buf[32] = v97 + 96;
              v208 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v207);
              v210 = &v208[16 * v204];
              v211 = *(_OWORD *)(v196 + 40);
              *(_OWORD *)v210 = v211;
              if (*((_QWORD *)&v211 + 1))
              {
                v212 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              v215 = *(_QWORD **)(v97 + 80);
              v214 = *(_QWORD **)(v97 + 88);
              if (v214 != v215)
              {
                v216 = &v208[16 * v204];
                do
                {
                  v217 = *((_OWORD *)v214 - 1);
                  v214 -= 2;
                  *((_OWORD *)v216 - 1) = v217;
                  v216 -= 16;
                  *v214 = 0;
                  v214[1] = 0;
                }
                while (v214 != v215);
                goto LABEL_278;
              }
LABEL_339:
              v218 = vdupq_n_s64((unint64_t)v214);
              v216 = v210;
              goto LABEL_340;
            }
          }
        }
        else if ((buf[23] & 0x80) != 0)
        {
          operator delete(*(void **)buf);
        }
        *(_OWORD *)v375 = 0uLL;
        v231 = *(_QWORD **)(v97 + 88);
        v230 = *(_QWORD *)(v97 + 96);
        if ((unint64_t)v231 >= v230)
        {
          v258 = *(_QWORD *)(v97 + 80);
          v259 = ((uint64_t)v231 - v258) >> 4;
          v260 = v259 + 1;
          if ((unint64_t)(v259 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v191 = v219;
          v261 = v230 - v258;
          if (v261 >> 3 > v260)
            v260 = v261 >> 3;
          if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF0)
            v262 = 0xFFFFFFFFFFFFFFFLL;
          else
            v262 = v260;
          *(_QWORD *)&buf[32] = v97 + 96;
          v208 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v262);
          v210 = &v208[16 * v259];
          *(_QWORD *)v210 = 0;
          *((_QWORD *)v210 + 1) = 0;
          v263 = *(_QWORD **)(v97 + 80);
          v214 = *(_QWORD **)(v97 + 88);
          if (v214 == v263)
            goto LABEL_339;
          v216 = &v208[16 * v259];
          do
          {
            v264 = *((_OWORD *)v214 - 1);
            v214 -= 2;
            *((_OWORD *)v216 - 1) = v264;
            v216 -= 16;
            *v214 = 0;
            v214[1] = 0;
          }
          while (v214 != v263);
LABEL_278:
          v218 = *(int64x2_t *)(v97 + 80);
LABEL_340:
          v202 = v210 + 16;
          *(_QWORD *)(v97 + 80) = v216;
          *(_QWORD *)(v97 + 88) = v210 + 16;
          *(int64x2_t *)&buf[8] = v218;
          v265 = *(_QWORD *)(v97 + 96);
          *(_QWORD *)(v97 + 96) = &v208[16 * v209];
          *(_QWORD *)&buf[24] = v265;
          *(_QWORD *)buf = v218.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
          goto LABEL_341;
        }
        *v231 = 0;
        v231[1] = 0;
        v202 = v231 + 2;
        v191 = v219;
LABEL_341:
        *(_QWORD *)(v97 + 88) = v202;
        v192 = (v192 + 1);
        v190 += 24;
        if (v190 == v191)
        {
          v186 = v374;
          break;
        }
      }
    }
    if (v186)
    {
      v276 = (unint64_t *)&v186->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v278 = v379;
    if (v379)
    {
      v279 = (unint64_t *)&v379->__shared_owners_;
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    if (v347)
    {
      v281 = (unint64_t *)&v347->__shared_owners_;
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
      if (!v282)
      {
        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
        std::__shared_weak_count::__release_weak(v347);
      }
    }
    ++v358;
    v87 = v346 + 2;
  }
  while (v346 + 2 != v345);
  v283 = *(_QWORD *)(v33 + 32);
  v284 = *(_QWORD *)(v33 + 40);
  *(_QWORD *)v375 = 0;
  if (v284 == v283)
  {
    v36 = (uint64_t)v362;
  }
  else
  {
    v285 = 0;
    v36 = (uint64_t)v362;
    do
    {
      v286 = *(_QWORD *)(*(_QWORD *)(v283 + 16 * v285) + 80);
      if (*(_QWORD *)(*(_QWORD *)(v283 + 16 * v285) + 88) != v286)
      {
        v287 = 0;
        v288 = 0;
        v289 = 0;
        do
        {
          v290 = (_QWORD *)(v286 + v287);
          if (!*(_QWORD *)(v286 + v287))
          {
            *(_QWORD *)buf = v375;
            *(_QWORD *)buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v353, (unint64_t *)v375, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3]+ v288;
            v291 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v82, *(unsigned __int8 **)buf, (__int128 **)buf);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v290, *((_QWORD *)v291 + 5), *((_QWORD *)v291 + 6));
            v285 = *(_QWORD *)v375;
            v283 = *(_QWORD *)(v33 + 32);
          }
          ++v289;
          v292 = *(_QWORD *)(v283 + 16 * v285);
          v286 = *(_QWORD *)(v292 + 80);
          v288 += 24;
          v287 += 16;
        }
        while (v289 < (*(_QWORD *)(v292 + 88) - v286) >> 4);
        v284 = *(_QWORD *)(v33 + 40);
      }
      *(_QWORD *)v375 = ++v285;
    }
    while (v285 < (v284 - v283) >> 4);
  }
LABEL_390:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 16) + 72))(*(_QWORD *)(v33 + 16), v33);
  v293 = v381;
  for (k = v382; v293 != k; v293 += 96)
  {
    v296 = *(_QWORD *)v293;
    v295 = *((_QWORD *)v293 + 1);
    *(_QWORD *)v375 = *(_QWORD *)v293;
    *(_QWORD *)&v375[8] = v295;
    if (v295)
    {
      v297 = (unint64_t *)(v295 + 8);
      do
        v298 = __ldxr(v297);
      while (__stxr(v298 + 1, v297));
    }
    v299 = *((_OWORD *)v293 + 2);
    *(_OWORD *)buf = *((_OWORD *)v293 + 1);
    *(_OWORD *)&buf[16] = v299;
    *(_QWORD *)&buf[32] = *((_QWORD *)v293 + 6);
    *(_QWORD *)&buf[48] = 0;
    *(_QWORD *)&v388 = 0;
    *(_QWORD *)&buf[40] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *((const void **)v293 + 7), *((_QWORD *)v293 + 8), (uint64_t)(*((_QWORD *)v293 + 8) - *((_QWORD *)v293 + 7)) >> 2);
    v300 = (__int128 *)*((_QWORD *)v293 + 10);
    v301 = (std::__shared_weak_count *)*((_QWORD *)v293 + 11);
    v373 = v300;
    v374 = v301;
    if (v301)
    {
      v302 = (unint64_t *)&v301->__shared_owners_;
      do
        v303 = __ldxr(v302);
      while (__stxr(v303 + 1, v302));
      v366 = v301;
      do
        v304 = __ldxr(v302);
      while (__stxr(v304 + 1, v302));
    }
    else
    {
      v366 = 0;
    }
    v365 = v300;
    (*(void (**)(uint64_t, _BYTE *, __int128 **))(*(_QWORD *)v296 + 16))(v296, buf, &v365);
    v305 = v366;
    if (v366)
    {
      v306 = (unint64_t *)&v366->__shared_owners_;
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }
    v308 = v374;
    if (v374)
    {
      v309 = (unint64_t *)&v374->__shared_owners_;
      do
        v310 = __ldaxr(v309);
      while (__stlxr(v310 - 1, v309));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }
    if (*(_QWORD *)&buf[40])
    {
      *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
      operator delete(*(void **)&buf[40]);
    }
    v311 = *(std::__shared_weak_count **)&v375[8];
    if (*(_QWORD *)&v375[8])
    {
      v312 = (unint64_t *)(*(_QWORD *)&v375[8] + 8);
      do
        v313 = __ldaxr(v312);
      while (__stlxr(v313 - 1, v312));
      if (!v313)
      {
        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
        std::__shared_weak_count::__release_weak(v311);
      }
    }
  }
  if ((v348 & 1) != 0)
  {
    *(_QWORD *)&v375[8] = 0;
    *(_QWORD *)&v375[16] = 0;
    *(_QWORD *)v375 = &v375[8];
    v314 = *(_QWORD **)(v33 + 232);
    if (v314 != (_QWORD *)(v33 + 240))
    {
      do
      {
        if (*((_BYTE *)v314 + 56))
        {
          v315 = (__int128 *)(v314 + 4);
          v316 = std::map<std::string,Espresso::blob_numerical_properties>::at(v36, v314 + 4);
          v317 = *(_OWORD *)v316;
          v318 = *(_OWORD *)(v316 + 16);
          *(_QWORD *)&buf[32] = *(_QWORD *)(v316 + 32);
          *(_OWORD *)buf = v317;
          *(_OWORD *)&buf[16] = v318;
          *(_QWORD *)&buf[48] = 0;
          *(_QWORD *)&v388 = 0;
          *(_QWORD *)&buf[40] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *(const void **)(v316 + 40), *(_QWORD *)(v316 + 48), (uint64_t)(*(_QWORD *)(v316 + 48) - *(_QWORD *)(v316 + 40)) >> 2);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_s32(*(int32x4_t *)&buf[4]))) & 1) != 0
            || (*(_DWORD *)buf & 0x80000000) != 0)
          {
            if (*((char *)v314 + 55) < 0)
              v315 = *(__int128 **)v315;
            v373 = v315;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Negative input shape: %s", &v373);
          }
          v373 = (__int128 *)(v314 + 4);
          v319 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v375, v314 + 4, &v373);
          v320 = *(_OWORD *)&buf[16];
          *(_OWORD *)(v319 + 56) = *(_OWORD *)buf;
          *(_OWORD *)(v319 + 72) = v320;
          *((_QWORD *)v319 + 11) = *(_QWORD *)&buf[32];
          if (v319 + 56 != buf)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v319 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(_QWORD *)&buf[48] - *(_QWORD *)&buf[40]) >> 2);
          if (*(_QWORD *)&buf[40])
          {
            *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
            operator delete(*(void **)&buf[40]);
          }
        }
        v321 = (_QWORD *)v314[1];
        if (v321)
        {
          do
          {
            v322 = v321;
            v321 = (_QWORD *)*v321;
          }
          while (v321);
        }
        else
        {
          do
          {
            v322 = (_QWORD *)v314[2];
            v15 = *v322 == (_QWORD)v314;
            v314 = v322;
          }
          while (!v15);
        }
        v314 = v322;
      }
      while (v322 != (_QWORD *)(v33 + 240));
    }
    if (v343 > 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Prevented shape_network stack overflow.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v323 = v344;
    Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>((uint64_t)buf, v33, (uint64_t)v375);
    Espresso::shape_network_recursive((Espresso *)v33, (Espresso::net *)buf, (const Espresso::network_shape *)(v343 + 1), 0, v324);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&buf[24], *(char **)&buf[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v375, *(char **)&v375[8]);
  }
  else
  {
    v323 = v344;
    if (v349)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "pass_graph_coloring");
      *(_QWORD *)&v375[8] = 0;
      *(_QWORD *)&v375[16] = 0;
      *(_QWORD *)v375 = &off_1E2D854F0;
      v325 = (std::__shared_weak_count *)operator new(0x30uLL);
      v325->__shared_owners_ = 0;
      v326 = (unint64_t *)&v325->__shared_owners_;
      v325->__shared_weak_owners_ = 0;
      v325->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8F8;
      v325[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D94720;
      v325[1].__shared_weak_owners_ = 0;
      v325[1].__shared_owners_ = 0x100000000;
      v378 = v325 + 1;
      v379 = v325;
      if ((_QWORD *)(v33 + 480) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v33 + 472, buf))
      {
        LODWORD(v325[1].__shared_owners_) = 1;
      }
      else
      {
        v327 = (const std::string *)std::map<std::string,Espresso::blob_numerical_properties>::at(v33 + 472, buf);
        v328 = std::stoi(v327, 0, 10);
        if ((_DWORD)v328 != 1)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("code %d is not a valid graph coloring method", v328);
        HIDWORD(v325[1].__shared_owners_) = 1;
        LOBYTE(v325[1].__shared_weak_owners_) = 1;
      }
      do
        v329 = __ldxr(v326);
      while (__stxr(v329 + 1, v326));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v375[8], (uint64_t)&v325[1], (uint64_t)v325);
      do
        v330 = __ldaxr(v326);
      while (__stlxr(v330 - 1, v326));
      if (!v330)
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
      v323 = v344;
      Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)v375, (Espresso::net *)v33, (uint64_t)v363);
      v331 = v364;
      if (v364)
      {
        v332 = (unint64_t *)&v364->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
      v334 = v379;
      if (v379)
      {
        v335 = (unint64_t *)&v379->__shared_owners_;
        do
          v336 = __ldaxr(v335);
        while (__stlxr(v336 - 1, v335));
        if (!v336)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
      *(_QWORD *)v375 = off_1E2DA6C90;
      v337 = *(std::__shared_weak_count **)&v375[16];
      if (*(_QWORD *)&v375[16])
      {
        v338 = (unint64_t *)(*(_QWORD *)&v375[16] + 8);
        do
          v339 = __ldaxr(v338);
        while (__stlxr(v339 - 1, v338));
        if (!v339)
        {
          ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
          std::__shared_weak_count::__release_weak(v337);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    Espresso::net::_assign_streams((Espresso::net *)v33);
    Espresso::net::_on_resized((Espresso::net *)v33);
    Espresso::net::_resolve_default_configuration((Espresso::net *)v33);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 16) + 80))(*(_QWORD *)(v33 + 16), v33);
    Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(v33);
  }
  *(_QWORD *)buf = &v381;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v323)
  {
    v340 = (unint64_t *)&v323->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
}

void sub_190DBFEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::logic_error a46,uint64_t a47,char *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v63;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  Espresso::net_pass::~net_pass((Espresso::net_pass *)&a48);
  if (*(char *)(v60 - 201) < 0)
    operator delete(*(void **)(v60 - 224));
  a48 = &a60;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

void sub_190DBFF78(void *a1, int a2)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::runtime_error *v6;
  std::runtime_error *v7;

  if (a2)
  {
    Espresso::network_shape::~network_shape((char **)(v2 - 224));
    if (a2 == 4)
    {
      __cxa_begin_catch(a1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed in 2nd reshape after missing custom layer info.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    __cxa_begin_catch(a1);
    v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v7 = v6;
    if (a2 == 3)
    {
      std::runtime_error::runtime_error(v6, "Failed in 2nd reshape after missing custom layer info.");
      __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::runtime_error::runtime_error(v6, "Failed in 2nd reshape after missing custom layer info.");
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  JUMPOUT(0x190DC03D8);
}

void sub_190DC0050()
{
  __cxa_end_catch();
  JUMPOUT(0x190DC0148);
}

void sub_190DC006C()
{
  __cxa_end_catch();
  JUMPOUT(0x190DC0148);
}

void sub_190DC0088()
{
  __cxa_end_catch();
  JUMPOUT(0x190DC0148);
}

void sub_190DC00A4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190DC03D8);
}

void sub_190DC00B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  JUMPOUT(0x190DC03A4);
}

void sub_190DC00D8()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 224);
  JUMPOUT(0x190DC03D8);
}

void sub_190DC00E8()
{
  JUMPOUT(0x190DC03A4);
}

void sub_190DC00F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v64;

  a49 = &a61;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100](&a49);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  _Unwind_Resume(a1);
}

void sub_190DC00F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(v61 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  v63 = a59;
  if (a59)
  {
    p_shared_owners = (unint64_t *)&a59->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (!a18)
    JUMPOUT(0x190DC0354);
  v66 = (unint64_t *)&a18->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  a49 = &a61;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a10)
  {
    v68 = (unint64_t *)&a10->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

void sub_190DC0108()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 184);
  if (v1)
  {
    *(_QWORD *)(v0 - 176) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x190DC0148);
}

void sub_190DC0158()
{
  JUMPOUT(0x190DC0170);
}

void sub_190DC0164()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 248);
  JUMPOUT(0x190DC0170);
}

void sub_190DC0184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  JUMPOUT(0x190DC0394);
}

void sub_190DC01C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(v55 - 224);
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  JUMPOUT(0x190DC02D4);
}

void sub_190DC01D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a46);
  JUMPOUT(0x190DC0304);
}

void sub_190DC01E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  JUMPOUT(0x190DC02D4);
}

void sub_190DC01F8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
  {
    *(_QWORD *)(v0 - 200) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x190DC03D8);
}

void sub_190DC0210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  JUMPOUT(0x190DC021CLL);
}

void sub_190DC0228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  *(_QWORD *)(v46 - 224) = &a46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 224));
  JUMPOUT(0x190DC0304);
}

void sub_190DC0238()
{
  JUMPOUT(0x190DC03D8);
}

void sub_190DC0240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  JUMPOUT(0x190DC02D4);
}

void sub_190DC0270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a42);
  JUMPOUT(0x190DC02D4);
}

void sub_190DC027C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;

  a42 = (void **)(v46 - 224);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a42);
  *(_QWORD *)(v46 - 224) = &a46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 224));
  JUMPOUT(0x190DC0304);
}

void sub_190DC0294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  unint64_t *p_shared_owners;
  unint64_t v60;

  if (a54)
    operator delete(a54);
  if (a59)
  {
    p_shared_owners = (unint64_t *)&a59->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
      std::__shared_weak_count::__release_weak(a59);
    }
  }
  if (!a18)
    JUMPOUT(0x190DC0354);
  JUMPOUT(0x190DC035CLL);
}

void sub_190DC02A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  JUMPOUT(0x190DC02ACLL);
}

void sub_190DC02C8()
{
  JUMPOUT(0x190DC0314);
}

void sub_190DC02D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  JUMPOUT(0x190DC0314);
}

void sub_190DC02E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  void *v47;

  v47 = *(void **)(v46 - 184);
  if (v47)
  {
    *(_QWORD *)(v46 - 176) = v47;
    operator delete(v47);
  }
  *(_QWORD *)(v46 - 224) = &a46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 224));
  JUMPOUT(0x190DC0304);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x38uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_190DC0738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *Espresso::make_blob_container(int a1, unsigned int *a2, uint64_t a3, _QWORD **a4, _QWORD *a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unsigned int v38;
  __int128 v39;
  void *__p;
  _BYTE *v41;
  int v42;
  __int128 *v43;

  v42 = a1;
  Espresso::net::resolve_blob_numerical_properties(a3, a6, &v42, a2, (uint64_t)&v39);
  v38 = DWORD2(v39);
  if (((*(uint64_t (**)(_QWORD *, unsigned int *, unsigned int *))(*a4[1] + 104))(a4[1], &v38, a2) & 1) == 0)
  {
    v38 = *a2;
    DWORD2(v39) = v38;
  }
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t, uint64_t))(*a4)[3])(&v36, a4, a7, a8);
  if (v36)
  {
    v15 = *(_QWORD *)(v36 + 72);
    if (v15)
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a5, v15, *(_QWORD *)(v36 + 80));
      v42 = (***(uint64_t (****)(_QWORD))(*a5 + 8))(*(_QWORD *)(*a5 + 8));
    }
  }
  if (HIDWORD(v39) == -1)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 128))(&v35);
    v16 = v35;
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_11;
    v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
      if (!(_QWORD)v16)
        goto LABEL_18;
    }
    else
    {
LABEL_11:
      if (!(_QWORD)v16)
        goto LABEL_18;
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 128))(&v35);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a5, &v35);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v42 = (***(uint64_t (****)(_QWORD))(*a5 + 8))(*(_QWORD *)(*a5 + 8));
  }
LABEL_18:
  if (v36 && *(_BYTE *)(v36 + 8))
    v38 = *(_DWORD *)(v36 + 12);
  if (((unsigned int (*)(_QWORD **))(*a4)[5])(a4))
  {
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a3 + 264), a6))
    {
      *(_QWORD *)&v35 = a6;
      if (std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 256), a6, (__int128 **)&v35)[56])v38 = 0;
    }
  }
  Espresso::abstract_blob_container::make((uint64_t)a5, &v42, &v38, &v35);
  v22 = v35;
  v23 = (__int128 *)(v35 + 112);
  *(_OWORD *)(v35 + 112) = v39;
  if (v23 != &v39)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v22 + 128), (char *)__p, (uint64_t)v41, (v41 - (_BYTE *)__p) >> 2);
  v24 = v36;
  if (v36)
  {
    if (*(_BYTE *)(v36 + 16))
    {
      v25 = v35;
      v26 = v35 + 112;
      *(_OWORD *)(v35 + 112) = *(_OWORD *)(v36 + 24);
      if (v26 != v24 + 24)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v25 + 128), *(char **)(v24 + 40), *(_QWORD *)(v24 + 48), (uint64_t)(*(_QWORD *)(v24 + 48) - *(_QWORD *)(v24 + 40)) >> 2);
    }
  }
  v43 = a6;
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)a6, &v43)+ 40;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v27, &v35);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  return v27;
}

void sub_190DC0A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *Espresso::net::resolve_blob_numerical_properties@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *result;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;

  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)a5 = 0x13F800000;
  *(_DWORD *)(a5 + 8) = *a4;
  *(_DWORD *)(a5 + 12) = 1;
  result = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 352, a2);
  v11 = a1 + 360 != (_QWORD)result;
  if ((char *)(a1 + 360) != result)
  {
    *(_OWORD *)a5 = *(_OWORD *)(result + 56);
    if (result + 56 != (char *)a5)
      result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a5 + 16), *((char **)result + 9), *((_QWORD *)result + 10), (uint64_t)(*((_QWORD *)result + 10) - *((_QWORD *)result + 9)) >> 2);
  }
  v12 = *(_QWORD *)(a1 + 408);
  if (v12)
  {
    v13 = *a3;
    v14 = a1 + 408;
    do
    {
      v15 = *(_DWORD *)(v12 + 32);
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (uint64_t *)v12;
      else
        v17 = (uint64_t *)(v12 + 8);
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 408 && v13 >= *(_DWORD *)(v14 + 32))
    {
      result = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v14 + 40, a2);
      if ((char *)(v14 + 48) != result)
      {
        *(_OWORD *)a5 = *(_OWORD *)(result + 56);
        if (result + 56 != (char *)a5)
          result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a5 + 16), *((char **)result + 9), *((_QWORD *)result + 10), (uint64_t)(*((_QWORD *)result + 10) - *((_QWORD *)result + 9)) >> 2);
        v11 = 1;
      }
    }
  }
  if (v11 && (*(_DWORD *)(a5 + 8) & 0x80000000) != 0)
    *(_DWORD *)(a5 + 8) = *a4;
  return result;
}

void sub_190DC0C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::abstract_blob_container::make(uint64_t a1@<X0>, int *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*a2 | *a3)
  {
    Espresso::abstract_engine_factory::shared(&v23);
    Espresso::abstract_engine_factory::make_abstract_blob_container(v23, a1, a2, a3, a4);
    v11 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (!*a4)
    {
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a4);
      *a4 = 0;
      a4[1] = 0;
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v21);
    v20 = 0;
    Espresso::abstract_engine_factory::make_abstract_blob_container(v21, a1, &v20, a3, &v23);
    if (v23)
    {
      v7 = v24;
      *a4 = v23;
      a4[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_190DC0DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::shared(_QWORD *a1@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (onceToken != -1)
    dispatch_once(&onceToken, &__block_literal_global_31_4949);
  v3 = *(_QWORD *)(singleton + 8);
  *a1 = *(_QWORD *)singleton;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void Espresso::abstract_engine_factory::make_abstract_blob_container(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  std::recursive_mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;

  v10 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v10);
  v13 = *(_QWORD *)(a1 + 32);
  v12 = a1 + 32;
  v11 = v13;
  if (!v13)
    goto LABEL_11;
  v14 = *a3;
  v15 = v12;
  do
  {
    v16 = *(_DWORD *)(v11 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v11;
    else
      v18 = (uint64_t *)(v11 + 8);
    if (!v17)
      v15 = v11;
    v11 = *v18;
  }
  while (*v18);
  if (v15 != v12 && v14 >= *(_DWORD *)(v15 + 32))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v15 + 40) + 24))(*(_QWORD *)(v15 + 40), a2, *a4);
  }
  else
  {
LABEL_11:
    *a5 = 0;
    a5[1] = 0;
  }
  std::recursive_mutex::unlock(v10);
}

void sub_190DC0F08(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::force_high_precision_output_f32(Espresso::base_kernel *this)
{
  return 0;
}

uint64_t Espresso::ANECompilerEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x96u >> *a2);
}

__n128 Espresso::ANERuntimeEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x148uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DB8728;
  v7 = Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D69518;
  *((_QWORD *)v6 + 35) = v6 + 288;
  *((_QWORD *)v6 + 36) = 0;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_QWORD *)v6 + 34) = 0;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t Espresso::ANECompilerEngine::blob_container::blob_container(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  *(_QWORD *)result = off_1E2D8F108;
  *(_DWORD *)(result + 28) = -1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  v3 = a2[1];
  *(_QWORD *)(result + 72) = *a2;
  *(_QWORD *)(result + 80) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 1065353216;
  *(_QWORD *)(result + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 124) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  *(_QWORD *)result = &off_1E2D75160;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(result + 160) = v6;
  *(_OWORD *)(result + 176) = xmmword_191A93670;
  *(_QWORD *)(result + 200) = 0x100000000;
  *(_DWORD *)(result + 192) = 1;
  *(_DWORD *)(result + 196) = a3;
  *(_BYTE *)(result + 208) = 0;
  if (a3 == 5)
  {
    *(_DWORD *)(result + 196) = 1;
    *(_BYTE *)(result + 208) = 1;
  }
  return result;
}

BOOL Espresso::context_cpu::supports_custom_compute_path_for_blob(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 54))
    return v3 < 5 || v3 == *a3;
  else
    return v3 == 3;
}

__n128 Espresso::engine_cpu::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1868;
  result.n128_u64[0] = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t Espresso::generic_load_constant_kernel::blob_options@<X0>(Espresso::generic_load_constant_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  BOOL v7;
  _QWORD *v8;

  result = *((_QWORD *)this + 43);
  if (!result
    || ((result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result), (_DWORD)result)
      ? (v7 = a2 == 0)
      : (v7 = 1),
        v7))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v8 = operator new(0x70uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E2DBE228;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    v8[3] = &off_1E2D9B4D8;
    *((_DWORD *)v8 + 12) = 1065353216;
    v8[7] = 0x1FFFFFFFFLL;
    v8[12] = 0;
    v8[13] = 0;
    v8[8] = 0;
    v8[9] = 0;
    v8[10] = 0;
    *((_BYTE *)v8 + 88) = 0;
    *a3 = v8 + 3;
    a3[1] = v8;
    *((_BYTE *)v8 + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 32))(*((_QWORD *)this + 43));
    *((_DWORD *)v8 + 9) = result;
  }
  return result;
}

void sub_190DC11D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void Espresso::net::_resolve_default_configuration(Espresso::net *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if (!*((_QWORD *)this + 105) && *((_QWORD *)this + 100) == *((_QWORD *)this + 101))
  {
    Espresso::net::infer_configuration_for_shapes(this, (Espresso::net *)((char *)this + 184), (uint64_t)&v10);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 800));
    *((_OWORD *)this + 50) = v10;
    *((_QWORD *)this + 102) = v11;
    v11 = 0;
    v10 = 0uLL;
    v2 = (char *)this + 832;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 824, *((char **)this + 104));
    v3 = v13;
    *((_QWORD *)this + 103) = v12;
    *((_QWORD *)this + 104) = v3;
    v4 = v14;
    *((_QWORD *)this + 105) = v14;
    if (v4)
    {
      *(_QWORD *)(v3 + 16) = v2;
      v12 = &v13;
      v13 = 0;
      v14 = 0;
      v3 = 0;
    }
    else
    {
      *((_QWORD *)this + 103) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v12, (char *)v3);
    v15 = (void **)&v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (*((_QWORD *)this + 99))
    {
      if (*((_QWORD *)this + 31))
      {
        std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v8, *(_QWORD *)this, *((std::__shared_weak_count **)this + 1));
        Espresso::convert_to_explicit_padding(&v8, 0, 0);
        v5 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
    }
  }
}

void sub_190DC1398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::net::_assign_streams(Espresso::net *this)
{
  __int128 *i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  _QWORD *j;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t *k;
  int v21;
  int v22;
  BOOL v23;
  uint64_t **v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  int v44;
  std::string __p;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;
  _QWORD *v49[2];
  _BYTE v50[8];
  std::__shared_weak_count *v51;
  uint64_t *v52[6];
  _DWORD v53[3];

  if ((***(unsigned int (****)(_QWORD))(*((_QWORD *)this + 2) + 8))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)) == 60000
    && *((_QWORD *)this + 4) != *((_QWORD *)this + 5))
  {
    for (i = (__int128 *)*((_QWORD *)this + 19); i; i = *(__int128 **)i)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      *(_DWORD *)(v46 + 104) = 0;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v50, this);
    v6 = *(_DWORD *)(*((_QWORD *)this + 2) + 48);
    LODWORD(v42) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    v46 = 0u;
    v47 = 0u;
    v49[0] = 0;
    v49[1] = 0;
    v48 = (uint64_t *)v49;
    std::deque<int>::push_back(&__p.__r_.__value_.__l.__size_, &v42);
    v41 = (uint64_t **)((char *)this + 504);
    while (*((_QWORD *)&v47 + 1))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[2]
                                 + (((unint64_t)v47 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v47 & 0x3FF));
      LODWORD(v42) = v7;
      *(_QWORD *)&v47 = v47 + 1;
      --*((_QWORD *)&v47 + 1);
      if ((unint64_t)v47 >= 0x800)
      {
        operator delete(*(void **)__p.__r_.__value_.__r.__words[2]);
        __p.__r_.__value_.__r.__words[2] += 8;
        *(_QWORD *)&v47 = v47 - 1024;
      }
      *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v48, v7, &v42)+ 32) = 1;
      v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(__p.__r_.__value_.__r.__words[0] + 16), v7, &v42);
      v10 = v8[5];
      v9 = v8[6];
      while (v10 != v9)
      {
        v11 = *(_DWORD *)v10;
        v53[0] = *(_DWORD *)v10;
        for (j = v49[0]; j; j = (_QWORD *)*j)
        {
          v13 = *((_DWORD *)j + 7);
          if (v11 >= v13)
          {
            if (v13 >= v11)
              goto LABEL_24;
            ++j;
          }
        }
        std::deque<int>::push_back(&__p.__r_.__value_.__l.__size_, v53);
LABEL_24:
        v10 = (uint64_t *)((char *)v10 + 4);
      }
      v44 = v7;
      if (v7 < 0)
        break;
      v14 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v52, v7, &v44);
      v16 = v14[5];
      v15 = v14[6];
      v42 = 0;
      v43 = 0;
      v17 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * v7) + 104);
      if (*(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * v7) + 112) == v17)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v42, *v17, v17[1]);
        v18 = v42;
        v19 = *(_DWORD *)(v42 + 104);
      }
      for (k = (uint64_t *)*((_QWORD *)this + 64); k; k = (uint64_t *)*k)
      {
        v21 = *((_DWORD *)k + 7);
        if (v7 >= v21)
        {
          if (v21 >= v7)
          {
            v23 = *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v41, v7, &v44)+ 32) != 0;
            goto LABEL_38;
          }
          ++k;
        }
      }
      if ((int)((unint64_t)((char *)v15 - (char *)v16) >> 2) >= 2)
      {
        v22 = *(_DWORD *)(v18 + 8);
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v41, v7, &v44)+ 32) = v22 < 128;
      }
      v23 = 1;
LABEL_38:
      v24 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v52, v7, &v44);
      v26 = (int *)v24[5];
      v25 = (int *)v24[6];
      while (v26 != v25)
      {
        v27 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * *v26);
        v28 = *(uint64_t **)(v27 + 104);
        v29 = *(uint64_t **)(v27 + 112);
        while (v28 != v29)
        {
          v30 = *v28;
          v31 = (std::__shared_weak_count *)v28[1];
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            *(_DWORD *)(v30 + 104) = v19;
            do
              v34 = __ldaxr(v32);
            while (__stlxr(v34 - 1, v32));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          else
          {
            *(_DWORD *)(v30 + 104) = v19;
          }
          v28 += 2;
        }
        if (v23)
        {
          ++v19;
          if (v6 >= 1)
            v19 %= v6;
        }
        ++v26;
      }
      v35 = v43;
      if (v43)
      {
        v36 = (unint64_t *)&v43->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    std::__tree<int>::destroy(v49[0]);
    std::deque<int>::~deque[abi:ne180100]((uint64_t)&__p.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v52[4]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v52[1]);
    v38 = v51;
    if (v51)
    {
      v39 = (unint64_t *)&v51->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_190DC17E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::__tree<int>::destroy(a16);
  std::deque<int>::~deque[abi:ne180100](v17);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::net::is_root_module(Espresso::net *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 137);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = *((_QWORD *)this + 136) == 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void Espresso::pass_graph_coloring::run_on_network(Espresso::pass_graph_coloring *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v5;
  _DWORD *v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  std::string::size_type size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  std::vector<int>::pointer v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  char v75;
  unint64_t v76;
  uint64_t **v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  __int128 v83;
  unint64_t v84;
  __int128 *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int *v104;
  int64_t v105;
  _QWORD *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  _DWORD *v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  std::vector<int>::pointer begin;
  int v119;
  uint64_t v120;
  _DWORD *v121;
  Espresso::net *v122;
  unsigned __int8 *v123;
  Espresso::net *v124;
  Espresso::net *v125;
  BOOL v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  int *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int *v171;
  int *v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  std::vector<int>::size_type v178;
  uint64_t **i;
  uint64_t v180;
  Espresso::layer_shape *v181;
  int v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t **v189;
  uint64_t v190;
  std::string::size_type v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  char v198;
  int v199;
  unint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  _QWORD *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  std::vector<int>::value_type *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  unsigned __int8 *v221;
  char *v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  unint64_t *v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::string *v259;
  std::string *v260;
  _DWORD *v261;
  Espresso::net *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  __int128 v268;
  char *v269;
  std::vector<int> v270;
  int v271;
  void *v272[2];
  _OWORD v273[2];
  uint64_t v274;
  int v275;
  uint64_t *v276;
  uint64_t *v277;
  _QWORD *v278;
  char *v279;
  char *v280;
  char *v281;
  __int128 v282;
  _DWORD *v283;
  std::__shared_weak_count *v284;
  std::string *v285;
  std::__shared_weak_count *v286;
  std::string::size_type v287;
  std::__shared_weak_count *v288;
  std::string v289;
  std::vector<int>::size_type __sz;
  int v291;
  char v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  int v299;
  __int128 v300;
  void *__p[2];
  int v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  std::vector<int>::value_type __x[4];
  __int128 v307;
  int v308;
  void *v309;
  void *v310;
  std::string v311;
  uint64_t v312;

  v312 = *MEMORY[0x1E0C80C00];
  v5 = (const void *)*((_QWORD *)this + 1);
  if (!v5
  {
    v283 = 0;
    v284 = 0;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("options are not set for pass_graph_coloring");
  }
  v8 = v7;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v283 = v7;
  v284 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  v263 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  v282 = 0uLL;
  switch(v7[2])
  {
    case 1:
      v12 = (char *)operator new(8uLL);
      *(_QWORD *)v12 = a2;
      v280 = v12 + 8;
      v281 = v12 + 8;
      v279 = v12;
      Espresso::reshape_networks_graph_coloring_raw_ptr(&v289, &v279);
      v13 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
      *(_OWORD *)&v289.__r_.__value_.__l.__data_ = 0uLL;
      v282 = v13;
      v280 = v12;
      goto LABEL_34;
    case 2:
      v12 = (char *)operator new(8uLL);
      *(_QWORD *)v12 = a2;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 8);
      v289.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 8);
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(&v268, (uint64_t)a2 + 16, &v289.__r_.__value_.__l.__data_);
      goto LABEL_33;
    case 3:
      std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v311, *(_QWORD *)a2, *((std::__shared_weak_count **)a2 + 1));
      v276 = 0;
      v277 = 0;
      v278 = 0;
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
      v289.__r_.__value_.__s.__data_[8] = 0;
      v14 = (uint64_t *)operator new(0x10uLL);
      v276 = v14;
      v277 = v14;
      v278 = v14 + 2;
      size = v311.__r_.__value_.__l.__size_;
      *v14 = v311.__r_.__value_.__r.__words[0];
      v14[1] = size;
      if (size)
      {
        v16 = (unint64_t *)(size + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v277 = v14 + 2;
      memset(&v289, 0, sizeof(v289));
      std::vector<Espresso::net *>::reserve((void **)&v289.__r_.__value_.__l.__data_, 1uLL);
      v18 = v276;
      v19 = v277;
      if (v276 == v277)
      {
        v22 = v289.__r_.__value_.__l.__size_;
      }
      else
      {
        v20 = (_QWORD *)v289.__r_.__value_.__l.__size_;
        do
        {
          v21 = *v18;
          if ((unint64_t)v20 >= v289.__r_.__value_.__r.__words[2])
          {
            v23 = v289.__r_.__value_.__r.__words[0];
            v24 = (uint64_t)((uint64_t)v20 - v289.__r_.__value_.__r.__words[0]) >> 3;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v26 = v289.__r_.__value_.__r.__words[2] - v289.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v289.__r_.__value_.__r.__words[2] - v289.__r_.__value_.__r.__words[0]) >> 2 > v25)
              v25 = v26 >> 2;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
              v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v27);
            else
              v28 = 0;
            v29 = (_QWORD *)(v27 + 8 * v24);
            *v29 = v21;
            v22 = (std::string::size_type)(v29 + 1);
            if (v20 != (_QWORD *)v23)
            {
              do
              {
                v30 = *--v20;
                *--v29 = v30;
              }
              while (v20 != (_QWORD *)v23);
              v20 = (_QWORD *)v289.__r_.__value_.__r.__words[0];
            }
            v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            v289.__r_.__value_.__l.__size_ = v22;
            v289.__r_.__value_.__r.__words[2] = v27 + 8 * v28;
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v20 = v21;
            v22 = (std::string::size_type)(v20 + 1);
          }
          v289.__r_.__value_.__l.__size_ = v22;
          v18 += 2;
          v20 = (_QWORD *)v22;
        }
        while (v18 != v19);
      }
      v268 = 0uLL;
      v269 = 0;
      v42 = (void *)v289.__r_.__value_.__r.__words[0];
      v43 = v22 - v289.__r_.__value_.__r.__words[0];
      if (v22 == v289.__r_.__value_.__r.__words[0])
      {
        v44 = 0;
      }
      else
      {
        if (v43 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v43 >> 3);
        *(_QWORD *)&v268 = v44;
        v269 = &v44[8 * v45];
        memmove(v44, v42, v43);
        *((_QWORD *)&v268 + 1) = &v44[8 * (v43 >> 3)];
      }
      Espresso::reshape_networks_graph_coloring_raw_ptr(__x, (char **)&v268);
      if (v44)
        operator delete(v44);
      if (v42)
        operator delete(v42);
      v46 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
      v282 = v46;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = *(std::__shared_weak_count **)&__x[2];
      if (*(_QWORD *)&__x[2])
      {
        v51 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v289);
      v53 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
      if (v311.__r_.__value_.__l.__size_)
      {
        v54 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      goto LABEL_36;
    case 4:
      memset(__x, 0, sizeof(__x));
      v12 = (char *)operator new(8uLL);
      *(_QWORD *)v12 = a2;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 8);
      v289.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 8);
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(&v268, (uint64_t)__x, &v289.__r_.__value_.__l.__data_);
LABEL_33:
      v31 = v268;
      v268 = 0uLL;
      v282 = v31;
LABEL_34:
      v32 = (std::vector<int>::pointer)v12;
      goto LABEL_35;
    default:
      v39 = *((unsigned __int8 *)v7 + 16);
      Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
      Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)a2);
      *(_QWORD *)&v268 = a2;
      *((_QWORD *)&v268 + 1) = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
      v269 = (char *)Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)a2);
      memset(&v270, 0, sizeof(v270));
      *(_OWORD *)v272 = 0u;
      memset(v273, 0, sizeof(v273));
      v274 = 0;
      v275 = 1065353216;
      *(_OWORD *)__x = 0u;
      v307 = 0u;
      v308 = 1065353216;
      if (!v39)
        goto LABEL_77;
      std::vector<BOOL>::resize((uint64_t)v272, *(_QWORD *)(*((_QWORD *)&v268 + 1) + 40));
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB1978;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)&v268;
      v289.__r_.__value_.__r.__words[2] = (std::string::size_type)__x;
      __sz = (std::vector<int>::size_type)&v289;
      Espresso::net::apply_to_all_globals((_QWORD *)v268, &v289);
      v40 = (_QWORD *)__sz;
      if ((std::string *)__sz == &v289)
      {
        v41 = 4;
        v40 = &v289;
      }
      else
      {
        if (!__sz)
          goto LABEL_77;
        v41 = 5;
      }
      (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_77:
      v261 = v8;
      v56 = v268;
      v57 = *(_QWORD *)(v268 + 32);
      if (*(_QWORD *)(v268 + 40) != v57)
      {
        v58 = 0;
        do
        {
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v57 + 16 * v58) + 64) + 304))(&v289);
          v59 = (uint64_t *)v289.__r_.__value_.__r.__words[2];
          if (v289.__r_.__value_.__r.__words[2])
          {
            do
            {
              v311.__r_.__value_.__r.__words[0] = v58;
              v60 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v268 + 96, v58, &v311);
              v61 = *((_DWORD *)v59 + 4);
              v62 = v60[3];
              v311.__r_.__value_.__r.__words[0] = v58;
              v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v268 + 56, v58, &v311);
              v64 = (unsigned __int8 *)(v62 + 24 * v61);
              v65 = *((_DWORD *)v59 + 5);
              v66 = v63[3];
              v67 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*((_QWORD *)&v268 + 1) + 16), v64);
              if (!v67)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v68 = (unsigned __int8 *)(v66 + 24 * v65);
              v69 = *((_DWORD *)v67 + 10);
              LODWORD(v311.__r_.__value_.__l.__data_) = v69;
              v70 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*((_QWORD *)&v268 + 1) + 16), v68);
              if (!v70)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v71 = *((_DWORD *)v70 + 10);
              LODWORD(v287) = v71;
              v72 = *(_QWORD *)(*((_QWORD *)&v268 + 1) + 176) + 24 * v71;
              v73 = *(unint64_t **)v72;
              v74 = *(unint64_t **)(v72 + 8);
              if (v73 == v74)
                goto LABEL_352;
              v75 = 1;
              do
              {
                v76 = *v73++;
                v75 &= v76 <= v58;
              }
              while (v73 != v74);
              if ((v75 & 1) != 0)
              {
LABEL_352:
                if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)__x, *(unint64_t *)&__x[2], v71))
                {
                  v71 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v71, &v287)+ 5);
                }
                *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v69, &v311)+ 5) = v71;
              }
              v59 = (uint64_t *)*v59;
            }
            while (v59);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v289);
          ++v58;
          v56 = v268;
          v57 = *(_QWORD *)(v268 + 32);
        }
        while (v58 < (*(_QWORD *)(v268 + 40) - v57) >> 4);
      }
      v77 = (uint64_t **)v307;
      if ((_QWORD)v307)
      {
        v78 = v56 + 184;
        do
        {
          v79 = *((int *)v77 + 4);
          v80 = *(_QWORD *)(*((_QWORD *)&v268 + 1) + 56);
          v81 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&v268 + 1) + 64) - v80) >> 3);
          if (v81 <= v79)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v82 = (__int128 *)(v80 + 24 * (int)v79);
          if (*((char *)v82 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)v82, *((_QWORD *)v82 + 1));
            v80 = *(_QWORD *)(*((_QWORD *)&v268 + 1) + 56);
            v81 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&v268 + 1) + 64) - v80) >> 3);
          }
          else
          {
            v83 = *v82;
            v289.__r_.__value_.__r.__words[2] = *((_QWORD *)v82 + 2);
            *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v83;
          }
          v84 = *((int *)v77 + 5);
          if (v81 <= v84)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v85 = (__int128 *)(v80 + 24 * (int)v84);
          if (*((char *)v85 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)v85, *((_QWORD *)v85 + 1));
          }
          else
          {
            v86 = *v85;
            v311.__r_.__value_.__r.__words[2] = *((_QWORD *)v85 + 2);
            *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v86;
          }
          v87 = std::map<std::string,Espresso::blob_numerical_properties>::at(v78, &v289);
          v88 = std::map<std::string,Espresso::blob_numerical_properties>::at(v78, &v311);
          if (!Espresso::layer_shape::operator==(v87, v88))
          {
            v259 = &v289;
            if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v259 = (std::string *)v289.__r_.__value_.__r.__words[0];
            v287 = (std::string::size_type)v259;
            v260 = &v311;
            if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v260 = (std::string *)v311.__r_.__value_.__r.__words[0];
            v285 = v260;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("aliased blob %s has different shape from blob aliased to %s", &v287, &v285);
          }
          if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v311.__r_.__value_.__l.__data_);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v289.__r_.__value_.__l.__data_);
          v77 = (uint64_t **)*v77;
        }
        while (v77);
      }
      std::vector<int>::reserve(&v270, *(_QWORD *)(*((_QWORD *)&v268 + 1) + 40));
      LODWORD(v289.__r_.__value_.__l.__data_) = 0;
      v89 = *((_QWORD *)&v268 + 1);
      if (*(_QWORD *)(*((_QWORD *)&v268 + 1) + 40))
      {
        v90 = 0;
        v91 = 0;
        do
        {
          if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)__x, *(unint64_t *)&__x[2], v90))
          {
            v92 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v90, &v289);
            v270.__begin_[v90] = v270.__begin_[*((int *)v92 + 5)];
            v89 = *((_QWORD *)&v268 + 1);
          }
          else
          {
            v270.__begin_[v90] = v91++;
          }
          LODWORD(v289.__r_.__value_.__l.__data_) = ++v90;
        }
        while (*(_QWORD *)(v89 + 40) > v90);
      }
      else
      {
        v91 = 0;
      }
      v271 = v91;
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__x);
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
      v289.__r_.__value_.__r.__words[2] = (std::string::size_type)&v268;
      v93 = v271;
      LODWORD(__sz) = -1431655765
                    * ((*(_QWORD *)(v289.__r_.__value_.__l.__size_ + 64)
                      - *(_QWORD *)(v289.__r_.__value_.__l.__size_ + 56)) >> 3);
      HIDWORD(__sz) = v271;
      v291 = (*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4;
      v292 = 0;
      v300 = 0u;
      *(_OWORD *)__p = 0u;
      v293 = 0u;
      v294 = 0u;
      v295 = 0u;
      v296 = 0u;
      v297 = 0u;
      v298 = 0u;
      v302 = 1065353216;
      v303 = 0u;
      v304 = 0u;
      v305 = 0u;
      if (v271)
      {
        if (v271 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v271);
        v96 = (char *)*((_QWORD *)&v294 + 1);
        v95 = (char *)v295;
        v98 = &v94[8 * v97];
        bzero(v94, 8 * v93);
        v99 = &v94[8 * v93];
        if (v95 != v96)
        {
          do
          {
            v100 = *((_QWORD *)v95 - 1);
            v95 -= 8;
            *((_QWORD *)v94 - 1) = v100;
            v94 -= 8;
          }
          while (v95 != v96);
          v96 = (char *)*((_QWORD *)&v294 + 1);
        }
        *((_QWORD *)&v294 + 1) = v94;
        *(_QWORD *)&v295 = v99;
        *((_QWORD *)&v295 + 1) = v98;
        if (v96)
          operator delete(v96);
      }
      v101 = SHIDWORD(__sz);
      v102 = v291;
      if (HIDWORD(__sz))
      {
        v103 = v291 + 1;
        v104 = (int *)(*((_QWORD *)&v294 + 1) + 4);
        do
        {
          *(v104 - 1) = -1;
          *v104 = v103;
          v104 += 2;
          --v101;
        }
        while (v101);
      }
      if (v102 >= 1)
      {
        v105 = 0;
        do
        {
          v106 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 12, v105);
          if (!v106)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v108 = (unsigned __int8 *)v106[3];
          v107 = (unsigned __int8 *)v106[4];
          while (v108 != v107)
          {
            v109 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v289.__r_.__value_.__l.__size_ + 16), v108);
            if (!v109)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v110 = (_DWORD *)(*((_QWORD *)&v294 + 1) + 8 * v270.__begin_[*((int *)v109 + 10)]);
            if (*v110 == -1)
              *v110 = v105;
            v108 += 24;
          }
          v111 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 7, v105);
          if (!v111)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v113 = (unsigned __int8 *)v111[3];
          v112 = (unsigned __int8 *)v111[4];
          while (v113 != v112)
          {
            v114 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v289.__r_.__value_.__l.__size_ + 16), v113);
            if (!v114)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            *(_DWORD *)(*((_QWORD *)&v294 + 1) + 8 * v270.__begin_[*((int *)v114 + 10)] + 4) = v105;
            v113 += 24;
          }
          ++v105;
          v102 = v291;
        }
        while (v105 < v291);
      }
      v115 = __sz;
      if ((int)__sz >= 1)
      {
        v116 = 0;
        v117 = (char *)v272[0];
        begin = v270.__begin_;
        v119 = v102 + 1;
        v120 = *((_QWORD *)&v294 + 1);
        do
        {
          if (((*(_QWORD *)&v117[(v116 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v116) & 1) != 0)
          {
            v121 = (_DWORD *)(v120 + 8 * begin[v116]);
            *v121 = 0;
            v121[1] = v119;
          }
          ++v116;
        }
        while (v115 != v116);
      }
      v122 = (Espresso::net *)*((_QWORD *)a2 + 32);
      if (v122 != (Espresso::net *)((char *)a2 + 264))
      {
        do
        {
          v123 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v289.__r_.__value_.__l.__size_ + 16), (unsigned __int8 *)v122 + 32);
          if (!v123)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *(_DWORD *)(*((_QWORD *)&v294 + 1) + 8 * v270.__begin_[*((int *)v123 + 10)] + 4) = v291 + 1;
          v124 = (Espresso::net *)*((_QWORD *)v122 + 1);
          if (v124)
          {
            do
            {
              v125 = v124;
              v124 = *(Espresso::net **)v124;
            }
            while (v124);
          }
          else
          {
            do
            {
              v125 = (Espresso::net *)*((_QWORD *)v122 + 2);
              v126 = *(_QWORD *)v125 == (_QWORD)v122;
              v122 = v125;
            }
            while (!v126);
          }
          v122 = v125;
        }
        while (v125 != (Espresso::net *)((char *)a2 + 264));
      }
      std::vector<int>::resize((std::vector<int> *)&v296, SHIDWORD(__sz));
      v127 = v296;
      if (SHIDWORD(__sz) >= 1)
      {
        v128 = 0;
        do
        {
          *(_DWORD *)(v127 + 4 * v128) = v128;
          ++v128;
        }
        while (v128 < SHIDWORD(__sz));
      }
      v129 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v296 + 1) - v127) >> 2);
      *(_QWORD *)__x = &v289;
      if (*((_QWORD *)&v296 + 1) == v127)
        v130 = 0;
      else
        v130 = v129;
      std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(v127, *((int **)&v296 + 1), (uint64_t)__x, v130, 1);
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v297 + 8, (char *)v296, *((uint64_t *)&v296 + 1), (uint64_t)(*((_QWORD *)&v296 + 1) - v296) >> 2);
      v131 = HIDWORD(__sz);
      v133 = *((_QWORD *)&v293 + 1);
      v132 = v293;
      v134 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v293 + 1) - v293) >> 3);
      v135 = SHIDWORD(__sz) - v134;
      if (SHIDWORD(__sz) <= v134)
      {
        if (SHIDWORD(__sz) < v134)
        {
          v153 = v293 + 40 * SHIDWORD(__sz);
          while (v133 != v153)
          {
            v133 -= 40;
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v133);
          }
          *((_QWORD *)&v293 + 1) = v153;
        }
      }
      else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v294 - *((_QWORD *)&v293 + 1)) >> 3) >= v135)
      {
        v154 = *((_QWORD *)&v293 + 1) + 40 * v135;
        do
        {
          *(_OWORD *)v133 = 0uLL;
          *(_OWORD *)(v133 + 16) = 0uLL;
          *(_DWORD *)(v133 + 32) = 1065353216;
          v133 += 40;
        }
        while (v133 != v154);
        *((_QWORD *)&v293 + 1) = v154;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v136 = 0x999999999999999ALL * ((uint64_t)(v294 - v293) >> 3);
        if (v136 <= SHIDWORD(__sz))
          v136 = SHIDWORD(__sz);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v294 - v293) >> 3) >= 0x333333333333333)
          v137 = 0x666666666666666;
        else
          v137 = v136;
        if (v137 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v138 = (char *)operator new(40 * v137);
        v139 = &v138[40 * v134];
        v140 = &v138[40 * v131];
        v141 = v139;
        do
        {
          *(_OWORD *)v141 = 0uLL;
          *((_OWORD *)v141 + 1) = 0uLL;
          *((_DWORD *)v141 + 8) = 1065353216;
          v141 += 40;
        }
        while (v141 != v140);
        v142 = &v138[40 * v137];
        if (v133 != v132)
        {
          v143 = 0;
          do
          {
            v144 = &v139[v143];
            v145 = v133 + v143;
            v146 = *(_QWORD *)(v133 + v143 - 40);
            *(_QWORD *)(v145 - 40) = 0;
            *((_QWORD *)v144 - 5) = v146;
            *((_QWORD *)v144 - 4) = *(_QWORD *)(v133 + v143 - 32);
            *(_QWORD *)(v145 - 32) = 0;
            v147 = *(_QWORD *)(v133 + v143 - 24);
            *(_QWORD *)&v139[v143 - 24] = v147;
            v148 = *(_QWORD *)(v133 + v143 - 16);
            *((_QWORD *)v144 - 2) = v148;
            *((_DWORD *)v144 - 2) = *(_DWORD *)(v133 + v143 - 8);
            if (v148)
            {
              v149 = *(_QWORD *)(v147 + 8);
              v150 = *((_QWORD *)v144 - 4);
              if ((v150 & (v150 - 1)) != 0)
              {
                if (v149 >= v150)
                  v149 %= v150;
              }
              else
              {
                v149 &= v150 - 1;
              }
              *(_QWORD *)(v146 + 8 * v149) = &v139[v143 - 24];
              *(_QWORD *)(v133 + v143 - 24) = 0;
              *(_QWORD *)(v133 + v143 - 16) = 0;
            }
            v143 -= 40;
          }
          while (v133 + v143 != v132);
          v139 += v143;
        }
        v151 = *((_QWORD *)&v293 + 1);
        v152 = (void *)v293;
        *(_QWORD *)&v293 = v139;
        *((_QWORD *)&v293 + 1) = v140;
        *(_QWORD *)&v294 = v142;
        while ((void *)v151 != v152)
          v151 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v151 - 40);
        if (v152)
          operator delete(v152);
      }
      v155 = HIDWORD(__sz);
      v262 = a2;
      if (SHIDWORD(__sz) < 1)
      {
        v178 = SHIDWORD(__sz);
      }
      else
      {
        v156 = 0;
        v157 = 1;
        v158 = 2;
        do
        {
          v159 = v156 + 1;
          if (v156 + 1 < v155)
          {
            v160 = *((_QWORD *)&v294 + 1);
            v161 = *(int *)(v296 + 4 * v156);
            v162 = *(int *)(v296 + 4 * v157);
            v163 = (int *)(*((_QWORD *)&v294 + 1) + 8 * v162);
            v164 = (int *)(*((_QWORD *)&v294 + 1) + 8 * v161);
            v166 = *v164;
            v165 = v164[1];
            v168 = *v163;
            v167 = v163[1];
            if (v167 >= v165)
              v167 = v165;
            if (v166 <= v168)
              v169 = v168;
            else
              v169 = v166;
            if (v167 >= v169)
            {
              v170 = v158;
              do
              {
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v293 + 40 * (int)v161, v162, v162);
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v293 + 40 * (int)v162, v161, v161);
                v155 = HIDWORD(__sz);
                if (SHIDWORD(__sz) <= (int)v170)
                  break;
                v162 = *(int *)(v296 + 4 * v170);
                v171 = (int *)(*((_QWORD *)&v294 + 1) + 8 * v162);
                v172 = (int *)(v160 + 8 * v161);
                v174 = *v172;
                v173 = v172[1];
                v176 = *v171;
                v175 = v171[1];
                if (v175 >= v173)
                  v175 = v173;
                v177 = v174 <= v176 ? v176 : v174;
                ++v170;
              }
              while (v175 >= v177);
            }
          }
          ++v157;
          ++v158;
          v156 = v159;
        }
        while (v159 < v155);
        v178 = v155;
        a2 = v262;
      }
      __x[0] = -1;
      std::vector<int>::resize((std::vector<int> *)&v303, v178, __x);
      std::vector<int>::resize((std::vector<int> *)((char *)&v304 + 8), SHIDWORD(__sz));
      for (i = *(uint64_t ***)(v289.__r_.__value_.__l.__size_ + 32); i; i = (uint64_t **)*i)
      {
        v180 = *((int *)i + 10);
        v181 = (Espresso::layer_shape *)std::map<std::string,Espresso::blob_numerical_properties>::at(v289.__r_.__value_.__r.__words[0] + 184, i + 2);
        v182 = Espresso::layer_shape::total_dim(v181);
        *(_DWORD *)(*((_QWORD *)&v304 + 1)
                  + 4 * *(int *)(*(_QWORD *)(v289.__r_.__value_.__r.__words[2] + 24) + 4 * v180)) = v182;
      }
      if (__p[1])
      {
        v183 = __p[0];
        if (__p[0])
        {
          do
          {
            v184 = (_QWORD *)*v183;
            operator delete(v183);
            v183 = v184;
          }
          while (v184);
        }
        __p[0] = 0;
        v185 = *((_QWORD *)&v300 + 1);
        if (*((_QWORD *)&v300 + 1))
        {
          v186 = 0;
          do
            *(_QWORD *)(v300 + 8 * v186++) = 0;
          while (v185 != v186);
        }
        __p[1] = 0;
      }
      v299 = 0;
      LOBYTE(__x[0]) = 0;
      std::vector<BOOL>::vector(&v311, SHIDWORD(__sz), (unsigned __int8 *)__x);
      if (!HIDWORD(__sz))
        goto LABEL_256;
      v187 = 0;
      break;
  }
  do
  {
    v264 = v187;
    v188 = *(unsigned int *)(*((_QWORD *)&v297 + 1) + 4 * v187);
    std::unordered_set<int>::unordered_set((uint64_t)__x, v293 + 40 * v188);
    if (v311.__r_.__value_.__l.__size_)
    {
      v287 = v311.__r_.__value_.__r.__words[0];
      LODWORD(v288) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v287, v311.__r_.__value_.__l.__size_);
    }
    v189 = (uint64_t **)v307;
    if ((_QWORD)v307)
    {
      v190 = v303;
      v191 = v311.__r_.__value_.__r.__words[0];
      do
      {
        v192 = *(unsigned int *)(v190 + 4 * *((int *)v189 + 4));
        if ((v192 & 0x80000000) == 0)
          *(_QWORD *)(v191 + ((v192 >> 3) & 0x1FFFFFF8)) |= 1 << v192;
        v189 = (uint64_t **)*v189;
      }
      while (v189);
    }
    v193 = 0;
    v194 = 0;
    v195 = *(_DWORD *)(*((_QWORD *)&v304 + 1) + 4 * (int)v188);
    LOWORD(v266) = 256;
    v196 = -1;
    v197 = v299;
    while (1)
    {
      v198 = v193;
      v199 = *((unsigned __int8 *)&v266 + v194);
      LODWORD(v287) = 0;
      if (v197 >= 1)
      {
        v200 = 0;
        v201 = 0;
        v202 = -1;
        do
        {
          if (((*(_QWORD *)(v311.__r_.__value_.__r.__words[0] + ((v200 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v200) & 1) == 0)
          {
            v203 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v300, v200, &v287)+ 5)- v195;
            if (v199 || (v203 & 0x80000000) == 0)
            {
              if (v203 < 0)
                v203 = -v203;
              v204 = v201 ^ 1 | (v203 < v202);
              if ((v201 ^ 1) & 1 | (v203 < v202))
              {
                v196 = v200;
                v202 = v203;
              }
              v201 |= v204;
            }
          }
          LODWORD(v287) = ++v200;
          v197 = v299;
        }
        while ((uint64_t)v200 < v299);
        if ((v196 & 0x80000000) == 0)
          break;
      }
      v193 = 1;
      v194 = 1;
      if ((v198 & 1) != 0)
      {
        if (v196 == -1)
        {
          v299 = v197 + 1;
          v196 = v197;
        }
        break;
      }
    }
    LODWORD(v285) = v196;
    *(_DWORD *)(v303 + 4 * v188) = v196;
    if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v300, *((unint64_t *)&v300 + 1), v196))
    {
      v205 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v300, v196, &v285)+ 5);
      v206 = *(_DWORD *)(*((_QWORD *)&v304 + 1) + 4 * v188);
      v207 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v300, v196, &v285);
      if (v205 <= v206)
        v205 = v206;
    }
    else
    {
      v205 = *(_DWORD *)(*((_QWORD *)&v304 + 1) + 4 * v188);
      v207 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v300, v196, &v285);
    }
    *((_DWORD *)v207 + 5) = v205;
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__x);
    v187 = v264 + 1;
  }
  while (v264 + 1 < (unint64_t)SHIDWORD(__sz));
  a2 = v262;
  if (SHIDWORD(__sz) >= 1)
  {
    v208 = 0;
    do
    {
      if ((*(_DWORD *)(v303 + 4 * v208) & 0x80000000) != 0)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("force_aliased blob %d is not colored", v208);
      ++v208;
    }
    while (HIDWORD(__sz) != v208);
  }
LABEL_256:
  v292 = 1;
  if (v311.__r_.__value_.__r.__words[0])
    operator delete(v311.__r_.__value_.__l.__data_);
  if (*((_BYTE *)v261 + 16))
  {
    v209 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
    v210 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)a2);
    v211 = operator new(0x28uLL);
    *v211 = &off_1E2DB33F0;
    v211[1] = v210;
    v211[2] = (char *)v273 + 8;
    v211[3] = v209;
    v211[4] = a2;
    *((_QWORD *)&v307 + 1) = v211;
    Espresso::net::apply_to_all_globals(a2, __x);
    v212 = (std::vector<int>::value_type *)*((_QWORD *)&v307 + 1);
    if (*((std::vector<int>::value_type **)&v307 + 1) == __x)
    {
      v213 = 4;
      v212 = __x;
    }
    else
    {
      if (!*((_QWORD *)&v307 + 1))
        goto LABEL_264;
      v213 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v212 + 8 * v213))();
  }
LABEL_264:
  Espresso::interference_graph::analysis_result((Espresso::interference_graph *)&v266, (uint64_t)&v289);
  v214 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  v265 = (char *)a2 + 184;
  v215 = v266;
  v216 = *(_QWORD *)(v266 + 48);
  if (*(_QWORD *)(v266 + 56) != v216)
  {
    v217 = 0;
    v218 = (char *)a2 + 136;
    do
    {
      v219 = *(_QWORD *)(v216 + 8 * v217);
      v220 = v214[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v214[8] - v220) >> 3) <= v219)
        goto LABEL_329;
      v221 = (unsigned __int8 *)(v220 + 24 * v219);
      *(_QWORD *)__x = v221;
      v222 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v218, v221, (__int128 **)__x);
      v223 = std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v265, v221);
      Espresso::abstract_blob_container::shape((char *)__x, *((_QWORD *)v222 + 5));
      v224 = Espresso::layer_shape::operator==((uint64_t)__x, v223);
      if (v309)
      {
        v310 = v309;
        operator delete(v309);
      }
      if (!v224)
      {
        v225 = *((_QWORD *)v222 + 5);
        *(_OWORD *)&v311.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v225 + 16))(v225, v223, &v311);
        v226 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
        if (v311.__r_.__value_.__l.__size_)
        {
          v227 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
      }
      ++v217;
      v215 = v266;
      v216 = *(_QWORD *)(v266 + 48);
    }
    while (v217 < (*(_QWORD *)(v266 + 56) - v216) >> 3);
    a2 = v262;
  }
  if (*(_QWORD *)(v215 + 32))
  {
    v229 = 0;
    v230 = (char *)a2 + 136;
    while (1)
    {
      v231 = v214[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v214[8] - v231) >> 3) <= v229)
        break;
      v232 = (unsigned __int8 *)(v231 + 24 * v229);
      v233 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v215 + 8), v232);
      if (!v233)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v234 = *((int *)v233 + 10);
      v215 = v266;
      v235 = *(_QWORD *)(v266 + 48);
      if (v234 >= (*(_QWORD *)(v266 + 56) - v235) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v236 = *(_QWORD *)(v235 + 8 * v234);
      if (v236 != v229)
      {
        v237 = operator new(0x98uLL);
        v237[1] = 0;
        v238 = v237 + 1;
        v237[2] = 0;
        *v237 = &off_1E2DBE998;
        *((_OWORD *)v237 + 4) = 0u;
        *((_OWORD *)v237 + 5) = 0u;
        *((_OWORD *)v237 + 2) = 0u;
        *((_OWORD *)v237 + 3) = 0u;
        *((_OWORD *)v237 + 6) = 0u;
        *((_OWORD *)v237 + 7) = 0u;
        *((_OWORD *)v237 + 8) = 0u;
        v237[17] = 0;
        v237[18] = 0;
        *((_DWORD *)v237 + 12) = 1065353216;
        v237[7] = 0x1FFFFFFFFLL;
        v237[12] = 0;
        v237[13] = 0;
        v237[8] = 0;
        v237[9] = 0;
        *((_BYTE *)v237 + 88) = 0;
        v237[10] = 0;
        v237[3] = &off_1E2DA0BF0;
        v237[15] = 0;
        v237[16] = 0;
        *((_BYTE *)v237 + 144) = 0;
        v239 = v214[7];
        v240 = 0xAAAAAAAAAAAAAAABLL * ((v214[8] - v239) >> 3);
        v287 = (std::string::size_type)(v237 + 3);
        v288 = (std::__shared_weak_count *)v237;
        if (v240 <= v236)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        *(_QWORD *)__x = v239 + 24 * v236;
        v241 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v230, *(unsigned __int8 **)__x, (__int128 **)__x);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v237 + 16, *((_QWORD *)v241 + 5), *((_QWORD *)v241 + 6));
        *(_QWORD *)__x = v232;
        v242 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v230, v232, (__int128 **)__x);
        v243 = std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v265, v232);
        Espresso::abstract_blob_container::shape((char *)__x, *((_QWORD *)v242 + 5));
        v244 = Espresso::layer_shape::operator==((uint64_t)__x, v243);
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        if (!v244)
        {
          v245 = *((_QWORD *)v242 + 5);
          v285 = (std::string *)(v237 + 3);
          v286 = (std::__shared_weak_count *)v237;
          do
            v246 = __ldxr(v238);
          while (__stxr(v246 + 1, v238));
          (*(void (**)(uint64_t, uint64_t, std::string **))(*(_QWORD *)v245 + 16))(v245, v243, &v285);
          v247 = v286;
          if (v286)
          {
            v248 = (unint64_t *)&v286->__shared_owners_;
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 - 1, v248));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
        }
        v250 = v288;
        if (v288)
        {
          v251 = (unint64_t *)&v288->__shared_owners_;
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
            std::__shared_weak_count::__release_weak(v250);
          }
        }
        v215 = v266;
      }
      if (*(_QWORD *)(v215 + 32) <= ++v229)
        goto LABEL_301;
    }
LABEL_329:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_301:
  v253 = v267;
  if (v267)
  {
    v254 = (unint64_t *)&v267->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  Espresso::interference_graph::analysis_result((Espresso::interference_graph *)__x, (uint64_t)&v289);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v263, (__int128 *)__x);
  v256 = *(std::__shared_weak_count **)&__x[2];
  if (*(_QWORD *)&__x[2])
  {
    v257 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  if (*((_QWORD *)&v304 + 1))
  {
    *(_QWORD *)&v305 = *((_QWORD *)&v304 + 1);
    operator delete(*((void **)&v304 + 1));
  }
  if ((_QWORD)v303)
  {
    *((_QWORD *)&v303 + 1) = v303;
    operator delete((void *)v303);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v300);
  if (*((_QWORD *)&v297 + 1))
  {
    *(_QWORD *)&v298 = *((_QWORD *)&v297 + 1);
    operator delete(*((void **)&v297 + 1));
  }
  if ((_QWORD)v296)
  {
    *((_QWORD *)&v296 + 1) = v296;
    operator delete((void *)v296);
  }
  if (*((_QWORD *)&v294 + 1))
  {
    *(_QWORD *)&v295 = *((_QWORD *)&v294 + 1);
    operator delete(*((void **)&v294 + 1));
  }
  *(_QWORD *)__x = &v293;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)v273 + 8);
  if (v272[0])
    operator delete(v272[0]);
  v32 = v270.__begin_;
  if (v270.__begin_)
  {
    v270.__end_ = v270.__begin_;
LABEL_35:
    operator delete(v32);
  }
LABEL_36:
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v263, &v282);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
  if (*((_QWORD *)&v282 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v284;
  if (v284)
  {
    v37 = (unint64_t *)&v284->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_190DC3070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;

  v50 = *(_QWORD **)(v48 - 184);
  if (v50 == v47)
  {
    v51 = 4;
    v50 = (_QWORD *)(v48 - 208);
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_6:
  Espresso::interference_graph::~interference_graph((Espresso::interference_graph *)&a47);
  Espresso::force_aliased_blob_index::~force_aliased_blob_index((Espresso::force_aliased_blob_index *)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void Espresso::net::infer_configuration_for_shapes(Espresso::net *this@<X0>, const Espresso::network_shape *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char *v6;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  BOOL v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 *v23;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 24) = a3 + 32;
  *(_QWORD *)(a3 + 40) = 0;
  v5 = (char *)*((_QWORD *)this + 29);
  v6 = (char *)this + 240;
  if (v5 != (char *)this + 240)
  {
    v8 = (char *)a2 + 8;
    do
    {
      v9 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2, (_QWORD *)v5 + 4);
      if (v8 != v9)
      {
        v10 = v9;
        v23 = (__int128 *)(v5 + 32);
        v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 24), (_QWORD *)v5 + 4, &v23);
        v12 = *(_OWORD *)(v10 + 56);
        v13 = *(_OWORD *)(v10 + 72);
        *((_QWORD *)v11 + 11) = *((_QWORD *)v10 + 11);
        *(_OWORD *)(v11 + 72) = v13;
        *(_OWORD *)(v11 + 56) = v12;
        if (v11 != v10)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11 + 96, *((char **)v10 + 12), *((_QWORD *)v10 + 13), (uint64_t)(*((_QWORD *)v10 + 13) - *((_QWORD *)v10 + 12)) >> 2);
      }
      v14 = (char *)*((_QWORD *)v5 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v5 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v16);
      }
      v5 = v15;
    }
    while (v15 != v6);
  }
  v17 = (char *)*((_QWORD *)this + 32);
  v18 = (char *)this + 264;
  if (v17 != (char *)this + 264)
  {
    v19 = *(std::string **)(a3 + 8);
    do
    {
      v20 = (__int128 *)(v17 + 32);
      if ((unint64_t)v19 >= *(_QWORD *)(a3 + 16))
      {
        v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v20);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v20);
        ++v19;
      }
      *(_QWORD *)(a3 + 8) = v19;
      v21 = (char *)*((_QWORD *)v17 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (char *)*((_QWORD *)v17 + 2);
          v16 = *(_QWORD *)v22 == (_QWORD)v17;
          v17 = v22;
        }
        while (!v16);
      }
      v17 = v22;
    }
    while (v22 != v18);
  }
}

void sub_190DC3528(_Unwind_Exception *a1)
{
  char **v1;

  Espresso::net_configuration::~net_configuration(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_softmax_kernel::force_high_precision_output_f32(Espresso::ANECompilerEngine::mix_softmax_kernel *this)
{
  return 0;
}

void Espresso::pass_unpack_layers::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::ANECompilerEngine::reshape_kernel::blob_options(Espresso::ANECompilerEngine::reshape_kernel *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;

  *a3 = 0;
  a3[1] = 0;
  if (*((_BYTE *)this + 529) && (a2 & 1) == 0)
  {
    v4 = operator new(0x70uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E2DBE228;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    v4[3] = &off_1E2D9B4D8;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[13] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((_BYTE *)v4 + 88) = 0;
    v4[10] = 0;
    *(_QWORD *)&v9 = v4 + 3;
    *((_QWORD *)&v9 + 1) = v4;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v9);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *a3;
    *(_BYTE *)(v8 + 8) = 1;
    *(_DWORD *)(v8 + 12) = 5;
  }
}

void sub_190DC3640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::context_transfer_kernel_cpu::blob_options(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t bnns_alloc_capmem(void **a1, size_t a2, size_t a3)
{
  return malloc_type_posix_memalign(a1, a2, a3, 0x72A954D4uLL);
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_190DC37BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190DC37D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v13 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v13 + 10) = *(_DWORD *)(a3 + 24);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_41:
    *v23 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190DC3A2C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::context::handle_cast_kernel(Espresso::ANECompilerEngine::context *this, Espresso::net *a2, Espresso::ANECompilerEngine::context *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  _QWORD v38[2];
  void (*v39)(uint64_t, int64x2_t *);
  void *v40;
  Espresso::net **v41;
  Espresso::ANECompilerEngine::context **v42;
  void **v43;
  void **v44;
  void *__p[5];
  void *v46[5];
  Espresso::net *v47;
  Espresso::ANECompilerEngine::context *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[6];
  char v55[8];
  std::__shared_weak_count *v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  char v60;
  void **v61[2];
  std::__shared_weak_count *v62;
  _QWORD v63[3];
  _QWORD v64[3];
  uint64_t v65[3];

  v65[0] = *MEMORY[0x1E0C80C00];
  v47 = a2;
  v48 = this;
  v52 = 0u;
  v53 = 0u;
  LODWORD(v54[0]) = 1065353216;
  Espresso::net::get_consumers_of_blobs(this, &v52, (uint64_t)v46);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v52);
  Espresso::net::get_producers_of_blobs(this, (uint64_t)__p);
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3321888768;
  v39 = ___ZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1__block_invoke;
  v40 = &__block_descriptor_64_ea8_32c82_ZTSKZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1_E3__0_e9_v16__0_v8l;
  v41 = &v47;
  v42 = &v48;
  v43 = v46;
  v44 = __p;
  v4 = v38;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v55, this);
  v53 = 0u;
  memset(v54, 0, 28);
  v52 = 0u;
  v54[4] = this;
  v5 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v5)
  {
    v6 = 0;
    do
    {
      LODWORD(v54[3]) = v6;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v53, *(_QWORD *)(v5 + 16 * v6), *(_QWORD *)(v5 + 16 * v6 + 8));
      v7 = v53;
      v8 = *(void **)(v53 + 64);
      if (v8
      {
        v9 = *(_QWORD *)(v7 + 72);
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
      }
      else
      {
        v9 = 0;
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      *(_QWORD *)&v52 = v8;
      *((_QWORD *)&v52 + 1) = v9;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v8 = (void *)v52;
      }
      if (v8)
        v39((uint64_t)v4, (int64x2_t *)&v52);
      ++v6;
      v5 = *((_QWORD *)this + 4);
    }
    while (v6 < (*((_QWORD *)this + 5) - v5) >> 4);
    v16 = v54[0];
    v15 = v54[1];
    if (v54[0] != v54[1])
    {
      v17 = 0;
      do
      {
        v18 = *(_DWORD *)v16 + v17;
        *(_DWORD *)v16 = v18;
        v19 = *(void ***)(v16 + 8);
        if (v19)
        {
          LODWORD(v61[0]) = v18;
          v20 = *(std::__shared_weak_count **)(v16 + 16);
          v61[1] = v19;
          v62 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          memset(v63, 0, sizeof(v63));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v63, *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3));
          memset(v64, 0, sizeof(v64));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v64, *(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3));
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v59 = &v49;
          v60 = 0;
          v49 = (char *)operator new(0x48uLL);
          v50 = (uint64_t)v49;
          v51 = v49 + 72;
          v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v51, (uint64_t)v61, (uint64_t)v65, (uint64_t)v49);
          Espresso::net::insert_layers((uint64_t)this, (uint64_t *)&v49);
          v59 = &v49;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          v59 = (char **)v64;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          v59 = (char **)v63;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          v23 = v62;
          if (v62)
          {
            v24 = (unint64_t *)&v62->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = 1;
        }
        else
        {
          Espresso::net::remove_layer(this, v18);
          v26 = -1;
        }
        v17 += v26;
        v16 += 72;
      }
      while (v16 != v15);
    }
  }
  v61[0] = (void **)v54;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v61);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v58);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v57);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p[2]);
  v36 = __p[0];
  __p[0] = 0;
  if (v36)
    operator delete(v36);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v46[2]);
  v37 = v46[0];
  v46[0] = 0;
  if (v37)
    operator delete(v37);
}

void sub_190DC3EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_convolution_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190DC4398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context33cross_correlation_use_anec_layoutEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  __int128 v13;
  const void *v14;
  size_t size;
  std::string *p_str;
  std::string *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *p_lpsrc;
  std::string *v51;
  void **p_data;
  void *lpsrc;
  std::__shared_weak_count *v54;
  char *v55;
  uint64_t v56[2];
  std::string __p;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::string *v62;
  int v63;
  __int128 v64;
  int v65;
  __int16 v66;
  int v67;
  std::string __str;
  _BYTE v69[32];
  uint64_t v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  std::string v74;
  std::string **p_p_lpsrc;
  char v76;
  std::string v77;
  uint64_t v78;
  std::string v79;
  __int128 v80;

  *(_QWORD *)&v80 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    v6 = *(_QWORD *)(a1 + 40) + 56;
    *(_QWORD *)v69 = a2[3].i32[2];
    v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, *(unint64_t *)v69, v69);
    if (v7[4] - v7[3] == 48)
    {
      v8 = *(_QWORD *)(a1 + 40) + 56;
      v9 = a2[3].i32[2];
      *(_QWORD *)v69 = v9;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v69)[3];
      if (*(char *)(v10 + 47) < 0)
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
      else
        v74 = *(std::string *)(v10 + 24);
      v11 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v62 = &v74;
      v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, &v74, (__int128 **)&v62);
      v13 = *(_OWORD *)(v12 + 72);
      *(_OWORD *)v69 = *(_OWORD *)(v12 + 56);
      *(_OWORD *)&v69[16] = v13;
      v14 = (const void *)*((_QWORD *)v12 + 12);
      v70 = *((_QWORD *)v12 + 11);
      v71 = 0;
      v72 = 0;
      v73 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, v14, *((_QWORD *)v12 + 13), (uint64_t)(*((_QWORD *)v12 + 13) - (_QWORD)v14) >> 2);
      if (*(_DWORD *)&v69[16] * *(_DWORD *)&v69[12] != 1)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        else
          size = v74.__r_.__value_.__l.__size_;
        p_str = &__str;
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 13);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v74;
          else
            v17 = (std::string *)v74.__r_.__value_.__r.__words[0];
          memmove(p_str, v17, size);
        }
        strcpy((char *)p_str + size, "__anec_layout");
        *(_DWORD *)&v69[8] *= *(_DWORD *)&v69[16] * *(_DWORD *)&v69[12];
        *(_QWORD *)&v69[12] = 0x100000001;
        v66 = 1;
        v67 = 1;
        v62 = *(std::string **)v69;
        v65 = 0;
        v63 = *(_DWORD *)&v69[8];
        v64 = xmmword_191A93750;
        v18 = *(_QWORD *)(a1 + 40);
        v20 = *(_QWORD *)(v18 + 16);
        v19 = *(std::__shared_weak_count **)(v18 + 24);
        v60 = v20;
        v61 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        Espresso::abstract_engine_factory::shared(&v79);
        v23 = v79.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
        LODWORD(p_lpsrc) = (***(uint64_t (****)(_QWORD))(v60 + 8))(*(_QWORD *)(v60 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v23, (uint64_t)&v60, (uint64_t)&__p, (uint64_t)&v62, (int *)&p_lpsrc);
        if (lpsrc
        {
          v58 = (uint64_t)v24;
          v59 = (uint64_t)v54;
          if (v54)
          {
            v25 = (unint64_t *)&v54->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
        }
        else
        {
          v58 = 0;
          v59 = 0;
        }
        v27 = v54;
        if (v54)
        {
          v28 = (unint64_t *)&v54->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v30 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
        if (v79.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (std::__shared_weak_count *)v59;
        v56[0] = v58;
        v56[1] = v59;
        if (v59)
        {
          v34 = (unint64_t *)(v59 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v79, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
        else
          v79 = v74;
        lpsrc = 0;
        v54 = 0;
        v55 = 0;
        p_lpsrc = (std::string *)&lpsrc;
        LOBYTE(v51) = 0;
        lpsrc = operator new(0x18uLL);
        v54 = (std::__shared_weak_count *)lpsrc;
        v55 = (char *)lpsrc + 24;
        v54 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v79, &v80, (std::string *)lpsrc);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v77, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v77 = __str;
        p_lpsrc = 0;
        v51 = 0;
        p_data = 0;
        p_p_lpsrc = &p_lpsrc;
        v76 = 0;
        p_lpsrc = (std::string *)operator new(0x18uLL);
        v51 = p_lpsrc;
        p_data = (void **)&p_lpsrc[1].__r_.__value_.__l.__data_;
        v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v77, (__int128 *)&v78, p_lpsrc);
        Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, v56, &__p, &__str, (std::string **)&lpsrc, &p_lpsrc, 1);
        p_p_lpsrc = &p_lpsrc;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_lpsrc);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        p_lpsrc = (std::string *)&lpsrc;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_lpsrc);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v33)
        {
          v36 = (unint64_t *)&v33->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v38 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, &__str, (__int128 **)&__p);
        v40 = *(_OWORD *)&v69[16];
        *(_OWORD *)(v39 + 56) = *(_OWORD *)v69;
        *(_OWORD *)(v39 + 72) = v40;
        *((_QWORD *)v39 + 11) = v70;
        if (v39 + 56 != v69)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, (char *)v71, (uint64_t)v72, (v72 - (_BYTE *)v71) >> 2);
        v41 = *(_QWORD *)(a1 + 40) + 56;
        v42 = a2[3].i32[2];
        __p.__r_.__value_.__r.__words[0] = v42;
        v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v41, v42, &__p);
        std::string::operator=((std::string *)(v43[3] + 24), &__str);
        v44 = (std::__shared_weak_count *)v59;
        if (v59)
        {
          v45 = (unint64_t *)(v59 + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v61;
        if (v61)
        {
          v48 = (unint64_t *)&v61->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
    }
  }
}

void sub_190DC4A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;

  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a38 < 0)
    operator delete(a33);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (*(char *)(v45 - 153) < 0)
    operator delete(*(void **)(v45 - 176));
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_activation_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190DC4F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context20transform_leaky_reluEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  uint64_t v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  size_t size;
  std::string *v33;
  std::string *v34;
  uint64_t v35;
  void **v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  size_t v56;
  std::string *v57;
  std::string *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t i;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74[2];
  uint64_t v75;
  std::string::size_type v76;
  std::string *p_lpsrc;
  std::string *v78;
  void **p_data;
  std::string lpsrc;
  uint64_t v81[2];
  std::string v82;
  std::string v83;
  std::string v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  int v87;
  int v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::string v91;
  std::string *v92;
  std::string::size_type v93;
  void *__p;
  _QWORD v95[8];
  std::string v96;
  uint64_t v97;
  std::string v98;
  std::string v99;
  std::string v100;
  uint64_t v101;
  std::string v102;
  __int128 v103;

  *(_QWORD *)&v103 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v2 && v2 != 0)
    return;
  v6 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.transform_leaky_relu");
  std::string::basic_string[abi:ne180100]<0>(&v98, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&__p, (uint64_t)&v98, &v91);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95[1]) < 0)
    operator delete(__p);
  v7 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (std::string *)v91.__r_.__value_.__r.__words[0];
    if (v91.__r_.__value_.__l.__size_ != 1)
    {
LABEL_161:
      operator delete(v8);
      return;
    }
  }
  else
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) != 1)
      return;
    v8 = &v91;
  }
  if (v8->__r_.__value_.__s.__data_[0] == 49)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(std::__shared_weak_count **)(v9 + 24);
    v89 = v10;
    v90 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (***(uint64_t (****)(_QWORD))(v10 + 8))(*(_QWORD *)(v10 + 8));
    v87 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
    v88 = v14;
    Espresso::abstract_engine_factory::shared(&v85);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
    v16 = *(_DWORD *)v15;
    v17 = *(float *)(v15 + 4);
    v18 = *(_QWORD *)(a1 + 40) + 96;
    v19 = a2[3].i32[2];
    __p = (void *)v19;
    v20 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, &__p)[3];
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      v84.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v21;
    }
    v22 = *(_QWORD *)(a1 + 40) + 56;
    v23 = a2[3].i32[2];
    __p = (void *)v23;
    v24 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, &__p)[3];
    if (*((char *)v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
    }
    else
    {
      v25 = *v24;
      v83.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v25;
    }
    if (v16 == 2 && v17 <= 1.0)
    {
      LODWORD(__p) = a2[3].i32[2];
      memset(v95, 0, sizeof(v95));
      v27 = a2[2].u64[1];
      if (v27 >= a2[3].i64[0])
      {
        v28 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
        v28 = v27 + 72;
        a2[2].i64[1] = v27 + 72;
      }
      a2[2].i64[1] = v28;
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95[5];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95[2];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v29 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v30 = (unint64_t *)(v95[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        size = v83.__r_.__value_.__l.__size_;
      v33 = &v82;
      std::string::basic_string[abi:ne180100]((uint64_t)&v82, size + 27);
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v82.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v83;
        else
          v34 = (std::string *)v83.__r_.__value_.__r.__words[0];
        memmove(v33, v34, size);
      }
      strcpy((char *)v33 + size, "__@leaky_relu__scaled_input");
      LODWORD(__p) = 6;
      *((float *)&__p + 1) = v17;
      memset(v95, 0, 28);
      v35 = v85;
      std::string::basic_string[abi:ne180100]<0>(&v98, "activation");
      Espresso::abstract_engine_factory::make_kernel_priv(v35, (uint64_t)&v89, (uint64_t)&v98, (uint64_t)&__p, &v88);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v92 = (std::string *)v36;
        v93 = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
      }
      else
      {
        v92 = 0;
        v93 = 0;
      }
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v39 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)lpsrc.__r_.__value_.__l.__size_ + 16))(lpsrc.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
        }
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      v41 = (std::__shared_weak_count *)v93;
      v81[0] = (uint64_t)v92;
      v81[1] = v93;
      if (v93)
      {
        v42 = (unint64_t *)(v93 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::string::basic_string[abi:ne180100]<0>(&v98, "activation");
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v102, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
      else
        v102 = v83;
      memset(&lpsrc, 0, sizeof(lpsrc));
      p_lpsrc = &lpsrc;
      LOBYTE(v78) = 0;
      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
      lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 24;
      lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (__int128 *)&v102, &v103, (std::string *)lpsrc.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v100, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      else
        v100 = v82;
      p_lpsrc = 0;
      v78 = 0;
      p_data = 0;
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
      v96.__r_.__value_.__s.__data_[8] = 0;
      p_lpsrc = (std::string *)operator new(0x18uLL);
      v78 = p_lpsrc;
      p_data = (void **)&p_lpsrc[1].__r_.__value_.__l.__data_;
      v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v100, (__int128 *)&v101, p_lpsrc);
      Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v81, &v98, &v82, (std::string **)&lpsrc, &p_lpsrc, 0);
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      p_lpsrc = &lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_lpsrc);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v41)
      {
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v46 = (std::__shared_weak_count *)v93;
      if (v93)
      {
        v47 = (unint64_t *)(v93 + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v95[1] = 897988541;
      LOBYTE(v95[2]) = 0;
      *(_QWORD *)((char *)&v95[4] + 4) = 0;
      __p = (void *)23;
      v95[0] = 1065353216;
      v49 = v85;
      std::string::basic_string[abi:ne180100]<0>(&v98, "elementwise");
      Espresso::abstract_engine_factory::make_kernel_priv(v49, (uint64_t)&v89, (uint64_t)&v98, (uint64_t)&__p, &v88);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v75 = (uint64_t)v50;
        v76 = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v51 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
      }
      else
      {
        v75 = 0;
        v76 = 0;
      }
      v53 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v54 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        v56 = v83.__r_.__value_.__l.__size_;
      v57 = &lpsrc;
      std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v56 + 32);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
      if (v56)
      {
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v83;
        else
          v58 = (std::string *)v83.__r_.__value_.__r.__words[0];
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, "__@leaky_relu__elementwise_max_k");
      v59 = (std::__shared_weak_count *)v76;
      v74[0] = v75;
      v74[1] = v76;
      if (v76)
      {
        v60 = (unint64_t *)(v76 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      std::string::basic_string[abi:ne180100]<0>(&v102, "elementwise");
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v98, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
      else
        v98 = v83;
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v99, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      else
        v99 = v82;
      p_lpsrc = 0;
      v78 = 0;
      p_data = 0;
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
      v100.__r_.__value_.__s.__data_[8] = 0;
      p_lpsrc = (std::string *)operator new(0x30uLL);
      v78 = p_lpsrc;
      p_data = (void **)&p_lpsrc[2].__r_.__value_.__l.__data_;
      v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v98, (__int128 *)&v100, p_lpsrc);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v96, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
      else
        v96 = v84;
      memset(&v100, 0, sizeof(v100));
      v92 = &v100;
      LOBYTE(v93) = 0;
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
      v100.__r_.__value_.__r.__words[2] = v100.__r_.__value_.__r.__words[0] + 24;
      v100.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v100.__r_.__value_.__r.__words[2], (__int128 *)&v96, (__int128 *)&v97, (std::string *)v100.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v74, &v102, &lpsrc, &p_lpsrc, (std::string **)&v100, 0);
      v92 = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v98 + i * 8 + 24));
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (v59)
      {
        v63 = (unint64_t *)&v59->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      v65 = (std::__shared_weak_count *)v76;
      if (v76)
      {
        v66 = (unint64_t *)(v76 + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    v68 = v86;
    if (v86)
    {
      v69 = (unint64_t *)&v86->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v90;
    if (v90)
    {
      v72 = (unint64_t *)&v90->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v7 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0)
  {
    v8 = (std::string *)v91.__r_.__value_.__r.__words[0];
    goto LABEL_161;
  }
}

void sub_190DC5A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)(v62 - 128) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 128));
  v64 = 0;
  v65 = v62 - 176;
  while (1)
  {
    if (*(char *)(v65 + v64 + 47) < 0)
      operator delete(*(void **)(v65 + v64 + 24));
    v64 -= 24;
    if (v64 == -48)
    {
      if (*(char *)(v62 - 73) < 0)
        operator delete(*(void **)(v62 - 96));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      if (a22 < 0)
        operator delete(__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      if (a30 < 0)
        operator delete(a25);
      if (a36 < 0)
        operator delete(a31);
      if (a43 < 0)
        operator delete(a38);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
      if (a54 < 0)
        operator delete(a49);
      _Unwind_Resume(a1);
    }
  }
}

void ___ZN8Espresso17ANECompilerEngine7context23split_4x4_deconvolutionEPNS_3netEPS1__block_invoke(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  const void *v39;
  signed int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  signed int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  signed int v49;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  size_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  __int128 *v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  __int128 v86;
  const void *v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  std::string::size_type size;
  __int128 v93;
  uint64_t **v94;
  char *v95;
  __int128 v96;
  uint64_t **v97;
  char *v98;
  __int128 v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  std::string **v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  uint64_t v116;
  int64x2_t *v117;
  int v118;
  uint64_t v119;
  void **v120[3];
  uint64_t v121[2];
  uint64_t v122[2];
  std::string *v123[3];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  void *v127;
  _BYTE *v128;
  uint64_t v129;
  void *v130[2];
  __int128 v131;
  std::string::size_type v132;
  void *v133;
  _BYTE *v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string __str;
  std::string v140;
  std::string v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  _QWORD v145[2];
  _QWORD v146[2];
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[2];
  uint64_t v150;
  uint64_t v151;
  void *lpsrc;
  uint64_t v153;
  _OWORD v154[2];
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  void *v162;
  _BYTE *v163;
  uint64_t v164;
  std::string v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void ***v168;
  std::string v169;
  void *v170[2];
  __int128 v171;
  uint64_t v172;
  void *v173;
  void *v174;
  uint64_t v175;
  std::string v176;
  __int128 v177;
  __int128 v178;
  std::string::size_type v179;
  void *__src;
  _BYTE *v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  void *__p[3];
  uint64_t v188;
  __int16 v189;
  __int128 v190;
  __int16 v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  __int16 v199;
  __int16 v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  __int16 v204;
  int v205;
  char v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v2 || v2 == 0)
  {
    v6 = *(_QWORD **)(a1 + 40);
    v7 = (std::__shared_weak_count *)v6[3];
    v166 = v6[2];
    v167 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v6 = *(_QWORD **)(a1 + 40);
    }
    v10 = *(_QWORD *)(v6[4] + 16 * a2[14]);
    if (*(char *)(v10 + 39) < 0)
      std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(v10 + 16), *(_QWORD *)(v10 + 24));
    else
      v165 = *(std::string *)(v10 + 16);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2);
    if (*(_WORD *)(v11 + 92) == 4 && *(_WORD *)(v11 + 94) == 4 && *(unsigned __int16 *)(v11 + 72) < 2u)
    {
      v14 = *(_QWORD *)(a1 + 40) + 56;
      v15 = a2[14];
      *(_QWORD *)&v184 = v15;
      v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, &v184);
      if (v16[4] - v16[3] == 24)
      {
        v17 = *(_QWORD *)(a1 + 40) + 96;
        v18 = a2[14];
        *(_QWORD *)&v159 = v18;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, &v159);
        if (v19[4] - v19[3] == 24)
        {
          v20 = *(_QWORD *)(a1 + 40);
          v21 = a2[14];
          *(_QWORD *)&v154[0] = v21;
          *(_QWORD *)&v184 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20 + 56, v21, v154)[3];
          v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v20 + 184), (_QWORD *)v184, (__int128 **)&v184);
          v23 = *(_OWORD *)(v22 + 72);
          v159 = *(_OWORD *)(v22 + 56);
          v160 = v23;
          v24 = (const void *)*((_QWORD *)v22 + 12);
          v161 = *((_QWORD *)v22 + 11);
          v162 = 0;
          v163 = 0;
          v164 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v162, v24, *((_QWORD *)v22 + 13), (uint64_t)(*((_QWORD *)v22 + 13) - (_QWORD)v24) >> 2);
          v25 = *(_QWORD *)(a1 + 40);
          v26 = a2[14];
          *(_QWORD *)&v184 = v26;
          v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25 + 96, v26, &v184);
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v25 + 192), (_QWORD *)v27[3]))
          {
            v28 = *(_QWORD *)a2;
            v184 = v159;
            v185 = v160;
            v186 = v161;
            memset(__p, 0, sizeof(__p));
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v162, (uint64_t)v163, (v163 - (_BYTE *)v162) >> 2);
            v130[0] = 0;
            v130[1] = 0;
            *(_QWORD *)&v131 = 0;
            *(_QWORD *)&v124 = v130;
            BYTE8(v124) = 0;
            v130[0] = operator new(0x40uLL);
            v130[1] = v130[0];
            *(_QWORD *)&v131 = (char *)v130[0] + 64;
            v130[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v131, &v184, (__int128 *)&v188, (uint64_t)v130[0]);
            (*(void (**)(_OWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v28 + 64))(v154, v28, v130);
            v29 = *(char **)&v154[0];
            v30 = *(_QWORD *)(a1 + 40);
            v31 = a2[14];
            *(_QWORD *)&v124 = v31;
            *(_QWORD *)&v177 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30 + 96, v31, &v124)[3];
            v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v30 + 184), (_QWORD *)v177, (__int128 **)&v177);
            v33 = *(_OWORD *)v29;
            v34 = *((_OWORD *)v29 + 1);
            *((_QWORD *)v32 + 11) = *((_QWORD *)v29 + 4);
            *(_OWORD *)(v32 + 72) = v34;
            *(_OWORD *)(v32 + 56) = v33;
            if (v32 + 56 != v29)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v32 + 96, *((char **)v29 + 5), *((_QWORD *)v29 + 6), (uint64_t)(*((_QWORD *)v29 + 6) - *((_QWORD *)v29 + 5)) >> 2);
            *(_QWORD *)&v124 = v154;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
            *(_QWORD *)&v124 = v130;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          v35 = *(_QWORD *)(a1 + 40);
          v36 = a2[14];
          v130[0] = (void *)v36;
          *(_QWORD *)&v184 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35 + 96, v36, v130)[3];
          v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v35 + 184), (_QWORD *)v184, (__int128 **)&v184);
          v38 = *(_OWORD *)(v37 + 72);
          v154[0] = *(_OWORD *)(v37 + 56);
          v154[1] = v38;
          v39 = (const void *)*((_QWORD *)v37 + 12);
          v155 = *((_QWORD *)v37 + 11);
          v156 = 0;
          v157 = 0;
          v158 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v156, v39, *((_QWORD *)v37 + 13), (uint64_t)(*((_QWORD *)v37 + 13) - (_QWORD)v39) >> 2);
          v40 = *(_DWORD *)(v11 + 48);
          v41 = v40 + (v159 - 1) * *(__int16 *)(v11 + 92) - LODWORD(v154[0]);
          v42 = v41 & ~(v41 >> 31);
          v43 = v42 >> 1;
          if ((int)(v42 >> 1) <= v40)
          {
            v44 = v42 - (v42 >> 1);
            if (v44 <= v40)
            {
              v45 = *(_DWORD *)(v11 + 52);
              v46 = v45 + (DWORD1(v159) - 1) * *(__int16 *)(v11 + 94) - DWORD1(v154[0]);
              v47 = v46 & ~(v46 >> 31);
              v48 = v47 >> 1;
              if ((int)(v47 >> 1) <= v45)
              {
                v49 = v47 - (v47 >> 1);
                if (v49 <= v45)
                {
                  v115 = v49;
                  HIDWORD(__p[2]) = -1;
                  __asm { FMOV            V0.2S, #1.0 }
                  v188 = _D0;
                  v190 = 0uLL;
                  v191 = 0;
                  v197 = 1;
                  v205 = 0;
                  v206 = 0;
                  v202 = 0;
                  v201 = 0;
                  v184 = 0uLL;
                  v193 = 0;
                  v194 = 0;
                  v195 = 0;
                  v198 = 0;
                  v200 = 1;
                  v199 = 0;
                  v185 = 0uLL;
                  v203 = 0;
                  v204 = 1;
                  *(_OWORD *)((char *)__p + 4) = xmmword_191A93720;
                  v192 = 0x1000100020002;
                  v196 = *(_DWORD *)(v11 + 44);
                  HIDWORD(__p[0]) = v196;
                  LODWORD(__p[0]) = *(_DWORD *)(v11 + 44);
                  v186 = 0;
                  v189 = 0;
                  *(_QWORD *)((char *)&v190 + 6) = 0;
                  Espresso::abstract_engine_factory::shared(&v177);
                  v53 = v177;
                  std::string::basic_string[abi:ne180100]<0>(v130, "deconvolution");
                  LODWORD(v170[0]) = (***(uint64_t (****)(_QWORD))(v166 + 8))(*(_QWORD *)(v166 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v53, (uint64_t)&v166, (uint64_t)v130, (uint64_t)&v184, (int *)v170);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::base_kernel>(&lpsrc, (void *)v124, *((uint64_t *)&v124 + 1));
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
                  if (SBYTE7(v131) < 0)
                    operator delete(v130[0]);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v177);
                  v151 = 0;
                  v150 = 0;
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::deconvolution_kernel,Espresso::generic_deconvolution_kernel>(v149, lpsrc, v153);
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)lpsrc + 488))(&v147);
                  v113 = v48;
                  v114 = v43;
                  v116 = a1;
                  v117 = (int64x2_t *)a2;
                  v183 = xmmword_191A93730;
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)lpsrc + 472))(v130);
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v150, (__int128 *)v130);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v130);
                  v54 = LODWORD(__p[0]);
                  if (SLODWORD(__p[0]) >= 1)
                  {
                    v55 = 0;
                    v119 = *(_QWORD *)(v150 + 24);
                    v56 = (int)__p[1];
                    v57 = HIDWORD(__p[1]);
                    v118 = LODWORD(__p[1]) * HIDWORD(__p[1]);
                    v58 = 4 * LODWORD(__p[1]);
                    do
                    {
                      if ((int)v57 >= 1)
                      {
                        v59 = 0;
                        v60 = v57;
                        do
                        {
                          if (v56 >= 1)
                            memcpy((void *)(v119 + 4 * v118 * (int)v55 + 4 * v59), (char *)&v183 + 4 * v59, v58);
                          v59 += v56;
                          --v60;
                        }
                        while (v60);
                      }
                      ++v55;
                    }
                    while (v55 != v54);
                  }
                  v61 = *(int *)(v147 + 8);
                  if ((_DWORD)v61)
                    bzero(*(void **)(v147 + 16), 4 * v61);
                  v62 = lpsrc;
                  v146[0] = v150;
                  v146[1] = v151;
                  if (v151)
                  {
                    v63 = (unint64_t *)(v151 + 8);
                    do
                      v64 = __ldxr(v63);
                    while (__stxr(v64 + 1, v63));
                  }
                  (*(void (**)(void *, _QWORD *))(*(_QWORD *)v62 + 400))(v62, v146);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v146);
                  v65 = lpsrc;
                  v145[0] = v147;
                  v145[1] = v148;
                  if (v148)
                  {
                    v66 = (unint64_t *)(v148 + 8);
                    do
                      v67 = __ldxr(v66);
                    while (__stxr(v67 + 1, v66));
                  }
                  (*(void (**)(void *, _QWORD *))(*(_QWORD *)v65 + 392))(v65, v145);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v145);
                  v144 = xmmword_191A93740;
                  Espresso::abstract_engine_factory::shared(&v177);
                  v68 = v177;
                  std::string::basic_string[abi:ne180100]<0>(v130, "crop");
                  LODWORD(v170[0]) = (***(uint64_t (****)(_QWORD))(v166 + 8))(*(_QWORD *)(v166 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v68, (uint64_t)&v166, (uint64_t)v130, (uint64_t)&v144, (int *)v170);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_crop_kernel,Espresso::base_kernel>(&v142, (void *)v124, *((uint64_t *)&v124 + 1));
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
                  if (SBYTE7(v131) < 0)
                    operator delete(v130[0]);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v177);
                  *(_WORD *)(v11 + 84) = v113;
                  *(_WORD *)(v11 + 86) = v115;
                  *(_WORD *)(v11 + 80) = v114;
                  *(_WORD *)(v11 + 82) = v44;
                  *(_WORD *)(v11 + 72) = 0;
                  *(_DWORD *)(v11 + 92) = 131074;
                  v69 = *(_QWORD *)(v116 + 40) + 56;
                  v70 = v117[3].i32[2];
                  v130[0] = (void *)v70;
                  v71 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v69, v70, v130)[3];
                  if (*((char *)v71 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v71, *((_QWORD *)v71 + 1));
                  }
                  else
                  {
                    v72 = *v71;
                    v141.__r_.__value_.__r.__words[2] = *((_QWORD *)v71 + 2);
                    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v72;
                  }
                  v73 = *(_QWORD *)(v116 + 40) + 96;
                  v74 = v117[3].i32[2];
                  v130[0] = (void *)v74;
                  v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v73, v74, v130);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@deconv0", (const void **)v75[3], &v140);
                  v76 = *(_QWORD *)(v116 + 40) + 96;
                  v77 = v117[3].i32[2];
                  v130[0] = (void *)v77;
                  v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v76, v77, v130);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@crop", (const void **)v78[3], &__str);
                  v79 = *(_QWORD *)(v116 + 40) + 96;
                  v80 = v117[3].i32[2];
                  v130[0] = (void *)v80;
                  v81 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v79, v80, v130)[3];
                  if (*((char *)v81 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)v81, *((_QWORD *)v81 + 1));
                  }
                  else
                  {
                    v82 = *v81;
                    v138.__r_.__value_.__r.__words[2] = *((_QWORD *)v81 + 2);
                    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v82;
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_deconv0", (const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v116 + 40) + 32) + 16 * v117[3].i32[2])+ 16), &v137);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_crop", (const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v116 + 40) + 32) + 16 * v117[3].i32[2])+ 16), &v136);
                  v83 = *(_QWORD *)(v116 + 40);
                  v84 = v117[3].i32[2];
                  *(_QWORD *)&v177 = v84;
                  *(_QWORD *)&v124 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v83 + 56, v84, &v177)[3];
                  v85 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v83 + 184), (_QWORD *)v124, (__int128 **)&v124);
                  v86 = *(_OWORD *)(v85 + 72);
                  *(_OWORD *)v130 = *(_OWORD *)(v85 + 56);
                  v131 = v86;
                  v87 = (const void *)*((_QWORD *)v85 + 12);
                  v132 = *((_QWORD *)v85 + 11);
                  v133 = 0;
                  v134 = 0;
                  v135 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v133, v87, *((_QWORD *)v85 + 13), (uint64_t)(*((_QWORD *)v85 + 13) - (_QWORD)v87) >> 2);
                  v88 = lpsrc;
                  v177 = *(_OWORD *)v130;
                  v178 = v131;
                  v179 = v132;
                  __src = 0;
                  v182 = 0;
                  v181 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, v133, (uint64_t)v134, (v134 - (_BYTE *)v133) >> 2);
                  std::vector<Espresso::layer_shape>::vector[abi:ne180100](v123, &v177, 1uLL);
                  (*(void (**)(void **__return_ptr, void *, std::string **))(*(_QWORD *)v88 + 64))(v170, v88, v123);
                  v89 = *((_QWORD *)v170[0] + 4);
                  v90 = *((_OWORD *)v170[0] + 1);
                  v124 = *(_OWORD *)v170[0];
                  v125 = v90;
                  v126 = v89;
                  v127 = 0;
                  v128 = 0;
                  v129 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v127, *((const void **)v170[0] + 5), *((_QWORD *)v170[0] + 6), (uint64_t)(*((_QWORD *)v170[0] + 6) - *((_QWORD *)v170[0] + 5)) >> 2);
                  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
                  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
                  if (__src)
                  {
                    v181 = __src;
                    operator delete(__src);
                  }
                  v91 = v142;
                  *(_OWORD *)v170 = v124;
                  v171 = v125;
                  v172 = v126;
                  v173 = 0;
                  v175 = 0;
                  v174 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v173, v127, (uint64_t)v128, (v128 - (_BYTE *)v127) >> 2);
                  std::vector<Espresso::layer_shape>::vector[abi:ne180100](&v176, (__int128 *)v170, 1uLL);
                  (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v91 + 64))(v123, v91, &v176);
                  size = v123[0][1].__r_.__value_.__l.__size_;
                  v93 = *(_OWORD *)&v123[0]->__r_.__value_.__r.__words[2];
                  v177 = *(_OWORD *)v123[0];
                  v178 = v93;
                  v179 = size;
                  __src = 0;
                  v182 = 0;
                  v181 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, (const void *)v123[0][1].__r_.__value_.__r.__words[2], (uint64_t)v123[0][2].__r_.__value_.__l.__data_, (uint64_t)(v123[0][2].__r_.__value_.__r.__words[0] - v123[0][1].__r_.__value_.__r.__words[2]) >> 2);
                  v120[0] = (void **)v123;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v120);
                  v120[0] = (void **)&v176;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v120);
                  if (v173)
                  {
                    v174 = v173;
                    operator delete(v173);
                  }
                  v94 = (uint64_t **)(*(_QWORD *)(v116 + 40) + 184);
                  v170[0] = &v140;
                  v95 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v94, &v140, (__int128 **)v170);
                  v96 = v125;
                  *(_OWORD *)(v95 + 56) = v124;
                  *(_OWORD *)(v95 + 72) = v96;
                  *((_QWORD *)v95 + 11) = v126;
                  if (v95 + 56 != (char *)&v124)
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v95 + 96, (char *)v127, (uint64_t)v128, (v128 - (_BYTE *)v127) >> 2);
                  v97 = (uint64_t **)(*(_QWORD *)(v116 + 40) + 184);
                  v170[0] = &__str;
                  v98 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v97, &__str, (__int128 **)v170);
                  v99 = v178;
                  *(_OWORD *)(v98 + 56) = v177;
                  *(_OWORD *)(v98 + 72) = v99;
                  *((_QWORD *)v98 + 11) = v179;
                  if (v98 + 56 != (char *)&v177)
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v98 + 96, (char *)__src, (uint64_t)v181, (v181 - (_BYTE *)__src) >> 2);
                  v122[0] = (uint64_t)lpsrc;
                  v122[1] = v153;
                  if (v153)
                  {
                    v100 = (unint64_t *)(v153 + 8);
                    do
                      v101 = __ldxr(v100);
                    while (__stxr(v101 + 1, v100));
                  }
                  std::string::basic_string[abi:ne180100]<0>(v170, "deconvolution");
                  v102 = *(_QWORD *)(v116 + 40) + 56;
                  v103 = v117[3].i32[2];
                  v169.__r_.__value_.__r.__words[0] = v103;
                  v104 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v102, v103, &v169);
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v176, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
                  else
                    v176 = v140;
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v123, (__int128 *)&v176, 1uLL);
                  Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(v117, v122, (const std::string *)v170, &v137, v104 + 3, v123);
                  v120[0] = (void **)v123;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v120);
                  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v176.__r_.__value_.__l.__data_);
                  if (SBYTE7(v171) < 0)
                    operator delete(v170[0]);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v122);
                  v121[0] = v142;
                  v121[1] = v143;
                  if (v143)
                  {
                    v105 = (unint64_t *)(v143 + 8);
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                  }
                  std::string::basic_string[abi:ne180100]<0>(v170, "crop");
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v176, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
                  else
                    v176 = v140;
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v123, (__int128 *)&v176, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v169, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  else
                    v169 = __str;
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v120, (__int128 *)&v169, 1uLL);
                  Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(v117, v121, (const std::string *)v170, &v136, v123, (std::string **)v120);
                  v168 = v120;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v169.__r_.__value_.__l.__data_);
                  v120[0] = (void **)v123;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v120);
                  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v176.__r_.__value_.__l.__data_);
                  if (SBYTE7(v171) < 0)
                    operator delete(v170[0]);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v121);
                  v107 = *(_QWORD *)(v116 + 40) + 56;
                  v108 = v117[3].i32[2];
                  v170[0] = (void *)v108;
                  v109 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v107, v108, v170);
                  std::string::operator=((std::string *)v109[3], &__str);
                  if (__src)
                  {
                    v181 = __src;
                    operator delete(__src);
                  }
                  if (v127)
                  {
                    v128 = v127;
                    operator delete(v127);
                  }
                  if (v133)
                  {
                    v134 = v133;
                    operator delete(v133);
                  }
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v136.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v137.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v138.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v140.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v141.__r_.__value_.__l.__data_);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v149);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v150);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&lpsrc);
                }
              }
            }
          }
          if (v156)
          {
            v157 = v156;
            operator delete(v156);
          }
          if (v162)
          {
            v163 = v162;
            operator delete(v162);
          }
        }
      }
    }
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    v110 = v167;
    if (v167)
    {
      v111 = (unint64_t *)&v167->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
}

void sub_190DC6B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  char a73;
  char a74;
  char a75;
  char a76;
  void *v77;
  void *v78;
  void *v79;

  a15 = (uint64_t)&a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  v77 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v77;
    operator delete(v77);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
  }
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  if (a58 < 0)
    operator delete(a53);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a74);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a75);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a76);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  v78 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v78;
    operator delete(v78);
  }
  v79 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v79;
    operator delete(v79);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190DC7318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t Espresso::net_fast_reshaper::reshape(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *i;
  _QWORD *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  Espresso *v24;
  const char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  Espresso::net *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  BOOL v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  Espresso::layer_shape *v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  char v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  Espresso *v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t v96;
  const char *v97;
  NSObject *v98;
  uint32_t v99;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  void *__p;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  char v125[4];
  int v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  void **v132;
  _BYTE buf[32];
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v4 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(*(_QWORD *)a1);
  v125[0] = 1;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v127 = 255;
  v126 = 723714080;
  kdebug_trace();
  v5 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
    *(_DWORD *)&buf[8] = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v7);
  }
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v9 = i + 2;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4 + 2, (unsigned __int8 *)i + 16);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v11 = *((int *)v10 + 10);
    v12 = *(_QWORD *)(a1 + 8) + (v11 << 6);
    v13 = *(_OWORD *)(i + 5);
    v14 = *(_OWORD *)(i + 7);
    *(_QWORD *)(v12 + 32) = i[9];
    *(_OWORD *)v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    if ((uint64_t *)v12 != i + 5)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v12 + 40), (char *)i[10], i[11], (i[11] - i[10]) >> 2);
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v15 = *(_QWORD *)a1 + 136;
    *(_QWORD *)buf = i + 2;
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)i + 16, (__int128 **)buf);
    v18 = *((_QWORD *)v17 + 5);
    if (!v18)
    {
      Espresso::espresso_os_log_subsystem(0, v16);
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)i + 39) < 0)
          v9 = (_QWORD *)*v9;
        v101 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(i + 5));
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v101;
        _os_log_debug_impl(&dword_190DAF000, v94, OS_LOG_TYPE_DEBUG, "Fail fast reshape (input) %s new=%lld old was null", buf, 0x16u);
      }
      goto LABEL_84;
    }
    v123 = 0;
    v124 = 0;
    v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 184))(v18, i + 5, &v123);
    v20 = v19;
    v21 = v124;
    if (!v124)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if ((v20 & 1) != 0)
        continue;
    }
    else
    {
LABEL_12:
      if ((v19 & 1) != 0)
        continue;
    }
    v24 = (Espresso *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 5) + 72))(*((_QWORD *)v17 + 5));
    if (!(_DWORD)v24)
    {
      Espresso::espresso_os_log_subsystem(v24, v25);
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)i + 39) < 0)
          v9 = (_QWORD *)*v9;
        v102 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(i + 5));
        v103 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 5) + 24))(*((_QWORD *)v17 + 5));
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v102;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v103;
        _os_log_debug_impl(&dword_190DAF000, v94, OS_LOG_TYPE_DEBUG, "Fail fast reshape (input) %s new=%lld, platform=%d", buf, 0x1Cu);
      }
LABEL_84:

      v93 = 0;
      goto LABEL_88;
    }
    v26 = *((_QWORD *)v17 + 5);
    v121 = 0;
    v122 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 16))(v26, i + 5, &v121);
    v27 = v122;
    if (v122)
    {
      v28 = (unint64_t *)&v122->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v118 = 0;
  v119 = 0;
  v120 = 0;
  std::vector<Espresso::layer_shape>::reserve(&v118, 8uLL);
  v30 = *(Espresso::net **)a1;
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == v31)
  {
LABEL_71:
    v86 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a1 + 16) != v86)
    {
      v87 = 0;
      v88 = 0;
      do
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v88) & 1) != 0)
        {
          v89 = (__int128 *)(v86 + v87);
          v90 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v88);
          v91 = *v89;
          v92 = v89[1];
          *(_QWORD *)(v90 + 88) = *((_QWORD *)v89 + 4);
          *(_OWORD *)(v90 + 72) = v92;
          *(_OWORD *)(v90 + 56) = v91;
          if (v89 != (__int128 *)(v90 + 56))
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v90 + 96), *((char **)v89 + 5), *((_QWORD *)v89 + 6), (uint64_t)(*((_QWORD *)v89 + 6) - *((_QWORD *)v89 + 5)) >> 2);
        }
        ++v88;
        v86 = *(_QWORD *)(a1 + 8);
        v87 += 64;
      }
      while (v88 < (*(_QWORD *)(a1 + 16) - v86) >> 6);
      v30 = *(Espresso::net **)a1;
    }
    Espresso::net::_on_resized(v30);
    v93 = 1;
    goto LABEL_87;
  }
  v32 = 0;
  while (1)
  {
    v106 = v31;
    v33 = v118;
    v34 = v119;
    if (v119 != v118)
    {
      do
      {
        v35 = *(void **)(v34 - 24);
        if (v35)
        {
          *(_QWORD *)(v34 - 16) = v35;
          operator delete(v35);
        }
        v34 -= 64;
      }
      while (v34 != v33);
      v30 = *(Espresso::net **)a1;
    }
    v119 = v33;
    v36 = *((_QWORD *)v30 + 121) != 0;
    v37 = v4[13] + 24 * v32;
    v39 = *(int **)v37;
    v38 = *(int **)(v37 + 8);
    while (v39 != v38)
    {
      v40 = *v39;
      v41 = *(_QWORD *)(a1 + 8) + (v40 << 6);
      v42 = *(_QWORD *)(v41 + 32);
      v43 = *(_OWORD *)(v41 + 16);
      *(_OWORD *)buf = *(_OWORD *)v41;
      *(_OWORD *)&buf[16] = v43;
      v134 = v42;
      v136 = 0;
      v135 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v135, *(const void **)(v41 + 40), *(_QWORD *)(v41 + 48), (uint64_t)(*(_QWORD *)(v41 + 48) - *(_QWORD *)(v41 + 40)) >> 2);
      v44 = (__int128 *)(*(_QWORD *)(a1 + 32) + (v40 << 6));
      v45 = *((_QWORD *)v44 + 4);
      v46 = v44[1];
      v112 = *v44;
      v113 = v46;
      v114 = v45;
      v116 = 0;
      v117 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v44 + 5), *((_QWORD *)v44 + 6), (uint64_t)(*((_QWORD *)v44 + 6) - *((_QWORD *)v44 + 5)) >> 2);
      v47 = Espresso::layer_shape::operator==((uint64_t)&v112, (uint64_t)buf);
      v48 = v119;
      if (v119 >= v120)
      {
        v51 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v118, (__int128 *)buf);
      }
      else
      {
        v49 = *(_OWORD *)buf;
        v50 = *(_OWORD *)&buf[16];
        *(_QWORD *)(v119 + 32) = v134;
        *(_OWORD *)v48 = v49;
        *(_OWORD *)(v48 + 16) = v50;
        *(_QWORD *)(v48 + 48) = 0;
        *(_QWORD *)(v48 + 56) = 0;
        *(_QWORD *)(v48 + 40) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v48 + 40), (const void *)v135, *((uint64_t *)&v135 + 1), (uint64_t)(*((_QWORD *)&v135 + 1) - v135) >> 2);
        v51 = v48 + 64;
      }
      v119 = v51;
      if (__p)
      {
        v116 = __p;
        operator delete(__p);
      }
      if ((_QWORD)v135)
      {
        *((_QWORD *)&v135 + 1) = v135;
        operator delete((void *)v135);
      }
      v36 |= !v47;
      ++v39;
    }
    if ((v36 & 1) == 0)
    {
      if (*(_QWORD *)(v4[10] + 24 * v32 + 8) != *(_QWORD *)(v4[10] + 24 * v32))
      {
        v79 = 0;
        v80 = 0;
        do
        {
          Espresso::abstract_blob_container::shape(buf, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 16 * v32) + 104) + v79));
          v81 = *(_QWORD *)(a1 + 8) + ((uint64_t)*(int *)(*(_QWORD *)(v4[10] + 24 * v32) + 4 * v80) << 6);
          v82 = *(_OWORD *)buf;
          v83 = *(_OWORD *)&buf[16];
          *(_QWORD *)(v81 + 32) = v134;
          *(_OWORD *)v81 = v82;
          *(_OWORD *)(v81 + 16) = v83;
          v85 = (_QWORD *)(v81 + 40);
          v84 = *(void **)(v81 + 40);
          if (v84)
          {
            *(_QWORD *)(v81 + 48) = v84;
            operator delete(v84);
            *v85 = 0;
            *(_QWORD *)(v81 + 48) = 0;
            *(_QWORD *)(v81 + 56) = 0;
          }
          *(_OWORD *)v85 = v135;
          *(_QWORD *)(v81 + 56) = v136;
          ++v80;
          v79 += 16;
        }
        while (v80 < (uint64_t)(*(_QWORD *)(v4[10] + 24 * v32 + 8) - *(_QWORD *)(v4[10] + 24 * v32)) >> 2);
      }
      goto LABEL_70;
    }
    v112 = 0uLL;
    *(_QWORD *)&v113 = 0;
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v32) + 64);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v52 + 64))(buf, v52, &v118);
    std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v112);
    v112 = *(_OWORD *)buf;
    *(_QWORD *)&v113 = *(_QWORD *)&buf[16];
    v132 = (void **)buf;
    memset(buf, 0, 24);
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v132);
    v54 = *(_QWORD *)(v4[10] + 24 * v32);
    v55 = *(_QWORD *)(v4[10] + 24 * v32 + 8);
    if ((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 6 >= (unint64_t)((v55 - v54) >> 2))
      v56 = (v55 - v54) >> 2;
    else
      v56 = (uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 6;
    v107 = v106 + 16 * v32;
    if (v56)
    {
      v57 = 0;
      for (j = 0; j != v56; ++j)
      {
        v59 = v112 + v57;
        v60 = *(_QWORD *)(a1 + 8) + ((uint64_t)*(int *)(*(_QWORD *)(v4[10] + 24 * v32) + 4 * j) << 6);
        v61 = *(_OWORD *)(v112 + v57);
        v62 = *(_OWORD *)(v112 + v57 + 16);
        *(_QWORD *)(v60 + 32) = *(_QWORD *)(v112 + v57 + 32);
        *(_OWORD *)v60 = v61;
        *(_OWORD *)(v60 + 16) = v62;
        if (v59 != v60)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v60 + 40), *(char **)(v59 + 40), *(_QWORD *)(v59 + 48), (uint64_t)(*(_QWORD *)(v59 + 48) - *(_QWORD *)(v59 + 40)) >> 2);
        v57 += 64;
      }
      v54 = *(_QWORD *)(v4[10] + 24 * v32);
      v55 = *(_QWORD *)(v4[10] + 24 * v32 + 8);
    }
    if (v55 != v54)
      break;
LABEL_64:
    *(_QWORD *)buf = &v112;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_70:
    ++v32;
    v30 = *(Espresso::net **)a1;
    v31 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if (v32 >= (*(_QWORD *)(*(_QWORD *)a1 + 40) - v31) >> 4)
      goto LABEL_71;
  }
  v63 = 0;
  while (1)
  {
    v64 = *(int *)(v54 + 4 * v63);
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
    v65 = (Espresso::layer_shape *)(*(_QWORD *)(a1 + 8) + (v64 << 6));
    v66 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v107 + 104) + 16 * v63);
    v67 = *v66;
    if (!*v66)
    {
      Espresso::espresso_os_log_subsystem(0, v53);
      v95 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        goto LABEL_86;
      v96 = Espresso::layer_shape::total_dim(v65);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v96;
      v97 = "Fail fast reshape (top_blob) new=%lld old was null";
      v98 = v95;
      v99 = 12;
      goto LABEL_96;
    }
    v110 = 0;
    v111 = 0;
    v68 = (*(uint64_t (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(_QWORD *)v67 + 184))(v67, v65, &v110);
    v69 = v68;
    v70 = v111;
    if (v111)
    {
      v71 = (unint64_t *)&v111->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
        break;
    }
    if ((v68 & 1) == 0)
      goto LABEL_56;
LABEL_63:
    ++v63;
    v54 = *(_QWORD *)(v4[10] + 24 * v32);
    if (v63 >= (*(_QWORD *)(v4[10] + 24 * v32 + 8) - v54) >> 2)
      goto LABEL_64;
  }
  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
  std::__shared_weak_count::__release_weak(v70);
  if ((v69 & 1) != 0)
    goto LABEL_63;
LABEL_56:
  v73 = (Espresso *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 72))(*v66);
  if ((_DWORD)v73)
  {
    v75 = *v66;
    v108 = 0;
    v109 = 0;
    (*(void (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(_QWORD *)v75 + 16))(v75, v65, &v108);
    v76 = v109;
    if (v109)
    {
      v77 = (unint64_t *)&v109->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    goto LABEL_63;
  }
  Espresso::espresso_os_log_subsystem(v73, v74);
  v95 = objc_claimAutoreleasedReturnValue();
  if (!os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    goto LABEL_86;
  v104 = Espresso::layer_shape::total_dim(v65);
  v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 24))(*v66);
  *(_DWORD *)buf = 134218240;
  *(_QWORD *)&buf[4] = v104;
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v105;
  v97 = "Fail fast reshape (top_blob) new=%lld, platform=%d";
  v98 = v95;
  v99 = 18;
LABEL_96:
  _os_log_debug_impl(&dword_190DAF000, v98, OS_LOG_TYPE_DEBUG, v97, buf, v99);
LABEL_86:

  *(_QWORD *)buf = &v112;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v93 = 0;
LABEL_87:
  *(_QWORD *)buf = &v118;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_88:
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v125);
  return v93;
}

void sub_190DC7E90()
{
  uint64_t v0;
  uint64_t v1;

  __cxa_end_catch();
  *(_QWORD *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x190DC7F80);
}

void sub_190DC7EA8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190DC7F98);
}

void sub_190DC7ED8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  *(_QWORD *)(v2 - 192) = &v3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 192));
  JUMPOUT(0x190DC7F80);
}

void sub_190DC7F04()
{
  JUMPOUT(0x190DC7F0CLL);
}

void sub_190DC7F34()
{
  JUMPOUT(0x190DC7F90);
}

void sub_190DC7F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 152);
  if (v27)
  {
    *(_QWORD *)(v25 - 144) = v27;
    operator delete(v27);
  }
  *(_QWORD *)(v25 - 192) = &v28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 192));
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v29);
  _Unwind_Resume(a1);
}

void sub_190DC7F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 - 192) = &v3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v1 - 192);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_cpu::resize_without_realloc(uint64_t a1, Espresso::layer_shape *this)
{
  unint64_t v2;
  _QWORD *v5;
  _DWORD *v7;

  v2 = *(_QWORD *)(a1 + 248);
  if (!v2 || Espresso::layer_shape::total_dim(this) - 1 >= v2)
    return 0;
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, this);
  switch(*(_DWORD *)(a1 + 240))
  {
    case 0:
      v5 = (_QWORD *)(a1 + 160);
      goto LABEL_9;
    case 1:
      v5 = (_QWORD *)(a1 + 176);
      goto LABEL_9;
    case 2:
    case 4:
      v5 = (_QWORD *)(a1 + 192);
      goto LABEL_9;
    case 3:
      v5 = (_QWORD *)(a1 + 208);
LABEL_9:
      v7 = (_DWORD *)*v5;
      v7[2] = *(_DWORD *)(a1 + 8);
      v7[3] = *(_DWORD *)(a1 + 12);
      v7[4] = *(_DWORD *)(a1 + 16);
      v7[5] = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20);
      break;
    default:
      return 1;
  }
  return 1;
}

void Espresso::generic_reshape_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  const void *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  std::runtime_error *exception;
  _OWORD v14[2];
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  __int128 v21[2];
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  __int128 v32;

  *((_QWORD *)&v32 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (*(_BYTE *)(a1 + 312) || v6 != 128)
  {
    if (v6 >= 0x81)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid argument");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10 = *(_OWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 32);
    v14[0] = *(_OWORD *)v5;
    v14[1] = v10;
    v15 = v11;
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v5 + 40), *(_QWORD *)(v5 + 48), (uint64_t)(*(_QWORD *)(v5 + 48) - *(_QWORD *)(v5 + 40)) >> 2);
    Espresso::generic_reshape_kernel::top_shape_using_auto_axis(a1, (int *)v14, (uint64_t)&v26);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    v21[0] = v26;
    v21[1] = v27;
    v22 = v28;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v19 = a3;
    v20 = 0;
    v12 = (char *)operator new(0x40uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v21, &v26, (uint64_t)v12);
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 80);
    v26 = *(_OWORD *)(v5 + 64);
    v27 = v7;
    v8 = *(const void **)(v5 + 104);
    v28 = *(_QWORD *)(v5 + 96);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, v8, *(_QWORD *)(v5 + 112), (uint64_t)(*(_QWORD *)(v5 + 112) - (_QWORD)v8) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v21[0] = a3;
    BYTE8(v21[0]) = 0;
    v9 = (char *)operator new(0x40uLL);
    *a3 = v9;
    a3[1] = v9;
    a3[2] = v9 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v26, &v32, (uint64_t)v9);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_190DC8260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;

  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void Espresso::reshape_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void **v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  int v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  int v47;
  int v48;
  __int128 v49;
  uint64_t **v50;
  int *v51;
  int *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t j;
  int v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  int *v69;
  int v70;
  unsigned int v71;
  int v72;
  int *v73;
  int v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  int *v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  int *v93;
  int v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int *v102;
  int v103;
  int v104;
  _QWORD *v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t **v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  __int128 v169;
  unint64_t *v170;
  unint64_t v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  _DWORD *v178;
  int v179;
  int v180;
  int v181;
  int v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unsigned int *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  int *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  __int128 v224;
  unint64_t *v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  _WORD *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  _WORD *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  uint64_t *v252;
  unint64_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  __int16 *v260;
  int v261;
  int v262;
  int v263;
  int v264;
  __int16 *v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  __int16 v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t *v275;
  unint64_t v276;
  __int128 v277;
  unint64_t *v278;
  unint64_t v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  _DWORD *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  _DWORD *v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int *v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int *v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  unint64_t *v323;
  unint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t *v331;
  unint64_t v332;
  int *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  __int128 v337;
  unint64_t *v338;
  unint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  _BYTE *v345;
  int v346;
  int v347;
  int v348;
  int v349;
  _BYTE *v350;
  int v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  int v365;
  int v366;
  int v367;
  int v368;
  uint64_t v369;
  char *v370;
  int v371;
  int v372;
  int v373;
  int v374;
  char *v375;
  int v376;
  uint64_t v377;
  char v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  uint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  uint64_t **v406;
  int *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t **v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  int *v413;
  std::__shared_weak_count *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417[2];
  uint64_t v418;
  std::__shared_weak_count *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  int v422;
  void **v423;
  std::__shared_weak_count *v424;
  char *v425;
  std::__shared_weak_count *v426;
  char *v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  uint64_t v430;
  char *v431;
  std::__shared_weak_count *v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  int v435[10];
  void *v436;
  void *v437;
  __int128 v438;
  _BYTE v439[24];
  __int128 __p;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  char v447[64];
  __int128 v448;

  v4 = a4;
  *((_QWORD *)&v448 + 1) = *MEMORY[0x1E0C80C00];
  v441 = 0;
  __p = 0u;
  *(_OWORD *)&v439[8] = 0u;
  v438 = xmmword_191A8AA80;
  *(_QWORD *)v439 = 0xFFFFFFFF00000001;
  Espresso::abstract_blob_container::shape((char *)v435, **a4);
  Espresso::generic_reshape_kernel::top_shape_using_auto_axis(a1, v435, (uint64_t)&v442);
  v438 = v442;
  *(_OWORD *)v439 = v443;
  *(_QWORD *)&v439[16] = v444;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v445;
  v441 = v446;
  v446 = 0;
  v445 = 0uLL;
  if (v436)
  {
    v437 = v436;
    operator delete(v436);
  }
  v9 = *v4;
  v8 = v4[1];
  if ((char *)v8 - (char *)*v4 == 32 && !*(_BYTE *)(a1 + 312))
  {
    Espresso::abstract_blob_container::shape((char *)&v442, *v9);
    Espresso::abstract_blob_container::shape(v447, (*v4)[2]);
    v425 = 0;
    v426 = 0;
    v427 = 0;
    v423 = (void **)&v425;
    LOBYTE(v424) = 0;
    v425 = (char *)operator new(0x80uLL);
    v426 = (std::__shared_weak_count *)v425;
    v427 = v425 + 128;
    v426 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v427, &v442, &v448, (uint64_t)v425);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(_QWORD *)a1 + 64))(&v428, a1, &v425);
    v10 = *(_QWORD *)(v428 + 32);
    v11 = *(_OWORD *)(v428 + 16);
    v438 = *(_OWORD *)v428;
    *(_OWORD *)v439 = v11;
    *(_QWORD *)&v439[16] = v10;
    if (&v438 != (__int128 *)v428)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(v428 + 40), *(_QWORD *)(v428 + 48), (uint64_t)(*(_QWORD *)(v428 + 48) - *(_QWORD *)(v428 + 40)) >> 2);
    v423 = (void **)&v428;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v423);
    v423 = (void **)&v425;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v423);
    for (i = 0; i != -128; i -= 64)
    {
      v13 = *(void **)&v447[i + 40];
      if (v13)
      {
        *(_QWORD *)&v447[i + 48] = v13;
        operator delete(v13);
      }
    }
    v9 = *v4;
    v8 = v4[1];
  }
  v410 = a3;
  if ((char *)v8 - (char *)v9 != 32 || !*(_BYTE *)(a1 + 312))
    goto LABEL_226;
  if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: dynamic reshape requires interpreter");
  v14 = v9[2];
  if (v14 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
  {
    v65 = v9[2];
    v15 = *(char **)(v65 + 160);
    v66 = *(unint64_t **)(v65 + 168);
    v425 = v15;
    v426 = (std::__shared_weak_count *)v66;
    if (v66)
    {
      v67 = v66 + 1;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
  }
  else
  {
    v15 = 0;
    v425 = 0;
    v426 = 0;
  }
  v16 = *v4;
  v17 = (*v4)[2];
  if (v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17) == 1)
  {
    v18 = v16[2];
    v20 = *(void ***)(v18 + 176);
    v19 = *(std::__shared_weak_count **)(v18 + 184);
    v423 = v20;
    v424 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  else
  {
    v20 = 0;
    v423 = 0;
    v424 = 0;
  }
  v23 = *v4;
  v24 = (*v4)[2];
  v408 = a1;
  if (v24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24) == 3)
  {
    v25 = v23[2];
    v27 = *(_QWORD *)(v25 + 208);
    v26 = *(std::__shared_weak_count **)(v25 + 216);
    v420 = v27;
    v421 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    v27 = 0;
    v420 = 0;
    v421 = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v433, *v4 + 2);
  if (v15)
  {
    v406 = v4;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v442 = 0uLL;
    *(_QWORD *)&v443 = 0;
    while (1)
    {
      v34 = 0;
      v35 = *((int *)v15 + 2);
      do
      {
        v35 *= *(int *)&v15[v34 + 12];
        v34 += 4;
      }
      while (v34 != 12);
      if (v35 <= v33)
      {
        *(_QWORD *)&v442 = v31;
        goto LABEL_75;
      }
      v36 = *(float *)(*((_QWORD *)v15 + 3) + 4 * v33);
      if (v36 <= 0.0)
      {
        if (fabsf(v36 + 1.0) >= 0.000001)
        {
          *(_QWORD *)&v443 = v32;
          *(_QWORD *)&v442 = v31;
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
        }
        if ((unint64_t)v30 < v32)
        {
          *v30 = -1;
          v38 = v30 + 1;
          goto LABEL_45;
        }
        v44 = v30 - v31;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
        {
          *(_QWORD *)&v443 = v32;
          *(_QWORD *)&v442 = v31;
          *((_QWORD *)&v442 + 1) = v30;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v32 - (_QWORD)v31) >> 1 > v45)
          v45 = (uint64_t)(v32 - (_QWORD)v31) >> 1;
        if (v32 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v45;
        if (v42)
          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
        else
          v43 = 0;
        v46 = (int *)(v42 + 4 * v44);
        *v46 = -1;
        v39 = v46 + 1;
        while (v30 != v31)
        {
          v48 = *--v30;
          *--v46 = v48;
        }
      }
      else
      {
        v37 = (int)(float)(v36 + 0.5);
        if ((unint64_t)v30 < v32)
        {
          *v30 = v37;
          v38 = v30 + 1;
LABEL_45:
          v39 = v38;
          goto LABEL_73;
        }
        v40 = v30 - v31;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
        {
          *(_QWORD *)&v443 = v32;
          *(_QWORD *)&v442 = v31;
          *((_QWORD *)&v442 + 1) = v30;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v32 - (_QWORD)v31) >> 1 > v41)
          v41 = (uint64_t)(v32 - (_QWORD)v31) >> 1;
        if (v32 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
        else
          v43 = 0;
        v46 = (int *)(v42 + 4 * v40);
        *v46 = v37;
        v39 = v46 + 1;
        while (v30 != v31)
        {
          v47 = *--v30;
          *--v46 = v47;
        }
      }
      v32 = v42 + 4 * v43;
      if (v31)
        operator delete(v31);
      v31 = v46;
LABEL_73:
      ++v33;
      v15 = v425;
      v30 = v39;
    }
  }
  if (v20)
  {
    v50 = v4;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v442 = 0uLL;
    *(_QWORD *)&v443 = 0;
    while (1)
    {
      v55 = *((int *)v20 + 2);
      for (j = 12; j != 24; j += 4)
        v55 *= *(int *)((char *)v20 + j);
      if (v55 <= v54)
        break;
      if (!*((_WORD *)v20[3] + v54))
      {
        *(_QWORD *)&v443 = v53;
        *(_QWORD *)&v442 = v52;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
      }
      v57 = (int)(float)((float)*((unsigned __int16 *)v20[3] + v54) + 0.5);
      if ((unint64_t)v51 >= v53)
      {
        v59 = v51 - v52;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62)
        {
          *(_QWORD *)&v443 = v53;
          *(_QWORD *)&v442 = v52;
          *((_QWORD *)&v442 + 1) = v51;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v53 - (_QWORD)v52) >> 1 > v60)
          v60 = (uint64_t)(v53 - (_QWORD)v52) >> 1;
        if (v53 - (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
          v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v61);
        else
          v62 = 0;
        v63 = (int *)(v61 + 4 * v59);
        *v63 = v57;
        v58 = v63 + 1;
        while (v51 != v52)
        {
          v64 = *--v51;
          *--v63 = v64;
        }
        v53 = v61 + 4 * v62;
        if (v52)
        {
          operator delete(v52);
          v20 = v423;
        }
        v52 = v63;
      }
      else
      {
        *v51 = v57;
        v58 = v51 + 1;
      }
      ++v54;
      v51 = v58;
    }
    *(_QWORD *)&v442 = v52;
    *((_QWORD *)&v442 + 1) = v51;
    v49 = v442;
    v4 = v50;
    goto LABEL_105;
  }
  if (!v27)
  {
    if (!v433)
    {
      v49 = 0uLL;
      goto LABEL_105;
    }
    Espresso::reshape_kernel_cpu::__compute_dynamic_shape<Espresso::blob<unsigned char,4>>((int **)&v442, (uint64_t)&v433);
    v49 = v442;
    goto LABEL_106;
  }
  v406 = v4;
  v30 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v442 = 0uLL;
  *(_QWORD *)&v443 = 0;
  while (1)
  {
    v89 = 0;
    v90 = *(int *)(v27 + 8);
    do
    {
      v90 *= *(int *)(v27 + 12 + v89);
      v89 += 4;
    }
    while (v89 != 12);
    if (v90 <= v88)
      break;
    v91 = *(_DWORD *)(*(_QWORD *)(v27 + 24) + 4 * v88);
    if (v91 < 1)
    {
      if (v91 >= -1)
        v94 = v91 + 1;
      else
        v94 = ~v91;
      if (v94 > 0)
      {
        *(_QWORD *)&v443 = v87;
        *(_QWORD *)&v442 = v86;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
      }
      if ((unint64_t)v30 < v87)
      {
        *v30 = -1;
        v93 = v30 + 1;
        goto LABEL_157;
      }
      v100 = v30 - v86;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 62)
      {
        *(_QWORD *)&v443 = v87;
        *(_QWORD *)&v442 = v86;
        *((_QWORD *)&v442 + 1) = v30;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v87 - (_QWORD)v86) >> 1 > v101)
        v101 = (uint64_t)(v87 - (_QWORD)v86) >> 1;
      if (v87 - (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v98 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v98 = v101;
      if (v98)
        v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v98);
      else
        v99 = 0;
      v102 = (int *)(v98 + 4 * v100);
      *v102 = -1;
      v95 = v102 + 1;
      while (v30 != v86)
      {
        v104 = *--v30;
        *--v102 = v104;
      }
    }
    else
    {
      v92 = (int)(float)((float)v91 + 0.5);
      if ((unint64_t)v30 < v87)
      {
        *v30 = v92;
        v93 = v30 + 1;
LABEL_157:
        v95 = v93;
        goto LABEL_185;
      }
      v96 = v30 - v86;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 62)
      {
        *(_QWORD *)&v443 = v87;
        *(_QWORD *)&v442 = v86;
        *((_QWORD *)&v442 + 1) = v30;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v87 - (_QWORD)v86) >> 1 > v97)
        v97 = (uint64_t)(v87 - (_QWORD)v86) >> 1;
      if (v87 - (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v98 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v98 = v97;
      if (v98)
        v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v98);
      else
        v99 = 0;
      v102 = (int *)(v98 + 4 * v96);
      *v102 = v92;
      v95 = v102 + 1;
      while (v30 != v86)
      {
        v103 = *--v30;
        *--v102 = v103;
      }
    }
    v87 = v98 + 4 * v99;
    if (v86)
      operator delete(v86);
    v86 = v102;
LABEL_185:
    ++v88;
    v27 = v420;
    v30 = v95;
  }
  *(_QWORD *)&v442 = v86;
LABEL_75:
  *((_QWORD *)&v442 + 1) = v30;
  v49 = v442;
  v4 = v406;
LABEL_105:
  a1 = v408;
LABEL_106:
  v407 = (int *)*((_QWORD *)&v49 + 1);
  v69 = (int *)v49;
  Espresso::abstract_blob_container::shape((char *)&v442, **v4);
  v70 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v442);
  if ((_QWORD)v445)
  {
    *((_QWORD *)&v445 + 1) = v445;
    operator delete((void *)v445);
  }
  if (v69 == v407)
  {
    v72 = 1;
  }
  else
  {
    v71 = 0;
    v72 = 1;
    v73 = v69;
    do
    {
      v75 = *v73++;
      v74 = v75;
      v76 = v75 <= 1;
      if (v75 < 1)
        ++v71;
      if (v76)
        v74 = 1;
      v72 *= v74;
    }
    while (v73 != v407);
    if (v71 > 1)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("reshape_kernel_cpu: Invalid dst shape");
  }
  v77 = v407 - v69;
  if ((unint64_t)((char *)v407 - (char *)v69) >= 4)
  {
    if (v77 <= 1)
      v78 = 1;
    else
      v78 = v407 - v69;
    v79 = v69;
    v80 = v70 / v72;
    do
    {
      if (*v79 == -1)
        *v79 = v80;
      ++v79;
      --v78;
    }
    while (v78);
  }
  if (!*(_DWORD *)(a1 + 308))
  {
    if ((int)v77 <= 0)
    {
      LODWORD(v438) = 1;
    }
    else
    {
      LODWORD(v438) = *v69;
      if ((_DWORD)v77 != 1)
      {
        DWORD1(v438) = v69[1];
        if (v77 > 2)
        {
          DWORD2(v438) = v69[2];
          if ((_DWORD)v77 != 3)
          {
            HIDWORD(v438) = v69[3];
            if (v77 < 5)
              v85 = 1;
            else
              v85 = v69[4];
            goto LABEL_190;
          }
LABEL_189:
          v85 = 1;
          HIDWORD(v438) = 1;
LABEL_190:
          *(_DWORD *)v439 = v85;
          goto LABEL_191;
        }
LABEL_188:
        DWORD2(v438) = 1;
        goto LABEL_189;
      }
    }
    DWORD1(v438) = 1;
    goto LABEL_188;
  }
  v428 = 0;
  v429 = 0;
  v430 = 0;
  if (v69 != v407)
  {
    if (v77 <= 1)
      v81 = 1;
    else
      v81 = v407 - v69;
    v82 = &v428;
    v83 = v69;
    do
    {
      v84 = *v83++;
      *(_DWORD *)v82 = v84;
      v82 = (uint64_t *)((char *)v82 + 4);
      --v81;
    }
    while (v81);
  }
  HIDWORD(v430) = v407 - v69;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v428, 0, (uint64_t)&v442);
  v438 = v442;
  *(_OWORD *)v439 = v443;
  *(_QWORD *)&v439[16] = v444;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v445;
  v441 = v446;
LABEL_191:
  v105 = operator new(0x98uLL);
  v105[1] = 0;
  v106 = v105 + 1;
  v105[2] = 0;
  *v105 = &off_1E2DBE998;
  *((_OWORD *)v105 + 4) = 0u;
  *((_OWORD *)v105 + 5) = 0u;
  *((_OWORD *)v105 + 2) = 0u;
  *((_OWORD *)v105 + 3) = 0u;
  *((_OWORD *)v105 + 6) = 0u;
  *((_OWORD *)v105 + 7) = 0u;
  *((_OWORD *)v105 + 8) = 0u;
  v105[17] = 0;
  v105[18] = 0;
  *((_DWORD *)v105 + 12) = 1065353216;
  v105[7] = 0x1FFFFFFFFLL;
  v105[12] = 0;
  v105[13] = 0;
  v105[8] = 0;
  v105[9] = 0;
  *((_BYTE *)v105 + 88) = 0;
  v105[10] = 0;
  v105[3] = &off_1E2DA0BF0;
  v105[15] = 0;
  v105[16] = 0;
  *((_BYTE *)v105 + 144) = 0;
  *(_QWORD *)&v442 = v105 + 3;
  *((_QWORD *)&v442 + 1) = v105;
  *((_BYTE *)v105 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
  v107 = **a3;
  v431 = (char *)(v105 + 3);
  v432 = (std::__shared_weak_count *)v105;
  do
    v108 = __ldxr(v106);
  while (__stxr(v108 + 1, v106));
  (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v107 + 16))(v107, &v438, &v431);
  v109 = v432;
  if (v432)
  {
    v110 = (unint64_t *)&v432->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v69)
    operator delete(v69);
  v115 = v434;
  if (v434)
  {
    v116 = (unint64_t *)&v434->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (v421)
  {
    v118 = &v421->__shared_owners_;
    do
      v119 = __ldaxr((unint64_t *)v118);
    while (__stlxr(v119 - 1, (unint64_t *)v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
      std::__shared_weak_count::__release_weak(v421);
    }
  }
  v120 = v424;
  if (v424)
  {
    v121 = (unint64_t *)&v424->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v426;
  if (v426)
  {
    v124 = (unint64_t *)&v426->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v9 = *v4;
LABEL_226:
  v126 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v438);
  Espresso::abstract_blob_container::shape((char *)&v442, *v9);
  v127 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v442);
  if ((_QWORD)v445)
  {
    *((_QWORD *)&v445 + 1) = v445;
    operator delete((void *)v445);
  }
  if (v126 != v127)
  {
    Espresso::abstract_blob_container::shape((char *)&v442, **v4);
    Espresso::abstract_blob_container::shape((char *)&v428, **v4);
    Espresso::abstract_blob_container::shape((char *)&v425, **v4);
    Espresso::abstract_blob_container::shape((char *)&v423, **v4);
    Espresso::abstract_blob_container::shape((char *)&v420, **v4);
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int,int,int,int &,int &,int &,int &,int &>(v442, SHIDWORD(v428), (int)v426, SHIDWORD(v424), v422, v438, SDWORD1(v438), SDWORD2(v438), SHIDWORD(v438), *(int *)v439);
  }
  v128 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v128 != 1)
  {
    if ((_DWORD)v128)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("reshape_kernel_cpu: invalid mode %d", v128);
    v129 = (std::__shared_weak_count *)(*a3)[1];
    v418 = **a3;
    v419 = v129;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
    }
    v132 = (std::__shared_weak_count *)(*v4)[1];
    v417[0] = **v4;
    v417[1] = (uint64_t)v132;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    Espresso::copy_kernel_cpu::__compute_blob(&v418, v417);
    if (v132)
    {
      v135 = (unint64_t *)&v132->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v137 = v419;
    if (v419)
    {
      v138 = (unint64_t *)&v419->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
LABEL_588:
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    goto LABEL_590;
  }
  v140 = *v4;
  if (v4[1] == *v4 || !*v140 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v140 + 32))(*v140))
  {
    v141 = 0;
    v142 = 0;
    v428 = 0;
    v429 = 0;
  }
  else
  {
    v142 = *(_QWORD *)(*v140 + 160);
    v141 = *(std::__shared_weak_count **)(*v140 + 168);
    v428 = v142;
    v429 = v141;
    if (v141)
    {
      v328 = (unint64_t *)&v141->__shared_owners_;
      do
        v329 = __ldxr(v328);
      while (__stxr(v329 + 1, v328));
    }
  }
  v143 = *a3;
  if (a3[1] == *a3 || !*v143 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v143 + 32))(*v143))
  {
    v144 = 0;
    v425 = 0;
    v426 = 0;
  }
  else
  {
    v144 = *(char **)(*v143 + 160);
    v330 = *(unint64_t **)(*v143 + 168);
    v425 = v144;
    v426 = (std::__shared_weak_count *)v330;
    if (v330)
    {
      v331 = v330 + 1;
      do
        v332 = __ldxr(v331);
      while (__stxr(v332 + 1, v331));
    }
  }
  v145 = *v4;
  if (v4[1] != *v4 && *v145 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v145 + 32))(*v145) == 1)
  {
    v146 = *(_QWORD *)(*v145 + 176);
    v147 = *(std::__shared_weak_count **)(*v145 + 184);
    v423 = (void **)v146;
    v424 = v147;
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
  }
  else
  {
    v147 = 0;
    v146 = 0;
    v423 = 0;
    v424 = 0;
  }
  v150 = *v410;
  if (v410[1] != *v410 && *v150 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v150 + 32))(*v150) == 1)
  {
    v152 = *(_QWORD *)(*v150 + 176);
    v151 = *(std::__shared_weak_count **)(*v150 + 184);
    v420 = v152;
    v421 = v151;
    if (v151)
    {
      v153 = (unint64_t *)&v151->__shared_owners_;
      do
        v154 = __ldxr(v153);
      while (__stxr(v154 + 1, v153));
    }
  }
  else
  {
    v152 = 0;
    v420 = 0;
    v421 = 0;
  }
  v155 = *v4;
  if (v4[1] != *v4 && *v155 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v155 + 32))(*v155) == 3)
  {
    v156 = v4;
    v158 = *(_QWORD *)(*v155 + 208);
    v157 = *(std::__shared_weak_count **)(*v155 + 216);
    v433 = v158;
    v434 = v157;
    if (v157)
    {
      v159 = (unint64_t *)&v157->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
  }
  else
  {
    v156 = v4;
    v157 = 0;
    v158 = 0;
    v433 = 0;
    v434 = 0;
  }
  v161 = *v410;
  v409 = v157;
  if (v410[1] != *v410 && *v161 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v161 + 32))(*v161) == 3)
  {
    v162 = v147;
    v164 = *(_QWORD *)(*v161 + 208);
    v163 = *(std::__shared_weak_count **)(*v161 + 216);
    v415 = v164;
    v416 = v163;
    if (v163)
    {
      v165 = (unint64_t *)&v163->__shared_owners_;
      do
        v166 = __ldxr(v165);
      while (__stxr(v166 + 1, v165));
    }
  }
  else
  {
    v162 = v147;
    v164 = 0;
    v415 = 0;
    v416 = 0;
  }
  if (v156[1] == *v156)
  {
    v413 = 0;
    v414 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v413, *v156);
  }
  if (v410[1] == *v410)
  {
    v411 = 0;
    v412 = 0;
    if (v142)
      goto LABEL_293;
    goto LABEL_354;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v411, *v410);
  if (!v142)
    goto LABEL_354;
LABEL_293:
  if (!v144)
  {
LABEL_354:
    if (v146 && v152)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v442, *(_DWORD *)(v146 + 16), *(_DWORD *)(v146 + 8), *(_DWORD *)(v146 + 12), *(_DWORD *)(v146 + 20));
      if (v162)
      {
        v222 = (unint64_t *)&v162->__shared_owners_;
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      v224 = v442;
      if (*((_QWORD *)&v442 + 1))
      {
        v225 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v226 = __ldxr(v225);
        while (__stxr(v226 + 1, v225));
      }
      v227 = *(_DWORD *)(v146 + 20);
      if (v227 >= 1)
      {
        v228 = 0;
        v229 = 0;
        v230 = *(_DWORD *)(v146 + 8);
        v231 = *(_DWORD *)(v146 + 12);
        v232 = *(unsigned int *)(v146 + 16);
        v233 = *(_WORD **)(v224 + 24);
        do
        {
          if (v231 >= 1)
          {
            v234 = 0;
            v235 = v228;
            do
            {
              if (v230 >= 1)
              {
                v236 = 0;
                v237 = v235;
                v238 = v233;
                do
                {
                  if ((int)v232 >= 1)
                  {
                    v239 = *(_QWORD *)(v146 + 24);
                    v240 = v237;
                    v241 = v232;
                    do
                    {
                      *v238++ = *(_WORD *)(v239 + 2 * v240);
                      v240 += v231 * v230;
                      --v241;
                    }
                    while (v241);
                  }
                  ++v236;
                  ++v237;
                }
                while (v236 != v230);
              }
              v233 += (int)v232 * v230;
              ++v234;
              v235 += v230;
            }
            while (v234 != v231);
          }
          ++v229;
          v228 += v232 * v230 * v231;
        }
        while (v229 != v227);
      }
      if (*((_QWORD *)&v224 + 1))
      {
        v242 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v224 + 1) + 16))(*((_QWORD *)&v224 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v224 + 1));
        }
      }
      if (v162)
      {
        v244 = (unint64_t *)&v162->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      v246 = v442;
      *(_DWORD *)(v442 + 8) = DWORD2(v438);
      *(_QWORD *)(v246 + 12) = v438;
      *(_DWORD *)(v246 + 20) = *(_DWORD *)v439 * HIDWORD(v438);
      v247 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (*((_QWORD *)&v442 + 1))
      {
        v248 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v249 = __ldxr(v248);
        while (__stxr(v249 + 1, v248));
      }
      v250 = v420;
      v251 = v421;
      if (v421)
      {
        v252 = &v421->__shared_owners_;
        do
          v253 = __ldxr((unint64_t *)v252);
        while (__stxr(v253 + 1, (unint64_t *)v252));
      }
      v254 = *(_DWORD *)(v250 + 20);
      if (v254 >= 1)
      {
        v255 = 0;
        v256 = 0;
        v257 = *(_DWORD *)(v250 + 8);
        v258 = *(_DWORD *)(v250 + 12);
        v259 = *(unsigned int *)(v250 + 16);
        v260 = *(__int16 **)(v246 + 24);
        do
        {
          if (v258 >= 1)
          {
            v261 = 0;
            v262 = v255;
            do
            {
              if (v257 >= 1)
              {
                v263 = 0;
                v264 = v262;
                v265 = v260;
                do
                {
                  if ((int)v259 >= 1)
                  {
                    v266 = *(_QWORD *)(v250 + 24);
                    v267 = v264;
                    v268 = v259;
                    do
                    {
                      v269 = *v265++;
                      *(_WORD *)(v266 + 2 * v267) = v269;
                      v267 += v258 * v257;
                      --v268;
                    }
                    while (v268);
                  }
                  ++v263;
                  ++v264;
                }
                while (v263 != v257);
              }
              v260 += (int)v259 * v257;
              ++v261;
              v262 += v257;
            }
            while (v261 != v258);
          }
          ++v256;
          v255 += v259 * v257 * v258;
        }
        while (v256 != v254);
      }
      if (v251)
      {
        v270 = (unint64_t *)&v251->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      if (v247)
      {
        v272 = (unint64_t *)&v247->__shared_owners_;
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 - 1, v272));
        if (!v273)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      v219 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (!*((_QWORD *)&v442 + 1))
        goto LABEL_550;
      v274 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v221 = __ldaxr(v274);
      while (__stlxr(v221 - 1, v274));
    }
    else if (v158 && v164)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v442, *(_DWORD *)(v158 + 16), *(_DWORD *)(v158 + 8), *(_DWORD *)(v158 + 12), *(_DWORD *)(v158 + 20));
      if (v409)
      {
        v275 = (unint64_t *)&v409->__shared_owners_;
        do
          v276 = __ldxr(v275);
        while (__stxr(v276 + 1, v275));
      }
      v277 = v442;
      if (*((_QWORD *)&v442 + 1))
      {
        v278 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v279 = __ldxr(v278);
        while (__stxr(v279 + 1, v278));
      }
      v280 = *(_DWORD *)(v158 + 20);
      if (v280 >= 1)
      {
        v281 = 0;
        v282 = 0;
        v283 = *(_DWORD *)(v158 + 8);
        v284 = *(_DWORD *)(v158 + 12);
        v285 = *(unsigned int *)(v158 + 16);
        v286 = *(_DWORD **)(v277 + 24);
        do
        {
          if (v284 >= 1)
          {
            v287 = 0;
            v288 = v281;
            do
            {
              if (v283 >= 1)
              {
                v289 = 0;
                v290 = v288;
                v291 = v286;
                do
                {
                  if ((int)v285 >= 1)
                  {
                    v292 = *(_QWORD *)(v158 + 24);
                    v293 = v290;
                    v294 = v285;
                    do
                    {
                      *v291++ = *(_DWORD *)(v292 + 4 * v293);
                      v293 += v284 * v283;
                      --v294;
                    }
                    while (v294);
                  }
                  ++v289;
                  ++v290;
                }
                while (v289 != v283);
              }
              v286 += (int)v285 * v283;
              ++v287;
              v288 += v283;
            }
            while (v287 != v284);
            v280 = *(_DWORD *)(v158 + 20);
          }
          ++v282;
          v281 += v285 * v283 * v284;
        }
        while (v282 < v280);
      }
      if (*((_QWORD *)&v277 + 1))
      {
        v295 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
        do
          v296 = __ldaxr(v295);
        while (__stlxr(v296 - 1, v295));
        if (!v296)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v277 + 1) + 16))(*((_QWORD *)&v277 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v277 + 1));
        }
      }
      if (v409)
      {
        v297 = (unint64_t *)&v409->__shared_owners_;
        do
          v298 = __ldaxr(v297);
        while (__stlxr(v298 - 1, v297));
        if (!v298)
        {
          ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
          std::__shared_weak_count::__release_weak(v409);
        }
      }
      v299 = v442;
      *(_DWORD *)(v442 + 8) = DWORD2(v438);
      *(_QWORD *)(v299 + 12) = v438;
      *(_DWORD *)(v299 + 20) = *(_DWORD *)v439 * HIDWORD(v438);
      v300 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (*((_QWORD *)&v442 + 1))
      {
        v301 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v302 = __ldxr(v301);
        while (__stxr(v302 + 1, v301));
      }
      v303 = v415;
      v304 = v416;
      if (v416)
      {
        v305 = (unint64_t *)&v416->__shared_owners_;
        do
          v306 = __ldxr(v305);
        while (__stxr(v306 + 1, v305));
      }
      v307 = *(_DWORD *)(v303 + 20);
      if (v307 >= 1)
      {
        v308 = 0;
        v309 = 0;
        v310 = *(_DWORD *)(v303 + 8);
        v311 = *(_DWORD *)(v303 + 12);
        v312 = *(unsigned int *)(v303 + 16);
        v313 = *(int **)(v299 + 24);
        do
        {
          if (v311 >= 1)
          {
            v314 = 0;
            v315 = v308;
            do
            {
              if (v310 >= 1)
              {
                v316 = 0;
                v317 = v315;
                v318 = v313;
                do
                {
                  if ((int)v312 >= 1)
                  {
                    v319 = *(_QWORD *)(v303 + 24);
                    v320 = v317;
                    v321 = v312;
                    do
                    {
                      v322 = *v318++;
                      *(_DWORD *)(v319 + 4 * v320) = v322;
                      v320 += v311 * v310;
                      --v321;
                    }
                    while (v321);
                  }
                  ++v316;
                  ++v317;
                }
                while (v316 != v310);
              }
              v313 += (int)v312 * v310;
              ++v314;
              v315 += v310;
            }
            while (v314 != v311);
            v307 = *(_DWORD *)(v303 + 20);
          }
          ++v309;
          v308 += v312 * v310 * v311;
        }
        while (v309 < v307);
      }
      if (v304)
      {
        v323 = (unint64_t *)&v304->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
          std::__shared_weak_count::__release_weak(v304);
        }
      }
      if (v300)
      {
        v325 = (unint64_t *)&v300->__shared_owners_;
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
          std::__shared_weak_count::__release_weak(v300);
        }
      }
      v219 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (!*((_QWORD *)&v442 + 1))
        goto LABEL_550;
      v327 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v221 = __ldaxr(v327);
      while (__stlxr(v221 - 1, v327));
    }
    else
    {
      v333 = v413;
      if (!v413 || !v411)
      {
        if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v438) >= 1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid blob configuration");
        goto LABEL_550;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v442, v413[4], v413[2], v413[3], v413[5]);
      v334 = v414;
      if (v414)
      {
        v335 = (unint64_t *)&v414->__shared_owners_;
        do
          v336 = __ldxr(v335);
        while (__stxr(v336 + 1, v335));
      }
      v337 = v442;
      if (*((_QWORD *)&v442 + 1))
      {
        v338 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v339 = __ldxr(v338);
        while (__stxr(v339 + 1, v338));
      }
      if (v333[5] >= 1)
      {
        v340 = 0;
        v341 = 0;
        v342 = v333[2];
        v343 = v333[3];
        v344 = v333[4];
        v345 = *(_BYTE **)(v337 + 24);
        do
        {
          if (v343 >= 1)
          {
            v346 = 0;
            v347 = v340;
            do
            {
              if (v342 >= 1)
              {
                v348 = 0;
                v349 = v347;
                v350 = v345;
                do
                {
                  v351 = v349;
                  v352 = v344;
                  if ((int)v344 >= 1)
                  {
                    do
                    {
                      *v350++ = *(_BYTE *)(*((_QWORD *)v333 + 3) + v351);
                      v351 += v343 * v342;
                      --v352;
                    }
                    while (v352);
                  }
                  ++v348;
                  ++v349;
                }
                while (v348 != v342);
              }
              v345 += (int)v344 * v342;
              ++v346;
              v347 += v342;
            }
            while (v346 != v343);
          }
          ++v341;
          v340 += v344 * v342 * v343;
        }
        while (v341 < v333[5]);
      }
      if (*((_QWORD *)&v337 + 1))
      {
        v353 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
        do
          v354 = __ldaxr(v353);
        while (__stlxr(v354 - 1, v353));
        if (!v354)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v337 + 1) + 16))(*((_QWORD *)&v337 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v337 + 1));
        }
      }
      if (v334)
      {
        v355 = (unint64_t *)&v334->__shared_owners_;
        do
          v356 = __ldaxr(v355);
        while (__stlxr(v356 - 1, v355));
        if (!v356)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
      v357 = v442;
      *(_DWORD *)(v442 + 8) = DWORD2(v438);
      *(_QWORD *)(v357 + 12) = v438;
      *(_DWORD *)(v357 + 20) = *(_DWORD *)v439 * HIDWORD(v438);
      v358 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (*((_QWORD *)&v442 + 1))
      {
        v359 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v360 = __ldxr(v359);
        while (__stxr(v360 + 1, v359));
      }
      v361 = v411;
      v362 = v412;
      if (v412)
      {
        v363 = (unint64_t *)&v412->__shared_owners_;
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
      }
      if (*(int *)(v361 + 20) >= 1)
      {
        v365 = 0;
        v366 = 0;
        v367 = *(_DWORD *)(v361 + 8);
        v368 = *(_DWORD *)(v361 + 12);
        v369 = *(unsigned int *)(v361 + 16);
        v370 = *(char **)(v357 + 24);
        do
        {
          if (v368 >= 1)
          {
            v371 = 0;
            v372 = v365;
            do
            {
              if (v367 >= 1)
              {
                v373 = 0;
                v374 = v372;
                v375 = v370;
                do
                {
                  v376 = v374;
                  v377 = v369;
                  if ((int)v369 >= 1)
                  {
                    do
                    {
                      v378 = *v375++;
                      *(_BYTE *)(*(_QWORD *)(v361 + 24) + v376) = v378;
                      v376 += v368 * v367;
                      --v377;
                    }
                    while (v377);
                  }
                  ++v373;
                  ++v374;
                }
                while (v373 != v367);
              }
              v370 += (int)v369 * v367;
              ++v371;
              v372 += v367;
            }
            while (v371 != v368);
          }
          ++v366;
          v365 += v369 * v367 * v368;
        }
        while (v366 < *(_DWORD *)(v361 + 20));
      }
      if (v362)
      {
        v379 = (unint64_t *)&v362->__shared_owners_;
        do
          v380 = __ldaxr(v379);
        while (__stlxr(v380 - 1, v379));
        if (!v380)
        {
          ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
          std::__shared_weak_count::__release_weak(v362);
        }
      }
      if (v358)
      {
        v381 = (unint64_t *)&v358->__shared_owners_;
        do
          v382 = __ldaxr(v381);
        while (__stlxr(v382 - 1, v381));
        if (!v382)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v219 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      if (!*((_QWORD *)&v442 + 1))
        goto LABEL_550;
      v383 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v221 = __ldaxr(v383);
      while (__stlxr(v221 - 1, v383));
    }
LABEL_547:
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
    goto LABEL_550;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v442, *(_DWORD *)(v142 + 16), *(_DWORD *)(v142 + 8), *(_DWORD *)(v142 + 12), *(_DWORD *)(v142 + 20));
  if (v141)
  {
    v167 = (unint64_t *)&v141->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  v169 = v442;
  if (*((_QWORD *)&v442 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
  }
  v172 = *(_DWORD *)(v142 + 20);
  if (v172 >= 1)
  {
    v173 = 0;
    v174 = 0;
    v175 = *(_DWORD *)(v142 + 8);
    v176 = *(_DWORD *)(v142 + 12);
    v177 = *(unsigned int *)(v142 + 16);
    v178 = *(_DWORD **)(v169 + 24);
    do
    {
      if (v176 >= 1)
      {
        v179 = 0;
        v180 = v173;
        do
        {
          if (v175 >= 1)
          {
            v181 = 0;
            v182 = v180;
            v183 = v178;
            do
            {
              if ((int)v177 >= 1)
              {
                v184 = *(_QWORD *)(v142 + 24);
                v185 = v182;
                v186 = v177;
                do
                {
                  *v183++ = *(_DWORD *)(v184 + 4 * v185);
                  v185 += v176 * v175;
                  --v186;
                }
                while (v186);
              }
              ++v181;
              ++v182;
            }
            while (v181 != v175);
          }
          v178 += (int)v177 * v175;
          ++v179;
          v180 += v175;
        }
        while (v179 != v176);
      }
      ++v174;
      v173 += v177 * v175 * v176;
    }
    while (v174 != v172);
  }
  if (*((_QWORD *)&v169 + 1))
  {
    v187 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v169 + 1) + 16))(*((_QWORD *)&v169 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v169 + 1));
    }
  }
  if (v141)
  {
    v189 = (unint64_t *)&v141->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v191 = v442;
  *(_DWORD *)(v442 + 8) = DWORD2(v438);
  *(_QWORD *)(v191 + 12) = v438;
  *(_DWORD *)(v191 + 20) = *(_DWORD *)v439 * HIDWORD(v438);
  v192 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v193 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
  }
  v195 = (unsigned int *)v425;
  v196 = v426;
  if (v426)
  {
    v197 = (unint64_t *)&v426->__shared_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
  }
  v199 = v195[5];
  if (v199 >= 1)
  {
    v200 = 0;
    v201 = 0;
    v202 = v195[2];
    v203 = v195[3];
    v204 = v195[4];
    v205 = *(int **)(v191 + 24);
    do
    {
      if (v203 >= 1)
      {
        v206 = 0;
        v207 = v200;
        do
        {
          if (v202 >= 1)
          {
            v208 = 0;
            v209 = v207;
            v210 = v205;
            do
            {
              if ((int)v204 >= 1)
              {
                v211 = *((_QWORD *)v195 + 3);
                v212 = v209;
                v213 = v204;
                do
                {
                  v214 = *v210++;
                  *(_DWORD *)(v211 + 4 * v212) = v214;
                  v212 += v203 * v202;
                  --v213;
                }
                while (v213);
              }
              ++v208;
              ++v209;
            }
            while (v208 != v202);
          }
          v205 += (int)v204 * v202;
          ++v206;
          v207 += v202;
        }
        while (v206 != v203);
      }
      ++v201;
      v200 += v204 * v202 * v203;
    }
    while (v201 != v199);
  }
  if (v196)
  {
    v215 = (unint64_t *)&v196->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v192)
  {
    v217 = (unint64_t *)&v192->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v219 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v220 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    goto LABEL_547;
  }
LABEL_550:
  v384 = v412;
  if (v412)
  {
    v385 = (unint64_t *)&v412->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v387 = v414;
  if (v414)
  {
    v388 = (unint64_t *)&v414->__shared_owners_;
    do
      v389 = __ldaxr(v388);
    while (__stlxr(v389 - 1, v388));
    if (!v389)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
  }
  v390 = v416;
  if (v416)
  {
    v391 = (unint64_t *)&v416->__shared_owners_;
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
    }
  }
  v393 = v434;
  if (v434)
  {
    v394 = (unint64_t *)&v434->__shared_owners_;
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
  v396 = v421;
  if (v421)
  {
    v397 = &v421->__shared_owners_;
    do
      v398 = __ldaxr((unint64_t *)v397);
    while (__stlxr(v398 - 1, (unint64_t *)v397));
    if (!v398)
    {
      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
      std::__shared_weak_count::__release_weak(v396);
    }
  }
  v399 = v424;
  if (v424)
  {
    v400 = (unint64_t *)&v424->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v402 = v426;
  if (v426)
  {
    v403 = (unint64_t *)&v426->__shared_owners_;
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  v137 = v429;
  if (v429)
  {
    v405 = (unint64_t *)&v429->__shared_owners_;
    do
      v139 = __ldaxr(v405);
    while (__stlxr(v139 - 1, v405));
    goto LABEL_588;
  }
LABEL_590:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
}

void sub_190DCA1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v60;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  _Unwind_Resume(a1);
}

int32x2_t Espresso::generic_reshape_kernel::top_shape_using_auto_axis@<D0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int8x16_t v10;
  unint64_t v11;
  const Espresso::layer_nd_shape *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  Espresso *v27;
  const Espresso::layer_nd_shape *v28;
  unint64_t known_element_count;
  int32x2_t result;
  int v31;
  int v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string v36;
  std::string v37;
  int8x16_t v38;
  int v39;
  int v40;
  _DWORD v41[6];

  v6 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)a2);
  if (*(_BYTE *)(a1 + 313))
  {
    v7 = a2[5];
    if (v7 == -1)
    {
      if (a2[4] == 1)
        v7 = 4;
      else
        v7 = 5;
    }
    v8 = *(_DWORD *)(a1 + 300);
    if (v7 != v8)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &>(v7, v8);
  }
  if (!*(_DWORD *)(a1 + 308) || *(int *)(a1 + 316) < 2)
  {
    v17 = *(_DWORD *)(a1 + 280);
    v18 = *(_DWORD *)(a1 + 284);
    v19 = *(_DWORD *)(a1 + 288);
    v20 = *(_DWORD *)(a1 + 292);
    v21 = *(_DWORD *)(a1 + 296);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_DWORD *)a3 = v17;
    *(_DWORD *)(a3 + 4) = v18;
    *(_DWORD *)(a3 + 8) = v19;
    *(_DWORD *)(a3 + 12) = v20;
    v22 = *(_DWORD *)(a1 + 300);
    if (v22 == -1)
      v22 = 5;
    *(_DWORD *)(a3 + 16) = v21;
    *(_DWORD *)(a3 + 20) = -1;
    if (v17)
    {
      if (v18)
        goto LABEL_29;
    }
    else
    {
      *(_DWORD *)a3 = *a2;
      if (v18)
      {
LABEL_29:
        if (v19)
          goto LABEL_30;
        goto LABEL_38;
      }
    }
    if (v22 < 2)
      v23 = 1;
    else
      v23 = a2[1];
    *(_DWORD *)(a3 + 4) = v23;
    if (v19)
    {
LABEL_30:
      if (v20)
        goto LABEL_31;
      goto LABEL_42;
    }
LABEL_38:
    if (v22 < 3)
      v24 = 1;
    else
      v24 = a2[2];
    *(_DWORD *)(a3 + 8) = v24;
    if (v20)
    {
LABEL_31:
      if (v21)
      {
LABEL_50:
        v27 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v41, (const Espresso::layer_shape *)a3, 0);
        known_element_count = Espresso::get_known_element_count(v27, v28);
        if (HIDWORD(known_element_count))
        {
          if (v6 && (int)known_element_count > v6)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(*a2, a2[1], a2[2], a2[3], a2[4], *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12), *(_DWORD *)(a3 + 16));
          if (*(_DWORD *)a3 == -1)
            *(_DWORD *)a3 = v6 / (int)known_element_count;
          if (*(_DWORD *)(a3 + 4) == -1)
            *(_DWORD *)(a3 + 4) = v6 / (int)known_element_count;
          if (*(_DWORD *)(a3 + 8) == -1)
            *(_DWORD *)(a3 + 8) = v6 / (int)known_element_count;
          if (*(_DWORD *)(a3 + 12) == -1)
            *(_DWORD *)(a3 + 12) = v6 / (int)known_element_count;
          if (*(_DWORD *)(a3 + 16) == -1)
            *(_DWORD *)(a3 + 16) = v6 / (int)known_element_count;
        }
        v31 = *(_DWORD *)(a1 + 300);
        if ((v31 & 0x80000000) == 0)
          *(_DWORD *)(a3 + 20) = v31;
        return result;
      }
LABEL_46:
      if (v22 < 5)
        v26 = 1;
      else
        v26 = a2[4];
      *(_DWORD *)(a3 + 16) = v26;
      goto LABEL_50;
    }
LABEL_42:
    if (v22 < 4)
      v25 = 1;
    else
      v25 = a2[3];
    *(_DWORD *)(a3 + 12) = v25;
    if (v21)
      goto LABEL_50;
    goto LABEL_46;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v41, (const Espresso::layer_shape *)a2, 0);
  v9 = *(_DWORD *)(a1 + 280);
  v10 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(a1 + 284));
  v38 = vextq_s8(v10, v10, 8uLL);
  v39 = v9;
  v40 = 5;
  if (*(int *)(a1 + 300) >= 0)
    v11 = *(unsigned int *)(a1 + 300);
  else
    v11 = v41[5];
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)&v38, v11);
  v13 = v40;
  if (v40)
  {
    v14 = 0;
    do
    {
      if (!v38.i32[v14])
      {
        v38.i32[v14] = v41[v14];
        v13 = v40;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  v15 = Espresso::get_known_element_count((Espresso *)&v38, v12);
  if (HIDWORD(v15))
  {
    if (v6 && (int)v15 > v6)
    {
      Espresso::layer_nd_shape::repr(&v37, (uint64_t)v41);
      v32 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
      v33 = v37.__r_.__value_.__r.__words[0];
      Espresso::layer_nd_shape::repr(&v36, (uint64_t)&v38);
      if (v32 >= 0)
        v34 = &v37;
      else
        v34 = (std::string *)v33;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v36;
      else
        v35 = (std::string *)v36.__r_.__value_.__r.__words[0];
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("generic_reshape_kernel: Invalid bottom shape (%s) for reshape to (%s)", (uint64_t)v34, (uint64_t)v35);
    }
    if (v13)
    {
      v16 = 0;
      while (v38.i32[v16] != -1)
      {
        if (v13 == ++v16)
          return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, a3);
      }
      v38.i32[v16] = v6 / (int)v15;
    }
  }
  return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, a3);
}

void sub_190DCA7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

unint64_t Espresso::get_known_element_count(Espresso *this, const Espresso::layer_nd_shape *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;

  v2 = *((int *)this + 5);
  if (!(_DWORD)v2)
    return 1;
  LODWORD(v3) = 0;
  LODWORD(v4) = 1;
  do
  {
    v6 = *(_DWORD *)this;
    this = (Espresso *)((char *)this + 4);
    v5 = v6;
    v7 = v6 <= 1;
    if (v6 >= 1)
      v3 = v3;
    else
      v3 = (v3 + 1);
    if (v7)
      v5 = 1;
    v4 = (v4 * v5);
    --v2;
  }
  while (v2);
  if (v3 > 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Invalid dst shape %d negatives", v3);
  return v4 | ((unint64_t)((_DWORD)v3 == 1) << 32);
}

void Espresso::allocate_blobs(Espresso *a1, const char *a2, _QWORD *a3)
{
  uint64_t *v3;
  double v4;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *i;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v56;
  NSObject *v57;
  std::runtime_error *v58;
  std::runtime_error *exception;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type size;
  std::string *v66;
  __int128 v67;
  uint64_t v68;
  int __val;
  unint64_t v70;
  Espresso *v71;
  char *v72;
  std::__shared_weak_count *v73;
  char *v74;
  std::__shared_weak_count *v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::string buf;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v71 = a1;
  v3 = (uint64_t *)*((_QWORD *)a1 + 2);
  v4 = 0.0;
  if (v3)
  {
    v7 = -1;
    do
    {
      v8 = (std::__shared_weak_count *)v3[3];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        if (*((_DWORD *)v3 + 8) > v7)
          v7 = *((_DWORD *)v3 + 8);
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      else if (*((_DWORD *)v3 + 8) > v7)
      {
        v7 = *((_DWORD *)v3 + 8);
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if ((v7 & 0x80000000) == 0)
    {
      v68 = (uint64_t)a2;
      __val = v7;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v70 = v12;
        v80 = 0;
        v81 = 0;
        v14 = (uint64_t *)*((_QWORD *)v71 + 2);
        if (!v14)
        {
LABEL_81:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v77, v13);
          v60 = std::string::insert(&v77, 0, "Logic error in NetReshape, color ");
          v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          v62 = std::string::append(&v78, "/");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v79.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v76, __val);
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v76;
          else
            v64 = (std::string *)v76.__r_.__value_.__r.__words[0];
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
          else
            size = v76.__r_.__value_.__l.__size_;
          v66 = std::string::append(&v79, (const std::string::value_type *)v64, size);
          v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &buf);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v15 = 0;
        do
        {
          if (*((_DWORD *)v14 + 8) != v13)
            goto LABEL_38;
          v16 = (int8x8_t)a3[1];
          if (!*(_QWORD *)&v16)
            goto LABEL_80;
          v17 = v14[2];
          v18 = 0x9DDFEA08EB382D69 * (((8 * v17) + 8) ^ HIDWORD(v17));
          v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v18 >> 47) ^ v18);
          v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
          v21 = (uint8x8_t)vcnt_s8(v16);
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            v22 = v20;
            if (v20 >= *(_QWORD *)&v16)
              v22 = v20 % *(_QWORD *)&v16;
          }
          else
          {
            v22 = v20 & (*(_QWORD *)&v16 - 1);
          }
          v23 = *(_QWORD **)(*a3 + 8 * v22);
          if (!v23 || (v24 = (_QWORD *)*v23) == 0)
          {
LABEL_80:
            v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "blob not found in gc");
            __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          while (1)
          {
            v25 = v24[1];
            if (v20 == v25)
              break;
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&v16)
                v25 %= *(_QWORD *)&v16;
            }
            else
            {
              v25 &= *(_QWORD *)&v16 - 1;
            }
            if (v25 != v22)
              goto LABEL_80;
LABEL_34:
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_80;
          }
          if (v24[2] != v17)
            goto LABEL_34;
          v26 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(v68, v17, v14 + 2)[4];
          if (v26 >= v15)
          {
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v80, v14[2], v14[3]);
            v15 = v26;
          }
LABEL_38:
          v14 = (uint64_t *)*v14;
        }
        while (v14);
        v27 = v80;
        if (!v80)
          goto LABEL_81;
        v28 = operator new(0x98uLL);
        v28[1] = 0;
        v29 = v28 + 1;
        v28[2] = 0;
        *v28 = &off_1E2DBE998;
        *((_OWORD *)v28 + 4) = 0u;
        *((_OWORD *)v28 + 5) = 0u;
        *((_OWORD *)v28 + 2) = 0u;
        *((_OWORD *)v28 + 3) = 0u;
        *((_OWORD *)v28 + 6) = 0u;
        *((_OWORD *)v28 + 7) = 0u;
        *((_OWORD *)v28 + 8) = 0u;
        v28[17] = 0;
        v28[18] = 0;
        *((_DWORD *)v28 + 12) = 1065353216;
        v28[7] = 0x1FFFFFFFFLL;
        v28[12] = 0;
        v28[13] = 0;
        v28[8] = 0;
        v28[9] = 0;
        *((_BYTE *)v28 + 88) = 0;
        v28[10] = 0;
        v28[3] = &off_1E2DA0BF0;
        v28[15] = 0;
        v28[16] = 0;
        *((_BYTE *)v28 + 144) = 0;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 3);
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
        v30 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a3, v27, &v80)+ 4;
        v74 = (char *)(v28 + 3);
        v75 = (std::__shared_weak_count *)v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
        a1 = (Espresso *)(*(uint64_t (**)(unint64_t, _QWORD *, char **))(*(_QWORD *)v27 + 16))(v27, v30, &v74);
        v32 = v75;
        if (v75)
        {
          v33 = (unint64_t *)&v75->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        for (i = (uint64_t *)*((_QWORD *)v71 + 2); i; i = (uint64_t *)*i)
        {
          if (*((_DWORD *)i + 8) == v13)
          {
            v36 = (unint64_t *)(i + 2);
            v37 = v80;
            if (i[2] != v80)
            {
              v38 = operator new(0x98uLL);
              v38[1] = 0;
              v39 = v38 + 1;
              v38[2] = 0;
              *v38 = &off_1E2DBE998;
              *((_OWORD *)v38 + 4) = 0u;
              *((_OWORD *)v38 + 5) = 0u;
              *((_OWORD *)v38 + 2) = 0u;
              *((_OWORD *)v38 + 3) = 0u;
              *((_OWORD *)v38 + 6) = 0u;
              *((_OWORD *)v38 + 7) = 0u;
              *((_OWORD *)v38 + 8) = 0u;
              *((_DWORD *)v38 + 12) = 1065353216;
              v38[7] = 0x1FFFFFFFFLL;
              v38[12] = 0;
              v38[13] = 0;
              v38[8] = 0;
              v38[9] = 0;
              *((_BYTE *)v38 + 88) = 0;
              v38[10] = 0;
              v38[3] = &off_1E2DA0BF0;
              v38[17] = 0;
              v38[18] = 0;
              v38[16] = 0;
              v38[15] = 0;
              *((_BYTE *)v38 + 144) = 0;
              v79.__r_.__value_.__r.__words[0] = (std::string::size_type)(v38 + 3);
              v79.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v38 + 16, v37, (uint64_t)v81);
              v40 = *v36;
              v41 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a3, *v36, i + 2)+ 4;
              v72 = (char *)(v38 + 3);
              v73 = (std::__shared_weak_count *)v38;
              do
                v42 = __ldxr(v39);
              while (__stxr(v42 + 1, v39));
              a1 = (Espresso *)(*(uint64_t (**)(unint64_t, _QWORD *, char **))(*(_QWORD *)v40 + 16))(v40, v41, &v72);
              v43 = v73;
              if (v73)
              {
                v44 = (unint64_t *)&v73->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              v46 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
              if (v79.__r_.__value_.__l.__size_)
              {
                v47 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
            }
          }
        }
        v49 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v50 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v81;
        if (v81)
        {
          v53 = (unint64_t *)&v81->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v12 = v15 + v70;
        if (v13++ == __val)
        {
          v4 = (float)((float)v12 * 0.00000095367);
          v56 = __val;
          goto LABEL_77;
        }
      }
    }
  }
  v56 = -1;
LABEL_77:
  Espresso::espresso_os_log_subsystem(a1, a2);
  v57 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v56;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v4;
    _os_log_debug_impl(&dword_190DAF000, v57, OS_LOG_TYPE_DEBUG, "[reshape] max color = %d tot_est_size = %.3f\n", (uint8_t *)&buf, 0x12u);
  }

}

void sub_190DCAF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  int v42;
  uint64_t v43;

  if (*(char *)(v43 - 121) < 0)
    operator delete(*(void **)(v43 - 144));
  if (a22 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v42 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 160);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v41);
  goto LABEL_14;
}

void Espresso::deallocate_dead_blobs(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t *v20;
  char v21;
  unint64_t *v22;
  unint64_t *i;
  int8x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *j;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  void **k;
  void **v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  int8x8_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  void ***v67;
  void **v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  void **v73;
  void **v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  void **v79;
  unint64_t v82;
  int64x2_t v83;
  char *v84;
  void **v85;
  int64x2_t v86;
  char *v87;
  char **v88;

  v83 = 0uLL;
  v84 = 0;
  v5 = (_QWORD *)a1[2];
  if (!v5)
    goto LABEL_121;
  v8 = a3;
  v79 = (void **)(a1 + 2);
  v82 = a2;
  do
  {
    v10 = v5 + 2;
    v11 = v5[2];
    v12 = *a5;
    v13 = a5[1];
    if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(*a5, v13, v11))
    {
      v14 = *(_QWORD *)(a4 + 40) - *(_QWORD *)(a4 + 32);
      if ((int)(v14 >> 4) > a2 && (int)(v14 >> 4) >= 2)
      {
        v16 = (v14 >> 4);
        do
        {
          v17 = (v16 - 1);
          v18 = *(_QWORD **)(*(_QWORD *)(a4 + 32) + 16 * v17);
          v19 = (unint64_t *)v18[10];
          v20 = (unint64_t *)v18[11];
          if (v19 == v20)
          {
            v21 = 0;
          }
          else
          {
            v21 = 0;
            do
            {
              if (*v19 == *v10)
              {
                std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a5, *v19, v10)[4] = v17;
                v21 = 1;
              }
              v19 += 2;
            }
            while (v19 != v20);
            v18 = *(_QWORD **)(*(_QWORD *)(a4 + 32) + 16 * v17);
          }
          v22 = (unint64_t *)v18[13];
          for (i = (unint64_t *)v18[14]; v22 != i; v22 += 2)
          {
            if (*v22 == *v10)
            {
              std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a5, *v22, v10)[4] = v17;
              v21 = 1;
            }
          }
          if ((int)v16 - 1 <= a2)
            break;
          if (v16 < 3)
            break;
          --v16;
        }
        while ((v21 & 1) == 0);
        v12 = *a5;
        v13 = a5[1];
        v11 = *v10;
        v8 = a3;
      }
    }
    if (std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v12, v13, v11))
    {
      if (std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a5, v11, v10)[4] > v82)goto LABEL_64;
      v11 = *v10;
    }
    v24 = (int8x8_t)v8[1];
    if (v24)
    {
      v25 = 0x9DDFEA08EB382D69 * (((8 * v11) + 8) ^ HIDWORD(v11));
      v26 = 0x9DDFEA08EB382D69 * (HIDWORD(v11) ^ (v25 >> 47) ^ v25);
      v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
      v28 = (uint8x8_t)vcnt_s8(v24);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        v29 = v27;
        if (v27 >= *(_QWORD *)&v24)
          v29 = v27 % *(_QWORD *)&v24;
      }
      else
      {
        v29 = v27 & (*(_QWORD *)&v24 - 1);
      }
      v30 = *(_QWORD **)(*v8 + 8 * v29);
      if (v30)
      {
        for (j = (_QWORD *)*v30; j; j = (_QWORD *)*j)
        {
          v32 = j[1];
          if (v27 == v32)
          {
            if (j[2] == v11)
              goto LABEL_64;
          }
          else
          {
            if (v28.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&v24)
                v32 %= *(_QWORD *)&v24;
            }
            else
            {
              v32 &= *(_QWORD *)&v24 - 1;
            }
            if (v32 != v29)
              break;
          }
        }
      }
    }
    v33 = v83.i64[1];
    if (v83.i64[1] >= (unint64_t)v84)
    {
      v38 = (v83.i64[1] - v83.i64[0]) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v40 = (uint64_t)&v84[-v83.i64[0]];
      if ((uint64_t)&v84[-v83.i64[0]] >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      v88 = &v84;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v41);
      v44 = &v42[16 * v38];
      v45 = *(_OWORD *)v10;
      *(_OWORD *)v44 = *(_OWORD *)v10;
      if (*((_QWORD *)&v45 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = (_QWORD *)v83.i64[1];
      v49 = (_QWORD *)v83.i64[0];
      if (v83.i64[1] == v83.i64[0])
      {
        v52 = vdupq_n_s64(v83.u64[1]);
        v50 = &v42[16 * v38];
      }
      else
      {
        v50 = &v42[16 * v38];
        do
        {
          v51 = *((_OWORD *)v48 - 1);
          v48 -= 2;
          *((_OWORD *)v50 - 1) = v51;
          v50 -= 16;
          *v48 = 0;
          v48[1] = 0;
        }
        while (v48 != v49);
        v52 = v83;
      }
      v37 = v44 + 16;
      v83.i64[0] = (uint64_t)v50;
      v83.i64[1] = (uint64_t)(v44 + 16);
      v86 = v52;
      v53 = v84;
      v84 = &v42[16 * v43];
      v87 = v53;
      v85 = (void **)v52.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v85);
    }
    else
    {
      *(_QWORD *)v83.i64[1] = v11;
      v34 = v5[3];
      *(_QWORD *)(v33 + 8) = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = (_OWORD *)(v33 + 16);
    }
    v83.i64[1] = (uint64_t)v37;
LABEL_64:
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  v55 = (void **)v83.i64[1];
  for (k = (void **)v83.i64[0]; k != v55; k += 2)
  {
    v56 = (unint64_t)*k;
    v57 = (std::__shared_weak_count *)k[1];
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(p_shared_owners);
      while (__stxr(v59 + 1, p_shared_owners));
    }
    v60 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v60)
      goto LABEL_86;
    v61 = 0x9DDFEA08EB382D69 * (((8 * v56) + 8) ^ HIDWORD(v56));
    v62 = 0x9DDFEA08EB382D69 * (HIDWORD(v56) ^ (v61 >> 47) ^ v61);
    v63 = 0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47));
    v64 = (uint8x8_t)vcnt_s8(v60);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v65 = v63;
      if (v63 >= *(_QWORD *)&v60)
        v65 = v63 % *(_QWORD *)&v60;
    }
    else
    {
      v65 = v63 & (*(_QWORD *)&v60 - 1);
    }
    v66 = *a1;
    v67 = *(void ****)(*a1 + 8 * v65);
    if (!v67 || (v68 = *v67) == 0)
    {
LABEL_86:
      if (!v57)
        continue;
LABEL_87:
      v71 = (unint64_t *)&v57->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      continue;
    }
    v69 = *(_QWORD *)&v60 - 1;
    while (1)
    {
      v70 = (unint64_t)v68[1];
      if (v70 == v63)
        break;
      if (v64.u32[0] > 1uLL)
      {
        if (v70 >= *(_QWORD *)&v60)
          v70 %= *(_QWORD *)&v60;
      }
      else
      {
        v70 &= v69;
      }
      if (v70 != v65)
        goto LABEL_86;
LABEL_85:
      v68 = (void **)*v68;
      if (!v68)
        goto LABEL_86;
    }
    if (v68[2] != (void *)v56)
      goto LABEL_85;
    if (v64.u32[0] > 1uLL)
    {
      if (v63 >= *(_QWORD *)&v60)
        v63 %= *(_QWORD *)&v60;
    }
    else
    {
      v63 &= v69;
    }
    v73 = *(void ***)(v66 + 8 * v63);
    do
    {
      v74 = v73;
      v73 = (void **)*v73;
    }
    while (v73 != v68);
    if (v74 == v79)
      goto LABEL_110;
    v75 = (unint64_t)v74[1];
    if (v64.u32[0] > 1uLL)
    {
      if (v75 >= *(_QWORD *)&v60)
        v75 %= *(_QWORD *)&v60;
    }
    else
    {
      v75 &= v69;
    }
    if (v75 != v63)
    {
LABEL_110:
      if (!*v68)
        goto LABEL_111;
      v76 = *((_QWORD *)*v68 + 1);
      if (v64.u32[0] > 1uLL)
      {
        if (v76 >= *(_QWORD *)&v60)
          v76 %= *(_QWORD *)&v60;
      }
      else
      {
        v76 &= v69;
      }
      if (v76 != v63)
LABEL_111:
        *(_QWORD *)(v66 + 8 * v63) = 0;
    }
    v77 = *v68;
    if (*v68)
    {
      v78 = v77[1];
      if (v64.u32[0] > 1uLL)
      {
        if (v78 >= *(_QWORD *)&v60)
          v78 %= *(_QWORD *)&v60;
      }
      else
      {
        v78 &= v69;
      }
      if (v78 != v63)
      {
        *(_QWORD *)(*a1 + 8 * v78) = v74;
        v77 = *v68;
      }
    }
    *v74 = v77;
    *v68 = 0;
    --a1[3];
    v85 = v68;
    v86.i64[0] = (uint64_t)v79;
    v86.i8[8] = 1;
    std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)&v85);
    if (v57)
      goto LABEL_87;
  }
LABEL_121:
  v85 = (void **)&v83;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v85);
}

void sub_190DCB678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v40[0] = v15;
  v40[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_190DCBAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::blob_cpu::resize(int *a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  const void *v87;
  size_t v88;
  char v89;
  size_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *lpsrc;
  std::__shared_weak_count *v100;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 11, *a3, a3[1]);
  v6 = *a3;
  *((_QWORD *)a1 + 28) = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 29);
  *((_QWORD *)a1 + 29) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v6)
        goto LABEL_6;
LABEL_10:
      v12 = 0;
      lpsrc = 0;
      v100 = 0;
      goto LABEL_26;
    }
  }
  if (!v6)
    goto LABEL_10;
LABEL_6:
  v6 = (uint64_t)v10;
  lpsrc = 0;
  v100 = 0;
  if (v10)
  {
    v11 = *((unsigned __int8 *)v10 + 88);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&lpsrc, v10[13], v10[14]);
    if (v11)
    {
      v12 = 1;
      goto LABEL_26;
    }
    if (*(_BYTE *)(v6 + 120))
      v13 = lpsrc == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 12);
      v97 = *((_QWORD *)a1 + 11);
      v98 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (*(uint64_t (**)(int *, const Espresso::layer_shape *, uint64_t *))(*(_QWORD *)a1 + 184))(a1, a2, &v97);
      v18 = v98;
      if (v98)
      {
        v19 = (unint64_t *)&v98->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((v17 & 1) != 0)
        goto LABEL_142;
    }
  }
  v12 = 0;
LABEL_26:
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v21 = *a3;
  if (*a3 && *(_BYTE *)(v21 + 8))
    a1[60] = *(_DWORD *)(v21 + 12);
  v22 = a1[60];
  v24 = v22 == 4 || v22 == 2;
  if (v12)
  {
    v25 = 1;
    if (v22 != 1)
      v25 = 2;
    if (v24)
      v25 = 0;
    *(_QWORD *)(v6 + 96) = (((a1[3] * (uint64_t)a1[2] * a1[4] * a1[5] * a1[6]) << v25) + 4095) & 0xFFFFFFFFFFFFF000;
    goto LABEL_142;
  }
  *((_QWORD *)a1 + 31) = Espresso::layer_shape::total_dim(a2);
  v96 = 0uLL;
  v26 = (uint64_t)(a1 + 40);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 40), &v96);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v96 = 0uLL;
  v30 = (uint64_t)(a1 + 44);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 44), &v96);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v96 = 0uLL;
  v34 = (uint64_t)(a1 + 48);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 48), &v96);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v96 = 0uLL;
  v38 = (uint64_t)(a1 + 52);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 52), &v96);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (lpsrc)
  {
    if (v42)
    {
      *(_QWORD *)&v96 = v42;
      *((_QWORD *)&v96 + 1) = v100;
      if (v100)
      {
        v43 = (unint64_t *)&v100->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = v42[20];
      if (v45)
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 28, v45, v42[21]);
      }
      else
      {
        v63 = v42[26];
        if (v63)
        {
          v64 = v42[27];
          if (v64)
          {
            v65 = (unint64_t *)(v64 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v67 = (std::__shared_weak_count *)*((_QWORD *)a1 + 29);
          *((_QWORD *)a1 + 28) = v63;
          *((_QWORD *)a1 + 29) = v64;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
        }
        else
        {
          v85 = v42[22];
          if (v85)
          {
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 28, v85, v42[23]);
          }
          else
          {
            v94 = v42[24];
            if (v94)
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 28, v94, v42[25]);
          }
        }
      }
      v47 = a1[2];
      v46 = a1[3];
      v48 = a1[4];
      v49 = a1[6] * a1[5];
      if (v49 * v47 * v46 * v48 < 1)
        goto LABEL_120;
      v50 = a1[60];
      switch(v50)
      {
        case 3:
          v73 = Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)v96);
          v74 = operator new(0x60uLL);
          v74[1] = 0;
          v74[2] = 0;
          v74[3] = &off_1E2DA1330;
          *v74 = &off_1E2DBEED8;
          *((_OWORD *)v74 + 4) = 0u;
          *((_OWORD *)v74 + 5) = 0u;
          *((_DWORD *)v74 + 8) = v47;
          *((_DWORD *)v74 + 9) = v46;
          *((_DWORD *)v74 + 10) = v48;
          *((_DWORD *)v74 + 11) = v49;
          v74[6] = v73;
          *((_BYTE *)v74 + 56) = 0;
          *(_QWORD *)&v95 = v74 + 3;
          *((_QWORD *)&v95 + 1) = v74;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v38, &v95);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
          if (!*((_QWORD *)&v95 + 1))
            goto LABEL_120;
          v75 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
          do
            v55 = __ldaxr(v75);
          while (__stlxr(v55 - 1, v75));
          break;
        case 1:
          v76 = Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)v96);
          v77 = operator new(0x60uLL);
          v77[1] = 0;
          v77[2] = 0;
          v77[3] = &off_1E2DA1410;
          *v77 = &off_1E2DBF060;
          *((_OWORD *)v77 + 4) = 0u;
          *((_OWORD *)v77 + 5) = 0u;
          *((_DWORD *)v77 + 8) = v47;
          *((_DWORD *)v77 + 9) = v46;
          *((_DWORD *)v77 + 10) = v48;
          *((_DWORD *)v77 + 11) = v49;
          v77[6] = v76;
          *((_BYTE *)v77 + 56) = 0;
          *(_QWORD *)&v95 = v77 + 3;
          *((_QWORD *)&v95 + 1) = v77;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v30, &v95);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
          if (!*((_QWORD *)&v95 + 1))
            goto LABEL_120;
          v78 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
          do
            v55 = __ldaxr(v78);
          while (__stlxr(v55 - 1, v78));
          break;
        case 0:
          v51 = Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)v96);
          v52 = operator new(0x60uLL);
          v52[1] = 0;
          v52[2] = 0;
          v52[3] = &off_1E2DA11F0;
          *v52 = &off_1E2DBECA8;
          *((_OWORD *)v52 + 4) = 0u;
          *((_OWORD *)v52 + 5) = 0u;
          *((_DWORD *)v52 + 8) = v47;
          *((_DWORD *)v52 + 9) = v46;
          *((_DWORD *)v52 + 10) = v48;
          *((_DWORD *)v52 + 11) = v49;
          v52[6] = v51;
          *((_BYTE *)v52 + 56) = 0;
          *(_QWORD *)&v95 = v52 + 3;
          *((_QWORD *)&v95 + 1) = v52;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v26, &v95);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
          if (*((_QWORD *)&v95 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            break;
          }
LABEL_120:
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          goto LABEL_142;
        default:
          v79 = Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)v96);
          v80 = operator new(0x60uLL);
          v80[1] = 0;
          v80[2] = 0;
          v80[3] = &off_1E2DA12B0;
          *v80 = &off_1E2DBEDF8;
          *((_OWORD *)v80 + 4) = 0u;
          *((_OWORD *)v80 + 5) = 0u;
          *((_DWORD *)v80 + 8) = v47;
          *((_DWORD *)v80 + 9) = v46;
          *((_DWORD *)v80 + 10) = v48;
          *((_DWORD *)v80 + 11) = v49;
          v80[6] = v79;
          *((_BYTE *)v80 + 56) = 0;
          *(_QWORD *)&v95 = v80 + 3;
          *((_QWORD *)&v95 + 1) = v80;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v34, &v95);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
          if (!*((_QWORD *)&v95 + 1))
            goto LABEL_120;
          v81 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
          do
            v55 = __ldaxr(v81);
          while (__stlxr(v55 - 1, v81));
          break;
      }
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      goto LABEL_120;
    }
  }
  v56 = a1[2];
  v57 = a1[3];
  v58 = a1[4];
  v59 = a1[6] * a1[5];
  if (v59 * v56 * v57 * v58 >= 1)
  {
    switch(a1[60])
    {
      case 0:
        if (*(_BYTE *)(*((_QWORD *)a1 + 9) + 112))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 40), &v96);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v70 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v62 = __ldaxr(v70);
            while (__stlxr(v62 - 1, v70));
            goto LABEL_130;
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 40), &v96);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v96);
        }
        break;
      case 1:
        if (*(_BYTE *)(*((_QWORD *)a1 + 9) + 112))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 44), &v96);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v62 = __ldaxr(v71);
            while (__stlxr(v62 - 1, v71));
            goto LABEL_130;
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 44), &v96);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v96);
        }
        break;
      case 2:
      case 4:
        if (*(_BYTE *)(*((_QWORD *)a1 + 9) + 112))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 48), &v96);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            goto LABEL_130;
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 48), &v96);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v86 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v62 = __ldaxr(v86);
            while (__stlxr(v62 - 1, v86));
            goto LABEL_130;
          }
        }
        break;
      case 3:
        if (*(_BYTE *)(*((_QWORD *)a1 + 9) + 112))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 52), &v96);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v62 = __ldaxr(v72);
            while (__stlxr(v62 - 1, v72));
LABEL_130:
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(&v96, v56, v57, v58, v59);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 52), &v96);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v96);
        }
        break;
      default:
        break;
    }
    v87 = (const void *)Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)a1);
    v88 = malloc_size(v87);
    v89 = 1;
    if (v22 != 1)
      v89 = 2;
    if (v24)
      v89 = 0;
    v90 = v88 >> v89;
    if (*((_QWORD *)a1 + 31) > v90)
      v90 = *((_QWORD *)a1 + 31);
    *((_QWORD *)a1 + 31) = v90;
  }
LABEL_142:
  v91 = v100;
  if (v100)
  {
    v92 = (unint64_t *)&v100->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_190DCC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::layer_shape::total_dim(Espresso::layer_shape *this)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 5);
  if (v2 == -1)
  {
    v4 = *((_DWORD *)this + 4);
    result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2) * *((int *)this + 3);
    if (v4 == 1)
      return result;
    goto LABEL_9;
  }
  if (v2 < 1)
    return 1;
  result = *(int *)this;
  if (v2 != 1)
  {
    result = *((int *)this + 1) * (uint64_t)(int)result;
    if (v2 >= 3)
    {
      result *= *((int *)this + 2);
      if (v2 != 3)
      {
        result *= *((int *)this + 3);
        if (v2 >= 5)
        {
          v4 = *((_DWORD *)this + 4);
LABEL_9:
          result *= v4;
        }
      }
    }
  }
  return result;
}

uint64_t Espresso::blob_cpu::any_cp_data(Espresso::blob_cpu *this)
{
  uint64_t v1;
  uint64_t result;

  switch(*((_DWORD *)this + 60))
  {
    case 0:
      v1 = *((_QWORD *)this + 20);
      if (v1)
        goto LABEL_3;
      goto LABEL_5;
    case 1:
      v1 = *((_QWORD *)this + 22);
      if (!v1)
        goto LABEL_5;
      goto LABEL_3;
    case 2:
    case 4:
      v1 = *((_QWORD *)this + 24);
      if (v1)
        goto LABEL_3;
      goto LABEL_5;
    case 3:
      v1 = *((_QWORD *)this + 26);
      if (!v1)
        goto LABEL_5;
LABEL_3:
      result = *(_QWORD *)(v1 + 24);
      break;
    default:
LABEL_5:
      result = 0;
      break;
  }
  return result;
}

void *Espresso::kern_alloc_uninitialized(Espresso *this)
{
  int v2;
  void *memptr;

  memptr = 0;
  v2 = malloc_type_posix_memalign(&memptr, 0x1000uLL, ((unint64_t)this + 4095) & 0xFFFFFFFFFFFFF000, 0xE526A90BuLL);
  if (v2)
    Espresso::throw_exception_selector<Espresso::memory_error,int &,unsigned long &>(v2, (uint64_t)this);
  Espresso::on_alloc((Espresso *)memptr, this);
  return memptr;
}

void Espresso::on_alloc(Espresso *this, void *a2)
{
  BOOL v4;
  _QWORD v5[6];

  if (Espresso::onceToken != -1)
    dispatch_once(&Espresso::onceToken, &__block_literal_global_11101);
  if (Espresso::alloc_dbg_queue)
    v4 = Espresso::debug_allocated_mem == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso8on_allocEPvm_block_invoke_2;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a2;
    v5[5] = this;
    dispatch_async((dispatch_queue_t)Espresso::alloc_dbg_queue, v5);
  }
}

void Espresso::blob_cpu::~blob_cpu(Espresso::blob_cpu *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E2DA6B80;
  v2 = (char *)this + 160;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2DA6B80;
  v2 = (char *)this + 160;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::generic_transpose_kernel::top_shapes_for_bottom_shapes(unsigned int *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::runtime_error *exception;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  __int128 v22[2];
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v13 = **a2;
  v15 = (*a2)[1];
  v16 = *((_QWORD *)*a2 + 4);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v17, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v27 = v13;
  v28 = v15;
  v6 = a1[70];
  if (v6 >= 5
    || (v7 = a1[71], v7 >= 5)
    || (v8 = a1[72], v8 >= 5)
    || (v9 = a1[73], v9 >= 5)
    || (v10 = a1[74], v10 >= 5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
  LODWORD(v15) = *((_DWORD *)&v27 + v10);
  if ((int)v15 >= 2)
    DWORD1(v15) = 5;
  HIDWORD(v14) = *((_DWORD *)&v27 + v9);
  DWORD2(v14) = *((_DWORD *)&v27 + v8);
  DWORD1(v14) = *((_DWORD *)&v27 + v7);
  LODWORD(v14) = *((_DWORD *)&v27 + v6);
  v22[0] = v14;
  v22[1] = v15;
  v23 = v16;
  __p = 0;
  v25 = 0;
  v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, (uint64_t)v18, (v18 - (_BYTE *)v17) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = a3;
  v21 = 0;
  v11 = (char *)operator new(0x40uLL);
  *a3 = v11;
  a3[1] = v11;
  a3[2] = v11 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v22, &v27, (uint64_t)v11);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_190DCC8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;

  __cxa_free_exception(v25);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::generic_batch_matmul_kernel::top_shapes_for_bottom_shapes(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v4;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  signed int v10;
  int v11;
  int v12;
  char *v13;
  std::vector<int>::pointer v14;
  __int128 *v16;
  int v17;
  std::vector<int>::const_iterator v18;
  _BYTE *v19;
  char *v20;
  int v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int *begin;
  unint64_t v35;
  unint64_t v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int *v46;
  int *v47;
  int *v48;
  int *v49;
  unint64_t v50;
  const char *v51;
  int v52;
  int v53;
  int64_t v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  std::runtime_error *exception;
  void *v61;
  char *v62;
  unint64_t v63;
  std::vector<int> v64;
  std::vector<int> v65;
  std::vector<int> v66;
  std::vector<int> v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  unsigned int v72;
  _QWORD *v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *__p;
  void *v79;
  uint64_t v80;
  __int128 __x;
  __int128 v82;
  uint64_t v83;
  void *v84;
  _BYTE *v85;
  uint64_t v86;
  __int128 v87;

  *((_QWORD *)&v87 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *(const Espresso::layer_shape **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 <= 0x7FuLL)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_batch_matmul_kernel: two inputs required");
  if (a1[280])
  {
    v6 = *((_OWORD *)v4 + 1);
    v7 = *((_QWORD *)v4 + 4);
    __x = *(_OWORD *)v4;
    v82 = v6;
    v83 = v7;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, *((const void **)v4 + 5), *((_QWORD *)v4 + 6), (uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 2);
    if (*(int *)v4 > 1
      || (*((int *)v4 + 16) <= 1 ? (v8 = *((_DWORD *)v4 + 1) <= 1) : (v8 = 0),
          v8 ? (v9 = *((_DWORD *)v4 + 17) < 2) : (v9 = 0),
          !v9))
    {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("generic_batch_matmul_kernel: not implemented for 4D+ tensors");
    }
    v10 = *((_DWORD *)v4 + 4);
    v11 = *((_DWORD *)v4 + 20);
    if (v11 == 1 || v10 == 1 || v10 == v11)
    {
      if (*((_DWORD *)v4 + 2) == *((_DWORD *)v4 + 19))
      {
        *(_QWORD *)&__x = 0x100000001;
        v12 = *((_DWORD *)v4 + 3);
        DWORD2(__x) = *((_DWORD *)v4 + 18);
        HIDWORD(__x) = v12;
        if (v10 <= v11)
          v10 = v11;
        *(_QWORD *)&v82 = __PAIR64__(*((_DWORD *)v4 + 5), v10);
        v75 = __x;
        v76 = v82;
        v77 = v83;
        __p = 0;
        v79 = 0;
        v80 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v70 = a3;
        v71 = 0;
        v13 = (char *)operator new(0x40uLL);
        *a3 = v13;
        a3[1] = v13;
        a3[2] = v13 + 64;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v75, &__x, (uint64_t)v13);
        if (__p)
        {
          v79 = __p;
          operator delete(__p);
        }
        v14 = (std::vector<int>::pointer)v84;
        if (v84)
        {
          v85 = v84;
LABEL_102:
          operator delete(v14);
          return;
        }
        return;
      }
      v59 = "generic_batch_matmul_kernel: not compatible for multiplication";
    }
    else
    {
      v59 = "generic_batch_matmul_kernel: seq dimensions do not match";
    }
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v59);
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v75, *(const Espresso::layer_shape **)a2, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v70, (const Espresso::layer_shape *)(*(_QWORD *)a2 + 64), 0);
  v16 = &v75;
  if (DWORD1(v76) <= v72)
    v16 = (__int128 *)&v70;
  v68 = *v16;
  v69 = *((_QWORD *)v16 + 2);
  Espresso::layer_nd_shape::shape_vector(&v67, (uint64_t)&v75);
  Espresso::layer_nd_shape::shape_vector(&v66, (uint64_t)&v70);
  if (HIDWORD(v69) <= 1)
  {
    v69 = 0x200000000;
    v68 = 0x100000001uLL;
  }
  Espresso::layer_nd_shape::shape_vector(&v65, (uint64_t)&v68);
  memset(&v64, 0, sizeof(v64));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, v67.__begin_, (uint64_t)v67.__end_, v67.__end_ - v67.__begin_);
  v17 = a1[281];
  v62 = 0;
  v63 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, v66.__begin_, (uint64_t)v66.__end_, v66.__end_ - v66.__begin_);
  v18.__i_ = v64.__begin_;
  if (v64.__end_ == v64.__begin_)
  {
    v51 = "Invalid shape of first argument.";
    goto LABEL_112;
  }
  v19 = v61;
  v20 = v62;
  if (v62 == v61)
  {
    v51 = "Invalid shape of second argument.";
    goto LABEL_112;
  }
  if ((std::vector<int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) < (std::vector<int>::pointer)8)
  {
    v51 = "Invalid rank of output.";
LABEL_112:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v51);
  }
  v21 = a1[282];
  if ((std::vector<int>::pointer)((char *)v64.__end_ - (char *)v64.__begin_) == (std::vector<int>::pointer)4)
  {
    LODWORD(__x) = 1;
    std::vector<int>::insert(&v64, v18, (std::vector<int>::value_type *)&__x);
    v19 = v61;
    v20 = v62;
  }
  v22 = (v20 - v19) >> 2;
  if (v20 - v19 == 4)
  {
    if ((unint64_t)v20 >= v63)
    {
      v24 = v63 - (_QWORD)v19;
      v25 = v24 >> 1;
      if (v24 >> 1 <= v22 + 1)
        v25 = v22 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v26);
      v28 = (char *)v61;
      v29 = v62;
      v30 = &v27[4 * v22];
      v32 = &v27[4 * v31];
      *(_DWORD *)v30 = 1;
      v23 = v30 + 4;
      while (v29 != v28)
      {
        v33 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v30 - 1) = v33;
        v30 -= 4;
      }
      v61 = v30;
      v62 = v23;
      v63 = (unint64_t)v32;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v20 = 1;
      v23 = v20 + 4;
    }
    v62 = v23;
    v19 = v61;
    v22 = (v23 - (_BYTE *)v61) >> 2;
  }
  begin = v64.__begin_;
  v35 = (char *)v65.__end_ - (char *)v65.__begin_;
  v36 = v65.__end_ - v65.__begin_;
  if (v36 != v64.__end_ - v64.__begin_ && v36 != v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid rank of output");
    goto LABEL_114;
  }
  v38 = v64.__end_ - v64.__begin_;
  v39 = -2;
  if (v17)
    v40 = -2;
  else
    v40 = -1;
  v41 = v64.__begin_[v38 + v40];
  if (v21)
    v42 = -1;
  else
    v42 = -2;
  if (v41 != *(_DWORD *)&v19[4 * v22 + 4 * v42])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incompatible shapes for matrix multiplication.");
LABEL_114:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v21)
    v43 = -2;
  else
    v43 = -1;
  v44 = v22 + v43;
  if (v17)
    v39 = -1;
  v45 = *(_DWORD *)&v19[4 * v44];
  v46 = &v65.__begin_[v36];
  *(v46 - 2) = v64.__begin_[v38 + v39];
  *(v46 - 1) = v45;
  if (v35 >= 9)
  {
    if (v36 <= 3)
      v36 = 3;
    v47 = v46 - 3;
    v48 = &begin[v38 - 3];
    v49 = (int *)&v19[4 * v22 - 12];
    v50 = 2;
    v51 = "Invalid shapes for broadcasting";
    do
    {
      if (v38 > v50 && v22 > v50)
      {
        v52 = *v48;
        v53 = *v49;
        if (*v49 != 1 && v52 != 1 && v52 != v53)
          goto LABEL_112;
        if (v52 <= v53)
          v52 = *v49;
        *v47 = v52;
      }
      if (v38 > v50 && v22 <= v50)
        *v47 = *v48;
      if (v38 <= v50 && v22 > v50)
        *v47 = *v49;
      ++v50;
      --v47;
      --v48;
      --v49;
    }
    while (v36 != v50);
  }
  if (v61)
  {
    v62 = (char *)v61;
    operator delete(v61);
    begin = v64.__begin_;
  }
  if (begin)
  {
    v64.__end_ = begin;
    operator delete(begin);
  }
  __x = 0uLL;
  LODWORD(v82) = 0;
  v56 = (char *)v65.__end_ - (char *)v65.__begin_;
  if (v65.__end_ != v65.__begin_)
  {
    v57 = v56 >> 2;
    if ((unint64_t)(v56 >> 2) <= 1)
      v57 = 1;
    memcpy(&__x, v65.__begin_, 4 * v57);
  }
  DWORD1(v82) = (unint64_t)v56 >> 2;
  v68 = __x;
  v69 = v82;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v68, 0, (uint64_t)&__x);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v73 = a3;
  v74 = 0;
  v58 = (char *)operator new(0x40uLL);
  *a3 = v58;
  a3[1] = v58;
  a3[2] = v58 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v87, (uint64_t)v58);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    operator delete(v65.__begin_);
  }
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
  v14 = v67.__begin_;
  if (v67.__begin_)
  {
    v67.__end_ = v67.__begin_;
    goto LABEL_102;
  }
}

void sub_190DCCF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  void *v39;

  __cxa_free_exception(v39);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::assemble_input_output_blob_topology(uint64_t a1, Espresso ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  Espresso **v6;
  Espresso **v7;
  uint64_t v8;
  void *v9;
  Espresso *v10;
  __n128 v11;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  void *v45;
  int v46;
  int v47;
  void *v48;
  int v49;
  void *v50;
  int v51;
  int v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  void *__p;
  std::__shared_weak_count *v68;
  char v69;
  _OWORD v70[3];
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int16 v76;
  char v77;
  std::vector<std::string> v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  std::vector<std::string> v83;
  unint64_t v84;
  uint64_t v85;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = *a6;
    v65 = *a6 + 16;
    do
    {
      v9 = (void *)MEMORY[0x19401D4A4]();
      v10 = *v7;
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      memset(v70, 0, sizeof(v70));
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 1;
      memset(v78, 0, sizeof(v78));
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&__p, "name");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      v11.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v83, (uint64_t)v70);
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      end = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        p_size = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v14 = __ldaxr(p_size);
        while (__stlxr(v14 - 1, p_size));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *, __n128))end->__on_zero_shared)(end, v11);
          std::__shared_weak_count::__release_weak(end);
        }
      }
      if (v69 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "type");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      v15.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v83, (uint64_t)&v71);
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      v16 = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        v17 = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v15);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v69 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      v19.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v83, (uint64_t)&v70[1] + 8);
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      v20 = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        v21 = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v19);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v69 < 0)
        operator delete(__p);
      v23 = v75;
      v66[0] = v74;
      v66[1] = v75;
      if (v75)
      {
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      Espresso::top_names_from_serdes((uint64_t)v10, v66, (uint64_t)v70, &v83);
      std::vector<std::string>::__vdeallocate(v78);
      v78[0] = v83;
      memset(&v83, 0, sizeof(v83));
      __p = &v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v23)
      {
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      Espresso::bottom_names_from_serdes(v10, &v83);
      std::vector<std::string>::__vdeallocate(&v78[1]);
      v78[1] = v83;
      memset(&v83, 0, sizeof(v83));
      __p = &v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v83, "hint_fallback_from_metal");
      v28 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(_QWORD *)v10 + 24))(v10, &v83);
      v29 = v28;
      if (SHIBYTE(v83.__end_cap_.__value_) < 0)
      {
        operator delete(v83.__begin_);
        if (!v29)
          goto LABEL_53;
      }
      else if (!v28)
      {
        goto LABEL_53;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_metal");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      if ((*((unsigned int (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
            + 3))(v83.__begin_, &v83.__end_cap_))
      {
        DWORD2(v72) = (*((uint64_t (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
                       + 5))(v83.__begin_, &v83.__end_cap_);
      }
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      v30 = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        v31 = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v69 < 0)
        operator delete(__p);
LABEL_53:
      std::string::basic_string[abi:ne180100]<0>(&v83, "hint_fallback_from_cpu");
      v33 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(_QWORD *)v10 + 24))(v10, &v83);
      v34 = v33;
      if (SHIBYTE(v83.__end_cap_.__value_) < 0)
      {
        operator delete(v83.__begin_);
        if (!v34)
          goto LABEL_68;
      }
      else if (!v33)
      {
        goto LABEL_68;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_cpu");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      if ((*((unsigned int (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
            + 3))(v83.__begin_, &v83.__end_cap_))
      {
        v73 = (*((uint64_t (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
               + 5))(v83.__begin_, &v83.__end_cap_);
      }
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      v35 = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        v36 = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v69 < 0)
        operator delete(__p);
LABEL_68:
      std::string::basic_string[abi:ne180100]<0>(&v83, "hint_fallback_from_ane");
      v38 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(_QWORD *)v10 + 24))(v10, &v83);
      v39 = v38;
      if (SHIBYTE(v83.__end_cap_.__value_) < 0)
      {
        operator delete(v83.__begin_);
        if (!v39)
          goto LABEL_83;
      }
      else if (!v38)
      {
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_ane");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v83);
      if ((*((unsigned int (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
            + 3))(v83.__begin_, &v83.__end_cap_))
      {
        HIDWORD(v72) = (*((uint64_t (**)(std::vector<std::string>::pointer, std::__compressed_pair<std::string *> *))v83.__begin_->__r_.__value_.__l.__data_
                        + 5))(v83.__begin_, &v83.__end_cap_);
      }
      if (SHIBYTE(v85) < 0)
        operator delete(v83.__end_cap_.__value_);
      v40 = (std::__shared_weak_count *)v83.__end_;
      if (v83.__end_)
      {
        v41 = &v83.__end_->__r_.__value_.__l.__size_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v69 < 0)
        operator delete(__p);
LABEL_83:
      std::string::basic_string[abi:ne180100]<0>(&v83, "attributes");
      v43 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(_QWORD *)v10 + 24))(v10, &v83);
      v44 = v43;
      if (SHIBYTE(v83.__end_cap_.__value_) < 0)
      {
        operator delete(v83.__begin_);
        if (v44)
        {
LABEL_87:
          std::string::basic_string[abi:ne180100]<0>(&v83, "attributes");
          (*(void (**)(void **__return_ptr, Espresso *, std::vector<std::string> *))(*(_QWORD *)v10 + 120))(&__p, v10, &v83);
          if (SHIBYTE(v83.__end_cap_.__value_) < 0)
            operator delete(v83.__begin_);
          v45 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v83, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
          v46 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(_QWORD *)v45 + 24))(v45, &v83);
          v47 = v46;
          if (SHIBYTE(v83.__end_cap_.__value_) < 0)
          {
            operator delete(v83.__begin_);
            if (!v47)
              goto LABEL_96;
          }
          else if (!v46)
          {
            goto LABEL_96;
          }
          v48 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v83, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
          v49 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(_QWORD *)v48 + 40))(v48, &v83);
          if (SHIBYTE(v83.__end_cap_.__value_) < 0)
            operator delete(v83.__begin_);
          DWORD2(v72) = v49 > 0;
          HIDWORD(v72) = DWORD2(v72);
LABEL_96:
          v50 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v83, "is_output");
          v51 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(_QWORD *)v50 + 24))(v50, &v83);
          v52 = v51;
          if (SHIBYTE(v83.__end_cap_.__value_) < 0)
          {
            operator delete(v83.__begin_);
            if (!v52)
            {
LABEL_102:
              v54 = v68;
              if (v68)
              {
                v55 = (unint64_t *)&v68->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              goto LABEL_107;
            }
          }
          else if (!v51)
          {
            goto LABEL_102;
          }
          v53 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v83, "is_output");
          LOBYTE(v76) = (*(unsigned int (**)(void *, std::vector<std::string> *))(*(_QWORD *)v53 + 40))(v53, &v83) != 0;
          if (SHIBYTE(v83.__end_cap_.__value_) < 0)
            operator delete(v83.__begin_);
          goto LABEL_102;
        }
      }
      else if (v43)
      {
        goto LABEL_87;
      }
LABEL_107:
      v58 = *(_QWORD *)(v8 + 8);
      v57 = *(_QWORD *)(v8 + 16);
      if (v58 >= v57)
      {
        v60 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58 - *(_QWORD *)v8) >> 5);
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) > 0x124924924924924)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v62 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - *(_QWORD *)v8) >> 5);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x92492492492492)
          v63 = 0x124924924924924;
        else
          v63 = v61;
        v85 = v65;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v63);
        else
          v64 = 0;
        v83.__begin_ = (std::vector<std::string>::pointer)v63;
        v83.__end_ = (std::vector<std::string>::pointer)(v63 + 224 * v60);
        v83.__end_cap_.__value_ = v83.__end_;
        v84 = v63 + 224 * v64;
        Espresso::kernel_info_t::kernel_info_t(v83.__end_, (const Espresso::kernel_info_t *)v70);
        v83.__end_cap_.__value_ = (std::string *)((char *)v83.__end_cap_.__value_ + 224);
        std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer((uint64_t *)v8, &v83);
        v59 = *(_QWORD *)(v8 + 8);
        std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)&v83);
      }
      else
      {
        Espresso::kernel_info_t::kernel_info_t(*(std::string **)(v8 + 8), (const Espresso::kernel_info_t *)v70);
        v59 = v58 + 224;
        *(_QWORD *)(v8 + 8) = v59;
      }
      *(_QWORD *)(v8 + 8) = v59;
      Espresso::kernel_info_t::~kernel_info_t((void **)v70);
      objc_autoreleasePoolPop(v9);
      v7 += 2;
    }
    while (v7 != v6);
  }
}

void sub_190DCD964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (*(char *)(v8 - 121) < 0)
    operator delete(*(void **)(v8 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  Espresso::kernel_info_t::~kernel_info_t((void **)va1);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void Espresso::top_names_from_serdes(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  std::string *v8;
  int v9;
  int v10;
  __n128 v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::vector<std::string> *v15;
  int v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  std::string *v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::vector<std::string> *v31;
  std::string __p;
  std::string v33;
  __int128 v34;
  void *v35;
  char v36;
  uint64_t v37;
  _BYTE v38[15];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v33 = *(std::string *)a3;
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  __p.__r_.__value_.__s.__data_[8] = 0;
  v8 = (std::string *)operator new(0x18uLL);
  a4->__begin_ = v8;
  a4->__end_ = v8;
  a4->__end_cap_.__value_ = v8 + 1;
  a4->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&a4->__end_cap_, (__int128 *)&v33, &v34, v8);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v31 = a4;
  std::string::basic_string[abi:ne180100]<0>(&v33, "top");
  v9 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 24))(a1, &v33);
  v10 = v9;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_8;
  }
  else if (v9)
  {
LABEL_8:
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(v38, "top");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v33);
    v11.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v33, (uint64_t)&__p);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33.__r_.__value_.__r.__words[2]);
    size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (v33.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, __n128))size->__on_zero_shared)(size, v11);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v39 < 0)
      operator delete(*(void **)v38);
    Espresso::split_list_of_names(&__p, (uint64_t)a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v15 = a4;
  if (*a2)
  {
    v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
    std::vector<std::string>::resize(a4, v16);
    if (v16 >= 2)
    {
      v17 = 0;
      v18 = *MEMORY[0x1E0DE4F50];
      v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v28 = v16;
      v19 = 1;
      v20 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
        std::ostream::operator<<();
        std::stringbuf::str();
        v21 = *(char *)(a3 + 23);
        if (v21 >= 0)
          v22 = (const std::string::value_type *)a3;
        else
          v22 = *(const std::string::value_type **)a3;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(a3 + 23);
        else
          v23 = *(_QWORD *)(a3 + 8);
        v24 = std::string::insert(&__p, 0, v22, v23);
        v25 = v24->__r_.__value_.__r.__words[0];
        *(_QWORD *)v38 = v24->__r_.__value_.__l.__size_;
        *(_QWORD *)&v38[7] = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
        v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v27 = &v15->__begin_[v17];
        if (SHIBYTE(v27[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27[1].__r_.__value_.__l.__data_);
        v27[1].__r_.__value_.__r.__words[0] = v25;
        v27[1].__r_.__value_.__l.__size_ = *(_QWORD *)v38;
        *(std::string::size_type *)((char *)&v27[1].__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v38[7];
        *((_BYTE *)&v27[1].__r_.__value_.__s + 23) = v26;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v33.__r_.__value_.__r.__words[0] = v18;
        *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = v30;
        v33.__r_.__value_.__r.__words[2] = v29;
        *(_QWORD *)&v34 = v20;
        v15 = v31;
        if (v36 < 0)
          operator delete(v35);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](&v37);
        ++v19;
        ++v17;
      }
      while (v28 != v19);
    }
  }
}

void sub_190DCDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(exception_object);
}

double Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 112))(&v6, *a1, v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
  }
  return result;
}

void Espresso::SerDes::serdes_object_json_objc::get_string(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  id v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  CFStringRef v9;
  __CFString *Value;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v13;
  std::string *p_b;
  std::string *v15;
  size_t v16;
  __CFString *v17;
  std::logic_error *exception;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __b;

  v5 = *(id *)(a1 + 24);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a2;
  else
    v7 = *(const UInt8 **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = CFStringCreateWithBytesNoCopy(0, v7, v8, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v9)
  {

LABEL_23:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v19 = std::string::append(&v21, "\" not found");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __b.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__b);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v5, v9);
  CFRelease(v9);

  if (!Value)
    goto LABEL_23;
  CStringPtr = (char *)CFStringGetCStringPtr(Value, 0x8000100u);
  if (CStringPtr)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, CStringPtr);
  }
  else
  {
    Length = CFStringGetLength(Value);
    v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::string::basic_string[abi:ne180100](&__b, v13, 0);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    if (CFStringGetCString(Value, (char *)p_b, v13, 0x8000100u))
    {
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__b;
      else
        v15 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v16 = strlen((const char *)v15);
      std::string::resize(&__b, v16, 0);
      *a3 = __b;
    }
    else
    {
      v17 = objc_retainAutorelease(Value);
      std::string::basic_string[abi:ne180100]<0>(a3, (char *)-[__CFString UTF8String](v17, "UTF8String"));

      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
    }
  }
}

void sub_190DCE1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::bottom_names_from_serdes(Espresso *this@<X0>, _QWORD *a2@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::basic_string[abi:ne180100]<0>(v9, "bottom");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)this, (uint64_t)v9, &v11);
  v5.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  Espresso::split_list_of_names(&v15, (uint64_t)a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_190DCE328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v16 - 17) < 0)
    operator delete(*(void **)(v16 - 40));
  _Unwind_Resume(a1);
}

uint64_t is_kernel_available_on_engine(uint64_t a1, _QWORD *a2, std::string::size_type a3, uint64_t *a4, uint64_t a5, int a6, uint64_t *a7, int64x2_t **a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::string *v17;
  _BOOL4 v18;
  int64x2_t *v19;
  uint64_t v20;
  int64x2_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type size;
  int v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  __int128 v46;
  const std::string::value_type *v47;
  std::string *v48;
  int64x2_t *v49;
  unint64_t v50;
  __int128 v51;
  Espresso *v52;
  const char *v53;
  Espresso *v54;
  const char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  std::string *p_p;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  std::string __p;
  __int128 *v98;
  __int128 *v99;
  __int128 *v100;
  __int128 *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  char v105;
  int64x2_t *v106;
  std::__shared_weak_count *v107;
  std::string v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111[6];
  __int128 v112;
  int v113;
  uint64_t v114;
  std::string buf;
  std::string::size_type v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  std::string *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v112 = 0u;
  memset(v111, 0, sizeof(v111));
  v113 = a6;
  v114 = a1;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v112, *a7, a7[1]);
  if (v111 != (uint64_t *)(a3 + 184))
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v111, *(__int128 **)(a3 + 184), *(__int128 **)(a3 + 192), (uint64_t)(*(_QWORD *)(a3 + 192) - *(_QWORD *)(a3 + 184)) >> 6);
  if (&v111[3] != (uint64_t *)(a3 + 160))
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v111[3], *(__int128 **)(a3 + 160), *(__int128 **)(a3 + 168), (uint64_t)(*(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160)) >> 6);
  v14 = *a7;
  v109 = 0;
  v110 = 0;
  v15 = *(std::__shared_weak_count **)(v14 + 80);
  if (v15 && (v110 = std::__shared_weak_count::lock(v15)) != 0)
  {
    v16 = *(_QWORD *)(v14 + 72);
    v109 = v16;
  }
  else
  {
    v16 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dispatch_check_weight_keys");
  std::string::basic_string[abi:ne180100]<0>(&buf, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v16 + 472, (uint64_t)&__p, (uint64_t)&buf, &v108);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v108.__r_.__value_.__l.__size_ != 1)
      goto LABEL_20;
    v17 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_20;
    v17 = &v108;
  }
  if (v17->__r_.__value_.__s.__data_[0] == 49)
  {
    v18 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v18 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a5 + 8))(*(_QWORD *)(*(_QWORD *)a5 + 8)) == 50002;
LABEL_21:
  v19 = *a8;
  if (*a2)
  {
    v94 = a5;
    if (v19)
      v20 = 0x6DB6DB6DB6DB6DB7 * ((v19->i64[1] - v19->i64[0]) >> 4);
    else
      v20 = 0;
    v24 = *a4;
    std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
    v25 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 24))(v24, &__p);
    v26 = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v26)
        goto LABEL_33;
    }
    else if (v25)
    {
LABEL_33:
      v27 = *a4;
      std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v27 + 120))(&buf, v27, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      memset(&__p, 0, sizeof(__p));
      (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)buf.__r_.__value_.__l.__data_ + 32))(buf.__r_.__value_.__r.__words[0], &__p);
      if (!v18
        || (size = __p.__r_.__value_.__l.__size_,
            v28 = __p.__r_.__value_.__r.__words[0],
            __p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_))
      {
        v30 = 1;
      }
      else
      {
        LOBYTE(v30) = 1;
        do
        {
          v31 = (*(uint64_t (**)(_QWORD, std::string::size_type))(*(_QWORD *)*a2 + 208))(*a2, v28);
          if ((_BYTE)v30)
            v30 = v31;
          else
            v30 = 0;
          v28 += 24;
        }
        while (v28 != size);
      }
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      v34 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      v33 = v94;
      if (buf.__r_.__value_.__l.__size_)
      {
        v35 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v32 = v30 != 0;
LABEL_52:
      v37 = *a2;
      v38 = (std::__shared_weak_count *)a8[1];
      v106 = *a8;
      v107 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
      }
      v41 = v32 & (*(unsigned int (**)(uint64_t, int64x2_t **, uint64_t *))(*(_QWORD *)v37 + 200))(v37, &v106, v111);
      v42 = v107;
      if (!v107)
        goto LABEL_59;
      v43 = (unint64_t *)&v107->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if ((v41 & 1) != 0)
          goto LABEL_102;
      }
      else
      {
LABEL_59:
        if ((v41 & 1) != 0)
          goto LABEL_102;
      }
      if (*a8 && 0x6DB6DB6DB6DB6DB7 * (((*a8)->i64[1] - (*a8)->i64[0]) >> 4) == v20)
      {
        std::operator+<char>();
        v45 = std::string::append(&v95, " for ");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = (const std::string::value_type *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v33 + 8)
                                                                                 + 16))(*(_QWORD *)(*(_QWORD *)v33 + 8));
        v48 = std::string::append(&v96, v47);
        buf = *v48;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&buf, (uint64_t)v111, 0);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        v49 = *a8;
        v50 = v49->u64[1];
        if (v50 >= v49[1].i64[0])
        {
          v54 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(v49, (const Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          v33 = v94;
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v49->i64[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v51 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v50 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v50 = v51;
          }
          *(_QWORD *)(v50 + 24) = 0;
          *(_QWORD *)(v50 + 32) = 0;
          *(_QWORD *)(v50 + 40) = 0;
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((_QWORD *)(v50 + 24), v98, v99, ((char *)v99 - (char *)v98) >> 6);
          *(_QWORD *)(v50 + 48) = 0;
          *(_QWORD *)(v50 + 56) = 0;
          *(_QWORD *)(v50 + 64) = 0;
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((_QWORD *)(v50 + 48), v100, v101, ((char *)v101 - (char *)v100) >> 6);
          *(_QWORD *)(v50 + 72) = v102;
          v63 = v103;
          *(_QWORD *)(v50 + 80) = v103;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          *(_OWORD *)(v50 + 88) = v104;
          *(_BYTE *)(v50 + 104) = v105;
          v54 = (Espresso *)(v50 + 112);
          v49->i64[1] = v50 + 112;
          v33 = v94;
        }
        v49->i64[1] = (uint64_t)v54;
        Espresso::espresso_os_log_subsystem(v54, v55);
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
        {
          v91 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v33 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v33 + 8));
          if (*(char *)(a3 + 23) >= 0)
            v92 = a3;
          else
            v92 = *(_QWORD *)a3;
          if (*(char *)(a3 + 71) >= 0)
            v93 = a3 + 48;
          else
            v93 = *(_QWORD *)(a3 + 48);
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v91;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v92;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v116 = v93;
          v117 = 2048;
          v118 = v114;
          _os_log_debug_impl(&dword_190DAF000, v66, OS_LOG_TYPE_DEBUG, "Kernel validation warning (Engine: %s) %s (%s) @ %zu", (uint8_t *)&buf, 0x2Au);
        }

        v67 = v103;
        if (v103)
        {
          v68 = (unint64_t *)&v103->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_102:
      v70 = v109;
      Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&__p, v109);
      if (!__p.__r_.__value_.__r.__words[0]
        || !*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 32)
        || ((v71 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v33 + 8))(*(_QWORD *)(*(_QWORD *)v33 + 8)),
             v71 != 10008)
          ? (v72 = v71 == 10011)
          : (v72 = 1),
            !v72 && v71 >> 1 != 5003))
      {
LABEL_126:
        v77 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        goto LABEL_131;
      }
      if (!std::string::compare((const std::string *)(a3 + 48), "cast"))
      {
        if (*(_BYTE *)(a3 + 104))
          goto LABEL_126;
        v73 = *(_QWORD **)(a3 + 136);
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*a7 + 32), v73))goto LABEL_126;
      }
      else
      {
        v73 = *(_QWORD **)(a3 + 136);
      }
      v74 = *(_QWORD **)(a3 + 144);
      if (v73 != v74)
      {
        while (1)
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
          if (!*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v70 + 352), v73, (uint64_t)&std::piecewise_construct, (__int128 **)&buf)+ 16))break;
          v73 += 3;
          if (v73 == v74)
            goto LABEL_121;
        }
        v41 = 0;
      }
LABEL_121:
      v75 = *(_QWORD **)(a3 + 112);
      v76 = *(_QWORD **)(a3 + 120);
      if (v75 != v76)
      {
        while (1)
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
          if (!*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v70 + 352), v75, (uint64_t)&std::piecewise_construct, (__int128 **)&buf)+ 16))break;
          v75 += 3;
          if (v75 == v76)
            goto LABEL_126;
        }
        v41 = 0;
      }
      goto LABEL_126;
    }
    v32 = 1;
    v33 = v94;
    goto LABEL_52;
  }
  if (v19)
  {
    std::operator+<char>();
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&buf, (uint64_t)v111, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v21 = *a8;
    v22 = (*a8)->u64[1];
    if (v22 >= v21[1].i64[0])
    {
      v52 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(v21, (const Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v22 = v23;
      }
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((_QWORD *)(v22 + 24), v98, v99, ((char *)v99 - (char *)v98) >> 6);
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((_QWORD *)(v22 + 48), v100, v101, ((char *)v101 - (char *)v100) >> 6);
      *(_QWORD *)(v22 + 72) = v102;
      v56 = v103;
      *(_QWORD *)(v22 + 80) = v103;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      *(_OWORD *)(v22 + 88) = v104;
      *(_BYTE *)(v22 + 104) = v105;
      v52 = (Espresso *)(v22 + 112);
      v21->i64[1] = v22 + 112;
    }
    v21->i64[1] = (uint64_t)v52;
    Espresso::espresso_os_log_subsystem(v52, v53);
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a5 + 8) + 16))(*(_QWORD *)(*(_QWORD *)a5 + 8));
      if (*(char *)(a3 + 23) >= 0)
        v88 = a3;
      else
        v88 = *(_QWORD *)a3;
      if (*(char *)(a3 + 71) >= 0)
        v89 = a3 + 48;
      else
        v89 = *(_QWORD *)(a3 + 48);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v88;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v116 = v89;
      v117 = 2048;
      v118 = *((_QWORD *)&v104 + 1);
      v119 = 2080;
      v120 = p_p;
      _os_log_debug_impl(&dword_190DAF000, v59, OS_LOG_TYPE_DEBUG, "Kernel validation warning (Engine: %s) %s (%s) @ %zu: %s", (uint8_t *)&buf, 0x34u);
    }

    v60 = v103;
    if (v103)
    {
      v61 = (unint64_t *)&v103->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v41 = 0;
LABEL_131:
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  v80 = v110;
  if (v110)
  {
    v81 = (unint64_t *)&v110->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111[3];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v41;
}

void sub_190DCEE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,void *a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&a22);
  if (a46 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a49);
  _Unwind_Resume(a1);
}

void Espresso::kernel_info_t::~kernel_info_t(void **this)
{
  void **v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  v2 = this + 23;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 20;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void Espresso::split_list_of_names(const std::string *a1, uint64_t a2)
{
  std::string::size_type size;
  int v5;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::string::size_type v25;
  int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  const std::string *v29;
  unsigned int v30;
  int v31;
  std::string::size_type v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  std::string *v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  std::string __p;
  std::__split_buffer<std::string> __v;

  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v5 = (char)size;
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (size)
  {
    v6 = 0;
    if (v5 >= 0)
      v7 = (std::string::size_type)a1;
    else
      v7 = a1->__r_.__value_.__r.__words[0];
    v8 = MEMORY[0x1E0C80978];
LABEL_8:
    v9 = (void *)(v7 + v6);
    v10 = (_BYTE *)(v7 + size);
    while (v10 - (_BYTE *)v9 >= 1)
    {
      v11 = memchr(v9, 44, v10 - (_BYTE *)v9);
      if (!v11)
        break;
      if (*v11 == 44)
      {
        if (v11 != v10)
        {
          v12 = &v11[-v7];
          if (v12 != (_BYTE *)-1)
          {
            std::string::basic_string(&__p, a1, v6, (std::string::size_type)&v12[-v6], (std::allocator<char> *)&__v);
            v14 = *(_QWORD *)(a2 + 8);
            v13 = *(_QWORD *)(a2 + 16);
            if (v14 >= v13)
            {
              v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a2) >> 3);
              v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x555555555555555)
                v19 = 0xAAAAAAAAAAAAAAALL;
              else
                v19 = v17;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
              if (v19)
                v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v19);
              else
                v20 = 0;
              v21 = (std::string *)(v19 + 24 * v16);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v19;
              __v.__begin_ = v21;
              __v.__end_cap_.__value_ = (std::string *)(v19 + 24 * v20);
              v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              v21->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              memset(&__p, 0, sizeof(__p));
              __v.__end_ = v21 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
              v23 = *(_QWORD *)(a2 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(a2 + 8) = v23;
              if (v24 < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v14 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v14 = v15;
              *(_QWORD *)(a2 + 8) = v14 + 24;
            }
            v25 = (std::string::size_type)(v12 + 1);
            while (1)
            {
              v6 = v25;
              size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
              v26 = (char)size;
              v27 = a1->__r_.__value_.__l.__size_;
              v28 = (size & 0x80u) == 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
              if (v6 >= v28)
                break;
              v29 = (const std::string *)a1->__r_.__value_.__r.__words[0];
              if (v26 >= 0)
                v29 = a1;
              v30 = v29->__r_.__value_.__s.__data_[v6];
              if ((v30 & 0x80000000) != 0)
                v31 = __maskrune(v30, 0x4000uLL);
              else
                v31 = *(_DWORD *)(v8 + 4 * v30 + 60) & 0x4000;
              v25 = v6 + 1;
              if (!v31)
              {
                v32 = v6 - 1;
                size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
                v27 = a1->__r_.__value_.__l.__size_;
                LOBYTE(v26) = *((_BYTE *)&a1->__r_.__value_.__s + 23);
                goto LABEL_41;
              }
            }
            v32 = v6 - 1;
LABEL_41:
            if ((v26 & 0x80u) == 0)
              v7 = (std::string::size_type)a1;
            else
              v7 = a1->__r_.__value_.__r.__words[0];
            if ((v26 & 0x80u) != 0)
              size = v27;
            if (size > v32)
              goto LABEL_8;
          }
        }
        break;
      }
      v9 = v11 + 1;
    }
    if (v6 != -1)
    {
      std::string::basic_string(&__p, a1, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
      v34 = *(_QWORD *)(a2 + 8);
      v33 = *(_QWORD *)(a2 + 16);
      if (v34 >= v33)
      {
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a2) >> 3);
        v37 = v36 + 1;
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *(_QWORD *)a2) >> 3);
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x555555555555555)
          v39 = 0xAAAAAAAAAAAAAAALL;
        else
          v39 = v37;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v39)
          v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v39);
        else
          v40 = 0;
        v41 = (std::string *)(v39 + 24 * v36);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v39;
        __v.__begin_ = v41;
        __v.__end_cap_.__value_ = (std::string *)(v39 + 24 * v40);
        v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v41 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v43 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a2 + 8) = v43;
        if (v44 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v34 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v34 = v35;
        *(_QWORD *)(a2 + 8) = v34 + 24;
      }
    }
  }
}

void sub_190DCF490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<Espresso::layer_shape>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void Espresso::SerDes::serdes_object_json_objc::get_keys(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  std::string::size_type v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__split_buffer<std::string> __v;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = *(id *)(a1 + 24);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v3);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i)), "UTF8String"));
        v8 = *(_QWORD *)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 16);
        if (v8 >= v7)
        {
          v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
          v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
          if (2 * v12 > v11)
            v11 = 2 * v12;
          if (v12 >= 0x555555555555555)
            v13 = 0xAAAAAAAAAAAAAAALL;
          else
            v13 = v11;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v13)
            v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
          else
            v14 = 0;
          v15 = (std::string *)(v13 + 24 * v10);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
          v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          v20 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v17 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v18 = SHIBYTE(v20);
          *(_QWORD *)(a2 + 8) = v17;
          if (v18 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v20;
          *(_OWORD *)v8 = v9;
          *(_QWORD *)(a2 + 8) = v8 + 24;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }

}

void sub_190DCF7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v4 = v3;
  v5 = (const void *)v3[3];
  v6 = (std::__shared_weak_count *)v4[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5
  {
    *a1 = v9;
    a1[1] = v6;
    if (!v6)
      return;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6)
      return;
  }
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v3 = v2;
  if (v2 < 0)
  {
    v4 = (unsigned __int8 *)(v2 & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v3 >= *(_QWORD *)&v7)
      v10 = v3 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v3;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v3 == v13)
      {
        if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(v12[2] + 8), v2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
        }
        else
        {
          v13 &= *(_QWORD *)&v7 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  const Espresso::base_kernel::validate_for_engine_args_t *v11;
  void *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  std::__shared_weak_count *v34;
  std::string::size_type v35;
  void *v36;
  int64x2_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t is_valid_for_engine_conv;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *size;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  BOOL v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  BOOL v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int64x2_t *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int64x2_t *v97;
  int64x2_t *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  uint64_t **v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD v107[2];
  int64x2_t *v108;
  int64x2_t *v109;
  int64x2_t *v110[2];
  std::string v111[2];
  std::string v112;
  int64x2_t *v113[2];
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  void **v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  int64x2_t *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  void *__p[2];
  __int128 v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  Espresso::net *v134[2];
  _DWORD v135[8];
  uint64_t v136;
  uint64_t v137;
  int32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  int32x4_t v141;
  uint64_t v142;
  std::string v143;
  _BYTE v144[24];
  _BYTE v145[32];
  std::__shared_weak_count *v146;
  const Espresso::base_kernel::validate_for_engine_args_t *v147;
  std::__shared_weak_count *v148;

  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 128)
    goto LABEL_54;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v108 = *(int64x2_t **)a2;
  v109 = (int64x2_t *)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (_OWORD *)*((_QWORD *)a3 + 6);
  v147 = 0;
  v148 = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 10);
  if (v10 && (v148 = std::__shared_weak_count::lock(v10)) != 0)
  {
    v11 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v9 + 9);
    v147 = v11;
  }
  else
  {
    v11 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v11 + 472);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(char **)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 128)
  {
    v124 = v108;
    *(_QWORD *)&v125 = v109;
    if (v109)
    {
      v22 = &v109->u64[1];
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution requires two inputs.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v24 = v146;
    if (v146)
    {
      v25 = (unint64_t *)&v146->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v117 = (void **)v145;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    v117 = (void **)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)v125;
    if (!(_QWORD)v125)
      goto LABEL_45;
    v27 = (unint64_t *)(v125 + 8);
    do
      v21 = __ldaxr(v27);
    while (__stlxr(v21 - 1, v27));
LABEL_42:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_44:
    LOBYTE(v19) = 0;
    goto LABEL_45;
  }
  if (*(int *)(a1 + 420) >= 2)
  {
    v124 = v108;
    *(_QWORD *)&v125 = v109;
    if (v109)
    {
      v14 = &v109->u64[1];
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic weights not supported for group/depthwise convolutions");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v16 = v146;
    if (v146)
    {
      v17 = (unint64_t *)&v146->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v117 = (void **)v145;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    v117 = (void **)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)v125;
    if ((_QWORD)v125)
    {
      v20 = (unint64_t *)(v125 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  v50 = *((_DWORD *)v13 + 19);
  if (v50 >= 2)
  {
    v124 = v108;
    *(_QWORD *)&v125 = v109;
    if (v109)
    {
      v51 = &v109->u64[1];
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ANEC only supports the 1x(C*K)xHxW layout");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v53 = v146;
    if (v146)
    {
      v54 = (unint64_t *)&v146->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v117 = (void **)v145;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    v117 = (void **)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)v125;
    if (!(_QWORD)v125)
      goto LABEL_45;
    v56 = (unint64_t *)(v125 + 8);
    do
      v21 = __ldaxr(v56);
    while (__stlxr(v21 - 1, v56));
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 336))
  {
    v124 = v108;
    *(_QWORD *)&v125 = v109;
    if (v109)
    {
      v58 = &v109->u64[1];
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic weights are not supported with biases.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v60 = v146;
    if (v146)
    {
      v61 = (unint64_t *)&v146->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v117 = (void **)v145;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    v117 = (void **)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)v125;
    if (!(_QWORD)v125)
      goto LABEL_45;
    v63 = (unint64_t *)(v125 + 8);
    do
      v21 = __ldaxr(v63);
    while (__stlxr(v21 - 1, v63));
    goto LABEL_42;
  }
  v64 = v50 == 1 && *((_DWORD *)v13 + 20) == 1;
  if (v64
    && *(_DWORD *)(a1 + 352) == *((_DWORD *)v13 + 16)
    && *(_DWORD *)(a1 + 356) == *((_DWORD *)v13 + 17)
    && *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 348) == *((_DWORD *)v13 + 18))
  {
    if (*(_DWORD *)(a1 + 364) == -1)
    {
      if (*(_WORD *)(a1 + 396) == 1 && *(_WORD *)(a1 + 398) == 1)
      {
        v73 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v147, (const Espresso::net *)1);
        if (v73 < 5 && ((0x17u >> v73) & 1) != 0)
        {
          v78 = *(_DWORD *)(a1 + 348) * dword_191A9885C[v73] * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
          v80 = v78 - 1;
          v79 = v78 < 1;
          v81 = v78 + 30;
          if (v78 >= 1)
            v81 = v78 - 1;
          v82 = v81 & 0xFFFFFFE0;
          v83 = v78 + 62;
          if (!v79)
            v83 = v80;
          if (v82 == (v83 & 0xFFFFFFC0 | 0x20))
          {
            v84 = v73;
            ANECPaddingInitialize();
            v141 = vmovl_s16(*(int16x4_t *)(a1 + 384));
            ANECCrossCorrelationLayerDescInitialize();
            v138 = v141;
            v139 = v142;
            v85 = *(int *)(a1 + 420);
            v136 = *(int *)(a1 + 344);
            v137 = v85;
            v140 = *(_QWORD *)(a1 + 352);
            v86 = (int64x2_t *)*((_QWORD *)&off_1E2DD2068 + v84);
            v134[0] = v147;
            v134[1] = (Espresso::net *)v148;
            if (v148)
            {
              v87 = (unint64_t *)&v148->__shared_owners_;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            v89 = *(char **)a3;
            v90 = *(_QWORD *)(*(_QWORD *)a3 + 32);
            v91 = *(_OWORD *)(*(_QWORD *)a3 + 16);
            *(_OWORD *)__p = *(_OWORD *)*(_QWORD *)a3;
            v129 = v91;
            v130 = v90;
            v131 = 0;
            v132 = 0;
            v133 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v131, *((const void **)v89 + 5), *((_QWORD *)v89 + 6), (uint64_t)(*((_QWORD *)v89 + 6) - *((_QWORD *)v89 + 5)) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v135, v134[0], (const Espresso::layer_shape *)__p, 1);
            if (v131)
            {
              v132 = v131;
              operator delete(v131);
            }
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v134);
            ANECTensorDescInitialize();
            *(_QWORD *)&v92 = v135[3];
            *((_QWORD *)&v92 + 1) = v135[4];
            v93 = v92;
            v124 = v86;
            v127 = v135[2];
            *(_QWORD *)&v92 = v135[0];
            *((_QWORD *)&v92 + 1) = v135[1];
            v125 = v92;
            v126 = v93;
            ANECTensorDimsInitialize();
            v94 = *(int *)(a1 + 344);
            *(_QWORD *)&v121 = 1;
            *((_QWORD *)&v121 + 1) = v94;
            v95 = *(int *)(a1 + 356) * (uint64_t)*(int *)(a1 + 352) * *(int *)(a1 + 348);
            *(_QWORD *)&v122 = 1;
            *((_QWORD *)&v122 + 1) = v95;
            v123 = 1;
            ANECTensorDescInitialize();
            v118 = v121;
            v119 = v122;
            v120 = 1;
            v115 = 0;
            v116 = 0;
            Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v114, (NSString *)(a1 + 560), v12);
            v96 = ANECValidateCrossCorrelationLayer();
            LOBYTE(v19) = v96 == 0;
            if (v96)
            {
              v97 = v108;
              v98 = v109;
              v113[0] = v108;
              v113[1] = v109;
              if (v109)
              {
                v99 = &v109->u64[1];
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
              }
              std::to_string(&v112, v96);
              v101 = std::string::insert(&v112, 0, "convolution_kernel: ANECValidateCrossCorrelationLayer failed with status ");
              v111[0] = *v101;
              v101->__r_.__value_.__l.__size_ = 0;
              v101->__r_.__value_.__r.__words[2] = 0;
              v101->__r_.__value_.__r.__words[0] = 0;
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)v111, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v113, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v143.__r_.__value_.__l.__data_);
              if (SHIBYTE(v111[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v113);
              Espresso::ANECompilerEngine::violations_from_alternates<ANECCrossCorrelationLayerDescAlternate>((uint64_t)v111, v115, v116);
              v102 = (uint64_t **)v111[0].__r_.__value_.__r.__words[2];
              if (v111[0].__r_.__value_.__r.__words[2])
              {
                v103 = &v98->u64[1];
                do
                {
                  v110[0] = v97;
                  v110[1] = v98;
                  if (v98)
                  {
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v112, (char *)objc_msgSend(objc_retainAutorelease(v102[2]), "UTF8String"));
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)&v112, (uint64_t)a3, 0);
                  Espresso::emit_kernel_validation_warning(v110, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
                  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v143.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v112.__r_.__value_.__l.__data_);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v110);
                  v102 = (uint64_t **)*v102;
                }
                while (v102);
              }
              std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v111);
            }
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v114);
            goto LABEL_45;
          }
          v124 = v108;
          *(_QWORD *)&v125 = v109;
          if (v109)
          {
            v105 = &v109->u64[1];
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "Data size(K*H*W*data_byte_size)'s 32 and 64 alignment not same.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
        }
        else
        {
          v124 = v108;
          *(_QWORD *)&v125 = v109;
          if (v109)
          {
            v74 = &v109->u64[1];
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported compute_path selected.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
        }
      }
      else
      {
        v124 = v108;
        *(_QWORD *)&v125 = v109;
        if (v109)
        {
          v76 = &v109->u64[1];
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution does not support stride > 1.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
      }
    }
    else
    {
      v124 = v108;
      *(_QWORD *)&v125 = v109;
      if (v109)
      {
        v65 = &v109->u64[1];
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution does not support fused activations.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v143.__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(__p[0]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
    goto LABEL_44;
  }
  v124 = v108;
  *(_QWORD *)&v125 = v109;
  if (v109)
  {
    v67 = &v109->u64[1];
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution shape mismatch for kernel paramters and dynamic weights.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
  v69 = v146;
  if (v146)
  {
    v70 = (unint64_t *)&v146->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v117 = (void **)v145;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
  v117 = (void **)v144;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SBYTE7(v129) < 0)
    operator delete(__p[0]);
  v19 = (std::__shared_weak_count *)v125;
  if ((_QWORD)v125)
  {
    v72 = (unint64_t *)(v125 + 8);
    do
      v21 = __ldaxr(v72);
    while (__stlxr(v21 - 1, v72));
    goto LABEL_42;
  }
LABEL_45:

  v28 = v148;
  if (!v148)
    goto LABEL_49;
  v29 = (unint64_t *)&v148->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v6)
      goto LABEL_53;
  }
  else
  {
LABEL_49:
    if (!v6)
      goto LABEL_53;
  }
  v31 = (unint64_t *)&v6->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_53:
    if ((v19 & 1) != 0)
      goto LABEL_54;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if ((v19 & 1) == 0)
    return 0;
LABEL_54:
  v33 = (_OWORD *)*((_QWORD *)a3 + 6);
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
  v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 10);
  if (v34 && (v143.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v34)) != 0)
  {
    v35 = *((_QWORD *)v33 + 9);
    v143.__r_.__value_.__r.__words[0] = v35;
  }
  else
  {
    v35 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v35 + 472);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)__p, (NSString *)(a1 + 560), v36);
  v37 = *(int64x2_t **)a2;
  v38 = *(std::__shared_weak_count **)(a2 + 8);
  v107[0] = v37;
  v107[1] = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  is_valid_for_engine_conv = Espresso::ANECompilerEngine::is_valid_for_engine_conv((uint64_t)__p, (uint64_t *)(a1 + 472), a1 + 304, a3, (uint64_t)v107, 0);
  if (v38)
  {
    v42 = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v44 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v45 = (unint64_t *)((char *)__p[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  size = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
  if (v143.__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return is_valid_for_engine_conv;
}

void sub_190DD0694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::get_ane_validator(Espresso::ANECompilerEngine::ane_kernel *this, NSString *a2, void *a3)
{
  unint64_t i;
  NSString *v6;
  NSString v7;
  char *v8;
  char *v9;
  NSString *v10;
  NSString *v11;
  unint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *j;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  std::string *v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  std::mutex *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::mutex *v63;
  NSString *v64;
  std::string v65;
  __int128 v66;
  std::string __p;
  _QWORD v68[2];
  char v69;

  v6 = a3;
  v7 = a2[24];
  v64 = v6;
  if (!v7
  {
    Espresso::ANECompilerEngine::engine::make_validator_for_arch(this, v6);
    goto LABEL_112;
  }
  v9 = v8;
  v10 = v64;
  std::mutex::lock((std::mutex *)(v9 + 24));
  v63 = (std::mutex *)(v9 + 24);
  v11 = objc_retainAutorelease(v10);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)-[NSString UTF8String](v11, "UTF8String"));
  v12 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__p);
  v13 = *(int8x8_t *)(v9 + 96);
  if (v13)
  {
    v14 = v12;
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v17 = v12;
      if (v12 >= *(_QWORD *)&v13)
        v17 = v12 % *(_QWORD *)&v13;
    }
    else
    {
      v17 = (*(_QWORD *)&v13 - 1) & v12;
    }
    v18 = *(unint64_t **)(*((_QWORD *)v9 + 11) + 8 * v17);
    if (v18)
    {
      for (i = *v18; i; i = *(_QWORD *)i)
      {
        v19 = *(_QWORD *)(i + 8);
        if (v19 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(i + 16), (unsigned __int8 *)&__p))
          {
            *(_QWORD *)this = *(_QWORD *)(i + 40);
            v59 = *(_QWORD *)(i + 48);
            *((_QWORD *)this + 1) = v59;
            v56 = (std::mutex *)(v9 + 24);
            if (v59)
            {
              v60 = (unint64_t *)(v59 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            goto LABEL_109;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= *(_QWORD *)&v13)
              v19 %= *(_QWORD *)&v13;
          }
          else
          {
            v19 &= *(_QWORD *)&v13 - 1;
          }
          if (v19 != v17)
            break;
        }
      }
    }
  }
  Espresso::ANECompilerEngine::engine::make_validator_for_arch(this, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v65 = __p;
  v20 = *((_QWORD *)this + 1);
  *(_QWORD *)&v66 = *(_QWORD *)this;
  *((_QWORD *)&v66 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v65);
  v24 = v23;
  v25 = *((_QWORD *)v9 + 12);
  if (v25)
  {
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      i = v23;
      if (v23 >= v25)
        i = v23 % v25;
    }
    else
    {
      i = (v25 - 1) & v23;
    }
    v28 = *(unsigned __int8 ***)(*((_QWORD *)v9 + 11) + 8 * i);
    if (v28)
    {
      for (j = *v28; j; j = *(unsigned __int8 **)j)
      {
        v30 = *((_QWORD *)j + 1);
        if (v30 == v24)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)&v65))
            goto LABEL_102;
        }
        else
        {
          if (v27 > 1)
          {
            if (v30 >= v25)
              v30 %= v25;
          }
          else
          {
            v30 &= v25 - 1;
          }
          if (v30 != i)
            break;
        }
      }
    }
  }
  v31 = (char *)operator new(0x38uLL);
  v32 = v9 + 104;
  v68[0] = v31;
  v68[1] = v9 + 104;
  v69 = 0;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = v24;
  v33 = (std::string *)(v31 + 16);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v33, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    *((_QWORD *)v31 + 4) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
  }
  *(_OWORD *)(v31 + 40) = v66;
  v66 = 0uLL;
  v69 = 1;
  v34 = (float)(unint64_t)(*((_QWORD *)v9 + 14) + 1);
  v35 = *((float *)v9 + 30);
  if (!v25 || (float)(v35 * (float)v25) < v34)
  {
    v36 = 1;
    if (v25 >= 3)
      v36 = (v25 & (v25 - 1)) != 0;
    v37 = v36 | (2 * v25);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = (int8x8_t)v38;
    else
      prime = (int8x8_t)v37;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v25 = *((_QWORD *)v9 + 12);
    if (*(_QWORD *)&prime > v25)
      goto LABEL_58;
    if (*(_QWORD *)&prime < v25)
    {
      v46 = vcvtps_u32_f32((float)*((unint64_t *)v9 + 14) / *((float *)v9 + 30));
      if (v25 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (*(_QWORD *)&prime <= v46)
        prime = (int8x8_t)v46;
      if (*(_QWORD *)&prime >= v25)
      {
        v25 = *((_QWORD *)v9 + 12);
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = operator new(8 * *(_QWORD *)&prime);
          v41 = (void *)*((_QWORD *)v9 + 11);
          *((_QWORD *)v9 + 11) = v40;
          if (v41)
            operator delete(v41);
          v42 = 0;
          *((int8x8_t *)v9 + 12) = prime;
          do
            *(_QWORD *)(*((_QWORD *)v9 + 11) + 8 * v42++) = 0;
          while (*(_QWORD *)&prime != v42);
          v43 = (_QWORD *)*v32;
          if (*v32)
          {
            v44 = v43[1];
            v45 = (uint8x8_t)vcnt_s8(prime);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              if (v44 >= *(_QWORD *)&prime)
                v44 %= *(_QWORD *)&prime;
            }
            else
            {
              v44 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)v9 + 11) + 8 * v44) = v32;
            v49 = (_QWORD *)*v43;
            if (*v43)
            {
              do
              {
                v50 = v49[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(_QWORD *)&prime)
                    v50 %= *(_QWORD *)&prime;
                }
                else
                {
                  v50 &= *(_QWORD *)&prime - 1;
                }
                if (v50 != v44)
                {
                  v51 = *((_QWORD *)v9 + 11);
                  if (!*(_QWORD *)(v51 + 8 * v50))
                  {
                    *(_QWORD *)(v51 + 8 * v50) = v43;
                    goto LABEL_83;
                  }
                  *v43 = *v49;
                  *v49 = **(_QWORD **)(*((_QWORD *)v9 + 11) + 8 * v50);
                  **(_QWORD **)(*((_QWORD *)v9 + 11) + 8 * v50) = v49;
                  v49 = v43;
                }
                v50 = v44;
LABEL_83:
                v43 = v49;
                v49 = (_QWORD *)*v49;
                v44 = v50;
              }
              while (v49);
            }
          }
          v25 = (unint64_t)prime;
          goto LABEL_87;
        }
        v62 = (void *)*((_QWORD *)v9 + 11);
        *((_QWORD *)v9 + 11) = 0;
        if (v62)
          operator delete(v62);
        v25 = 0;
        *((_QWORD *)v9 + 12) = 0;
      }
    }
LABEL_87:
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25)
        i = v24 % v25;
      else
        i = v24;
    }
    else
    {
      i = (v25 - 1) & v24;
    }
  }
  v52 = *(_QWORD **)(*((_QWORD *)v9 + 11) + 8 * i);
  v53 = v68[0];
  if (v52)
  {
    *(_QWORD *)v68[0] = *v52;
LABEL_100:
    *v52 = v53;
    goto LABEL_101;
  }
  *(_QWORD *)v68[0] = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = v53;
  *(_QWORD *)(*((_QWORD *)v9 + 11) + 8 * i) = v32;
  if (*(_QWORD *)v53)
  {
    v54 = *(_QWORD *)(*(_QWORD *)v53 + 8);
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v54 >= v25)
        v54 %= v25;
    }
    else
    {
      v54 &= v25 - 1;
    }
    v52 = (_QWORD *)(*((_QWORD *)v9 + 11) + 8 * v54);
    goto LABEL_100;
  }
LABEL_101:
  v68[0] = 0;
  ++*((_QWORD *)v9 + 14);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v68);
LABEL_102:
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  v56 = v63;
  if (*((_QWORD *)&v66 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
LABEL_109:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(v56);

LABEL_112:
}

void sub_190DD0EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a23);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  if (a22 < 0)
    operator delete(__p);
  std::mutex::unlock(a9);

  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::is_valid_for_engine()
{
  return 1;
}

std::string *Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(std::string *this, __int128 *a2, uint64_t a3, std::string::value_type a4)
{
  __int128 v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[1].__r_.__value_.__r.__words, *(__int128 **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[2].__r_.__value_.__r.__words, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
  v8 = *(_QWORD *)(a3 + 56);
  this[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 48);
  this[3].__r_.__value_.__l.__size_ = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)(a3 + 64);
  this[4].__r_.__value_.__s.__data_[8] = a4;
  return this;
}

void sub_190DD1024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::mix_activation_kernel::is_valid_for_engine(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const Espresso::net *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  Espresso::ANECompilerEngine *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD v60[2];
  int64x2_t *v61;
  std::__shared_weak_count *v62;
  char v63;
  void *v64[2];
  char v65;
  _OWORD v66[2];
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  const Espresso::net *v71;
  std::__shared_weak_count *v72;
  void **v73[4];
  _OWORD v74[2];
  uint64_t v75;
  void *__p;
  void *v77;
  uint64_t v78;
  const Espresso::net *v79;
  std::__shared_weak_count *v80;
  void *v81[2];
  char v82;
  std::string v83;
  _BYTE v84[24];
  _BYTE v85[32];
  std::__shared_weak_count *v86;
  int64x2_t *v87;
  std::__shared_weak_count *v88;
  _QWORD v89[2];
  const Espresso::net *v90;
  std::__shared_weak_count *v91;
  void **v92;

  v6 = a3[6];
  v90 = 0;
  v91 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v91 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v90 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v89[0] = *a2;
    v89[1] = v11;
    *a2 = 0;
    a2[1] = 0;
    is_valid_for_engine = (std::__shared_weak_count *)Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(a1, (uint64_t)v89, (uint64_t)a3);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    goto LABEL_84;
  }
  if (a3[3] != a3[4])
  {
    v15 = *a3;
    if (*a3 != a3[1])
    {
      v17 = v90;
      v16 = v91;
      v79 = v90;
      v80 = v91;
      if (v91)
      {
        v18 = (unint64_t *)&v91->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v15 = *a3;
      }
      v20 = *(_OWORD *)(v15 + 16);
      v21 = *(_QWORD *)(v15 + 32);
      v74[0] = *(_OWORD *)v15;
      v74[1] = v20;
      v75 = v21;
      __p = 0;
      v77 = 0;
      v78 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v15 + 40), *(_QWORD *)(v15 + 48), (uint64_t)(*(_QWORD *)(v15 + 48) - *(_QWORD *)(v15 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v81, v17, (const Espresso::layer_shape *)v74, 1);
      if (__p)
      {
        v77 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        v22 = (unint64_t *)&v16->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v25 = v90;
      v24 = v91;
      v71 = v90;
      v72 = v91;
      if (v91)
      {
        v26 = (unint64_t *)&v91->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = a3[3];
      v29 = *(_QWORD *)(v28 + 32);
      v30 = *(_OWORD *)(v28 + 16);
      v66[0] = *(_OWORD *)v28;
      v66[1] = v30;
      v67 = v29;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, *(const void **)(v28 + 40), *(_QWORD *)(v28 + 48), (uint64_t)(*(_QWORD *)(v28 + 48) - *(_QWORD *)(v28 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v73, v25, (const Espresso::layer_shape *)v66, 1);
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      if (v24)
      {
        v31 = (unint64_t *)&v24->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v33 = v9;
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v81, v33))
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v73, v33))
        {
          v63 = 1;
          std::string::basic_string[abi:ne180100]<0>(v64, "Success");
        }
        else
        {
          v63 = 0;
          std::string::basic_string[abi:ne180100]<0>(v64, "Output blob dimensions exceed ANE limit.");
        }
      }
      else
      {
        v63 = 0;
        std::string::basic_string[abi:ne180100]<0>(v64, "Input blob dimensions exceed ANE limit.");
      }

      v42 = *a2;
      if (v63)
      {
        v43 = (std::__shared_weak_count *)a2[1];
        v60[0] = v42;
        v60[1] = v43;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        is_valid_for_engine = (std::__shared_weak_count *)Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(a1, (uint64_t)v60, (uint64_t)a3);
        if (!v43)
          goto LABEL_82;
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (v47)
          goto LABEL_82;
        goto LABEL_80;
      }
      v48 = (std::__shared_weak_count *)a2[1];
      v61 = (int64x2_t *)*a2;
      v62 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v83, (__int128 *)v64, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v83);
      v51 = v86;
      if (v86)
      {
        v52 = (unint64_t *)&v86->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v92 = (void **)v85;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
      v92 = (void **)v84;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      v43 = v62;
      if (v62)
      {
        v54 = (unint64_t *)&v62->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        is_valid_for_engine = 0;
        if (!v55)
        {
LABEL_80:
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      else
      {
        is_valid_for_engine = 0;
      }
LABEL_82:
      if (v65 < 0)
        operator delete(v64[0]);
      goto LABEL_84;
    }
  }
  v34 = (std::__shared_weak_count *)a2[1];
  v87 = (int64x2_t *)*a2;
  v88 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  std::string::basic_string[abi:ne180100]<0>(v81, "Detected zero top/bottom tensor");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v83, (__int128 *)v81, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v83);
  v37 = v86;
  if (v86)
  {
    v38 = (unint64_t *)&v86->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v73[0] = (void **)v85;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v73);
  v73[0] = (void **)v84;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v73);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (v82 < 0)
    operator delete(v81[0]);
  is_valid_for_engine = v88;
  if (v88)
  {
    v40 = (unint64_t *)&v88->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))is_valid_for_engine->__on_zero_shared)(is_valid_for_engine);
      std::__shared_weak_count::__release_weak(is_valid_for_engine);
    }
    is_valid_for_engine = 0;
  }
LABEL_84:

  v56 = v91;
  if (v91)
  {
    v57 = (unint64_t *)&v91->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return is_valid_for_engine;
}

void sub_190DD15D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  void *v51;
  uint64_t v52;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v52 - 88);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::stir_slice_kernel::is_valid_for_engine(uint64_t a1, _QWORD *a2, Espresso::ANECompilerEngine *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  Espresso::ANECompilerEngine *v11;
  int *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  void *v19;
  NSString *v20;
  _BOOL8 is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  const Espresso::net *v27;
  Espresso::base_kernel::validate_for_engine_args_t *v28;
  unsigned int v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  Espresso::base_kernel::validate_for_engine_args_t *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  const void *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  Espresso::base_kernel::validate_for_engine_args_t *v49;
  unint64_t *v50;
  unint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  int v58;
  Espresso::ANECompilerEngine *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  const Espresso::net *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 *v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *size;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  __CFString *v121;
  __CFString *v122;
  __int128 v123;
  const __CFString *v124;
  int v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  void **v130;
  std::string::size_type v131;
  std::string *v132;
  void *v133;
  char v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  int64x2_t *v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  void *v142;
  _BYTE v143[15];
  char v144;
  int64x2_t *v145;
  std::__shared_weak_count *v146;
  _OWORD v147[2];
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  Espresso::base_kernel::validate_for_engine_args_t *v152;
  std::__shared_weak_count *v153;
  std::string v154;
  _OWORD v155[2];
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  Espresso::base_kernel::validate_for_engine_args_t *v160;
  std::__shared_weak_count *v161;
  _OWORD v162[2];
  uint64_t v163;
  void *__p;
  void *v165;
  uint64_t v166;
  Espresso::base_kernel::validate_for_engine_args_t *v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  Espresso::base_kernel::validate_for_engine_args_t *v170;
  std::__shared_weak_count *v171;
  std::string *v172;
  __int128 v173;
  char v174;
  _DWORD v175[6];
  unsigned int v176;
  void *v177[2];
  unsigned __int8 v178;
  std::string v179;
  std::string v180;
  std::string v181;
  void **v182[5];
  _BYTE v183[40];
  void *v184;
  void *v185;
  uint64_t v186;
  _BYTE v187[40];
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  std::string v193;
  _QWORD v194[3];
  _BYTE v195[32];
  std::__shared_weak_count *v196;
  const __CFString *v197;
  const __CFString *v198;
  const __CFString *v199;
  const __CFString *v200;
  int v201;
  int v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  _QWORD v205[5];

  v205[2] = *MEMORY[0x1E0C80C00];
  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v170 = 0;
  v171 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v171 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v170 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v11 = v9;
  v12 = (int *)(a1 + 280);
  if (*(_DWORD *)(a1 + 296) != 1 || Espresso::ANECompilerEngine::is_mix_e(v9, v10))
  {
    v13 = a2[1];
    *(_QWORD *)&v169 = *a2;
    *((_QWORD *)&v169 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (_OWORD *)*((_QWORD *)a3 + 6);
    v141 = 0;
    v142 = 0;
    v17 = (std::__shared_weak_count *)*((_QWORD *)v16 + 10);
    if (v17 && (v142 = std::__shared_weak_count::lock(v17)) != 0)
    {
      v18 = *((_QWORD *)v16 + 9);
      v141 = v18;
    }
    else
    {
      v18 = 0;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(v18 + 472);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v19, v20))
    {
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v169;
      v169 = 0uLL;
      is_valid_for_engine = Espresso::ANECompilerEngine::slice_kernel::is_valid_for_engine(a1, (uint64_t)&v193, a3);
      if (v138)
      {
        p_shared_owners = (unint64_t *)&v138->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
LABEL_116:

      if (v142)
      {
        v86 = (unint64_t *)((char *)v142 + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          (*(void (**)(void *))(*(_QWORD *)v142 + 16))(v142);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v142);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      goto LABEL_159;
    }
    v24 = (_QWORD *)*((_QWORD *)a3 + 6);
    if (*(_QWORD *)(*v24 + 224 * *((_QWORD *)a3 + 9) + 144) - *(_QWORD *)(*v24 + 224 * *((_QWORD *)a3 + 9) + 136) != 24)
    {
      *(_OWORD *)v183 = v169;
      if (*((_QWORD *)&v169 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      std::string::basic_string[abi:ne180100]<0>(v187, "ANE slice kernel doesn't support more than 1 input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v193, (__int128 *)v187, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning((int64x2_t **)v183, (Espresso::base_kernel::validate_for_engine_warning_t *)&v193);
      v62 = v196;
      if (v196)
      {
        v63 = (unint64_t *)&v196->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v182[0] = (void **)v195;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v182);
      v182[0] = (void **)v194;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v182);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      if ((v187[23] & 0x80000000) != 0)
        operator delete(*(void **)v187);
      v65 = *(std::__shared_weak_count **)&v183[8];
      if (*(_QWORD *)&v183[8])
      {
        v66 = (unint64_t *)(*(_QWORD *)&v183[8] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      is_valid_for_engine = 0;
      goto LABEL_116;
    }
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = 0uLL;
    v25 = (std::__shared_weak_count *)v24[10];
    if (v25)
    {
      v26 = std::__shared_weak_count::lock(v25);
      v181.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
      if (v26)
      {
        v27 = (const Espresso::net *)v24[9];
        v181.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        goto LABEL_82;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
LABEL_82:
    v68 = *(_OWORD **)a3;
    v69 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    v70 = *(_OWORD *)(*(_QWORD *)a3 + 16);
    *(_OWORD *)v187 = *(_OWORD *)*(_QWORD *)a3;
    *(_OWORD *)&v187[16] = v70;
    *(_QWORD *)&v187[32] = v69;
    v188 = 0;
    v190 = 0;
    v189 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, *((const void **)v68 + 5), *((_QWORD *)v68 + 6), (uint64_t)(*((_QWORD *)v68 + 6) - *((_QWORD *)v68 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v182, v27, (const Espresso::layer_shape *)v187, 1);
    if (v188)
    {
      v189 = v188;
      operator delete(v188);
    }
    if (v26)
    {
      v71 = (unint64_t *)&v26->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v73 = (_OWORD *)*((_QWORD *)a3 + 6);
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = 0uLL;
    v74 = (std::__shared_weak_count *)*((_QWORD *)v73 + 10);
    if (v74)
    {
      v75 = std::__shared_weak_count::lock(v74);
      v180.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
      if (v75)
      {
        v76 = (const Espresso::net *)*((_QWORD *)v73 + 9);
        v180.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
LABEL_94:
        v77 = (_OWORD *)*((_QWORD *)a3 + 3);
        v78 = *((_QWORD *)v77 + 4);
        v79 = v77[1];
        *(_OWORD *)v183 = *v77;
        *(_OWORD *)&v183[16] = v79;
        *(_QWORD *)&v183[32] = v78;
        v184 = 0;
        v186 = 0;
        v185 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v184, *((const void **)v77 + 5), *((_QWORD *)v77 + 6), (uint64_t)(*((_QWORD *)v77 + 6) - *((_QWORD *)v77 + 5)) >> 2);
        Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v175, v76, (const Espresso::layer_shape *)v183, 1);
        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }
        if (v75)
        {
          v80 = (unint64_t *)&v75->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v82 = *(__int128 **)(**((_QWORD **)a3 + 6) + 224 * *((_QWORD *)a3 + 9) + 136);
        if (*((char *)v82 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v82, *((_QWORD *)v82 + 1));
        }
        else
        {
          v83 = *v82;
          v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v82 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v83;
        }
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v141 + 360), &v154))
        {
          v172 = &v154;
          v84 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v141 + 352), &v154, (uint64_t)&std::piecewise_construct, (__int128 **)&v172);
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = *(_OWORD *)(v84 + 56);
          v194[1] = 0;
          v193.__r_.__value_.__r.__words[2] = 0;
          v194[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v193.__r_.__value_.__r.__words[2], *((const void **)v84 + 9), *((_QWORD *)v84 + 10), (uint64_t)(*((_QWORD *)v84 + 10) - *((_QWORD *)v84 + 9)) >> 2);
          if (LODWORD(v193.__r_.__value_.__r.__words[1]) == -1)
            v85 = 1;
          else
            v85 = LODWORD(v193.__r_.__value_.__r.__words[1]);
          if (v193.__r_.__value_.__r.__words[2])
          {
            v194[0] = *((_QWORD *)&v193.__r_.__value_.__l + 2);
            operator delete((void *)v193.__r_.__value_.__r.__words[2]);
          }
        }
        else
        {
          v85 = *((unsigned int *)a3 + 16);
        }
        Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)&v172, v19, (uint64_t)v182, (uint64_t)v175, v12, (NSString *)v85);
        is_valid_for_engine = (_BYTE)v172 != 0;
        if (!(_BYTE)v172)
        {
          *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v169;
          if (*((_QWORD *)&v169 + 1))
          {
            v91 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v193, &v173, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning((int64x2_t **)&v179, (Espresso::base_kernel::validate_for_engine_warning_t *)&v193);
          v93 = v196;
          if (v196)
          {
            v94 = (unint64_t *)&v196->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v177[0] = v195;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
          v177[0] = v194;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          size = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
          if (v179.__r_.__value_.__l.__size_)
          {
            v97 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        if (v174 < 0)
          operator delete((void *)v173);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
    }
    else
    {
      v75 = 0;
    }
    v76 = 0;
    goto LABEL_94;
  }
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 128)
  {
LABEL_158:
    is_valid_for_engine = 0;
    goto LABEL_159;
  }
  v28 = v170;
  v29 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v170, 0);
  v30 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v170, (const Espresso::net *)1);
  v31 = v171;
  v167 = v170;
  v168 = v171;
  if (v171)
  {
    v32 = (unint64_t *)&v171->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(_OWORD **)a3;
  v35 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v36 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v162[0] = *(_OWORD *)*(_QWORD *)a3;
  v162[1] = v36;
  v163 = v35;
  __p = 0;
  v165 = 0;
  v166 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v34 + 5), *((_QWORD *)v34 + 6), (uint64_t)(*((_QWORD *)v34 + 6) - *((_QWORD *)v34 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v175, v28, (const Espresso::layer_shape *)v162, 1);
  if (__p)
  {
    v165 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v37 = (unint64_t *)&v31->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v40 = v170;
  v39 = v171;
  v160 = v170;
  v161 = v171;
  if (v171)
  {
    v41 = (unint64_t *)&v171->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(_QWORD **)a3;
  v44 = *(_OWORD *)(*(_QWORD *)a3 + 80);
  v155[0] = *(_OWORD *)(*(_QWORD *)a3 + 64);
  v155[1] = v44;
  v45 = (const void *)v43[13];
  v156 = v43[12];
  v157 = 0;
  v158 = 0;
  v159 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v157, v45, v43[14], (uint64_t)(v43[14] - (_QWORD)v45) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v172, v40, (const Espresso::layer_shape *)v155, 1);
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v49 = v170;
  v48 = v171;
  v152 = v170;
  v153 = v171;
  if (v171)
  {
    v50 = (unint64_t *)&v171->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = (_OWORD *)*((_QWORD *)a3 + 3);
  v53 = *((_QWORD *)v52 + 4);
  v54 = v52[1];
  v147[0] = *v52;
  v147[1] = v54;
  v148 = v53;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v149, *((const void **)v52 + 5), *((_QWORD *)v52 + 6), (uint64_t)(*((_QWORD *)v52 + 6) - *((_QWORD *)v52 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v154, v49, (const Espresso::layer_shape *)v147, 1);
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v48)
  {
    v55 = (unint64_t *)&v48->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v57 = (void *)(int)v173;
  if (HIDWORD(v172) * (_DWORD)v172 * (_DWORD)v173 * DWORD1(v173) * DWORD2(v173) != 1)
  {
    v99 = (std::__shared_weak_count *)a2[1];
    v145 = (int64x2_t *)*a2;
    v146 = v99;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    std::string::basic_string[abi:ne180100]<0>(v187, "slice_kernel: only num_elements == 1 is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v193, (__int128 *)v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v145, (Espresso::base_kernel::validate_for_engine_warning_t *)&v193);
    v102 = v196;
    if (v196)
    {
      v103 = (unint64_t *)&v196->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    *(_QWORD *)v183 = v195;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v183);
    *(_QWORD *)v183 = v194;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v183);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    if ((v187[23] & 0x80000000) != 0)
      operator delete(*(void **)v187);
    v105 = v146;
    if (v146)
    {
      v106 = (unint64_t *)&v146->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    goto LABEL_158;
  }
  v58 = *((unsigned __int8 *)v170 + 1281);
  v59 = v11;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v175, v59))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v172, v59))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v154, v59))
      {
        if (v29 < 8 && ((0x97u >> v29) & 1) != 0)
        {
          if (v30 < 8 && ((0x97u >> v30) & 1) != 0)
          {
            v121 = off_1E2DD7988[v29];
            v122 = off_1E2DD7988[v30];
            Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v203, (NSString *)(a1 + 304), v59);
            ANECDynamicSliceLayerDescInitialize();
            v192 = 0;
            v191 = 0;
            ANECTensorDescInitialize();
            ANECTensorDescInitialize();
            *(_QWORD *)v187 = v121;
            v188 = (void *)v175[2];
            *(_QWORD *)&v123 = v175[3];
            *((_QWORD *)&v123 + 1) = v175[4];
            *(_OWORD *)&v187[24] = v123;
            *(_QWORD *)&v123 = v175[0];
            *((_QWORD *)&v123 + 1) = v175[1];
            *(_OWORD *)&v187[8] = v123;
            *(_QWORD *)&v123 = SDWORD1(v173);
            *((_QWORD *)&v123 + 1) = SDWORD2(v173);
            *(_OWORD *)&v183[24] = v123;
            *(_QWORD *)v183 = v122;
            v184 = v57;
            *(_QWORD *)&v123 = (int)v172;
            *((_QWORD *)&v123 + 1) = SHIDWORD(v172);
            *(_OWORD *)&v183[8] = v123;
            if (v176 <= 5 && *v12 <= 4)
            {
              v124 = CFSTR("Height");
              switch(*v12)
              {
                case 0:
                  v124 = CFSTR("Width");
                  goto LABEL_202;
                case 1:
                  goto LABEL_202;
                case 2:
                  if (v176 == 5 && v58)
                    goto LABEL_198;
                  goto LABEL_201;
                case 3:
                  v124 = CFSTR("Batch");
                  if (v176 == 5 && v58)
LABEL_201:
                    v124 = CFSTR("Channel");
                  goto LABEL_202;
                case 4:
                  if (v176 == 5 && v58)
                    v124 = CFSTR("Batch");
                  else
LABEL_198:
                    v124 = CFSTR("Depth");
LABEL_202:
                  v197 = v124;
                  v198 = CFSTR("Background");
                  v199 = v124;
                  v200 = v124;
                  v201 = *(_DWORD *)(a1 + 300);
                  v194[0] = CFSTR("NonNormalized");
                  v193.__r_.__value_.__r.__words[2] = (std::string::size_type)CFSTR("RangeZeroToOne");
                  v193.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
                  v193.__r_.__value_.__r.__words[0] = 1;
                  v202 = 0;
                  v125 = ANECValidateDynamicSliceLayer();
                  if (v125)
                  {
                    Espresso::ANECompilerEngine::violations_from_alternates<ANECDynamicSliceLayerDescAlternate>((uint64_t)v182, v192, v191);
                    std::to_string(&v179, v125);
                    v126 = std::string::insert(&v179, 0, "slice_kernel: ANECValidateDynamicSliceLayer failed with status ");
                    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
                    v180.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v127;
                    v126->__r_.__value_.__l.__size_ = 0;
                    v126->__r_.__value_.__r.__words[2] = 0;
                    v126->__r_.__value_.__r.__words[0] = 0;
                    v128 = std::string::append(&v180, ". ");
                    v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
                    v181.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v129;
                    v128->__r_.__value_.__l.__size_ = 0;
                    v128->__r_.__value_.__r.__words[2] = 0;
                    v128->__r_.__value_.__r.__words[0] = 0;
                    Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v177, (uint64_t)v182);
                    if ((v178 & 0x80u) == 0)
                      v130 = v177;
                    else
                      v130 = (void **)v177[0];
                    if ((v178 & 0x80u) == 0)
                      v131 = v178;
                    else
                      v131 = (std::string::size_type)v177[1];
                    v132 = std::string::append(&v181, (const std::string::value_type *)v130, v131);
                    v133 = (void *)v132->__r_.__value_.__r.__words[0];
                    v205[0] = v132->__r_.__value_.__l.__size_;
                    *(_QWORD *)((char *)v205 + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1]
                                                                              + 7);
                    v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
                    v132->__r_.__value_.__l.__size_ = 0;
                    v132->__r_.__value_.__r.__words[2] = 0;
                    v132->__r_.__value_.__r.__words[0] = 0;
                    LOBYTE(v141) = 0;
                    *(_QWORD *)&v143[7] = *(_QWORD *)((char *)v205 + 7);
                    v142 = v133;
                    *(_QWORD *)v143 = v205[0];
                    v144 = v134;
                    if ((char)v178 < 0)
                      operator delete(v177[0]);
                    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v181.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v180.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v179.__r_.__value_.__l.__data_);
                    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v182);
                  }
                  else
                  {
                    LOBYTE(v141) = 1;
                    std::string::basic_string[abi:ne180100]<0>(&v142, "Success");
                  }
                  v135 = v204;
                  if (v204)
                  {
                    v136 = (unint64_t *)&v204->__shared_owners_;
                    do
                      v137 = __ldaxr(v136);
                    while (__stlxr(v137 - 1, v136));
                    if (!v137)
                    {
                      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                      std::__shared_weak_count::__release_weak(v135);
                    }
                  }
                  goto LABEL_168;
                default:
                  break;
              }
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
          }
          LOBYTE(v141) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, "slice_kernel: unsupported index compute path for ANE.");
        }
        else
        {
          LOBYTE(v141) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, "slice_kernel: unsupported input compute path for ANE.");
        }
      }
      else
      {
        LOBYTE(v141) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v142, "slice_kernel: output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      LOBYTE(v141) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v142, "slice_kernel: index blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    LOBYTE(v141) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v142, "slice_kernel: input blob dimensions exceed ANE limit.");
  }
LABEL_168:

  is_valid_for_engine = (_BYTE)v141 != 0;
  if (!(_BYTE)v141)
  {
    v112 = (std::__shared_weak_count *)a2[1];
    v139 = (int64x2_t *)*a2;
    v140 = v112;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v193, (__int128 *)&v142, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v139, (Espresso::base_kernel::validate_for_engine_warning_t *)&v193);
    v115 = v196;
    if (v196)
    {
      v116 = (unint64_t *)&v196->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    *(_QWORD *)v187 = v195;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v187);
    *(_QWORD *)v187 = v194;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v187);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    v118 = v140;
    if (v140)
    {
      v119 = (unint64_t *)&v140->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
  }
  if (v144 < 0)
    operator delete(v142);
LABEL_159:

  v108 = v171;
  if (v171)
  {
    v109 = (unint64_t *)&v171->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  return is_valid_for_engine;
}

void sub_190DD2680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  uint64_t v57;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57 - 136);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int *a5, NSString *a6)
{
  id v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int shape_for_CNNAxis;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  char v34[8];
  __int128 v35;
  std::string::size_type v36;
  _OWORD v37[2];
  char v38[8];
  __int128 __p;
  std::string::size_type v40;
  _OWORD v41[2];
  __int128 v42;
  std::string::size_type v43;

  v11 = a2;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a3, v11))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
    goto LABEL_58;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a4, v11))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
    goto LABEL_58;
  }
  v12 = 0;
  v13 = a5[3];
  v14 = *a5;
  if (v13 == 4)
  {
    v15 = *(_DWORD *)(a3 + 4);
    if ((v15 & 3) == 0 && v14 == 2 && (v15 & 1) == 0)
      v12 = *(_DWORD *)(a3 + 28) != 0;
  }
  v16 = v13 == 1 || v12;
  if (v14 < 5 && a5[4] == 0)
    v18 = v16;
  else
    v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v42, "");
  if (shape_for_CNNAxis == -1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice axis");
  v20 = a5[2];
  v21 = (shape_for_CNNAxis & (a5[1] >> 31)) + a5[1];
  if (v20 <= 0)
    v22 = shape_for_CNNAxis;
  else
    v22 = 0;
  v23 = v22 + v20;
  if (v23 >= shape_for_CNNAxis)
    v24 = shape_for_CNNAxis;
  else
    v24 = v23;
  if (v24 > v21)
    v25 = v18;
  else
    v25 = 0;
  if (v21 < 0 || v24 < 0)
    v26 = (v21 & v24) >> 31;
  else
    v26 = 1;
  if (v21 > shape_for_CNNAxis)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid start param");
  if ((v25 & v26 & 1) != 0)
  {
    {
LABEL_55:
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
      goto LABEL_56;
    }
    v27 = *(_OWORD *)(a3 + 16);
    v41[0] = *(_OWORD *)a3;
    v41[1] = v27;
    *(int32x2_t *)((char *)v41 + 12) = vrev64_s32(*(int32x2_t *)(a3 + 12));
    Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v38, v11, (_DWORD *)a3, v41);
    if (v38[0])
    {
      v28 = *(_OWORD *)(a4 + 16);
      v37[0] = *(_OWORD *)a4;
      v37[1] = v28;
      *(int32x2_t *)((char *)v37 + 12) = vrev64_s32(*(int32x2_t *)(a4 + 12));
      Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v34, v11, v37, (_DWORD *)a4);
      v29 = v34[0];
      v38[0] = v34[0];
      if (SHIBYTE(v40) < 0)
      {
        operator delete((void *)__p);
        v29 = v38[0];
      }
      __p = v35;
      v40 = v36;
      if (v29)
      {
        v30 = 0;
        goto LABEL_52;
      }
      *(_BYTE *)a1 = 1;
      v32 = (std::string *)(a1 + 8);
      if (SHIBYTE(v40) < 0)
      {
        std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        goto LABEL_51;
      }
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = __p;
      v33 = v40;
    }
    else
    {
      *(_BYTE *)a1 = 1;
      v32 = (std::string *)(a1 + 8);
      if (SHIBYTE(v40) < 0)
      {
        std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        goto LABEL_51;
      }
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = __p;
      v33 = v40;
    }
    v32->__r_.__value_.__r.__words[2] = v33;
LABEL_51:
    v30 = 1;
LABEL_52:
    if (SHIBYTE(v40) < 0)
      operator delete((void *)__p);
    if (v30)
      goto LABEL_56;
    goto LABEL_55;
  }
  *(_BYTE *)a1 = 0;
  v31 = (std::string *)(a1 + 8);
  if (SHIBYTE(v43) < 0)
  {
    std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v42;
    v31->__r_.__value_.__r.__words[2] = v43;
  }
LABEL_56:
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
LABEL_58:

}

void sub_190DD2C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 65) < 0)
    operator delete(*(void **)(v24 - 88));

  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::`anonymous namespace'::slice_kernel_need_transpose(_DWORD *a1, NSString *a2, int a3, Espresso::ANECompilerEngine *this)
{
  int v5;
  int is_mix;
  _BOOL8 result;
  BOOL v9;
  int v10;
  int v11;
  unint64_t v12;

  v5 = (int)a2;
  is_mix = Espresso::ANECompilerEngine::is_mix(this, a2);
  result = 0;
  if (is_mix && !*a1)
  {
    v9 = v5 == 4 || v5 == 2;
    v10 = v9;
    if (v9)
      v11 = 63;
    else
      v11 = 31;
    if ((v11 & a3) == 0)
      return 0;
    v9 = v10 == 0;
    v12 = 12;
    if (!v9)
      v12 = 28;
    return v12 < a3;
  }
  return result;
}

uint64_t Espresso::ANECompilerEngine::`anonymous namespace'::get_shape_for_CNNAxis(int a1, unsigned int *a2)
{
  unsigned int v2;

  switch(a1)
  {
    case 0:
      a2 += 4;
      break;
    case 1:
      a2 += 3;
      break;
    case 2:
      if (a2[7])
        ++a2;
      else
        a2 += 2;
      break;
    case 3:
      if (!a2[7])
        ++a2;
      break;
    case 4:
      v2 = a2[7];
      if (v2)
      {
        if (v2 != 1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected blob layout.");
        a2 += 2;
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid CNN axis");
  }
  return *a2;
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t is_valid_for_engine_conv;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v24[2];
  _BYTE v25[8];
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = a3[6];
  v27 = 0;
  v28 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v28 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v27 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v25, (NSString *)(a1 + 560), v9);
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v24[0] = v10;
  v24[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  is_valid_for_engine_conv = Espresso::ANECompilerEngine::is_valid_for_engine_conv((uint64_t)v25, (uint64_t *)(a1 + 472), a1 + 304, a3, (uint64_t)v24, 1);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return is_valid_for_engine_conv;
}

void sub_190DD2F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Espresso::DummyMPSEngine::slice_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 280) < 5;
}

uint64_t Espresso::DummyMPSEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 304) < 0x19u) & (0x1F87FFFu >> *(_DWORD *)(a1 + 304));
}

BOOL Espresso::DummyMPSEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = *a3;
  if (*a3 == a3[1])
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1)
        v4 = 4;
      else
        v4 = 5;
    }
    v5 = v4 > 3;
  }
  return !*(_BYTE *)(a1 + 340) && v5;
}

uint64_t Espresso::ANECompilerEngine::load_constant_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  NSString *v12;
  Espresso::ANECompilerEngine *v13;
  _QWORD *v14;
  _QWORD *i;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int64x2_t *v49;
  std::__shared_weak_count *v50;
  void *v51[2];
  char v52;
  std::string __p;
  _BYTE v54[24];
  _BYTE v55[32];
  std::__shared_weak_count *v56;
  int64x2_t *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void **v61[2];

  v5 = *(_QWORD *)(a1 + 344);
  if (!v5 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5))
  {
    v6 = (int *)a3[3];
    if (v6 == (int *)a3[4] || *v6 <= 1 && v6[1] < 2)
      return 1;
    v7 = (_QWORD *)a3[6];
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*v7 + 224 * a3[9] + 112);
    v8 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v7 + 6), __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
    v9 = a3[6];
    v59 = 0;
    v60 = 0;
    v10 = *(std::__shared_weak_count **)(v9 + 80);
    if (v10 && (v60 = std::__shared_weak_count::lock(v10)) != 0)
    {
      v11 = *(_QWORD *)(v9 + 72);
      v59 = v11;
    }
    else
    {
      v11 = 0;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(v11 + 472);
    v13 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    v14 = (_QWORD *)v8[7];
    for (i = (_QWORD *)v8[8]; v14 != i; ++v14)
    {
      v16 = *(_QWORD *)a3[6];
      v17 = v16 + 224 * *v14;
      v18 = (_QWORD *)(v17 + 48);
      v19 = *(char *)(v17 + 71);
      if (v19 < 0)
      {
        if (v18[1] != 11)
          goto LABEL_20;
        v18 = (_QWORD *)*v18;
      }
      else if (v19 != 11)
      {
        goto LABEL_20;
      }
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD *)((char *)v18 + 3);
      if (v20 == (_QWORD *)0x77746E656D656C65 && v21 == 0x65736977746E656DLL)
      {
        v32 = v16 + 224 * *v14;
        v34 = *(_DWORD **)(v32 + 184);
        v33 = *(_DWORD **)(v32 + 192);
        while (v34 != v33)
        {
          v35 = (_DWORD *)a3[3];
          if ((v34[1] != v35[1] || *v34 != *v35) && Espresso::ANECompilerEngine::is_mix(v13, v12))
          {
            v37 = *(std::__shared_weak_count **)(a2 + 8);
            v49 = *(int64x2_t **)a2;
            v50 = v37;
            if (v37)
            {
              p_shared_owners = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldxr(p_shared_owners);
              while (__stxr(v39 + 1, p_shared_owners));
            }
            std::string::basic_string[abi:ne180100]<0>(v51, "inputs of the consumer elementwise kernel of load_constant's inputs must be of same h/w when the constant blob has w/h > 1");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v51, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v40 = v56;
            if (v56)
            {
              v41 = (unint64_t *)&v56->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v61[0] = (void **)v55;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v61);
            v61[0] = (void **)v54;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v61);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v52 < 0)
              operator delete(v51[0]);
            v36 = v50;
            if (v50)
            {
              v43 = (unint64_t *)&v50->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
              LOBYTE(v36) = 0;
            }
            goto LABEL_64;
          }
          v34 += 16;
        }
        continue;
      }
LABEL_20:
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v57 = *(int64x2_t **)a2;
      v58 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      std::string::basic_string[abi:ne180100]<0>(v51, "consumer of load_constant is not elementwise kernel");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v51, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning(&v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v26 = v56;
      if (v56)
      {
        v27 = (unint64_t *)&v56->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v61[0] = (void **)v55;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v61);
      v61[0] = (void **)v54;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v61);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v52 < 0)
        operator delete(v51[0]);
      v29 = v58;
      if (v58)
      {
        v30 = (unint64_t *)&v58->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    LOBYTE(v36) = 1;
LABEL_64:

    v45 = v60;
    if (!v60)
      goto LABEL_68;
    v46 = (unint64_t *)&v60->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if ((v36 & 1) != 0)
        return 1;
    }
    else
    {
LABEL_68:
      if ((v36 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

void sub_190DD3448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  void *v18;
  uint64_t v19;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a18);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 112);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_inner_product_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, _QWORD **a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  const Espresso::net *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  Espresso::ANECompilerEngine *v40;
  int v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL is_valid_kernel_input_size;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *size;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  _BOOL4 v145;
  BOOL v146;
  BOOL v147;
  int v149;
  int v150;
  int v151;
  int v152;
  std::__shared_weak_count *v153;
  int64x2_t *v154;
  uint64_t v155;
  std::string v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  int64x2_t *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::string __p;
  std::string::size_type v165;
  uint64_t v166;
  int v167;
  int v168;
  _QWORD v169[3];
  __int16 v170;
  __int128 v171;
  __int16 v172;
  uint64_t v173;
  int v174;
  __int128 v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  __int16 v182;
  int v183;
  char v184;
  int64x2_t *v185;
  uint64_t v186;
  char v187;
  void *v188[2];
  char v189;
  _OWORD v190[2];
  uint64_t v191;
  void *v192;
  void *v193;
  uint64_t v194;
  const Espresso::net *v195;
  std::__shared_weak_count *v196;
  _DWORD v197[8];
  _OWORD v198[2];
  uint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  const Espresso::net *v203;
  std::__shared_weak_count *v204;
  std::string::size_type *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int64x2_t *v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  void **v240[2];
  char v241;
  std::string v242;
  std::string v243;
  std::string v244;

  v6 = a3[6];
  v215 = 0;
  v214 = 0;
  v7 = (std::__shared_weak_count *)v6[10];
  if (v7 && (v215 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = v6[9];
    v214 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v213 = *a2;
    v153 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::inner_product_kernel::is_valid_for_engine(a1, (uint64_t)&v213, (uint64_t *)a3);
    if (v153)
    {
      p_shared_owners = (unint64_t *)&v153->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    goto LABEL_128;
  }
  if ((char *)a3[1] - (char *)*a3 == 64 && a3[3] != a3[4])
  {
    v14 = a3[6];
    v204 = 0;
    v203 = 0;
    v15 = (std::__shared_weak_count *)v14[10];
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      v204 = v16;
      if (v16)
      {
        v17 = (const Espresso::net *)v14[9];
        v203 = v17;
        goto LABEL_36;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = 0;
LABEL_36:
    v26 = (uint64_t)*a3;
    v27 = (*a3)[4];
    v28 = *((_OWORD *)*a3 + 1);
    v198[0] = *(_OWORD *)*a3;
    v198[1] = v28;
    v199 = v27;
    v200 = 0;
    v202 = 0;
    v201 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v200, *(const void **)(v26 + 40), *(_QWORD *)(v26 + 48), (uint64_t)(*(_QWORD *)(v26 + 48) - *(_QWORD *)(v26 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v205, v17, (const Espresso::layer_shape *)v198, 1);
    if (v200)
    {
      v201 = v200;
      operator delete(v200);
    }
    if (v16)
    {
      v29 = (unint64_t *)&v16->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v31 = a3[6];
    v195 = 0;
    v196 = 0;
    v32 = (std::__shared_weak_count *)v31[10];
    if (v32)
    {
      v33 = std::__shared_weak_count::lock(v32);
      v196 = v33;
      if (v33)
      {
        v34 = (const Espresso::net *)v31[9];
        v195 = v34;
        goto LABEL_48;
      }
    }
    else
    {
      v33 = 0;
    }
    v34 = 0;
LABEL_48:
    v35 = a3[3];
    v36 = v35[4];
    v37 = *((_OWORD *)v35 + 1);
    v190[0] = *(_OWORD *)v35;
    v190[1] = v37;
    v191 = v36;
    v192 = 0;
    v193 = 0;
    v194 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v192, (const void *)v35[5], v35[6], (uint64_t)(v35[6] - v35[5]) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v197, v34, (const Espresso::layer_shape *)v190, 1);
    if (v192)
    {
      v193 = v192;
      operator delete(v192);
    }
    if (v33)
    {
      v38 = (unint64_t *)&v33->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v40 = v9;
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v205, v40))
    {
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Input blob dimensions exceed ANE limit.");
      goto LABEL_64;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v197, v40))
    {
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Output blob dimensions exceed ANE limit.");
      goto LABEL_64;
    }
    v41 = v209;
    if (v209 == 5)
    {
      if (v207 != 1 || v208 != 1)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product with D/H/W > 1 not allowed on ANE. Use conv2d instead.");
        goto LABEL_64;
      }
      if (v210 != 1)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product is not supported with NCDHW layout yet.");
        goto LABEL_64;
      }
    }
    else if (v209 == 4 && (v207 != 1 || v208 != 1))
    {
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Inner product with H/W > 1 not allowed on ANE. Use conv2d instead.");
      goto LABEL_64;
    }
    if (!*(_DWORD *)(a1 + 336))
    {
      v95 = *a3[6] + 224 * (_QWORD)a3[9];
      v97 = *(_QWORD *)(v95 + 88);
      v96 = v95 + 88;
      v98 = *(_QWORD *)(v97 + 224);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
      if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v98 + 24))(v98, &__p) & 1) != 0)
      {
        v99 = 1;
      }
      else
      {
        v101 = *(_QWORD *)(*(_QWORD *)v96 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v156, "Qscale_t");
        if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v101 + 24))(v101, &v156) & 1) != 0)
        {
          v99 = 1;
        }
        else
        {
          v108 = *(_QWORD *)(*(_QWORD *)v96 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v244, "W_t_int8");
          v99 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v108 + 24))(v108, &v244);
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v99)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Found quantization scheme only implemented for is_lookup (Q, Qscale_t, and/or W_t_int8).");
        goto LABEL_64;
      }
      goto LABEL_331;
    }
    v94 = HIDWORD(v205);
    if ((HIDWORD(v205) * (_DWORD)v205 * v206 * v207 * v208) > 0x4000)
    {
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) is not supported with number of ids > 16384 because the decomposition mechanism would require an illegal reshape.");
      goto LABEL_64;
    }
    v100 = *(_DWORD *)(a1 + 308);
    if (v100 <= 0x800)
    {
      v149 = (int)v205;
      v150 = v206;
      v151 = v208;
      v152 = v207;
      v102 = a3[6];
    }
    else
    {
      if (v100 > 0x10000)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) is not supported with nB requiring more than 16 bits.");
        goto LABEL_64;
      }
      if (v100 == 0x10000)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) requires nB to be bounded by limits on channel dimension.");
        goto LABEL_64;
      }
      if (v100 > 0x8000)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) requires nB to be bounded by 32768. Experienced compilation failures for larger factors in testing.");
        goto LABEL_64;
      }
      v149 = (int)v205;
      v150 = v206;
      v151 = v208;
      v152 = v207;
      v112 = a3[6];
      v113 = *(_QWORD **)(*v112 + 224 * (_QWORD)a3[9] + 136);
      v114 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v112 + 3), v113);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
      v115 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v112 + 6), v113, (__int128 **)&__p);
      v102 = a3[6];
      if (v102 + 4 != v114)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product layer that relies on input casting must be the consumer of an input layer and not a layer created by another kernel.");
        goto LABEL_64;
      }
      if (v115[8] - v115[7] >= 9uLL)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "Inner product layer that relies on input casting must be the only consumer of the input (heuristic so that each consumer expects the cast).");
        goto LABEL_64;
      }
    }
    v103 = *v102 + 224 * (_QWORD)a3[9];
    v105 = *(_QWORD *)(v103 + 88);
    v104 = v103 + 88;
    v106 = *(_QWORD *)(v105 + 224);
    std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights_f16");
    if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v106 + 24))(v106, &__p) & 1) != 0)
    {
      v107 = 1;
    }
    else
    {
      v109 = *(_QWORD *)(*(_QWORD *)v104 + 224);
      std::string::basic_string[abi:ne180100]<0>(&v156, "W_8bit");
      if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v109 + 24))(v109, &v156) & 1) != 0)
      {
        v107 = 1;
      }
      else
      {
        v110 = *(_QWORD *)(*(_QWORD *)v104 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v244, "W_uint8");
        if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v110 + 24))(v110, &v244) & 1) != 0)
        {
          v107 = 1;
        }
        else
        {
          v111 = *(_QWORD *)(*(_QWORD *)v104 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v243, "W_int8");
          if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v111 + 24))(v111, &v243) & 1) != 0)
          {
            v107 = 1;
          }
          else
          {
            v116 = *(_QWORD *)(*(_QWORD *)v104 + 224);
            std::string::basic_string[abi:ne180100]<0>(&v242, "W_int16");
            if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v116 + 24))(v116, &v242) & 1) != 0)
            {
              v107 = 1;
            }
            else
            {
              v117 = *(_QWORD *)(*(_QWORD *)v104 + 224);
              std::string::basic_string[abi:ne180100]<0>(v240, "Qscale");
              if (((*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v117 + 24))(v117, v240) & 1) != 0)
              {
                v107 = 1;
              }
              else
              {
                v118 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                std::string::basic_string[abi:ne180100]<0>(v238, "Qbias");
                if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v118 + 24))(v118, v238) & 1) != 0)
                {
                  v107 = 1;
                }
                else
                {
                  v119 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                  std::string::basic_string[abi:ne180100]<0>(v236, "Qrow_sums");
                  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v119 + 24))(v119, v236) & 1) != 0)
                  {
                    v107 = 1;
                  }
                  else
                  {
                    v120 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                    std::string::basic_string[abi:ne180100]<0>(v234, "tree_W");
                    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v120 + 24))(v120, v234) & 1) != 0)
                    {
                      v107 = 1;
                    }
                    else
                    {
                      v121 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                      std::string::basic_string[abi:ne180100]<0>(v232, "tree_b");
                      if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, v232) & 1) != 0)
                      {
                        v107 = 1;
                      }
                      else
                      {
                        v122 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                        std::string::basic_string[abi:ne180100]<0>(v230, "tree_map_to_index");
                        if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v122 + 24))(v122, v230) & 1) != 0)
                        {
                          v107 = 1;
                        }
                        else
                        {
                          v123 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                          std::string::basic_string[abi:ne180100]<0>(v228, "tree_cluster_end");
                          if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v123 + 24))(v123, v228) & 1) != 0)
                          {
                            v107 = 1;
                          }
                          else
                          {
                            v124 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                            std::string::basic_string[abi:ne180100]<0>(v226, "block_starts");
                            if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v124 + 24))(v124, v226) & 1) != 0)
                            {
                              v107 = 1;
                            }
                            else
                            {
                              v125 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                              std::string::basic_string[abi:ne180100]<0>(v224, "w_f16_t");
                              if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v125 + 24))(v125, v224) & 1) != 0)
                              {
                                v107 = 1;
                              }
                              else
                              {
                                v126 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                                std::string::basic_string[abi:ne180100]<0>(v222, "w_f32_t");
                                if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v126 + 24))(v126, v222) & 1) != 0)
                                {
                                  v107 = 1;
                                }
                                else
                                {
                                  v127 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                                  std::string::basic_string[abi:ne180100]<0>(v220, "block_cols");
                                  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v127 + 24))(v127, v220) & 1) != 0)
                                  {
                                    v107 = 1;
                                  }
                                  else
                                  {
                                    v128 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                                    std::string::basic_string[abi:ne180100]<0>(v218, "sparse_weights_f32");
                                    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v128 + 24))(v128, v218) & 1) != 0)
                                    {
                                      v107 = 1;
                                    }
                                    else
                                    {
                                      v129 = *(_QWORD *)(*(_QWORD *)v104 + 224);
                                      std::string::basic_string[abi:ne180100]<0>(v216, "sparse_weights_f16");
                                      v107 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v129 + 24))(v129, v216);
                                      if (v217 < 0)
                                        operator delete(v216[0]);
                                    }
                                    if (v219 < 0)
                                      operator delete(v218[0]);
                                  }
                                  if (v221 < 0)
                                    operator delete(v220[0]);
                                }
                                if (v223 < 0)
                                  operator delete(v222[0]);
                              }
                              if (v225 < 0)
                                operator delete(v224[0]);
                            }
                            if (v227 < 0)
                              operator delete(v226[0]);
                          }
                          if (v229 < 0)
                            operator delete(v228[0]);
                        }
                        if (v231 < 0)
                          operator delete(v230[0]);
                      }
                      if (v233 < 0)
                        operator delete(v232[0]);
                    }
                    if (v235 < 0)
                      operator delete(v234[0]);
                  }
                  if (v237 < 0)
                    operator delete(v236[0]);
                }
                if (v239 < 0)
                  operator delete(v238[0]);
              }
              if (v241 < 0)
                operator delete(v240[0]);
            }
            if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v242.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v243.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v244.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v130 = *(_QWORD *)(*(_QWORD *)v104 + 224);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
    if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v130 + 24))(v130, &__p))
    {
      v131 = *(_QWORD *)(*(_QWORD *)v104 + 224);
      std::string::basic_string[abi:ne180100]<0>(&v156, "Qscale_t");
      if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v131 + 24))(v131, &v156))
      {
        v132 = *(_QWORD *)(*(_QWORD *)v104 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v244, "W_t_int8");
        v133 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v132 + 24))(v132, &v244);
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v244.__r_.__value_.__l.__data_);
      }
      else
      {
        v133 = 0;
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
    }
    else
    {
      v133 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v133)
    {
      if (*(_DWORD *)(a1 + 312))
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "quantized inner product not implemented with biases.");
        goto LABEL_64;
      }
    }
    else
    {
      v134 = *(_QWORD *)(*(_QWORD *)v104 + 224);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
      if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v134 + 24))(v134, &__p) & 1) != 0)
      {
        v135 = 1;
      }
      else
      {
        v136 = *(_QWORD *)(*(_QWORD *)v104 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v156, "Qscale_t");
        if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v136 + 24))(v136, &v156) & 1) != 0)
        {
          v135 = 1;
        }
        else
        {
          v137 = *(_QWORD *)(*(_QWORD *)v104 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v244, "W_t_int8");
          v135 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v137 + 24))(v137, &v244);
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v135)
      {
        v187 = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, "is_lookup quantization support is tailored to a specific pattern for a single model. Partial match not implemented.");
        goto LABEL_64;
      }
    }
    if (v107)
    {
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) is not supported with quantized weight yet.");
      goto LABEL_64;
    }
    if (v210 == -1 || v210 == 1)
    {
      v141 = v94;
      v94 = v149;
      v140 = v150;
      v139 = v151;
      v138 = v152;
    }
    else
    {
      v139 = v151;
      v138 = v152;
      v140 = v149;
      if (v210)
      {
        v139 = 0;
        v138 = 1;
        v141 = 1;
        v94 = 1;
        v140 = 1;
      }
      else
      {
        v141 = v150;
      }
    }
    v145 = v140 > 1 && v94 == 1 && v141 == 1 && v138 == 1;
    if (!*(_BYTE *)(a1 + 344) && v41 >= 4)
    {
      if (v145)
      {
        if (v139 != 1)
          goto LABEL_325;
      }
      else if (v140 > 1 || v94 < 1 || v139 != 1 || v141 != 1 || v138 != 1)
      {
        goto LABEL_325;
      }
      goto LABEL_331;
    }
    if (v145 || v140 <= 1 && v94 >= 2 && v141 == 1 && v138 == 1)
    {
      v146 = v139 == 1;
      LOBYTE(v145) = v145 ^ (v94 < 2);
    }
    else
    {
      v146 = 0;
      v145 = v140 < 2 && v94 < 2;
      if (v145 && v141 >= 2 && v138 == 1)
      {
        v147 = 0;
        if (v139 == 1)
          goto LABEL_331;
        goto LABEL_324;
      }
    }
    v147 = v141 < 2 && v145;
    if (v138 <= 0)
      v147 = 0;
    if (v139 != 1)
      v147 = 0;
    if (v146)
      goto LABEL_331;
LABEL_324:
    if (!v147)
    {
LABEL_325:
      v187 = 0;
      std::string::basic_string[abi:ne180100]<0>(v188, "Inner product (is_lookup = True) is not supported with the current input shape yet.");
      goto LABEL_64;
    }
LABEL_331:
    v187 = 1;
    std::string::basic_string[abi:ne180100]<0>(v188, "Success.");
LABEL_64:

    if (!v187)
    {
      v44 = *((_QWORD *)a2 + 1);
      v185 = *(int64x2_t **)a2;
      v186 = v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v188, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v185, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v47 = *(std::__shared_weak_count **)((char *)&v171 + 6);
      if (*(_QWORD *)((char *)&v171 + 6))
      {
        v48 = (unint64_t *)(*(_QWORD *)((char *)&v171 + 6) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      is_valid_for_engine = v186;
      if (v186)
      {
        v50 = (unint64_t *)(v186 + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
        }
        is_valid_for_engine = 0;
      }
      goto LABEL_126;
    }
    v42 = *(__int128 **)(*a3[6] + 224 * (_QWORD)a3[9] + 136);
    if (*((char *)v42 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
    }
    else
    {
      v43 = *v42;
      v244.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
      *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v43;
    }
    v52 = v214;
    v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v214 + 360), &v244);
    if (*((_DWORD *)a3 + 16) <= 1u)
      v54 = 1;
    else
      v54 = *((_DWORD *)a3 + 16);
    if (v53)
    {
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
      v55 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v52 + 352), &v244, (uint64_t)&std::piecewise_construct, (__int128 **)&v156);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v55 + 56);
      v165 = 0;
      v166 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v55 + 9), *((_QWORD *)v55 + 10), (uint64_t)(*((_QWORD *)v55 + 10) - *((_QWORD *)v55 + 9)) >> 2);
      v54 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
      if (__p.__r_.__value_.__r.__words[2])
      {
        v165 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
    }
    v56 = a3[3];
    v57 = *((_DWORD *)v56 + 5);
    if (v57 == -1 || v57 >= 4)
    {
      __asm { FMOV            V0.2S, #1.0 }
      v170 = 1;
      v171 = 0uLL;
      v172 = 0;
      v173 = 0x1000100010001;
      v174 = 0;
      v176 = 1;
      v183 = 0;
      v184 = 0;
      v179 = 0;
      v180 = 0;
      memset(&__p, 0, sizeof(__p));
      v165 = 0;
      v166 = 1;
      v175 = xmmword_191A93310;
      v177 = 0;
      v169[1] = 0xFFFFFFFF00000000;
      v169[2] = _D0;
      v178 = 0x10000;
      v181 = 0;
      v182 = 1;
      v70 = (uint64_t)*a3;
      v169[0] = **a3;
      v168 = *(_DWORD *)(v70 + 8);
      v167 = *((_DWORD *)v56 + 2);
      v71 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v162 = *(_QWORD *)a2;
      v163 = v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      is_valid_kernel_input_size = Espresso::is_valid_kernel_input_size((uint64_t)&__p, (uint64_t *)a3, 0);
      if (v71)
      {
        v75 = (unint64_t *)&v71->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (!is_valid_kernel_input_size)
      {
        v81 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        v160 = *(int64x2_t **)a2;
        v161 = v81;
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        std::to_string(&v242, HIDWORD(v169[0]) * LODWORD(v169[0]) * v167);
        v84 = std::string::insert(&v242, 0, "kernel input size too large for inner_product layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
        v243 = *v84;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v156, (__int128 *)&v243, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v160, (Espresso::base_kernel::validate_for_engine_warning_t *)&v156);
        v85 = v159;
        if (v159)
        {
          v86 = (unint64_t *)&v159->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v240[0] = (void **)&v158;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v240);
        v240[0] = (void **)&v157;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v240);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v243.__r_.__value_.__l.__data_);
        if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v242.__r_.__value_.__l.__data_);
        v88 = v161;
        if (v161)
        {
          v89 = (unint64_t *)&v161->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v156, (NSString *)(a1 + 544), v40);
        is_valid_for_engine = Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv((uint64_t)&v156, v40, (uint64_t *)(a1 + 440), (uint64_t)&__p, (uint64_t)&v205, v54, (uint64_t)v197, 0);
        size = (std::__shared_weak_count *)v156.__r_.__value_.__l.__size_;
        if (v156.__r_.__value_.__l.__size_)
        {
          v92 = (unint64_t *)(v156.__r_.__value_.__l.__size_ + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        goto LABEL_124;
      }
    }
    else if ((unint64_t)((uint64_t)v208 << (v54 == 1)) > 0x10000)
    {
      v58 = *((_QWORD *)a2 + 1);
      v154 = *(int64x2_t **)a2;
      v155 = v58;
      if (v58)
      {
        v59 = (unint64_t *)(v58 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      std::string::basic_string[abi:ne180100]<0>(&v156, "KMEM size limit exceeded.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v156, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning(&v154, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v61 = *(std::__shared_weak_count **)((char *)&v171 + 6);
      if (*(_QWORD *)((char *)&v171 + 6))
      {
        v62 = (unint64_t *)(*(_QWORD *)((char *)&v171 + 6) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      is_valid_for_engine = v155;
      if (v155)
      {
        v64 = (unint64_t *)(v155 + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
        }
        is_valid_for_engine = 0;
      }
      goto LABEL_124;
    }
    is_valid_for_engine = 1;
LABEL_124:
    if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v244.__r_.__value_.__l.__data_);
LABEL_126:
    if (v189 < 0)
      operator delete(v188[0]);
    goto LABEL_128;
  }
  v18 = *((_QWORD *)a2 + 1);
  v211 = *(int64x2_t **)a2;
  v212 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  std::string::basic_string[abi:ne180100]<0>(&v156, "Expected single bottom tensor and non-zero top tensor");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v156, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v211, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v21 = *(std::__shared_weak_count **)((char *)&v171 + 6);
  if (*(_QWORD *)((char *)&v171 + 6))
  {
    v22 = (unint64_t *)(*(_QWORD *)((char *)&v171 + 6) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v205 = v169;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  v205 = &v165;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  is_valid_for_engine = v212;
  if (v212)
  {
    v24 = (unint64_t *)(v212 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
    }
    is_valid_for_engine = 0;
  }
LABEL_128:

  v77 = v215;
  if (v215)
  {
    v78 = (unint64_t *)&v215->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return is_valid_for_engine;
}

void sub_190DD4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  uint64_t v43;

  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  if (SLOBYTE(STACK[0x39F]) < 0)
    operator delete((void *)STACK[0x388]);
  if (*(char *)(v43 - 233) < 0)
    operator delete(*(void **)(v43 - 256));
  if (*(char *)(v43 - 209) < 0)
    operator delete(*(void **)(v43 - 232));
  if (*(char *)(v43 - 185) < 0)
    operator delete(*(void **)(v43 - 208));
  if (*(char *)(v43 - 161) < 0)
    operator delete(*(void **)(v43 - 184));
  if (*(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (a20 < 0)
    operator delete(a15);
  if (a41 < 0)
    operator delete(a36);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void sub_190DD4F00()
{
  JUMPOUT(0x190DD4EF0);
}

BOOL Espresso::ANECompilerEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_DWORD *)(a1 + 280) >> 1 == 5003;
}

uint64_t Espresso::ANECompilerEngine::split_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t result;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  const Espresso::layer_shape *v38;
  unint64_t v39;
  int v40;
  int64x2_t *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type size;
  std::string *v50;
  int64x2_t **v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  int64x2_t *v69;
  unint64_t *v70;
  unint64_t v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  const Espresso::layer_shape *v75;
  const Espresso::layer_shape *v76;
  void **v77;
  int v78;
  unint64_t v79;
  int v80;
  int *v82;
  unint64_t v83;
  _DWORD *v84;
  int *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  int64x2_t *v112;
  std::__shared_weak_count *v113;
  int64x2_t *v114;
  std::__shared_weak_count *v115;
  std::string v116;
  std::string v117;
  int64x2_t *v118[2];
  int64x2_t *v119[2];
  int64x2_t *v120;
  std::__shared_weak_count *v121;
  int64x2_t *v122;
  std::__shared_weak_count *v123;
  int64x2_t *v124;
  std::__shared_weak_count *v125;
  std::string v126;
  std::string v127;
  std::string __p;
  std::string v129;
  _BYTE v130[24];
  _BYTE v131[32];
  std::__shared_weak_count *v132;
  int64x2_t *v133;
  std::__shared_weak_count *v134;

  v5 = *(_QWORD *)(**(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72) + 144)
     - *(_QWORD *)(**(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72) + 136);
  if (v5 != 24)
  {
    v20 = v5 >> 3;
    v21 = (std::__shared_weak_count *)a2[1];
    v22 = 0xAAAAAAAAAAAAAAABLL * v20;
    v133 = *a2;
    v134 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    std::to_string(&v126, v22);
    v25 = std::string::insert(&v126, 0, "[Unsupported Split] n_inputs: ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v127, " != 1");
    __p = *v27;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v133, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    v28 = v132;
    if (v132)
    {
      v29 = (unint64_t *)&v132->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v17 = v134;
    if (!v134)
      return 0;
    v31 = (unint64_t *)&v134->__shared_owners_;
    do
      v19 = __ldaxr(v31);
    while (__stlxr(v19 - 1, v31));
LABEL_43:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    return 0;
  }
  v7 = *(_DWORD *)(a1 + 296);
  if (v7)
  {
    v8 = (std::__shared_weak_count *)a2[1];
    v124 = *a2;
    v125 = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v7 = *(_DWORD *)(a1 + 296);
    }
    std::to_string(&v126, v7);
    v11 = std::string::insert(&v126, 0, "[Unsupported Split] legacy_cut_mode: ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v127, " != 0");
    __p = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v124, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    v14 = v132;
    if (v132)
    {
      v15 = (unint64_t *)&v132->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v17 = v125;
    if (!v125)
      return 0;
    v18 = (unint64_t *)&v125->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 288))
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v122 = *a2;
    v123 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = *(unsigned __int8 *)(a1 + 288);
    }
    else
    {
      v36 = 1;
    }
    std::to_string(&v126, v36);
    v52 = std::string::insert(&v126, 0, "[Unsupported Split] nd_mode: ");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v127, " != true");
    __p = *v54;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v122, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    v55 = v132;
    if (v132)
    {
      v56 = (unint64_t *)&v132->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v17 = v123;
    if (!v123)
      return 0;
    v58 = (unint64_t *)&v123->__shared_owners_;
    do
      v19 = __ldaxr(v58);
    while (__stlxr(v19 - 1, v58));
    goto LABEL_43;
  }
  v37 = *(_DWORD *)(a1 + 284);
  if (v37 != 2)
  {
    v59 = (std::__shared_weak_count *)a2[1];
    v120 = *a2;
    v121 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v37 = *(_DWORD *)(a1 + 284);
    }
    std::to_string(&v126, v37);
    v62 = std::string::insert(&v126, 0, "[Unsupported Split] axis: ");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v127, " != 2");
    __p = *v64;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v120, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    v65 = v132;
    if (v132)
    {
      v66 = (unint64_t *)&v132->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v17 = v121;
    if (!v121)
      return 0;
    v68 = (unint64_t *)&v121->__shared_owners_;
    do
      v19 = __ldaxr(v68);
    while (__stlxr(v19 - 1, v68));
    goto LABEL_43;
  }
  v38 = *(const Espresso::layer_shape **)a3;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v129, *(const Espresso::layer_shape **)a3, 0);
  v39 = SHIDWORD(v129.__r_.__value_.__r.__words[2]);
  if (HIDWORD(v129.__r_.__value_.__r.__words[2]) <= 2)
  {
    v69 = a2[1];
    v119[0] = *a2;
    v119[1] = v69;
    if (v69)
    {
      v70 = &v69->u64[1];
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    std::to_string(&v126, v39);
    v72 = std::string::insert(&v126, 0, "[Unsupported Split] rank: ");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v74 = std::string::append(&v127, " < 3");
    __p = *v74;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v119, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v51 = v119;
    goto LABEL_124;
  }
  v40 = *((_DWORD *)v38 + 2);
  if (v40 > 0x10000)
  {
    v41 = a2[1];
    v118[0] = *a2;
    v118[1] = v41;
    if (v41)
    {
      v42 = &v41->u64[1];
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    std::to_string(&v117, v40);
    v44 = std::string::insert(&v117, 0, "[Unsupported Split] input_channel_count: ");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v126, " > ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v116, 0x10000);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v116;
    else
      v48 = (std::string *)v116.__r_.__value_.__r.__words[0];
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    else
      size = v116.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v127, (const std::string::value_type *)v48, size);
    __p = *v50;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v118, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v51 = v118;
LABEL_124:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v51);
    return 0;
  }
  v75 = *(const Espresso::layer_shape **)(a3 + 24);
  v76 = *(const Espresso::layer_shape **)(a3 + 32);
  if (v75 == v76)
    return 1;
  v77 = (void **)(a1 + 552);
  v78 = v40 / *(_DWORD *)(a1 + 280);
  while (1)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v129, v75, 0);
    v79 = HIDWORD(v129.__r_.__value_.__r.__words[2]);
    if (HIDWORD(v129.__r_.__value_.__r.__words[2]) <= 2)
      break;
    v80 = *((_DWORD *)v75 + 2);
    if (v80 != v78 && v80 != v40)
    {
      v104 = (std::__shared_weak_count *)a2[1];
      v112 = *a2;
      v113 = v104;
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      std::to_string(&v127, v80);
      v107 = std::string::insert(&v127, 0, "[Unsupported Split] Invalid output_channel_count: ");
      __p = *v107;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
      Espresso::emit_kernel_validation_warning(&v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
      v108 = v132;
      if (v132)
      {
        v109 = (unint64_t *)&v132->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      v17 = v113;
      if (v113)
      {
        v111 = (unint64_t *)&v113->__shared_owners_;
        do
          v19 = __ldaxr(v111);
        while (__stlxr(v19 - 1, v111));
        goto LABEL_43;
      }
      return 0;
    }
    v82 = *(int **)(a1 + 560);
    v83 = *(_QWORD *)(a1 + 568);
    if ((unint64_t)v82 >= v83)
    {
      v85 = (int *)*v77;
      v86 = ((char *)v82 - (_BYTE *)*v77) >> 2;
      v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v88 = v83 - (_QWORD)v85;
      if (v88 >> 1 > v87)
        v87 = v88 >> 1;
      v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL;
      v90 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v89)
        v90 = v87;
      if (v90)
      {
        v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v90);
        v82 = *(int **)(a1 + 560);
        v85 = *(int **)(a1 + 552);
      }
      else
      {
        v91 = 0;
      }
      v92 = (int *)(v90 + 4 * v86);
      *v92 = v80;
      v84 = v92 + 1;
      while (v82 != v85)
      {
        v93 = *--v82;
        *--v92 = v93;
      }
      *(_QWORD *)(a1 + 552) = v92;
      *(_QWORD *)(a1 + 560) = v84;
      *(_QWORD *)(a1 + 568) = v90 + 4 * v91;
      if (v85)
        operator delete(v85);
    }
    else
    {
      *v82 = v80;
      v84 = v82 + 1;
    }
    *(_QWORD *)(a1 + 560) = v84;
    v40 -= v78;
    v75 = (const Espresso::layer_shape *)((char *)v75 + 64);
    result = 1;
    if (v75 == v76)
      return result;
  }
  v94 = (std::__shared_weak_count *)a2[1];
  v114 = *a2;
  v115 = v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  std::to_string(&v126, v79);
  v97 = std::string::insert(&v126, 0, "[Unsupported Split] rank: ");
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  v99 = std::string::append(&v127, " < 3");
  __p = *v99;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v129, (__int128 *)&__p, a3, 0);
  Espresso::emit_kernel_validation_warning(&v114, (Espresso::base_kernel::validate_for_engine_warning_t *)&v129);
  v100 = v132;
  if (v132)
  {
    v101 = (unint64_t *)&v132->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  v17 = v115;
  if (v115)
  {
    v103 = (unint64_t *)&v115->__shared_owners_;
    do
      v19 = __ldaxr(v103);
    while (__stlxr(v19 - 1, v103));
    goto LABEL_43;
  }
  return 0;
}

void sub_190DD5B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v54 - 216));
  if (a54 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_reshape_kernel::is_valid_for_engine(uint64_t a1, __int128 *a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  const Espresso::net *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x8_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  const Espresso::net *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  const Espresso::base_kernel::validate_for_engine_args_t *v71;
  unsigned int v72;
  int64x2_t *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  BOOL v94;
  __int128 v95;
  __int128 v96;
  int64x2_t *v97;
  unint64_t *v98;
  unint64_t v99;
  int64x2_t **v100;
  int64x2_t *v101;
  unint64_t *v102;
  unint64_t v103;
  int64x2_t **v104;
  int64x2_t *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  __int128 v114;
  __int128 v115;
  int v116;
  int64x2_t *v117;
  unint64_t *v118;
  unint64_t v119;
  int64x2_t **v120;
  int64x2_t *v121;
  unint64_t *v122;
  unint64_t v123;
  int64x2_t **v124;
  int64x2_t *v125;
  unint64_t *v126;
  unint64_t v127;
  int64x2_t *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  int64x2_t *v132;
  unint64_t *v133;
  unint64_t v134;
  int64x2_t *v135;
  unint64_t *v136;
  unint64_t v137;
  int64x2_t *v138;
  unint64_t *v139;
  unint64_t v140;
  int64x2_t *v141;
  unint64_t *v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  int64x2_t *v146;
  unint64_t *v147;
  unint64_t v148;
  int64x2_t *v149;
  unint64_t *v150;
  unint64_t v151;
  int64x2_t *v152;
  unint64_t *v153;
  unint64_t v154;
  int64x2_t *v155;
  unint64_t *v156;
  unint64_t v157;
  int64x2_t **v158;
  int64x2_t *v159;
  unint64_t *v160;
  unint64_t v161;
  int64x2_t *v162;
  unint64_t *v163;
  unint64_t v164;
  int64x2_t *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  int v169;
  int64x2_t *v170;
  unint64_t *v171;
  unint64_t v172;
  std::string *v173;
  uint64_t **i;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  int64x2_t *v184;
  unint64_t *v185;
  unint64_t v186;
  int64x2_t *v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  __CFString *v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  std::__shared_weak_count *v198;
  int64x2_t *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  __int128 v202;
  int64x2_t *v203[2];
  int64x2_t *v204[2];
  int64x2_t *v205[2];
  int64x2_t *v206[2];
  int64x2_t *v207[2];
  __int128 v208;
  char v209;
  int64x2_t *v210[2];
  int64x2_t *v211[2];
  int64x2_t *v212[2];
  int64x2_t *v213[2];
  int64x2_t *v214[2];
  int64x2_t *v215[2];
  int64x2_t *v216[2];
  int64x2_t *v217[2];
  int64x2_t *v218[2];
  int64x2_t *v219[2];
  int64x2_t *v220[2];
  int64x2_t *v221[2];
  __int128 v222;
  uint64_t v223;
  int64x2_t *v224[2];
  void *v225[2];
  char v226;
  char v227;
  void *v228[2];
  __int128 v229;
  int64x2_t *v230[2];
  _BYTE v231[32];
  void *v232;
  void *v233;
  uint64_t v234;
  int64x2_t *v235[2];
  int64x2_t *v236[2];
  uint64_t v237;
  uint64_t v238;
  void *v239[2];
  void *__p;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  int64x2_t *v244[2];
  void **v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  int64x2_t *v249;
  uint64_t v250;
  _OWORD v251[2];
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  const Espresso::base_kernel::validate_for_engine_args_t *v256;
  std::__shared_weak_count *v257;
  __int128 v258;
  __int128 v259;
  _OWORD v260[2];
  uint64_t v261;
  void *v262;
  void *v263;
  uint64_t v264;
  const Espresso::base_kernel::validate_for_engine_args_t *v265;
  std::__shared_weak_count *v266;
  __int128 v267;
  __int128 v268;
  int64x2_t *v269;
  uint64_t v270;
  int64x2_t *v271;
  uint64_t v272;
  int64x2_t *v273;
  uint64_t v274;
  int64x2_t *v275;
  uint64_t v276;
  __int128 v277;
  const Espresso::base_kernel::validate_for_engine_args_t *v278;
  std::__shared_weak_count *v279;
  std::string v280;
  _BYTE v281[24];
  _BYTE v282[32];
  std::__shared_weak_count *v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 6);
  v278 = 0;
  v279 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v279 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v278 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v277 = *a2;
    v198 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::reshape_kernel::is_valid_for_engine(a1, (int64x2_t **)&v277, (uint64_t)a3);
    if (v198)
    {
      p_shared_owners = (unint64_t *)&v198->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    goto LABEL_130;
  }
  v14 = *((_QWORD *)a3 + 3);
  v15 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 < 0x41uLL || !*(_BYTE *)(a1 + 312))
  {
    v24 = *(_DWORD *)(a1 + 304);
    if (v24 == 2)
    {
      v25 = *((_QWORD *)a2 + 1);
      v273 = *(int64x2_t **)a2;
      v274 = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Reshape with Flatten_NCHW_ND mode is not currently supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v273, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      v28 = v283;
      if (v283)
      {
        v29 = (unint64_t *)&v283->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v245 = (void **)v282;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      v245 = (void **)v281;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      is_valid_for_engine = v274;
      if (!v274)
        goto LABEL_130;
      v31 = (unint64_t *)(v274 + 8);
      do
        v23 = __ldaxr(v31);
      while (__stlxr(v23 - 1, v31));
      goto LABEL_127;
    }
    v32 = v278;
    if (v24 == 1 && *((_BYTE *)v278 + 1281))
    {
      v33 = *((_QWORD *)a2 + 1);
      v271 = *(int64x2_t **)a2;
      v272 = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Reshape with Flatten_NHWC mode and NCDHW blob layout is not currently supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v271, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      v36 = v283;
      if (v283)
      {
        v37 = (unint64_t *)&v283->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v245 = (void **)v282;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      v245 = (void **)v281;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      is_valid_for_engine = v272;
      if (!v272)
        goto LABEL_130;
      v39 = (unint64_t *)(v272 + 8);
      do
        v23 = __ldaxr(v39);
      while (__stlxr(v23 - 1, v39));
      goto LABEL_127;
    }
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    v41 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 280), v40), (int8x16_t)xmmword_191A93380);
    v41.i32[0] = vaddvq_s32(v41) & 0xF;
    v42 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v41.i8);
    v42.i16[0] = vaddlv_u8(v42);
    v43 = v42.i32[0];
    if (*(_DWORD *)(a1 + 296) == -1)
      v43 = v42.i32[0] + 1;
    if (v43 >= 2)
    {
      v44 = *((_QWORD *)a2 + 1);
      v269 = *(int64x2_t **)a2;
      v270 = v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "reshape_kernel: cannot infer more than one dimension's length.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v269, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      v47 = v283;
      if (v283)
      {
        v48 = (unint64_t *)&v283->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v245 = (void **)v282;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      v245 = (void **)v281;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      is_valid_for_engine = v270;
      if (!v270)
        goto LABEL_130;
      v50 = (unint64_t *)(v270 + 8);
      do
        v23 = __ldaxr(v50);
      while (__stlxr(v23 - 1, v50));
      goto LABEL_127;
    }
    v51 = v279;
    v265 = v278;
    v266 = v279;
    if (v279)
    {
      v52 = (unint64_t *)&v279->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v54 = *(_OWORD *)(v15 + 16);
    v55 = *(_QWORD *)(v15 + 32);
    v260[0] = *(_OWORD *)v15;
    v260[1] = v54;
    v261 = v55;
    v262 = 0;
    v264 = 0;
    v263 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v262, *(const void **)(v15 + 40), *(_QWORD *)(v15 + 48), (uint64_t)(*(_QWORD *)(v15 + 48) - *(_QWORD *)(v15 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v267, v32, (const Espresso::layer_shape *)v260, 1);
    if (v262)
    {
      v263 = v262;
      operator delete(v262);
    }
    if (v51)
    {
      v56 = (unint64_t *)&v51->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v59 = v278;
    v58 = v279;
    v256 = v278;
    v257 = v279;
    if (v279)
    {
      v60 = (unint64_t *)&v279->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = *(_OWORD *)(v14 + 16);
    v63 = *(_QWORD *)(v14 + 32);
    v251[0] = *(_OWORD *)v14;
    v251[1] = v62;
    v252 = v63;
    v253 = 0;
    v255 = 0;
    v254 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v253, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v258, v59, (const Espresso::layer_shape *)v251, 1);
    if (v253)
    {
      v254 = v253;
      operator delete(v253);
    }
    if (v58)
    {
      v64 = (unint64_t *)&v58->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v66 = v267;
    v67 = DWORD1(v267);
    v68 = DWORD2(v267);
    v69 = HIDWORD(v267);
    v70 = v268;
    if (DWORD1(v267) * (_DWORD)v267 * DWORD2(v267) * HIDWORD(v267) * (_DWORD)v268 != DWORD1(v258)
                                                                                    * (_DWORD)v258
                                                                                    * DWORD2(v258)
                                                                                    * HIDWORD(v258)
                                                                                    * (_DWORD)v259)
    {
      v76 = *((_QWORD *)a2 + 1);
      v249 = *(int64x2_t **)a2;
      v250 = v76;
      if (v76)
      {
        v77 = (unint64_t *)(v76 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "reshape_kernel: dynamic shape detected.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v249, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      v79 = v283;
      if (v283)
      {
        v80 = (unint64_t *)&v283->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v245 = (void **)v282;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      v245 = (void **)v281;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      is_valid_for_engine = v250;
      if (!v250)
        goto LABEL_130;
      v82 = (unint64_t *)(v250 + 8);
      do
        v23 = __ldaxr(v82);
      while (__stlxr(v23 - 1, v82));
LABEL_127:
      if (!v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
      }
LABEL_129:
      is_valid_for_engine = 0;
      goto LABEL_130;
    }
    v193 = v258;
    v194 = HIDWORD(v258);
    v192 = v259;
    v196 = DWORD1(v258);
    v197 = DWORD2(v258);
    ANECReshapeLayerDescInitialize();
    v71 = v278;
    v72 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v278, 0);
    if (v72 >= 8 || ((0x97u >> v72) & 1) == 0)
    {
      v73 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v244[0] = *(int64x2_t **)a2;
      v244[1] = v73;
      if (v73)
      {
        v74 = &v73->u64[1];
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "reshape_kernel: invalid compute path for input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v244, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v244);
      goto LABEL_129;
    }
    v191 = off_1E2DD6178[v72];
    ANECTensorDescInitialize();
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v239, (NSString *)(a1 + 320), v9);
    v238 = 0;
    v237 = 0;
    v87 = *((unsigned __int8 *)v71 + 1281);
    v88 = HIDWORD(v268);
    v190 = HIDWORD(v259);
    if (v66 == v193
      && v67 == v196
      && v68 == v197
      && v69 == v194
      && v70 == v192
      && *((_QWORD *)&v268 + 1) == *((_QWORD *)&v259 + 1))
    {
      v89 = v68;
      v90 = v70;
      v91 = v69;
      v92 = v67;
LABEL_167:
      *(_QWORD *)&v242 = v69;
      *((_QWORD *)&v241 + 1) = (int)v67;
      *((_QWORD *)&v242 + 1) = v70;
      v243 = (int)v68;
      __p = v191;
      *(_QWORD *)&v241 = v66;
      v245 = (void **)v193;
      v246 = (int)v92;
      *(_QWORD *)&v247 = v91;
      *((_QWORD *)&v247 + 1) = v90;
      v248 = (int)v89;
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v267, v9))
      {
        v105 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v236[0] = *(int64x2_t **)a2;
        v236[1] = v105;
        if (v105)
        {
          v106 = &v105->u64[1];
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        std::string::basic_string[abi:ne180100]<0>(v201, "reshape_kernel: tensor exceed ANE limits.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v201, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v236, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
        if (SBYTE7(v202) < 0)
          operator delete(v201[0]);
        v104 = v236;
        goto LABEL_181;
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v258, v9))
      {
        v101 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v235[0] = *(int64x2_t **)a2;
        v235[1] = v101;
        if (v101)
        {
          v102 = &v101->u64[1];
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        std::string::basic_string[abi:ne180100]<0>(v201, "reshape_kernel: tensor exceed ANE limits.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v201, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v235, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
        if (SBYTE7(v202) < 0)
          operator delete(v201[0]);
        v104 = v235;
LABEL_181:
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v104);
        goto LABEL_355;
      }
LABEL_327:
      v169 = ANECValidateReshapeLayer();
      if (!v169)
      {
        is_valid_for_engine = 1;
        goto LABEL_356;
      }
      v170 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v203[0] = *(int64x2_t **)a2;
      v203[1] = v170;
      if (v170)
      {
        v171 = &v170->u64[1];
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
      std::to_string((std::string *)v231, v169);
      v173 = std::string::insert((std::string *)v231, 0, "reshape_kernel: ANECValidateReshapeLayer failed with status ");
      *(_OWORD *)v201 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
      *(_QWORD *)&v202 = *((_QWORD *)&v173->__r_.__value_.__l + 2);
      v173->__r_.__value_.__l.__size_ = 0;
      v173->__r_.__value_.__r.__words[2] = 0;
      v173->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v201, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v203, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (SBYTE7(v202) < 0)
        operator delete(v201[0]);
      if ((v231[23] & 0x80000000) != 0)
        operator delete(*(void **)v231);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v203);
      Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>((uint64_t)v201, v237, v238);
      for (i = (uint64_t **)v202; i; i = (uint64_t **)*i)
      {
        v175 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        v199 = *(int64x2_t **)a2;
        v200 = v175;
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        std::string::basic_string[abi:ne180100]<0>(v231, (char *)objc_msgSend(objc_retainAutorelease(i[2]), "UTF8String"));
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v231, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v199, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        v178 = v283;
        if (v283)
        {
          v179 = (unint64_t *)&v283->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        v228[0] = v282;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
        v228[0] = v281;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v280.__r_.__value_.__l.__data_);
        if ((v231[23] & 0x80000000) != 0)
          operator delete(*(void **)v231);
        v181 = v200;
        if (v200)
        {
          v182 = (unint64_t *)&v200->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v201);
LABEL_355:
      is_valid_for_engine = 0;
LABEL_356:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v239);
      goto LABEL_130;
    }
    v93 = *(_DWORD *)(a1 + 304);
    if (v93)
      v94 = 1;
    else
      v94 = (HIDWORD(v268) & HIDWORD(v259)) != -1;
    if (!v94)
    {
      v92 = v196;
      v89 = v197;
      v90 = v192;
      v91 = v194;
      goto LABEL_167;
    }
    if (!v93 && !v87 && (HIDWORD(v268) & HIDWORD(v259)) != -1)
    {
      *(_OWORD *)v201 = v267;
      v202 = v268;
      LODWORD(v201[0]) = v68;
      LODWORD(v201[1]) = v66;
      *(_OWORD *)&v280.__r_.__value_.__l.__data_ = xmmword_191A93360;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](&v232, (uint64_t *)&v280, 2uLL);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)v231, (uint64_t)v239, (uint64_t)&v267, (uint64_t)v191, (unsigned int **)&v232);
      if (v231[0])
      {
        if ((v231[31] & 0x80000000) != 0)
          operator delete(*(void **)&v231[8]);
        *(_OWORD *)v231 = v258;
        *(_OWORD *)&v231[16] = v259;
        *(_DWORD *)v231 = v197;
        *(_DWORD *)&v231[8] = v193;
        *(_QWORD *)&v95 = SHIDWORD(v201[1]);
        *((_QWORD *)&v95 + 1) = (int)v202;
        v96 = v95;
        __p = v191;
        v243 = v66;
        *(_QWORD *)&v95 = SLODWORD(v201[0]);
        *((_QWORD *)&v95 + 1) = SHIDWORD(v201[0]);
        v241 = v95;
        v242 = v96;
        v245 = (void **)(int)v197;
        v246 = SDWORD1(v258);
        *(_QWORD *)&v95 = SHIDWORD(v258);
        *((_QWORD *)&v95 + 1) = (int)v259;
        v247 = v95;
        v248 = v193;
        *(_OWORD *)v228 = *(_OWORD *)v231;
        v229 = v259;
        LODWORD(v228[0]) = v193;
        LODWORD(v228[1]) = v197;
        Espresso::ANECompilerEngine::validate_transpose((uint64_t)v225, (uint64_t)v239, (uint64_t)v231, (uint64_t)v191, (unsigned int **)&v232);
        if (LOBYTE(v225[0]))
        {
          if (v227 < 0)
            operator delete(v225[1]);
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v267, v9))
          {
            v125 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v221[0] = *(int64x2_t **)a2;
            v221[1] = v125;
            if (v125)
            {
              v126 = &v125->u64[1];
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v221, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v221;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v231, v9))
          {
            v138 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v220[0] = *(int64x2_t **)a2;
            v220[1] = v138;
            if (v138)
            {
              v139 = &v138->u64[1];
              do
                v140 = __ldxr(v139);
              while (__stxr(v140 + 1, v139));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v220, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v220;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v201, v9))
          {
            v152 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v219[0] = *(int64x2_t **)a2;
            v219[1] = v152;
            if (v152)
            {
              v153 = &v152->u64[1];
              do
                v154 = __ldxr(v153);
              while (__stxr(v154 + 1, v153));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v219, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v219;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v228, v9))
          {
            v97 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v218[0] = *(int64x2_t **)a2;
            v218[1] = v97;
            if (v97)
            {
              v98 = &v97->u64[1];
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v218, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v218;
LABEL_321:
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v100);
            goto LABEL_322;
          }
LABEL_211:
          v116 = 0;
LABEL_323:
          v168 = v232;
          if (!v232)
            goto LABEL_326;
          v233 = v232;
          goto LABEL_325;
        }
        v121 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v224[0] = *(int64x2_t **)a2;
        v224[1] = v121;
        if (v121)
        {
          v122 = &v121->u64[1];
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        std::operator+<char>();
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, &v222, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v224, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
        if (SHIBYTE(v223) < 0)
          operator delete((void *)v222);
        v124 = v224;
        goto LABEL_244;
      }
      v117 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v230[0] = *(int64x2_t **)a2;
      v230[1] = v117;
      if (v117)
      {
        v118 = &v117->u64[1];
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v228, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v230, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (SBYTE7(v229) < 0)
        operator delete(v228[0]);
      v120 = v230;
      goto LABEL_236;
    }
    if (v87)
      v108 = v93 == 0;
    else
      v108 = 0;
    if (v108 && (HIDWORD(v268) & HIDWORD(v259)) != -1)
    {
      *(_OWORD *)v201 = v267;
      v202 = v268;
      v195 = DWORD1(v267);
      *(int32x2_t *)((char *)v201 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v267 + 4));
      *(_OWORD *)&v280.__r_.__value_.__l.__data_ = xmmword_191A93900;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](&v232, (uint64_t *)&v280, 2uLL);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)v231, (uint64_t)v239, (uint64_t)&v267, (uint64_t)v191, (unsigned int **)&v232);
      if (v231[0])
      {
        if ((v231[31] & 0x80000000) != 0)
          operator delete(*(void **)&v231[8]);
        *(_OWORD *)v231 = v258;
        *(_OWORD *)&v231[16] = v259;
        *(_QWORD *)&v231[4] = __PAIR64__(v196, v197);
        *(_QWORD *)&v114 = SHIDWORD(v201[1]);
        *((_QWORD *)&v114 + 1) = (int)v202;
        v115 = v114;
        __p = v191;
        v243 = v195;
        *(_QWORD *)&v114 = SLODWORD(v201[0]);
        *((_QWORD *)&v114 + 1) = SHIDWORD(v201[0]);
        v241 = v114;
        v242 = v115;
        v245 = (void **)(int)v258;
        v246 = (int)v197;
        *(_QWORD *)&v114 = SHIDWORD(v258);
        *((_QWORD *)&v114 + 1) = (int)v259;
        v247 = v114;
        v248 = (int)v196;
        *(_OWORD *)v228 = *(_OWORD *)v231;
        v229 = v259;
        HIDWORD(v228[0]) = v196;
        LODWORD(v228[1]) = v197;
        Espresso::ANECompilerEngine::validate_transpose((uint64_t)v225, (uint64_t)v239, (uint64_t)v231, (uint64_t)v191, (unsigned int **)&v232);
        if (LOBYTE(v225[0]))
        {
          if (v227 < 0)
            operator delete(v225[1]);
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v267, v9))
          {
            v135 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v215[0] = *(int64x2_t **)a2;
            v215[1] = v135;
            if (v135)
            {
              v136 = &v135->u64[1];
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v215, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v215;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v231, v9))
          {
            v149 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v214[0] = *(int64x2_t **)a2;
            v214[1] = v149;
            if (v149)
            {
              v150 = &v149->u64[1];
              do
                v151 = __ldxr(v150);
              while (__stxr(v151 + 1, v150));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v214, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v214;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v201, v9))
          {
            v159 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v213[0] = *(int64x2_t **)a2;
            v213[1] = v159;
            if (v159)
            {
              v160 = &v159->u64[1];
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v213, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v213;
            goto LABEL_321;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v228, v9))
          {
            v165 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v212[0] = *(int64x2_t **)a2;
            v212[1] = v165;
            if (v165)
            {
              v166 = &v165->u64[1];
              do
                v167 = __ldxr(v166);
              while (__stxr(v167 + 1, v166));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v212, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v100 = v212;
            goto LABEL_321;
          }
          goto LABEL_211;
        }
        v132 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v216[0] = *(int64x2_t **)a2;
        v216[1] = v132;
        if (v132)
        {
          v133 = &v132->u64[1];
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        std::operator+<char>();
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, &v222, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v216, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
        if (SHIBYTE(v223) < 0)
          operator delete((void *)v222);
        v124 = v216;
LABEL_244:
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v124);
        if (v227 < 0)
        {
          v131 = v225[1];
          goto LABEL_246;
        }
        goto LABEL_322;
      }
      v128 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v217[0] = *(int64x2_t **)a2;
      v217[1] = v128;
      if (v128)
      {
        v129 = &v128->u64[1];
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v228, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v217, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (SBYTE7(v229) < 0)
        operator delete(v228[0]);
      v120 = v217;
LABEL_236:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v120);
      if ((v231[31] & 0x80000000) != 0)
      {
        v131 = *(void **)&v231[8];
LABEL_246:
        operator delete(v131);
      }
LABEL_322:
      v116 = 1;
      goto LABEL_323;
    }
    if (v87)
      v110 = (HIDWORD(v268) & HIDWORD(v259)) == -1;
    else
      v110 = 1;
    if (v93 != 1 || !v110)
      goto LABEL_327;
    v233 = 0;
    v232 = 0;
    v234 = 0;
    *(_OWORD *)v201 = v267;
    v202 = v268;
    HIDWORD(v201[0]) = v69;
    HIDWORD(v201[1]) = v70;
    LODWORD(v202) = DWORD1(v267);
    v280.__r_.__value_.__r.__words[0] = 0x200000003;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v232, &v280);
    v280.__r_.__value_.__r.__words[0] = 0x300000004;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v232, &v280);
    v280.__r_.__value_.__r.__words[0] = 0x400000002;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v232, &v280);
    if (v88 == 1)
    {
      LODWORD(v201[0]) = v68;
      LODWORD(v201[1]) = v66;
      v280.__r_.__value_.__r.__words[0] = 1;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v232, &v280);
      v280.__r_.__value_.__r.__words[0] = 0x100000000;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v232, &v280);
    }
    v111 = (uint64_t)v191;
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v231, (uint64_t)v239, (uint64_t)&v267, (uint64_t)v191, (unsigned int **)&v232);
    if (!v231[0])
    {
      v141 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v211[0] = *(int64x2_t **)a2;
      v211[1] = v141;
      if (v141)
      {
        v142 = &v141->u64[1];
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v228, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v211, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (SBYTE7(v229) < 0)
        operator delete(v228[0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v211);
      if ((v231[31] & 0x80000000) != 0)
        operator delete(*(void **)&v231[8]);
      v116 = 1;
LABEL_374:
      v168 = v232;
      if (!v232)
      {
LABEL_326:
        if (v116)
          goto LABEL_355;
        goto LABEL_327;
      }
LABEL_325:
      operator delete(v168);
      goto LABEL_326;
    }
    if ((v231[31] & 0x80000000) != 0)
      operator delete(*(void **)&v231[8]);
    *(_OWORD *)v231 = v258;
    *(_OWORD *)&v231[16] = v259;
    *(_DWORD *)&v231[4] = v194;
    *(_DWORD *)&v231[12] = v192;
    *(_DWORD *)&v231[16] = v196;
    if (v190 == 1)
    {
      v112 = v197;
      *(_DWORD *)v231 = v197;
      v113 = v193;
      *(_DWORD *)&v231[8] = v193;
    }
    else
    {
      v112 = *(_DWORD *)v231;
      v113 = *(_DWORD *)&v231[8];
    }
    *(_QWORD *)&v144 = SHIDWORD(v201[1]);
    *((_QWORD *)&v144 + 1) = (int)v202;
    v145 = v144;
    __p = v191;
    v243 = SLODWORD(v201[1]);
    *(_QWORD *)&v144 = SLODWORD(v201[0]);
    *((_QWORD *)&v144 + 1) = SHIDWORD(v201[0]);
    v241 = v144;
    v242 = v145;
    v245 = (void **)(int)v112;
    v246 = v194;
    *(_QWORD *)&v247 = v192;
    *((_QWORD *)&v247 + 1) = (int)v196;
    v248 = v113;
    v222 = 0uLL;
    v223 = 0;
    *(_OWORD *)v228 = *(_OWORD *)v231;
    v229 = *(_OWORD *)&v231[16];
    LODWORD(v229) = v192;
    HIDWORD(v228[1]) = v194;
    HIDWORD(v228[0]) = v196;
    v280.__r_.__value_.__r.__words[0] = 0x300000002;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v222, &v280);
    v280.__r_.__value_.__r.__words[0] = 0x400000003;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v222, &v280);
    v280.__r_.__value_.__r.__words[0] = 0x200000004;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v222, &v280);
    if (v190 == 1)
    {
      LODWORD(v228[0]) = v113;
      LODWORD(v228[1]) = v112;
      v280.__r_.__value_.__r.__words[0] = 1;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v222, &v280);
      v280.__r_.__value_.__r.__words[0] = 0x100000000;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v222, &v280);
      v111 = (uint64_t)v191;
    }
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v225, (uint64_t)v239, (uint64_t)v231, v111, (unsigned int **)&v222);
    if (LOBYTE(v225[0]))
    {
      if (v227 < 0)
        operator delete(v225[1]);
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v267, v9))
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v231, v9))
        {
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v201, v9))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v228, v9))
            {
              v116 = 0;
              goto LABEL_372;
            }
            v187 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v204[0] = *(int64x2_t **)a2;
            v204[1] = v187;
            if (v187)
            {
              v188 = &v187->u64[1];
              do
                v189 = __ldxr(v188);
              while (__stxr(v189 + 1, v188));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v204, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v158 = v204;
          }
          else
          {
            v184 = (int64x2_t *)*((_QWORD *)a2 + 1);
            v205[0] = *(int64x2_t **)a2;
            v205[1] = v184;
            if (v184)
            {
              v185 = &v184->u64[1];
              do
                v186 = __ldxr(v185);
              while (__stxr(v186 + 1, v185));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v205, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
            if (v226 < 0)
              operator delete(v225[0]);
            v158 = v205;
          }
        }
        else
        {
          v162 = (int64x2_t *)*((_QWORD *)a2 + 1);
          v206[0] = *(int64x2_t **)a2;
          v206[1] = v162;
          if (v162)
          {
            v163 = &v162->u64[1];
            do
              v164 = __ldxr(v163);
            while (__stxr(v164 + 1, v163));
          }
          std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v206, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
          if (v226 < 0)
            operator delete(v225[0]);
          v158 = v206;
        }
      }
      else
      {
        v155 = (int64x2_t *)*((_QWORD *)a2 + 1);
        v207[0] = *(int64x2_t **)a2;
        v207[1] = v155;
        if (v155)
        {
          v156 = &v155->u64[1];
          do
            v157 = __ldxr(v156);
          while (__stxr(v157 + 1, v156));
        }
        std::string::basic_string[abi:ne180100]<0>(v225, "reshape_kernel: tensor exceed ANE limits.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)v225, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v207, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
        if (v226 < 0)
          operator delete(v225[0]);
        v158 = v207;
      }
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v158);
    }
    else
    {
      v146 = (int64x2_t *)*((_QWORD *)a2 + 1);
      v210[0] = *(int64x2_t **)a2;
      v210[1] = v146;
      if (v146)
      {
        v147 = &v146->u64[1];
        do
          v148 = __ldxr(v147);
        while (__stxr(v148 + 1, v147));
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, &v208, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v210, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v280.__r_.__value_.__l.__data_);
      if (v209 < 0)
        operator delete((void *)v208);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v210);
      if (v227 < 0)
        operator delete(v225[1]);
    }
    v116 = 1;
LABEL_372:
    if ((_QWORD)v222)
      operator delete((void *)v222);
    goto LABEL_374;
  }
  v16 = *((_QWORD *)a2 + 1);
  v275 = *(int64x2_t **)a2;
  v276 = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dynamic shaping not supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v280, (__int128 *)&__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v275, (Espresso::base_kernel::validate_for_engine_warning_t *)&v280);
  v19 = v283;
  if (v283)
  {
    v20 = (unint64_t *)&v283->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v245 = (void **)v282;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
  v245 = (void **)v281;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v245);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (SHIBYTE(v241) < 0)
    operator delete(__p);
  is_valid_for_engine = v276;
  if (v276)
  {
    v22 = (unint64_t *)(v276 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    goto LABEL_127;
  }
LABEL_130:

  v83 = v279;
  if (v279)
  {
    v84 = (unint64_t *)&v279->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  return is_valid_for_engine;
}

void sub_190DD7A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *__p;
  void *v71;
  uint64_t v72;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v72 - 224));
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if (a66)
    operator delete(a66);
  if (STACK[0x260])
    operator delete((void *)STACK[0x260]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 240);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void **v19;
  Espresso::ANECompilerEngine *v20;
  NSString *v21;
  Espresso::ANECompilerEngine *v22;
  int v23;
  int64x2_t *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int64x2_t *v32;
  unint64_t *v33;
  unint64_t v34;
  int64x2_t **v35;
  int v36;
  int64x2_t *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int64x2_t *v43[2];
  int64x2_t *v44[2];
  int64x2_t *v45;
  uint64_t v46;
  void **v47;
  std::__shared_weak_count *v48;
  void *v49[2];
  char v50;
  std::string __p;
  _BYTE v52[24];
  _BYTE v53[32];
  std::__shared_weak_count *v54;
  int64x2_t *v55;
  std::__shared_weak_count *v56;
  void **v57;

  if (a1[83] || a1[82])
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v55 = *a2;
    v56 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "batchnorm_kernel: fused relu and fused tanh not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v49, a3, 0);
    Espresso::emit_kernel_validation_warning(&v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v54;
    if (v54)
    {
      v10 = (unint64_t *)&v54->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v47 = (void **)v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    v47 = (void **)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v50 < 0)
      operator delete(v49[0]);
    v12 = v56;
    if (v56)
    {
      v13 = (unint64_t *)&v56->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return 0;
  }
  v17 = *(_QWORD *)(a3 + 48);
  v47 = 0;
  v48 = 0;
  v18 = *(std::__shared_weak_count **)(v17 + 80);
  if (v18 && (v48 = std::__shared_weak_count::lock(v18)) != 0)
  {
    v19 = *(void ***)(v17 + 72);
    v47 = v19;
  }
  else
  {
    v19 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v19 + 59));
  v20 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v22 = v20;
  v23 = a1[94];
  if ((v23 - 4) > 0xFFFFFFFD)
  {
    if (v23 == 3 && Espresso::ANECompilerEngine::is_mix(v20, v21))
    {
      v32 = a2[1];
      v44[0] = *a2;
      v44[1] = v32;
      if (v32)
      {
        v33 = &v32->u64[1];
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      std::string::basic_string[abi:ne180100]<0>(v49, "batchnorm_kernel: 3D not supported on requested architecture");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v49, a3, 0);
      Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v50 < 0)
        operator delete(v49[0]);
      v35 = v44;
    }
    else
    {
      if (!a1[77] || (v36 = a1[78]) == 0 || v36 == 1 && !Espresso::ANECompilerEngine::is_mix(v22, v21))
      {
        v15 = 1;
        goto LABEL_65;
      }
      v37 = a2[1];
      v43[0] = *a2;
      v43[1] = v37;
      if (v37)
      {
        v38 = &v37->u64[1];
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      std::string::basic_string[abi:ne180100]<0>(v49, "batchnorm_kernel: instancenorm is not supported for ANE");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v49, a3, 0);
      Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v50 < 0)
        operator delete(v49[0]);
      v35 = v43;
    }
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v35);
  }
  else
  {
    v24 = a2[1];
    v45 = *a2;
    v46 = (uint64_t)v24;
    if (v24)
    {
      v25 = &v24->u64[1];
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "batchnorm_kernel: only 2D/3D is supported on ANE");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v49, a3, 0);
    Espresso::emit_kernel_validation_warning(&v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v54;
    if (v54)
    {
      v28 = (unint64_t *)&v54->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v57 = (void **)v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
    v57 = (void **)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v50 < 0)
      operator delete(v49[0]);
    v15 = v46;
    if (!v46)
      goto LABEL_65;
    v30 = (unint64_t *)(v46 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
    }
  }
  v15 = 0;
LABEL_65:

  v40 = v48;
  if (v48)
  {
    v41 = (unint64_t *)&v48->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v15;
}

void sub_190DD85C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  void *v23;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a23);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::split_nd_kernel::is_valid_for_engine(int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const Espresso::net *v18;
  void *v19;
  _QWORD *v20;
  __CFString *ANECAxisForNDAxis;
  NSString *v22;
  __CFString *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  int is_mix;
  int v42;
  char *v43;
  int v44;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  int64x2_t *v68;
  uint64_t v69;
  int64x2_t *v70;
  uint64_t v71;
  int64x2_t *v72;
  uint64_t v73;
  void *v74[2];
  char v75;
  std::string v76;
  _QWORD v77[3];
  _BYTE v78[32];
  std::__shared_weak_count *v79;
  int64x2_t *v80;
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  void *__p;
  void *v85;
  uint64_t v86;
  const Espresso::net *v87;
  std::__shared_weak_count *v88;
  _DWORD v89[6];
  int v90;
  const Espresso::net *v91;
  std::__shared_weak_count *v92;
  void **v93;

  v6 = a3[6];
  v91 = 0;
  v92 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v8 = std::__shared_weak_count::lock(v7), (v92 = v8) != 0))
  {
    v9 = *(const Espresso::net **)(v6 + 72);
    v91 = v9;
    v87 = v9;
    v88 = v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v9 = 0;
    v87 = 0;
    v88 = 0;
  }
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 32);
  v14 = *(_OWORD *)(*a3 + 16);
  v82[0] = *(_OWORD *)*a3;
  v82[1] = v14;
  v83 = v13;
  __p = 0;
  v85 = 0;
  v86 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v12 + 40), *(_QWORD *)(v12 + 48), (uint64_t)(*(_QWORD *)(v12 + 48) - *(_QWORD *)(v12 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v89, v9, (const Espresso::layer_shape *)v82, 1);
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  v15 = v88;
  if (v88)
  {
    v16 = (unint64_t *)&v88->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v91;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v91 + 472);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v89, v19))
  {
    v34 = *(_QWORD *)(a2 + 8);
    v80 = *(int64x2_t **)a2;
    v81 = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "[Unsupported Split_nd] Incompatible Input Size");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v76, (__int128 *)v74, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v76);
    v37 = v79;
    if (v79)
    {
      v38 = (unint64_t *)&v79->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v93 = (void **)v78;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
    v93 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v75 < 0)
      operator delete(v74[0]);
    v31 = v81;
    if (v81)
    {
      v40 = (unint64_t *)(v81 + 8);
      do
        v33 = __ldaxr(v40);
      while (__stlxr(v33 - 1, v40));
      goto LABEL_52;
    }
    goto LABEL_95;
  }
  v20 = *(_QWORD **)(*(_QWORD *)a3[6] + 224 * a3[9] + 136);
  ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)((v90 & (a1[70] >> 31)) + a1[70]), v90, 0);
  v23 = ANECAxisForNDAxis;
  v24 = ANECAxisForNDAxis == CFSTR("Depth") || ANECAxisForNDAxis == CFSTR("Batch");
  if (v24 && Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v19, v22))
  {
    v25 = *(_QWORD *)(a2 + 8);
    v72 = *(int64x2_t **)a2;
    v73 = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "[Unsupported Split_nd] Split along Batch and Depth not supported on pre-H13");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v76, (__int128 *)v74, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v72, (Espresso::base_kernel::validate_for_engine_warning_t *)&v76);
    v28 = v79;
    if (v79)
    {
      v29 = (unint64_t *)&v79->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v93 = (void **)v78;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
    v93 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v75 < 0)
      operator delete(v74[0]);
    v31 = v73;
    if (v73)
    {
      v32 = (unint64_t *)(v73 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      goto LABEL_52;
    }
    goto LABEL_95;
  }
  is_mix = Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v19, v22);
  if (v23 == CFSTR("Width"))
    v42 = is_mix;
  else
    v42 = 0;
  if (v42 != 1)
    goto LABEL_94;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v18 + 45), v20))
  {
    v74[0] = v20;
    v43 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v18 + 44, v20, (uint64_t)&std::piecewise_construct, (__int128 **)v74);
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)(v43 + 56);
    v77[0] = 0;
    v77[1] = 0;
    v76.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76.__r_.__value_.__r.__words[2], *((const void **)v43 + 9), *((_QWORD *)v43 + 10), (uint64_t)(*((_QWORD *)v43 + 10) - *((_QWORD *)v43 + 9)) >> 2);
    v44 = v76.__r_.__value_.__r.__words[1];
    if (LODWORD(v76.__r_.__value_.__r.__words[1]) == -1)
      v44 = a1[253];
    if (v76.__r_.__value_.__r.__words[2])
    {
      v77[0] = *((_QWORD *)&v76.__r_.__value_.__l + 2);
      operator delete((void *)v76.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v44 = a1[253];
  }
  if (v44 == 4 || v44 == 2)
    v46 = 64;
  else
    v46 = 32;
  if (a1[72])
  {
    v47 = 0;
    v48 = v46 - 1;
    while (1)
    {
      v49 = a1[v47 + 72];
      if (!v49)
        goto LABEL_94;
      if ((v49 & v48) != 0)
      {
        v61 = *(_QWORD *)(a2 + 8);
        v68 = *(int64x2_t **)a2;
        v69 = v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        std::string::basic_string[abi:ne180100]<0>(v74, "[Unsupported Split_nd] Invalid Width alignment");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v76, (__int128 *)v74, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&v76);
        v64 = v79;
        if (v79)
        {
          v65 = (unint64_t *)&v79->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v93 = (void **)v78;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
        v93 = (void **)v77;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (v75 < 0)
          operator delete(v74[0]);
        v31 = v69;
        if (v69)
        {
          v67 = (unint64_t *)(v69 + 8);
          do
            v33 = __ldaxr(v67);
          while (__stlxr(v33 - 1, v67));
          goto LABEL_52;
        }
        goto LABEL_95;
      }
      if (++v47 == 128)
        goto LABEL_94;
    }
  }
  if (((v89[4] / a1[71]) & (v46 - 1)) == 0)
  {
LABEL_94:
    v31 = 1;
    goto LABEL_95;
  }
  v50 = *(_QWORD *)(a2 + 8);
  v70 = *(int64x2_t **)a2;
  v71 = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  std::string::basic_string[abi:ne180100]<0>(v74, "[Unsupported Split_nd] Invalid Width alignment");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v76, (__int128 *)v74, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v76);
  v53 = v79;
  if (v79)
  {
    v54 = (unint64_t *)&v79->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v93 = (void **)v78;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
  v93 = (void **)v77;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v93);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v75 < 0)
    operator delete(v74[0]);
  v31 = v71;
  if (v71)
  {
    v56 = (unint64_t *)(v71 + 8);
    do
      v33 = __ldaxr(v56);
    while (__stlxr(v33 - 1, v56));
LABEL_52:
    if (!v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
    }
    v31 = 0;
  }
LABEL_95:

  v57 = v92;
  if (v92)
  {
    v58 = (unint64_t *)&v92->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return v31;
}

void sub_190DD8D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  void *v44;
  uint64_t v45;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 88);
  _Unwind_Resume(a1);
}

const __CFString *Espresso::ANECompilerEngine::GetANECAxisForNDAxis(Espresso::ANECompilerEngine *this, uint64_t a2, char a3)
{
  int v3;
  const __CFString *result;

  if ((this & 0x80000000) == 0)
  {
    v3 = a2 + ~(_DWORD)this;
    result = CFSTR("Height");
    switch(v3)
    {
      case 0:
        return CFSTR("Width");
      case 1:
        return result;
      case 2:
        if (a2 != 5 || (a3 & 1) == 0)
          return CFSTR("Channel");
        return CFSTR("Depth");
      case 3:
        result = CFSTR("Batch");
        if (a2 == 5 && (a3 & 1) != 0)
          return CFSTR("Channel");
        return result;
      case 4:
        if (a2 == 5 && (a3 & 1) != 0)
          return CFSTR("Batch");
        else
          return CFSTR("Depth");
      default:
        break;
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

BOOL Espresso::MPSEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v5;
  int v6;
  _BYTE v7[20];
  int v8;

  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3 || *(_BYTE *)(a1 + 285))
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (v8 >= 4)
  {
    result = 0;
    v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
    if (v5 >= 0 && v5 < v8)
    {
      v6 = v8 + ~v5;
      if (!*(_BYTE *)(a1 + 284))
        v6 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      return v6 == 2;
    }
  }
  return result;
}

BOOL Espresso::MPSEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 336) || *(_BYTE *)(a1 + 344) || *(_DWORD *)(a1 + 348) || *(_DWORD *)(a1 + 340) == 5)
    return 0;
  v4 = *a3;
  if (*a3 == a3[1])
    return 1;
  v5 = *(_DWORD *)(v4 + 20);
  if (v5 == -1)
  {
    if (*(_DWORD *)(v4 + 16) == 1)
      v5 = 4;
    else
      v5 = 5;
  }
  return v5 > 3;
}

uint64_t Espresso::MPSEngine::activation_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (*(_QWORD *)(a1 + 416))
    return 1;
  v4 = *(_QWORD *)(a1 + 424);
  if (!v4)
    return 0;
  v5 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 200))(v4, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v2;
}

void sub_190DD9124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL Espresso::DummyMPSEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v5;
  int v6;
  _BYTE v7[20];
  int v8;

  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3 || *(_BYTE *)(a1 + 285))
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (v8 >= 4)
  {
    result = 0;
    v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
    if (v5 >= 0 && v5 < v8)
    {
      v6 = v8 + ~v5;
      if (!*(_BYTE *)(a1 + 284))
        v6 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      return v6 == 2;
    }
  }
  return result;
}

BOOL Espresso::DummyMPSEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 336)
    || *(_BYTE *)(a1 + 344)
    || *(_DWORD *)(a1 + 348)
    || *(_DWORD *)(a1 + 340) == 5
    || *(_DWORD *)(a1 + 404))
  {
    return 0;
  }
  v4 = *a3;
  if (*a3 == a3[1])
    return 1;
  v5 = *(_DWORD *)(v4 + 20);
  if (v5 == -1)
  {
    if (*(_DWORD *)(v4 + 16) == 1)
      v5 = 4;
    else
      v5 = 5;
  }
  return v5 > 3;
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;

  v17 = a4;
  v16 = 256;
  v14 = xmmword_191A93370;
  v15 = 1;
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DD933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::softmax_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 48))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v25 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "is_plain_sigmoid");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v28 = v44;
    if (v44)
    {
      v29 = (unint64_t *)&v44->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "is_log_softmax");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 26) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v31 = v44;
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "softmax_cross_entropy_loss");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "reduce_cross_entropy");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 25) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v37 = v44;
    if (v44)
    {
      v38 = (unint64_t *)&v44->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 27) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_122;
    v40 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v40);
    while (__stlxr(v24 - 1, v40));
    goto LABEL_120;
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 168))(v43, __p, a2 + 4);
  if (v46 < 0)
    operator delete(__p[0]);
  v5 = v44;
  if (v44)
  {
    v6 = (unint64_t *)&v44->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "is_plain_sigmoid");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 20);
    if (v46 < 0)
      operator delete(__p[0]);
    v8 = v44;
    if (v44)
    {
      v9 = (unint64_t *)&v44->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (*(_BYTE *)(a2 + 26))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "is_log_softmax");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 26);
    if (v46 < 0)
      operator delete(__p[0]);
    v11 = v44;
    if (v44)
    {
      v12 = (unint64_t *)&v44->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (*(_BYTE *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "softmax_cross_entropy_loss");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 24);
    if (v46 < 0)
      operator delete(__p[0]);
    v14 = v44;
    if (v44)
    {
      v15 = (unint64_t *)&v44->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (!*(_BYTE *)(a2 + 25))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "reduce_cross_entropy");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 25);
    if (v46 < 0)
      operator delete(__p[0]);
    v17 = v44;
    if (v44)
    {
      v18 = (unint64_t *)&v44->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  v21 = *(unsigned __int8 *)(a2 + 27);
  v20 = a2 + 27;
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, v20);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_122;
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_120:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_122:
    if (v42 < 0)
      operator delete(v41[0]);
  }
}

void sub_190DD9B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t Espresso::net::restore_precompilation_info(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  Espresso *v4;
  const char *v5;
  __int128 v6;
  uint64_t v7;
  Espresso *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36[2];
  __int128 v37;
  __int128 v38;
  void *__p[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38 = 0uLL;
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "ANE_COMPILER");
  v4 = (Espresso *)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 120))(&v37, v3, __p);
  v6 = v37;
  v37 = 0uLL;
  v38 = v6;
  if (v40 < 0)
  {
    v35 = v6;
    operator delete(__p[0]);
    *(_QWORD *)&v6 = v35;
  }
  v7 = v6;
  if (!(_QWORD)v6)
  {
    Espresso::espresso_os_log_subsystem(v4, v5);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v33 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v33;
      _os_log_error_impl(&dword_190DAF000, v23, OS_LOG_TYPE_ERROR, "Precompilation info not found for engine: %s", (uint8_t *)__p, 0xCu);
    }

    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_validation_status");
  v8 = (Espresso *)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 120))(&v37, v7, __p);
  if (v40 < 0)
    operator delete(__p[0]);
  v10 = v37;
  if ((_QWORD)v37)
  {
    v11 = *(_QWORD *)(a1 + 712);
    v12 = v37;
    if (!v11)
    {
      v13 = (char *)operator new(0xB0uLL);
      v14 = (uint64_t *)(a1 + 712);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = &off_1E2DBDC08;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *((_QWORD *)v13 + 12) = v13 + 104;
      *((_QWORD *)v13 + 17) = 0;
      *((_QWORD *)v13 + 16) = 0;
      *((_QWORD *)v13 + 15) = v13 + 128;
      *((_QWORD *)v13 + 21) = 0;
      *((_QWORD *)v13 + 20) = 0;
      *((_QWORD *)v13 + 19) = v13 + 160;
      __p[0] = v13 + 24;
      __p[1] = v13;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)__p);
      v15 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v16 = (unint64_t *)((char *)__p[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v11 = *v14;
      v12 = v37;
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    v36[0] = v12;
    v36[1] = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    Espresso::kernels_validation_status_t::restore(v11, v36);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v8, v9);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v34 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v34;
      _os_log_error_impl(&dword_190DAF000, v24, OS_LOG_TYPE_ERROR, "Validation status info not found for engine: %s", (uint8_t *)__p, 0xCu);
    }

  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v10)
        goto LABEL_33;
LABEL_35:
      v28 = 0;
      goto LABEL_36;
    }
  }
  if (!v10)
    goto LABEL_35;
LABEL_33:
  v28 = 1;
LABEL_36:
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v28;
}

void sub_190DD9F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *i;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *context;
  std::string *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  std::string v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;

  context = (void *)MEMORY[0x19401D4A4]();
  v4 = *a2;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v4 + 32))(v4, &v27);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v5 = v27;
  for (i = v28; v5 != i; v5 = (__int128 *)((char *)v5 + 24))
  {
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v7 = *v5;
      v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
    }
    LODWORD(v22) = 1065353216;
    *(_QWORD *)((char *)&v22 + 4) = 0xFFFFFFFF00000000;
    HIDWORD(v22) = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)&v26, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, (uint64_t)&v20);
    if (v19 < 0)
      operator delete(__p);
    v8 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v20, (uint64_t)&v22, 0);
    v16 = &v26;
    v11 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, &v26, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    *(_OWORD *)(v11 + 56) = v22;
    if (v11 + 56 != (char *)&v22)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11 + 72, (char *)v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
    v12 = v21;
    if (v21)
    {
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v22 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  objc_autoreleasePoolPop(context);
}

void sub_190DDA1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  a18 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v15, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x60uLL);
    v13[0] = v7;
    v13[1] = a1 + 1;
    v14 = 0;
    v9 = (std::string *)(v7 + 32);
    v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      *((_QWORD *)v7 + 6) = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    *((_DWORD *)v7 + 14) = 1065353216;
    *(_QWORD *)(v7 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v7 + 17) = 1;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 11) = 0;
    *((_QWORD *)v7 + 9) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
  return v7;
}

void sub_190DDA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const std::string::value_type *p_p;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  std::string *v38;
  uint64_t *v39;
  uint64_t *v40;
  void **v41;
  int v42;
  int v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  void *__p;
  uint64_t *v56;
  unsigned __int8 v57;
  std::string v58;
  char v59;
  void **v60;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.ratio_to_float_model");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
    if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                          + 24))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]))
    {
      *(float *)a2 = (*(float (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                               + 96))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]);
    }
    if (v59 < 0)
      operator delete((void *)v58.__r_.__value_.__r.__words[2]);
    size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (v58.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if ((char)v57 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.is_signed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
    if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                          + 24))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]))
    {
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_ + 40))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]);
    }
    if (v59 < 0)
      operator delete((void *)v58.__r_.__value_.__r.__words[2]);
    v18 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (v58.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((char)v57 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
    if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                          + 24))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]))
    {
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_ + 40))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]);
    }
    if (v59 < 0)
      operator delete((void *)v58.__r_.__value_.__r.__words[2]);
    v12 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (!v58.__r_.__value_.__l.__size_)
      goto LABEL_58;
    v21 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v21);
    while (__stlxr(v14 - 1, v21));
    goto LABEL_56;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.ratio_to_float_model");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
  (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                    + 216))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2], a2);
  if (v59 < 0)
    operator delete((void *)v58.__r_.__value_.__r.__words[2]);
  v6 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((char)v57 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.is_signed");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
  (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                    + 160))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2], a2 + 4);
  if (v59 < 0)
    operator delete((void *)v58.__r_.__value_.__r.__words[2]);
  v9 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((char)v57 < 0)
    operator delete(__p);
  if (*(_DWORD *)(a2 + 8) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
    (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                      + 160))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2], a2 + 8);
    if (v59 < 0)
      operator delete((void *)v58.__r_.__value_.__r.__words[2]);
    v12 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (!v58.__r_.__value_.__l.__size_)
      goto LABEL_58;
    v13 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
LABEL_56:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
LABEL_58:
    if ((char)v57 < 0)
      operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ane_interleave_factor");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
  v22 = (_DWORD *)(a2 + 12);
  if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                        + 24))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]))
  {
    *v22 = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                       + 40))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]);
  }
  if (v59 < 0)
    operator delete((void *)v58.__r_.__value_.__r.__words[2]);
  v23 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if ((char)v57 < 0)
  {
    operator delete(__p);
    if (!a3)
      goto LABEL_83;
  }
  else if (!a3)
  {
    goto LABEL_83;
  }
  if (*v22 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "interleave_factor");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
    (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                      + 160))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2], a2 + 12);
    if (v59 < 0)
      operator delete((void *)v58.__r_.__value_.__r.__words[2]);
    v26 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (v58.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if ((char)v57 < 0)
      operator delete(__p);
    goto LABEL_84;
  }
LABEL_83:
  if ((a3 & 1) != 0)
  {
LABEL_84:
    v29 = *(_QWORD *)(a2 + 16);
    if (v29 == *(_QWORD *)(a2 + 24))
      return;
    v30 = 0;
    memset(&v58, 0, sizeof(v58));
    do
    {
      Espresso::convert_supported_4cc_uint_to_string((Espresso *)&__p, *(_DWORD *)(v29 + 4 * v30));
      if ((v57 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v57 & 0x80u) == 0)
        v32 = v57;
      else
        v32 = (std::string::size_type)v56;
      std::string::append(&v58, p_p, v32);
      if (v30 < ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2) - 1)
        std::string::append(&v58, ",");
      if ((char)v57 < 0)
        operator delete(__p);
      ++v30;
      v29 = *(_QWORD *)(a2 + 16);
    }
    while (v30 < (*(_QWORD *)(a2 + 24) - v29) >> 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "supported_4cc_formats");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)a1 + 232))(a1, &__p, &v58);
    if ((char)v57 < 0)
      operator delete(__p);
LABEL_141:
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_142;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "interleave_factor");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v58);
  if ((*(unsigned int (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                        + 24))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]))
  {
    *v22 = (*(uint64_t (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v58.__r_.__value_.__l.__data_
                                                                                       + 40))(v58.__r_.__value_.__r.__words[0], &v58.__r_.__value_.__r.__words[2]);
  }
  if (v59 < 0)
    operator delete((void *)v58.__r_.__value_.__r.__words[2]);
  v33 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if ((char)v57 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v58, "supported_4cc_formats");
  v36 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 24))(a1, &v58);
  v37 = v36;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v58.__r_.__value_.__l.__data_);
    if (!v37)
      return;
  }
  else if (!v36)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "supported_4cc_formats");
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 112))(&v58, a1, &__p);
  if ((char)v57 < 0)
    operator delete(__p);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&v58.__r_.__value_.__s + 23))
      return;
    v38 = &v58;
    goto LABEL_121;
  }
  if (v58.__r_.__value_.__l.__size_)
  {
    v38 = (std::string *)v58.__r_.__value_.__r.__words[0];
LABEL_121:
    Espresso::string_split((Espresso *)&__p, (char *)v38);
    v39 = (uint64_t *)__p;
    v40 = v56;
    if (__p != v56)
    {
      v41 = (void **)(a2 + 16);
      do
      {
        v42 = Espresso::convert_supported_4cc_string_to_uint(v39);
        v43 = v42;
        v45 = *(char **)(a2 + 24);
        v44 = *(_QWORD *)(a2 + 32);
        if ((unint64_t)v45 >= v44)
        {
          v47 = (char *)*v41;
          v48 = (v45 - (_BYTE *)*v41) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v50 = v44 - (_QWORD)v47;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
            v47 = *(char **)(a2 + 16);
            v45 = *(char **)(a2 + 24);
          }
          else
          {
            v52 = 0;
          }
          v53 = (_DWORD *)(v51 + 4 * v48);
          *v53 = v43;
          v46 = v53 + 1;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *--v53 = v54;
          }
          *(_QWORD *)(a2 + 16) = v53;
          *(_QWORD *)(a2 + 24) = v46;
          *(_QWORD *)(a2 + 32) = v51 + 4 * v52;
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v45 = v42;
          v46 = v45 + 4;
        }
        *(_QWORD *)(a2 + 24) = v46;
        v39 += 3;
      }
      while (v39 != v40);
    }
    v60 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v60);
    goto LABEL_141;
  }
LABEL_142:
  operator delete(v58.__r_.__value_.__l.__data_);
}

void sub_190DDABBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_shape_with_key(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *i;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  std::__shared_weak_count *v26;
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  _BYTE __p[24];
  __int128 v33;
  uint64_t v34;
  std::string v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v6 = (void *)MEMORY[0x19401D4A4]();
  v39 = 0;
  v40 = 0;
  Espresso::SerDes::generic_serdes_object::operator[](a1, a3, &v31);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v31, (uint64_t)&v39);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v39;
  if (!v39)
    Espresso::throw_exception_selector<Espresso::io_error>("Error reading layer shapes");
  v36 = 0;
  v37 = 0;
  v38 = 0;
  (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v39 + 32))(v39, &v36);
  v11 = v36;
  for (i = v37; v11 != i; v11 = (__int128 *)((char *)v11 + 24))
  {
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v13 = *v11;
      v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    }
    v34 = 0;
    *(_OWORD *)&__p[8] = 0u;
    v33 = 0u;
    v31 = xmmword_191A8AA80;
    *(_QWORD *)__p = 0xFFFFFFFF00000001;
    v29 = 0;
    v30 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v10, (uint64_t)&v35, &v25);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v25, (uint64_t)&v29);
    if (v28 < 0)
      operator delete(v27);
    v14 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    Espresso::SerDes::params_io<Espresso::layer_shape>(v29, (uint64_t)&v31, 0);
    v25 = &v35;
    v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, &v35, (__int128 **)&v25);
    v18 = *(_OWORD *)__p;
    *(_OWORD *)(v17 + 56) = v31;
    *(_OWORD *)(v17 + 72) = v18;
    *((_QWORD *)v17 + 11) = *(_QWORD *)&__p[16];
    if (v17 + 56 != (char *)&v31)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v17 + 96, (char *)v33, *((uint64_t *)&v33 + 1), (uint64_t)(*((_QWORD *)&v33 + 1) - v33) >> 2);
    v19 = v30;
    if (v30)
    {
      v20 = (unint64_t *)&v30->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((_QWORD)v33)
    {
      *((_QWORD *)&v33 + 1) = v33;
      operator delete((void *)v33);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v31 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v22 = v40;
  if (v40)
  {
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  objc_autoreleasePoolPop(v6);
}

void sub_190DDAF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  a19 = v32 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 112);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &v8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void Espresso::SerDes::serdes_object_json_objc::get_obj(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string *v9;
  __int128 v10;
  id v11;
  std::string v12;
  std::string v13;
  _QWORD v14[2];

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(v14, v11);
  if (!*(_QWORD *)(v14[0] + 24))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" not found");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = (std::__shared_weak_count *)v14[1];
  *a3 = v14[0];
  a3[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

}

void sub_190DDB1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 48);

      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::SerDes::params_io<Espresso::layer_shape>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  int v73;
  void *v74;
  void *v75[2];
  char v76;
  void *v77[2];
  void *__p[2];
  char v79;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v75, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2);
    if (v79 < 0)
      operator delete(__p[0]);
    v5 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v6 = (unint64_t *)((char *)v77[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2 + 4);
    if (v79 < 0)
      operator delete(__p[0]);
    v8 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v9 = (unint64_t *)((char *)v77[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2 + 12);
    if (v79 < 0)
      operator delete(__p[0]);
    v11 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v12 = (unint64_t *)((char *)v77[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2 + 8);
    if (v79 < 0)
      operator delete(__p[0]);
    v14 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v15 = (unint64_t *)((char *)v77[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2 + 16);
      if (v79 < 0)
        operator delete(__p[0]);
      v17 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v18 = (unint64_t *)((char *)v77[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    if (*(_DWORD *)(a2 + 20) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "_rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 160))(v77[0], __p, a2 + 20);
      if (v79 < 0)
        operator delete(__p[0]);
      v20 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v21 = (unint64_t *)((char *)v77[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    if (*(_DWORD *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "ane_row_stride_bytes");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 168))(v77[0], __p, a2 + 24);
      if (v79 < 0)
        operator delete(__p[0]);
      v23 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v24 = (unint64_t *)((char *)v77[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "ane_plane_stride_bytes");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 168))(v77[0], __p, a2 + 28);
      if (v79 < 0)
        operator delete(__p[0]);
      v26 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v27 = (unint64_t *)((char *)v77[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    if (*(_DWORD *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "ane_circular_buffer_nd_axis");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 168))(v77[0], __p, a2 + 32);
      if (v79 < 0)
        operator delete(__p[0]);
      v29 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v30 = (unint64_t *)((char *)v77[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    if (*(_DWORD *)(a2 + 36))
    {
      std::string::basic_string[abi:ne180100]<0>(v75, "ane_circular_buffer_size");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v77[0] + 168))(v77[0], __p, a2 + 36);
      if (v79 < 0)
        operator delete(__p[0]);
      v32 = (std::__shared_weak_count *)v77[1];
      if (v77[1])
      {
        v33 = (unint64_t *)((char *)v77[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v76 < 0)
        operator delete(v75[0]);
    }
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_QWORD *)(a2 + 48);
    v37 = a2 + 40;
    if (v36 != v35)
    {
      std::string::basic_string[abi:ne180100]<0>(v77, "multiplanar_row_stride_bytes_per_plane");
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 264))(a1, v77, v37);
      if (SHIBYTE(__p[0]) < 0)
      {
        v38 = v77[0];
LABEL_230:
        operator delete(v38);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v75, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v39 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v40 = (unint64_t *)((char *)v77[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v42 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v43 = (unint64_t *)((char *)v77[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v45 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v46 = (unint64_t *)((char *)v77[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "c");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v48 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v49 = (unint64_t *)((char *)v77[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v51 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v52 = (unint64_t *)((char *)v77[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v54 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v55 = (unint64_t *)((char *)v77[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 40))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v57 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v58 = (unint64_t *)((char *)v77[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "ane_row_stride_bytes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 48))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v60 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v61 = (unint64_t *)((char *)v77[1] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "ane_plane_stride_bytes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 48))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v63 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v64 = (unint64_t *)((char *)v77[1] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "ane_circular_buffer_nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 48))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v66 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v67 = (unint64_t *)((char *)v77[1] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v75, "ane_circular_buffer_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v75, v77);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v77[0] + 24))(v77[0], __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v77[0] + 48))(v77[0], __p);
    if (v79 < 0)
      operator delete(__p[0]);
    v69 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v70 = (unint64_t *)((char *)v77[1] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    std::string::basic_string[abi:ne180100]<0>(v77, "multiplanar_row_stride_bytes_per_plane");
    v72 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, v77);
    v73 = v72;
    if (SHIBYTE(__p[0]) < 0)
    {
      operator delete(v77[0]);
      if (!v73)
        return;
    }
    else if (!v72)
    {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v75, "multiplanar_row_stride_bytes_per_plane");
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 144))(v77, a1, v75);
    v74 = *(void **)(a2 + 40);
    if (v74)
    {
      *(_QWORD *)(a2 + 48) = v74;
      operator delete(v74);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v77;
    *(void **)(a2 + 56) = __p[0];
    v77[1] = 0;
    __p[0] = 0;
    v77[0] = 0;
    if (v76 < 0)
    {
      v38 = v75[0];
      goto LABEL_230;
    }
  }
}

void sub_190DDC0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_uint(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "unsignedIntValue");

  return v4;
}

void sub_190DDC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::string_split(Espresso *this, char *a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 v5;
  std::string *v6;
  std::string __p;
  _QWORD v8[12];
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (!a2)
    Espresso::throw_exception_selector<Espresso::generic_error>("string to be split cannot be empty or nullptr");
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v11 = 0uLL;
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  std::istringstream::basic_istringstream[abi:ne180100](v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  while (1)
  {
    v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&v11, 0x2Cu);
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
      break;
    v4 = *((_QWORD *)this + 1);
    if (v4 >= *((_QWORD *)this + 2))
    {
      v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)this, (uint64_t)&v11);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)this + 1), (const std::string::value_type *)v11, *((std::string::size_type *)&v11 + 1));
      }
      else
      {
        v5 = v11;
        *(_QWORD *)(v4 + 16) = v12;
        *(_OWORD *)v4 = v5;
      }
      v6 = (std::string *)(v4 + 24);
      *((_QWORD *)this + 1) = v4 + 24;
    }
    *((_QWORD *)this + 1) = v6;
  }
  v8[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v8[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401CCD0](&v10);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_190DDC48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  Espresso *v26;
  const char *v27;
  Espresso *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  Espresso *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  _QWORD *i;
  _QWORD *v40;
  uint64_t *v41;
  __int128 *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  NSObject *v49;
  char *v50;
  __int128 v51;
  void *v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  __int128 v56;
  void *v57;
  _QWORD *v58;
  char *v59;
  __int128 v60;
  const void *v61;
  __int128 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  __int128 v66;
  const void *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v76;
  void *__p[2];
  uint64_t v78;
  __int128 *v79;
  __int128 *v80;
  unint64_t v81;
  int v82;
  _OWORD v83[2];
  int v84;
  _QWORD v85[4];
  int v86;
  uint64_t v87;
  __int128 *v88;
  _BYTE buf[32];
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  __int128 v94;

  *((_QWORD *)&v94 + 1) = *MEMORY[0x1E0C80C00];
  v87 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  memset(v85, 0, sizeof(v85));
  v86 = 1065353216;
  memset(v83, 0, sizeof(v83));
  v84 = 1065353216;
  v79 = 0;
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))
  {
    do
    {
      *(_QWORD *)buf = &v79;
      v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, (unint64_t *)&v79, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v6 = (unsigned __int8 *)v5[3];
      v7 = (unsigned __int8 *)v5[4];
      v8 = v6;
      if (v6 != v7)
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v6))
          {
            v9 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v6);
            *(_QWORD *)buf = v6;
            v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v6, (__int128 **)buf);
            v11 = *(_OWORD *)(v9 + 40);
            v12 = *(_OWORD *)(v9 + 56);
            *((_QWORD *)v10 + 11) = *((_QWORD *)v9 + 9);
            *(_OWORD *)(v10 + 72) = v12;
            *(_OWORD *)(v10 + 56) = v11;
            if (v10 + 32 != (char *)(v9 + 16))
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 96, *((char **)v9 + 10), *((_QWORD *)v9 + 11), (uint64_t)(*((_QWORD *)v9 + 11) - *((_QWORD *)v9 + 10)) >> 2);
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v85, (uint64_t)v6))
          {
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v83, (unint64_t *)&v79, &v79);
          }
          v6 += 24;
        }
        while (v6 != v7);
        v6 = (unsigned __int8 *)v5[3];
        v8 = (unsigned __int8 *)v5[4];
      }
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 32) + 16 * (_QWORD)v79) + 64);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 264))(v13, 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v83, (unint64_t)v79))
      {
        *(_QWORD *)buf = &v79;
        v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v87 + 96, (unint64_t *)&v79, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
        v15 = v14[3];
        v16 = v14[4];
        while (v15 != v16)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v85, v15, v15);
          v15 += 24;
        }
      }
      v79 = (__int128 *)((char *)v79 + 1);
      a2 = v87;
      v18 = *(_QWORD *)(v87 + 32);
      v17 = *(_QWORD *)(v87 + 40);
    }
    while ((unint64_t)v79 < (v17 - v18) >> 4);
    v82 = 0;
    if (v17 != v18)
    {
      v19 = 0;
      do
      {
        *(_QWORD *)buf = v82;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v82, buf);
        v79 = 0;
        v80 = 0;
        v81 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
        v21 = (char *)v20[3];
        v22 = (char *)v20[4];
        while (v21 != v22)
        {
          __p[0] = v21;
          v23 = (__int128 *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v21, (__int128 **)__p)+ 56);
          v24 = v80;
          if ((unint64_t)v80 >= v81)
          {
            v25 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v79, v23);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v79, v23);
            v25 = v24 + 4;
          }
          v80 = v25;
          v21 += 24;
        }
        v76 = v18;
        if (!v82)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "");
          v63 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, buf);
          v64 = v63;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (v64)
            {
LABEL_70:
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              v65 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)__p);
              v66 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)buf = *(_OWORD *)(v65 + 40);
              *(_OWORD *)&buf[16] = v66;
              v67 = (const void *)*((_QWORD *)v65 + 10);
              v90 = *((_QWORD *)v65 + 9);
              v92 = 0;
              v93 = 0;
              v91 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, v67, *((_QWORD *)v65 + 11), (uint64_t)(*((_QWORD *)v65 + 11) - (_QWORD)v67) >> 2);
              std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v79, (__int128 *)buf, &v94, 1uLL);
              if (v91)
              {
                v92 = v91;
                operator delete(v91);
              }
              if (SHIBYTE(v78) < 0)
                operator delete(__p[0]);
              v68 = (char *)v20[3];
              v69 = (char *)v20[4];
              if (v68 != v69)
              {
                v70 = 0;
                do
                {
                  v71 = v79;
                  __p[0] = v68;
                  v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v68, (__int128 **)__p);
                  v73 = v71[v70];
                  v74 = v71[v70 + 1];
                  *((_QWORD *)v72 + 11) = *(_QWORD *)&v71[v70 + 2];
                  *(_OWORD *)(v72 + 72) = v74;
                  *(_OWORD *)(v72 + 56) = v73;
                  if (&v71[v70] != (__int128 *)(v72 + 56))
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72 + 96, *((char **)&v71[v70 + 2] + 1), *(_QWORD *)&v71[v70 + 3], (uint64_t)(*(_QWORD *)&v71[v70 + 3] - *((_QWORD *)&v71[v70 + 2] + 1)) >> 2);
                  v68 += 24;
                  v70 += 4;
                }
                while (v68 != v69);
              }
            }
          }
          else if (v63)
          {
            goto LABEL_70;
          }
        }
        __p[0] = 0;
        __p[1] = 0;
        v78 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(__p, v79, v80, ((char *)v80 - (char *)v79) >> 6);
        *(_QWORD *)buf = v82;
        v26 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v87 + 96, v82, buf);
        v28 = v26;
        v30 = (unsigned __int8 *)*((_QWORD *)v26 + 3);
        v29 = (unsigned __int8 *)*((_QWORD *)v26 + 4);
        if (v30 == v29)
        {
LABEL_33:
          v33 = 1;
        }
        else
        {
          v31 = 0;
          v32 = 1;
          while (1)
          {
            v26 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v30);
            v33 = v26 != 0;
            if (!v26)
              break;
            v34 = v26;
            v35 = (char *)__p[0];
            if (v32 - 1 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              std::vector<Espresso::layer_shape>::resize((uint64_t *)__p, v32);
              v35 = (char *)__p[0];
            }
            v36 = &v35[v31];
            v37 = *(_OWORD *)((char *)v34 + 40);
            v38 = *(_OWORD *)((char *)v34 + 56);
            *((_QWORD *)v36 + 4) = *((_QWORD *)v34 + 9);
            *(_OWORD *)v36 = v37;
            *((_OWORD *)v36 + 1) = v38;
            if (v36 != (char *)v34 + 40)
              v26 = (Espresso *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 40, *((char **)v34 + 10), *((_QWORD *)v34 + 11), (uint64_t)(*((_QWORD *)v34 + 11) - *((_QWORD *)v34 + 10)) >> 2);
            v30 += 24;
            ++v32;
            v31 += 64;
            if (v30 == v29)
              goto LABEL_33;
          }
        }
        if (!v33)
        {
          v26 = *(Espresso **)(*(_QWORD *)(v76 + 16 * v19) + 64);
          if (v26)
          {
            (*(void (**)(_BYTE *__return_ptr, Espresso *, __int128 **))(*(_QWORD *)v26 + 64))(buf, v26, &v79);
            std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)__p);
            *(_OWORD *)__p = *(_OWORD *)buf;
            v78 = *(_QWORD *)&buf[16];
            v88 = (__int128 *)buf;
            memset(buf, 0, 24);
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          }
        }
        v40 = __p[0];
        for (i = __p[1]; v40 != i; v40 += 8)
        {
          v40[3] = 0;
          v40[4] = 0;
        }
        v42 = (__int128 *)*((_QWORD *)v28 + 3);
        v41 = (uint64_t *)*((_QWORD *)v28 + 4);
        if (v42 != (__int128 *)v41)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = (char *)__p[0];
            if (v44 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              Espresso::espresso_os_log_subsystem(v26, v27);
              v49 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
              {
                v62 = v42;
                if (*((char *)v42 + 23) < 0)
                  v62 = *(__int128 **)v42;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v62;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v82;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v44;
                _os_log_debug_impl(&dword_190DAF000, v49, OS_LOG_TYPE_DEBUG, "TODO: Blob shape not found:%s layer:%d j=%d", buf, 0x18u);
              }

              v88 = v42;
              v50 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              *(_QWORD *)&v51 = 0x100000001;
              *((_QWORD *)&v51 + 1) = 0x100000001;
              *(_OWORD *)(v50 + 56) = v51;
              *((_QWORD *)v50 + 9) = 0xFFFFFFFF00000001;
              *((_QWORD *)v50 + 10) = 0;
              *((_QWORD *)v50 + 11) = 0;
              v53 = v50 + 96;
              v52 = (void *)*((_QWORD *)v50 + 12);
              if (v52)
              {
                *((_QWORD *)v50 + 13) = v52;
                operator delete(v52);
                *v53 = 0;
                v53[1] = 0;
                v53[2] = 0;
              }
              *v53 = 0;
              v53[1] = 0;
              v53[2] = 0;
            }
            else
            {
              v88 = v42;
              v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              v47 = *(_OWORD *)&v45[v43];
              v48 = *(_OWORD *)&v45[v43 + 16];
              *((_QWORD *)v46 + 11) = *(_QWORD *)&v45[v43 + 32];
              *(_OWORD *)(v46 + 72) = v48;
              *(_OWORD *)(v46 + 56) = v47;
              if (&v45[v43] != v46 + 56)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v46 + 96, *(char **)&v45[v43 + 40], *(_QWORD *)&v45[v43 + 48], (uint64_t)(*(_QWORD *)&v45[v43 + 48] - *(_QWORD *)&v45[v43 + 40]) >> 2);
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v83, v19))
            {
              v88 = v42;
              v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              if ((*((_DWORD *)v54 + 18) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 17) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 16) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 15) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 14) & 0x80000000) != 0)
              {
                v88 = v42;
                v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
                *(_QWORD *)&v56 = 0x100000001;
                *((_QWORD *)&v56 + 1) = 0x100000001;
                *(_OWORD *)(v55 + 56) = v56;
                *((_QWORD *)v55 + 9) = 0xFFFFFFFF00000001;
                *((_QWORD *)v55 + 10) = 0;
                *((_QWORD *)v55 + 11) = 0;
                v58 = v55 + 96;
                v57 = (void *)*((_QWORD *)v55 + 12);
                if (v57)
                {
                  *((_QWORD *)v55 + 13) = v57;
                  operator delete(v57);
                  *v58 = 0;
                  v58[1] = 0;
                  v58[2] = 0;
                }
                *v58 = 0;
                v58[1] = 0;
                v58[2] = 0;
              }
            }
            v88 = v42;
            v59 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
            v60 = *(_OWORD *)(v59 + 72);
            *(_OWORD *)buf = *(_OWORD *)(v59 + 56);
            *(_OWORD *)&buf[16] = v60;
            v61 = (const void *)*((_QWORD *)v59 + 12);
            v90 = *((_QWORD *)v59 + 11);
            v91 = 0;
            v92 = 0;
            v93 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, v61, *((_QWORD *)v59 + 13), (uint64_t)(*((_QWORD *)v59 + 13) - (_QWORD)v61) >> 2);
            v26 = (Espresso *)v91;
            if (v91)
            {
              v92 = v91;
              operator delete(v91);
            }
            v42 = (__int128 *)((char *)v42 + 24);
            v43 += 64;
            ++v44;
          }
          while (v42 != (__int128 *)v41);
        }
        ++v82;
        *(_QWORD *)buf = __p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v79;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v19;
        a2 = v87;
        v18 = *(_QWORD *)(v87 + 32);
      }
      while (v19 < (*(_QWORD *)(v87 + 40) - v18) >> 4);
    }
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v83);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v85);
}

void sub_190DDCE38()
{
  uint64_t v0;
  uint64_t v1;

  __cxa_end_catch();
  *(_QWORD *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x190DDCEECLL);
}

void sub_190DDCE4C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190DDCF1CLL);
}

void sub_190DDCE5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v25 = *(void **)(v24 - 152);
  if (v25)
  {
    *(_QWORD *)(v24 - 144) = v25;
    operator delete(v25);
  }
  if (a24 < 0)
    operator delete(__p);
  *(_QWORD *)(v24 - 192) = &v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 192));
  JUMPOUT(0x190DDCF04);
}

void sub_190DDCEB0()
{
  JUMPOUT(0x190DDCF1CLL);
}

char *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x78uLL);
    v9[0] = v6;
    v9[1] = a1 + 1;
    v10 = 0;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a3);
    v10 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

void sub_190DDCFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *Espresso::kernel_info_t::kernel_info_t(std::string *this, const Espresso::kernel_info_t *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  std::string::value_type v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
  v8 = *((_QWORD *)a2 + 12);
  this[4].__r_.__value_.__r.__words[0] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_WORD *)a2 + 52);
  v12 = *((_BYTE *)a2 + 106);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__s.__data_[10] = v12;
  LOWORD(this[4].__r_.__value_.__r.__words[1]) = v11;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&this[4].__r_.__value_.__r.__words[2], *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&this[5].__r_.__value_.__r.__words[2], *((_QWORD *)a2 + 17), *((_QWORD *)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&this[6].__r_.__value_.__r.__words[2], *((__int128 **)a2 + 20), *((__int128 **)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 6);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&this[7].__r_.__value_.__r.__words[2], *((__int128 **)a2 + 23), *((__int128 **)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 6);
  this[8].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 26);
  v13 = *((_QWORD *)a2 + 27);
  this[9].__r_.__value_.__r.__words[0] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return this;
}

void sub_190DDD1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  signed int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  char *v49;
  std::runtime_error *exception;
  std::string *v51;
  __int128 v52;
  std::string v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void *__p;
  _BYTE *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE v66[32];
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  __int128 v71;

  *((_QWORD *)&v71 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v60 = **a2;
  v61 = v7;
  v62 = v6;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v54 = v60;
  v55 = v61;
  v56 = v62;
  __p = 0;
  v58 = 0;
  v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v63, (uint64_t)v64, (v64 - (_BYTE *)v63) >> 2);
  v9 = v60;
  v8 = DWORD1(v60);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v11 = *(_DWORD *)(v10 + 40);
  v12 = *(__int16 *)(v10 + 72);
  v13 = *(__int16 *)(v10 + 80);
  v14 = *(__int16 *)(v10 + 82);
  v15 = *(_DWORD *)(v10 + 120);
  v16 = *(unsigned __int16 *)(v10 + 130);
  v17 = *(_DWORD *)(v10 + 152);
  v18 = *(__int16 *)(v10 + 156);
  if (*(__int16 *)(v10 + 96) <= 1)
    v19 = 1;
  else
    v19 = *(__int16 *)(v10 + 96);
  if (*(__int16 *)(v10 + 98) <= 1)
    v20 = 1;
  else
    v20 = *(__int16 *)(v10 + 98);
  v21 = *(__int16 *)(v10 + 92);
  v22 = *(__int16 *)(v10 + 94);
  v23 = (*(_DWORD *)(v10 + 48) - 1) * v19;
  v24 = v23 + 1;
  v25 = (*(_DWORD *)(v10 + 52) - 1) * v20;
  v26 = v25 + 1;
  switch(*(_WORD *)(v10 + 72))
  {
    case 0xFFFF:
    case 0:
      v9 = (v9 + v13 + v14 + ~v23) / v21 + 1;
      v27 = v8 + *(__int16 *)(v10 + 86) + *(__int16 *)(v10 + 84) + ~v25;
      goto LABEL_37;
    case 1:
    case 4:
      v9 = (v9 - 1) / v21 + 1;
      v27 = v8 - 1;
      goto LABEL_37;
    case 2:
      v9 = (v9 - v24) / v21 + 1;
      v27 = v8 - v26;
LABEL_37:
      v8 = v27 / v22 + 1;
      break;
    case 3:
      if (v24 >= 0)
        v28 = v23 + 1;
      else
        v28 = v23 + 2;
      v29 = v28 & 0xFFFFFFFE;
      if (v26 >= 0)
        v30 = v25 + 1;
      else
        v30 = v25 + 2;
      v31 = v30 & 0xFFFFFFFE;
      if (v31 > v29)
        v29 = v31;
      v32 = v29 & ~(v29 >> 31);
      if (v21 <= 1)
        v33 = 1;
      else
        v33 = v21;
      if (v22 <= 1)
        v34 = 1;
      else
        v34 = v22;
      v35 = v21 < 0;
      if (v21 < 0)
        v36 = 1;
      else
        v36 = v33;
      v37 = ~v32;
      v38 = (v9 + v37) / v36;
      if (v35)
        v9 = ~v38;
      else
        v9 = v38 + 1;
      v39 = v22 < 0;
      if (v22 < 0)
        v40 = 1;
      else
        v40 = v34;
      v41 = (v8 + v37) / v40;
      if (v39)
        v8 = ~v41;
      else
        v8 = v41 + 1;
      break;
    default:
      break;
  }
  LODWORD(v54) = v9 & ~(v9 >> 31);
  DWORD1(v54) = v8 & ~(v8 >> 31);
  if (v16)
    v11 = v16;
  DWORD2(v54) = v11;
  if (v15 >= 2 && HIDWORD(v54) != v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v53, v15);
    v51 = std::string::insert(&v53, 0, "Shape mismatch: n ");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    *(_QWORD *)&v66[16] = *((_QWORD *)&v51->__r_.__value_.__l + 2);
    *(_OWORD *)v66 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v66);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v17 >= 2)
  {
    v42 = v61;
    switch(v12)
    {
      case -1:
      case 0:
        v43 = v14 + v13 - v17 + v61;
        goto LABEL_56;
      case 1:
      case 4:
        v43 = v61 - 1;
        goto LABEL_56;
      case 2:
        v43 = v61 - v17;
LABEL_56:
        v42 = v43 / v18 + 1;
        break;
      case 3:
        if (v18 <= 1)
          v44 = 1;
        else
          v44 = v18;
        v45 = v61 - (v17 | 1);
        v46 = v18 < 0;
        if (v18 < 0)
          v47 = 1;
        else
          v47 = v44;
        v48 = v45 / v47;
        if (v46)
          v42 = ~v48;
        else
          v42 = v48 + 1;
        break;
      default:
        break;
    }
    LODWORD(v55) = v42 & ~(v42 >> 31);
  }
  *(_OWORD *)v66 = v54;
  *(_OWORD *)&v66[16] = v55;
  v67 = v56;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, __p, (uint64_t)v58, (v58 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v53.__r_.__value_.__s.__data_[8] = 0;
  v49 = (char *)operator new(0x40uLL);
  *a3 = v49;
  a3[1] = v49;
  a3[2] = v49 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v66, &v71, (uint64_t)v49);
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

void sub_190DDD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;
  int v31;
  uint64_t v32;

  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (a21)
        operator delete(a21);
      if (a29)
        operator delete(a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void Espresso::generic_elementwise_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  int v6;
  BOOL v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  const void *v31;
  _QWORD *v32;
  __int128 v33;
  const void *v34;
  _QWORD *v35;
  void *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _DWORD v48[5];
  unsigned int v49;
  _BYTE v50[24];
  _BYTE v51[24];
  _BYTE v52[24];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *__p;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  char v72;
  __int128 v73[2];
  void *v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  __int128 v82;
  _BYTE v83[24];
  __int128 v84;
  uint64_t v85;
  __int128 v86;

  *((_QWORD *)&v86 + 1) = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a2;
  if (a2[1] == *a2)
  {
    v85 = 0;
    v84 = 0u;
    *(_OWORD *)&v83[8] = 0u;
    v82 = 0uLL;
    *(_QWORD *)v83 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *(_QWORD *)&v76 = a3;
    BYTE8(v76) = 0;
    v12 = (char *)operator new(0x40uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v82, &v86, (uint64_t)v12);
    goto LABEL_14;
  }
  v6 = *(_DWORD *)(a1 + 280);
  v7 = v6 == 28 || v6 == 21;
  if (!v7)
  {
    v14 = *((_OWORD *)v4 + 1);
    v15 = v4[4];
    v82 = *(_OWORD *)v4;
    *(_OWORD *)v83 = v14;
    *(_QWORD *)&v83[16] = v15;
    v84 = 0uLL;
    v85 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, (const void *)v4[5], v4[6], (uint64_t)(v4[6] - v4[5]) >> 2);
    if (*(_DWORD *)(a1 + 300))
      goto LABEL_10;
    v17 = (_QWORD *)*a2;
    v18 = (uint64_t)(a2[1] - *a2) >> 6;
    if (v18 == 3)
    {
      v22 = (_DWORD *)v17 + 5;
      v23 = *((_DWORD *)v17 + 5);
      if ((v23 & 0x80000000) == 0)
      {
        v24 = *((_DWORD *)v17 + 21);
        if ((v24 & 0x80000000) == 0)
        {
          v25 = *((_DWORD *)v17 + 37);
          if ((v25 & 0x80000000) == 0)
          {
            v26 = v23 >= v24;
            if (v23 <= v24)
              v23 = *((_DWORD *)v17 + 21);
            if (!v26)
              v22 = (_DWORD *)v17 + 21;
            if (v23 < v25)
              v22 = (_DWORD *)v17 + 37;
            *(_DWORD *)&v83[4] = *v22;
          }
        }
      }
      v27 = *((_OWORD *)v17 + 1);
      v28 = v17[4];
      v76 = *(_OWORD *)v17;
      v77 = v27;
      v78 = v28;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v17[5], v17[6], (uint64_t)(v17[6] - v17[5]) >> 2);
      v29 = (_QWORD *)*a2;
      v30 = *(_OWORD *)(*a2 + 80);
      v65 = *(_OWORD *)(*a2 + 64);
      v66 = v30;
      v31 = (const void *)v29[13];
      v67 = v29[12];
      v68 = 0;
      v69 = 0;
      v70 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v31, v29[14], (uint64_t)(v29[14] - (_QWORD)v31) >> 2);
      v32 = (_QWORD *)*a2;
      v33 = *(_OWORD *)(*a2 + 144);
      v59 = *(_OWORD *)(*a2 + 128);
      v60 = v33;
      v34 = (const void *)v32[21];
      v61 = v32[20];
      v62 = 0;
      v63 = 0;
      v64 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, v34, v32[22], (uint64_t)(v32[22] - (_QWORD)v34) >> 2);
      v53 = v82;
      v54 = *(_OWORD *)v83;
      v55 = *(_QWORD *)&v83[16];
      __p = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 2);
      DWORD1(v77) = *(_DWORD *)&v83[4];
      DWORD1(v66) = *(_DWORD *)&v83[4];
      DWORD1(v60) = *(_DWORD *)&v83[4];
      DWORD1(v54) = *(_DWORD *)&v83[4];
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v52, (const Espresso::layer_shape *)&v76, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v51, (const Espresso::layer_shape *)&v65, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v50, (const Espresso::layer_shape *)&v59, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)&v53, 0);
      v35 = operator new(0x18uLL);
      v36 = v35;
      v37 = 0;
      *v35 = v52;
      v35[1] = v51;
      v35[2] = v50;
      v38 = v49;
      do
      {
        if (v38)
        {
          v39 = 0;
          do
          {
            v40 = 0;
            v41 = 1;
            do
            {
              v42 = v41;
              v41 = *(unsigned int *)(v35[v40] + 4 * v39);
              if ((_DWORD)v41 == 1)
              {
                v41 = v42;
              }
              else if ((_DWORD)v42 != 1)
              {
                v7 = (_DWORD)v41 == (_DWORD)v42;
                v41 = v42;
                if (!v7)
                  Espresso::shape_error_wrapper(a2, 3uLL);
              }
              ++v40;
            }
            while (v40 != 3);
            v48[v39++] = v41;
            v38 = v49;
          }
          while (v39 < v49);
        }
        ++v37;
      }
      while (v37 != 5);
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v48, 0, (uint64_t)v73);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v71 = a3;
      v72 = 0;
      v43 = (char *)operator new(0x40uLL);
      *a3 = v43;
      a3[1] = v43;
      a3[2] = v43 + 64;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v73, &v76, (uint64_t)v43);
      if (v74)
      {
        v75 = v74;
        operator delete(v74);
      }
      operator delete(v36);
      if (__p)
      {
        v57 = __p;
        operator delete(__p);
      }
      if (v62)
      {
        v63 = v62;
        operator delete(v62);
      }
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      goto LABEL_12;
    }
    if (v18 != 2)
      goto LABEL_10;
    v19 = *((_DWORD *)v17 + 5);
    if ((v19 & 0x80000000) == 0)
    {
      v20 = *((_DWORD *)v17 + 21);
      if ((v20 & 0x80000000) == 0)
      {
        if (v19 <= v20)
          v19 = *((_DWORD *)v17 + 21);
        *(_DWORD *)&v83[4] = v19;
      }
    }
    v21 = *((_DWORD *)v17 + 16);
    if ((_DWORD)v82 != v21)
    {
      if ((_DWORD)v82 == 1)
      {
        LODWORD(v82) = *((_DWORD *)v17 + 16);
      }
      else if (v21 != 1)
      {
        goto LABEL_73;
      }
    }
    v44 = *((_DWORD *)v17 + 17);
    if (DWORD1(v82) != v44)
    {
      if (DWORD1(v82) == 1)
      {
        DWORD1(v82) = *((_DWORD *)v17 + 17);
      }
      else if (v44 != 1)
      {
        goto LABEL_73;
      }
    }
    v45 = *((_DWORD *)v17 + 18);
    if (DWORD2(v82) != v45)
    {
      if (DWORD2(v82) == 1)
      {
        DWORD2(v82) = *((_DWORD *)v17 + 18);
      }
      else if (v45 != 1)
      {
        goto LABEL_73;
      }
    }
    v46 = *((_DWORD *)v17 + 19);
    if (HIDWORD(v82) == v46)
    {
LABEL_70:
      if (*(_DWORD *)v83 == 1)
      {
        v47 = *((_DWORD *)v17 + 20);
        if (v47 != 1)
          *(_DWORD *)v83 = v47;
      }
LABEL_10:
      v76 = v82;
      v77 = *(_OWORD *)v83;
      v78 = *(_QWORD *)&v83[16];
      v79 = 0;
      v80 = 0;
      v81 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_QWORD *)&v65 = a3;
      BYTE8(v65) = 0;
      v16 = (char *)operator new(0x40uLL);
      *a3 = v16;
      a3[1] = v16;
      a3[2] = v16 + 64;
      v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v76, &v82, (uint64_t)v16);
      goto LABEL_11;
    }
    if (HIDWORD(v82) == 1)
    {
      HIDWORD(v82) = *((_DWORD *)v17 + 19);
      goto LABEL_70;
    }
    if (v46 == 1)
      goto LABEL_70;
LABEL_73:
    Espresso::shape_error_wrapper(a2, 2uLL);
  }
  v8 = *((_OWORD *)v4 + 1);
  v9 = v4[4];
  v82 = *(_OWORD *)v4;
  *(_OWORD *)v83 = v8;
  *(_QWORD *)&v83[16] = v9;
  v84 = 0uLL;
  v85 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, (const void *)v4[5], v4[6], (uint64_t)(v4[6] - v4[5]) >> 2);
  *(_QWORD *)&v82 = 0x100000001;
  DWORD2(v82) = 1;
  v76 = v82;
  v77 = *(_OWORD *)v83;
  v78 = *(_QWORD *)&v83[16];
  v79 = 0;
  v80 = 0;
  v81 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)&v65 = a3;
  BYTE8(v65) = 0;
  v10 = (char *)operator new(0x40uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 64;
  v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v76, &v82, (uint64_t)v10);
LABEL_11:
  a3[1] = v11;
LABEL_12:
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
LABEL_14:
  if ((_QWORD)v84)
  {
    *((_QWORD *)&v84 + 1) = v84;
    operator delete((void *)v84);
  }
}

void sub_190DDDCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;

  v47 = v44;
  *(_QWORD *)(v43 + 8) = v47;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
  v49 = *(void **)(v46 - 200);
  if (v49)
  {
    *(_QWORD *)(v46 - 192) = v49;
    operator delete(v49);
  }
  operator delete(v45);
  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a42)
    operator delete(a42);
  v50 = *(void **)(v46 - 136);
  if (v50)
  {
    *(_QWORD *)(v46 - 128) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v46 - 72);
  if (v51)
  {
    *(_QWORD *)(v46 - 64) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_activation_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  __int128 v28[2];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;

  *((_QWORD *)&v32 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 304);
  if ((v4 - 17) >= 2)
  {
    if (v4 != 15)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
      return;
    }
    v6 = *a2;
    v7 = *((_QWORD *)*a2 + 4);
    v8 = (*a2)[1];
    v22 = **a2;
    v23 = v8;
    v24 = v7;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v25, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = (char *)operator new(0x40uLL);
    *a3 = v9;
    a3[1] = v9;
    a3[2] = v9 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v22, v28, (uint64_t)v9);
    v10 = v25;
    if (!v25)
      return;
    v26 = v25;
    goto LABEL_16;
  }
  v5 = *a2;
  v14 = **a2;
  v15 = (*a2)[1];
  v16 = *((_QWORD *)*a2 + 4);
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  if (DWORD1(v15) == -1 || SDWORD1(v15) >= 4)
    SDWORD2(v14) /= 4;
  else
    LODWORD(v14) = (int)v14 / 4;
  v22 = v14;
  v23 = v15;
  v24 = v16;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v25, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  v28[0] = v14;
  v28[1] = v15;
  v29 = v16;
  v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = a3;
  v21 = 0;
  v11 = (char *)operator new(0x80uLL);
  *a3 = v11;
  a3[1] = v11;
  a3[2] = v11 + 128;
  v12 = 0;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v22, &v32, (uint64_t)v11);
  do
  {
    v13 = (void *)v31[v12 - 1];
    if (v13)
    {
      v31[v12] = v13;
      operator delete(v13);
    }
    v12 -= 8;
  }
  while (v12 != -16);
  v10 = __p;
  if (__p)
  {
    v18 = __p;
LABEL_16:
    operator delete(v10);
  }
}

void sub_190DDE09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_batchnorm_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v6;
  __int128 v7;
  uint64_t *v8;
  void *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t *v54;
  void *__p;
  void *v56;
  uint64_t v57;
  __int128 v58;

  *((_QWORD *)&v58 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = (*a2)[1];
  v8 = (uint64_t *)*((_QWORD *)*a2 + 4);
  v52 = **a2;
  v53 = v7;
  v54 = v8;
  __p = 0;
  v56 = 0;
  v57 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v9 = operator new(0x40uLL);
  a3[2] = (uint64_t)v9 + 64;
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v52, &v58, (uint64_t)v9);
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  if (a1[92])
  {
    v10 = *((_DWORD *)*a2 + 4);
    v11 = *((_QWORD *)*a2 + 1);
    v12 = a3[1];
    v13 = a3[2];
    if (v12 >= v13)
    {
      v18 = (uint64_t)(v12 - *a3) >> 6;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v20 = v13 - *a3;
      if (v20 >> 5 > v19)
        v19 = v20 >> 5;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0)
        v21 = 0x3FFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      v54 = a3 + 2;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v21);
      v23 = &v22[64 * v18];
      *(_QWORD *)&v52 = v22;
      *((_QWORD *)&v52 + 1) = v23;
      *((_QWORD *)&v53 + 1) = &v22[64 * v24];
      *(_QWORD *)v23 = 0x100000001;
      *((_QWORD *)v23 + 1) = v11;
      *((_DWORD *)v23 + 4) = v10;
      *((_DWORD *)v23 + 5) = -1;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *((_QWORD *)v23 + 7) = 0;
      *(_QWORD *)&v53 = v23 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
      v14 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(_QWORD *)v12 = 0x100000001;
      *(_QWORD *)(v12 + 8) = v11;
      *(_DWORD *)(v12 + 16) = v10;
      *(_DWORD *)(v12 + 20) = -1;
      v14 = v12 + 64;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_QWORD *)(v12 + 56) = 0;
      a3[1] = v12 + 64;
    }
    a3[1] = v14;
    v25 = *a2;
    v26 = *((_DWORD *)*a2 + 4);
    v27 = *((_QWORD *)v25 + 1);
    v28 = a3[2];
    if (v14 < v28)
    {
      *(_QWORD *)v14 = 0x100000001;
      *(_QWORD *)(v14 + 8) = v27;
      *(_DWORD *)(v14 + 16) = v26;
LABEL_19:
      *(_DWORD *)(v14 + 20) = -1;
      v29 = v14 + 64;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_QWORD *)(v14 + 56) = 0;
      a3[1] = v14 + 64;
LABEL_28:
      a3[1] = v29;
      return;
    }
    v30 = (uint64_t)(v14 - *a3) >> 6;
    if ((unint64_t)(v30 + 1) >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v31 = v28 - *a3;
    v32 = v31 >> 5;
    if (v31 >> 5 <= (unint64_t)(v30 + 1))
      v32 = v30 + 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFC0)
      v33 = 0x3FFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    v54 = a3 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v33);
    v35 = &v34[64 * v30];
    *(_QWORD *)&v52 = v34;
    *((_QWORD *)&v52 + 1) = v35;
    *((_QWORD *)&v53 + 1) = &v34[64 * v36];
    *(_QWORD *)v35 = 0x100000001;
    *((_QWORD *)v35 + 1) = v27;
    *((_DWORD *)v35 + 4) = v26;
    goto LABEL_27;
  }
  if (a1[77] && !a1[78])
  {
    v15 = *((_DWORD *)v6 + 2);
    v16 = a3[1];
    v17 = a3[2];
    if (v16 >= v17)
    {
      v37 = (uint64_t)(v16 - *a3) >> 6;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v39 = v17 - *a3;
      if (v39 >> 5 > v38)
        v38 = v39 >> 5;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFC0)
        v40 = 0x3FFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      v54 = a3 + 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v40);
      v42 = &v41[64 * v37];
      *(_QWORD *)&v52 = v41;
      *((_QWORD *)&v52 + 1) = v42;
      *((_QWORD *)&v53 + 1) = &v41[64 * v43];
      *(_QWORD *)v42 = 0x100000001;
      *((_DWORD *)v42 + 2) = v15;
      *(_QWORD *)(v42 + 12) = 0x100000001;
      *((_DWORD *)v42 + 5) = -1;
      *(_OWORD *)(v42 + 24) = 0u;
      *(_OWORD *)(v42 + 40) = 0u;
      *((_QWORD *)v42 + 7) = 0;
      *(_QWORD *)&v53 = v42 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
      v14 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(_QWORD *)v16 = 0x100000001;
      *(_DWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v16 + 12) = 0x100000001;
      *(_DWORD *)(v16 + 20) = -1;
      v14 = v16 + 64;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_QWORD *)(v16 + 56) = 0;
      a3[1] = v16 + 64;
    }
    a3[1] = v14;
    v44 = *((_DWORD *)v6 + 2);
    v45 = a3[2];
    if (v14 < v45)
    {
      *(_QWORD *)v14 = 0x100000001;
      *(_DWORD *)(v14 + 8) = v44;
      *(_QWORD *)(v14 + 12) = 0x100000001;
      goto LABEL_19;
    }
    v46 = (uint64_t)(v14 - *a3) >> 6;
    if ((unint64_t)(v46 + 1) >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v47 = v45 - *a3;
    v48 = v47 >> 5;
    if (v47 >> 5 <= (unint64_t)(v46 + 1))
      v48 = v46 + 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFC0)
      v49 = 0x3FFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    v54 = a3 + 2;
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v49);
    v35 = &v50[64 * v46];
    *(_QWORD *)&v52 = v50;
    *((_QWORD *)&v52 + 1) = v35;
    *((_QWORD *)&v53 + 1) = &v50[64 * v51];
    *(_QWORD *)v35 = 0x100000001;
    *((_DWORD *)v35 + 2) = v44;
    *(_QWORD *)(v35 + 12) = 0x100000001;
LABEL_27:
    *((_DWORD *)v35 + 5) = -1;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *((_QWORD *)v35 + 7) = 0;
    *(_QWORD *)&v53 = v35 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
    v29 = a3[1];
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    goto LABEL_28;
  }
}

void sub_190DDE5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    Espresso::kernel_info_t::~kernel_info_t((void **)(i - 224));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v2 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 224);
      v8 = v4 + v5;
      *(_QWORD *)(v8 - 208) = *(_QWORD *)(v2 + v5 - 208);
      *(_OWORD *)(v8 - 224) = v7;
      *(_QWORD *)(v6 - 216) = 0;
      *(_QWORD *)(v6 - 208) = 0;
      *(_QWORD *)(v6 - 224) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 200);
      *(_QWORD *)(v8 - 184) = *(_QWORD *)(v2 + v5 - 184);
      *(_OWORD *)(v8 - 200) = v9;
      *(_QWORD *)(v6 - 192) = 0;
      *(_QWORD *)(v6 - 184) = 0;
      *(_QWORD *)(v6 - 200) = 0;
      v10 = *(_OWORD *)(v2 + v5 - 176);
      *(_QWORD *)(v8 - 160) = *(_QWORD *)(v2 + v5 - 160);
      *(_OWORD *)(v8 - 176) = v10;
      *(_QWORD *)(v6 - 168) = 0;
      *(_QWORD *)(v6 - 160) = 0;
      *(_QWORD *)(v6 - 176) = 0;
      v11 = *(_QWORD *)(v2 + v5 - 152);
      *(_DWORD *)(v8 - 144) = *(_DWORD *)(v2 + v5 - 144);
      *(_QWORD *)(v8 - 152) = v11;
      *(_OWORD *)(v8 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(_QWORD *)(v6 - 136) = 0;
      *(_QWORD *)(v6 - 128) = 0;
      LOWORD(v11) = *(_WORD *)(v2 + v5 - 120);
      *(_BYTE *)(v8 - 118) = *(_BYTE *)(v2 + v5 - 118);
      *(_WORD *)(v8 - 120) = v11;
      *(_QWORD *)(v8 - 104) = 0;
      *(_QWORD *)(v8 - 96) = 0;
      *(_QWORD *)(v8 - 112) = 0;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v8 - 96) = *(_QWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v6 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      *(_QWORD *)(v6 - 96) = 0;
      *(_QWORD *)(v8 - 88) = 0;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(_QWORD *)(v8 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v6 - 88) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_QWORD *)(v6 - 72) = 0;
      *(_QWORD *)(v8 - 64) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      v12 = *(_OWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v8 - 16) = v12;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      v5 -= 224;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v13 = *result;
  *result = v4;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void Espresso::generic_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v12;
  int v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  __int128 v32[2];
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = *(_OWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 32);
    v24 = *(_OWORD *)v4;
    v25 = v7;
    v26 = v8;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, *(const void **)(v4 + 40), *(_QWORD *)(v4 + 48), (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 2);
    v18 = v24;
    v19 = v25;
    v20 = v26;
    __p = 0;
    v22 = 0;
    v23 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, (uint64_t)v28, (v28 - (_BYTE *)v27) >> 2);
    v9 = a2[1] - *a2;
    if ((unint64_t)v9 >= 0x41)
    {
      v10 = v9 >> 6;
      v12 = DWORD1(v25) == -1 || SDWORD1(v25) > 3;
      v13 = v18;
      v14 = DWORD2(v18);
      if (v10 <= 2)
        v10 = 2;
      v15 = v10 - 1;
      v16 = (_DWORD *)(*a2 + 72);
      do
      {
        if (v12)
        {
          v14 += *v16;
          DWORD2(v18) = v14;
          if (*(_WORD *)(a1 + 320))
          {
            DWORD2(v18) = *(unsigned __int16 *)(a1 + 320);
            v14 = DWORD2(v18);
          }
        }
        else
        {
          v13 += *(v16 - 2);
          LODWORD(v18) = v13;
        }
        v16 += 16;
        --v15;
      }
      while (v15);
    }
    v32[0] = v18;
    v32[1] = v19;
    v33 = v20;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v34, __p, (uint64_t)v22, (v22 - (_BYTE *)__p) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v30 = a3;
    v31 = 0;
    v17 = (char *)operator new(0x40uLL);
    *a3 = v17;
    a3[1] = v17;
    a3[2] = v17 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v32, &v37, (uint64_t)v17);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
  }
}

void sub_190DDE9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_slice_kernel::top_shapes_for_bottom_shapes(int *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  int v21;
  char *v22;
  int *v23;
  std::runtime_error *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::runtime_error *exception;
  std::string *v46;
  __int128 v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE v64[32];
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  __int128 v69;

  *((_QWORD *)&v69 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v58 = **a2;
  v59 = v7;
  v60 = v6;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v8 = (int *)&v58;
  switch(a1[70])
  {
    case 0:
      break;
    case 1:
      v8 = (int *)&v58 + 1;
      break;
    case 2:
      v8 = (int *)&v58 + 2;
      break;
    case 3:
      v8 = (int *)((unint64_t)&v58 | 0xC);
      break;
    case 4:
      v8 = (int *)&v59;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v57, a1[70]);
      v46 = std::string::insert(&v57, 0, "Invalid axis ");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *(_QWORD *)&v64[16] = *((_QWORD *)&v46->__r_.__value_.__l + 2);
      *(_OWORD *)v64 = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v64);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = *v8;
  v10 = a1[74];
  if (v10 == 1)
  {
    v21 = a1[75];
    *v8 = v21;
    if (v21 < 0)
    {
      v23 = v8;
      v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v51, a1[72]);
      v25 = std::string::insert(&v51, 0, "Invalid slice end=");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v52, " start=");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v50, a1[71]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v50;
      else
        v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        size = v50.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v53, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = std::string::append(&v54, " dim=");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v49, *v23);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v49;
      else
        v35 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      else
        v36 = v49.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v55, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = std::string::append(&v56, " dim_orig=");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v48, v9);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v48;
      else
        v41 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      else
        v42 = v48.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v57, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      *(_QWORD *)&v64[16] = *((_QWORD *)&v43->__r_.__value_.__l + 2);
      *(_OWORD *)v64 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v24, (const std::string *)v64);
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    if (v10)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported slice mode");
    v11 = a1[72];
    v12 = a1[73];
    if (v12 >= 0)
      v13 = a1[72];
    else
      v13 = a1[71];
    if (v12 >= 0)
      v11 = a1[71];
    if (v13 <= 0)
      v14 = *v8;
    else
      v14 = 0;
    v15 = v14 + v13;
    v16 = (v9 & (v11 >> 31)) + v11;
    if (!v12)
    {
      v12 = 1;
      a1[73] = 1;
    }
    if (v15 >= v9)
      v15 = v9;
    if (v16 >= v9)
      v16 = v9 - 1;
    v17 = v15 - v16;
    if (v17 < 0)
      v17 = -v17;
    if (v12 < 0)
      v12 = -v12;
    *v8 = (v17 - 1) / v12 + 1;
    if (v16 < 0)
    {
      v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v57, a1[71]);
      v19 = std::string::insert(&v57, 0, "Invalid start ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(_QWORD *)&v64[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)v64 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, (const std::string *)v64);
      __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  *(_OWORD *)v64 = v58;
  *(_OWORD *)&v64[16] = v59;
  v65 = v60;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, v61, (uint64_t)v62, (v62 - (_BYTE *)v61) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v57.__r_.__value_.__s.__data_[8] = 0;
  v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v64, &v69, (uint64_t)v22);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_190DDEEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  int v66;
  void *v67;
  uint64_t v68;
  void *v70;

  if (*(char *)(v68 - 105) < 0)
    operator delete(*(void **)(v68 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v68 - 201) < 0)
    operator delete(*(void **)(v68 - 224));
  if (a66 < 0)
    operator delete(a61);
  if (a20 < 0)
    operator delete(a15);
  if (a59 < 0)
    operator delete(a54);
  if (a52 < 0)
    operator delete(a47);
  if (a26 < 0)
    operator delete(a21);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v66 & 1) == 0)
    {
LABEL_26:
      v70 = *(void **)(v68 - 152);
      if (v70)
      {
        *(_QWORD *)(v68 - 144) = v70;
        operator delete(v70);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_26;
  }
  __cxa_free_exception(v67);
  goto LABEL_26;
}

void Espresso::generic_pool_kernel::top_shapes_for_bottom_shapes(char *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  signed int v35;
  signed int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  char *v47;
  uint64_t v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  char *v57;
  const char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  _BYTE *v69;
  uint64_t v70;
  _QWORD *v71;
  char v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void *__p;
  void *v77;
  uint64_t v78;
  __int128 v79[2];
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  __int128 v83;

  *((_QWORD *)&v83 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v65 = **a2;
  v66 = v7;
  v67 = v6;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v59 = v65;
  v60 = v66;
  v61 = v67;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, v68, (uint64_t)v69, (v69 - (_BYTE *)v68) >> 2);
  v9 = v65;
  v8 = DWORD1(v65);
  v10 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 384))(a1);
  v12 = *(_DWORD *)(v10 + 4);
  v11 = *(_DWORD *)(v10 + 8);
  v13 = *(_DWORD *)(v10 + 12);
  v14 = *(_DWORD *)(v10 + 16);
  v16 = *(_DWORD *)(v10 + 20);
  v15 = *(_DWORD *)(v10 + 24);
  v17 = *(_DWORD *)(v10 + 32);
  v18 = *(__int16 *)(v10 + 36);
  v19 = *(__int16 *)(v10 + 44);
  v20 = *(__int16 *)(v10 + 46);
  v21 = *(__int16 *)(v10 + 48);
  v22 = *(__int16 *)(v10 + 50);
  v23 = *(_DWORD *)(v10 + 56);
  v24 = *(unsigned __int16 *)(v10 + 66);
  v25 = *(_DWORD *)(v10 + 72);
  if (v17)
  {
    if (v17 == 1)
    {
      LODWORD(v59) = (v9 - v12 + v14) / v14;
      DWORD1(v59) = (v8 - v11 + v16) / v16;
      if (v12 >= 0)
        v31 = v12;
      else
        v31 = v12 + 1;
      if (v14 == 1 && v31 >> 1 == v19)
        LODWORD(v59) = v65;
      if (v11 >= 0)
        v32 = v11;
      else
        v32 = v11 + 1;
      if (v16 == 1 && v32 >> 1 == v21)
        DWORD1(v59) = DWORD1(v65);
    }
    else if (v17 == 2)
    {
      v26 = v20 + v19;
      v27 = v22 + v21;
      v28 = vcvtps_s32_f32((float)(v9 - v12 + v20 + v19) / (float)v14);
      v29 = vcvtps_s32_f32((float)(v8 - v11 + v27) / (float)v16);
      LODWORD(v59) = v28 + 1;
      DWORD1(v59) = v29 + 1;
      if (!((v20 + v19 < 0) ^ __OFADD__(v20, v19) | (v20 + v19 == 0)) || v27 >= 1)
      {
        if ((int)(v16 * v29) >= DWORD1(v65) + v27 / 2)
          DWORD1(v59) = v29;
        if (v26 >= 0)
          v30 = v20 + v19;
        else
          v30 = v26 + 1;
        if ((int)(v14 * v28) >= (int)v65 + (v30 >> 1))
          LODWORD(v59) = v28;
      }
    }
  }
  else
  {
    switch(*(_WORD *)(v10 + 36))
    {
      case 0xFFFF:
      case 0:
        v9 = (v9 - v12 + v19 + v20) / v14 + 1;
        v33 = v8 - v11 + v21 + v22;
        goto LABEL_53;
      case 1:
      case 4:
        v9 = (v9 - 1) / v14 + 1;
        v33 = v8 - 1;
        goto LABEL_53;
      case 2:
        v9 = (v9 - v12) / v14 + 1;
        v33 = v8 - v11;
LABEL_53:
        v8 = v33 / v16 + 1;
        break;
      case 3:
        if (v12 >= 0)
          v34 = *(_DWORD *)(v10 + 4);
        else
          v34 = v12 + 1;
        v35 = v34 & 0xFFFFFFFE;
        v36 = (v11 + (v11 < 0)) & 0xFFFFFFFE;
        if (v36 > v35)
          v35 = v36;
        v37 = v35 & ~(v35 >> 31);
        if (v14 <= 1)
          v38 = 1;
        else
          v38 = v14;
        if (v16 <= 1)
          v39 = 1;
        else
          v39 = v16;
        v40 = v14 < 0;
        if (v14 < 0)
          v41 = 1;
        else
          v41 = v38;
        v42 = ~v37;
        v43 = (v9 + v42) / v41;
        if (v40)
          v9 = ~v43;
        else
          v9 = v43 + 1;
        v44 = v16 < 0;
        if (v16 < 0)
          v45 = 1;
        else
          v45 = v39;
        v46 = (v8 + v42) / v45;
        if (v44)
          v8 = ~v46;
        else
          v8 = v46 + 1;
        break;
      default:
        break;
    }
    LODWORD(v59) = v9 & ~(v9 >> 31);
    DWORD1(v59) = v8 & ~(v8 >> 31);
  }
  if (v23)
    *(_QWORD *)&v59 = 0x100000001;
  if (v24)
    DWORD2(v59) = v24;
  if (v25)
  {
    v73 = v59;
    v74 = v60;
    v75 = v61;
    __p = 0;
    v77 = 0;
    v78 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
    v79[0] = v59;
    v79[1] = v60;
    v80 = v61;
    v81 = 0;
    v82[0] = 0;
    v82[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v71 = a3;
    v72 = 0;
    v47 = (char *)operator new(0x80uLL);
    *a3 = v47;
    a3[1] = v47;
    a3[2] = v47 + 128;
    v48 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v73, &v83, (uint64_t)v47);
    do
    {
      v49 = (void *)v82[v48 - 1];
      if (v49)
      {
        v82[v48] = v49;
        operator delete(v49);
      }
      v48 -= 8;
    }
    while (v48 != -16);
  }
  else
  {
    if (v13 >= 2)
    {
      v50 = v66;
      switch(v18)
      {
        case -1:
        case 0:
          v51 = v20 - v13 + v19 + v66;
          goto LABEL_79;
        case 1:
        case 4:
          v51 = v66 - 1;
          goto LABEL_79;
        case 2:
          v51 = v66 - v13;
LABEL_79:
          v50 = v51 / v15 + 1;
          break;
        case 3:
          if (v15 <= 1)
            v52 = 1;
          else
            v52 = v15;
          v53 = v66 - (v13 | 1);
          v54 = v15 < 0;
          if (v15 < 0)
            v55 = 1;
          else
            v55 = v52;
          v56 = v53 / v55;
          if (v54)
            v50 = ~v56;
          else
            v50 = v56 + 1;
          break;
        default:
          break;
      }
      LODWORD(v60) = v50 & ~(v50 >> 31);
    }
    if (!Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v59))
    {
      v58 = a1 + 176;
      if (a1[199] < 0)
        v58 = *(const char **)v58;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,char const*>(v60, SHIDWORD(v59), SDWORD2(v59), SDWORD1(v59), v59, v58);
    }
    v73 = v59;
    v74 = v60;
    v75 = v61;
    __p = 0;
    v77 = 0;
    v78 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v71 = a3;
    v72 = 0;
    v57 = (char *)operator new(0x40uLL);
    *a3 = v57;
    a3[1] = v57;
    a3[2] = v57 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v73, v79, (uint64_t)v57);
    if (__p)
    {
      v77 = __p;
      operator delete(__p);
    }
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
}

void sub_190DDF628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v33 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_deconvolution_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  __int128 v41[2];
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;

  *((_QWORD *)&v46 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v33 = **a2;
  v34 = v7;
  v35 = v6;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v27 = v33;
  v28 = v34;
  v29 = v35;
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
  v9 = v33;
  v8 = DWORD1(v33);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v11 = *(_DWORD *)(v10 + 40);
  v12 = *(__int16 *)(v10 + 80);
  v13 = *(__int16 *)(v10 + 82);
  v14 = *(__int16 *)(v10 + 84);
  v15 = *(__int16 *)(v10 + 86);
  v16 = *(__int16 *)(v10 + 92);
  v17 = *(__int16 *)(v10 + 94);
  v18 = *(unsigned __int16 *)(v10 + 130);
  if (*(int *)(v10 + 136) < 1 || (v19 = *(_DWORD *)(v10 + 140), v19 < 1))
  {
    v20 = *(__int16 *)(v10 + 98);
    v21 = *(__int16 *)(v10 + 72);
    v23 = *(_DWORD *)(v10 + 48);
    v22 = *(_DWORD *)(v10 + 52);
    v24 = *(__int16 *)(v10 + 96);
    if (v24 > 1)
      v23 = (v23 - 1) * v24 + 1;
    if (v20 > 1)
      v25 = (v22 - 1) * v20 + 1;
    else
      v25 = v22;
    switch(v21)
    {
      case -1:
      case 0:
        LODWORD(v27) = (v9 - 1) * v16 - (v13 + v12) + v23;
        v19 = (v8 - 1) * v17 - (v15 + v14) + v25;
        goto LABEL_13;
      case 1:
      case 4:
        LODWORD(v27) = v9 * v16;
        v19 = v8 * v17;
        goto LABEL_13;
      case 2:
      case 3:
        LODWORD(v27) = v23 + v9 * v16 - 1;
        v19 = v25 + v8 * v17 - 1;
        goto LABEL_13;
      default:
        break;
    }
  }
  else
  {
    LODWORD(v27) = *(_DWORD *)(v10 + 136);
LABEL_13:
    DWORD1(v27) = v19;
  }
  if (v18)
    v11 = v18;
  DWORD2(v27) = v11;
  v41[0] = v27;
  v41[1] = v28;
  v42 = v29;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, __p, (uint64_t)v31, (v31 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v39 = a3;
  v40 = 0;
  v26 = (char *)operator new(0x40uLL);
  *a3 = v26;
  a3[1] = v26;
  a3[2] = v26 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v41, &v46, (uint64_t)v26);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_190DDF95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_kernel::top_shapes_for_bottom_shapes(_BYTE *a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v6;
  uint64_t *v7;
  __int128 v8;
  void *v9;
  __int128 *v10;
  int v11;
  std::vector<int>::pointer begin;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t *v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[2];
  int v48;
  int v49;
  std::vector<int> v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  __int128 v56;
  __int128 v57;
  uint64_t *v58;
  __int128 __p;
  uint64_t v60;
  __int128 v61;

  *((_QWORD *)&v61 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = (uint64_t *)*((_QWORD *)*a2 + 4);
  v8 = (*a2)[1];
  v56 = **a2;
  v57 = v8;
  v58 = v7;
  __p = 0uLL;
  v60 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  v51 = a3;
  LOBYTE(v52) = 0;
  v9 = operator new(0x40uLL);
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[2] = (uint64_t)v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v56, &v61, (uint64_t)v9);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (a1[304])
  {
    v10 = *a2;
    if ((char *)a2[1] - (char *)*a2 != 128)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("To compute cross entropy, softmax kernel needs 2 inputs");
    if (a1[305])
    {
      if (a1[307])
      {
        v11 = *((_DWORD *)v10 + 21);
        if (v11 == -1)
        {
          if (*((_DWORD *)v10 + 20) == 1)
            v11 = 4;
          else
            v11 = 5;
        }
        std::vector<int>::vector(&v50, v11);
        begin = v50.__begin_;
        if (v11 >= 1)
          memset_pattern16(v50.__begin_, &xmmword_191A93A60, 4 * v11);
        v47[0] = 0;
        v47[1] = 0;
        v48 = 0;
        v13 = (char *)v50.__end_ - (char *)begin;
        if (v50.__end_ != begin)
        {
          v14 = v13 >> 2;
          if ((unint64_t)(v13 >> 2) <= 1)
            v14 = 1;
          v15 = (int *)v47;
          do
          {
            v16 = *begin++;
            *v15++ = v16;
            --v14;
          }
          while (v14);
        }
        v49 = (unint64_t)v13 >> 2;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v47, 0, (uint64_t)&v56);
        v17 = a3[1];
        v18 = a3[2];
        if (v17 >= v18)
        {
          v28 = (uint64_t)(v17 - *a3) >> 6;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 58)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v30 = v18 - *a3;
          if (v30 >> 5 > v29)
            v29 = v30 >> 5;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0)
            v31 = 0x3FFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          v55 = a3 + 2;
          v32 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v31);
          v33 = (char *)&v32[8 * v28];
          v51 = v32;
          v52 = v33;
          v54 = (char *)&v32[8 * v34];
          v35 = v57;
          v36 = v58;
          *(_OWORD *)v33 = v56;
          *((_OWORD *)v33 + 1) = v35;
          *((_QWORD *)v33 + 4) = v36;
          *((_QWORD *)v33 + 5) = 0;
          *((_QWORD *)v33 + 6) = 0;
          *((_QWORD *)v33 + 7) = 0;
          *(_OWORD *)(v33 + 40) = __p;
          *((_QWORD *)v33 + 7) = v60;
          __p = 0uLL;
          v60 = 0;
          v53 = v33 + 64;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v51);
          v37 = a3[1];
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v51);
          v38 = (void *)__p;
          a3[1] = v37;
          if (v38)
          {
            *((_QWORD *)&__p + 1) = v38;
            operator delete(v38);
          }
        }
        else
        {
          v19 = v57;
          v20 = v58;
          *(_OWORD *)v17 = v56;
          *(_OWORD *)(v17 + 16) = v19;
          *(_QWORD *)(v17 + 32) = v20;
          *(_QWORD *)(v17 + 40) = 0;
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          *(_OWORD *)(v17 + 40) = __p;
          *(_QWORD *)(v17 + 56) = v60;
          __p = 0uLL;
          v60 = 0;
          a3[1] = v17 + 64;
        }
        if (v50.__begin_)
        {
          v50.__end_ = v50.__begin_;
          operator delete(v50.__begin_);
        }
      }
      else
      {
        v24 = a3[1];
        v25 = a3[2];
        if (v24 >= v25)
        {
          v39 = (uint64_t)(v24 - *a3) >> 6;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 58)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v41 = v25 - *a3;
          if (v41 >> 5 > v40)
            v40 = v41 >> 5;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0)
            v42 = 0x3FFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          v58 = a3 + 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v42);
          v44 = &v43[64 * v39];
          *(_QWORD *)&v56 = v43;
          *((_QWORD *)&v56 + 1) = v44;
          *((_QWORD *)&v57 + 1) = &v43[64 * v45];
          *(_QWORD *)&v46 = 0x100000001;
          *((_QWORD *)&v46 + 1) = 0x100000001;
          *(_OWORD *)v44 = v46;
          *((_QWORD *)v44 + 2) = 0xFFFFFFFF00000001;
          LOBYTE(v46) = 0;
          BYTE4(v46) = 0;
          BYTE8(v46) = 0;
          BYTE12(v46) = 0;
          *(_OWORD *)(v44 + 24) = v46;
          *(_OWORD *)(v44 + 40) = v46;
          *((_QWORD *)v44 + 7) = 0;
          *(_QWORD *)&v57 = v44 + 64;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v56);
          v27 = a3[1];
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v56);
        }
        else
        {
          *(_QWORD *)&v26 = 0x100000001;
          *((_QWORD *)&v26 + 1) = 0x100000001;
          *(_OWORD *)v24 = v26;
          *(_QWORD *)(v24 + 16) = 0xFFFFFFFF00000001;
          v27 = v24 + 64;
          LOBYTE(v26) = 0;
          BYTE4(v26) = 0;
          BYTE8(v26) = 0;
          BYTE12(v26) = 0;
          *(_OWORD *)(v24 + 24) = v26;
          *(_OWORD *)(v24 + 40) = v26;
          *(_QWORD *)(v24 + 56) = 0;
          a3[1] = v24 + 64;
        }
        a3[1] = v27;
      }
    }
    else
    {
      v21 = v10 + 4;
      v22 = a3[1];
      if (v22 >= a3[2])
      {
        v23 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v21);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v21);
        v23 = v22 + 64;
      }
      a3[1] = v23;
    }
  }
}

void sub_190DDFDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  BOOL v7;
  _QWORD *v8;
  id v9;

  v9 = a2;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v9))
  {
    v7 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v9);
    v8 = (_QWORD *)(a1 + 8);
    if (v7)
    {
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>(v8, "Success");
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>(v8, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
  }

}

void sub_190DDFED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_pool_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, int *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  int64x2_t *v11;
  uint64_t is_valid_for_engine;
  unint64_t *v13;
  unint64_t v14;
  int64x2_t *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  const Espresso::net *v26;
  int64x2_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  const Espresso::net *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  int64x2_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  int64x2_t *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  int v68;
  uint64_t **v69;
  char *v70;
  _DWORD *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BOOL4 v82;
  int v84;
  int64x2_t *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88[2];
  char v89;
  int64x2_t *v90[2];
  _OWORD v91[7];
  _QWORD v92[2];
  void **v93[3];
  char v94;
  _BYTE v95[16];
  __int128 __p;
  uint64_t v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  int v102;
  std::string v103;
  int64x2_t *v104;
  uint64_t v105;
  int64x2_t *v106;
  uint64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  const Espresso::net *v113;
  std::__shared_weak_count *v114;
  _DWORD v115[3];
  int v116;
  int v117;
  _OWORD v118[2];
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  const Espresso::net *v123;
  std::__shared_weak_count *v124;
  std::string::size_type *v125;
  int v126;
  int v127;
  int64x2_t *v128;
  uint64_t v129;
  std::string v130;
  std::string::size_type v131;
  unint64_t v132;
  char v133;
  _BYTE v134[32];
  std::__shared_weak_count *v135;
  int64x2_t *v136;
  uint64_t v137;
  int64x2_t *v138[2];
  uint64_t **v139;
  std::__shared_weak_count *v140;

  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v139 = 0;
  v140 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v140 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (uint64_t **)*((_QWORD *)v6 + 9);
    v139 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v8 + 59));
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = a2[1];
    v138[0] = *a2;
    v138[1] = v11;
    *a2 = 0;
    a2[1] = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::pool_kernel::is_valid_for_engine(a1, v138, (Espresso::ANECompilerEngine *)a3);
    if (v11)
    {
      v13 = &v11->u64[1];
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(int64x2_t *))(v11->i64[0] + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
    }
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 304) == 2 && *(_DWORD *)(a1 + 332) == 1)
  {
    v15 = a2[1];
    v136 = *a2;
    v137 = (uint64_t)v15;
    if (v15)
    {
      v16 = &v15->u64[1];
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "average_count_exclude_padding is not supported for L2 pooling");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v136, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v18 = v135;
    if (v135)
    {
      p_shared_owners = (unint64_t *)&v135->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v125 = (std::string::size_type *)v134;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
    v125 = &v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      operator delete((void *)__p);
    is_valid_for_engine = v137;
    if (v137)
    {
      v21 = (unint64_t *)(v137 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_49:
      if (!v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
      }
      is_valid_for_engine = 0;
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 64 || *((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3) != 64)
  {
    v27 = a2[1];
    v128 = *a2;
    v129 = (uint64_t)v27;
    if (v27)
    {
      v28 = &v27->u64[1];
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v128, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v30 = v135;
    if (v135)
    {
      v31 = (unint64_t *)&v135->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v125 = (std::string::size_type *)v134;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
    v125 = &v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      operator delete((void *)__p);
    is_valid_for_engine = v129;
    if (v129)
    {
      v33 = (unint64_t *)(v129 + 8);
      do
        v22 = __ldaxr(v33);
      while (__stlxr(v22 - 1, v33));
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  v23 = (_OWORD *)*((_QWORD *)a3 + 6);
  v124 = 0;
  v123 = 0;
  v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 10);
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v124 = v25;
    if (v25)
    {
      v26 = (const Espresso::net *)*((_QWORD *)v23 + 9);
      v123 = v26;
      goto LABEL_60;
    }
  }
  else
  {
    v25 = 0;
  }
  v26 = 0;
LABEL_60:
  v38 = *(_QWORD *)a3;
  v39 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v40 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v118[0] = *(_OWORD *)*(_QWORD *)a3;
  v118[1] = v40;
  v119 = v39;
  v120 = 0;
  v122 = 0;
  v121 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v120, *(const void **)(v38 + 40), *(_QWORD *)(v38 + 48), (uint64_t)(*(_QWORD *)(v38 + 48) - *(_QWORD *)(v38 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v125, v26, (const Espresso::layer_shape *)v118, 1);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v25)
  {
    v41 = (unint64_t *)&v25->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v43 = (_OWORD *)*((_QWORD *)a3 + 6);
  v113 = 0;
  v114 = 0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)v43 + 10);
  if (v44)
  {
    v45 = std::__shared_weak_count::lock(v44);
    v114 = v45;
    if (v45)
    {
      v46 = (const Espresso::net *)*((_QWORD *)v43 + 9);
      v113 = v46;
      goto LABEL_72;
    }
  }
  else
  {
    v45 = 0;
  }
  v46 = 0;
LABEL_72:
  v47 = (_OWORD *)*((_QWORD *)a3 + 3);
  v48 = *((_QWORD *)v47 + 4);
  v49 = v47[1];
  v108[0] = *v47;
  v108[1] = v49;
  v109 = v48;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v110, *((const void **)v47 + 5), *((_QWORD *)v47 + 6), (uint64_t)(*((_QWORD *)v47 + 6) - *((_QWORD *)v47 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v115, v46, (const Espresso::layer_shape *)v108, 1);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v45)
  {
    v50 = (unint64_t *)&v45->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v125, v9))
  {
    v54 = a2[1];
    v106 = *a2;
    v107 = (uint64_t)v54;
    if (v54)
    {
      v55 = &v54->u64[1];
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v57 = v135;
    if (v135)
    {
      v58 = (unint64_t *)&v135->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v93[0] = (void **)v134;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v93);
    v93[0] = (void **)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v93);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      operator delete((void *)__p);
    is_valid_for_engine = v107;
    if (v107)
    {
      v60 = (unint64_t *)(v107 + 8);
      do
        v22 = __ldaxr(v60);
      while (__stlxr(v22 - 1, v60));
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v115, v9))
  {
    v52 = *(__int128 **)(**((_QWORD **)a3 + 6) + 224 * *((_QWORD *)a3 + 9) + 136);
    if (*((char *)v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
    }
    else
    {
      v53 = *v52;
      v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v53;
    }
    v68 = a3[16];
    v69 = v139;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v139[45], &v103))
    {
      *(_QWORD *)&__p = &v103;
      v70 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69 + 44, &v103, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)(v70 + 56);
      v131 = 0;
      v132 = 0;
      v130.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v130.__r_.__value_.__r.__words[2], *((const void **)v70 + 9), *((_QWORD *)v70 + 10), (uint64_t)(*((_QWORD *)v70 + 10) - *((_QWORD *)v70 + 9)) >> 2);
      v68 = LODWORD(v130.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v130.__r_.__value_.__r.__words[1]);
      if (v130.__r_.__value_.__r.__words[2])
      {
        v131 = v130.__r_.__value_.__r.__words[2];
        operator delete((void *)v130.__r_.__value_.__r.__words[2]);
      }
    }
    v71 = (_DWORD *)(a1 + 304);
    if (*(_DWORD *)(a1 + 360)
      || (v73 = *(_DWORD *)(a1 + 308), v74 = *(_DWORD *)(a1 + 312), v73 == v127)
      && v74 == v126
      && v116 == 1
      && v117 == 1)
    {
      v131 = 0;
      v132 = 0xFFFFFFFF00000000;
      v130.__r_.__value_.__r.__words[2] = 0;
      v133 = 0;
      if (*v71)
        v72 = 9;
      else
        v72 = 1;
      v130.__r_.__value_.__r.__words[0] = v72 | 0x358637BD00000000;
      v130.__r_.__value_.__l.__size_ = 0x100000003;
      Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&__p, v9, &v125, v115, (__int128 *)&v130, v68);
      if (SBYTE3(v99) < 0)
        operator delete(*((void **)&__p + 1));
      is_valid_for_engine = 1;
      goto LABEL_139;
    }
    v75 = *(_DWORD *)(a1 + 304);
    v76 = *(_DWORD *)(a1 + 356);
    v100 = *(_OWORD *)(a1 + 340);
    v97 = *(_QWORD *)(a1 + 320);
    v101 = v76;
    v98 = 1;
    *(_QWORD *)&__p = __PAIR64__(v73, v75);
    *((_QWORD *)&__p + 1) = v74 | 0x100000000;
    v99 = *(_QWORD *)(a1 + 332);
    v102 = 0;
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v95, (NSString *)(a1 + 432), v9);
    if (LOBYTE(v93[0]) || *v71 == 2)
      goto LABEL_135;
    v92[0] = v69;
    v92[1] = v140;
    if (v140)
    {
      v77 = (unint64_t *)&v140->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v79 = *(_OWORD *)(a1 + 384);
    v91[4] = *(_OWORD *)(a1 + 368);
    v91[5] = v79;
    v91[6] = *(_OWORD *)(a1 + 400);
    v80 = *(_OWORD *)(a1 + 320);
    v91[0] = *(_OWORD *)v71;
    v91[1] = v80;
    v81 = *(_OWORD *)(a1 + 352);
    v91[2] = *(_OWORD *)(a1 + 336);
    v91[3] = v81;
    v82 = Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible((Espresso::ANECompilerEngine *)v69, (uint64_t)v91);
    if (v117 < 17 && v82)
    {
      v84 = v116;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v92);
      if (v84 < 17)
      {
LABEL_135:
        is_valid_for_engine = 1;
LABEL_136:
        if (v94 < 0)
          operator delete(v93[1]);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v95);
LABEL_139:
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    else
    {
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v92);
    }
    v85 = a2[1];
    v90[0] = *a2;
    v90[1] = v85;
    if (v85)
    {
      v86 = &v85->u64[1];
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    std::string::basic_string[abi:ne180100]<0>(v88, "pool_kernel: validator failed and failed to transform_large_separated_pool");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)v88, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v90, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v130.__r_.__value_.__l.__data_);
    if (v89 < 0)
      operator delete(v88[0]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v90);
    is_valid_for_engine = 0;
    goto LABEL_136;
  }
  v61 = a2[1];
  v104 = *a2;
  v105 = (uint64_t)v61;
  if (v61)
  {
    v62 = &v61->u64[1];
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: Output tensor extents exceed ANE limits");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, &__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v104, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
  v64 = v135;
  if (v135)
  {
    v65 = (unint64_t *)&v135->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v93[0] = (void **)v134;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v93);
  v93[0] = (void **)&v131;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v93);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97) < 0)
    operator delete((void *)__p);
  is_valid_for_engine = v105;
  if (v105)
  {
    v67 = (unint64_t *)(v105 + 8);
    do
      v22 = __ldaxr(v67);
    while (__stlxr(v22 - 1, v67));
    goto LABEL_49;
  }
LABEL_52:

  v34 = v140;
  if (v140)
  {
    v35 = (unint64_t *)&v140->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return is_valid_for_engine;
}

void sub_190DE08EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  uint64_t v57;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v57 - 240));
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a40 < 0)
    operator delete(a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (a56 < 0)
    operator delete(a51);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57 - 96);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets(Espresso::ANECompilerEngine::ane_mutable_weights_helper *this, Espresso::net *a2)
{
  char v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  _BYTE *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;

  std::string::basic_string[abi:ne180100]<0>(v28, "hint_no_mutable_weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)v28, (uint64_t)__p, &v30);
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  v4 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v30.__r_.__value_.__l.__size_ != 1)
      goto LABEL_12;
    v5 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_12;
    v5 = &v30;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 49)
  {
    *((_QWORD *)this + 3) = 0;
    *(_BYTE *)this = 0;
    goto LABEL_38;
  }
LABEL_12:
  v6 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4);
  if (v6)
  {
    v7 = 0;
    if ((unint64_t)(v6 >> 4) <= 1)
      v8 = 1;
    else
      v8 = v6 >> 4;
    do
    {
      v9 = *(_OWORD *)(*((_QWORD *)a2 + 4) + 16 * v7);
      *(_OWORD *)v28 = v9;
      if (*((_QWORD *)&v9 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = v9;
      v13 = *(const void **)(v9 + 64);
      if (v13)
      {
        if (v14)
        {
          v15 = v14;
          v16 = *(std::__shared_weak_count **)(v12 + 72);
          __p[0] = v14;
          __p[1] = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }
          v19 = (*(uint64_t (**)(_BYTE *, Espresso::net *, uint64_t))(*(_QWORD *)v14 + 96))(v14, a2, v7);
          v20 = v19;
          if (v19)
          {
            *(_BYTE *)this = 1;
            v15[56] = 1;
            *((_QWORD *)v15 + 4) = *((_QWORD *)this + 1);
            *((_QWORD *)v15 + 5) = 0;
            *((_QWORD *)v15 + 6) = v19;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 32, (uint64_t)(v15 + 8), (uint64_t)(v15 + 8));
            *(int64x2_t *)((char *)this + 8) = vaddq_s64(*(int64x2_t *)((char *)this + 8), vdupq_n_s64(v20));
            ++*((_QWORD *)this + 3);
          }
          if (v16)
          {
            v21 = (unint64_t *)&v16->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
      v23 = (std::__shared_weak_count *)v28[1];
      if (v28[1])
      {
        v24 = (unint64_t *)((char *)v28[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      ++v7;
    }
    while (v7 != v8);
    v4 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
LABEL_38:
  if (v4 < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_190DE0D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::net *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::net *a2, unint64_t a3)
{
  return Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336), a2, a3);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::net *a2, unint64_t a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error *exception;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  Espresso::ANECompilerEngine *v21;
  NSString *v22;
  unsigned int v23;
  __int128 *v24;
  uint64_t *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  char *v38;
  _DWORD *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t *v53;
  char *v54;
  __int128 *v55;
  __int128 *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *v67;
  uint64_t v68;
  __int128 *v69[2];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *__p[2];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *v78[2];
  uint64_t v79;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  void *v83[5];
  __int128 v84;
  unint64_t v85;
  __int128 *v86;
  __int128 __src;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v85 = a3;
  *((_BYTE *)this + 392) = 0;
  v5 = *(_OWORD *)(*((_QWORD *)a2 + 4) + 16 * a3);
  v84 = v5;
  v68 = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v83);
  v8 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v9 = (uint64_t)(*(_QWORD *)(v68 + 88) - *(_QWORD *)(v68 + 80)) >> 4;
  if (v9 != 1)
  {
    if (v9 != 2)
    {
      if (v9 != 3)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported configuration in elementwise_kernel for platform.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_26;
    }
    *(_QWORD *)&v75 = &v85;
    v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v85, (uint64_t)&std::piecewise_construct, (uint64_t **)&v75);
    v12 = (char *)a2 + 136;
    *(_QWORD *)&v70 = v11[3];
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v70, (__int128 **)&v70);
    Espresso::abstract_blob_container::shape((char *)&v75, *((_QWORD *)v13 + 5));
    *(_QWORD *)&__src = v11[3] + 24;
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)__src, (__int128 **)&__src);
    Espresso::abstract_blob_container::shape((char *)&v70, *((_QWORD *)v14 + 5));
    v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v75);
    v16 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v70);
    if (v15 < v16)
    {
      v17 = v75;
      __src = v75;
      v88 = v76;
      v18 = v77;
      v89 = v77;
      v19 = v79;
      v75 = v70;
      v76 = v71;
      v77 = v72;
      v79 = v74;
      v72 = v18;
      v70 = v17;
      v71 = v88;
      v20 = *(_OWORD *)v78;
      *(_OWORD *)v78 = *(_OWORD *)__p;
      *(_OWORD *)__p = v20;
      v74 = v19;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
    v21 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    if (!Espresso::ANECompilerEngine::is_mix(v21, v22))
      goto LABEL_19;
    v8 = 0;
    if ((_DWORD)v70 != 1 || __PAIR64__(DWORD1(v70), 1) != (HIDWORD(v70) | 0x100000000))
      goto LABEL_20;
    if (DWORD2(v70) != DWORD2(v75))
    {
LABEL_19:
      v8 = 0;
      goto LABEL_20;
    }
    v8 = 0;
    v23 = *((_DWORD *)this + 70);
    if (v23 > 8 || ((1 << v23) & 0x123) == 0)
      goto LABEL_20;
    v24 = (__int128 *)(v11[3] + 24 * (v15 >= v16));
    if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v83, (uint64_t)v24))
    {
      v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v83, (uint64_t)v24);
      if (!v25)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      *(_QWORD *)&__src = v25[5];
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v80, (char *)&__src, (char *)&__src + 8, 1uLL);
    }
    else
    {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v80, 0, 0, 0);
    }
    v31 = (v81 - (_BYTE *)v80) >> 3;
    if (!v31)
    {
      v69[0] = v24;
      v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v24, v69);
      v33 = (std::__shared_weak_count *)*((_QWORD *)v38 + 6);
      *(_QWORD *)&__src = v39;
      *((_QWORD *)&__src + 1) = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
      }
      v42 = v39[2];
      v43 = v39[3];
      v44 = (int)v39[4];
      v45 = (int)v39[5];
      v46 = v39[6];
      if (v46 <= 1)
        v47 = 1;
      else
        v47 = v46;
      *((_BYTE *)this + 392) = 1;
      std::string::operator=((std::string *)((char *)this + 344), (const std::string *)v24);
      v8 = 2 * v42 * (uint64_t)v43 * v44 * v45 * v47;
      if (!v33)
        goto LABEL_20;
      v48 = (unint64_t *)&v33->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      goto LABEL_62;
    }
    if (v31 != 1)
    {
      v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "blob is produced by multiple layers.");
      __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v32 = *(_OWORD *)(*((_QWORD *)a2 + 4) + 16 * *(_QWORD *)v80);
    __src = v32;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = (_QWORD *)(v32 + 40);
    v37 = *(char *)(v32 + 63);
    if (v37 < 0)
    {
      if (*(_QWORD *)(v32 + 48) != 16)
        goto LABEL_59;
      v36 = (_QWORD *)*v36;
    }
    else if (v37 != 16)
    {
LABEL_59:
      v8 = 0;
      if (*((_QWORD *)&v32 + 1))
      {
LABEL_60:
        v53 = (unint64_t *)&v33->__shared_owners_;
        do
          v49 = __ldaxr(v53);
        while (__stlxr(v49 - 1, v53));
LABEL_62:
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_20:

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v78[0])
      {
        v78[1] = v78[0];
        operator delete(v78[0]);
      }
      if (v80)
      {
        v81 = v80;
        operator delete(v80);
      }
      goto LABEL_26;
    }
    v51 = (_QWORD *)*v36;
    v50 = v36[1];
    if (v51 == (_QWORD *)0x5F747865746E6F63 && v50 == 0x726566736E617274)
    {
      v86 = v24;
      v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, (unsigned __int8 *)v24, &v86);
      v56 = (__int128 *)*((_QWORD *)v54 + 6);
      v69[0] = v55;
      v69[1] = v56;
      if (v56)
      {
        v57 = (unint64_t *)v56 + 1;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = *((_DWORD *)v55 + 2);
      v60 = *((_DWORD *)v55 + 3);
      v61 = *((int *)v55 + 4);
      v62 = *((int *)v55 + 5);
      v63 = *((_DWORD *)v55 + 6);
      if (v63 <= 1)
        v64 = 1;
      else
        v64 = v63;
      *((_BYTE *)this + 392) = 1;
      std::string::operator=((std::string *)((char *)this + 344), (const std::string *)v24);
      v8 = 2 * v59 * (uint64_t)v60 * v61 * v62 * v64;
      if (v56)
      {
        v65 = (unint64_t *)v56 + 1;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          (*(void (**)(__int128 *))(*(_QWORD *)v56 + 16))(v56);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v56);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
      if (!*((_QWORD *)&__src + 1))
        goto LABEL_20;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v83[2]);
  v26 = v83[0];
  v83[0] = 0;
  if (v26)
    operator delete(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v8;
}

void sub_190DE1394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  uint64_t v33;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 128);

  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 160);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t Espresso::ANECompilerEngine::is_mix_c(Espresso::ANECompilerEngine *this, NSString *a2)
{
  Espresso::ANECompilerEngine *v2;
  uint64_t v3;

  v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if ((-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M9")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M10")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H11")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H12")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H13")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H13G")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H14")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H14G")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("N301")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = -[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H14G.N301"));
  }

  return v3;
}

void sub_190DE15F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t is_valid_for_engine;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int32 *v16;
  __int32 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const Espresso::net *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  __int32 *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  const Espresso::net *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  const Espresso::net *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSString *v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t v56;
  int32x4_t v57;
  BOOL v58;
  int32x4_t v59;
  int32x2_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  unsigned int v64;
  signed int v65;
  char v66;
  BOOL v68;
  char v69;
  float v70;
  BOOL v71;
  BOOL v72;
  char is_mix_c;
  char v74;
  int v75;
  __int128 *v76;
  __int128 *v77;
  char v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __int32 *v84;
  __int32 v85;
  __int32 v86;
  __int128 *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  uint64_t *v105;
  uint64_t v106;
  Espresso::ANECompilerEngine *v107;
  Espresso::ANECompilerEngine *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  const Espresso::net *v111;
  std::__shared_weak_count *v112;
  char v113[8];
  void *v114[2];
  char v115;
  _OWORD v116[2];
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  const Espresso::net *v121;
  std::__shared_weak_count *v122;
  _DWORD v123[8];
  _OWORD v124[2];
  uint64_t v125;
  void *__p;
  void *v127;
  uint64_t v128;
  const Espresso::net *v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  const Espresso::net *v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  __int128 v135;
  char v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;

  v6 = a3[6];
  v132 = 0;
  v133 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v133 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v132 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v131 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    is_valid_for_engine = Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(a1, (uint64_t)&v131, (uint64_t)a3);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (*((_QWORD *)&v131 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_173;
  }
  v15 = a3[3];
  v107 = v9;
  if (v15 == a3[4])
  {
    v100 = a3[9];
    v101 = *(_QWORD *)a3[6];
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a3[6] + 8) - v101) >> 5) > v100)
    {
      v102 = (uint64_t **)(v101 + 224 * v100);
      v103 = v102[14];
      if (v103 == v102[15])
      {
        if (*((char *)v102 + 23) < 0)
          v102 = (uint64_t **)*v102;
        *(_QWORD *)&v134 = v102;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Missing top shape and name for layer '%s'", &v134);
      }
      if (*((char *)v103 + 23) < 0)
        v103 = (uint64_t *)*v103;
      *(_QWORD *)&v134 = v103;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Missing shape for blob '%s'", &v134);
    }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v105 = a2;
  v106 = a1;
  v16 = 0;
  v17 = 0;
  v18 = a3[1] - *a3;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 >> 6;
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    do
    {
      v23 = v132;
      v129 = v132;
      v130 = v133;
      if (v133)
      {
        p_shared_owners = (unint64_t *)&v133->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      v26 = *a3 + (v20 << 6);
      v27 = *(_QWORD *)(v26 + 32);
      v28 = *(_OWORD *)(v26 + 16);
      v124[0] = *(_OWORD *)v26;
      v124[1] = v28;
      v125 = v27;
      v127 = 0;
      v128 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v26 + 40), *(_QWORD *)(v26 + 48), (uint64_t)(*(_QWORD *)(v26 + 48) - *(_QWORD *)(v26 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v134, v23, (const Espresso::layer_shape *)v124, 1);
      if ((unint64_t)v17 >= v19)
      {
        v30 = ((char *)v17 - (char *)v16) >> 5;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 59)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v19 - (_QWORD)v16) >> 4 > v31)
          v31 = (uint64_t)(v19 - (_QWORD)v16) >> 4;
        if (v19 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v32 = 0x7FFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v32);
        else
          v33 = 0;
        v34 = (_OWORD *)(v32 + 32 * v30);
        *v34 = v134;
        v34[1] = v135;
        if (v17 == v16)
        {
          v37 = (__int32 *)(v32 + 32 * v30);
        }
        else
        {
          v35 = v32 + 32 * v30;
          do
          {
            v36 = *((_OWORD *)v17 - 1);
            v37 = (__int32 *)(v35 - 32);
            *(_OWORD *)(v35 - 32) = *((_OWORD *)v17 - 2);
            *(_OWORD *)(v35 - 16) = v36;
            v17 -= 8;
            v35 -= 32;
          }
          while (v17 != v16);
        }
        v19 = v32 + 32 * v33;
        v17 = (__int32 *)(v34 + 2);
        if (v16)
          operator delete(v16);
        v16 = v37;
      }
      else
      {
        v29 = v135;
        *(_OWORD *)v17 = v134;
        *((_OWORD *)v17 + 1) = v29;
        v17 += 8;
      }
      if (__p)
      {
        v127 = __p;
        operator delete(__p);
      }
      v38 = v130;
      if (v130)
      {
        v39 = (unint64_t *)&v130->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  v42 = v132;
  v41 = v133;
  v121 = v132;
  v122 = v133;
  if (v133)
  {
    v43 = (unint64_t *)&v133->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(_OWORD *)(v15 + 16);
  v46 = *(_QWORD *)(v15 + 32);
  v116[0] = *(_OWORD *)v15;
  v116[1] = v45;
  v117 = v46;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v118, *(const void **)(v15 + 40), *(_QWORD *)(v15 + 48), (uint64_t)(*(_QWORD *)(v15 + 48) - *(_QWORD *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v123, v42, (const Espresso::layer_shape *)v116, 1);
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v41)
  {
    v47 = (unint64_t *)&v41->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v49 = v132;
  v50 = v133;
  v111 = v132;
  v112 = v133;
  if (v133)
  {
    v51 = (unint64_t *)&v133->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v9 = v107;
  v108 = v107;
  v54 = ((char *)v17 - (char *)v16) >> 5;
  v55 = v106;
  switch(v54)
  {
    case 1:
      v65 = *(_DWORD *)(v106 + 280);
      v66 = vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v65), (int32x4_t)xmmword_191A93660)));
      v68 = v65 == 37 || v65 == 117;
      v69 = v66 | ((v65 & 0xFFFFFFEF) == 11) | (v68 || v65 < 2);
      if (v65 > 12)
      {
        if (v65 != 26)
        {
          if (v65 != 13)
            goto LABEL_93;
          v70 = *(float *)(v106 + 288);
          v71 = floorf(v70) == v70;
          if (v70 < 1.0)
            v71 = 0;
          v72 = v70 == 0.5 || v71;
          goto LABEL_92;
        }
      }
      else if (v65 != 10 && v65 != 12)
      {
LABEL_93:
        is_mix_c = Espresso::ANECompilerEngine::is_mix_c(v108, v53);
        std::string::basic_string[abi:ne180100]<0>(v139, "experimental.ane.enable_sin_cos");
        std::string::basic_string[abi:ne180100]<0>(v137, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v49 + 472, (uint64_t)v139, (uint64_t)v137, (std::string *)&v134);
        if (v138 < 0)
          operator delete(v137[0]);
        if (v140 < 0)
          operator delete(v139[0]);
        v74 = is_mix_c ^ 1;
        v75 = *(_DWORD *)(v106 + 280);
        if (v75 != 114)
        {
          if (v75 == 115)
          {
            if (SBYTE7(v135) < 0)
            {
              if (*((_QWORD *)&v134 + 1) == 1)
              {
                v76 = (__int128 *)v134;
LABEL_110:
                if (*(_BYTE *)v76 == 49)
                  v78 = is_mix_c ^ 1;
                else
                  v78 = 0;
                goto LABEL_114;
              }
            }
            else if (SBYTE7(v135) == 1)
            {
              v76 = &v134;
              goto LABEL_110;
            }
            v78 = 0;
LABEL_114:
            v74 = 0;
            v69 |= v78;
            goto LABEL_121;
          }
LABEL_120:
          v74 = 0;
LABEL_121:
          if ((v69 & 1) == 0 && (v74 & 1) == 0)
          {
            v113[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v114, "Unsupported unary elementwise operation");
            if (SBYTE7(v135) < 0)
              operator delete((void *)v134);
            goto LABEL_162;
          }
          if (SBYTE7(v135) < 0)
            operator delete((void *)v134);
          goto LABEL_127;
        }
        if (SBYTE7(v135) < 0)
        {
          if (*((_QWORD *)&v134 + 1) != 1)
            goto LABEL_120;
          v77 = (__int128 *)v134;
        }
        else
        {
          if (SBYTE7(v135) != 1)
            goto LABEL_120;
          v77 = &v134;
        }
        if (*(_BYTE *)v77 != 49)
          v74 = 0;
        goto LABEL_121;
      }
      v72 = *(float *)(v106 + 296) >= 0.0;
LABEL_92:
      v69 |= v72;
      goto LABEL_93;
    case 2:
      v64 = *(_DWORD *)(v106 + 280);
      if ((v64 > 0x21 || ((1 << v64) & 0x200C00003) == 0) && v64 != 102)
      {
        v113[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v114, "Unsupported binary elementwise operation mode");
        goto LABEL_162;
      }
      if (*(float *)(v106 + 292) != 0.0)
      {
        v113[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v114, "Binary Elementwise operation with params.beta != 0 has not been mapped to ANE.");
        goto LABEL_162;
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v16 + 8, v108))
      {
        v113[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v114, "Input blob dimensions exceed ANE limit.");
        goto LABEL_162;
      }
LABEL_127:
      v104 = v50;
      if (v16 == v17)
      {
LABEL_155:
        v9 = v107;
        v50 = v104;
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v16, v108))
        {
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v123, v108))
          {
            v113[0] = 1;
            std::string::basic_string[abi:ne180100]<0>(v114, "Success");
          }
          else
          {
            v113[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v114, "Output blob dimensions exceed ANE limit.");
          }
          v55 = v106;
        }
        else
        {
          v113[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v114, "Input blob dimensions exceed ANE limit.");
          v55 = v106;
        }
        goto LABEL_162;
      }
      v80 = v123[3];
      v79 = v123[4];
      v81 = v123[0];
      v82 = v123[1];
      v83 = v123[2];
      v84 = v16;
      while (1)
      {
        if (v84[4] == v79)
        {
          if (v84[3] == v80 && v84[1] == v82 && *v84 == v81 && v84[2] == v83)
            goto LABEL_154;
          *(_QWORD *)&v134 = -1;
          *((_QWORD *)&v134 + 1) = -1;
          *(_QWORD *)&v135 = 0xFFFFFFFF00000001;
          BYTE8(v135) = 0;
          HIDWORD(v135) = 0;
          v136 = 0;
        }
        else
        {
          *(_QWORD *)((char *)&v134 + 4) = -1;
          HIDWORD(v134) = -1;
          *(_QWORD *)&v135 = 0xFFFFFFFF00000001;
          BYTE8(v135) = 0;
          HIDWORD(v135) = 0;
          v136 = 0;
          LODWORD(v134) = v79;
        }
        if (v84[3] != v80)
          DWORD1(v134) = v80;
        v85 = v84[1];
        if (v84[7])
        {
          if (v85 != v82)
            DWORD2(v134) = v82;
          if (*v84 != v81)
            HIDWORD(v134) = v81;
          v86 = v84[2];
          v87 = &v135;
        }
        else
        {
          if (v85 != v82)
            HIDWORD(v134) = v82;
          if (*v84 != v81)
            LODWORD(v135) = v81;
          v86 = v84[2];
          v87 = (__int128 *)((char *)&v134 + 8);
        }
        if (v86 != v83)
          *(_DWORD *)v87 = v83;
        Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw((uint64_t)v113, v108, v84, v123, &v134);
        if (!v113[0])
        {
          v55 = v106;
          v9 = v107;
          v50 = v104;
          goto LABEL_162;
        }
        if (v115 < 0)
          operator delete(v114[0]);
LABEL_154:
        v84 += 8;
        if (v84 == v17)
          goto LABEL_155;
      }
    case 3:
      if (*(_DWORD *)(v106 + 280) != 101)
        goto LABEL_67;
      v56 = *(int32x4_t *)(v16 + 6);
      v57.i32[0] = *v16;
      v57.i32[1] = v16[2];
      v58 = v16[1] == v56.i32[3];
      v57.i64[1] = *(_QWORD *)(v16 + 3);
      v59.i64[0] = vrev64q_s32(v56).u64[0];
      v59.i64[1] = *((_QWORD *)v16 + 4);
      v56.i32[0] = vdupq_laneq_s32(v56, 2).u32[0];
      v56.i32[1] = v16[10];
      v56.i64[1] = *(_QWORD *)(v16 + 11);
      v60 = vrev64_s32(*(int32x2_t *)(v16 + 14));
      *(int32x2_t *)v61.i8 = v60;
      v61.i64[1] = *((_QWORD *)v16 + 8);
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v57, v56), (int16x8_t)vceqq_s32(v59, v61))), 7uLL))) & 1) == 0|| (v62.i64[0] = *(_QWORD *)(v16 + 19), v62.u64[1] = (unint64_t)v60, v63.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)(v16 + 22)), v63.i64[0] = *(_QWORD *)(v16 + 11), (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(v62, v63), 0x1FuLL)), (int8x16_t)xmmword_191A93380)) & 0xF) != 0)|| !v58|| v16[10] != v16[18])
      {
LABEL_67:
        v113[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v114, "elementwise_kernel: unsupported operation");
        goto LABEL_162;
      }
      goto LABEL_127;
  }
  v113[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "Elementwise operation with more than 2 input operands is not supported.");
LABEL_162:

  if (v50)
  {
    v88 = (unint64_t *)&v50->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v113[0])
  {
    is_valid_for_engine = 1;
  }
  else
  {
    v94 = (std::__shared_weak_count *)v105[1];
    v109 = *v105;
    v110 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    is_valid_for_engine = Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(v55, (uint64_t)&v109, (uint64_t)a3);
    v97 = v110;
    if (v110)
    {
      v98 = (unint64_t *)&v110->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  if (v115 < 0)
    operator delete(v114[0]);
  if (v16)
    operator delete(v16);
LABEL_173:

  v90 = v133;
  if (v133)
  {
    v91 = (unint64_t *)&v133->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  return is_valid_for_engine;
}

void sub_190DE20F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  void *v48;
  uint64_t v49;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (v48)
    operator delete(v48);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 216);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::blob_shape_ane_compatible(_DWORD *a1, void *a2)
{
  Espresso::ANECompilerEngine *v3;
  NSString *v4;
  NSString *v5;
  _BOOL8 v7;

  v3 = a2;
  if (Espresso::ANECompilerEngine::is_mix(v3, v4))
  {
    if ((a1[4] - 1) >> 14)
      goto LABEL_13;
    if ((a1[3] - 1) >> 14 || a1[2] != 1)
      goto LABEL_13;
  }
  else
  {
    Espresso::ANECompilerEngine::is_mix_e(v3, v5);
    if ((a1[4] - 1) >> 14 || (a1[3] - 1) >> 14 || (a1[2] - 1) >> 14)
      goto LABEL_13;
  }
  if ((a1[1] - 1) >> 16)
  {
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  v7 = (*a1 - 1) < 0x1000;
LABEL_14:

  return v7;
}

void sub_190DE2300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_mix_e(Espresso::ANECompilerEngine *this, NSString *a2)
{
  Espresso::ANECompilerEngine *v2;
  uint64_t v3;

  v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if ((-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M9")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M10")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H11")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H12")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H13")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = -[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H13G"));
  }

  return v3;
}

void sub_190DE23C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::engine::make_validator_for_arch(Espresso::ANECompilerEngine::engine *this, NSString *a2)
{
  NSString *v3;
  std::string::size_type v4;
  _QWORD *v5;
  std::string *v6;
  __int128 v7;
  const char *v8;
  std::string v9;
  __int128 v10;
  int64_t v11;

  v3 = a2;
  if (!-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H11"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("M9"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("M10"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H12"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H13"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H13G"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H14"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H14G"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H15"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H15G"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("M11"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("N301"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H14G.N301"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H16"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H16G"))
    && !-[NSString isEqualToString:](v3, "isEqualToString:", CFSTR("H17")))
  {

    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)-[NSString UTF8String](objc_retainAutorelease(v3), "UTF8String"));
    v6 = std::string::insert(&v9, 0, "Unrecognized arch creating validator: ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11 = v6->__r_.__value_.__r.__words[2];
    v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (v11 >= 0)
      v8 = (const char *)&v10;
    else
      v8 = (const char *)v10;
    Espresso::throw_exception_selector<Espresso::generic_error>(v8);
  }

  *(_QWORD *)&v10 = 1;
  v9.__r_.__value_.__r.__words[0] = 0;
  if (ANECUnitValidatorCreate())
    Espresso::throw_exception_selector<Espresso::generic_error>("Unexpected error creating validator.");
  v4 = v9.__r_.__value_.__r.__words[0];
  *(_QWORD *)this = v9.__r_.__value_.__r.__words[0];
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E2DC3938;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  v5[4] = MEMORY[0x1E0CF1640];
  *((_QWORD *)this + 1) = v5;

}

void sub_190DE26E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_190DE2718(void *a1)
{
  __cxa_begin_catch(a1);
  ANECUnitValidatorDelete();
  __cxa_rethrow();
}

void sub_190DE272C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_190DE273C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_mix(Espresso::ANECompilerEngine *this, NSString *a2)
{
  Espresso::ANECompilerEngine *v2;
  uint64_t v3;

  v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if ((-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M9")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("M10")) & 1) != 0
    || (-[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H11")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = -[Espresso::ANECompilerEngine isEqualToString:](v2, "isEqualToString:", CFSTR("H12"));
  }

  return v3;
}

void sub_190DE27E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t fixed;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _OWORD v26[3];
  int v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30[0] = &off_1E2DB36B0;
  v30[1] = a2;
  v30[2] = a3;
  v31 = v30;
  v28[0] = &off_1E2DB3708;
  v28[1] = a2;
  v28[2] = a3;
  v29 = v28;
  v5 = *(_OWORD *)(a1 + 296);
  v26[0] = *(_OWORD *)(a1 + 280);
  v26[1] = v5;
  v26[2] = *(_OWORD *)(a1 + 312);
  v27 = *(_DWORD *)(a1 + 328);
  v6 = *(_QWORD *)(a3 + 48);
  v24 = 0;
  v25 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v25 = v8;
    if (v8)
      v24 = *(_QWORD *)(v6 + 72);
  }
  else
  {
    v8 = 0;
  }
  fixed = Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p(a1, (char **)a3, (uint64_t)v26, (uint64_t)v28, a3, (uint64_t)&v24);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v19 = v29;
  if (v29 == v28)
  {
    v20 = 4;
    v19 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_15;
    v20 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::__shared_weak_count *, _QWORD, _QWORD))(*v19 + 8 * v20))(v19, v9, v10, v11, v12, v13, v14, v15, v24, v25, *(_QWORD *)&v26[0], *((_QWORD *)&v26[0] + 1));
LABEL_15:
  v21 = v31;
  if (v31 == v30)
  {
    v22 = 4;
    v21 = v30;
    goto LABEL_19;
  }
  if (v31)
  {
    v22 = 5;
LABEL_19:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return fixed;
}

void sub_190DE2984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v24 = a21;
  if (a21 == v21)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = *(_QWORD **)(v22 - 48);
  if (v26 == (_QWORD *)(v22 - 72))
  {
    v27 = 4;
    v26 = (_QWORD *)(v22 - 72);
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  const void *v28;
  NSString *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  Espresso::net *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  NSString *v51;
  uint64_t v52;
  Espresso::net *v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  _BOOL4 v58;
  _QWORD *v59;
  int v60;
  char v63;
  const Espresso::net *v64;
  BOOL v65;
  int v66;
  BOOL v67;
  char v68;
  char v69;
  float v70;
  BOOL v71;
  const Espresso::net *v72;
  std::string *v73;
  __int128 v74;
  uint64_t v75;
  const void *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  _BOOL4 v84;
  _BOOL4 v85;
  uint64_t v86;
  Espresso::net *v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  char v94;
  _BOOL4 v95;
  _BOOL4 v96;
  BOOL v97;
  int v98;
  char v99;
  uint64_t v100;
  char v101;
  std::string *v102;
  __int128 v103;
  uint64_t v104;
  void *v105;
  int v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _BOOL4 v132;
  _QWORD *v133;
  int v134;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  BOOL v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  BOOL v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  uint64_t v153;
  _QWORD *v154;
  char v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v160;
  _QWORD v163[4];
  std::string v164;
  _BYTE __p[32];
  uint64_t v166;
  void *v167[2];
  uint64_t v168;
  _BYTE v169[32];
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  _OWORD v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  uint64_t v177;
  const Espresso::net *v178;
  std::__shared_weak_count *v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(_QWORD *)a6 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      v13 = *(const Espresso::net **)a6;
      v12 = *(std::__shared_weak_count **)(a6 + 8);
      v178 = *(const Espresso::net **)a6;
      v179 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(_OWORD *)v11;
      v17 = *((_OWORD *)v11 + 1);
      v174 = *((_QWORD *)v11 + 4);
      v173[0] = v16;
      v173[1] = v17;
      v176 = 0;
      v177 = 0;
      v175 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v175, *((const void **)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v169, v13, (const Espresso::layer_shape *)v173, 1);
      if (v175)
      {
        v176 = v175;
        operator delete(v175);
      }
      if (v12)
      {
        v18 = (unint64_t *)&v12->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v169, v9))
        break;
      v11 += 64;
      if (v11 == v10)
      {
        v11 = *a2;
        v20 = a2[1];
        goto LABEL_16;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_kernel: input tensor exceed ANE limit.");
    v37 = *(_QWORD *)(a4 + 24);
    if (!v37)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v37 + 48))(v37, __p);
    goto LABEL_29;
  }
  v20 = *a2;
LABEL_16:
  v21 = v20 - v11;
  if (v21 >= 0x81)
  {
    std::string::basic_string[abi:ne180100]<0>(v169, "Elementwise ops for n_blobs > 2 not supported");
    v22 = *(_QWORD *)(a4 + 24);
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 48))(v22, v169);
    if ((v169[23] & 0x80000000) == 0)
      goto LABEL_32;
    v23 = *(void **)v169;
    goto LABEL_31;
  }
  v158 = a4;
  if (v21 != 128)
  {
    v40 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 != 27)
    {
      v48 = 0;
      v49 = *(_DWORD *)a3;
LABEL_64:
      if (v40 < 4)
        v48 = 1;
      if (v49 == 25)
        v48 = 1;
      if (*(float *)(a3 + 12) >= *(float *)(a3 + 8) && v49 == 119)
        v48 = 1;
      if (v49 == 24)
        v63 = 1;
      else
        v63 = v48;
      v64 = *(const Espresso::net **)a6;
      std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.floor");
      std::string::basic_string[abi:ne180100]<0>(&v180, "0");
      Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v64 + 472, (uint64_t)__p, (uint64_t)&v180, (std::string *)v169);
      if ((v169[23] & 0x80000000) != 0)
      {
        v65 = *(_QWORD *)&v169[8] == 1 && **(_BYTE **)v169 == 49;
        operator delete(*(void **)v169);
      }
      else
      {
        v65 = v169[23] == 1 && v169[0] == 49;
      }
      if (SBYTE7(v181) < 0)
        operator delete((void *)v180);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v66 = *(_DWORD *)a3;
      v67 = *(_DWORD *)a3 == 117 && v65;
      v68 = v63 | v67;
      if (v66 == 38)
        v69 = 1;
      else
        v69 = v68;
      if (v66 == 12)
      {
        v72 = *(const Espresso::net **)a6;
        std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.enable_rsqrt");
        std::string::basic_string[abi:ne180100]<0>(&v180, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v72 + 472, (uint64_t)__p, (uint64_t)&v180, (std::string *)v169);
        if (SBYTE7(v181) < 0)
          operator delete((void *)v180);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v169[23] & 0x80000000) != 0)
        {
          if (*(_QWORD *)&v169[8] == 1 && **(_BYTE **)v169 == 49)
            v69 = 1;
          operator delete(*(void **)v169);
        }
        else if (v169[23] == 1 && v169[0] == 49)
        {
          v69 = 1;
        }
        v66 = *(_DWORD *)a3;
        if ((v69 & 1) != 0)
          goto LABEL_344;
      }
      else
      {
        if (v66 == 13)
        {
          v70 = *(float *)(a3 + 8);
          v71 = v70 >= 1.0;
          if (floorf(v70) != v70)
            v71 = 0;
          v69 |= v71;
        }
        if ((v69 & 1) != 0)
          goto LABEL_344;
      }
      if (v66 != 112)
      {
        std::to_string((std::string *)__p, v66);
        v73 = std::string::insert((std::string *)__p, 0, "elementwise operation not supported ");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        *(_QWORD *)&v169[16] = *((_QWORD *)&v73->__r_.__value_.__l + 2);
        *(_OWORD *)v169 = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = *(_QWORD *)(a4 + 24);
        if (!v75)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v75 + 48))(v75, v169);
        if ((v169[23] & 0x80000000) != 0)
          operator delete(*(void **)v169);
LABEL_29:
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_32:
          v38 = 0;
          goto LABEL_33;
        }
        v23 = *(void **)__p;
LABEL_31:
        operator delete(v23);
        goto LABEL_32;
      }
LABEL_344:
      v38 = 1;
      goto LABEL_33;
    }
    v41 = *(uint64_t **)(a5 + 48);
    v42 = *v41;
    v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v41 + 3), *(_QWORD **)(*v41 + 224 * *(_QWORD *)(a5 + 72) + 136));
    if (v41 + 4 == v43)
      goto LABEL_62;
    v44 = v43[7];
    v45 = v42 + 224 * v44;
    v46 = (_QWORD *)(v45 + 48);
    v47 = *(char *)(v45 + 71);
    if (v47 < 0)
    {
      if (v46[1] != 10)
        goto LABEL_62;
      v46 = (_QWORD *)*v46;
    }
    else if (v47 != 10)
    {
      goto LABEL_62;
    }
    v59 = (_QWORD *)*v46;
    v60 = *((unsigned __int16 *)v46 + 4);
    if (v59 != (_QWORD *)0x6974617669746361 || v60 != 28271)
      goto LABEL_62;
    v76 = *(const void **)(v42 + 224 * v44 + 88);
    if (!v76)
      goto LABEL_62;
    if (!v77)
      goto LABEL_62;
    *(_QWORD *)v169 = v77;
    v78 = *(std::__shared_weak_count **)(v42 + 224 * v44 + 96);
    *(_QWORD *)&v169[8] = v78;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 384))(v77);
    v82 = *(_DWORD *)v81;
    v84 = *(_DWORD *)v81 == 7 || (*(_DWORD *)v81 & 0xFFFFFFFD) == 1;
    if (v82 == 14)
    {
      if (fabsf(*(float *)(v81 + 4)) <= 5.0)
      {
        v85 = fabsf(*(float *)(v81 + 8)) <= 5.0;
        goto LABEL_241;
      }
    }
    else if (v82 == 5)
    {
      v85 = 0;
      if (fabsf(*(float *)(v81 + 4)) <= 5.0)
        v84 = 1;
LABEL_241:
      v106 = v85 || v84;
      if (v78)
      {
        v107 = (unint64_t *)&v78->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      if (v106)
      {
        v48 = 1;
        goto LABEL_63;
      }
LABEL_62:
      v48 = 0;
LABEL_63:
      v49 = *(_DWORD *)a3;
      a4 = v158;
      goto LABEL_64;
    }
    v85 = 0;
    goto LABEL_241;
  }
  v24 = *(_OWORD *)v11;
  v25 = *((_QWORD *)v11 + 4);
  *(_OWORD *)&v169[16] = *((_OWORD *)v11 + 1);
  *(_OWORD *)v169 = v24;
  v170 = v25;
  v171 = 0uLL;
  v172 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v171, *((const void **)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 2);
  v26 = *a2;
  v27 = *((_OWORD *)*a2 + 5);
  *(_OWORD *)__p = *((_OWORD *)*a2 + 4);
  *(_OWORD *)&__p[16] = v27;
  v28 = (const void *)*((_QWORD *)v26 + 13);
  v166 = *((_QWORD *)v26 + 12);
  v167[0] = 0;
  v167[1] = 0;
  v168 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v167, v28, *((_QWORD *)v26 + 14), (uint64_t)(*((_QWORD *)v26 + 14) - (_QWORD)v28) >> 2);
  if (*(_DWORD *)a3 < 0xAu || (*(_DWORD *)a3 - 29) <= 3)
  {
    v30 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v169);
    if (v30 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)__p))
    {
      v31 = *(_OWORD *)v169;
      *(_OWORD *)v169 = *(_OWORD *)__p;
      v180 = v31;
      v181 = *(_OWORD *)&v169[16];
      v32 = v170;
      v33 = v172;
      v182 = v170;
      *(_OWORD *)&v169[16] = *(_OWORD *)&__p[16];
      v170 = v166;
      v172 = v168;
      v166 = v32;
      *(_OWORD *)__p = v31;
      *(_OWORD *)&__p[16] = v181;
      v34 = v171;
      v171 = *(_OWORD *)v167;
      *(_OWORD *)v167 = v34;
      v168 = v33;
    }
  }
  if ((Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v29) & 1) != 0
    || ((v50 = *(_DWORD *)a3, v36 = 1, *(_DWORD *)a3 > 0x21u) || ((1 << v50) & 0x200C00003) == 0)
    && v50 != 100
    && v50 != 102)
  {
    v36 = 0;
  }
  if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(*(Espresso::ANECompilerEngine **)a6, v35))
  {
    if (a5 && *(_DWORD *)a3 <= 1u && !Espresso::layer_shape::operator==((uint64_t)v169, (uint64_t)__p))
    {
      Espresso::net::get_producers_of_blobs(*(Espresso::net **)a6, (uint64_t)&v180);
      v52 = *(_QWORD *)(**(_QWORD **)(a5 + 48) + 224 * *(_QWORD *)(a5 + 72) + 136);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v180, v52))
      {
        v53 = *(Espresso::net **)a6;
        v54 = std::unordered_map<std::string,unsigned long>::at(&v180, v52);
        v55 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)(*((_QWORD *)v53 + 4) + 16 * *v54) + 40), "load_constant")- 1;
      }
      else
      {
        v55 = -1;
      }
      v86 = v52 + 24;
      if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v180, v86)|| (v87 = *(Espresso::net **)a6, v88 = std::unordered_map<std::string,unsigned long>::at(&v180, v86), !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)(*((_QWORD *)v87 + 4) + 16 * *v88) + 40), "load_constant")))
      {
        if (v55 == -1)
        {
          if (*(_QWORD *)&v169[12] == *(_QWORD *)&__p[12])
          {
            v38 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v164, "Elementwise with implicit broadcast along Seq or Batch dimension is not supported.");
            v100 = *(_QWORD *)(v158 + 24);
            if (!v100)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v100 + 48))(v100, &v164);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            v38 = 0;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v180);
          v94 = 0;
          goto LABEL_339;
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v180);
      a4 = v158;
    }
    if ((v36 & 1) != 0)
      goto LABEL_151;
    v58 = *(_DWORD *)a3 == 13;
    if (*(_DWORD *)a3 == 100 || *(_DWORD *)a3 == 33)
      v57 = *(unsigned __int8 *)(a3 + 24);
    else
      v57 = 0;
  }
  else
  {
    if ((v36 & 1) != 0)
      goto LABEL_151;
    v56 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= 0x21u && ((1 << v56) & 0x200C00003) != 0 || v56 == 100)
      v57 = *(unsigned __int8 *)(a3 + 24);
    else
      v57 = 0;
    v58 = v56 == 13;
  }
  if (v57 | v58)
  {
    std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise with broadcasting not supported");
    v89 = *(_QWORD *)(a4 + 24);
    if (!v89)
      std::__throw_bad_function_call[abi:ne180100]();
LABEL_354:
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v89 + 48))(v89, &v180);
    goto LABEL_335;
  }
LABEL_151:
  if (*(_DWORD *)__p == *(_DWORD *)v169)
  {
    v91 = *(_DWORD *)&__p[4];
    v90 = *(_DWORD *)&__p[8];
    if (*(_DWORD *)&__p[4] == *(_DWORD *)&v169[4])
    {
      v92 = *(_DWORD *)&__p[12];
      if (*(_QWORD *)&__p[8] == *(_QWORD *)&v169[8])
      {
        v93 = *(_DWORD *)a3;
        if ((*(_DWORD *)a3 & 0xFFFFFFFE) == 0x16)
        {
          v94 = 0;
          v38 = 1;
          goto LABEL_339;
        }
        goto LABEL_252;
      }
      v96 = *(_DWORD *)&__p[12] == 1;
      v95 = *(_DWORD *)&__p[8] == 1;
      if (*(_QWORD *)&__p[8] == 0x100000001)
      {
        v93 = *(_DWORD *)a3;
        if (*(int *)a3 <= 32)
        {
          if (v93)
          {
            if (v93 != 1)
              goto LABEL_252;
            v93 = 7;
          }
          else
          {
            v93 = 4;
          }
          goto LABEL_234;
        }
        if ((v93 == 33 || v93 == 100) && (v36 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise subtract does not support broadcast on this arch");
          v89 = *(_QWORD *)(a4 + 24);
          if (!v89)
            std::__throw_bad_function_call[abi:ne180100]();
          goto LABEL_354;
        }
LABEL_252:
        if (v93 > 0x1E || ((1 << v93) & 0x60400120) == 0)
        {
          v109 = a5;
          if (a5 && v93 == 23)
          {
LABEL_255:
            v110 = *(_QWORD *)(v109 + 72);
            v111 = **(_QWORD **)(v109 + 48);
            v112 = v111 + 224 * v110;
            v115 = *(_QWORD *)(v112 + 136);
            v114 = (uint64_t *)(v112 + 136);
            v113 = v115;
            v117 = v114 + 1;
            v116 = v114[1];
            if (v116 != v115)
            {
              v118 = 0;
              v155 = 0;
              v119 = v111 + 224 * v110;
              v156 = (_QWORD *)(v119 + 184);
              v157 = 0;
              v154 = (_QWORD *)(v119 + 192);
              v160 = a1 + 336;
              v116 = v113;
              while (1)
              {
                v120 = *(uint64_t **)(a5 + 48);
                v121 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v120 + 3), (_QWORD *)(v116 + 24 * v118));
                if (v120 + 4 == v121)
                {
                  LODWORD(v157) = v157 + 1;
                  goto LABEL_320;
                }
                v122 = v121[7];
                v123 = *v120;
                v124 = v123 + 224 * v122;
                v125 = (_QWORD *)(v124 + 48);
                v126 = *(char *)(v124 + 71);
                if (v126 < 0)
                {
                  v128 = v125[1];
                  if (v128 == 10)
                  {
                    v125 = (_QWORD *)*v125;
LABEL_274:
                    v132 = 0;
                    v133 = (_QWORD *)*v125;
                    v134 = *((unsigned __int16 *)v125 + 4);
                    v127 = v133 == (_QWORD *)0x616C70736E617274 && v134 == 29806;
                    goto LABEL_280;
                  }
                  if (v128 == 13)
                  {
                    v127 = 0;
                    v125 = (_QWORD *)*v125;
                    goto LABEL_266;
                  }
                }
                else
                {
                  if (v126 == 10)
                    goto LABEL_274;
                  if (v126 == 13)
                  {
                    v127 = 0;
LABEL_266:
                    v129 = (_QWORD *)*v125;
                    v130 = *(_QWORD *)((char *)v125 + 5);
                    v132 = v129 == (_QWORD *)0x6E6F635F64616F6CLL && v130 == 0x746E6174736E6F63;
                    goto LABEL_280;
                  }
                }
                v132 = 0;
                v127 = 0;
LABEL_280:
                if (v93 - 29 > 1)
                {
                  HIDWORD(v157) |= v132;
                  v155 |= v127;
                  if (!v132)
                    goto LABEL_311;
                }
                else
                {
                  if (v118 < (uint64_t)(*v154 - *v156) >> 6)
                  {
                    v136 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v156 + (v118 << 6))) == 1 && v132;
                    HIDWORD(v157) |= v136;
                  }
                  if (!v132)
                  {
LABEL_311:
                    a4 = v158;
                    goto LABEL_320;
                  }
                }
                if ((v93 & 0xFFFFFFFE) == 0x16)
                {
                  a4 = v158;
                  if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v156 + (v118 << 6))) != 1)
                  {
                    v137 = v123 + 224 * v122;
                    v138 = *(_QWORD *)(v137 + 88);
                    v163[2] = v138;
                    v139 = *(std::__shared_weak_count **)(v137 + 96);
                    v163[3] = v139;
                    if (v139)
                    {
                      v140 = (unint64_t *)&v139->__shared_owners_;
                      do
                        v141 = __ldxr(v140);
                      while (__stxr(v141 + 1, v140));
                    }
                    if (*(_QWORD *)a6)
                    {
                      v142 = !*(_QWORD *)(*(_QWORD *)a6 + 576) || v138 == 0;
                      if (!v142 && *(_QWORD *)(v138 + 224))
                      {
                        v143 = *(_QWORD *)(a6 + 8);
                        v163[0] = *(_QWORD *)a6;
                        v163[1] = v143;
                        if (v143)
                        {
                          v144 = (unint64_t *)(v143 + 8);
                          do
                            v145 = __ldxr(v144);
                          while (__stxr(v145 + 1, v144));
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v164, "constant_blob");
                        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *, uint64_t, std::string *))(*(_QWORD *)v160 + 120))(&v180, v160, v163, v138, &v164);
                        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v164.__r_.__value_.__l.__data_);
                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v163);
                      }
                    }
                    if (v139)
                    {
                      v146 = (unint64_t *)&v139->__shared_owners_;
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                        std::__shared_weak_count::__release_weak(v139);
                      }
                    }
                    v93 = *(_DWORD *)a3;
                  }
                }
                else
                {
                  a4 = v158;
                }
                v148 = v93 == 8 || v93 == 5;
                if (v148 && (*(int *)(*v156 + (v118 << 6)) > 1 || *(int *)(*v156 + (v118 << 6) + 4) >= 2))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise with spatial broadcast doesn't supported constant with width/height > 1 when adding or multiplying");
                  v153 = *(_QWORD *)(a4 + 24);
                  if (!v153)
                    std::__throw_bad_function_call[abi:ne180100]();
LABEL_334:
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v153 + 48))(v153, &v180);
LABEL_335:
                  if (SBYTE7(v181) < 0)
                  {
                    v105 = (void *)v180;
LABEL_337:
                    operator delete(v105);
                  }
                  goto LABEL_338;
                }
LABEL_320:
                ++v118;
                v149 = *v117;
                v116 = *v114;
                if (v118 >= 0xAAAAAAAAAAAAAAABLL * ((*v117 - *v114) >> 3))
                {
                  v150 = v157;
                  v151 = BYTE4(v157);
                  v152 = v155;
                  goto LABEL_323;
                }
              }
            }
            v151 = 0;
            v152 = 0;
            v150 = 0;
            v149 = v114[1];
LABEL_323:
            if ((v151 & 1) == 0 && (v152 & 1) == 0)
            {
              if (v93 == 5)
              {
                if (v150 < 1)
                  goto LABEL_331;
              }
              else if (v93 != 8 || v150 <= 0)
              {
LABEL_331:
                std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise add or mul with channel broadcast supported only with constant vector or transplant input");
                v153 = *(_QWORD *)(a4 + 24);
                if (!v153)
                  std::__throw_bad_function_call[abi:ne180100]();
                goto LABEL_334;
              }
              if (v149 - v116 != 48)
                goto LABEL_331;
            }
          }
LABEL_347:
          v38 = 0;
          v94 = 1;
          if (v93 <= 0x21 && ((1 << v93) & 0x260C00123) != 0
            || v93 - 100 <= 0xD && ((1 << (v93 - 100)) & 0x2CF9) != 0)
          {
            goto LABEL_339;
          }
          goto LABEL_235;
        }
LABEL_254:
        v109 = a5;
        if (a5)
          goto LABEL_255;
        goto LABEL_347;
      }
    }
    else
    {
      v92 = *(_DWORD *)&__p[12];
      v96 = *(_DWORD *)&__p[12] == 1;
      v95 = *(_DWORD *)&__p[8] == 1;
      if (*(_QWORD *)&__p[8] == 0x100000001)
      {
        v96 = 1;
        v95 = 1;
        v90 = 1;
      }
    }
  }
  else
  {
    v91 = *(_DWORD *)&__p[4];
    v90 = *(_DWORD *)&__p[8];
    v95 = *(_DWORD *)&__p[8] == 1;
    v92 = *(_DWORD *)&__p[12];
    v96 = *(_DWORD *)&__p[12] == 1;
  }
  v97 = *(_DWORD *)__p == 1 && v91 == 1;
  v98 = v97;
  if (v97 && v96 && v90 == *(_DWORD *)&v169[8])
  {
    v93 = *(_DWORD *)a3;
    if (*(int *)a3 > 32)
    {
      if ((v93 == 33 || v93 == 100) && (v36 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise subtract does not support broadcast on this arch");
        v89 = *(_QWORD *)(a4 + 24);
        if (!v89)
          std::__throw_bad_function_call[abi:ne180100]();
        goto LABEL_354;
      }
      goto LABEL_252;
    }
    if (v93)
    {
      if (v93 != 1)
        goto LABEL_252;
      v93 = 8;
    }
    else
    {
      v93 = 5;
    }
LABEL_203:
    *(_DWORD *)a3 = v93;
    goto LABEL_254;
  }
  v99 = !v96;
  if (*(_DWORD *)__p != *(_DWORD *)v169)
    v99 = 1;
  if ((v99 & 1) != 0 || __PAIR64__(v90, v91) != *(_QWORD *)&v169[4])
  {
    if ((v98 & v95) == 1)
    {
      if (*(_DWORD *)&__p[16] * v92 == *(_DWORD *)&v169[16] * *(_DWORD *)&v169[12])
      {
        v93 = *(_DWORD *)a3;
        if (*(int *)a3 > 32)
        {
          if ((v93 == 33 || v93 == 100) && (v36 & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise subtract does not support broadcast on this arch");
            v89 = *(_QWORD *)(a4 + 24);
            if (!v89)
              std::__throw_bad_function_call[abi:ne180100]();
            goto LABEL_354;
          }
          goto LABEL_252;
        }
        if (v93)
        {
          if (v93 != 1)
            goto LABEL_252;
          v93 = 30;
        }
        else
        {
          v93 = 29;
        }
        goto LABEL_203;
      }
      v101 = !v96;
      if (*(_DWORD *)&__p[16] != 1)
        v101 = 1;
      if ((v101 & 1) == 0)
      {
        v93 = *(_DWORD *)a3;
        if (!*(_DWORD *)a3)
        {
          v93 = 31;
          goto LABEL_234;
        }
        if (v93 == 1)
        {
          if ((Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v51) & 1) != 0)
          {
            v93 = 32;
            goto LABEL_234;
          }
          v93 = *(_DWORD *)a3;
        }
        if ((v93 == 100 || v93 == 33) && (v36 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise subtract does not support broadcast one this arch");
          v89 = *(_QWORD *)(a4 + 24);
          if (!v89)
            std::__throw_bad_function_call[abi:ne180100]();
          goto LABEL_354;
        }
        goto LABEL_252;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v180, "Invalid elementwise dimensions");
    v89 = *(_QWORD *)(a4 + 24);
    if (!v89)
      std::__throw_bad_function_call[abi:ne180100]();
    goto LABEL_354;
  }
  v93 = *(_DWORD *)a3;
  if (*(int *)a3 > 32)
  {
    if ((v93 == 33 || v93 == 100) && (v36 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise subtract does not support broadcast on this arch");
      v89 = *(_QWORD *)(a4 + 24);
      if (!v89)
        std::__throw_bad_function_call[abi:ne180100]();
      goto LABEL_354;
    }
    goto LABEL_252;
  }
  if (v93)
  {
    if (v93 != 1)
      goto LABEL_252;
    v93 = 9;
  }
  else
  {
    v93 = 6;
  }
LABEL_234:
  *(_DWORD *)a3 = v93;
LABEL_235:
  std::to_string(&v164, v93);
  v102 = std::string::insert(&v164, 0, "elementwise operation not supported ");
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  *(_QWORD *)&v181 = *((_QWORD *)&v102->__r_.__value_.__l + 2);
  v180 = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = *(_QWORD *)(a4 + 24);
  if (!v104)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v104 + 48))(v104, &v180);
  if (SBYTE7(v181) < 0)
    operator delete((void *)v180);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
  {
    v105 = (void *)v164.__r_.__value_.__r.__words[0];
    goto LABEL_337;
  }
LABEL_338:
  v94 = 0;
  v38 = 0;
LABEL_339:
  if (v167[0])
  {
    v167[1] = v167[0];
    operator delete(v167[0]);
  }
  if ((_QWORD)v171)
  {
    *((_QWORD *)&v171 + 1) = v171;
    operator delete((void *)v171);
  }
  if ((v94 & 1) != 0)
    goto LABEL_344;
LABEL_33:

  return v38;
}

void sub_190DE3C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  void *v48;

  if (__p)
    operator delete(__p);
  if (a47)
    operator delete(a47);

  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(Espresso::ANECompilerEngine *this, Espresso::net *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;

  v3 = *((_QWORD *)this + 99);
  std::string::basic_string[abi:ne180100]<0>(v8, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)this + 472, (uint64_t)v8, (uint64_t)__p, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = v10.__r_.__value_.__l.__size_ == 1 && *v10.__r_.__value_.__l.__data_ == 49;
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = SHIBYTE(v10.__r_.__value_.__r.__words[2]) == 1 && v10.__r_.__value_.__s.__data_[0] == 49;
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  return !v3 || v4;
}

void sub_190DE3EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::call_anec_validate_for_pool<Espresso::pool3d_params_t>(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, _DWORD *a5, uint64_t a6)
{
  __CFString *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int32x2_t v22;
  int32x4_t v23;
  BOOL v24;
  int v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _BYTE v41[40];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int32x2_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int32x2_t v56;
  BOOL v57;
  __CFString *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];

  v62[2] = *MEMORY[0x1E0C80C00];
  if (a4 < 8 && ((0x97u >> a4) & 1) != 0)
  {
    v10 = off_1E2DD6038[a4];
    ANECTensorDescInitialize();
    v11 = *(_QWORD *)(a3 + 3);
    *(_QWORD *)&v12 = (int)v11;
    *((_QWORD *)&v12 + 1) = SHIDWORD(v11);
    v13 = (int)a3[2];
    v60 = v12;
    v58 = v10;
    v61 = v13;
    *(_QWORD *)&v12 = (int)*(_QWORD *)a3;
    *((_QWORD *)&v12 + 1) = (int)HIDWORD(*(_QWORD *)a3);
    v59 = v12;
    ANECPoolLayerDescInitialize();
    v14 = v48[0];
    v15 = *(_QWORD *)v48[0];
    v16 = *(_DWORD *)a6;
    v17 = CFSTR("Zero");
    if (*(_DWORD *)a6 == 1)
      v17 = CFSTR("Negative");
    v18 = *(int *)(a6 + 12);
    v19 = *(_QWORD *)(a6 + 4);
    *(_QWORD *)&v20 = (int)v19;
    *((_QWORD *)&v20 + 1) = SHIDWORD(v19);
    v49 = v20;
    v48[4] = (void *)v17;
    v50 = v18;
    v21 = v14[2];
    v51 = v15;
    v52 = v21;
    v22 = vrev64_s32(v47);
    if (v45
      || ((v23.i64[0] = v44,
           v23.u64[1] = (unint64_t)v22,
           (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_191A93380, (int8x16_t)vceqzq_s32(v23))) & 0xF) == 0)
        ? (v24 = v46 == 0)
        : (v24 = 0),
          !v24))
    {
      v53 = v44;
      v54 = v45;
      v55 = v46;
      v56 = v22;
    }
    if (!v16)
      v57 = *(_DWORD *)(a6 + 28) != 0;
    v42 = 0;
    v43 = 0;
    v25 = ANECValidatePoolLayer();
    if (v25)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>((uint64_t)v41, v43, v42);
      std::to_string(&v38, v25);
      v26 = std::string::insert(&v38, 0, "pool_kernel: ANECValidatePoolLayer failed with status ");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v39, ". ");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)__p, (uint64_t)v41);
      if ((v37 & 0x80u) == 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      if ((v37 & 0x80u) == 0)
        v31 = v37;
      else
        v31 = (std::string::size_type)__p[1];
      v32 = std::string::append(&v40, (const std::string::value_type *)v30, v31);
      v33 = v32->__r_.__value_.__r.__words[0];
      v62[0] = v32->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v62 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
      v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)(a1 + 16) = v35;
      *(_BYTE *)(a1 + 31) = v34;
      if ((char)v37 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v41);
    }
    else
    {
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "pool_kernel: invalid compute path for input");
  }
}

void sub_190DE42A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *`anonymous namespace'::get_anec_pool_type(unsigned int a1)
{
  std::runtime_error *exception;

  if (a1 >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "pool3d_kernel: unsupported pool type");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return off_1E2DD6078[a1];
}

{
  std::runtime_error *exception;

  if (a1 >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "pool_kernel: unsupported pool type");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return off_1E2DD6078[a1];
}

void sub_190DE439C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *`anonymous namespace'::get_anec_final_pad<Espresso::pool3d_params_t>(unsigned int *result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v4 = a3[3];
  v5 = a3[4];
  v6 = a3[2];
  v7 = a4[3];
  v8 = a4[4];
  v9 = a4[2];
  v11 = *(_DWORD *)(a2 + 20);
  v10 = *(_DWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 4);
  v13 = *(_DWORD *)(a2 + 8);
  v14 = *(__int16 *)(a2 + 36);
  v15 = *(unsigned __int16 *)(a2 + 36);
  v17 = *(_DWORD *)(a2 + 12);
  v16 = *(_DWORD *)(a2 + 16);
  switch(v14)
  {
    case 4:
LABEL_4:
      v18 = (v11 * (v7 - 1) - v4 + v13) & ~((v11 * (v7 - 1) - v4 + v13) >> 31);
      v19 = (v16 * (v8 - 1) - v5 + v12) & ~((v16 * (v8 - 1) - v5 + v12) >> 31);
      v20 = (v10 * (v9 - 1) - v6 + v17) & ~((v10 * (v9 - 1) - v6 + v17) >> 31);
      v21 = v19 >> 1;
      v22 = v19 - (v19 >> 1);
      v23 = v18 >> 1;
      v24 = v18 - (v18 >> 1);
      v25 = v20 >> 1;
      v26 = v20 - (v20 >> 1);
      if (v15 == 1)
        v27 = v21;
      else
        v27 = v22;
      if (v15 == 1)
      {
        v28 = v23;
      }
      else
      {
        v22 = v21;
        v28 = v24;
      }
      if (v15 == 1)
        v29 = v24;
      else
        v29 = v23;
      if (v15 == 1)
        v30 = v26;
      else
        v30 = v25;
      if (v15 == 1)
        v31 = v25;
      else
        v31 = v26;
      break;
    case 2:
      v27 = 0;
      v22 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      break;
    case 1:
      goto LABEL_4;
    default:
      v27 = *(__int16 *)(a2 + 44);
      v22 = *(__int16 *)(a2 + 46);
      v28 = *(__int16 *)(a2 + 48);
      v29 = *(__int16 *)(a2 + 50);
      v31 = *(__int16 *)(a2 + 52);
      v30 = *(__int16 *)(a2 + 54);
      break;
  }
  *result = v27;
  result[1] = v22;
  result[2] = v28;
  result[3] = v29;
  result[4] = v30;
  result[5] = v31;
  if (v15 == 3 && *(_DWORD *)(a2 + 32) == 2)
  {
    result[1] = v16 * (v8 - 1) - v5 + v12;
    result[3] = v11 * (v7 - 1) - v4 + v13;
    result[4] = v10 * (v9 - 1) - v6 + v17;
  }
  return result;
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, __int128 *a5)
{
  int v9;
  int v10;
  _DWORD *v11;
  Espresso::ANECompilerEngine *v12;
  __CFString *ANECAxisForNDAxis;
  BOOL v14;
  __CFString *v15;
  __CFString *v17;
  __CFString *v18;
  int v19;
  BOOL v20;
  _QWORD *v21;
  __int128 v22;
  id v23;

  v23 = a2;
  if (*((_BYTE *)a5 + 24))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Broadcast with nd mode not supported on ANE.");
  }
  else if (*((_BYTE *)a5 + 32))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Dynamic Broadcast shapes not supported on ANE.");
  }
  else
  {
    v9 = a4[7];
    v22 = *a5;
    v10 = *((_DWORD *)a5 + 4);
    v11 = operator new(0x14uLL);
    v12 = 0;
    *(_OWORD *)v11 = v22;
    v11[4] = v10;
    do
    {
      if ((int)v11[(_QWORD)v12] >= 2)
      {
        if (*((_DWORD *)a5 + 7))
        {
          ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v12, (int)a3[6], v9 == 0);
LABEL_9:
          v14 = ANECAxisForNDAxis != CFSTR("Width") || a3[4] == 1;
          v15 = ANECAxisForNDAxis;
          if (!v14)
          {
LABEL_13:
            *(_BYTE *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input tensor's magnitude of dimension to be broadcasted is not 1.");
            goto LABEL_49;
          }
LABEL_14:
          if (v15 == CFSTR("Height") && a3[3] != 1)
            goto LABEL_13;
LABEL_19:
          if (v15 == CFSTR("Channel"))
          {
            v17 = v15;
            if (a3[1] != 1)
              goto LABEL_13;
          }
          else
          {
            v17 = v15;
          }
LABEL_23:
          if (v17 == CFSTR("Batch"))
          {
            v18 = v17;
            if (*a3 != 1)
              goto LABEL_13;
          }
          else
          {
            v18 = v17;
          }
        }
        else
        {
          v19 = a3[6];
          ANECAxisForNDAxis = CFSTR("Width");
          v15 = CFSTR("Height");
          switch((int)v12)
          {
            case 0:
              goto LABEL_9;
            case 1:
              goto LABEL_14;
            case 2:
              v15 = CFSTR("Channel");
              if (v9)
                goto LABEL_19;
              v18 = CFSTR("Depth");
              if (v19 != 5)
                goto LABEL_19;
              break;
            case 3:
              if (v9)
              {
                v17 = CFSTR("Batch");
              }
              else
              {
                v15 = CFSTR("Channel");
                v17 = CFSTR("Batch");
                if (v19 == 5)
                  goto LABEL_19;
              }
              goto LABEL_23;
            case 4:
              if (v9)
              {
                v18 = CFSTR("Depth");
              }
              else
              {
                v17 = CFSTR("Batch");
                v18 = CFSTR("Depth");
                if (v19 == 5)
                  goto LABEL_23;
              }
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
          }
        }
        if (v18 == CFSTR("Depth") && a3[2] != 1)
          goto LABEL_13;
      }
      v12 = (Espresso::ANECompilerEngine *)((char *)v12 + 1);
    }
    while (v12 != (Espresso::ANECompilerEngine *)5);
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v23))
    {
      v20 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v23);
      v21 = (_QWORD *)(a1 + 8);
      if (v20)
      {
        *(_BYTE *)a1 = 1;
        std::string::basic_string[abi:ne180100]<0>(v21, "Success");
      }
      else
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>(v21, "Output tensor extents exceed ANE limits.");
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input tensor extents exceed ANE limits.");
    }
LABEL_49:
    operator delete(v11);
  }

}

void sub_190DE4840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  operator delete(v12);

  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DE4974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::context::transform_network_implement_input_preprocessing(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  Espresso::net *v2;
  _QWORD *v3;
  _QWORD *i;
  char *v5;
  __int128 v6;
  const void *v7;
  const void **v8;
  const void **v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t **v21;
  char **v22;
  const void **v23;
  const void **v24;
  const void **v25;
  const void **v26;
  const void **v27;
  const void ***v28;
  uint64_t *v29;
  _OWORD *v33;
  unsigned __int8 *v34;
  unint64_t *j;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  char v49;
  char *v50;
  Espresso *v51;
  const char *v52;
  NSObject *v53;
  Espresso *v54;
  const char *v55;
  NSObject *v56;
  Espresso *v57;
  const char *v58;
  NSObject *v59;
  char v60;
  char v61;
  char *v62;
  __int128 v63;
  const void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  std::string::size_type v69;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v83;
  BOOL v85;
  BOOL v86;
  _BOOL4 v87;
  _BOOL4 v89;
  int v90;
  uint64_t v91;
  int *v92;
  std::string *v93;
  std::string::pointer data;
  uint64_t v95;
  int v96;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *size;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  size_t v124;
  std::string *v125;
  const void *v126;
  size_t v127;
  void **v128;
  const void *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  Espresso *v142;
  std::string *v143;
  uint64_t v144;
  __int128 v145;
  char v146;
  uint64_t v147;
  std::string::size_type v148;
  unsigned __int8 *v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t k;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::string::size_type v159;
  std::string *v160;
  unsigned __int8 *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  std::string *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  NSObject *v201;
  char *v202;
  char *v203;
  __int128 v204;
  __int128 v205;
  int v206;
  uint64_t **v207;
  uint64_t **v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  int v215;
  uint64_t *v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t **v219;
  char *v220;
  int v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  void *v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char **v233;
  uint64_t **v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  int v238;
  uint64_t **v239;
  uint64_t **v240;
  uint64_t **v242;
  Espresso::net *v243;
  std::string v244;
  __int128 v245;
  std::string __str;
  std::string v247;
  void *v248[2];
  char v249;
  std::string v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  void *v254;
  void *v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  void *v261;
  _BYTE *v262;
  uint64_t v263;
  __int128 v264;
  void *v265;
  void *v266;
  uint64_t v267;
  __int128 v268;
  void *v269;
  void *v270;
  uint64_t v271;
  _OWORD v272[2];
  uint64_t v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  __int128 v279;
  void *__src;
  _BYTE *v281;
  uint64_t v282;
  uint64_t v283;
  char **v284;
  char *v285[2];
  void *v286[5];
  _QWORD v287[4];
  int v288;
  std::string *v289;
  int v290[2];
  std::string *v291;
  __int128 v292;
  _QWORD v293[2];
  std::__shared_weak_count *v294;
  __int128 v295;
  __int128 v296;
  int64x2_t v297;
  unint64_t v298;
  int v299;
  Espresso::net *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  _BYTE v303[40];
  void *__p[4];
  __int16 v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  uint64_t v309;
  int v310;
  __int128 v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  __int16 v318;
  int v319;
  char v320;
  std::string v321;
  _QWORD v322[3];
  _QWORD v323[3];
  uint64_t v324;
  std::string v325;
  uint64_t v326;
  std::string v327;
  __int128 v328;

  v2 = a2;
  *(_QWORD *)&v328 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 20))
  {
    v3 = (_QWORD *)*((_QWORD *)a2 + 80);
    for (i = (_QWORD *)*((_QWORD *)a2 + 81); v3 != i; v3 += 3)
    {
      *(_QWORD *)&v272[0] = v3;
      v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 23, v3, (__int128 **)v272);
      v6 = *(_OWORD *)(v5 + 72);
      *(_OWORD *)v303 = *(_OWORD *)(v5 + 56);
      *(_OWORD *)&v303[16] = v6;
      v7 = (const void *)*((_QWORD *)v5 + 12);
      *(_QWORD *)&v303[32] = *((_QWORD *)v5 + 11);
      memset(__p, 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v7, *((_QWORD *)v5 + 13), (uint64_t)(*((_QWORD *)v5 + 13) - (_QWORD)v7) >> 2);
      if (*(int *)v303 > 1 || *(int *)&v303[4] >= 2)
      {
        *(_QWORD *)&v272[0] = v3;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 41, v3, (uint64_t)&std::piecewise_construct, (__int128 **)v272)+ 31) = 1;
        *(_QWORD *)&v272[0] = v3;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 41, v3, (uint64_t)&std::piecewise_construct, (__int128 **)v272)+ 16) = 1;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  memset(v287, 0, sizeof(v287));
  v288 = 1065353216;
  v8 = (const void **)*((_QWORD *)v2 + 41);
  v9 = (const void **)((char *)v2 + 336);
  if (v8 != (const void **)((char *)v2 + 336))
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v287, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      v10 = (const void **)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (const void **)v8[2];
          _ZF = *v11 == v8;
          v8 = v11;
        }
        while (!_ZF);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  Espresso::net::get_consumers_of_blobs(v2, v287, (uint64_t)v286);
  v12 = *((_QWORD *)v2 + 4);
  v237 = (_QWORD *)((char *)v2 + 32);
  v13 = *((_QWORD *)v2 + 5) - v12;
  v14 = v13 >> 4;
  if (!v13)
  {
    v16 = 0;
    goto LABEL_29;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  while (1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v12 + v15) + 64);
    if (v19)
    {
      v20 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v19 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8));
      if (v20 == (***(unsigned int (****)(_QWORD))(*((_QWORD *)v2 + 2) + 8))(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8)))
      {
        if ((v17 & 1) == 0)
          v16 = v18;
        v17 = 1;
        goto LABEL_25;
      }
    }
    if ((v17 & 1) != 0)
      break;
    v17 = 0;
LABEL_25:
    ++v18;
    v12 = *((_QWORD *)v2 + 4);
    v15 += 16;
    if (v18 >= (*((_QWORD *)v2 + 5) - v12) >> 4)
      goto LABEL_29;
  }
  v14 = v18;
LABEL_29:
  v21 = (uint64_t **)((char *)v2 + 328);
  v22 = v285;
  v285[1] = 0;
  v285[0] = 0;
  v284 = v285;
  v23 = (const void **)*((_QWORD *)v2 + 41);
  if (v23 != v9)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v284, v23 + 4, (uint64_t)(v23 + 4));
      v24 = (const void **)v23[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (const void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (const void **)v23[2];
          _ZF = *v25 == v23;
          v23 = v25;
        }
        while (!_ZF);
      }
      v23 = v25;
    }
    while (v25 != v9);
  }
  v26 = (const void **)*((_QWORD *)v2 + 44);
  if (v26 != (const void **)((char *)v2 + 360))
  {
    do
    {
      if (v26[9] != v26[10])
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v284, v26 + 4, (uint64_t)(v26 + 4));
      v27 = (const void **)v26[1];
      if (v27)
      {
        do
        {
          v28 = (const void ***)v27;
          v27 = (const void **)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (const void ***)v26[2];
          _ZF = *v28 == v26;
          v26 = (const void **)v28;
        }
        while (!_ZF);
      }
      v26 = (const void **)v28;
    }
    while (v28 != (const void ***)((char *)v2 + 360));
  }
  v29 = (uint64_t *)v284;
  if (v284 != v285)
  {
    v239 = (uint64_t **)((char *)v2 + 352);
    v240 = (uint64_t **)((char *)v2 + 184);
    v242 = (uint64_t **)((char *)v2 + 784);
    v236 = (_QWORD *)((char *)v2 + 16);
    v235 = (uint64_t)v2 + 56;
    __asm { FMOV            V11.2S, #1.0 }
LABEL_47:
    v33 = v29 + 4;
    v34 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v286, (unsigned __int8 *)v29 + 32);
    if (!v34)
      goto LABEL_427;
    for (j = (unint64_t *)*((_QWORD *)v34 + 5); j != *((unint64_t **)v34 + 6); ++j)
    {
      if (*j < v16 || *j >= v14)
        goto LABEL_427;
    }
    LODWORD(v272[0]) = 1065353216;
    memset((char *)v272 + 12, 0, 20);
    *(_QWORD *)((char *)v272 + 4) = 0x100000000;
    v277 = 0;
    v273 = 0;
    v274 = 0;
    v275 = _D11;
    v276 = 0;
    v278 = 0;
    LODWORD(v279) = 1065353216;
    *(_QWORD *)((char *)&v279 + 4) = 0xFFFFFFFF00000000;
    HIDWORD(v279) = 1;
    v281 = 0;
    v282 = 0;
    __src = 0;
    v283 = 0x100000003;
    v38 = (_QWORD *)*((_QWORD *)v34 + 5);
    v37 = (_QWORD *)*((_QWORD *)v34 + 6);
    if (v37 == v38)
      goto LABEL_425;
    v39 = 0;
    v40 = v37 - v38;
    v41 = *((_QWORD *)v2 + 4);
    while (1)
    {
      if ((unint64_t)((*((_QWORD *)v2 + 5) - v41) >> 4) <= *v38)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v42 = *(_QWORD *)(v41 + 16 * *v38);
      v43 = (unint64_t *)(v42 + 40);
      v44 = *(char *)(v42 + 63);
      if (v44 < 0)
      {
        if (*(_QWORD *)(v42 + 48) == 15)
        {
          v43 = (unint64_t *)*v43;
LABEL_63:
          v45 = bswap64(*v43);
          v46 = 0x74756E6E656C6564;
          if (v45 == 0x74756E6E656C6564
            && (v45 = bswap64(*(unint64_t *)((char *)v43 + 7)),
                v46 = 0x645F616E655F6F70,
                v45 == 0x645F616E655F6F70))
          {
            v47 = 0;
          }
          else if (v45 < v46)
          {
            v47 = -1;
          }
          else
          {
            v47 = 1;
          }
          if (!v47)
            ++v39;
        }
      }
      else if (v44 == 15)
      {
        goto LABEL_63;
      }
      if (++v38 == v37)
      {
        if (v39 != v40)
        {
          if (v39)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Can't directly bind for tunneled network when input is also consumed by non-tunneled layers.");
          if (((*(uint64_t (**)(Espresso::ANECompilerEngine::context *, Espresso::net *, uint64_t *, _OWORD *))(*(_QWORD *)this + 168))(this, v2, v29 + 4, v272) & 1) != 0)
          {
            v48 = fabsf(*(float *)&v272[1]) > 0.000001;
            if (fabsf(*((float *)&v272[1] + 1)) > 0.000001)
              v48 = 1;
            if (fabsf(*((float *)&v272[1] + 2)) > 0.000001)
              v48 = 1;
            if (fabsf(*((float *)&v272[1] + 3)) > 0.000001)
              v48 = 1;
            if (fabsf(*(float *)v272 + -1.0) > 0.000001)
              v48 = 1;
            if (HIDWORD(v272[0]))
              v49 = v48;
            else
              v49 = 1;
            *(_QWORD *)v303 = v29 + 4;
            v50 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303);
            v268 = *(_OWORD *)(v50 + 56);
            v270 = 0;
            v271 = 0;
            v269 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v269, *((const void **)v50 + 9), *((_QWORD *)v50 + 10), (uint64_t)(*((_QWORD *)v50 + 10) - *((_QWORD *)v50 + 9)) >> 2);
            v264 = v279;
            v266 = 0;
            v267 = 0;
            v265 = 0;
            v51 = (Espresso *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v265, __src, (uint64_t)v281, (v281 - (_BYTE *)__src) >> 2);
            Espresso::espresso_os_log_subsystem(v51, v52);
            v53 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v303 = 134218240;
              *(double *)&v303[4] = *(float *)v272;
              *(_WORD *)&v303[12] = 2048;
              *(double *)&v303[14] = *(float *)&v272[1];
              _os_log_debug_impl(&dword_190DAF000, v53, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing: scale=%f bias=%f", v303, 0x16u);
            }

            Espresso::espresso_os_log_subsystem(v54, v55);
            v56 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v303 = 67109888;
              *(_DWORD *)&v303[4] = DWORD2(v268);
              *(_WORD *)&v303[8] = 1024;
              *(_DWORD *)&v303[10] = DWORD1(v268);
              *(_WORD *)&v303[14] = 1024;
              *(_DWORD *)&v303[16] = HIDWORD(v268);
              *(_WORD *)&v303[20] = 2048;
              *(double *)&v303[22] = *(float *)&v268;
              _os_log_debug_impl(&dword_190DAF000, v56, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing, p_net: cp=%d is_signed=%d interleave_factor=%d ratio_to_float_model=%f", v303, 0x1Eu);
            }

            Espresso::espresso_os_log_subsystem(v57, v58);
            v59 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v303 = 67109888;
              *(_DWORD *)&v303[4] = DWORD2(v264);
              *(_WORD *)&v303[8] = 1024;
              *(_DWORD *)&v303[10] = DWORD1(v264);
              *(_WORD *)&v303[14] = 1024;
              *(_DWORD *)&v303[16] = HIDWORD(v264);
              *(_WORD *)&v303[20] = 2048;
              *(double *)&v303[22] = *(float *)&v264;
              _os_log_debug_impl(&dword_190DAF000, v59, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing, p_in: cp=%d is_signed=%d interleave_factor=%d ratio_to_float_model=%f", v303, 0x1Eu);
            }

            if (DWORD2(v268) == DWORD2(v264))
              v60 = v49;
            else
              v60 = 1;
            if (DWORD1(v268) != DWORD1(v264))
              v60 = 1;
            if (HIDWORD(v268) == HIDWORD(v283))
              v61 = v60;
            else
              v61 = 1;
            *(_QWORD *)v303 = v29 + 4;
            v62 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v240, v29 + 4, (__int128 **)v303);
            v63 = *(_OWORD *)(v62 + 72);
            v258 = *(_OWORD *)(v62 + 56);
            v259 = v63;
            v64 = (const void *)*((_QWORD *)v62 + 12);
            v260 = *((_QWORD *)v62 + 11);
            v261 = 0;
            v262 = 0;
            v263 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v261, v64, *((_QWORD *)v62 + 13), (uint64_t)(*((_QWORD *)v62 + 13) - (_QWORD)v64) >> 2);
            v65 = DWORD2(v258);
            if (DWORD2(v258) != (_DWORD)v283)
              v61 = 1;
            v66 = *((_QWORD *)v2 + 89);
            std::string::basic_string[abi:ne180100]<0>(v303, "ane_precompiled_image_transform");
            *(_QWORD *)&v295 = v303;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v66 + 128), v303, (_OWORD **)&v295)+ 14) = 1;
            if ((v303[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v303);
              if ((v61 & 1) == 0)
                goto LABEL_419;
            }
            else if ((v61 & 1) == 0)
            {
              goto LABEL_419;
            }
            v67 = *((_QWORD *)v2 + 89);
            std::string::basic_string[abi:ne180100]<0>(v303, "ane_precompiled_image_transform_added_conv");
            *(_QWORD *)&v295 = v303;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v67 + 128), v303, (_OWORD **)&v295)+ 14) = 1;
            if ((v303[23] & 0x80000000) != 0)
              operator delete(*(void **)v303);
            if (v65 <= 4 && HIDWORD(v258) == 1)
            {
              v251 = v258;
              v252 = v259;
              v253 = v260;
              v255 = 0;
              v256 = 0;
              v254 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v254, v261, (uint64_t)v262, (v262 - (_BYTE *)v261) >> 2);
              v68 = DWORD2(v251);
              __p[3] = _D11;
              v305 = 1;
              v306 = 0;
              v307 = 0;
              v308 = 0;
              v309 = 0x1000100010001;
              v310 = 0;
              v312 = 1;
              v319 = 0;
              v320 = 0;
              v315 = 0;
              v316 = 0;
              memset(v303, 0, 32);
              *(_QWORD *)&v303[32] = 1;
              v313 = 0;
              v314 = 0x10000;
              v317 = 0;
              v318 = 1;
              *(_OWORD *)&__p[1] = xmmword_191A93590;
              v311 = xmmword_191A93310;
              __p[0] = (void *)__PAIR64__(v283, DWORD2(v251));
              v295 = 0uLL;
              std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>((uint64_t *)&v321, v236, (__int128 *)v303);
              v295 = *(_OWORD *)&v321.__r_.__value_.__l.__data_;
              v69 = v321.__r_.__value_.__r.__words[0];
              (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v321.__r_.__value_.__l.__data_
                                                                                        + 472))(&v321, v321.__r_.__value_.__r.__words[0]);
              (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v69 + 488))(&v292, v69);
              _ZF = v68 <= 2 || DWORD2(v272[0]) == HIDWORD(v272[0]);
              v71 = !_ZF;
              *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v272[1];
              if (HIDWORD(v272[0]))
              {
                LODWORD(v327.__r_.__value_.__l.__data_) = DWORD2(v272[1]);
                LODWORD(v327.__r_.__value_.__r.__words[1]) = v272[1];
              }
              v72 = LODWORD(__p[0]);
              if (SLODWORD(__p[0]) >= 1)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                v76 = HIDWORD(__p[0]);
                v77 = *(_QWORD *)(v292 + 16);
                v78 = 4 * HIDWORD(__p[0]);
                v79 = 4 * SHIDWORD(__p[0]);
                do
                {
                  *(_DWORD *)(v77 + 4 * v75) = *((_DWORD *)&v327.__r_.__value_.__l.__data_ + v75);
                  if (v76 >= 1)
                  {
                    v80 = 0;
                    v81 = *(_QWORD *)(v321.__r_.__value_.__r.__words[0] + 24) + v74;
                    do
                    {
                      if (v71)
                      {
                        v83 = v75 == 1 && v80 == 4;
                        v85 = v75 == 2 && v80 == 0;
                        v86 = v80 == 8 && v75 == 0;
                        v87 = 1;
                        if (!v86)
                        {
                          v89 = v75 == 3 && v80 == 12;
                          v90 = v85 || v89;
                          if (v83)
                            v87 = 1;
                          else
                            v87 = v90;
                        }
                      }
                      else
                      {
                        v87 = v73 == v80;
                      }
                      *(float *)(v81 + v80) = *(float *)v272 * (float)v87;
                      v80 += 4;
                    }
                    while (v78 != v80);
                  }
                  ++v75;
                  v74 += v79;
                  v73 += 4;
                }
                while (v75 != v72);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v289, v321.__r_.__value_.__r.__words[0] + 8);
              v91 = 0;
              v92 = *(int **)(v321.__r_.__value_.__r.__words[0] + 24);
              v93 = v289;
              data = v289[1].__r_.__value_.__l.__data_;
              v95 = *(int *)(v321.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v95 *= *(int *)(v321.__r_.__value_.__r.__words[0] + 12 + v91);
                v91 += 4;
              }
              while (v91 != 12);
              for (; v95; --v95)
              {
                v96 = *v92++;
                _S0 = v96;
                __asm { FCVT            H0, S0 }
                *(_WORD *)data = _S0;
                data += 2;
              }
              v325.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
              v325.__r_.__value_.__l.__size_ = *(_QWORD *)v290;
              if (*(_QWORD *)v290)
              {
                v98 = (unint64_t *)(*(_QWORD *)v290 + 8);
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              *(_OWORD *)&v250.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(std::string::size_type, std::string *, std::string *))(*(_QWORD *)v69 + 544))(v69, &v325, &v250);
              size = (std::__shared_weak_count *)v250.__r_.__value_.__l.__size_;
              if (v250.__r_.__value_.__l.__size_)
              {
                v101 = (unint64_t *)(v250.__r_.__value_.__l.__size_ + 8);
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              v103 = (std::__shared_weak_count *)v325.__r_.__value_.__l.__size_;
              if (v325.__r_.__value_.__l.__size_)
              {
                v104 = (unint64_t *)(v325.__r_.__value_.__l.__size_ + 8);
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = v295;
              *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v292;
              if (*((_QWORD *)&v292 + 1))
              {
                v107 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v106 + 392))(v106, &v250);
              v109 = (std::__shared_weak_count *)v250.__r_.__value_.__l.__size_;
              if (v250.__r_.__value_.__l.__size_)
              {
                v110 = (unint64_t *)(v250.__r_.__value_.__l.__size_ + 8);
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              v257 = v295;
              v295 = 0uLL;
              v112 = *(std::__shared_weak_count **)v290;
              if (*(_QWORD *)v290)
              {
                v113 = (unint64_t *)(*(_QWORD *)v290 + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              v115 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
              if (*((_QWORD *)&v292 + 1))
              {
                v116 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              v118 = (std::__shared_weak_count *)v321.__r_.__value_.__l.__size_;
              if (v321.__r_.__value_.__l.__size_)
              {
                v119 = (unint64_t *)(v321.__r_.__value_.__l.__size_ + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              v121 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
              if (*((_QWORD *)&v295 + 1))
              {
                v122 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              if (v254)
              {
                v255 = v254;
                operator delete(v254);
              }
              if (*((char *)v29 + 55) >= 0)
                v124 = *((unsigned __int8 *)v29 + 55);
              else
                v124 = v29[5];
              std::string::basic_string[abi:ne180100]((uint64_t)&v250, v124 + 15);
              v233 = v22;
              v234 = v21;
              if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v125 = &v250;
              else
                v125 = (std::string *)v250.__r_.__value_.__r.__words[0];
              if (v124)
              {
                if (*((char *)v29 + 55) >= 0)
                  v126 = v29 + 4;
                else
                  v126 = (const void *)v29[4];
                memmove(v125, v126, v124);
              }
              strcpy((char *)v125 + v124, "__tmp_inputtx__");
              if (*((char *)v29 + 55) >= 0)
                v127 = *((unsigned __int8 *)v29 + 55);
              else
                v127 = v29[5];
              std::string::basic_string[abi:ne180100]((uint64_t)v248, v127 + 15);
              if (v249 >= 0)
                v128 = v248;
              else
                v128 = (void **)v248[0];
              if (v127)
              {
                if (*((char *)v29 + 55) >= 0)
                  v129 = v29 + 4;
                else
                  v129 = (const void *)v29[4];
                memmove(v128, v129, v127);
              }
              strcpy((char *)v128 + v127, "__tmp_inputtx__");
              if (*((char *)v29 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(&v247, (const std::string::value_type *)v29[4], v29[5]);
              }
              else
              {
                *(_OWORD *)&v247.__r_.__value_.__l.__data_ = *v33;
                v247.__r_.__value_.__r.__words[2] = v29[6];
              }
              if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__str, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
              else
                __str = v250;
              v130 = *((_QWORD *)&v257 + 1);
              v232 = v257;
              v245 = v257;
              if (*((_QWORD *)&v257 + 1))
              {
                v131 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
                do
                  v132 = __ldxr(v131);
                while (__stxr(v132 + 1, v131));
              }
              std::string::basic_string[abi:ne180100]<0>(&v244, "convolution");
              v133 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
              v230 = *((_QWORD *)v2 + 2);
              v301 = v230;
              v302 = v133;
              if (v133)
              {
                p_shared_owners = (unint64_t *)&v133->__shared_owners_;
                do
                  v135 = __ldxr(p_shared_owners);
                while (__stxr(v135 + 1, p_shared_owners));
              }
              v231 = v130;
              v321.__r_.__value_.__r.__words[0] = 0;
              v243 = v2;
              if (*((_QWORD *)v2 + 5) == *((_QWORD *)v2 + 4))
LABEL_442:
                Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Cannot preprocess blob due to blob not found");
              v136 = 0;
              v238 = -1;
              while (2)
              {
                while (2)
                {
                  v137 = v136;
                  *(_QWORD *)v303 = &v321;
                  v138 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v235, (unint64_t *)&v321, (uint64_t)&std::piecewise_construct, (uint64_t **)v303);
                  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138[4] - v138[3]) >> 3);
                  if (v137 < v139)
                  {
                    *(_QWORD *)&v295 = &v321;
                    v142 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v235, (unint64_t *)&v321, (uint64_t)&std::piecewise_construct, (uint64_t **)&v295);
                    v144 = *((_QWORD *)v142 + 3) + 24 * v137;
                    if (*(char *)(v144 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v303, *(const std::string::value_type **)v144, *(_QWORD *)(v144 + 8));
                    }
                    else
                    {
                      v145 = *(_OWORD *)v144;
                      *(_QWORD *)&v303[16] = *(_QWORD *)(v144 + 16);
                      *(_OWORD *)v303 = v145;
                    }
                    v146 = v303[23];
                    if (v303[23] >= 0)
                      v147 = v303[23];
                    else
                      v147 = *(_QWORD *)&v303[8];
                    v148 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
                    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v148 = v247.__r_.__value_.__l.__size_;
                    if (v147 != v148)
                      goto LABEL_264;
                    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v143 = &v247;
                    else
                      v143 = (std::string *)v247.__r_.__value_.__r.__words[0];
                    if ((v303[23] & 0x80) != 0)
                    {
                      v142 = (Espresso *)memcmp(*(const void **)v303, v143, *(size_t *)&v303[8]);
                      if ((_DWORD)v142)
                        goto LABEL_264;
                    }
                    else if (v303[23])
                    {
                      v149 = v303;
                      v150 = v303[23];
                      while (*v149 == v143->__r_.__value_.__s.__data_[0])
                      {
                        ++v149;
                        v143 = (std::string *)((char *)v143 + 1);
                        if (!--v150)
                          goto LABEL_259;
                      }
LABEL_264:
                      v152 = 1;
                      if (v146 < 0)
LABEL_265:
                        operator delete(*(void **)v303);
LABEL_266:
                      v136 = v137 + 1;
                      if (!v152)
                        goto LABEL_353;
                      continue;
                    }
LABEL_259:
                    v151 = v238;
                    if (v238 == -1)
                      v151 = (int)v321.__r_.__value_.__l.__data_;
                    v238 = v151;
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v237 + 16 * v321.__r_.__value_.__r.__words[0]) + 64)
                                   + 8) == v230)
                      goto LABEL_264;
                    v152 = 0;
                    if (v146 < 0)
                      goto LABEL_265;
                    goto LABEL_266;
                  }
                  break;
                }
                v136 = 0;
                ++v321.__r_.__value_.__r.__words[0];
                v141 = *((_QWORD *)v243 + 4);
                v140 = *((_QWORD *)v243 + 5);
                if (v321.__r_.__value_.__r.__words[0] < (v140 - v141) >> 4)
                  continue;
                break;
              }
              if (v238 == -1)
                goto LABEL_442;
              *(_QWORD *)&v295 = 0;
              if (v140 != v141)
              {
                for (k = 0; ; ++k)
                {
                  while (1)
                  {
                    *(_QWORD *)v303 = &v295;
                    v154 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v235, (unint64_t *)&v295, (uint64_t)&std::piecewise_construct, (uint64_t **)v303);
                    if (k < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154[4] - v154[3]) >> 3))
                      break;
                    k = 0;
                    *(_QWORD *)&v295 = v295 + 1;
                    v140 = *((_QWORD *)v243 + 4);
                    if ((unint64_t)v295 >= (*((_QWORD *)v243 + 5) - v140) >> 4)
                      goto LABEL_292;
                  }
                  *(_QWORD *)v303 = &v295;
                  v155 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v235, (unint64_t *)&v295, (uint64_t)&std::piecewise_construct, (uint64_t **)v303);
                  v156 = v155[3] + 24 * k;
                  v157 = *(unsigned __int8 *)(v156 + 23);
                  if ((v157 & 0x80u) == 0)
                    v158 = *(unsigned __int8 *)(v156 + 23);
                  else
                    v158 = *(_QWORD *)(v156 + 8);
                  v159 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
                  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v159 = v247.__r_.__value_.__l.__size_;
                  if (v158 == v159)
                  {
                    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v160 = &v247;
                    else
                      v160 = (std::string *)v247.__r_.__value_.__r.__words[0];
                    if ((v157 & 0x80) != 0)
                    {
                      if (memcmp(*(const void **)v156, v160, *(_QWORD *)(v156 + 8)))
                        continue;
LABEL_290:
                      std::string::operator=((std::string *)v156, &__str);
                      continue;
                    }
                    if (!*(_BYTE *)(v156 + 23))
                      goto LABEL_290;
                    v161 = (unsigned __int8 *)(v155[3] + 24 * k);
                    while (*v161 == v160->__r_.__value_.__s.__data_[0])
                    {
                      ++v161;
                      v160 = (std::string *)((char *)v160 + 1);
                      if (!--v157)
                        goto LABEL_290;
                    }
                  }
                }
              }
LABEL_292:
              v298 = 0;
              v296 = 0u;
              v297 = 0u;
              v295 = 0u;
              v300 = v243;
              v299 = v238 - 1;
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v296, *(_QWORD *)(v140 + 16 * v238), *(_QWORD *)(v140 + 16 * v238 + 8));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v295, *(_QWORD *)(v296 + 64), *(_QWORD *)(v296 + 72));
              v293[1] = v232;
              v294 = (std::__shared_weak_count *)v231;
              if (v231)
              {
                v162 = (unint64_t *)(v231 + 8);
                do
                  v163 = __ldxr(v162);
                while (__stxr(v163 + 1, v162));
              }
              if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v327, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
              else
                v327 = v247;
              v292 = 0uLL;
              v293[0] = 0;
              *(_QWORD *)v303 = &v292;
              v303[8] = 0;
              *(_QWORD *)&v292 = operator new(0x18uLL);
              *((_QWORD *)&v292 + 1) = v292;
              v293[0] = v292 + 24;
              *((_QWORD *)&v292 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v293, (__int128 *)&v327, &v328, (std::string *)v292);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v325, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              else
                v325 = __str;
              *(_QWORD *)v290 = 0;
              v289 = 0;
              v291 = 0;
              *(_QWORD *)v303 = &v289;
              v303[8] = 0;
              v289 = (std::string *)operator new(0x18uLL);
              *(_QWORD *)v290 = v289;
              v291 = v289 + 1;
              *(_QWORD *)v290 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v291, (__int128 *)&v325, (__int128 *)&v326, v289);
              *(_DWORD *)v303 = 0;
              memset(&v303[8], 0, 32);
              memset(__p, 0, sizeof(__p));
              v164 = (char *)operator new(0xF8uLL);
              *((_QWORD *)v164 + 1) = 0;
              *((_QWORD *)v164 + 2) = 0;
              *(_QWORD *)v164 = &off_1E2DBF0D0;
              *((_QWORD *)v164 + 3) = &off_1E2DA1A38;
              *(_OWORD *)(v164 + 56) = 0u;
              *(_OWORD *)(v164 + 72) = 0u;
              *(_OWORD *)(v164 + 104) = 0u;
              *(_OWORD *)(v164 + 120) = 0u;
              *(_OWORD *)(v164 + 136) = 0u;
              *(_OWORD *)(v164 + 152) = 0u;
              *(_OWORD *)(v164 + 40) = 0u;
              v165 = (std::string *)(v164 + 40);
              *(_OWORD *)(v164 + 88) = 0u;
              *(_OWORD *)(v164 + 161) = 0u;
              *((_OWORD *)v164 + 13) = 0u;
              *((_OWORD *)v164 + 14) = 0u;
              *((_QWORD *)v164 + 30) = 0;
              *(_QWORD *)&v303[8] = v164 + 24;
              *(_QWORD *)&v303[16] = v164;
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v164 + 11, v232, v231);
              std::string::operator=(v165, &v250);
              std::string::operator=((std::string *)(*(_QWORD *)&v303[8] + 40), &v244);
              v166 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v232 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v232 + 8) + 8));
              v167 = *(_QWORD *)&v303[8];
              *(_DWORD *)(*(_QWORD *)&v303[8] + 8) = v166;
              v168 = v296;
              if ((_QWORD)v296)
              {
                *(_DWORD *)(v167 + 12) = *(_DWORD *)(v296 + 12);
                if (*(char *)(v168 + 223) < 0)
                  std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(v168 + 200), *(_QWORD *)(v168 + 208));
                else
                  v321 = *(std::string *)(v168 + 200);
                std::string::operator=((std::string *)(v167 + 200), &v321);
                if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v321.__r_.__value_.__l.__data_);
              }
              else
              {
                v169 = *((_QWORD *)v300 + 4);
                if (*((_QWORD *)v300 + 5) != v169)
                  *(_DWORD *)(v167 + 12) = *(_DWORD *)(*(_QWORD *)v169 + 12);
              }
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v303[24], (std::string *)v292, *((std::string **)&v292 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v292 + 1) - v292) >> 3));
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&__p[1], v289, *(std::string **)v290, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v290 - (_QWORD)v289) >> 3));
              *(_DWORD *)v303 = v299;
              v170 = v297.i64[1];
              if (v297.i64[1] >= v298)
              {
                v171 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v297, (uint64_t)v303);
              }
              else
              {
                std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v297.i64[1], (uint64_t)v303);
                v171 = v170 + 72;
              }
              v297.i64[1] = v171;
              v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[1];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
              v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303[24];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
              v172 = *(std::__shared_weak_count **)&v303[16];
              if (*(_QWORD *)&v303[16])
              {
                v173 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 - 1, v173));
                if (!v174)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              *(_QWORD *)v303 = &v289;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v303);
              if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v325.__r_.__value_.__l.__data_);
              *(_QWORD *)v303 = &v292;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v303);
              if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v327.__r_.__value_.__l.__data_);
              v175 = v294;
              if (v294)
              {
                v176 = (unint64_t *)&v294->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              v178 = (uint64_t *)v297.i64[0];
              *(_DWORD *)v303 = *(_DWORD *)v297.i64[0];
              v179 = *(_QWORD *)(v297.i64[0] + 16);
              *(_QWORD *)&v303[8] = *(_QWORD *)(v297.i64[0] + 8);
              *(_QWORD *)&v303[16] = v179;
              if (v179)
              {
                v180 = (unint64_t *)(v179 + 8);
                do
                  v181 = __ldxr(v180);
                while (__stxr(v181 + 1, v180));
              }
              *(_QWORD *)&v303[24] = 0;
              *(_QWORD *)&v303[32] = 0;
              __p[0] = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v303[24], v178[3], v178[4], 0xAAAAAAAAAAAAAAABLL * ((v178[4] - v178[3]) >> 3));
              memset(&__p[1], 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[1], v178[6], v178[7], 0xAAAAAAAAAAAAAAABLL * ((v178[7] - v178[6]) >> 3));
              LODWORD(v321.__r_.__value_.__l.__data_) = *(_DWORD *)v303;
              *(_OWORD *)&v321.__r_.__value_.__r.__words[1] = *(_OWORD *)&v303[8];
              if (*(_QWORD *)&v303[16])
              {
                v182 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
                do
                  v183 = __ldxr(v182);
                while (__stxr(v183 + 1, v182));
              }
              memset(v322, 0, sizeof(v322));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v322, *(uint64_t *)&v303[24], *(uint64_t *)&v303[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v303[32] - *(_QWORD *)&v303[24]) >> 3));
              memset(v323, 0, sizeof(v323));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v323, (uint64_t)__p[1], (uint64_t)__p[2], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[1]) >> 3));
              v292 = 0uLL;
              v293[0] = 0;
              v327.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
              v327.__r_.__value_.__s.__data_[8] = 0;
              *(_QWORD *)&v292 = operator new(0x48uLL);
              *((_QWORD *)&v292 + 1) = v292;
              v293[0] = v292 + 72;
              *((_QWORD *)&v292 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v293, (uint64_t)&v321, (uint64_t)&v324, v292);
              Espresso::net::insert_layers((uint64_t)v243, (uint64_t *)&v292);
              v327.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
              std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
              v327.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
              v327.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
              v184 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
              if (v321.__r_.__value_.__r.__words[2])
              {
                v185 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[1];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
              v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303[24];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
              v187 = *(std::__shared_weak_count **)&v303[16];
              if (*(_QWORD *)&v303[16])
              {
                v188 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              *(_QWORD *)v303 = &v297;
              std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v303);
              v190 = (std::__shared_weak_count *)*((_QWORD *)&v296 + 1);
              if (*((_QWORD *)&v296 + 1))
              {
                v191 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
                do
                  v192 = __ldaxr(v191);
                while (__stlxr(v192 - 1, v191));
                if (!v192)
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                }
              }
              v193 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
              if (*((_QWORD *)&v295 + 1))
              {
                v194 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                do
                  v195 = __ldaxr(v194);
                while (__stlxr(v195 - 1, v194));
                if (!v195)
                {
                  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                  std::__shared_weak_count::__release_weak(v193);
                }
              }
              v133 = v302;
LABEL_353:
              if (v133)
              {
                v196 = (unint64_t *)&v133->__shared_owners_;
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *, std::string *))v133->__on_zero_shared)(v133, v143);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v244.__r_.__value_.__l.__data_);
              v198 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
              if (*((_QWORD *)&v245 + 1))
              {
                v199 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *, std::string *))v198->__on_zero_shared)(v198, v143);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v247.__r_.__value_.__l.__data_);
              if (v137 < v139)
              {
                Espresso::espresso_os_log_subsystem(v142, (const char *)v143);
                v201 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v201, OS_LOG_TYPE_DEBUG))
                {
                  v227 = v29 + 4;
                  if (*((char *)v29 + 55) < 0)
                    v227 = *(uint64_t **)v33;
                  *(_DWORD *)v303 = 136315138;
                  *(_QWORD *)&v303[4] = v227;
                  _os_log_debug_impl(&dword_190DAF000, v201, OS_LOG_TYPE_DEBUG, "Cannot apply input optimization: input blob %s used by multiple engines", v303, 0xCu);
                }

              }
              *(_QWORD *)v303 = v29 + 4;
              v202 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v240, v29 + 4, (__int128 **)v303);
              *(_QWORD *)v303 = &v250;
              v203 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v240, &v250, (__int128 **)v303);
              v204 = *(_OWORD *)(v202 + 56);
              v205 = *(_OWORD *)(v202 + 72);
              *((_QWORD *)v203 + 11) = *((_QWORD *)v202 + 11);
              *(_OWORD *)(v203 + 72) = v205;
              *(_OWORD *)(v203 + 56) = v204;
              if (v203 != v202)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v203 + 96, *((char **)v202 + 12), *((_QWORD *)v202 + 13), (uint64_t)(*((_QWORD *)v202 + 13) - *((_QWORD *)v202 + 12)) >> 2);
              v206 = v283;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v240, v29 + 4, (__int128 **)v303)+ 16) = v206;
              v207 = (uint64_t **)*((_QWORD *)v243 + 97);
              if (v207 != v242)
              {
                while (1)
                {
                  v208 = (uint64_t **)v207[10];
                  if (v208 != v207 + 11)
                    break;
LABEL_399:
                  v218 = v207[1];
                  if (v218)
                  {
                    do
                    {
                      v219 = (uint64_t **)v218;
                      v218 = (uint64_t *)*v218;
                    }
                    while (v218);
                  }
                  else
                  {
                    do
                    {
                      v219 = (uint64_t **)v207[2];
                      _ZF = *v219 == (uint64_t *)v207;
                      v207 = v219;
                    }
                    while (!_ZF);
                  }
                  v207 = v219;
                  if (v219 == v242)
                    goto LABEL_405;
                }
                while (2)
                {
                  v209 = *((unsigned __int8 *)v208 + 55);
                  if ((v209 & 0x80u) == 0)
                    v210 = (uint64_t *)*((unsigned __int8 *)v208 + 55);
                  else
                    v210 = v208[5];
                  v211 = *((unsigned __int8 *)v29 + 55);
                  v212 = (char)v211;
                  if ((v211 & 0x80u) != 0)
                    v211 = v29[5];
                  if (v210 == (uint64_t *)v211)
                  {
                    if (v212 >= 0)
                      v213 = (unsigned __int8 *)(v29 + 4);
                    else
                      v213 = *(unsigned __int8 **)v33;
                    if ((v209 & 0x80) != 0)
                    {
                      if (memcmp(v208[4], v213, (size_t)v208[5]))
                        goto LABEL_393;
                    }
                    else if (*((_BYTE *)v208 + 55))
                    {
                      v214 = (unsigned __int8 *)(v208 + 4);
                      while (*v214 == *v213)
                      {
                        ++v214;
                        ++v213;
                        if (!--v209)
                          goto LABEL_392;
                      }
                      goto LABEL_393;
                    }
LABEL_392:
                    v215 = v283;
                    *(_QWORD *)v303 = v208 + 4;
                    *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v207 + 10, v208 + 4, (__int128 **)v303)+ 16) = v215;
                  }
LABEL_393:
                  v216 = v208[1];
                  if (v216)
                  {
                    do
                    {
                      v217 = (uint64_t **)v216;
                      v216 = (uint64_t *)*v216;
                    }
                    while (v216);
                  }
                  else
                  {
                    do
                    {
                      v217 = (uint64_t **)v208[2];
                      _ZF = *v217 == (uint64_t *)v208;
                      v208 = v217;
                    }
                    while (!_ZF);
                  }
                  v208 = v217;
                  if (v217 == v207 + 11)
                    goto LABEL_399;
                  continue;
                }
              }
LABEL_405:
              *(_QWORD *)v303 = v29 + 4;
              v21 = v234;
              v2 = v243;
              v22 = v233;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 18) = 0;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 19) = 0;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 20) = 0;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 21) = 0;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 14) = 1065353216;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 16) = 1;
              *(_QWORD *)v303 = v29 + 4;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v234, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 17) = 1;
              *(_QWORD *)v303 = v29 + 4;
              v220 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v303);
              *(_OWORD *)(v220 + 56) = v279;
              if (v220 + 56 != (char *)&v279)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v220 + 72, (char *)__src, (uint64_t)v281, (v281 - (_BYTE *)__src) >> 2);
              if (DWORD2(v268) == 4 || DWORD2(v268) == 2)
              {
                v221 = v268;
                *(_QWORD *)v303 = &v250;
                *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, &v250, (uint64_t)&std::piecewise_construct, (__int128 **)v303)+ 14) = v221;
              }
              if (v249 < 0)
                operator delete(v248[0]);
              if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v250.__r_.__value_.__l.__data_);
              v222 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
              if (*((_QWORD *)&v257 + 1))
              {
                v223 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
                do
                  v224 = __ldaxr(v223);
                while (__stlxr(v224 - 1, v223));
                if (!v224)
                {
                  ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                  std::__shared_weak_count::__release_weak(v222);
                }
              }
            }
LABEL_419:
            if (v261)
            {
              v262 = v261;
              operator delete(v261);
            }
            if (v265)
            {
              v266 = v265;
              operator delete(v265);
            }
            if (v269)
            {
              v270 = v269;
              operator delete(v269);
            }
          }
        }
LABEL_425:
        if (__src)
        {
          v281 = __src;
          operator delete(__src);
        }
LABEL_427:
        v225 = (uint64_t *)v29[1];
        if (v225)
        {
          do
          {
            v226 = v225;
            v225 = (uint64_t *)*v225;
          }
          while (v225);
        }
        else
        {
          do
          {
            v226 = (uint64_t *)v29[2];
            _ZF = *v226 == (_QWORD)v29;
            v29 = v226;
          }
          while (!_ZF);
        }
        v29 = v226;
        if (v226 == (uint64_t *)v22)
          break;
        goto LABEL_47;
      }
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v284, v285[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v286[2]);
  v228 = v286[0];
  v286[0] = 0;
  if (v228)
    operator delete(v228);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v287);
}

void sub_190DE68E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  uint64_t v75;
  void *v77;
  void *v78;
  void *v79;
  void *v80;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&STACK[0x490]);
  STACK[0x490] = (unint64_t)&STACK[0x3F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  if (*(char *)(v75 - 201) < 0)
    operator delete(*(void **)(v75 - 224));
  STACK[0x490] = (unint64_t)&STACK[0x408];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  if (*(char *)(v75 - 169) < 0)
    operator delete(*(void **)(v75 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  Espresso::single_match_state<Espresso::generic_inner_product_kernel>::~single_match_state((uint64_t)&STACK[0x430]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  if (a61 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a71);
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a75);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  v77 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v77;
    operator delete(v77);
  }
  v78 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v78;
    operator delete(v78);
  }
  v79 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v79;
    operator delete(v79);
  }
  v80 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v80;
    operator delete(v80);
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x380], (char *)STACK[0x388]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&STACK[0x398]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v18;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v18, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x88uLL);
    v9 = (std::string *)(v7 + 32);
    v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      *((_QWORD *)v7 + 6) = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    *((_DWORD *)v7 + 14) = 1065353216;
    *(_QWORD *)(v7 + 76) = 0;
    *(_QWORD *)(v7 + 68) = 0;
    *((_DWORD *)v7 + 21) = 0;
    *(_QWORD *)(v7 + 60) = 0x100000000;
    *((_DWORD *)v7 + 32) = 0;
    *((_QWORD *)v7 + 14) = 0;
    *((_QWORD *)v7 + 15) = 0;
    *((_QWORD *)v7 + 11) = 0;
    *((_QWORD *)v7 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v7 + 13) = _D0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v18, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_190DE6D18(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::reshape_networks_graph_coloring_raw_ptr(_QWORD *result, char **a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  unsigned int (***v6)(_QWORD);
  _BOOL4 v7;
  uint64_t (***v8)(_QWORD);
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  char *v16;
  char *v17;
  _QWORD *j;
  unint64_t *v19;
  uint64_t **v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *k;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  int v38;

  *result = 0;
  result[1] = 0;
  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v5 = result;
    v36 = 0u;
    v37 = 0u;
    v38 = 1065353216;
    do
    {
      std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>((uint64_t)&v36, *(_QWORD *)(*(_QWORD *)v3 + 16), *(_QWORD *)(*(_QWORD *)v3 + 16), *(_QWORD *)(*(_QWORD *)v3 + 24));
      v6 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)v3 + 16) + 8);
      if ((**v6)(v6) == 10007)
      {
        v7 = 1;
      }
      else
      {
        v8 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)v3 + 16) + 8);
        v7 = (**v8)(v8) == 10006;
      }
      for (i = *(_QWORD **)(*(_QWORD *)v3 + 152); i; i = (_QWORD *)*i)
      {
        v10 = i[5];
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 72);
          if (v11)
          {
            v12 = !(***(unsigned int (****)(_QWORD))(v11 + 8))(*(_QWORD *)(v11 + 8))
               || (***(unsigned int (****)(_QWORD))(*(_QWORD *)(v10 + 72) + 8))(*(_QWORD *)(*(_QWORD *)(v10 + 72) + 8)) == 100;
            v13 = *(_QWORD *)(v10 + 72);
            if (*(_BYTE *)(v13 + 44))
            {
              v14 = !v12 || v7;
              v15 = *(_BYTE *)(v13 + 124) || v14 == 0;
              if (!v15
                && !std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v36, *((unint64_t *)&v36 + 1), *(_QWORD *)(v10 + 72)))
              {
                std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>((uint64_t)&v36, v13, v13, *(_QWORD *)(v10 + 80));
              }
            }
          }
        }
      }
      v3 += 8;
    }
    while (v3 != v2);
    v16 = *a2;
    v17 = a2[1];
    while (v16 != v17)
    {
      for (j = *(_QWORD **)(*(_QWORD *)v16 + 152); j; j = (_QWORD *)*j)
      {
        v19 = (unint64_t *)j[5];
        if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v36, *((unint64_t *)&v36 + 1), v19[9]))
        {
          v20 = (uint64_t **)(*(_QWORD *)v16 + 184);
          *(_QWORD *)&v33 = j + 2;
          v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, j + 2, (__int128 **)&v33);
          v34 = 0;
          v35 = 0;
          (*(void (**)(unint64_t *, char *, uint64_t *))(*v19 + 16))(v19, v21 + 56, &v34);
          v22 = v35;
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
      v16 += 8;
    }
    for (k = (_QWORD *)v37; k; k = (_QWORD *)*k)
    {
      Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(&v33, (uint64_t)(k + 2), a2);
      v26 = v33;
      v33 = 0uLL;
      v27 = (std::__shared_weak_count *)v5[1];
      *(_OWORD *)v5 = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    return (_QWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&v36);
  }
  return result;
}

void sub_190DE7000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::direct_engine::platform(Espresso::ANERuntimeEngine::direct_engine *this)
{
  return 10006;
}

uint64_t Espresso::BNNSEngine::engine::platform(Espresso::BNNSEngine::engine *this)
{
  return 100;
}

uint64_t Espresso::also_check_not_blacklisted(uint64_t a1, unsigned int a2, uint64_t a3, const void **a4)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v8 = (***((uint64_t (****)(_QWORD))*a4 + 1))(*((_QWORD *)*a4 + 1));
  v9 = is_metal_but_not_mps_buffers(v8);
  v10 = (***((unsigned int (****)(_QWORD))*a4 + 1))(*((_QWORD *)*a4 + 1)) == 50001 || v9;
  v23 = (***((uint64_t (****)(_QWORD))*a4 + 1))(*((_QWORD *)*a4 + 1));
  v11 = is_cpu(&v23);
  if (*a4
  {
    v12 = (std::__shared_weak_count *)a4[1];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  if (*(_DWORD *)(a3 + 224 * a1 + 72))
    v17 = v10;
  else
    v17 = 0;
  if ((v17 & 1) != 0 || (*(_DWORD *)(a3 + 224 * a1 + 76) ? (v18 = v16) : (v18 = 0), (v18 & 1) != 0))
    result = 0;
  else
    result = ((*(_DWORD *)(a3 + 224 * a1 + 80) == 0) | ~v11) & a2;
  v20 = *((_QWORD *)*a4 + 16);
  if (v20)
  {
    if ((v20 & 4) != 0)
      v16 = 0;
    if ((v20 & 2) != 0)
      v21 = 0;
    else
      v21 = v10;
    if ((v20 & 1) != 0)
      v22 = 0;
    else
      v22 = v11;
    return result & ~(v22 | v16 | v21);
  }
  return result;
}

uint64_t Espresso::ANERuntimeEngine::engine::platform(Espresso::ANERuntimeEngine::engine *this)
{
  return 10007;
}

uint64_t is_cpu(int *a1)
{
  int v1;
  uint64_t result;
  BOOL v5;

  v1 = *a1;
  result = 1;
  if (v1 <= 99)
  {
    if (v1)
      v5 = v1 == 6;
    else
      v5 = 1;
    if (!v5)
      return 0;
  }
  else if ((v1 - 100) >= 2 && v1 != 10010 && v1 != 80000)
  {
    return 0;
  }
  return result;
}

BOOL is_metal_but_not_mps_buffers(int a1)
{
  return ((a1 - 50000) <= 8 && ((1 << (a1 - 80)) & 0x163) != 0 || a1 == 90000 || a1 == 20000)
      && (a1 - 50004) < 0xFFFFFFFE;
}

uint64_t Espresso::MPSEngine::engine::platform(Espresso::MPSEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  _QWORD v41[2];
  char v42;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x20uLL);
  v41[0] = v17;
  v41[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v17[2] = a3;
  v17[3] = a4;
  if (a4)
  {
    v18 = (unint64_t *)(a4 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v16;
          if (*v16)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v16;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v38 = v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = v38;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v38;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v16;
  if (*(_QWORD *)v38)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v38 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
}

void sub_190DE76DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = operator new(0x38uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = operator new(0x38uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  *v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_190DE7884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::load_blob_storage(_QWORD *a1, uint64_t a2, const void **a3, FILE *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  char v16;
  char v17;
  __n128 v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  const char *v22;
  std::string *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  Espresso *v33;
  const char *v34;
  int v35;
  NSObject *v36;
  std::string *v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::string *v40;
  std::string *p_p;
  void *v42[2];
  char v43;
  std::string v44;
  std::string __p;
  std::string __ptr;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__ptr, "storage");
  v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 24))(a2, &__ptr);
  v17 = v16;
  if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 1) != 0)
      goto LABEL_3;
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  operator delete(__ptr.__r_.__value_.__l.__data_);
  if ((v17 & 1) == 0)
    goto LABEL_28;
LABEL_3:
  memset(&v44, 0, sizeof(v44));
  std::string::basic_string[abi:ne180100]<0>(&__p, "storage");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)&__p, &__ptr);
  v18.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__ptr, (uint64_t)&v44);
  if (v47 < 0)
    operator delete((void *)__ptr.__r_.__value_.__r.__words[2]);
  size = (std::__shared_weak_count *)__ptr.__r_.__value_.__l.__size_;
  if (__ptr.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__ptr.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *, __n128))size->__on_zero_shared)(size, v18);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a4)
      goto LABEL_12;
LABEL_30:
    if (a6)
    {
      v31 = (char *)operator new(0x78uLL);
      *(_OWORD *)(v31 + 8) = 0u;
      *(_QWORD *)v31 = &off_1E2DBB470;
      *((_QWORD *)v31 + 3) = &off_1E2D81658;
      *(_OWORD *)(v31 + 40) = 0u;
      *((_QWORD *)v31 + 4) = v31 + 40;
      v31[56] = 0;
      *((_OWORD *)v31 + 4) = 0u;
      *((_OWORD *)v31 + 5) = 0u;
      *((_QWORD *)v31 + 12) = a6;
      *((_QWORD *)v31 + 13) = a7;
      v31[112] = 0;
      Espresso::blob_storage_mmap::setup_header((uint64_t **)v31 + 3, 0);
      *(_QWORD *)&v32 = v31 + 24;
      *((_QWORD *)&v32 + 1) = v31;
      *(_OWORD *)a1 = v32;
    }
    else
    {
      Espresso::load_blob_storage_mmap(a1, &v44, a3);
      if (!*a1)
      {
        if (!a8)
        {
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v44;
          else
            v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::io_error,char const*>("Missing weights path %s", (uint64_t)v40);
        }
        std::string::basic_string[abi:ne180100]<0>(&__ptr, "alt_storage");
        v33 = (Espresso *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 24))(a2, &__ptr);
        v35 = (int)v33;
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__ptr.__r_.__value_.__l.__data_);
        if (v35)
        {
          memset(&__p, 0, sizeof(__p));
          std::string::basic_string[abi:ne180100]<0>(v42, "alt_storage");
          Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v42, &__ptr);
          Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__ptr, (uint64_t)&__p);
          Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)&__ptr.__r_.__value_.__l.__data_);
          if (v43 < 0)
            operator delete(v42[0]);
          Espresso::load_blob_storage_mmap(&__ptr, &__p, a3);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&__ptr);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__ptr);
          if (!*a1)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::io_error,char const*>("Missing alt-weights path %s", (uint64_t)p_p);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          Espresso::espresso_os_log_subsystem(v33, v34);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            v37 = &v44;
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v37 = (std::string *)v44.__r_.__value_.__r.__words[0];
            LODWORD(__ptr.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__ptr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
            _os_log_debug_impl(&dword_190DAF000, v36, OS_LOG_TYPE_DEBUG, "Missing weights path %s. This is acceptable if the network doesn't have layers with weights falling out of ANE.\n", (uint8_t *)&__ptr, 0xCu);
          }

        }
      }
    }
    goto LABEL_44;
  }
  if (!a4)
    goto LABEL_30;
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  fseek(a4, 0, 0);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v44;
  else
    v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if (Espresso::BinSerializer::BinSerializer_fseek(a4, (__sFILE *)v23, v22))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__ptr);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (fread(&__ptr, 0x28uLL, 1uLL, a4) != 1)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v39, &__p);
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v42[0] = (void *)MEMORY[0x19401D21C](a4);
  fclose(a4);
  std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(&__p, a5, (uint64_t *)v42);
  v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v25 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v24;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_44:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_190DE7DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void Espresso::load_blob_storage_mmap(_QWORD *a1, std::string *this, const void **a3)
{
  std::string::size_type v6;
  size_t v7;
  std::string *v8;
  std::string *v9;
  const void *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  std::string *v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string __p;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v18 = *this;
LABEL_4:
    __p = *this;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v18, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_4;
  std::string::__init_copy_ctor_external(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
LABEL_5:
  v6 = std::string::rfind(this, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 != -1)
  {
    std::string::basic_string(&v19, this, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v19;
  }
  if (*((char *)a3 + 23) >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v7)
  {
    v8 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if (v8->__r_.__value_.__s.__data_[0] != 47)
    {
      v9 = &v19;
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v7 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (*((char *)a3 + 23) >= 0)
        v10 = a3;
      else
        v10 = *a3;
      memmove(v9, v10, v7);
      *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v7) = 47;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v13 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
      v14 = v13->__r_.__value_.__r.__words[0];
      v21[0] = v13->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v18.__r_.__value_.__r.__words[0] = v14;
      v18.__r_.__value_.__l.__size_ = v21[0];
      *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v21 + 7);
      *((_BYTE *)&v18.__r_.__value_.__s + 23) = v15;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = 0;
  a1[1] = 0;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v18;
  else
    v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (!access((const char *)v16, 0))
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v18;
    else
      v17 = (std::string *)v18.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v17);
    Espresso::make_blob_storage_mmap((uint64_t *)&v19, (uint64_t)&__p);
    std::shared_ptr<Espresso::blob_storage_abstract>::operator=[abi:ne180100]<Espresso::blob_storage_abstract,std::default_delete<Espresso::blob_storage_abstract>,void>(a1, (uint64_t *)&v19);
    if (v19.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v19.__r_.__value_.__l.__data_ + 8))(v19.__r_.__value_.__r.__words[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_190DE8188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::context::needs_precompiled_image_transform_for_blob(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  char *v8;
  __int128 v9;
  const void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  int v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  _DWORD *v40;
  int v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *__p;
  void *v48;
  uint64_t v49;

  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a2 + 240), a3))return 0;
  v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 352, a3);
  *(_QWORD *)&v43 = a3;
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 184), a3, (__int128 **)&v43);
  v9 = *(_OWORD *)(v8 + 72);
  v44 = *(_OWORD *)(v8 + 56);
  v45 = v9;
  v10 = (const void *)*((_QWORD *)v8 + 12);
  v46 = *((_QWORD *)v8 + 11);
  __p = 0;
  v48 = 0;
  v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, *((_QWORD *)v8 + 13), (uint64_t)(*((_QWORD *)v8 + 13) - (_QWORD)v10) >> 2);
  v43 = 0uLL;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("espresso.ane.always_compressed"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "BOOLValue");

  v15 = getenv("ESPRESSO_PRIVATE_ANE_ALWAYS_COMPRESSED");
  if (v15)
    v16 = atoi(v15) != 0;
  else
    v16 = 0;
  v18 = v14 | v16;
  if (DWORD2(v44) == 3)
    LOBYTE(v19) = v18;
  else
    LOBYTE(v19) = 0;

  v20 = (_QWORD *)(a2 + 360);
  if ((_QWORD *)(a2 + 360) == v7)
    goto LABEL_17;
  v21 = (char *)v7[9];
  v22 = v7[10];
  if (v21 == (char *)v22)
    goto LABEL_17;
  if ((_QWORD *)(a4 + 96) != v7 + 9)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 96), v21, v22, (v22 - (uint64_t)v21) >> 2);
  v23 = **(_DWORD **)(a4 + 96);
  if (v23 != 641877825 && v23 != 1111970369)
  {
LABEL_17:
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 328, a3);
    if ((_QWORD *)(a2 + 336) == v24)
    {
      v17 = 0;
      if ((v19 & 1) == 0)
        goto LABEL_41;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0x100000000;
      v19 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 328, a3);
    v19 = 1;
    if ((_QWORD *)(a2 + 336) == v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0x100000000;
LABEL_24:
      v34 = 0;
      __asm { FMOV            V6.2S, #1.0 }
      v30 = 1.0;
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
      goto LABEL_25;
    }
  }
  v30 = *((float *)v24 + 14);
  v29 = *(_QWORD *)((char *)v24 + 60);
  v26 = *((_DWORD *)v24 + 17);
  v31 = *((float *)v24 + 18);
  v32 = *((float *)v24 + 19);
  v33 = *((float *)v24 + 20);
  v25 = *((_DWORD *)v24 + 21);
  v43 = *(_OWORD *)(v24 + 11);
  _D6 = v24[13];
  v34 = v24[14];
  v27 = *((_DWORD *)v24 + 30);
  v28 = *((_DWORD *)v24 + 32);
  if ((v19 & 1) != 0)
  {
    v19 = 1;
LABEL_25:
    *(float *)a4 = v30;
    *(_QWORD *)(a4 + 4) = v29;
    *(_DWORD *)(a4 + 12) = v26;
    *(float *)(a4 + 16) = v31;
    *(float *)(a4 + 20) = v32;
    *(float *)(a4 + 24) = v33;
    *(_DWORD *)(a4 + 28) = v25;
    *(_OWORD *)(a4 + 32) = v43;
    *(_QWORD *)(a4 + 48) = _D6;
    *(_QWORD *)(a4 + 56) = v34;
    *(_DWORD *)(a4 + 64) = v27;
    *(_DWORD *)(a4 + 68) = v19;
    *(_DWORD *)(a4 + 72) = v28;
    if (v20 == v7
      || ((v40 = (_DWORD *)v7[9], (_DWORD *)v7[10] == v40)
       || *v40 != 843264102
       || v31 != 0.0
       || v32 != 0.0
       || v33 != 0.0
       || v30 != 1.0)
      && (*((_DWORD *)v7 + 16) != 1 || v31 != 0.0 || v32 != 0.0 || v33 != 0.0 || v30 != 1.0))
    {
      *(_QWORD *)(a4 + 84) = 0x400000000;
      v41 = DWORD2(v44);
      if (DWORD2(v44) == 3)
        v41 = 4;
      *(_DWORD *)(a4 + 120) = v41;
      *(_DWORD *)(a4 + 124) = v41;
      *(_DWORD *)(a4 + 80) = 1065353216;
      *(_DWORD *)(a4 + 92) = v41;
      v17 = 1;
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  v19 = *((_DWORD *)v24 + 31);
  if (v19)
    goto LABEL_25;
LABEL_37:
  v17 = 0;
LABEL_41:
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_190DE858C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::make_blob_storage_mmap(uint64_t *a1, uint64_t a2)
{
  int v4;
  int data;
  void *v6;
  void *v7;
  _QWORD *v9;
  std::string *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  _QWORD v26[51];
  _BYTE v27[152];
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  Espresso::get_real_file_path(&v22, (const char *)a2);
  std::ifstream::basic_ifstream(__p);
  std::istream::read();
  v4 = *(_DWORD *)((char *)&v26[2] + *((_QWORD *)__p[0] - 3));
  data = (int)v28.__r_.__value_.__l.__data_;
  v6 = (void *)*MEMORY[0x1E0DE4F40];
  __p[0] = v6;
  v7 = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  *(void **)((char *)__p + *((_QWORD *)v6 - 3)) = v7;
  MEMORY[0x19401C8BC](v26);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v27);
  if ((v4 & 5) == 0 && data == 1162759500)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v21 = *(std::string *)a2;
    v11 = operator new();
    *(_QWORD *)v11 = -1;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = -1;
    *(_QWORD *)(v11 + 24) = 0;
    v23 = v11;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v28, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    else
      v28 = v21;
    encrypted_file::load_file((void **)v11, (uint64_t)&v28);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (*(_DWORD *)(*(_QWORD *)(v11 + 16) + 4) == 2)
    {
      v12 = (_QWORD *)operator new();
      *(_OWORD *)__p = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      v26[0] = *((_QWORD *)&v21.__r_.__value_.__l + 2);
      memset(&v21, 0, sizeof(v21));
      Espresso::blob_storage_mmap_v2::blob_storage_mmap_v2(v12, (uint64_t)__p);
      if (SHIBYTE(v26[0]) < 0)
        operator delete(__p[0]);
      *a1 = (uint64_t)v12;
      encrypted_file::~encrypted_file((encrypted_file *)v11);
      MEMORY[0x19401CD90]();
    }
    else
    {
      v13 = operator new();
      v14 = v13;
      v15 = v21.__r_.__value_.__r.__words[0];
      v24 = 0;
      __p[0] = (void *)v21.__r_.__value_.__l.__size_;
      *(void **)((char *)__p + 7) = *(void **)((char *)&v21.__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      memset(&v21, 0, sizeof(v21));
      v23 = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = &off_1E2D81658;
      *(_QWORD *)(v13 + 8) = v13 + 16;
      *(_BYTE *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = v11;
      *(void **)(v13 + 63) = *(void **)((char *)__p + 7);
      v17 = __p[0];
      *(_QWORD *)(v13 + 48) = v15;
      *(_QWORD *)(v13 + 56) = v17;
      *(_BYTE *)(v13 + 71) = v16;
      *(_BYTE *)(v13 + 88) = 0;
      v18 = *(_QWORD *)(v11 + 16);
      v19 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v13 + 72) = v18;
      *(_QWORD *)(v13 + 80) = v19;
      if (!v18)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("file_start is nullptr, expecting to point weight file.");
      Espresso::blob_storage_mmap::setup_header((uint64_t **)v13, 0);
      *a1 = v14;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = &v21;
      goto LABEL_28;
    }
  }
  else
  {
    v20 = v22;
    memset(&v22, 0, sizeof(v22));
    std::ifstream::basic_ifstream(__p);
    std::istream::seekg();
    std::istream::read();
    if (HIDWORD(v24) == 2)
    {
      v9 = (_QWORD *)operator new();
      v28 = v20;
      memset(&v20, 0, sizeof(v20));
      Espresso::blob_storage_mmap_v2::blob_storage_mmap_v2(v9, (uint64_t)&v28);
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v28 = v20;
      memset(&v20, 0, sizeof(v20));
      Espresso::blob_storage_mmap::blob_storage_mmap((uint64_t)v9, (__int128 *)&v28, 0);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    *a1 = (uint64_t)v9;
    __p[0] = v6;
    *(void **)((char *)__p + *((_QWORD *)v6 - 3)) = v7;
    MEMORY[0x19401C8BC](v26);
    std::istream::~istream();
    MEMORY[0x19401CCD0](v27);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = &v20;
LABEL_28:
      operator delete(v10->__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_190DE89DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,encrypted_file *a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::unique_ptr<encrypted_file>::reset[abi:ne180100](&a28);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x19401C8B0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x19401C8B0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_190DE8C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401CCD0](v1 + 424);
  _Unwind_Resume(a1);
}

void Espresso::get_real_file_path(std::string *a1, const char *a2)
{
  const char *v4;
  char *v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(const char **)a2;
  v5 = realpath_DARWIN_EXTSN(v4, 0);
  if (v5)
  {
    v7 = v5;
    std::string::basic_string[abi:ne180100]<0>(a1, v5);
    free(v7);
  }
  else
  {
    Espresso::espresso_os_log_subsystem(0, v6);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (a2[23] >= 0)
        v9 = a2;
      else
        v9 = *(const char **)a2;
      v10 = 136315138;
      v11 = v9;
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "Unable to get canonicalized absolute file path. Using given path instead '%s'", (uint8_t *)&v10, 0xCu);
    }

    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    }
  }
}

void Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_190DE8EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_convolution_kernel::create_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *((_DWORD *)this + 114);
  if (v2 <= 1)
    v2 = 1;
  v3 = *((_DWORD *)this + 105);
  if (v3 <= 1)
    v3 = 1;
  v4 = *((_DWORD *)this + 86) * v2;
  v5 = *((_DWORD *)this + 106);
  if (v5 <= 1)
    v5 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), *((_DWORD *)this + 87) / v3, v4 * v5);
}

_QWORD *Espresso::ANECompilerEngine::convolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), *a2, a2[1]);
}

_QWORD *Espresso::ANECompilerEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), *a2, a2[1]);
}

void Espresso::engine_cpu::register_kernels(Espresso::engine_cpu *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_2253);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_3);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_5_2256);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_7);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_9);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_11_0);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_13);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_15);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_17);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_19);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "axpby", (void (***)(_QWORD))this, &__block_literal_global_21);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_23);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(_QWORD))this, &__block_literal_global_25);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_27);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_29);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn", (void (***)(_QWORD))this, &__block_literal_global_31);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_33_2271);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_35);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(_QWORD))this, &__block_literal_global_37_2274);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_39);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_41);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_43);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_45);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_47);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_49);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_51);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_reverse", (void (***)(_QWORD))this, &__block_literal_global_53);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_concat", (void (***)(_QWORD))this, &__block_literal_global_55);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(_QWORD))this, &__block_literal_global_57);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_59);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "prediction_smoothing", (void (***)(_QWORD))this, &__block_literal_global_61_2287);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout", (void (***)(_QWORD))this, &__block_literal_global_63_2289);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(_QWORD))this, &__block_literal_global_65_2291);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_67_2293);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_69_2295);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(_QWORD))this, &__block_literal_global_71);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_73);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "compute_stats", (void (***)(_QWORD))this, &__block_literal_global_75_2299);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lambda", (void (***)(_QWORD))this, &__block_literal_global_77_2301);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "patch_extractor", (void (***)(_QWORD))this, &__block_literal_global_79_2303);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_81_2305);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(_QWORD))this, &__block_literal_global_83_2307);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(_QWORD))this, &__block_literal_global_85_2309);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "quantized_gather", (void (***)(_QWORD))this, &__block_literal_global_87);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(_QWORD))this, &__block_literal_global_89);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_branch", (void (***)(_QWORD))this, &__block_literal_global_91);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_jump", (void (***)(_QWORD))this, &__block_literal_global_93_2314);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_call", (void (***)(_QWORD))this, &__block_literal_global_95_2316);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_return", (void (***)(_QWORD))this, &__block_literal_global_97);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "get_shape", (void (***)(_QWORD))this, &__block_literal_global_99);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_101);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(_QWORD))this, &__block_literal_global_103);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_105_2322);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "alloc", (void (***)(_QWORD))this, &__block_literal_global_107_2324);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(_QWORD))this, &__block_literal_global_108_2325);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(_QWORD))this, &__block_literal_global_109_2326);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(_QWORD))this, &__block_literal_global_111_2328);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(_QWORD))this, &__block_literal_global_113);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(_QWORD))this, &__block_literal_global_115_2331);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(_QWORD))this, &__block_literal_global_117);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_for", (void (***)(_QWORD))this, &__block_literal_global_119_2334);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(_QWORD))this, &__block_literal_global_121);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_else", (void (***)(_QWORD))this, &__block_literal_global_123_2337);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_125);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter", (void (***)(_QWORD))this, &__block_literal_global_127_2340);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(_QWORD))this, &__block_literal_global_129_2342);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(_QWORD))this, &__block_literal_global_131_2344);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_133_2346);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(_QWORD))this, &__block_literal_global_135_2348);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_137);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_139_2351);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_141_2353);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_143);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(_QWORD))this, &__block_literal_global_145_2356);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "multinomial", (void (***)(_QWORD))this, &__block_literal_global_147);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_149);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(_QWORD))this, &__block_literal_global_151);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gumbel_max", (void (***)(_QWORD))this, &__block_literal_global_153_2361);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "builtin", (void (***)(_QWORD))this, &__block_literal_global_155_2363);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(_QWORD))this, &__block_literal_global_157_2365);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_159_2367);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_161_2369);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_163_2371);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_165);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sliding_windows", (void (***)(_QWORD))this, &__block_literal_global_167_2374);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reverse_seq", (void (***)(_QWORD))this, &__block_literal_global_169_2376);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cross_entropy", (void (***)(_QWORD))this, &__block_literal_global_171);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(_QWORD))this, &__block_literal_global_173);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(_QWORD))this, &__block_literal_global_175);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(_QWORD))this, &__block_literal_global_177);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_179);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(_QWORD))this, &__block_literal_global_181);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonzero", (void (***)(_QWORD))this, &__block_literal_global_183);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "precompiled_segment", (void (***)(_QWORD))this, &__block_literal_global_185);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(_QWORD))this, &__block_literal_global_187);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cumsum", (void (***)(_QWORD))this, &__block_literal_global_189);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_191);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sparse_inner_product", (void (***)(_QWORD))this, &__block_literal_global_193);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_195);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_197);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(_QWORD))this, &__block_literal_global_199);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(_QWORD))this, &__block_literal_global_201);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation_grad", (void (***)(_QWORD))this, &__block_literal_global_203);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(_QWORD))this, &__block_literal_global_205);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_loss_grad", (void (***)(_QWORD))this, &__block_literal_global_207);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias", (void (***)(_QWORD))this, &__block_literal_global_209);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(_QWORD))this, &__block_literal_global_211);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm_grad", (void (***)(_QWORD))this, &__block_literal_global_213);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize_grad", (void (***)(_QWORD))this, &__block_literal_global_215);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_217);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_219);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(_QWORD))this, &__block_literal_global_221);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_grad", (void (***)(_QWORD))this, &__block_literal_global_223);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(_QWORD))this, &__block_literal_global_225);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(_QWORD))this, &__block_literal_global_227);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(_QWORD))this, &__block_literal_global_229);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bahdanau_attention", (void (***)(_QWORD))this, &__block_literal_global_231_2408);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "self_attention", (void (***)(_QWORD))this, &__block_literal_global_233);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "loopkit", (void (***)(_QWORD))this, &__block_literal_global_235);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_237);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "hierarchical_inner_product", (void (***)(_QWORD))this, &__block_literal_global_239);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_241);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(_QWORD))this, &__block_literal_global_243);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice_update", (void (***)(_QWORD))this, &__block_literal_global_245);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_quantize", (void (***)(_QWORD))this, &__block_literal_global_247);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_dequantize", (void (***)(_QWORD))this, &__block_literal_global_249);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_251);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_253);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(_QWORD))this, &__block_literal_global_255);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice_update", (void (***)(_QWORD))this, &__block_literal_global_257);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(_QWORD))this, &__block_literal_global_259);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_261);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(_QWORD))this, &__block_literal_global_263);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(_QWORD))this, &__block_literal_global_265);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(_QWORD))this, &__block_literal_global_267);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(_QWORD))this, &__block_literal_global_269);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(_QWORD))this, &__block_literal_global_271);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_quantize", (void (***)(_QWORD))this, &__block_literal_global_273);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_dequantize", (void (***)(_QWORD))this, &__block_literal_global_275);
}

uint64_t Espresso::abstract_engine_factory::is_kernel_supported(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  int v18;

  v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  v7 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  v18 = v7;
  key((uint64_t)__p, a3);
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 80) != v8)
    goto LABEL_4;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    goto LABEL_11;
  v11 = *(uint64_t **)(a1 + 8);
  while (1)
  {
    v12 = *((_DWORD *)v11 + 7);
    if (v7 >= v12)
      break;
LABEL_10:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_11;
  }
  if (v12 < v7)
  {
    ++v11;
    goto LABEL_10;
  }
  do
  {
    if (*(_DWORD *)(v10 + 28) >= v7)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    v10 = *v14;
  }
  while (*v14);
  key((uint64_t)__p, a3);
  v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v8 == v15)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
LABEL_4:
  v9 = 1;
LABEL_12:
  std::recursive_mutex::unlock(v6);
  return v9;
}

void sub_190DEA04C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::make_kernel_priv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  std::recursive_mutex *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  uint64_t **v27;
  _QWORD *v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string __p;

  v8 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v8);
  key((uint64_t)&__p, a3);
  v9 = a1 + 72;
  v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((_QWORD *)(a1 + 80) == v10)
  {
    v13 = *(uint64_t **)(a1 + 8);
    v12 = (uint64_t *)(a1 + 8);
    v11 = v13;
    if (!v13)
      goto LABEL_11;
    v14 = *a5;
    v15 = v11;
    while (1)
    {
      v16 = *((_DWORD *)v15 + 7);
      if (v14 >= v16)
      {
        if (v16 >= v14)
        {
          v24 = v12;
          do
          {
            v25 = *((_DWORD *)v11 + 7);
            v26 = v25 < v14;
            if (v25 >= v14)
              v27 = (uint64_t **)v11;
            else
              v27 = (uint64_t **)(v11 + 1);
            if (!v26)
              v24 = v11;
            v11 = *v27;
          }
          while (*v27);
          if (v24 == v12 || v14 < *((_DWORD *)v24 + 7))
            v24 = v12;
          LODWORD(v31.__r_.__value_.__l.__data_) = *((_DWORD *)v24 + 8);
          key((uint64_t)&__p, a3);
          v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v9, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v10 != v28)
          {
            (*(void (**)(void))(v28[7] + 16))();
            goto LABEL_32;
          }
LABEL_11:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v18 = std::string::append(&v30, "' on platform ");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v29, *a5);
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v29;
          else
            v20 = (std::string *)v29.__r_.__value_.__r.__words[0];
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
          else
            size = v29.__r_.__value_.__l.__size_;
          v22 = std::string::append(&v31, (const std::string::value_type *)v20, size);
          v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        ++v15;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_11;
    }
  }
  (*(void (**)(void))(v10[7] + 16))();
LABEL_32:
  std::recursive_mutex::unlock(v8);
}

void sub_190DEA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::recursive_mutex *v33;

  std::recursive_mutex::unlock(v33);
  _Unwind_Resume(a1);
}

uint64_t key(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v4, v5);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](&v9);
}

void sub_190DEA444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::register_kernel_class(uint64_t a1, const char *a2, void (***a3)(_QWORD), void *a4)
{
  id v7;
  std::recursive_mutex *v8;
  size_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  void *v19[2];
  uint64_t v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  v7 = a4;
  v8 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v8);
  (**a3)(a3);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  v9 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a2, v9);
  std::ostream::operator<<();
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v23);
  v11 = (uint64_t **)(a1 + 80);
  v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v10;
        v12 = v10 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, v10 + 4))
          break;
        v10 = *v11;
        v13 = v11;
        if (!*v11)
          goto LABEL_11;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v19))
        break;
      v13 = v11 + 1;
      v10 = v11[1];
      if (!v10)
        goto LABEL_11;
    }
    v14 = v11;
  }
  else
  {
    v13 = (uint64_t **)(a1 + 80);
LABEL_11:
    v14 = operator new(0x40uLL);
    v14[2] = *(_OWORD *)v19;
    v15 = v20;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    *((_QWORD *)v14 + 6) = v15;
    *((_QWORD *)v14 + 7) = 0;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v11;
    *v13 = (uint64_t *)v14;
    v16 = **(_QWORD **)(a1 + 72);
    v17 = (uint64_t *)v14;
    if (v16)
    {
      *(_QWORD *)(a1 + 72) = v16;
      v17 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v17);
    ++*(_QWORD *)(a1 + 88);
  }
  v18 = (void *)*((_QWORD *)v14 + 7);
  *((_QWORD *)v14 + 7) = v7;

  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  std::recursive_mutex::unlock(v8);
}

void sub_190DEA63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a14 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);

  _Unwind_Resume(a1);
}

uint64_t Espresso::DummyMPSEngine::engine::platform(Espresso::DummyMPSEngine::engine *this)
{
  return 50001;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8AA8;
  v7 = Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6B518;
  v6[73] = &unk_1E2D6B7A8;
  *((_BYTE *)v6 + 834) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEA718(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  char v7;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v6 + 288) = 0u;
  *(_QWORD *)(v6 + 280) = v6 + 288;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 304));
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 728) = 1065353216;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 740) = _D0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_BYTE *)(a1 + 768) = v7;
  *(_QWORD *)a1 = &off_1E2D77DB8;
  *(_QWORD *)(a1 + 560) = &unk_1E2D78048;
  *(_WORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(a1 + 320) = a3[1];
  *(_OWORD *)(a1 + 336) = v14;
  *(_OWORD *)(a1 + 304) = v13;
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[6];
  *(_OWORD *)(a1 + 384) = a3[5];
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 368) = v16;
  v18 = a3[7];
  v19 = a3[8];
  v20 = a3[9];
  *(_QWORD *)(v21 + 157) = *(_QWORD *)((char *)a3 + 157);
  *(_OWORD *)(a1 + 432) = v19;
  *(_OWORD *)(a1 + 448) = v20;
  *(_OWORD *)(a1 + 416) = v18;
  return a1;
}

uint64_t Espresso::base_kernel::base_kernel(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a1 = off_1E2D5F838;
  v3 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  return a1;
}

void sub_190DEA910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double Espresso::convolution_uniforms::convolution_uniforms(Espresso::convolution_uniforms *this)
{
  double result;

  *((_WORD *)this + 36) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)this + 82) = 0;
  *(_QWORD *)((char *)this + 74) = 0;
  *((_WORD *)this + 45) = 0;
  *(_QWORD *)((char *)this + 92) = 0x1000100010001;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 30) = 1;
  *((_DWORD *)this + 40) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 40) = xmmword_191A93300;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 1;
  *(_OWORD *)((char *)this + 104) = xmmword_191A93310;
  *(_QWORD *)((char *)this + 124) = 0;
  *((_WORD *)this + 67) = 1;
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  *((double *)this + 8) = result;
  *((_WORD *)this + 66) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_WORD *)this + 78) = 1;
  return result;
}

uint64_t Espresso::IREngine::engine::platform(Espresso::IREngine::engine *this)
{
  return 80000;
}

uint64_t Espresso::engine_cpu::platform(Espresso::engine_cpu *this)
{
  return 0;
}

uint64_t Espresso::DummyBNNSEngine::engine::platform(Espresso::DummyBNNSEngine::engine *this)
{
  return 101;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8E98;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6DCB8;
  v6[45] = &unk_1E2D6DE28;
  *((_BYTE *)v6 + 656) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEAA48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 1065353216;
  *(_QWORD *)(v5 + 296) = 897988541;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 324) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_BYTE *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_BYTE *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(_BYTE *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 516) = _D1;
  *(_BYTE *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_BYTE *)(v5 + 544) = v6;
  *(_QWORD *)v5 = &off_1E2D780E8;
  *(_QWORD *)(v5 + 336) = &unk_1E2D78258;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_DWORD *)(v5 + 584) = 1065353216;
  *(_WORD *)(v5 + 592) = 0;
  *(_BYTE *)(v5 + 594) = 0;
  *(_QWORD *)(v5 + 596) = 0x3F8000003F800000;
  *(_WORD *)(v5 + 604) = 0;
  *(_QWORD *)(v5 + 608) = _D1;
  *(_BYTE *)(v5 + 616) = 0;
  *(_QWORD *)(v5 + 624) = 0;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  v14 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::QuantSimEngine::engine::platform(Espresso::QuantSimEngine::engine *this)
{
  return 10010;
}

uint64_t Espresso::ANECompilerEngine::engine::platform(Espresso::ANECompilerEngine::engine *this)
{
  return 10008;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  _BOOL4 v9;
  __int128 v10;
  unsigned int v11;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  __n128 result;
  void *__p[2];
  char v33;

  v8 = (char *)operator new(0x198uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB6508;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  v9 = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D5DC08;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  v11 = *((_DWORD *)v8 + 76);
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  if (v11 - 102 > 0x1C || ((1 << (v11 - 102)) & 0x1FF9B001) == 0)
    v9 = v11 > 0x25 || ((1 << v11) & 0x2A0C003803) == 0;
  v14 = v8 + 360;
  if (a3)
    v15 = 1;
  else
    v15 = v9;
  v16 = *a1;
  if (*a1 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v16 == &off_1E2D5E820)
  {
    *((_QWORD *)v8 + 50) = *(_QWORD *)(v16 + 168);
    std::string::basic_string[abi:ne180100]<0>(__p, "bnns.experimental.enable_elementwise");
    v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v16 + 176), (uint64_t)__p);
    if (v33 < 0)
      operator delete(__p[0]);
    if (v17)
      v18 = v15;
    else
      v18 = 1;
    if ((v18 & 1) == 0)
      goto LABEL_45;
  }
  else if (!v15)
  {
    goto LABEL_45;
  }
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)__p, a1, (__n128 *)a2);
    v19 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v20 = (std::__shared_weak_count *)*((_QWORD *)v8 + 46);
    *v14 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v24 = (unint64_t *)((char *)__p[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_43;
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)__p, a1, (__n128 *)a2);
    v26 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v27 = (std::__shared_weak_count *)*((_QWORD *)v8 + 46);
    *v14 = v26;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v23 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v30 = (unint64_t *)((char *)__p[1] + 8);
      do
        v25 = __ldaxr(v30);
      while (__stlxr(v25 - 1, v30));
LABEL_43:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
LABEL_45:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEAE08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::base_kernel *v2;
  uint64_t v3;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  void *v6;

  shared_weak_owners = (std::__shared_weak_count_vtbl *)v1[15].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v1[16].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphCompilerEngine::engine::platform(Espresso::MPSGraphCompilerEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::DummyMPSGraphEngine::engine::platform(Espresso::DummyMPSGraphEngine::engine *this)
{
  return 50006;
}

uint64_t Espresso::MPSGraphEngine::engine::platform(Espresso::MPSGraphEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::MetalLowmemEngine::engine::platform(Espresso::MetalLowmemEngine::engine *this)
{
  return 20000;
}

uint64_t Espresso::MPSBuffersEngine::engine::platform(Espresso::MPSBuffersEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::DummyMPSBuffersEngine::engine::platform(Espresso::DummyMPSBuffersEngine::engine *this)
{
  return 50003;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x2A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB8D80;
  Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D6D248;
  *(_OWORD *)(v6 + 648) = 0u;
  *((_QWORD *)v6 + 52) = &unk_1E2D6D410;
  v6[664] = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEAF0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::activation_kernel::activation_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 288) = 0u;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 308) = 0x3F8000003F800000;
  *(_QWORD *)(v5 + 316) = 0;
  *(_OWORD *)(v5 + 324) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 528) = 0u;
  *(_OWORD *)(v5 + 544) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_BYTE *)(v5 + 448) = 0;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_BYTE *)(v5 + 520) = 0;
  *(_DWORD *)(v5 + 560) = 1065353216;
  *(_WORD *)(v5 + 568) = 0;
  *(_BYTE *)(v5 + 570) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 572) = _D1;
  *(_BYTE *)(v5 + 580) = 0;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_BYTE *)(v5 + 600) = v6;
  *(_QWORD *)v5 = &off_1E2D770D8;
  *(_QWORD *)(v5 + 392) = &unk_1E2D77290;
  *(_OWORD *)(v5 + 608) = 0u;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 336) = *(_DWORD *)(a3 + 32);
  *(__n128 *)(v5 + 304) = result;
  *(_OWORD *)(v5 + 320) = v13;
  return result;
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB88E8;
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6A438;
  v6[53] = &unk_1E2D6A5F0;
  *((_BYTE *)v6 + 656) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEB0AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;
  __int128 v14;

  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 384) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 536) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_BYTE *)(v5 + 456) = 0;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_BYTE *)(v5 + 528) = 0;
  *(_DWORD *)(v5 + 568) = 1065353216;
  *(_WORD *)(v5 + 576) = 0;
  *(_BYTE *)(v5 + 578) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 580) = _D1;
  *(_BYTE *)(v5 + 588) = 0;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_BYTE *)(v5 + 608) = v6;
  *(_QWORD *)v5 = &off_1E2D76880;
  *(_QWORD *)(v5 + 400) = &unk_1E2D76A38;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 352) = v14;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 280) = v2 + 288;
  *(_QWORD *)v2 = off_1E2D8AE88;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 312) = 0x3727C5AC00000000;
  *(_DWORD *)(v2 + 320) = 1063675494;
  *(_WORD *)(v2 + 324) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_QWORD *)(v2 + 360) = 1065353216;
  *(_QWORD *)(v2 + 368) = 0;
  *(_DWORD *)(v2 + 376) = 2;
  return result;
}

uint64_t Espresso::V9Engine::engine::platform(Espresso::V9Engine::engine *this)
{
  return *((unsigned int *)this + 6);
}

double ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  double result;
  double v6[3];
  int v7;

  v7 = a3;
  std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(v6, a1, &v7, a2);
  result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8648;
  Espresso::ANECompilerEngine::concat_kernel::concat_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68EC0;
  v6[46] = &unk_1E2D69020;
  *((_BYTE *)v6 + 577) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEB2B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::concat_kernel::concat_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_BYTE *)(v5 + 400) = 0;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_BYTE *)(v5 + 472) = 0;
  *(_DWORD *)(v5 + 512) = 1065353216;
  *(_WORD *)(v5 + 520) = 0;
  *(_BYTE *)(v5 + 522) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 524) = _D1;
  *(_BYTE *)(v5 + 532) = 0;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_BYTE *)(v5 + 552) = v6;
  *(_QWORD *)v5 = &off_1E2D74960;
  *(_QWORD *)(v5 + 344) = &unk_1E2D74AC0;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  v14 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a3 + 45);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x168uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB73B0;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D61FA0;
  *((_DWORD *)v8 + 89) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEB41C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t Espresso::HXSimEngine::engine::platform(Espresso::HXSimEngine::engine *this)
{
  return 6;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x2A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB87D0;
  Espresso::ANECompilerEngine::pool_kernel::pool_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D699F8;
  v6[57] = &unk_1E2D69B98;
  *((_BYTE *)v6 + 665) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEB4F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::pool_kernel::pool_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = xmmword_191A934F0;
  *(_OWORD *)(v5 + 320) = xmmword_191A93320;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_QWORD *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_BYTE *)(v5 + 488) = 0;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_OWORD *)(v5 + 544) = 0u;
  *(_BYTE *)(v5 + 560) = 0;
  *(_DWORD *)(v5 + 600) = 1065353216;
  *(_WORD *)(v5 + 608) = 0;
  *(_BYTE *)(v5 + 610) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 612) = _D1;
  *(_BYTE *)(v5 + 620) = 0;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_BYTE *)(v5 + 640) = v6;
  *(_QWORD *)v5 = &off_1E2D74120;
  *(_QWORD *)(v5 + 432) = &unk_1E2D742C0;
  v12 = *a3;
  v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  result = (__n128)a3[3];
  v15 = a3[4];
  v16 = a3[6];
  *(_OWORD *)(v5 + 384) = a3[5];
  *(_OWORD *)(v5 + 400) = v16;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v15;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8A70;
  Espresso::ANECompilerEngine::slice_kernel::slice_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6B318;
  v6[41] = &unk_1E2D6B478;
  *((_BYTE *)v6 + 537) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEB684(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::slice_kernel::slice_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A93790;
  *(_QWORD *)(v6 + 296) = 0x100000000;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_BYTE *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_BYTE *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(_BYTE *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 204) = _D0;
  *(_BYTE *)(v6 + 492) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_BYTE *)(v6 + 512) = v7;
  *(_QWORD *)v6 = &off_1E2D74560;
  *(_QWORD *)(v6 + 304) = &unk_1E2D746C0;
  result = *a3;
  *(_QWORD *)(v6 + 296) = a3[1].n128_u64[0];
  *(__n128 *)v5 = result;
  return result;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;

  v6 = (char *)operator new(0x3F0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB65B0;
  v7 = a2[7];
  v26 = a2[6];
  v27 = v7;
  v28 = *((_DWORD *)a2 + 32);
  v8 = a2[3];
  v22 = a2[2];
  v23 = v8;
  v9 = a2[5];
  v24 = a2[4];
  v25 = v9;
  v10 = a2[1];
  v20 = *a2;
  v21 = v10;
  v12 = Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)(v6 + 24), a1, v11, (uint64_t)&v20);
  *((_QWORD *)v6 + 3) = &off_1E2D5E138;
  *((_QWORD *)v6 + 125) = 0;
  v6[992] = 0;
  *((_OWORD *)v6 + 61) = 0u;
  v13 = v27;
  *(_OWORD *)(v6 + 424) = v26;
  *(_OWORD *)(v6 + 440) = v13;
  *((_DWORD *)v6 + 114) = v28;
  v14 = v23;
  *(_OWORD *)(v6 + 360) = v22;
  *(_OWORD *)(v6 + 376) = v14;
  v15 = v25;
  *(_OWORD *)(v6 + 392) = v24;
  *(_OWORD *)(v6 + 408) = v15;
  v16 = v21;
  *(_OWORD *)(v6 + 328) = v20;
  *(_OWORD *)(v6 + 344) = v16;
  v17 = *a1;
  if (*a1 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v17 == &off_1E2D5E820)
  {
    if (*((_DWORD *)v6 + 114))
      v18 = 1;
    else
      v18 = *(unsigned __int8 *)(v17 + 160);
    *((_DWORD *)v6 + 114) = v18;
    *((_QWORD *)v6 + 125) = *(_QWORD *)(v17 + 168);
  }
  result.n128_u64[0] = v12;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEB874(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  __int128 v14;

  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = 0;
  *(_BYTE *)(v6 + 456) = 0;
  *(_QWORD *)v6 = &off_1E2D91CF8;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_OWORD *)(v6 + 592) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_OWORD *)(v6 + 656) = 0u;
  *(_OWORD *)(v6 + 672) = 0u;
  *(_OWORD *)(v6 + 688) = 0u;
  *(_OWORD *)(v6 + 704) = 0u;
  *(_OWORD *)(v6 + 720) = 0u;
  *(_OWORD *)(v6 + 736) = 0u;
  *(_OWORD *)(v6 + 752) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_OWORD *)(v6 + 800) = 0u;
  *(_OWORD *)(v6 + 816) = 0u;
  *(_OWORD *)(v6 + 832) = 0u;
  *(_OWORD *)(v6 + 848) = 0u;
  *(_OWORD *)(v6 + 864) = 0u;
  *(_OWORD *)(v6 + 880) = 0u;
  *(_OWORD *)(v6 + 896) = 0u;
  *(_OWORD *)(v6 + 912) = 0u;
  *(_OWORD *)(v6 + 928) = 0u;
  *(_OWORD *)(v6 + 304) = *(_OWORD *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  v9 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v6 + 352) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 368) = v9;
  *(_OWORD *)(v6 + 320) = v7;
  *(_OWORD *)(v6 + 336) = v8;
  v10 = *(_OWORD *)(a4 + 80);
  v11 = *(_OWORD *)(a4 + 96);
  v12 = *(_OWORD *)(a4 + 112);
  *(_DWORD *)(v6 + 432) = *(_DWORD *)(a4 + 128);
  *(_OWORD *)(v6 + 400) = v11;
  *(_OWORD *)(v6 + 416) = v12;
  *(_OWORD *)(v6 + 384) = v10;
  if (*(int *)(v6 + 404) >= 1)
  {
    v13 = (char *)operator new(0x58uLL);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &off_1E2DBD150;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_QWORD *)&v14 = v13 + 24;
    *((_QWORD *)&v14 + 1) = v13;
    *(_OWORD *)(a1 + 928) = v14;
  }
  return a1;
}

void sub_190DEB9B0(uint64_t a1)
{
  Espresso::generic_inner_product_kernel *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 88) = a1;
  *(_QWORD *)(v4 - 96) = (char *)v1 + 560;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 896);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 880);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 864);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 848);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 832);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 816);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 800);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 784);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 768);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 752);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 736);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 720);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 704);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 688);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 672);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 656);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 640);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 624);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 608);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 592);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 576);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](*(_QWORD *)(v4 - 96));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v4 - 88));
}

double Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 280) = v2 + 288;
  *(_QWORD *)v2 = off_1E2D8B830;
  *(_BYTE *)(v2 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v2 + 352) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 360) = _D1;
  *(_QWORD *)(v2 + 428) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(v2 + 304) = xmmword_191A93320;
  *(_QWORD *)(v2 + 320) = 0x3F80000000000000;
  *(_QWORD *)(v2 + 328) = 1065353216;
  *(_QWORD *)(v2 + 388) = 0;
  *(_DWORD *)(v2 + 348) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 404) = 0;
  *(_QWORD *)(v2 + 420) = 0;
  *(_QWORD *)(v2 + 412) = 0;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBBB70;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D83E70;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  v6[42] = *(_QWORD *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEBBE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8C68;
  v7 = Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6C6D0;
  v6[73] = &unk_1E2D6C968;
  *((_BYTE *)v6 + 834) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEBC80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  char v7;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v6 + 288) = 0u;
  *(_QWORD *)(v6 + 280) = v6 + 288;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 304));
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 728) = 1065353216;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 740) = _D0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_BYTE *)(a1 + 768) = v7;
  *(_QWORD *)a1 = &off_1E2D79180;
  *(_QWORD *)(a1 + 560) = &unk_1E2D79418;
  *(_WORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(a1 + 320) = a3[1];
  *(_OWORD *)(a1 + 336) = v14;
  *(_OWORD *)(a1 + 304) = v13;
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[6];
  *(_OWORD *)(a1 + 384) = a3[5];
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 368) = v16;
  v18 = a3[7];
  v19 = a3[8];
  v20 = a3[9];
  *(_QWORD *)(v21 + 157) = *(_QWORD *)((char *)a3 + 157);
  *(_OWORD *)(a1 + 432) = v19;
  *(_OWORD *)(a1 + 448) = v20;
  *(_OWORD *)(a1 + 416) = v18;
  return a1;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 result;
  void *__p[2];
  char v23;

  v8 = (char *)operator new(0x180uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB6428;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D5CEE8;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  v9 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v9;
  *(_OWORD *)(v8 + 329) = *(__int128 *)((char *)a2 + 25);
  if (a3)
    v10 = 1;
  else
    v10 = (*((_DWORD *)v8 + 76) < 8u) & (0xE4u >> *((_DWORD *)v8 + 76));
  v11 = *a1;
  if (!*a1 || *(uint64_t (***)(Espresso::context_cpu *__hidden))v11 != &off_1E2D5E820)
  {
    if (!v10)
      goto LABEL_25;
    goto LABEL_14;
  }
  *((_QWORD *)v8 + 47) = *(_QWORD *)(v11 + 168);
  std::string::basic_string[abi:ne180100]<0>(__p, "bnns.experimental.enable_reduce");
  v12 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v11 + 176), (uint64_t)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v12)
    v13 = v10;
  else
    v13 = 1;
  if ((v13 & 1) != 0)
  {
LABEL_14:
    std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)__p, a1, a2);
    v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v15 = (std::__shared_weak_count *)*((_QWORD *)v8 + 45);
    *((_OWORD *)v8 + 22) = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v19 = (unint64_t *)((char *)__p[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!*((_QWORD *)v8 + 44))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to get fallback reduce_kernel_cpu in BNNS reduce_kernel");
  }
LABEL_25:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEBF84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::base_kernel *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB6498;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  v6[3] = &off_1E2D5D830;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEC034(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x150uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7110;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D60FB0;
  *((_DWORD *)v8 + 82) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  v8[40] = *(_QWORD *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEC108(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB6540;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D5DD60;
  *((_BYTE *)v6 + 307) = 0;
  v6[39] = 0;
  v6[40] = 0;
  *((_BYTE *)v6 + 328) = 0;
  *((_WORD *)v6 + 152) = *(_WORD *)a2;
  *((_BYTE *)v6 + 306) = *(_BYTE *)(a2 + 2);
  if (*((_BYTE *)v6 + 304))
    *((_BYTE *)v6 + 307) = 1;
  v8 = *a1;
  if (*a1 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v8 == &off_1E2D5E820)
  {
    v6[40] = *(_QWORD *)(v8 + 168);
    *((_BYTE *)v6 + 328) = *(_BYTE *)(v8 + 160);
  }
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEC1E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8ED0;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6DEC8;
  v6[55] = &unk_1E2D6E028;
  *((_BYTE *)v6 + 649) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEC278(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_DWORD *)(v5 + 584) = 1065353216;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 596) = _D1;
  *(_BYTE *)(v5 + 472) = 0;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_BYTE *)(v5 + 544) = 0;
  *(_WORD *)(v5 + 592) = 0;
  *(_BYTE *)(v5 + 594) = 0;
  *(_BYTE *)(v5 + 604) = 0;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_BYTE *)(v5 + 624) = v6;
  *(_QWORD *)v5 = &off_1E2D7B048;
  *(_QWORD *)(v5 + 416) = &unk_1E2D7B1A8;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  v12 = *(_OWORD *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 344) = v14;
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  result = *(__n128 *)(a3 + 80);
  v16 = *(_OWORD *)(a3 + 96);
  v17 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(v5 + 408) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(v5 + 376) = v16;
  *(_OWORD *)(v5 + 392) = v17;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB7340;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_QWORD *)v8 + 3) = &off_1E2D61CA8;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v10;
  *((_DWORD *)v8 + 90) = *(_DWORD *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEC40C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8568;
  Espresso::ANECompilerEngine::copy_kernel::copy_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68680;
  v6[39] = &unk_1E2D687E0;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEC4A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::copy_kernel::copy_kernel(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D73B20;
  *(_QWORD *)(v5 + 288) = &unk_1E2D73C80;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x178uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB7180;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D61260;
  *((_DWORD *)v8 + 92) = a3;
  v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = a2[2];
  *(_OWORD *)(v8 + 349) = *(_OWORD *)((char *)a2 + 45);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEC5EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  unint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x230uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB8B50;
  Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 24), a1, a3, (uint64_t)a2);
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((_QWORD *)v8 + 3) = &off_1E2D6BC48;
  *((_QWORD *)v8 + 42) = &unk_1E2D6BDA8;
  v8[552] = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEC6A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  __n128 result;

  v7 = a1 + 280;
  v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v8 + 304) = 256;
  *(_OWORD *)v7 = xmmword_191A93370;
  *(_QWORD *)(v8 + 296) = 1;
  *(_DWORD *)(v8 + 308) = 0;
  v9 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_BYTE *)(v8 + 368) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 440) = 0;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_WORD *)(v8 + 488) = 0;
  *(_BYTE *)(v8 + 490) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v7 + 212) = _D0;
  *(_BYTE *)(v8 + 500) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_BYTE *)(v8 + 520) = v9;
  *(_QWORD *)v8 = &off_1E2D75840;
  *(_QWORD *)(v8 + 312) = &unk_1E2D759A0;
  *(_DWORD *)(v8 + 524) = a3;
  result = *(__n128 *)a4;
  *(_OWORD *)(v7 + 12) = *(_OWORD *)(a4 + 12);
  *(__n128 *)v7 = result;
  return result;
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_72@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void (**v10)(Espresso::CPUFP16Engine::concat_kernel_cpu *__hidden);
  __int128 v11;
  __int128 v12;

  if (a3 == 1)
  {
    v7 = operator new(0x170uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E2DB6EE0;
    v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    v9 = (char *)(v7 + 38);
    v10 = &off_1E2D60640;
    goto LABEL_5;
  }
  if (!a3)
  {
    v7 = operator new(0x170uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E2DBB518;
    v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    v9 = (char *)(v7 + 38);
    v10 = &off_1E2D819C0;
LABEL_5:
    v7[3] = v10;
    v11 = a2[1];
    *((_OWORD *)v7 + 19) = *a2;
    *((_OWORD *)v7 + 20) = v11;
    *((_OWORD *)v7 + 21) = a2[2];
    *(_OWORD *)(v9 + 45) = *(_OWORD *)((char *)a2 + 45);
    *(_QWORD *)&v12 = v8;
    *((_QWORD *)&v12 + 1) = v7;
    *(_OWORD *)a4 = v12;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_190DEC8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __n128 result;
  void *__p;
  std::__shared_weak_count *v28;
  char v29;

  v8 = (char *)operator new(0x2D0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB6578;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 328));
  *((_QWORD *)v8 + 72) = 0;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((_OWORD *)v8 + 31) = 0u;
  *((_QWORD *)v8 + 3) = off_1E2D5D5B0;
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *(_OWORD *)(v8 + 617) = 0u;
  *((_DWORD *)v8 + 146) = a3;
  v10 = *a1;
  if (*a1)
  {
    if (*(uint64_t (***)(Espresso::context_cpu *__hidden))v10 == &off_1E2D5E820)
    {
      v8[632] = *(_BYTE *)(v10 + 160);
      *((_QWORD *)v8 + 78) = *(_QWORD *)(v10 + 168);
    }
    *((_QWORD *)v8 + 3) = &off_1E2D5DEB8;
    *((_OWORD *)v8 + 40) = 0uLL;
    *((_OWORD *)v8 + 41) = 0uLL;
    *((_OWORD *)v8 + 42) = 0uLL;
    *((_OWORD *)v8 + 43) = 0uLL;
    *((_OWORD *)v8 + 44) = 0uLL;
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v9 + 80) = v11;
    *(_QWORD *)(v9 + 157) = *(_QWORD *)(a2 + 157);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v9 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v9 + 112) = v13;
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v9 = *(_OWORD *)a2;
    *(_OWORD *)(v9 + 16) = v14;
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v9 + 48) = v15;
    if (*(uint64_t (***)(Espresso::context_cpu *__hidden))v10 != &off_1E2D5E820)
      goto LABEL_9;
    std::string::basic_string[abi:ne180100]<0>(&__p, "bnns.experimental.enable_deconvolution");
    v16 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v10 + 176), (uint64_t)&__p);
    v17 = v16;
    if ((v29 & 0x80000000) == 0)
    {
      if (!v16)
        goto LABEL_9;
LABEL_16:
      if (*((_DWORD *)v8 + 109) != 1
        && *((__int16 *)v8 + 212) <= 1
        && *((__int16 *)v8 + 213) <= 1
        && *((int *)v8 + 111) < 2)
      {
        goto LABEL_14;
      }
      goto LABEL_9;
    }
    operator delete(__p);
    if (v17)
      goto LABEL_16;
  }
  else
  {
    *((_QWORD *)v8 + 3) = &off_1E2D5DEB8;
    *((_OWORD *)v8 + 40) = 0uLL;
    *((_OWORD *)v8 + 41) = 0uLL;
    *((_OWORD *)v8 + 42) = 0uLL;
    *((_OWORD *)v8 + 43) = 0uLL;
    *((_OWORD *)v8 + 44) = 0uLL;
    v18 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v9 + 144) = v18;
    *(_QWORD *)(v9 + 157) = *(_QWORD *)(a2 + 157);
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v9 + 80) = v19;
    v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v9 + 112) = v20;
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v9 = *(_OWORD *)a2;
    *(_OWORD *)(v9 + 16) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v9 + 48) = v22;
  }
LABEL_9:
  __p = 0;
  v28 = 0;
  Espresso::BNNSEngine::deconvolution_kernel::__create_fallback((_QWORD *)v8 + 3, (uint64_t)&__p);
  v23 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_14:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DECB34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  uint64_t v3;
  void **v4;
  std::__shared_weak_count_vtbl *v6;
  void *v7;

  v6 = (std::__shared_weak_count_vtbl *)*v4;
  if (*v4)
  {
    v1[29].__vftable = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[28]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[27].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_deconvolution_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::__create_fallback(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  if (!a1[72])
  {
    v4 = a1 + 1;
    v5 = (__int128 *)(a1 + 38);
    v6 = (std::__shared_weak_count *)operator new(0x288uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1F8;
    v9 = Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu((uint64_t)&v6[1], v4, v8, v5);
    v41 = v9;
    v42 = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    a1[72] = v9;
    v11 = (std::__shared_weak_count *)a1[73];
    a1[73] = v6;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)a1[80];
    v39 = a1[79];
    v40 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 400))(a1, &v39);
    v17 = v40;
    if (v40)
    {
      v18 = (unint64_t *)&v40->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)a1[82];
    v37 = a1[81];
    v38 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 544))(a1, &v37, a2);
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)a1[78];
    v35 = a1[77];
    v36 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 392))(a1, &v35);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v42;
    if (v42)
    {
      v33 = (unint64_t *)&v42->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
}

void sub_190DECE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8B88;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6BE48;
  v6[56] = &unk_1E2D6BFA8;
  *((_BYTE *)v6 + 657) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DECEF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v6 = operator new(0x368uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9058;
  Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_OWORD *)(a2 + 48);
  v8[21] = *(_OWORD *)(a2 + 32);
  v8[22] = v7;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 112);
  v8[25] = *(_OWORD *)(a2 + 96);
  v8[26] = v9;
  v10 = *(_OWORD *)(a2 + 80);
  v8[23] = *(_OWORD *)(a2 + 64);
  v8[24] = v10;
  v11 = *(_OWORD *)(a2 + 16);
  v8[19] = *(_OWORD *)a2;
  v8[20] = v11;
  v6[3] = &off_1E2D6ECC8;
  v6[71] = &unk_1E2D6EEF8;
  *((_BYTE *)v6 + 866) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = (unint64_t)v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DECFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_84@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD5B0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D92490;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DED078(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 440) = 0u;
  *(_BYTE *)(v5 + 456) = 0;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 680) = 0u;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_BYTE *)(v5 + 600) = 0;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 656) = 0u;
  *(_BYTE *)(v5 + 672) = 0;
  *(_DWORD *)(v5 + 712) = 1065353216;
  *(_WORD *)(v5 + 720) = 0;
  *(_BYTE *)(v5 + 722) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 724) = _D1;
  *(_BYTE *)(v5 + 732) = 0;
  *(_OWORD *)(v5 + 736) = 0u;
  *(_BYTE *)(v5 + 752) = v6;
  *(_QWORD *)v5 = &off_1E2D796B8;
  *(_QWORD *)(v5 + 544) = &unk_1E2D798E8;
  *(_WORD *)(v5 + 753) = 0;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 776) = 0u;
  *(_OWORD *)(v5 + 792) = 0u;
  *(_OWORD *)(v5 + 760) = 0u;
  *(_WORD *)(v5 + 840) = 1;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  v12 = *(_OWORD *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 352) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v13;
  result = *(__n128 *)(a3 + 80);
  v16 = *(_OWORD *)(a3 + 96);
  v17 = *(_OWORD *)(a3 + 112);
  *(_DWORD *)(v5 + 432) = *(_DWORD *)(a3 + 128);
  *(_OWORD *)(v5 + 400) = v16;
  *(_OWORD *)(v5 + 416) = v17;
  *(__n128 *)(v5 + 384) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_BYTE *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_BYTE *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(_BYTE *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 604) = _D1;
  *(_BYTE *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_BYTE *)(v5 + 632) = v6;
  *(_QWORD *)v5 = &off_1E2D788F8;
  *(_QWORD *)(v5 + 424) = &unk_1E2D78A58;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  v12 = *(_OWORD *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 344) = v14;
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  result = *(__n128 *)(a3 + 80);
  v16 = *(_OWORD *)(a3 + 96);
  v17 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v5 + 408) = v17;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v16;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x278uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8CA0;
  Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(v8 + 3, a1, a3, a2);
  v8[3] = &off_1E2D6CA08;
  v8[51] = &unk_1E2D6CBA8;
  *((_BYTE *)v8 + 624) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DED2F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(_QWORD *a1, _QWORD *a2, int a3, __n128 *a4)
{
  uint64_t v7;
  char v9;
  __n128 result;

  *a1 = &off_1E2D79988;
  a1[48] = &unk_1E2D79B28;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(_QWORD *)(v7 + 280) = v7 + 288;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 304) = xmmword_191A8AA80;
  *(_QWORD *)(v7 + 320) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_QWORD *)v7 = off_1E2D98558;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_BYTE *)(v7 + 360) = 1;
  *(_QWORD *)(v7 + 368) = 0;
  *(_BYTE *)(v7 + 376) = 1;
  _Q1 = *a4;
  *(_QWORD *)(v7 + 320) = a4[1].n128_u64[0];
  *(__n128 *)(v7 + 304) = _Q1;
  v9 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_BYTE *)(v7 + 440) = 0;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(_BYTE *)(v7 + 512) = 0;
  *(_DWORD *)(v7 + 552) = 1065353216;
  *(_WORD *)(v7 + 560) = 0;
  *(_BYTE *)(v7 + 562) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v7 + 564) = _Q1.n128_u64[0];
  *(_BYTE *)(v7 + 572) = 0;
  *(_OWORD *)(v7 + 576) = 0u;
  *(_BYTE *)(v7 + 592) = v9;
  *(_QWORD *)v7 = &off_1E2D79988;
  *(_QWORD *)(v7 + 384) = &unk_1E2D79B28;
  *(_DWORD *)(v7 + 596) = a3;
  result = *a4;
  *(_QWORD *)(v7 + 320) = a4[1].n128_u64[0];
  *(__n128 *)(v7 + 304) = result;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x268uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB88B0;
  Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6A238;
  v8[47] = &unk_1E2D6A398;
  *((_BYTE *)v8 + 612) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DED4B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8680;
  v7 = Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D690C0;
  v6[55] = &unk_1E2D69220;
  *((_BYTE *)v6 + 649) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DED54C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x260uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8610;
  Espresso::ANECompilerEngine::split_kernel::split_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68CC0;
  v6[45] = &unk_1E2D68E20;
  *((_BYTE *)v6 + 600) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DED5E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_64@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v7 = a1 + 280;
  v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v7 = xmmword_191A93470;
  *(_QWORD *)(v7 + 16) = 0x100000000;
  *(_BYTE *)(v8 + 304) = 0;
  *(_QWORD *)(v7 + 28) = 0x3F8000003F800000;
  *(_BYTE *)(v8 + 316) = 1;
  *(_QWORD *)(v8 + 320) = 0;
  *(_OWORD *)(v7 + 48) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v8 + 344) = _D1;
  v14 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_BYTE *)(v8 + 480) = 0;
  *(_DWORD *)(v8 + 520) = 1065353216;
  *(_WORD *)(v8 + 528) = 0;
  *(_BYTE *)(v8 + 530) = 0;
  *(_QWORD *)(v7 + 252) = _D1;
  *(_BYTE *)(v8 + 540) = 0;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_BYTE *)(v8 + 560) = v14;
  *(_QWORD *)v8 = &off_1E2D76680;
  *(_QWORD *)(v8 + 352) = &unk_1E2D767E0;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_DWORD *)(v8 + 584) = a3;
  *(_OWORD *)v7 = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v16 = *(_OWORD *)(a4 + 32);
  v17 = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(a4 + 64);
  *(_OWORD *)(v7 + 32) = v16;
  *(_OWORD *)(v7 + 48) = v17;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

uint64_t Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _OWORD *v6;
  char v7;

  v6 = (_OWORD *)(Espresso::base_kernel::base_kernel(a1, a2) + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 584) = 1065353216;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 596) = _D1;
  *(_BYTE *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_BYTE *)(a1 + 544) = 0;
  *(_WORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 594) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_BYTE *)(a1 + 624) = v7;
  *(_QWORD *)a1 = &off_1E2D74B60;
  *(_QWORD *)(a1 + 416) = &unk_1E2D74CC0;
  Espresso::dev_op_params_t::operator=((uint64_t)v6, a3);
  return a1;
}

void sub_190DED7FC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::split_kernel::split_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 292) = 0u;
  *(_QWORD *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_BYTE *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_BYTE *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(_BYTE *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 516) = _D1;
  *(_BYTE *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_BYTE *)(v5 + 544) = v6;
  *(_QWORD *)v5 = &off_1E2D74760;
  *(_QWORD *)(v5 + 336) = &unk_1E2D748C0;
  *(_QWORD *)(v5 + 568) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  v14 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;

  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>,std::allocator<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v6, a1, a3, a2);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x1C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC20B8;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 360) = 0;
  v6[46] = 0;
  v6[47] = 0;
  v6[48] = 0;
  v6[49] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  v6[3] = &off_1E2DAAC30;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEDA10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;
  __int128 v12;

  v6 = operator new(0x1C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2278;
  v7 = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 312) = 1;
  v6[40] = 0;
  v6[41] = 0;
  v6[3] = &off_1E2DD3DB8;
  *((_BYTE *)v6 + 396) = 0;
  *((_WORD *)v6 + 188) = 0;
  *((_DWORD *)v6 + 84) = 0;
  *((_DWORD *)v6 + 92) = 0;
  *((_DWORD *)v6 + 76) = v7;
  *((_WORD *)v6 + 154) = WORD2(v7);
  v12 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 40), &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v6[3] = &off_1E2DA9A18;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEDB34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8A38;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6B118;
  v6[44] = &unk_1E2D6B278;
  *((_BYTE *)v6 + 561) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEDC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  __n128 result;

  v8 = (char *)operator new(0x240uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB7420;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D62250;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((_QWORD *)v8 + 58) = 0;
  *((_QWORD *)v8 + 59) = 0;
  v8[480] = 0;
  *((_DWORD *)v8 + 142) = a3;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 440) = v9;
  *((_DWORD *)v8 + 114) = *(_DWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 376) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 408) = v11;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v12;
  result.n128_u64[0] = v13;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEDCD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7458;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D62470;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190DEDD74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDAF0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_QWORD *)v6 + 3) = &off_1E2D950E0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190DEDE0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x358637BD00000000;
  *(_QWORD *)(v5 + 288) = 0x100000007;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)(v5 + 312) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v5 + 320) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_BYTE *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_BYTE *)(v5 + 456) = 0;
  *(_DWORD *)(v5 + 496) = 1065353216;
  *(_WORD *)(v5 + 504) = 0;
  *(_BYTE *)(v5 + 506) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 508) = _D1;
  *(_BYTE *)(v5 + 516) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_BYTE *)(v5 + 536) = v6;
  *(_QWORD *)v5 = &off_1E2D74F60;
  *(_QWORD *)(v5 + 328) = &unk_1E2D750C0;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a3 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

char *E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo(char *result, uint64_t a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t SurfaceHeight;
  uint64_t SurfaceWidth;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  uint64_t v11;
  uint64_t *TensorShape;
  E5RT::TensorDataType *TensorDataTypeRef;
  int ComponentDataType;
  int ComponentSize;
  BOOL v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  void *v20;
  E5RT::SurfaceDescriptor *v21;
  int SurfaceFormat;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  void *v33;
  void *exception;
  _OWORD v35[10];
  uint64_t v36;
  char *v37;
  __int128 v38;
  _BYTE v39[8];
  char *v40;
  __int128 v41;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    v3 = result;
    v4 = (uint64_t)(result + 40);
    v5 = (uint64_t)(result + 80);
    do
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v2[5]);
      v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (!v9)
      {
        v20 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v2[5]);
        result = (char *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v20);
        if (result)
        {
          v21 = (E5RT::SurfaceDescriptor *)result;
          SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat((E5RT::SurfaceDescriptor *)result);
          v23 = SurfaceFormat;
          if ((SurfaceFormat - 1) < 3)
          {
            SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v21);
            SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v21);
            *(_QWORD *)&v35[0] = v2 + 2;
            result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v35);
            *((_DWORD *)result + 10) = v23;
            *((_QWORD *)result + 6) = 0;
            *((_QWORD *)result + 7) = SurfaceHeight;
            *((_QWORD *)result + 8) = SurfaceWidth;
            *((_QWORD *)result + 9) = 0;
            *((_DWORD *)result + 20) = 0;
          }
          else
          {
            if (SurfaceFormat != 7)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v35, "PopulateSurfaceBuffer");
              std::string::basic_string[abi:ne180100]<0>(&v40, "Unsupported surface format requested to EIR operation.");
              E5RT::Status::Status(&v37, 6, &v40);
              E5RT::E5RTError::E5RTError(exception, v35, &v37);
            }
            *(_QWORD *)&v35[0] = v2 + 2;
            result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v35);
            *((_DWORD *)result + 10) = 7;
            *((_QWORD *)result + 6) = 0;
            *((_DWORD *)result + 20) = 1;
          }
        }
        goto LABEL_4;
      }
      v10 = v9;
      v11 = *((_QWORD *)v3 + 15);
      TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v9);
      TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
      ComponentDataType = E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
      ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)TensorDataTypeRef);
      if (ComponentDataType == 4)
      {
        v17 = 65552;
        if (ComponentSize == 4)
        {
          v17 = 65568;
          LODWORD(v36) = 65568;
          v19 = *(_DWORD **)v11;
          v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18)
          {
LABEL_26:
            while (*v19 != v17)
            {
              if (++v19 == v18)
              {
                v19 = v18;
                goto LABEL_29;
              }
            }
          }
          goto LABEL_29;
        }
        if (ComponentSize != 2)
          goto LABEL_36;
      }
      else
      {
        if (ComponentDataType != 1)
        {
          if (ComponentDataType)
            v16 = 0;
          else
            v16 = ComponentSize == 1;
          if (!v16)
          {
LABEL_36:
            v33 = __cxa_allocate_exception(0x18uLL);
            v40 = (char *)operator new(0x20uLL);
            v41 = xmmword_191A71230;
            strcpy(v40, "GetStorageTypeForTensorDataType");
            v37 = (char *)operator new(0x48uLL);
            v38 = xmmword_191A71240;
            strcpy(v37, "Cannot convert from given tensor data type to espresso_storage_type_t");
            E5RT::Status::Status(v39, 6, &v37);
            E5RT::E5RTError::E5RTError(v33, &v40, v39);
          }
          v17 = 262152;
          LODWORD(v36) = 262152;
          v19 = *(_DWORD **)v11;
          v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18)
            goto LABEL_26;
          goto LABEL_29;
        }
        v17 = 131080;
        if (ComponentSize != 1)
        {
          if (ComponentSize != 4)
            goto LABEL_36;
          v17 = 131104;
          LODWORD(v36) = 131104;
          v19 = *(_DWORD **)v11;
          v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18)
            goto LABEL_26;
          goto LABEL_29;
        }
      }
      LODWORD(v36) = v17;
      v19 = *(_DWORD **)v11;
      v18 = *(_DWORD **)(v11 + 8);
      if (*(_DWORD **)v11 != v18)
        goto LABEL_26;
LABEL_29:
      if (v19 == v18
        || espresso_buffer_pack_tensor_shape((uint64_t)v35, (TensorShape[1] - *TensorShape) >> 3, *TensorShape))
      {
        v32 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v35, "PopulateBuffersInfo");
        std::string::basic_string[abi:ne180100]<0>(&v40, "Unable to pre-populate espresso_buffer_t.");
        E5RT::Status::Status(&v37, 6, &v40);
        E5RT::E5RTError::E5RTError(v32, v35, &v37);
      }
      v40 = (char *)(v2 + 2);
      result = (char *)std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v40);
      v24 = v35[6];
      v25 = v35[5];
      v26 = v35[4];
      v27 = v35[2];
      *(_OWORD *)(result + 88) = v35[3];
      v28 = v36;
      v29 = v35[9];
      v30 = v35[8];
      *(_OWORD *)(result + 152) = v35[7];
      *(_OWORD *)(result + 168) = v30;
      *(_OWORD *)(result + 184) = v29;
      *((_QWORD *)result + 25) = v28;
      *(_OWORD *)(result + 104) = v26;
      *(_OWORD *)(result + 120) = v25;
      *(_OWORD *)(result + 136) = v24;
      v31 = v35[1];
      *(_OWORD *)(result + 40) = v35[0];
      *(_OWORD *)(result + 56) = v31;
      *(_OWORD *)(result + 72) = v27;
LABEL_4:
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_190DEE34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;
  uint64_t v17;

  E5RT::Status::~Status((E5RT::Status *)(v17 - 144));
  if (*(char *)(v17 - 89) < 0)
    operator delete(*(void **)(v17 - 112));
  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0xD0uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_QWORD *)v26 + 25) = 0;
  *(_OWORD *)(v26 + 184) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190DEE8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190DEE8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetComponentSize(this[1]);
}

void Espresso::BNNSEngine::batch_matmul_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  BOOL v47;
  int v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  char v52;
  BOOL v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  Espresso *v100;
  unsigned __int8 v101;
  NSObject *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t buf[16];
  __int128 v109;
  uint64_t v110;
  void *v111[2];
  uint64_t v112;
  _BYTE v113[20];
  unsigned int v114;
  _BYTE v115[20];
  unsigned int v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 __p;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  int32x4_t v128;
  int v129;
  void *v130;
  void *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;

  if (*(_BYTE *)(a1 + 283))
  {
    Espresso::batch_matmul_kernel_cpu::__launch((_BYTE *)a1, a2, (uint64_t)a3, (uint64_t **)a4);
    return;
  }
  v7 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v7 <= 0x1F)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("batch_matmul_kernel expects 2 inputs but got %zu", v7 >> 4);
  v8 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v10 = 0;
    v148 = 0;
    v149 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v8 + 160);
    v9 = *(std::__shared_weak_count **)(*v8 + 168);
    v148 = v10;
    v149 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v55 = __ldxr(p_shared_owners);
      while (__stxr(v55 + 1, p_shared_owners));
    }
  }
  v11 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v11
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11))
  {
    v12 = 0;
    v146 = 0;
    v147 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*v11 + 160);
    v56 = *(std::__shared_weak_count **)(*v11 + 168);
    v146 = v12;
    v147 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
  }
  v13 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL
    && (v14 = v13[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
  {
    v59 = v13[2];
    v61 = *(_QWORD *)(v59 + 160);
    v60 = *(std::__shared_weak_count **)(v59 + 168);
    v105 = v61;
    v144 = v61;
    v145 = v60;
    if (v60)
    {
      v62 = (unint64_t *)&v60->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
  }
  else
  {
    v105 = 0;
    v144 = 0;
    v145 = 0;
  }
  v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  v103 = v9;
  if (v15)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 23);
    v107 = *((_QWORD *)v15 + 22);
    v142 = v107;
    v143 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v16 = 0;
    v107 = 0;
    v142 = 0;
    v143 = 0;
  }
  v19 = *(uint64_t **)a4;
  v20 = *(_QWORD *)(a4 + 8);
  v21 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)a4, v20, 0);
  if (v21)
  {
    v22 = (std::__shared_weak_count *)v21[23];
    v106 = v21[22];
    v140 = v106;
    v141 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(uint64_t **)a4;
      v20 = *(_QWORD *)(a4 + 8);
    }
  }
  else
  {
    v106 = 0;
    v140 = 0;
    v141 = 0;
  }
  v25 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v19, v20, 1);
  if (v25)
  {
    v26 = (std::__shared_weak_count *)v25[23];
    v104 = v25[22];
    v138 = v104;
    v139 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v104 = 0;
    v138 = 0;
    v139 = 0;
  }
  v29 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v29)
  {
    v31 = v29[24];
    v30 = (std::__shared_weak_count *)v29[25];
    v136 = v31;
    v137 = v30;
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v31 = 0;
    v136 = 0;
    v137 = 0;
  }
  v34 = v12;
  v35 = *(uint64_t **)a4;
  v36 = *(_QWORD *)(a4 + 8);
  v37 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)a4, v36, 0);
  if (v37)
  {
    v39 = v37[24];
    v38 = (std::__shared_weak_count *)v37[25];
    v134 = v39;
    v135 = v38;
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v35 = *(uint64_t **)a4;
      v36 = *(_QWORD *)(a4 + 8);
    }
  }
  else
  {
    v39 = 0;
    v134 = 0;
    v135 = 0;
  }
  v42 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v35, v36, 1);
  if (v42)
  {
    v44 = v42[24];
    v43 = (std::__shared_weak_count *)v42[25];
    v132 = v44;
    v133 = v43;
    if (v43)
    {
      v45 = (unint64_t *)&v43->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
  }
  else
  {
    v44 = 0;
    v132 = 0;
    v133 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v127, *(_QWORD *)*a3);
  Espresso::abstract_blob_container::shape((char *)&v122, **(_QWORD **)a4);
  Espresso::abstract_blob_container::shape((char *)&v117, *(_QWORD *)(*(_QWORD *)a4 + 16));
  v47 = 1;
  v48 = DWORD1(v122);
  if ((v123 & 0x80000000) == 0 && SHIDWORD(v122) >= 1 && SDWORD2(v122) >= 1 && SDWORD1(v122) >= 1)
    v47 = (int)v122 < 1;
  if (DWORD1(v123) == -1)
    v49 = (_DWORD)v123 != 1;
  else
    v49 = DWORD1(v123) == 5;
  if ((_DWORD)v123)
    v49 = 0;
  if (!v47 && !v49)
  {
    v50 = 1;
    if ((v118 & 0x80000000) == 0 && SHIDWORD(v117) >= 1 && SDWORD2(v117) >= 1 && SDWORD1(v117) >= 1)
      v50 = (int)v117 < 1;
    if (DWORD1(v118) == -1)
      v51 = (_DWORD)v118 != 1;
    else
      v51 = DWORD1(v118) == 5;
    if ((_DWORD)v118)
      v51 = 0;
    if (!v50 && !v51)
    {
      v52 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v128)));
      if (v129 == -1)
        v53 = v128.i32[3] != 1;
      else
        v53 = v129 == 5;
      if (v128.i32[3])
        v53 = 0;
      if ((v52 & 1) == 0 && v127 >= 1 && !v53)
      {
        if (DWORD2(v117) != 1 && DWORD2(v122) != 1 && DWORD2(v122) != DWORD2(v117)
          || HIDWORD(v117) != 1 && HIDWORD(v122) != 1 && HIDWORD(v122) != HIDWORD(v117)
          || (_DWORD)v118 != 1 && (_DWORD)v123 != 1 && (_DWORD)v123 != (_DWORD)v118)
        {
          goto LABEL_114;
        }
        if (*(_BYTE *)(a1 + 281))
        {
          if (*(_BYTE *)(a1 + 282))
            goto LABEL_95;
        }
        else
        {
          v48 = v122;
          if (*(_BYTE *)(a1 + 282))
          {
LABEL_95:
            if (v48 != (_DWORD)v117)
              goto LABEL_114;
            goto LABEL_111;
          }
        }
        if (v48 != DWORD1(v117))
        {
LABEL_114:
          Espresso::batch_matmul_kernel_cpu::__launch((_BYTE *)a1, v128.i32[3] != 1, (uint64_t)a3, (uint64_t **)a4);
          goto LABEL_115;
        }
LABEL_111:
        if (!v31 || !v39 || !v44)
        {
          v91 = *(void **)(a1 + 288);
          v92 = v10;
          v93 = v105;
          if (!v91)
          {
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v115, (const Espresso::layer_shape *)&v122, 0);
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v113, (const Espresso::layer_shape *)&v117, 0);
            v94 = v116;
            v95 = v114;
            if (v116 < v114)
            {
              Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v115, (int)v114);
              v94 = v116;
            }
            if (v95 < v94)
              Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v113, (int)v94);
            Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v115, 0, (uint64_t)buf);
            v122 = *(_OWORD *)buf;
            v123 = v109;
            v124 = v110;
            if ((_QWORD)v125)
            {
              *((_QWORD *)&v125 + 1) = v125;
              operator delete((void *)v125);
            }
            v125 = *(_OWORD *)v111;
            v126 = v112;
            Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v113, 0, (uint64_t)buf);
            v117 = *(_OWORD *)buf;
            v118 = v109;
            v119 = v110;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            __p = *(_OWORD *)v111;
            v121 = v112;
            if (v10 && v34 && v105)
            {
              v91 = Espresso::BNNSEngine::batch_matmul_kernel::create_bnns_filter<Espresso::blob<float,4>>(*(_BYTE *)(a1 + 281), *(_BYTE *)(a1 + 282), &v146, &v144, v10, v103, (const Espresso::layer_shape *)&v122, (const Espresso::layer_shape *)&v117, (const Espresso::layer_shape *)&v127, *(_BYTE *)(a1 + 304), *(_QWORD *)(a1 + 296));
            }
            else
            {
              if (!v107 || !v106 || !v104)
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Batch_matmul kernel only supports all FP32, all FP16 or all uint8 inputs");
              v91 = Espresso::BNNSEngine::batch_matmul_kernel::create_bnns_filter<Espresso::blob<unsigned short,4>>(*(_BYTE *)(a1 + 281), *(_BYTE *)(a1 + 282), &v140, &v138, v107, v16, (const Espresso::layer_shape *)&v122, (const Espresso::layer_shape *)&v117, (const Espresso::layer_shape *)&v127, *(_BYTE *)(a1 + 304), *(_QWORD *)(a1 + 296));
            }
            *(_QWORD *)(a1 + 288) = v91;
          }
          if (v10 && v34 && v105 || v107 && v106 && (v92 = v107, v34 = v106, (v93 = v104) != 0))
          {
            if (BNNSFilterApplyTwoInput(v91, *(const void **)(v34 + 24), *(const void **)(v93 + 24), *(void **)(v92 + 24)) == -1)Espresso::throw_exception_selector<Espresso::invalid_state_error>("Batch_matmul kernel failed in BNNS");
          }
          else
          {
            Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a4);
            v96 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
            if (v111[0])
            {
              v111[1] = v111[0];
              operator delete(v111[0]);
            }
            Espresso::abstract_blob_container::shape((char *)buf, *(_QWORD *)(*(_QWORD *)a4 + 16));
            v97 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
            if (v111[0])
            {
              v111[1] = v111[0];
              operator delete(v111[0]);
            }
            Espresso::abstract_blob_container::shape((char *)buf, *(_QWORD *)*a3);
            v99 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
            v100 = (Espresso *)v111[0];
            if (v111[0])
            {
              v111[1] = v111[0];
              operator delete(v111[0]);
            }
            if (v96 && v97 && v99)
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Batch_matmul kernel only supports all FP32 or FP16 inputs");
            if ((v101 & 1) == 0)
            {
              if ((_DWORD)v100)
              {
                if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
                  dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
                Espresso::BNNSEngine::batch_matmul_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFC;
              }
            }
            if (Espresso::BNNSEngine::batch_matmul_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
            {
              Espresso::espresso_os_log_subsystem(v100, v98);
              v102 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl(&dword_190DAF000, v102, OS_LOG_TYPE_DEBUG, "batch_matmul_kernel: Zero shaped input or output so skipping computation", buf, 2u);
              }

            }
          }
          goto LABEL_115;
        }
        goto LABEL_114;
      }
    }
  }
LABEL_115:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    operator delete((void *)v125);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v64 = v133;
  if (v133)
  {
    v65 = (unint64_t *)&v133->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v135;
  if (v135)
  {
    v68 = (unint64_t *)&v135->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v137;
  if (v137)
  {
    v71 = (unint64_t *)&v137->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v139;
  if (v139)
  {
    v74 = (unint64_t *)&v139->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v141;
  if (v141)
  {
    v77 = (unint64_t *)&v141->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v143;
  if (v143)
  {
    v80 = (unint64_t *)&v143->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v145;
  if (v145)
  {
    v83 = (unint64_t *)&v145->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v147;
  if (v147)
  {
    v86 = (unint64_t *)&v147->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v149;
  if (v149)
  {
    v89 = (unint64_t *)&v149->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
}

void sub_190DEF384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  uint64_t v53;

  if (__p)
    operator delete(__p);
  if (a44)
    operator delete(a44);
  if (a52)
    operator delete(a52);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 112);
  _Unwind_Resume(a1);
}

void *Espresso::layer_data::get_blob<Espresso::blob_cpu>(uint64_t a1, uint64_t a2, int a3)
{
  const void *v3;

  if ((int)((unint64_t)(a2 - a1) >> 4) > a3 && (v3 = *(const void **)(a1 + 16 * a3)) != 0)
  else
    return 0;
}

uint64_t espresso_buffer_pack_tensor_shape(uint64_t a1, std::vector<int>::size_type __n, uint64_t a3)
{
  std::vector<int>::size_type v4;
  BOOL v6;
  char v7;
  uint64_t result;
  std::vector<int>::pointer i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  _OWORD v14[2];
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  _QWORD v23[2];
  int v24;
  int v25;
  std::vector<int> v26;

  if (!a1)
    return 4294967290;
  v4 = __n;
  if (__n)
    v6 = a3 == 0;
  else
    v6 = 0;
  v7 = v6;
  result = 4294967290;
  if (__n <= 0xA && (v7 & 1) == 0)
  {
    *(_QWORD *)(a1 + 8) = __n;
    std::vector<int>::vector(&v26, __n);
    for (i = v26.__begin_; v4; --v4)
      i[v4 - 1] = *(_QWORD *)(a3 - 8 + 8 * v4);
    v23[0] = 0;
    v23[1] = 0;
    v24 = 0;
    v10 = (char *)v26.__end_ - (char *)i;
    if (v26.__end_ != i)
    {
      v11 = v10 >> 2;
      if ((unint64_t)(v10 >> 2) <= 1)
        v11 = 1;
      v12 = (int *)v23;
      do
      {
        v13 = *i++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    v25 = (unint64_t)v10 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v19);
    v14[0] = v19[0];
    v14[1] = v19[1];
    v15 = v20;
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
    setup_espresso_buffer_with_shape(a1, (int *)v14);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v26.__begin_)
    {
      v26.__end_ = v26.__begin_;
      operator delete(v26.__begin_);
    }
    return 0;
  }
  return result;
}

void sub_190DEF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v26;
  EspressoLight *v27;
  std::exception *v28;

  if (__p)
    operator delete(__p);
  v26 = *(void **)(v23 - 56);
  if (v26)
  {
    *(_QWORD *)(v23 - 48) = v26;
    operator delete(v26);
  }
  if (a2 == 1)
  {
    v27 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v27, v28);
    __cxa_end_catch();
    JUMPOUT(0x190DEF5C0);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t Espresso::layer_nd_shape::to_canonical_5d_shape@<D0>(Espresso::layer_nd_shape *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  int32x2_t v5;
  int v6;
  int v7;
  int v8;
  int32x2_t result;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)a3 = xmmword_191A8AA80;
  *(_QWORD *)(a3 + 16) = 0xFFFFFFFF00000001;
  v4 = *((_DWORD *)this + 5);
  if (a2)
  {
    v5 = (int32x2_t)0x100000001;
    v6 = 1;
    v7 = 1;
    v8 = 1;
    switch(v4)
    {
      case 0:
        break;
      case 1:
        v6 = *(_DWORD *)this;
        break;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_7;
      case 4:
        v5 = *(int32x2_t *)((char *)this + 8);
LABEL_5:
        v7 = *(_DWORD *)this;
        v6 = *((_DWORD *)this + 1);
        break;
      case 5:
        v5 = *(int32x2_t *)((char *)this + 12);
LABEL_7:
        v7 = *((_DWORD *)this + 1);
        v6 = *((_DWORD *)this + 2);
        v8 = *(_DWORD *)this;
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v13, *((int *)this + 5));
        v11 = std::string::insert(&v13, 0, "Invalid rank: ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v14);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v6 = 1;
    v7 = 1;
    v8 = 1;
    v5.i32[0] = 1;
    v5.i32[1] = *(_DWORD *)this;
  }
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  result = vrev64_s32(v5);
  *(int32x2_t *)a3 = result;
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v4;
  return result;
}

void sub_190DEF848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

void *Espresso::BNNSEngine::batch_matmul_kernel::create_bnns_filter<Espresso::blob<float,4>>(BOOL a1, BOOL a2, uint64_t *a3, uint64_t *a4, uint64_t a5, std::__shared_weak_count *a6, const Espresso::layer_shape *a7, const Espresso::layer_shape *a8, const Espresso::layer_shape *a9, char a10, uint64_t a11)
{
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const BNNSFilterParameters *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v37[4];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  BNNSNDArrayDescriptor v41[3];
  BNNSLayerParametersBroadcastMatMul layer_params;

  bzero(&layer_params.transA, 0x218uLL);
  *(_QWORD *)&layer_params.alpha = 1065353216;
  layer_params.transA = a1;
  layer_params.transB = a2;
  memset(v41, 0, sizeof(v41));
  v40[0] = a5;
  v40[1] = a6;
  if (a6)
  {
    p_shared_owners = (unint64_t *)&a6->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a9, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v41[2], (uint64_t)v40, (uint64_t)v37, 0);
  if (a6)
  {
    v21 = (unint64_t *)&a6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a6->__on_zero_shared)(a6);
      std::__shared_weak_count::__release_weak(a6);
    }
  }
  v23 = *a3;
  v24 = (std::__shared_weak_count *)a3[1];
  v39[0] = v23;
  v39[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a7, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v41[1], (uint64_t)v39, (uint64_t)v37, 0);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = *a4;
  v30 = (std::__shared_weak_count *)a4[1];
  v38[0] = v29;
  v38[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a8, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)v41, (uint64_t)v38, (uint64_t)v37, 0);
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  layer_params.o_desc = v41[2];
  layer_params.iA_desc = v41[1];
  layer_params.iB_desc = v41[0];
  v37[2] = bnns_alloc_capmem;
  v37[3] = MEMORY[0x1E0C834A8];
  v37[0] = 0;
  v37[1] = a11;
  if ((a10 & 1) == 0)
    LODWORD(v37[0]) = 1;
  return Espresso::BNNSEngine::create_bnns_batch_matmul(&layer_params, (const BNNSLayerParametersBroadcastMatMul *)v37, v33);
}

void sub_190DEFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      v7 = a4 == 0;
      v8 = 98305;
      v9 = 0x10000;
      goto LABEL_6;
    case 2:
      v8 = 163841;
      v7 = a4 == 0;
      v9 = 0x20000;
      goto LABEL_6;
    case 3:
      v8 = 229377;
      v7 = a4 == 0;
      v9 = 196608;
      goto LABEL_6;
    case 4:
      v8 = 294913;
      v7 = a4 == 0;
      v9 = 0x40000;
LABEL_6:
      if (v7)
        v10 = v8;
      else
        v10 = v9;
      break;
    case 5:
      if (a4)
        v10 = 360448;
      else
        v10 = 360449;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Unsupported rank %zu", *(int *)(a3 + 20));
  }
  Espresso::layer_nd_shape::shape_vector_size_t((Espresso::layer_nd_shape *)&v18, a3);
  v12 = (_BYTE *)v18;
  v11 = v19;
  if (a4)
  {
    if ((char *)v18 != v19)
    {
      v13 = v19 - 8;
      if ((unint64_t)(v19 - 8) > v18)
      {
        v14 = v18 + 8;
        do
        {
          v15 = *(_QWORD *)(v14 - 8);
          *(_QWORD *)(v14 - 8) = *(_QWORD *)v13;
          *(_QWORD *)v13 = v15;
          v13 -= 8;
          v16 = v14 >= (unint64_t)v13;
          v14 += 8;
        }
        while (!v16);
      }
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 4) = v10;
  if (v11 != v12)
    memmove((void *)(a1 + 8), v12, v11 - v12);
  *(_QWORD *)(a1 + 136) = v17;
  *(_DWORD *)(a1 + 144) = 65568;
  *(_QWORD *)(a1 + 164) = 1065353216;
  if (v12)
  {
    v19 = v12;
    operator delete(v12);
  }
}

_QWORD *Espresso::layer_nd_shape::shape_vector_size_t(Espresso::layer_nd_shape *this, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  uint64_t v10;
  std::runtime_error *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  result = std::vector<unsigned long>::vector(this, *(int *)(a2 + 20));
  v5 = *(int *)(a2 + 20);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)this;
    do
    {
      v8 = *(unsigned int *)(a2 + 4 * v6);
      if ((v8 & 0x80000000) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v10 = a2;
        v11 = exception;
        std::to_string(&v21, *(_DWORD *)(v10 + 4 * v6));
        v12 = std::string::insert(&v21, 0, "Invalid dimension ");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        v14 = std::string::append(&v22, " on axis ");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v20, v6);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v20;
        else
          v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        else
          size = v20.__r_.__value_.__l.__size_;
        v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v11, &v24);
        __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)(v7 + 8 * v6++) = v8;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_190DEFEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v38;

  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      v38 = *(void **)v33;
      if (*(_QWORD *)v33)
      {
        *(_QWORD *)(v33 + 8) = v38;
        operator delete(v38);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_190DEFFD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::cpu_context_transfer_algo_t::reorder_load_constants(uint64_t a1, uint64_t **a2, _BYTE *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  int v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t *v79;
  int v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  _DWORD *v84;
  int v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  const Espresso::kernel_info_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  void **v121;
  uint64_t **v122;
  uint64_t *v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  int v131;
  _OWORD v132[2];
  int v133;
  _OWORD v134[2];
  int v135;
  unint64_t v136;
  _BYTE buf[24];
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;

  v120 = a1;
  v140 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  memset(v134, 0, sizeof(v134));
  v135 = 1065353216;
  v4 = *v3;
  v5 = v3[1];
  v122 = a2;
  v123 = v3;
  if (v5 == *v3)
  {
    v4 = v3[1];
    goto LABEL_63;
  }
  v6 = 0;
  do
  {
    v8 = v4 + 224 * v6;
    v7 = (_QWORD *)(v8 + 48);
    LODWORD(v8) = *(char *)(v8 + 71);
    v9 = v8;
    if ((v8 & 0x80000000) != 0)
    {
      v10 = (_QWORD *)*v7;
      v8 = v7[1];
    }
    else
    {
      v10 = v7;
      v8 = v8;
    }
    if (v8 >= 3)
    {
      v11 = (char *)v10 + v8;
      a1 = (uint64_t)v10;
      do
      {
        a1 = (uint64_t)memchr((void *)a1, 99, v8 - 2);
        if (!a1)
          break;
        if (*(_WORD *)a1 == 26211 && *(_BYTE *)(a1 + 2) == 95)
        {
          if ((char *)a1 != v11 && (_QWORD *)a1 == v10)
            return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
          break;
        }
        v8 = (uint64_t)&v11[-++a1];
      }
      while ((uint64_t)&v11[-a1] >= 3);
    }
    if ((v9 & 0x80) != 0)
    {
      v13 = (_QWORD *)*v7;
      v14 = v7[1];
    }
    else
    {
      v13 = v7;
      v14 = v9;
    }
    if (v14 >= 7)
    {
      v15 = (char *)v13 + v14;
      a1 = (uint64_t)v13;
      do
      {
        a1 = (uint64_t)memchr((void *)a1, 95, v14 - 6);
        if (!a1)
          break;
        if (*(_DWORD *)a1 == 1869375327 && *(_DWORD *)(a1 + 3) == 1818321519)
        {
          if ((char *)a1 != v15 && a1 - (_QWORD)v13 != -1)
            return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
          break;
        }
        v14 = (uint64_t)&v15[-++a1];
      }
      while ((uint64_t)&v15[-a1] >= 7);
    }
    if ((v9 & 0x80) != 0)
    {
      if (v7[1] == 11)
      {
        v7 = (_QWORD *)*v7;
LABEL_36:
        if (*v7 == 0x747269765F696870 && *(_QWORD *)((char *)v7 + 3) == 0x6C6175747269765FLL)
          goto LABEL_43;
      }
    }
    else if ((_DWORD)v9 == 11)
    {
      goto LABEL_36;
    }
    a1 = *(_QWORD *)(v4 + 224 * v6 + 88);
    if (a1)
    {
      a1 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 264))(a1, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v4 + 224 * v6 + 144) - *(_QWORD *)(v4 + 224 * v6 + 136)) >> 3));
      if ((a1 & 1) != 0)
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
      v4 = *v123;
      v5 = v123[1];
    }
LABEL_43:
    ++v6;
  }
  while (v6 < 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  if (v5 != v4)
  {
    v18 = 0;
    while (1)
    {
      v19 = v4 + 224 * v18;
      v20 = (_QWORD *)(v19 + 48);
      v21 = *(char *)(v19 + 71);
      if (v21 < 0)
      {
        if (v20[1] == 13)
        {
          v20 = (_QWORD *)*v20;
LABEL_51:
          v22 = (_QWORD *)*v20;
          v23 = *(_QWORD *)((char *)v20 + 5);
          if (v22 == (_QWORD *)0x6E6F635F64616F6CLL && v23 == 0x746E6174736E6F63)
          {
            v25 = v4 + 224 * v18;
            v26 = *(_QWORD *)(v25 + 112);
            v27 = *(_QWORD *)(v25 + 120);
            if (v26 != v27)
            {
              do
              {
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v134, v26))
                {
                  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
                }
                a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v134, v26, v26);
                v26 += 24;
              }
              while (v26 != v27);
              v4 = *v123;
              v5 = v123[1];
            }
          }
        }
      }
      else if (v21 == 13)
      {
        goto LABEL_51;
      }
      if (++v18 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5)))
        goto LABEL_63;
    }
  }
  v5 = v4;
LABEL_63:
  v28 = *(_QWORD **)(v120 + 56);
  v121 = (void **)(v28 + 3);
  v28[4] = v28[3];
  v29 = 0uLL;
  memset(v132, 0, sizeof(v132));
  v133 = 1065353216;
  if (v5 == v4)
  {
    v129 = 0uLL;
    v130 = 0uLL;
    v131 = 1065353216;
    v34 = v122;
LABEL_158:
    v86 = 0;
    v126 = v29;
    v127 = v29;
    v128 = 1065353216;
    goto LABEL_159;
  }
  v30 = 0;
  do
  {
    v31 = v4 + 224 * v30;
    v33 = *(_QWORD *)(v31 + 112);
    v32 = *(_QWORD *)(v31 + 120);
    if (v33 != v32)
    {
      do
      {
        a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v132, v33, v33);
        v33 += 24;
      }
      while (v33 != v32);
      v4 = *v123;
      v5 = v123[1];
    }
    ++v30;
  }
  while (v30 < 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  v29 = 0uLL;
  v129 = 0u;
  v130 = 0u;
  v131 = 1065353216;
  v34 = v122;
  if (v4 == v5)
    goto LABEL_158;
  do
  {
    v36 = *(_QWORD *)(v4 + 136);
    v35 = *(_QWORD *)(v4 + 144);
    while (v36 != v35)
    {
      a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v132, v36);
      if (!a1)
        a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v129, v36, v36);
      v36 += 24;
    }
    v4 += 224;
  }
  while (v4 != v5);
  v38 = *v123;
  v37 = v123[1];
  v126 = 0u;
  v127 = 0u;
  v128 = 1065353216;
  *(_QWORD *)&v124 = 0;
  if (v37 == v38)
  {
    v86 = 0;
    goto LABEL_159;
  }
  v39 = 0;
  while (2)
  {
    v40 = v38 + 224 * v39;
    v41 = (_QWORD *)(v40 + 48);
    v42 = *(char *)(v40 + 71);
    if (v42 < 0)
    {
      if (v41[1] == 13)
      {
        v41 = (_QWORD *)*v41;
        goto LABEL_83;
      }
    }
    else
    {
      if (v42 != 13)
        goto LABEL_87;
LABEL_83:
      v43 = (_QWORD *)*v41;
      v44 = *(_QWORD *)((char *)v41 + 5);
      if (v43 == (_QWORD *)0x6E6F635F64616F6CLL && v44 == 0x746E6174736E6F63)
      {
        v75 = v38 + 224 * v39;
        v78 = *(_QWORD **)(v75 + 112);
        v76 = (_QWORD *)(v75 + 112);
        v77 = v78;
        if (v78 == (_QWORD *)v76[1]
          || (v79 = *v122,
              !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)(*v122)[7], v77))|| (*(_QWORD *)buf = v77, a1 = (uint64_t)std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v79 + 6), v77, (__int128 **)buf), *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64))|| *(_QWORD *)(v38 + 224 * v39 + 144) != *(_QWORD *)(v38 + 224 * v39 + 136)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76[1] - *v76) >> 3) >= 2)
        {
          v80 = v124;
          v82 = (char *)v28[4];
          v81 = v28[5];
          if ((unint64_t)v82 >= v81)
          {
            v87 = (char *)*v121;
            v88 = (v82 - (_BYTE *)*v121) >> 2;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v90 = v81 - (_QWORD)v87;
            if (v90 >> 1 > v89)
              v89 = v90 >> 1;
            v63 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL;
            v91 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v63)
              v91 = v89;
            if (v91)
            {
              v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v91);
              v87 = (char *)v28[3];
              v82 = (char *)v28[4];
            }
            else
            {
              v92 = 0;
            }
            v93 = (_DWORD *)(v91 + 4 * v88);
            *v93 = v80;
            v83 = v93 + 1;
            while (v82 != v87)
            {
              v94 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *--v93 = v94;
            }
            v28[3] = v93;
            v28[4] = v83;
            v28[5] = v91 + 4 * v92;
            if (v87)
              operator delete(v87);
          }
          else
          {
            *(_DWORD *)v82 = v124;
            v83 = v82 + 4;
          }
          v28[4] = v83;
          a1 = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v126, (unint64_t *)&v124, &v124);
        }
        goto LABEL_141;
      }
    }
LABEL_87:
    v46 = v38 + 224 * v39;
    v48 = *(_QWORD **)(v46 + 136);
    v47 = *(_QWORD **)(v46 + 144);
    if (v48 == v47)
      goto LABEL_118;
    while (2)
    {
      a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v129, (uint64_t)v48);
      if (!a1)
      {
        v136 = 0;
        *(_QWORD *)buf = v48;
        a1 = (uint64_t)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(*v34 + 3), v48, (__int128 **)buf);
        v49 = *(_QWORD *)(a1 + 56);
        v136 = v49;
        v50 = *v123 + 224 * v49;
        v51 = (_QWORD *)(v50 + 48);
        v52 = *(char *)(v50 + 71);
        if (v52 < 0)
        {
          if (v51[1] != 13)
            goto LABEL_89;
          v51 = (_QWORD *)*v51;
        }
        else if (v52 != 13)
        {
          goto LABEL_89;
        }
        v53 = (_QWORD *)*v51;
        v54 = *(_QWORD *)((char *)v51 + 5);
        if (v53 == (_QWORD *)0x6E6F635F64616F6CLL && v54 == 0x746E6174736E6F63)
        {
          a1 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(&v126, v49);
          if (!a1)
          {
            *a3 = 1;
            v57 = (char *)v28[4];
            v56 = v28[5];
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v121;
              v60 = (v57 - (_BYTE *)*v121) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL;
              v64 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63)
                v64 = v61;
              if (v64)
              {
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v64);
                v59 = (char *)v28[3];
                v57 = (char *)v28[4];
              }
              else
              {
                v65 = 0;
              }
              v66 = (_DWORD *)(v64 + 4 * v60);
              *v66 = v49;
              v58 = v66 + 1;
              while (v57 != v59)
              {
                v67 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *--v66 = v67;
              }
              v28[3] = v66;
              v28[4] = v58;
              v28[5] = v64 + 4 * v65;
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = v49;
              v58 = v57 + 4;
            }
            v28[4] = v58;
            a1 = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v126, &v136, &v136);
          }
        }
      }
LABEL_89:
      v48 += 3;
      if (v48 != v47)
        continue;
      break;
    }
    LODWORD(v39) = v124;
LABEL_118:
    v69 = (char *)v28[4];
    v68 = v28[5];
    if ((unint64_t)v69 >= v68)
    {
      a1 = (uint64_t)*v121;
      v71 = (v69 - (_BYTE *)*v121) >> 2;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v73 = v68 - a1;
      if (v73 >> 1 > v72)
        v72 = v73 >> 1;
      v63 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
      v74 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v63)
        v74 = v72;
      if (v74)
      {
        v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v74);
        a1 = v28[3];
        v69 = (char *)v28[4];
      }
      else
      {
        a2 = 0;
      }
      v84 = (_DWORD *)(v74 + 4 * v71);
      *v84 = v39;
      v70 = v84 + 1;
      while (v69 != (char *)a1)
      {
        v85 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *--v84 = v85;
      }
      v28[3] = v84;
      v28[4] = v70;
      v28[5] = v74 + 4 * (_QWORD)a2;
      if (a1)
        operator delete((void *)a1);
    }
    else
    {
      *(_DWORD *)v69 = v39;
      v70 = v69 + 4;
    }
    v28[4] = v70;
LABEL_141:
    v39 = v124 + 1;
    *(_QWORD *)&v124 = v39;
    v38 = *v123;
    v86 = 0x6DB6DB6DB6DB6DB7 * ((v123[1] - *v123) >> 5);
    v34 = v122;
    if (v39 < v86)
      continue;
    break;
  }
LABEL_159:
  if (v86 == (uint64_t)(v28[4] - v28[3]) >> 2)
  {
    v95 = *v34;
    v124 = *(_OWORD *)*v34;
    v125 = v95[2];
    *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
    v96 = *v34;
    v97 = v28[3];
    v98 = v28[4];
    v99 = v98 - v97;
    v100 = *v34 + 2;
    v101 = **v34;
    if (0x6DB6DB6DB6DB6DB7 * ((*v100 - v101) >> 5) < (unint64_t)((v98 - v97) >> 2))
    {
      if ((unint64_t)v99 >= 0x492492492492491)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v102 = v96[1];
      v139 = v100;
      *(_QWORD *)buf = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v99 >> 2);
      *(_QWORD *)&buf[8] = *(_QWORD *)buf + v102 - v101;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      v138 = *(_QWORD *)buf + 224 * v103;
      std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v96, buf);
      a1 = std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)buf);
      v97 = v28[3];
      v98 = v28[4];
      v34 = v122;
    }
    if (v98 != v97)
    {
      v104 = 0;
      do
      {
        v105 = *v34;
        v106 = (const Espresso::kernel_info_t *)(v124 + 224 * *(int *)(v97 + 4 * v104));
        v107 = v105[1];
        v108 = v105[2];
        if (v107 >= v108)
        {
          v110 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v107 - *v105) >> 5);
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) > 0x124924924924924)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v112 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v108 - *v105) >> 5);
          if (2 * v112 > v111)
            v111 = 2 * v112;
          if (v112 >= 0x92492492492492)
            v113 = 0x124924924924924;
          else
            v113 = v111;
          v139 = v105 + 2;
          if (v113)
            v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v113);
          else
            v114 = 0;
          *(_QWORD *)buf = v113;
          *(_QWORD *)&buf[8] = v113 + 224 * v110;
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          v138 = v113 + 224 * v114;
          Espresso::kernel_info_t::kernel_info_t(*(std::string **)&buf[8], v106);
          *(_QWORD *)&buf[16] += 224;
          std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v105, buf);
          v109 = v105[1];
          a1 = std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          a1 = (uint64_t)Espresso::kernel_info_t::kernel_info_t((std::string *)v105[1], v106);
          v109 = v107 + 224;
          v105[1] = v107 + 224;
        }
        v105[1] = v109;
        ++v104;
        v97 = v28[3];
        v34 = v122;
      }
      while (v104 < (v28[4] - v97) >> 2);
    }
    Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(a1, v34);
    *(_QWORD *)buf = &v124;
    std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    v115 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
    {
      v117 = (uint64_t)(v28[4] - v28[3]) >> 2;
      v118 = 0x6DB6DB6DB6DB6DB7 * ((v123[1] - *v123) >> 5);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v117;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v118;
      _os_log_error_impl(&dword_190DAF000, v115, OS_LOG_TYPE_ERROR, "reorder_load_constants %zu != %zu", buf, 0x16u);
    }

    v28[4] = v28[3];
    *a3 = 0;
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v126);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v129);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v132);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
}

void sub_190DF0B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29 - 192);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 *v29;

  v3 = *a2;
  v4 = (char **)(*a2 + 4);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v4);
  v3[3] = (uint64_t)v4;
  v3[5] = 0;
  *v4 = 0;
  v5 = (uint64_t)(*a2 + 7);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)v5);
  *(_QWORD *)(v5 - 8) = v5;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  v6 = *v3;
  if (v3[1] != *v3)
  {
    v7 = 0;
    do
    {
      v8 = v6 + 224 * v7;
      v9 = *(__int128 **)(v8 + 112);
      v10 = *(__int128 **)(v8 + 120);
      while (v9 != v10)
      {
        v11 = (uint64_t)(*a2 + 3);
        v29 = v9;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v9, &v29)[7] = v7;
        v9 = (__int128 *)((char *)v9 + 24);
      }
      v12 = v6 + 224 * v7;
      v13 = *(__int128 **)(v12 + 136);
      v14 = *(__int128 **)(v12 + 144);
      while (v13 != v14)
      {
        v15 = (uint64_t)(*a2 + 6);
        v29 = v13;
        v16 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v13, &v29);
        v17 = v16;
        v18 = (unint64_t *)v16[8];
        v19 = v16[9];
        if ((unint64_t)v18 >= v19)
        {
          v21 = (unint64_t *)v16[7];
          v22 = v18 - v21;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v23 = v19 - (_QWORD)v21;
          v24 = (uint64_t)(v19 - (_QWORD)v21) >> 2;
          if (v24 <= v22 + 1)
            v24 = v22 + 1;
          if (v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25);
            v21 = (unint64_t *)v17[7];
            v18 = (unint64_t *)v17[8];
          }
          else
          {
            v26 = 0;
          }
          v27 = (unint64_t *)(v25 + 8 * v22);
          *v27 = v7;
          v20 = v27 + 1;
          while (v18 != v21)
          {
            v28 = *--v18;
            *--v27 = v28;
          }
          v17[7] = v27;
          v17[8] = v20;
          v17[9] = v25 + 8 * v26;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v18 = v7;
          v20 = v18 + 1;
        }
        v17[8] = v20;
        v13 = (__int128 *)((char *)v13 + 24);
      }
      ++v7;
      v6 = *v3;
    }
    while (v7 < 0x6DB6DB6DB6DB6DB7 * ((v3[1] - *v3) >> 5));
  }
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v15, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x40uLL);
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v11 = v15;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *v7 = v6;
    v12 = **(_QWORD **)a1;
    v13 = v6;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_190DF0F04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v17, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x50uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    v16 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[8] = 0;
    v6[9] = 0;
    v6[7] = 0;
    v16 = 1;
    v11 = v17;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *v7 = v6;
    v12 = **(_QWORD **)a1;
    v13 = v6;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_190DF1008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void **v3;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 56));
  v3 = (void **)(a1 + 24);
  std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void Espresso::generic_activation_kernel::~generic_activation_kernel(Espresso::generic_activation_kernel *this)
{
  *(_QWORD *)this = off_1E2D925E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::BNNSEngine::convolution_kernel::~convolution_kernel(void ***this)
{
  void **v2;
  void **v3;

  *this = (void **)&off_1E2D5D988;
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 83);
  v3 = (void **)(this + 90);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(this + 87);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[83];
  if (v2)
  {
    this[84] = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_convolution_kernel>::~base_bnns_kernel((void **)this);
}

{
  Espresso::BNNSEngine::convolution_kernel::~convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::generic_convolution_kernel::~generic_convolution_kernel(void **this)
{
  *this = off_1E2D937E8;
  if (*((char *)this + 559) < 0)
    operator delete(this[67]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 65));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 63));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 61));
  *this = off_1E2D97330;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 59));
  *this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(this[36]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(void ***a1)
{
  void **v2;
  void **v3;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*v2)
        BNNSFilterDestroy(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  a1[1] = v2;
}

void Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_convolution_kernel>::~base_bnns_kernel(void **a1)
{
  *a1 = off_1E2D5D330;
  BNNSFilterDestroy(a1[71]);
  a1[71] = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

void Espresso::net::get_consumers_of_blobs(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v26;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = a1[4];
  v5 = a1[5];
  if (v5 != v4)
  {
    v7 = 0;
    v8 = a1 + 7;
    do
    {
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v8, v7);
      if (v9)
      {
        v10 = (__int128 *)v9[3];
        v11 = (__int128 *)v9[4];
        if (v10 != v11)
        {
          do
          {
            if (!a2[3]
              || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (uint64_t)v10))
            {
              v26 = v10;
              v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v10, &v26);
              v13 = v12;
              v14 = (unint64_t *)*((_QWORD *)v12 + 6);
              v15 = *((_QWORD *)v12 + 7);
              if ((unint64_t)v14 >= v15)
              {
                v17 = (unint64_t *)*((_QWORD *)v12 + 5);
                v18 = v14 - v17;
                if ((unint64_t)(v18 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v19 = v15 - (_QWORD)v17;
                v20 = (uint64_t)(v15 - (_QWORD)v17) >> 2;
                if (v20 <= v18 + 1)
                  v20 = v18 + 1;
                if (v19 >= 0x7FFFFFFFFFFFFFF8)
                  v21 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v21 = v20;
                if (v21)
                {
                  v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
                  v17 = (unint64_t *)*((_QWORD *)v13 + 5);
                  v14 = (unint64_t *)*((_QWORD *)v13 + 6);
                }
                else
                {
                  v22 = 0;
                }
                v23 = (unint64_t *)(v21 + 8 * v18);
                *v23 = v7;
                v16 = v23 + 1;
                while (v14 != v17)
                {
                  v24 = *--v14;
                  *--v23 = v24;
                }
                *((_QWORD *)v13 + 5) = v23;
                *((_QWORD *)v13 + 6) = v16;
                *((_QWORD *)v13 + 7) = v21 + 8 * v22;
                if (v17)
                  operator delete(v17);
              }
              else
              {
                *v14 = v7;
                v16 = v14 + 1;
              }
              *((_QWORD *)v13 + 6) = v16;
            }
            v10 = (__int128 *)((char *)v10 + 24);
          }
          while (v10 != v11);
          v4 = a1[4];
          v5 = a1[5];
        }
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 4);
  }
}

void sub_190DF1438(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 7) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_190DF16B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::BNNSEngine::create_bnns_batch_matmul(BNNSLayerParametersBroadcastMatMul *layer_params, const BNNSLayerParametersBroadcastMatMul *filter_params, const BNNSFilterParameters *a3)
{
  const BNNSLayerParametersBroadcastMatMul *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = layer_params;
  if ((v5 & 1) == 0)
  {
    if ((_DWORD)layer_params)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::create_bnns_batch_matmul(BNNSLayerParametersBroadcastMatMul const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
    }
  }
  if (Espresso::BNNSEngine::create_bnns_batch_matmul(BNNSLayerParametersBroadcastMatMul const*,BNNSFilterParameters const*)::log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)layer_params, (const char *)filter_params);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerBroadcastMatMul", v8, 2u);
    }

  }
  return BNNSFilterCreateLayerBroadcastMatMul(v4, (const BNNSFilterParameters *)filter_params);
}

void Espresso::activation_kernel_cpu::~activation_kernel_cpu(Espresso::activation_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D89298;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 392);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D89298;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 392);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::layer_nd_shape::set_rank(Espresso::layer_nd_shape *this, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = *((int *)this + 5);
  if (v4 < a2)
  {
    v5 = a2;
    if (!(_DWORD)v4)
      goto LABEL_6;
    v5 = a2;
    do
      *((_DWORD *)this + --v5) = *((_DWORD *)this + --v4);
    while (v4);
    if (v5)
LABEL_6:
      memset_pattern16(this, &xmmword_191A93A60, 4 * v5);
  }
  *((_DWORD *)this + 5) = v2;
}

BOOL E5RT::operator!=(uint64_t a1, uint64_t a2)
{
  E5RT::TensorDataType::Impl *v3;
  int NumComponents;
  int ComponentSize;

  v3 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  if (*(_DWORD *)v3 != **(_DWORD **)(a2 + 8))
    return 1;
  NumComponents = E5RT::TensorDataType::Impl::GetNumComponents(v3);
  if (NumComponents != E5RT::TensorDataType::Impl::GetNumComponents(*(E5RT::TensorDataType::Impl **)(a2 + 8)))
    return 1;
  ComponentSize = E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a1 + 8));
  return ComponentSize != E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a2 + 8));
}

uint64_t e5rt_io_port_retain_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8378;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190DF1994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::ExceptionSafeExecute(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_190DF1A5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void E5RT::E5FunctionImpl::LoadOperandInfo(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string::size_type size;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  E5RT_FB::OperandUnion *v35;
  E5RT_FB::OperandUnion *v36;
  char *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  std::string *v43;
  uint64_t v44;
  int v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  char *v49;
  std::string::size_type v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  _QWORD *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _BOOL4 IsMultiSliceFormat;
  uint64_t *v123;
  uint64_t v124;
  std::string::size_type v125;
  uint64_t v126;
  char *v127;
  uint64_t *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  void *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::string::size_type v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  std::string *v148;
  unint64_t *p_size;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  E5RT_FB::OperandUnion *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *exception;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 *v171;
  std::string::size_type v172;
  std::__shared_weak_count *v173;
  E5RT_FB::OperandUnion *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  std::string v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  char *v181;
  E5RT::TensorDataType::Impl *v182[2];
  std::string __p;
  std::string *p_p;
  std::__shared_weak_count *v185;
  __int128 v186;
  char *v187;
  __int128 *v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
    std::string::basic_string[abi:ne180100]<0>(&v186, "Invalid symbol type.");
    E5RT::Status::Status(&v179, 8, &v186);
    E5RT::E5RTError::E5RTError(exception, &__p, &v179);
  }
  v10 = a1 + 408;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((_QWORD *)(a1 + 408), v11);
  v13 = **(_QWORD **)a2;
  if (v12)
  {
    v14 = (*(uint64_t (**)(void))(v13 + 16))();
    v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((_QWORD *)(a1 + 408), v14);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v16 = v15[6];
    *a5 = v15[5];
    a5[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    return;
  }
  if ((*(unsigned int (**)(void))(v13 + 24))() != 1)
  {
    v162 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
    std::string::basic_string[abi:ne180100]<0>(&v186, "Invalid symbol type.");
    E5RT::Status::Status(&v179, 8, &v186);
    E5RT::E5RTError::E5RTError(v162, &__p, &v179);
  }
  v170 = a4;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 56))(*(_QWORD *)a2);
  v178 = 0;
  v178 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 48))(*(_QWORD *)a2);
  v171 = a2;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
  if (*(char *)(v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
  }
  else
  {
    v21 = *(_OWORD *)v20;
    v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v21;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(&__p, a3, 5, 1);
  v22 = __p.__r_.__value_.__r.__words[0];
  v24 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v23 = *(std::__shared_weak_count **)(__p.__r_.__value_.__r.__words[0] + 8);
  v175 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v176 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ == v22)
  {
    v28 = (void *)v22;
  }
  else
  {
    do
    {
      v29 = *(std::__shared_weak_count **)(size - 8);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      size -= 16;
    }
    while (size != v22);
    v28 = (void *)__p.__r_.__value_.__r.__words[0];
    v24 = v175;
  }
  __p.__r_.__value_.__l.__size_ = v22;
  operator delete(v28);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v174 = 0;
  v33 = (unsigned int *)(v32 + v19);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DAD1A0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)E5RT_FB::VerifySizePrefixedOperandDescBuffer;
    p_p = &__p;
    *(_QWORD *)&v186 = &off_1E2DACF38;
    *((_QWORD *)&v186 + 1) = E5RT_FB::UnPackSizePrefixedOperandDesc;
    v188 = &v186;
    E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::OperandDescT>(v33, (uint64_t)&__p, (uint64_t)&v186);
    v174 = (E5RT_FB::OperandUnion *)v179;
    v179 = 0;
    v41 = v188;
    if (v188 == &v186)
    {
      v42 = 4;
      v41 = &v186;
    }
    else
    {
      if (!v188)
        goto LABEL_34;
      v42 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_34:
    v43 = p_p;
    if (p_p == &__p)
    {
      v44 = 4;
      v43 = &__p;
    }
    else
    {
      if (!p_p)
        goto LABEL_39;
      v44 = 5;
    }
    (*(void (**)(void))(v43->__r_.__value_.__r.__words[0] + 8 * v44))();
LABEL_39:
    v36 = v174;
    v172 = 0;
    v173 = 0;
    v45 = *(unsigned __int8 *)v174;
    if (v45 == 2)
      goto LABEL_160;
    goto LABEL_40;
  }
  v34 = *v33;
  v35 = (E5RT_FB::OperandUnion *)operator new();
  v36 = v35;
  v37 = (char *)v33 + v34;
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v38 = (unsigned __int16 *)((char *)v33 + v34 - *(int *)((char *)v33 + v34));
  v39 = *v38;
  if (v39 < 5)
    goto LABEL_159;
  v40 = v38[2];
  if (v38[2])
  {
    *(_BYTE *)v35 = v37[v40];
    if (v39 < 7)
      goto LABEL_159;
  }
  else
  {
    *(_BYTE *)v35 = 0;
    if (v39 < 7)
      goto LABEL_159;
  }
  v119 = v38[3];
  if (v119)
  {
    if ((_DWORD)v40)
      v120 = v37[v40];
    else
      v120 = 0;
    *((_QWORD *)v35 + 1) = E5RT_FB::OperandUnion::UnPack((int *)&v37[v119 + *(unsigned int *)&v37[v119]], v120);
  }
LABEL_159:
  v174 = v36;
  v172 = 0;
  v173 = 0;
  v45 = *(unsigned __int8 *)v36;
  if (v45 == 2)
  {
LABEL_160:
    v121 = *((_QWORD *)v36 + 1);
    if (v121)
    {
      IsMultiSliceFormat = E5RT::IsMultiSliceFormat(*(_DWORD *)v121);
      v124 = *(_QWORD *)(v121 + 24);
      v123 = *(uint64_t **)(v121 + 32);
      if (IsMultiSliceFormat)
      {
        if ((uint64_t *)v124 != v123)
        {
          v164 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "CreateSurfaceFromDesc");
          std::string::basic_string[abi:ne180100]<0>(&v186, "Bytes per row stride not supported with multi slice formats.");
          E5RT::Status::Status(&v179, 8, &v186);
          E5RT::E5RTError::E5RTError(v164, &__p, &v179);
        }
        E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)v121, *(_QWORD *)(v121 + 8), *(_QWORD *)(v121 + 16), *(_QWORD *)(v121 + 48), &__p);
        v125 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_178:
          v142 = (std::__shared_weak_count *)operator new();
          v143 = __p.__r_.__value_.__r.__words[0];
          v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32A8;
          v142->__shared_owners_ = 0;
          v142->__shared_weak_owners_ = 0;
          v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
          v141 = v173;
          v172 = v125;
          v173 = v142;
          if (!v141)
            goto LABEL_185;
          goto LABEL_181;
        }
LABEL_180:
        v172 = v125;
        v173 = 0;
        goto LABEL_185;
      }
      if ((uint64_t *)v124 == v123)
      {
        E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)v121, *(_QWORD *)(v121 + 8), *(_QWORD *)(v121 + 16), &__p);
        v125 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
          goto LABEL_178;
        goto LABEL_180;
      }
      memset(&__p, 0, sizeof(__p));
      v126 = (uint64_t)v123 - v124;
      if ((uint64_t)v123 - v124 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v127 = (char *)operator new((size_t)v123 - v124);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v127[8 * (v126 >> 3)];
      v128 = (uint64_t *)v124;
      v129 = v127;
      if ((unint64_t)(v126 - 8) < 0x18)
        goto LABEL_238;
      v130 = ((unint64_t)(v126 - 8) >> 3) + 1;
      v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      v128 = (uint64_t *)(v124 + v131);
      v129 = &v127[v131];
      v132 = v127 + 16;
      v133 = (__int128 *)(v124 + 16);
      v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *v133;
        *(v132 - 1) = *(v133 - 1);
        *v132 = v135;
        v132 += 2;
        v133 += 2;
        v134 -= 4;
      }
      while (v134);
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_238:
        do
        {
          v136 = *v128++;
          *(_QWORD *)v129 = v136;
          v129 += 8;
        }
        while (v128 != v123);
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
      E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*(_DWORD *)v121, *(_QWORD *)(v121 + 8), *(_QWORD *)(v121 + 16), &__p, &v186);
      v137 = v186;
      if ((_QWORD)v186)
      {
        v138 = (std::__shared_weak_count *)operator new();
        v139 = (std::__shared_weak_count_vtbl *)v186;
        v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32A8;
        v138->__shared_owners_ = 0;
        v138->__shared_weak_owners_ = 0;
        v138[1].__vftable = v139;
        v140 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_175;
      }
      else
      {
        v138 = 0;
        v140 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
        {
LABEL_175:
          v141 = v173;
          v172 = v137;
          v173 = v138;
          if (!v141)
            goto LABEL_185;
LABEL_181:
          v144 = (unint64_t *)&v141->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
          goto LABEL_185;
        }
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
      operator delete(v140);
      goto LABEL_175;
    }
LABEL_232:
    v163 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
    std::string::basic_string[abi:ne180100]<0>(&v186, "Invalid operand type");
    E5RT::Status::Status(&v179, 8, &v186);
    E5RT::E5RTError::E5RTError(v163, &__p, &v179);
  }
LABEL_40:
  if (v45 != 1)
    goto LABEL_232;
  v46 = (unsigned __int8 **)*((_QWORD *)v36 + 1);
  if (!v46)
    goto LABEL_232;
  v166 = v10;
  v167 = a5;
  E5RT::TensorDataType::TensorDataType(v182, **v46, *((_DWORD *)*v46 + 1));
  memset(&__p, 0, sizeof(__p));
  v47 = v46[4];
  v48 = v46[5];
  v168 = v46;
  if (v47 != v48)
  {
    v49 = 0;
    while (1)
    {
      v51 = *(_QWORD *)v47;
      if ((unint64_t)v49 >= __p.__r_.__value_.__r.__words[2])
        break;
      *(_QWORD *)v49 = v51;
      v50 = (std::string::size_type)(v49 + 8);
LABEL_45:
      __p.__r_.__value_.__l.__size_ = v50;
      v47 += 8;
      v49 = (char *)v50;
      if (v47 == v48)
        goto LABEL_73;
    }
    v52 = (char *)__p.__r_.__value_.__r.__words[0];
    v53 = &v49[-__p.__r_.__value_.__r.__words[0]];
    v54 = (uint64_t)&v49[-__p.__r_.__value_.__r.__words[0]] >> 3;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v56 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
    if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v58 = operator new(8 * v57);
      v59 = &v58[8 * v54];
      *v59 = v51;
      v50 = (std::string::size_type)(v59 + 1);
      if (v49 == v52)
        goto LABEL_61;
    }
    else
    {
      v58 = 0;
      v59 = (_QWORD *)(8 * v54);
      *(_QWORD *)(8 * v54) = v51;
      v50 = 8 * v54 + 8;
      if (v49 == v52)
        goto LABEL_61;
    }
    v60 = v49 - 8 - v52;
    if (v60 >= 0x168)
    {
      if (&v53[(_QWORD)v58 - 8 - (v60 & 0xFFFFFFFFFFFFFFF8)] > &v53[(_QWORD)v58 - 8])
      {
        v61 = v49;
      }
      else if (&v49[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] > v49 - 8)
      {
        v61 = v49;
      }
      else if ((unint64_t)(v49 - v58 - (_QWORD)v53) >= 0x20)
      {
        v63 = (v60 >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v49[-v64];
        v59 = (_QWORD *)((char *)v59 - v64);
        v65 = &v58[8 * v54 - 16];
        v66 = v49 - 16;
        v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          *v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 4;
        }
        while (v67);
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          __p.__r_.__value_.__l.__size_ = v50;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58[8 * v57];
          if (v52)
            operator delete(v52);
          goto LABEL_45;
        }
      }
      else
      {
        v61 = v49;
      }
    }
    else
    {
      v61 = v49;
    }
    do
    {
      v62 = *((_QWORD *)v61 - 1);
      v61 -= 8;
      *--v59 = v62;
    }
    while (v61 != v52);
    goto LABEL_61;
  }
LABEL_73:
  v187 = 0;
  v186 = 0uLL;
  v69 = (uint64_t *)v168[1];
  v70 = (uint64_t *)v168[2];
  if (v69 != v70)
  {
    v71 = 0;
    while (1)
    {
      v73 = *v69;
      if (v71 >= v187)
        break;
      *(_QWORD *)v71 = v73;
      v72 = (uint64_t)(v71 + 8);
LABEL_76:
      *((_QWORD *)&v186 + 1) = v72;
      ++v69;
      v71 = (char *)v72;
      if (v69 == v70)
        goto LABEL_104;
    }
    v74 = (char *)v186;
    v75 = (uint64_t)&v71[-v186] >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v77 = (uint64_t)&v187[-v186];
    if ((uint64_t)&v187[-v186] >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      if (v78 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v79 = operator new(8 * v78);
      v80 = &v79[8 * v75];
      *v80 = v73;
      v72 = (uint64_t)(v80 + 1);
      if (v71 == v74)
        goto LABEL_92;
    }
    else
    {
      v79 = 0;
      v80 = (_QWORD *)(8 * v75);
      *(_QWORD *)(8 * v75) = v73;
      v72 = 8 * v75 + 8;
      if (v71 == v74)
        goto LABEL_92;
    }
    v81 = v71 - 8 - v74;
    if (v81 >= 0x168)
    {
      if (&v79[v71 - v74 - 8 - (v81 & 0xFFFFFFFFFFFFFFF8)] > &v79[v71 - v74 - 8])
      {
        v82 = v71;
      }
      else if (&v71[-(v81 & 0xFFFFFFFFFFFFFFF8) - 8] > v71 - 8)
      {
        v82 = v71;
      }
      else if ((unint64_t)(v74 - v79) >= 0x20)
      {
        v84 = (v81 >> 3) + 1;
        v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
        v82 = &v71[-v85];
        v80 = (_QWORD *)((char *)v80 - v85);
        v86 = &v79[8 * v75 - 16];
        v87 = v71 - 16;
        v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 32;
          v88 -= 4;
        }
        while (v88);
        if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_92:
          *(_QWORD *)&v186 = v80;
          *((_QWORD *)&v186 + 1) = v72;
          v187 = &v79[8 * v78];
          if (v74)
            operator delete(v74);
          goto LABEL_76;
        }
      }
      else
      {
        v82 = v71;
      }
    }
    else
    {
      v82 = v71;
    }
    do
    {
      v83 = *((_QWORD *)v82 - 1);
      v82 -= 8;
      *--v80 = v83;
    }
    while (v82 != v74);
    goto LABEL_92;
  }
LABEL_104:
  v90 = v168[7];
  if (v90)
  {
    E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesSizeComponentAxis(v182, (uint64_t *)&v186, &__p, v90, v168[8], &v179);
    v91 = (uint64_t)v179;
    if (v179)
    {
LABEL_108:
      v92 = (std::__shared_weak_count *)operator new();
      v93 = (std::__shared_weak_count_vtbl *)v179;
      v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
      v92->__shared_owners_ = 0;
      v92->__shared_weak_owners_ = 0;
      v92[1].__vftable = v93;
      v94 = (uint64_t *)v168[9];
      v95 = (uint64_t *)v168[10];
      if (v94 == v95)
        goto LABEL_143;
      goto LABEL_111;
    }
  }
  else
  {
    E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesComponentAxis(v182, (uint64_t *)&v186, &__p, v168[8], &v179);
    v91 = (uint64_t)v179;
    if (v179)
      goto LABEL_108;
  }
  v92 = 0;
  v94 = (uint64_t *)v168[9];
  v95 = (uint64_t *)v168[10];
  if (v94 == v95)
    goto LABEL_143;
LABEL_111:
  v169 = v91;
  v96 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  do
  {
    v98 = *v94;
    if (v96 < v181)
    {
      *(_QWORD *)v96 = v98;
      v97 = (uint64_t)(v96 + 8);
      goto LABEL_113;
    }
    v99 = (char *)v179;
    v100 = v96 - (_BYTE *)v179;
    v101 = (v96 - (_BYTE *)v179) >> 3;
    v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v103 = v181 - (_BYTE *)v179;
    if ((v181 - (_BYTE *)v179) >> 2 > v102)
      v102 = v103 >> 2;
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
      v104 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v104 = v102;
    if (v104)
    {
      if (v104 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v105 = operator new(8 * v104);
      v106 = &v105[8 * v101];
      *v106 = v98;
      v97 = (uint64_t)(v106 + 1);
      if (v96 == v99)
        goto LABEL_129;
    }
    else
    {
      v105 = 0;
      v106 = (_QWORD *)(8 * v101);
      *(_QWORD *)(8 * v101) = v98;
      v97 = 8 * v101 + 8;
      if (v96 == v99)
        goto LABEL_129;
    }
    v107 = v96 - 8 - v99;
    if (v107 < 0x168)
    {
      v108 = v96;
      goto LABEL_128;
    }
    if (&v105[v100 - 8 - (v107 & 0xFFFFFFFFFFFFFFF8)] > &v105[v100 - 8])
    {
      v108 = v96;
      do
      {
LABEL_128:
        v109 = *((_QWORD *)v108 - 1);
        v108 -= 8;
        *--v106 = v109;
      }
      while (v108 != v99);
      goto LABEL_129;
    }
    if (&v96[-(v107 & 0xFFFFFFFFFFFFFFF8) - 8] > v96 - 8)
    {
      v108 = v96;
      goto LABEL_128;
    }
    if ((unint64_t)(v96 - v105 - v100) < 0x20)
    {
      v108 = v96;
      goto LABEL_128;
    }
    v110 = (v107 >> 3) + 1;
    v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
    v108 = &v96[-v111];
    v106 = (_QWORD *)((char *)v106 - v111);
    v112 = &v105[8 * v101 - 16];
    v113 = v96 - 16;
    v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v115 = *(_OWORD *)v113;
      *(v112 - 1) = *((_OWORD *)v113 - 1);
      *v112 = v115;
      v112 -= 2;
      v113 -= 32;
      v114 -= 4;
    }
    while (v114);
    if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_128;
LABEL_129:
    v179 = v106;
    v180 = v97;
    v181 = &v105[8 * v104];
    if (v99)
      operator delete(v99);
LABEL_113:
    v180 = v97;
    ++v94;
    v96 = (char *)v97;
  }
  while (v94 != v95);
  v91 = v169;
  E5RT::TensorDescriptor::SetDefaultTensorShape(v169, (uint64_t)&v179);
  if (v179)
  {
    v180 = (uint64_t)v179;
    operator delete(v179);
  }
LABEL_143:
  if ((_QWORD)v186)
  {
    *((_QWORD *)&v186 + 1) = v186;
    operator delete((void *)v186);
  }
  v10 = v166;
  a5 = v167;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v182);
  v116 = v173;
  v172 = v91;
  v173 = v92;
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
LABEL_185:
  LODWORD(v182[0]) = 0;
  v146 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v171 + 40))(*(_QWORD *)v171);
  if ((v146 & 8) != 0)
  {
    LODWORD(v182[0]) = 0;
  }
  else
  {
    if (v146 == 18)
    {
      v147 = 2;
    }
    else
    {
      if (v146 != 17)
      {
        std::operator+<char>();
        v165 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v186, "LoadOperandInfo");
        E5RT::Status::Status(&v179, 1, &__p);
        E5RT::E5RTError::E5RTError(v165, &v186, &v179);
      }
      v147 = 1;
    }
    LODWORD(v182[0]) = v147;
  }
  v148 = (std::string *)operator new(0x98uLL);
  v148->__r_.__value_.__l.__size_ = 0;
  p_size = &v148->__r_.__value_.__l.__size_;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB5C80;
  std::allocator<E5RT::E5OperandImpl>::construct[abi:ne180100]<E5RT::E5OperandImpl,std::string &,std::shared_ptr<E5RT::ComputeProgramSymbol const>,E5RT::AllocType &,unsigned long &,std::shared_ptr<E5RT::OperandDescriptor> &,std::unordered_set<std::string> const&>((uint64_t)&__p, (uint64_t)&v148[1], (uint64_t)&v177, v171, (unsigned int *)v182, &v178, (uint64_t *)&v172, v170);
  *(_QWORD *)&v186 = v148 + 1;
  *((_QWORD *)&v186 + 1) = v148;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    __p = v177;
  p_p = v148 + 1;
  v185 = (std::__shared_weak_count *)v148;
  do
    v150 = __ldxr(p_size);
  while (__stxr(v150 + 1, p_size));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<E5RT::E5OperandImpl const>>>(v10, (uint64_t)&__p, (uint64_t)&__p);
  v151 = v185;
  if (!v185)
    goto LABEL_201;
  v152 = (unint64_t *)&v185->__shared_owners_;
  do
    v153 = __ldaxr(v152);
  while (__stlxr(v153 - 1, v152));
  if (!v153)
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_202:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_201:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_202;
  }
  *(_OWORD *)a5 = v186;
  v154 = v173;
  if (v173)
  {
    v155 = (unint64_t *)&v173->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v174;
  if (v174)
  {
    E5RT_FB::OperandUnion::Reset((unsigned __int8 *)v174);
    MEMORY[0x19401CD90](v157, 0x1080C403DA8C3A5);
  }
  v158 = v176;
  if (!v176)
    goto LABEL_214;
  v159 = (unint64_t *)&v176->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
LABEL_215:
      operator delete(v177.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_214:
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_215;
  }
}

void sub_190DF2B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, unsigned __int8 *a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  E5RT::Status::~Status((E5RT::Status *)&a33);
  if (*(char *)(v46 - 121) < 0)
  {
    operator delete(*(void **)(v46 - 144));
    if ((v45 & 1) == 0)
    {
LABEL_6:
      if (a43 < 0)
        operator delete(__p);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::unique_ptr<E5RT_FB::OperandDescT>::~unique_ptr[abi:ne180100](&a20);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
      if (a30 < 0)
      {
        operator delete(a25);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

void sub_190DF2F44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetMinorVersion(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 1) + 4);
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetMajorVersion(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 1) + 2);
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A048;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A048;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A048;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  JUMPOUT(0x19401CD90);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<E5RT::E5OperandImpl const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x38uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(_QWORD *)v14 = *v29;
LABEL_89:
      *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v28 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190DF345C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::OperandDescT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  v13 = 257;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (v3 >= 0x7FFFFFFB)
    sub_19101237C();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v12, v10);
}

void sub_190DF35A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t E5RT_FB::OperandDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v25;
  uint64_t v26;
  int v27;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40) + 1;
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20))
    return 0;
  v15 = (unint64_t)&v3[-v11];
  if ((((_DWORD)v3 - (_DWORD)v11) & 1) != 0)
  {
    if (v4 || v7 - 2 < v15)
      return 0;
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1)
    return 0;
  v9 = v7 >= v16;
  v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    return 0;
  v21 = v19[2];
  if (v19[2])
  {
    if (v20 < 7 || v7 - 1 < (unint64_t)&v3[v21])
      return 0;
  }
  else if (v20 < 7)
  {
    return 0;
  }
  v22 = v19[3];
  if (!v22)
    return 0;
  v23 = (unint64_t)&v3[v22];
  v25 = (v23 & 3) == 0 || v4 == 0;
  if (v8 < v23 || !v25)
    return 0;
  v26 = *(unsigned int *)(v2 + v23);
  if ((int)v26 < 1 || v7 - 1 < v23 + v26)
    return 0;
  if (!(_DWORD)v21)
    goto LABEL_52;
  v27 = *((unsigned __int8 *)a1 + v21);
  if (v27 == 2)
  {
    if (E5RT_FB::SurfaceDesc::Verify((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2))
      goto LABEL_52;
    return 0;
  }
  if (v27 == 1
    && (E5RT_FB::TensorDesc::Verify((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2) & 1) == 0)
  {
    return 0;
  }
LABEL_52:
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t E5RT_FB::VerifySizePrefixedOperandDescBuffer(unsigned int **a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (v3 = v1 - 4 == **a1) : (v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::OperandDesc::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

uint64_t E5RT::E5OperandImpl::E5OperandImpl(uint64_t a1, __int128 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  __int128 v15;

  v14 = E5RT::E5Operand::E5Operand((_QWORD *)a1);
  E5RT::E5OperandBuilder::E5OperandBuilder(v14 + 1);
  *(_QWORD *)a1 = &off_1E2D59C88;
  *(_QWORD *)(a1 + 8) = &unk_1E2D59D00;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v15;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a6;
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  std::unordered_set<std::string>::unordered_set(a1 + 72, a7);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return a1;
}

void sub_190DF392C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190DF3968(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190DF3A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190DF3AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5Operand::E5Operand(_QWORD *this)
{
  *this = off_1E2D5BF68;
  return this;
}

_QWORD *E5RT::E5OperandBuilder::E5OperandBuilder(_QWORD *this)
{
  *this = off_1E2D5ACE8;
  return this;
}

_QWORD *E5RT_FB::UnPackSizePrefixedOperandDesc@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  _QWORD *result;
  _QWORD *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = (int *)(a1 + 4 + *(unsigned int *)(a1 + 4));
  result = (_QWORD *)operator new();
  v5 = result;
  *result = 0;
  result[1] = 0;
  v6 = (unsigned __int16 *)((char *)v3 - *v3);
  v7 = *v6;
  if (v7 < 5)
    goto LABEL_4;
  v8 = v6[2];
  if (v6[2])
  {
    *(_BYTE *)result = *((_BYTE *)v3 + v8);
    if (v7 < 7)
    {
LABEL_4:
      *a2 = result;
      return result;
    }
  }
  else
  {
    *(_BYTE *)result = 0;
    if (v7 < 7)
      goto LABEL_4;
  }
  v9 = v6[3];
  if (!v9)
    goto LABEL_4;
  if ((_DWORD)v8)
    v10 = *((unsigned __int8 *)v3 + v8);
  else
    v10 = 0;
  result = (_QWORD *)E5RT_FB::OperandUnion::UnPack((int *)((char *)v3 + v9 + *(unsigned int *)((char *)v3 + v9)), v10);
  v5[1] = result;
  *a2 = v5;
  return result;
}

void sub_190DF3BB4(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  E5RT_FB::OperandUnion::Reset(v1);
  MEMORY[0x19401CD90](v1, 0x1080C403DA8C3A5);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::OperandUnion::UnPack(int *a1, int a2)
{
  uint64_t v3;

  if (a2 == 2)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = 1;
    E5RT_FB::SurfaceDesc::UnPackTo(a1, v3);
    return v3;
  }
  if (a2 == 1)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    E5RT_FB::TensorDesc::UnPackTo(a1, (uint64_t *)v3);
    return v3;
  }
  return 0;
}

void sub_190DF3CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  MEMORY[0x19401CD90](v1, 0x1010C40AD2CAC56);
  _Unwind_Resume(a1);
}

void sub_190DF3CE8()
{
  uint64_t *v0;
  void *v1;

  v1 = (void *)v0[9];
  if (v1)
  {
    v0[10] = (uint64_t)v1;
    operator delete(v1);
  }
  sub_19101242C(v0);
}

void sub_190DF3D04()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

_QWORD *E5RT::TensorDataType::TensorDataType(_QWORD *a1, int a2, unsigned int a3)
{
  _DWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2D5A048;
  a1[1] = 0;
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, a2, a3);
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return a1;
}

{
  _DWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2D5A048;
  a1[1] = 0;
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, a2, a3);
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return a1;
}

void sub_190DF3DA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

E5RT::TensorDataType *E5RT::TensorDataType::TensorDataType(E5RT::TensorDataType *this, const E5RT::TensorDataType *a2)
{
  int *v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E2D5A048;
  *((_QWORD *)this + 1) = 0;
  v3 = (int *)*((_QWORD *)a2 + 1);
  v4 = *v3;
  v5 = v3[1];
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, v4, v5);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return this;
}

{
  int *v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E2D5A048;
  *((_QWORD *)this + 1) = 0;
  v3 = (int *)*((_QWORD *)a2 + 1);
  v4 = *v3;
  v5 = v3[1];
  v6 = (_DWORD *)operator new();
  E5RT::TensorDataType::Impl::Impl(v6, v4, v5);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v6;
  if (v7)
    MEMORY[0x19401CD90](v7, 0x1000C4000313F17);
  return this;
}

void sub_190DF3E70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x19401CD90](v2, 0x1000C4000313F17);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_DWORD *E5RT::TensorDataType::Impl::Impl(_DWORD *result, int a2, unsigned int a3)
{
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  *result = a2;
  result[1] = a3;
  if (a2 == 4)
  {
    if (a3 <= 9 && ((1 << a3) & 0x207) != 0)
    {
LABEL_7:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v4, "Invalid tensor data type.");
      E5RT::Status::Status(v5, 6, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    }
  }
  else if ((a2 - 2) < 2)
  {
    goto LABEL_7;
  }
  return result;
}

void sub_190DF3F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

__n128 E5RT_FB::TensorDesc::UnPackTo(int *a1, uint64_t *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 *v57;
  __n128 *v58;
  uint64_t v59;
  __n128 v60;
  __n128 *v61;
  __n128 *v62;
  uint64_t v63;
  __n128 v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  __n128 v77;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u || (v5 = v4[2]) == 0)
  {
    if (!*a2)
      goto LABEL_14;
    *a2 = 0;
LABEL_13:
    MEMORY[0x19401CD90]();
    goto LABEL_14;
  }
  v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
  v7 = *a2;
  if (!*a2)
  {
    v51 = (_DWORD *)operator new();
    *v51 = 0;
    v52 = (unsigned __int16 *)((char *)v6 - *v6);
    v53 = *v52;
    if (v53 < 5)
      goto LABEL_83;
    v54 = v52[2];
    if (v52[2])
      LOBYTE(v54) = *((_BYTE *)v6 + v54);
    *(_BYTE *)v51 = v54;
    if (v53 < 7)
    {
LABEL_83:
      v51[1] = 0;
      v72 = *a2;
      *a2 = (uint64_t)v51;
      if (!v72)
        goto LABEL_14;
    }
    else
    {
      v55 = v52[3];
      if (v55)
      {
        v51[1] = *(int *)((char *)v6 + v55);
        v56 = *a2;
        *a2 = (uint64_t)v51;
        if (!v56)
          goto LABEL_14;
      }
      else
      {
        v51[1] = 0;
        v73 = *a2;
        *a2 = (uint64_t)v51;
        if (!v73)
          goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  v8 = (unsigned __int16 *)((char *)v6 - *v6);
  v9 = *v8;
  if (v9 <= 4)
  {
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 4) = 0;
  }
  else
  {
    v10 = v8[2];
    if (v8[2])
      LOBYTE(v10) = *((_BYTE *)v6 + v10);
    *(_BYTE *)v7 = v10;
    if (v9 < 7)
    {
      *(_DWORD *)(v7 + 4) = 0;
    }
    else
    {
      v11 = v8[3];
      if (v11)
        LODWORD(v11) = *(int *)((char *)v6 + v11);
      *(_DWORD *)(v7 + 4) = v11;
    }
  }
LABEL_14:
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 7u && (v14 = v13[3]) != 0)
  {
    v15 = *(unsigned int *)((char *)a1 + v14);
    v16 = a2[1];
    v17 = *(unsigned int *)((char *)a1 + v14 + v15);
    v18 = (a2[2] - v16) >> 3;
    if (v17 <= v18)
    {
      if (v17 < v18)
        a2[2] = v16 + 8 * v17;
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 1), v17 - v18);
      LODWORD(v17) = *(int *)((char *)a1 + v14 + v15);
    }
    if ((_DWORD)v17)
    {
      v20 = (__n128 *)a2[1];
      v21 = v17;
      if (v17 < 0xA || (unint64_t)((char *)v20 - ((char *)a1 + v14) - v15 - 4) < 0x20)
      {
        v22 = 0;
LABEL_26:
        v23 = (uint64_t *)((char *)&a1[2 * v22 + 1] + v15 + v14);
        v24 = &v20->n128_u64[v22];
        v25 = v21 - v22;
        do
        {
          v26 = *v23++;
          *v24++ = v26;
          --v25;
        }
        while (v25);
        goto LABEL_28;
      }
      v22 = v17 & 0xFFFFFFFC;
      v57 = (__n128 *)((char *)a1 + v15 + v14 + 20);
      v58 = v20 + 1;
      v59 = v21 & 0xFFFFFFFC;
      do
      {
        result = v57[-1];
        v60 = *v57;
        v58[-1] = result;
        *v58 = v60;
        v57 += 2;
        v58 += 2;
        v59 -= 4;
      }
      while (v59);
      if (v22 != v21)
        goto LABEL_26;
    }
  }
  else
  {
    v19 = a2[1];
    if (a2[2] != v19)
      a2[2] = v19;
  }
LABEL_28:
  v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 9u && (v28 = v27[4]) != 0)
  {
    v29 = *(unsigned int *)((char *)a1 + v28);
    v30 = a2[4];
    v31 = *(unsigned int *)((char *)a1 + v28 + v29);
    v32 = (a2[5] - v30) >> 3;
    if (v31 <= v32)
    {
      if (v31 < v32)
        a2[5] = v30 + 8 * v31;
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 4), v31 - v32);
      LODWORD(v31) = *(int *)((char *)a1 + v28 + v29);
    }
    if ((_DWORD)v31)
    {
      v34 = (__n128 *)a2[4];
      v35 = v31;
      if (v31 < 0xA || (unint64_t)((char *)v34 - ((char *)a1 + v28) - v29 - 4) < 0x20)
      {
        v36 = 0;
LABEL_40:
        v37 = (uint64_t *)((char *)&a1[2 * v36 + 1] + v29 + v28);
        v38 = &v34->n128_u64[v36];
        v39 = v35 - v36;
        do
        {
          v40 = *v37++;
          *v38++ = v40;
          --v39;
        }
        while (v39);
        goto LABEL_42;
      }
      v36 = v31 & 0xFFFFFFFC;
      v61 = (__n128 *)((char *)a1 + v29 + v28 + 20);
      v62 = v34 + 1;
      v63 = v35 & 0xFFFFFFFC;
      do
      {
        result = v61[-1];
        v64 = *v61;
        v62[-1] = result;
        *v62 = v64;
        v61 += 2;
        v62 += 2;
        v63 -= 4;
      }
      while (v63);
      if (v36 != v35)
        goto LABEL_40;
    }
  }
  else
  {
    v33 = a2[4];
    if (a2[5] != v33)
      a2[5] = v33;
  }
LABEL_42:
  v41 = (unsigned __int16 *)((char *)a1 - *a1);
  v42 = *v41;
  if (v42 <= 0xA)
  {
    a2[7] = 0;
LABEL_53:
    a2[8] = 0;
LABEL_54:
    v50 = a2[9];
    if (a2[10] != v50)
      a2[10] = v50;
    return result;
  }
  v43 = v41[5];
  if (v41[5])
    v43 = *(_QWORD *)((char *)a1 + v43);
  a2[7] = v43;
  if (v42 < 0xD)
    goto LABEL_53;
  v44 = v41[6];
  if (v41[6])
    v44 = *(_QWORD *)((char *)a1 + v44);
  a2[8] = v44;
  if (v42 < 0xF)
    goto LABEL_54;
  v45 = v41[7];
  if (!v41[7])
    goto LABEL_54;
  v46 = *(unsigned int *)((char *)a1 + v45);
  v47 = a2[9];
  v48 = *(unsigned int *)((char *)a1 + v45 + v46);
  v49 = (a2[10] - v47) >> 3;
  if (v48 <= v49)
  {
    if (v48 < v49)
      a2[10] = v47 + 8 * v48;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 9), v48 - v49);
    LODWORD(v48) = *(int *)((char *)a1 + v45 + v46);
  }
  if ((_DWORD)v48)
  {
    v65 = (__n128 *)a2[9];
    v66 = v48;
    if (v48 < 0xA || (unint64_t)((char *)v65 - ((char *)a1 + v45) - v46 - 4) < 0x20)
    {
      v67 = 0;
LABEL_80:
      v68 = (uint64_t *)((char *)&a1[2 * v67 + 1] + v46 + v45);
      v69 = &v65->n128_u64[v67];
      v70 = v66 - v67;
      do
      {
        v71 = *v68++;
        *v69++ = v71;
        --v70;
      }
      while (v70);
      return result;
    }
    v67 = v48 & 0xFFFFFFFC;
    v74 = (__n128 *)((char *)a1 + v46 + v45 + 20);
    v75 = v65 + 1;
    v76 = v66 & 0xFFFFFFFC;
    do
    {
      result = v74[-1];
      v77 = *v74;
      v75[-1] = result;
      *v75 = v77;
      v74 += 2;
      v75 += 2;
      v76 -= 4;
    }
    while (v76);
    if (v67 != v66)
      goto LABEL_80;
  }
  return result;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t E5RT_FB::TensorDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  char *v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int *v49;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 5u)
    return 0;
  v21 = v20[2];
  if (!v21)
    return 0;
  result = 0;
  v22 = (unint64_t)&v3[v21];
  v24 = (v22 & 3) == 0 || v4 == 0;
  if (v8 >= v22 && v24)
  {
    v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v7 - 1 < v22 + v25)
      return 0;
    result = E5RT_FB::TensorDataType::Verify((int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21)), (uint64_t *)a2);
    if ((_DWORD)result)
    {
      v26 = (unsigned __int16 *)((char *)a1 - *a1);
      v27 = *v26;
      if (v27 < 7)
        return 0;
      v28 = v26[3];
      if (!v26[3])
        return 0;
      v29 = *(_QWORD *)a2;
      v30 = (char *)a1 - *(_QWORD *)a2;
      v31 = (unint64_t)&v30[v28];
      v32 = *(unsigned __int8 *)(a2 + 24);
      if (((unint64_t)&v30[v28] & 3) != 0)
      {
        if (*(_BYTE *)(a2 + 24))
          return 0;
      }
      result = 0;
      v33 = *(_QWORD *)(a2 + 8);
      if (v33 >= 5)
      {
        v34 = v33 - 4;
        if (v33 - 4 >= v31)
        {
          v35 = *(unsigned int *)(v29 + v31);
          if ((int)v35 < 1 || v33 - 1 < v31 + v35)
            return 0;
          result = 0;
          v36 = (unsigned int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28));
          v37 = (char *)v36 - v29;
          v38 = (((unint64_t)v36 - v29) & 3) == 0 || v32 == 0;
          v39 = v38;
          if (v34 >= (unint64_t)v37 && v39)
          {
            v40 = *v36;
            if (v40 > 0xFFFFFFE)
              return 0;
            result = 0;
            if (v27 < 9)
              return result;
            v41 = (8 * v40) | 4;
            if (v33 <= v41 || v33 - v41 < (unint64_t)v37)
              return result;
            v42 = v26[4];
            if (!v42)
              return 0;
            result = 0;
            v43 = (unint64_t)&v30[v42];
            v45 = (v43 & 3) == 0 || v32 == 0;
            if (v34 >= v43 && v45)
            {
              result = 0;
              v46 = *(unsigned int *)(v29 + v43);
              if ((int)v46 >= 1 && v33 - 1 >= v43 + v46)
              {
                result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, (unsigned int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42)));
                if ((_DWORD)result)
                {
                  result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xAu, 8);
                  if ((_DWORD)result)
                  {
                    result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
                    if ((_DWORD)result)
                    {
                      result = flatbuffers::Table::VerifyOffset(a1, a2, 0xEu);
                      if ((_DWORD)result)
                      {
                        v47 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v47 >= 0xFu && (v48 = v47[7]) != 0)
                          v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
                        else
                          v49 = 0;
                        result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v49);
                        if ((_DWORD)result)
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVector<unsigned long long>(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 24))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v5 = *a2;
  if (v5 > 0xFFFFFFE)
    return 0;
  v6 = (8 * v5) | 4;
  v7 = v3 > v6;
  v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t E5RT_FB::TensorDataType::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    goto LABEL_40;
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]])
    return 0;
  if (v20 < 7
    || (v21 = v19[3]) == 0
    || ((v14 = 0, v22 = (unint64_t)&v3[v21], (v22 & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (v24 = 0) : (v24 = 1),
        v7 >= v22 && v24))
  {
LABEL_40:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesAndSize@<X0>(E5RT::TensorDataType::Impl **this@<X3>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a3[1] - *a3 != a2[1] - *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "CreateTensorDescriptorWithStridesAndSize");
    std::string::basic_string[abi:ne180100]<0>(v14, "Stride and length must be specified for all dimensions.");
    E5RT::Status::Status(v15, 1, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v10 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v10, a2, a3, (E5RT::TensorDataType *)this, a4, 0);
  v11 = (_QWORD *)operator new();
  v16[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v11);
  *v11 = &off_1E2D5AD70;
  v11[1] = v10;
  *a5 = v11;
  return result;
}

void sub_190DF4C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  uint64_t v14;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_190DF4C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190DF4C98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_190DF4CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::GetElementSize(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetElementSize(this[1]);
}

uint64_t E5RT::TensorDataType::Impl::GetNumComponents(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetNumComponents");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid component pack.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_191A806F2[v1];
}

void sub_190DF4DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::GetNumComponents(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetNumComponents(this[1]);
}

_QWORD *E5RT::OperandDescriptor::OperandDescriptor(_QWORD *this)
{
  *this = &off_1E2D5AE40;
  return this;
}

{
  *this = &off_1E2D5AE40;
  return this;
}

unint64_t E5RT::TensorDescriptor::GetRank(E5RT::TensorDescriptor *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t E5RT::GetE5RTLog(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19103EAA0;
  block[3] = &unk_1E2DD0758;
  block[4] = a1;
  if (qword_1EE216648 != -1)
    dispatch_once(&qword_1EE216648, block);
  return qword_1EE216640;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOutputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 56;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::IOPort::GetPortDescriptor@<X0>(E5RT::IOPort *this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::IOPortImpl::GetPortDescriptor(*((_QWORD *)this + 1), a2);
}

uint64_t E5RT::IOPortImpl::GetPortDescriptor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  *a2 = *(_QWORD *)(this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return *((_QWORD *)this + 1) + 48;
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return **((unsigned int **)this + 1);
}

_QWORD *E5RT::IOPort::GetMemoryObject@<X0>(E5RT::IOPort *this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::IOPortImpl::GetMemoryObject(*((_QWORD **)this + 1), a2);
}

{
  return E5RT::IOPortImpl::GetMemoryObject(*((_QWORD **)this + 1), a2);
}

_QWORD *E5RT::IOPortImpl::GetMemoryObject@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void E5RT::IOPort::BindMemoryObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  E5RT::IOPortImpl::BindMemoryObject(v2, &v6, 0);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_190DF524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPorts(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetInputPorts(this[1]);
}

uint64_t E5RT::TensorDataType::GetComponentPack(E5RT::TensorDataType *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 4);
}

uint64_t E5RT::TensorDescriptor::AllocateMemory@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t Size;
  unint64_t v8;
  std::runtime_error *exception;

  Size = E5RT::TensorDescriptorImpl::GetSize(*(E5RT::TensorDescriptorImpl **)(a1 + 8));
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid argument.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (a3 + Size - 1) / a3 * a3;
  if (!v8)
    v8 = a3;
  return E5RT::BufferObject::AllocMemory(v8, a2, a4);
}

void sub_190DF531C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(_QWORD *)v14 = *v29;
LABEL_89:
      *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v28 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190DF5738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void E5RT_FB::SurfaceDesc::UnPackTo(int *a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  v5 = *v4;
  if (v5 <= 4)
  {
    *(_DWORD *)a2 = 0;
LABEL_15:
    *(_QWORD *)(a2 + 8) = 0;
LABEL_16:
    *(_QWORD *)(a2 + 16) = 0;
LABEL_17:
    v15 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a2 + 32) != v15)
      *(_QWORD *)(a2 + 32) = v15;
    goto LABEL_19;
  }
  v6 = v4[2];
  if (v4[2])
    LODWORD(v6) = *(int *)((char *)a1 + v6);
  *(_DWORD *)a2 = v6;
  if (v5 < 7)
    goto LABEL_15;
  v7 = v4[3];
  if (v4[3])
    v7 = *(_QWORD *)((char *)a1 + v7);
  *(_QWORD *)(a2 + 8) = v7;
  if (v5 < 9)
    goto LABEL_16;
  v8 = v4[4];
  if (v4[4])
    v8 = *(_QWORD *)((char *)a1 + v8);
  *(_QWORD *)(a2 + 16) = v8;
  if (v5 < 0xB)
    goto LABEL_17;
  v9 = v4[5];
  if (!v4[5])
    goto LABEL_17;
  v10 = *(unsigned int *)((char *)a1 + v9);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (uint64_t *)(a2 + 24);
  v13 = *(unsigned int *)((char *)a1 + v9 + v10);
  v14 = (*(_QWORD *)(a2 + 32) - v11) >> 3;
  if (v13 <= v14)
  {
    if (v13 < v14)
      *(_QWORD *)(a2 + 32) = v11 + 8 * v13;
  }
  else
  {
    std::vector<unsigned long long>::__append(a2 + 24, v13 - v14);
    LODWORD(v13) = *(int *)((char *)a1 + v9 + v10);
  }
  if ((_DWORD)v13)
  {
    v18 = *v12;
    v19 = v13;
    if (v13 < 0xA || (unint64_t)(v18 - ((_QWORD)a1 + v9) - v10 - 4) < 0x20)
    {
      v20 = 0;
LABEL_29:
      v21 = (uint64_t *)((char *)&a1[2 * v20 + 1] + v10 + v9);
      v22 = (_QWORD *)(v18 + 8 * v20);
      v23 = v19 - v20;
      do
      {
        v24 = *v21++;
        *v22++ = v24;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    v20 = v13 & 0xFFFFFFFC;
    v25 = (__int128 *)((char *)a1 + v10 + v9 + 20);
    v26 = (_OWORD *)(v18 + 16);
    v27 = v19 & 0xFFFFFFFC;
    do
    {
      v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v20 != v19)
      goto LABEL_29;
  }
LABEL_19:
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (v17 = v16[6]) != 0)
    *(_QWORD *)(a2 + 48) = *(_QWORD *)((char *)a1 + v17);
  else
    *(_QWORD *)(a2 + 48) = 1;
}

uint64_t E5RT_FB::SurfaceDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v30;
  uint64_t v31;
  unsigned int *v32;
  char *v33;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40) + 1;
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14)
    return 0;
  v15 = (unint64_t)&v3[-v11];
  if ((((_DWORD)v3 - (_DWORD)v11) & 1) != 0)
  {
    if (v4 || v7 - 2 < v15)
      return 0;
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1)
    return 0;
  v9 = v7 >= v16;
  v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 >= 5)
  {
    v21 = v19[2];
    if (v19[2])
    {
      v22 = &v3[v21];
      v23 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
      v24 = v23;
      if (v8 < (unint64_t)v22 || !v24)
        return 0;
    }
    if (v20 >= 7)
    {
      v25 = v19[3];
      if (v19[3])
      {
        if (((unint64_t)&v3[v25] & 7) != 0 && v4)
          return 0;
        if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v25])
          return 0;
      }
      if (v20 >= 9)
      {
        v26 = v19[4];
        if (v19[4])
        {
          if (((unint64_t)&v3[v26] & 7) != 0 && v4)
            return 0;
          if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v26])
            return 0;
        }
        if (v20 >= 0xB)
        {
          v27 = v19[5];
          if (v27)
          {
            v28 = (unint64_t)&v3[v27];
            v30 = (v28 & 3) == 0 || v4 == 0;
            if (v8 < v28 || !v30)
              return 0;
            v31 = *(unsigned int *)(v2 + v28);
            if ((int)v31 < 1 || v7 - 1 < v28 + v31)
              return 0;
            v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
            v33 = (char *)v32 - v2;
            v35 = (v33 & 3) == 0 || v4 == 0;
            if (v8 < (unint64_t)v33 || !v35)
              return 0;
            v36 = *v32;
            if (v36 > 0xFFFFFFE)
              return 0;
            v37 = (8 * v36) | 4;
            v14 = v7 > v37;
            v38 = v7 - v37;
            if (!v14 || v38 < (unint64_t)v33)
              return 0;
          }
        }
      }
    }
  }
  if (!flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8))
    return 0;
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t E5RT::IOBufferObject::GetType(E5RT::IOBufferObject *this)
{
  return 0;
}

uint64_t E5RT::BufferObject::GetBufferType(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void *E5RT::MemoryObject::TryAsSurface(void *this)
{
  if (this)
  return this;
}

{
  if (this)
  return this;
}

void E5RT_FB::ProgramT::~ProgramT(E5RT_FB::ProgramT *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)(v5 + 8) = v7;
            operator delete(v7);
          }
          MEMORY[0x19401CD90](v5, 0x10C402FEFCB83);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      v10 = (_QWORD *)v8[1];
      v11 = (_QWORD *)*v8;
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
          {
            if (*(char *)(v12 + 23) < 0)
              operator delete(*(void **)v12);
            MEMORY[0x19401CD90](v12, 0x1012C4004DB1A28);
          }
        }
        while (v10 != v9);
        v11 = (_QWORD *)*v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x19401CD90](v8, 0x20C40960023A9);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 2);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v15 != v14)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
        {
          if (*(char *)(v17 + 23) < 0)
            operator delete(*(void **)v17);
          MEMORY[0x19401CD90](v17, 0x1012C4016A3B764);
        }
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v14;
    operator delete(v16);
  }
  v19 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v19)
    MEMORY[0x19401CD90](v19, 0x1000C40B2B1FC38);
}

uint64_t E5RT::IOPortPriv::GetMaxPortDescriptor@<X0>(E5RT::IOPortPriv *this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::IOPortImpl::GetMaxPortDescriptor(*((_QWORD *)this + 1), a2);
}

uint64_t E5RT::IOPortImpl::GetMaxPortDescriptor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 40);
  *a2 = *(_QWORD *)(this + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t E5RT::ExecutionStreamOperation::PrepareOpForEncode(E5RT::ExecutionStreamOperation *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::unordered_set<std::string>>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x40uLL);
  v10 = v14;
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14[3] = v15;
  v14[4] = v16;
  v17 = *(_QWORD *)(a3 + 24);
  v14[5] = v17;
  v18 = *(_QWORD *)(a3 + 32);
  v14[6] = v18;
  *((_DWORD *)v14 + 14) = *(_DWORD *)(a3 + 40);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      v21 = v19 >= v16;
      v20 = v19 % v16;
      if (!v21)
        v20 = v19;
    }
    else
    {
      v20 = v19 & (v16 - 1);
    }
    *(_QWORD *)(v15 + 8 * v20) = v14 + 5;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v7 && (float)(v23 * (float)v7) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v25)
    {
LABEL_32:
      *v10 = *v25;
LABEL_67:
      *v25 = v10;
      goto LABEL_68;
    }
  }
  else
  {
    v26 = 1;
    if (v7 >= 3)
      v26 = (v7 & (v7 - 1)) != 0;
    v27 = v26 | (2 * v7);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_43:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v25)
          goto LABEL_32;
      }
      else
      {
        v3 = v6;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v25)
          goto LABEL_32;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v25)
        goto LABEL_32;
    }
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v3) = v13;
  if (*v10)
  {
    v34 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7)
        v34 %= v7;
    }
    else
    {
      v34 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_67;
  }
LABEL_68:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_190DF6344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(E5RT::ExecutionStreamOperation *this@<X0>, _QWORD *a2@<X8>)
{
  E5RT::ExecutionStreamOperationInternal *v4;

  E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(this, &v4);
  *a2 = v4;
}

void E5RT::E5CompilerOptions::~E5CompilerOptions(E5RT::E5CompilerOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);
  JUMPOUT(0x19401CD90);
}

E5RT::E5CompilerOptions *E5RT::E5CompilerOptions::Create@<X0>(E5RT::E5CompilerOptions **a1@<X8>)
{
  E5RT::E5CompilerOptions *v3;
  E5RT::E5CompilerOptions *result;

  v3 = (E5RT::E5CompilerOptions *)operator new();
  result = E5RT::E5CompilerOptions::E5CompilerOptions(v3);
  *a1 = v3;
  return result;
}

void sub_190DF63F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalDisableDataDependentShape(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalDisableDataDependentShape<BOOL>", 43, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190DF64D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  const void *v5;
  int64_t v6;
  char *v7;
  uint64_t result;
  void *exception;
  char *v10;
  __int128 v11;
  _BYTE v12[8];
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v5 = *(const void **)a2;
    v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v6)
      goto LABEL_3;
LABEL_8:
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = (char *)operator new(0x20uLL);
    v14 = xmmword_191A72420;
    strcpy(v13, "SetComputeDeviceTypesAllowed");
    v10 = (char *)operator new(0x30uLL);
    v11 = xmmword_191A6FFC0;
    strcpy(v10, "Cannot provide zero compute device types.");
    E5RT::Status::Status(v12, 1, &v10);
    E5RT::E5RTError::E5RTError(exception, &v13, v12);
  }
  v4 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v6)
    goto LABEL_8;
LABEL_3:
  v10 = 0;
  v11 = 0uLL;
  if (v6 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = (char *)operator new(v6);
  memcpy(v7, v5, v6);
  *((_QWORD *)&v14 + 1) = &v7[8 * (v6 >> 3)];
  v15 = *((_QWORD *)&v14 + 1);
  v11 = 0uLL;
  v10 = 0;
  v13 = (char *)std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
  *(_QWORD *)&v14 = v7;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, char **))(*(_QWORD *)v4 + 24))(v4, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62, &v13);
  if (v13)
    return ((uint64_t (*)(_QWORD, char **, _QWORD, _QWORD, _QWORD))v13)(0, &v13, 0, 0, 0);
  return result;
}

void sub_190DF6700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_190DF67A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;
  operator delete(v3);
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerOptions::SetPreferredCpuBackend(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  std::string v10;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_6:
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v10, 1uLL);
  memset(v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v11 + 1, (uint64_t)__p, (uint64_t)v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)__p) >> 3));
  *(_QWORD *)&v11[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v11);
  if (*(_QWORD *)&v11[0])
    (*(void (**)(int))&v11[0])(0);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_190DF696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void E5RT::E5CompilerImpl::Compile<MIL::IRProgram>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  std::mutex *v8;
  std::string __p;
  std::__fs::filesystem::path v10;

  v8 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(a1, a2, &v10);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__pn_.__r_.__value_.__l.__data_, v10.__pn_.__r_.__value_.__l.__size_);
  else
    __p = v10.__pn_;
  E5RT::E5CompilerImpl::CompileInternal(a1, (std::string::size_type)&__p, a3, a2, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_6:
  std::mutex::unlock(v8);
}

void sub_190DF6AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  if ((a20 & 0x80000000) == 0)
  {
    std::mutex::unlock(v20);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_190DF6B40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::ConfigOptions::~ConfigOptions(E5RT::ConfigOptions *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19401CD90);
}

void E5RT::E5Compiler::Compile(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  E5RT::E5CompilerImpl::Compile<MIL::IRProgram>(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void Espresso::cpu_context_transfer_algo_t::is_kernel_registered_on_engine(uint64_t a1, _QWORD *a2, uint64_t **a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v6 = **a3;
  v54 = *a3;
  if ((*a3)[1] != v6)
  {
    v8 = 0;
    v9 = (_QWORD *)(a6 + 8);
    do
    {
      v10 = *(_OWORD *)(*a2 + 16 * v8);
      v61 = v10;
      if (*((_QWORD *)&v10 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v6 = *v54;
        v59 = v10;
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
      }
      else
      {
        v59 = (unint64_t)v10;
      }
      v14 = (std::__shared_weak_count *)a4[1];
      v57 = *a4;
      v58 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      Espresso::create_kernel_for_engine(&v60, v6 + 224 * v8, (uint64_t *)&v59, &v57, a5);
      v17 = v6 + 224 * v8 + 88;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v17, &v60);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v58;
      if (v58)
      {
        v22 = (unint64_t *)&v58->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (*((_QWORD *)&v59 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (*(_QWORD *)v17 && *(_BYTE *)(*a4 + 72))
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)v17 + 224), *(_QWORD *)(*a2 + 16 * v8), *(_QWORD *)(*a2 + 16 * v8 + 8));
      v56 = v6;
      v27 = (_QWORD *)(v6 + 224 * v8);
      v28 = v27 + 20;
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v27 + 20);
      v29 = v27 + 23;
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v27 + 23);
      v31 = (_QWORD *)v27[17];
      v30 = (_QWORD *)v27[18];
      if (v31 != v30)
      {
        v32 = v56 + 224 * v8;
        v33 = (uint64_t *)(v32 + 192);
        v34 = (_QWORD *)(v32 + 200);
        while (1)
        {
          v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a6, v31);
          if (v9 == v35)
            break;
          v36 = (__int128 *)(v35 + 7);
          v37 = *v33;
          if ((unint64_t)*v33 >= *v34)
          {
            v38 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v29, v36);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v29, v36);
            v38 = v37 + 64;
          }
          *v33 = v38;
          v31 += 3;
          if (v31 == v30)
            goto LABEL_40;
        }
        std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v29);
      }
LABEL_40:
      v39 = v56 + 224 * v8;
      v41 = *(_QWORD **)(v39 + 112);
      v40 = *(_QWORD **)(v39 + 120);
      if (v41 != v40)
      {
        v42 = v56 + 224 * v8;
        v43 = (uint64_t *)(v42 + 168);
        v44 = (_QWORD *)(v42 + 176);
        while (1)
        {
          v45 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a6, v41);
          if (v9 == v45)
            break;
          v46 = (__int128 *)(v45 + 7);
          v47 = *v43;
          if ((unint64_t)*v43 >= *v44)
          {
            v48 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v28, v46);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v28, v46);
            v48 = v47 + 64;
          }
          *v43 = v48;
          v41 += 3;
          if (v41 == v40)
            goto LABEL_49;
        }
        std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v28);
      }
LABEL_49:
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (*((_QWORD *)&v61 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      ++v8;
      v6 = *v54;
    }
    while (v8 < 0x6DB6DB6DB6DB6DB7 * ((v54[1] - *v54) >> 5));
  }
}

void sub_190DF6F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::create_kernel_for_engine(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int **v10;
  int is_kernel_supported;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v21;
  __n128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void **v26;
  NSString *v27;
  Class v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *__p;
  char v48;
  void *v49[2];
  uint64_t v50;

  Espresso::abstract_engine_factory::shared(&v45);
  v10 = (int **)(a2 + 48);
  is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v45, (uint64_t)a4, a2 + 48);
  v12 = is_kernel_supported;
  v13 = v46;
  if (!v46)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_5:
    if (is_kernel_supported)
      goto LABEL_6;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v12)
    goto LABEL_10;
LABEL_6:
  v16 = *(char *)(a2 + 71);
  if ((v16 & 0x80000000) == 0)
  {
    v17 = (int *)(a2 + 48);
    if (v16 != 5)
      goto LABEL_32;
LABEL_13:
    v18 = *v17;
    v19 = *((unsigned __int8 *)v17 + 4);
    if (v18 == 1667854946 && v19 == 107)
    {
      v49[0] = 0;
      v49[1] = 0;
      v50 = 0;
      v21 = *a3;
      std::string::basic_string[abi:ne180100]<0>(v43, "class_name");
      Espresso::SerDes::generic_serdes_object::operator[](v21, (uint64_t)v43, &v45);
      v22.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v45, (uint64_t)v49);
      if (v48 < 0)
        operator delete(__p);
      v23 = v46;
      if (v46)
      {
        v24 = (unint64_t *)&v46->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v22);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v44 < 0)
        operator delete(v43[0]);
      if (v50 >= 0)
        v26 = v49;
      else
        v26 = (void **)v49[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v26, v22.n128_f64[0]);
      v27 = (NSString *)objc_claimAutoreleasedReturnValue();
      v28 = NSClassFromString(v27);

      +[EspressoBrickRegistry registerBrickClass:](EspressoBrickRegistry, "registerBrickClass:", v28);
      if (SHIBYTE(v50) < 0)
        operator delete(v49[0]);
    }
    goto LABEL_32;
  }
  if (*(_QWORD *)(a2 + 56) == 5)
  {
    v17 = *v10;
    goto LABEL_13;
  }
LABEL_32:
  v29 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v45, (uint64_t)v29, v10);
  v30 = v45;
  v31 = *a3;
  v32 = (std::__shared_weak_count *)a4[1];
  v41 = *a4;
  v42 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v30 + 16))(v30, v31, &v41, a5);
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_190DF71DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  Espresso::generic_factory_t::get_(a2, a3, &lpsrc);
  if (lpsrc
  {
    v5 = v11;
    *a1 = v4;
    a1[1] = v5;
    if (!v5)
      return;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v5 = v11;
    if (!v11)
      return;
  }
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void Espresso::generic_factory_t::get_(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v9 = *(_QWORD **)(a1 + 104);
  v7 = (_QWORD *)(a1 + 104);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v13 = v10[8];
    *a3 = v10[7];
    a3[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  std::mutex::unlock(v6);
}

void *Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared()
{
  uint64_t v0;
  const void *v1;
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "layer_io_base");
  v0 = Espresso::generic_factory_t::shared((uint64_t)__p, &__block_literal_global_357);
  v1 = (const void *)v0;
  if (v4 < 0)
  {
    operator delete(__p[0]);
    if (v1)
  }
  else if (v0)
  {
  }
  return 0;
}

uint64_t Espresso::generic_factory_t::shared(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD block[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (Espresso::onceToken != -1)
    dispatch_once(&Espresso::onceToken, &__block_literal_global_4977);
  v4 = Espresso::factory_queue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN8Espresso17generic_factory_t6sharedERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEU13block_pointerFNS1_10shared_ptrIS0_EEvE_block_invoke_2;
  block[3] = &unk_1E2DD36B8;
  v9 = v3;
  v10 = &v12;
  v11 = a1;
  v5 = v3;
  dispatch_sync(v4, block);
  v6 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v6;
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;

  v40 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_190DF7694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::layer_shape>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 6)
  {
    v2 = result;
    if (a2 >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + (v4 << 6);
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t *std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 64;
      v6 = *(_OWORD *)(v3 - 48);
      v7 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v4 - 32) = v7;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::layer_shape>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  int v17;

  v17 = a4;
  v14[0] = 0;
  v14[1] = 1065353216;
  v14[2] = 897988541;
  v15 = 0;
  v16 = 0;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DF7940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v19 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v20 = _D0;
  v21 = 0;
  v23 = 0;
  v22 = 0;
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_190DF7A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::activation_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  float v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  char v50;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v47 + 160))(v47, __p, a2);
    if (v50 < 0)
      operator delete(__p[0]);
    v5 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    if (*(float *)(a2 + 4) != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v47 + 216))(v47, __p, a2 + 4);
      if (v50 < 0)
        operator delete(__p[0]);
      v8 = v48;
      if (v48)
      {
        v9 = (unint64_t *)&v48->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v46 < 0)
        operator delete(v45[0]);
    }
    v12 = *(float *)(a2 + 8);
    v11 = a2 + 8;
    if (v12 != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v47 + 216))(v47, __p, v11);
      if (v50 < 0)
        operator delete(__p[0]);
      v13 = v48;
      if (v48)
      {
        v14 = (unint64_t *)&v48->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v46 < 0)
        operator delete(v45[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v47 + 40))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v16 = v48;
    if (v48)
    {
      v17 = (unint64_t *)&v48->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v47 + 96))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v19 = v48;
    if (v48)
    {
      v20 = (unint64_t *)&v48->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v47 + 96))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v22 = v48;
    if (v48)
    {
      v23 = (unint64_t *)&v48->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "is_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      v25 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v47 + 40))(v47, __p);
    else
      v25 = 0;
    if (v50 < 0)
      operator delete(__p[0]);
    v26 = v48;
    if (v48)
    {
      v27 = (unint64_t *)&v48->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "is_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      v29 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v47 + 40))(v47, __p);
    else
      v29 = 0;
    if (v50 < 0)
      operator delete(__p[0]);
    v30 = v48;
    if (v48)
    {
      v31 = (unint64_t *)&v48->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "leaky_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    v33 = 0.0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      v33 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v47 + 96))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    v37 = 1.0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      v37 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v47 + 96))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v38 = v48;
    if (v48)
    {
      v39 = (unint64_t *)&v48->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    std::string::basic_string[abi:ne180100]<0>(v45, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    v41 = 1.0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 24))(v47, __p))
      v41 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v47 + 96))(v47, __p);
    if (v50 < 0)
      operator delete(__p[0]);
    v42 = v48;
    if (v48)
    {
      v43 = (unint64_t *)&v48->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v46 < 0)
      operator delete(v45[0]);
    if (v25)
    {
      *(_DWORD *)a2 = 0;
      if (v33 != 0.0)
      {
        *(_DWORD *)a2 = 2;
        *(float *)(a2 + 4) = v33;
      }
    }
    if (v29)
    {
      *(_DWORD *)a2 = 1;
      if (v37 != 1.0 || v41 != 1.0)
      {
        *(_DWORD *)a2 = 5;
        *(float *)(a2 + 4) = v37;
        *(float *)(a2 + 8) = v41;
      }
    }
  }
}

void sub_190DF8294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[10];
  __int16 v15;
  char v16;
  int v17;

  v17 = a4;
  v16 = 0;
  v15 = 0;
  v14[0] = 0;
  v14[8] = 0;
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DF8400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::concat_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "force_num_channels_of_first_blob");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_WORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 64))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 60) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_60;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_58;
  }
  if (*(_WORD *)(a2 + 40))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "force_num_channels_of_first_blob");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 184))(v25, __p, a2 + 40);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      v6 = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  if (*(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(unsigned __int8 *)(a2 + 60);
  v11 = a2 + 60;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_60;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_58:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_60:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_190DF8820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  unint64_t v15;
  int v16;

  v16 = a4;
  v14 = xmmword_191A8AA80;
  v15 = 0xFFFFFFFF00000001;
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DF896C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::load_constant_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v25 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v28 = v44;
    if (v44)
    {
      v29 = (unint64_t *)&v44->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v31 = v44;
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v37 = v44;
    if (v44)
    {
      v38 = (unint64_t *)&v44->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[5] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_119;
    v40 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v40);
    while (__stlxr(v24 - 1, v40));
    goto LABEL_117;
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2);
  if (v46 < 0)
    operator delete(__p[0]);
  v5 = v44;
  if (v44)
  {
    v6 = (unint64_t *)&v44->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v41, "h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 1);
  if (v46 < 0)
    operator delete(__p[0]);
  v8 = v44;
  if (v44)
  {
    v9 = (unint64_t *)&v44->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v41, "k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 2);
  if (v46 < 0)
    operator delete(__p[0]);
  v11 = v44;
  if (v44)
  {
    v12 = (unint64_t *)&v44->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v41, "n");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 3);
  if (v46 < 0)
    operator delete(__p[0]);
  v14 = v44;
  if (v44)
  {
    v15 = (unint64_t *)&v44->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (a2[4] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 4);
    if (v46 < 0)
      operator delete(__p[0]);
    v17 = v44;
    if (v44)
    {
      v18 = (unint64_t *)&v44->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  v21 = a2[5];
  v20 = a2 + 5;
  if (v21 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, v20);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_119;
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_117:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_119:
    if (v42 < 0)
      operator delete(v41[0]);
  }
}

void sub_190DF914C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v16 = a4;
  v14 = xmmword_191A93790;
  v15 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190DF92C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::slice_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v25 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "start");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v28 = v44;
    if (v44)
    {
      v29 = (unint64_t *)&v44->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "end");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v31 = v44;
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "stride");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v37 = v44;
    if (v44)
    {
      v38 = (unint64_t *)&v44->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "static_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      a2[5] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_120;
    v40 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v40);
    while (__stlxr(v24 - 1, v40));
    goto LABEL_118;
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2);
  if (v46 < 0)
    operator delete(__p[0]);
  v5 = v44;
  if (v44)
  {
    v6 = (unint64_t *)&v44->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v41, "start");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 1);
  if (v46 < 0)
    operator delete(__p[0]);
  v8 = v44;
  if (v44)
  {
    v9 = (unint64_t *)&v44->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v41, "end");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 2);
  if (v46 < 0)
    operator delete(__p[0]);
  v11 = v44;
  if (v44)
  {
    v12 = (unint64_t *)&v44->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (a2[3] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "stride");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 3);
    if (v46 < 0)
      operator delete(__p[0]);
    v14 = v44;
    if (v44)
    {
      v15 = (unint64_t *)&v44->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (a2[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 4);
    if (v46 < 0)
      operator delete(__p[0]);
    v17 = v44;
    if (v44)
    {
      v18 = (unint64_t *)&v44->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  v21 = a2[5];
  v20 = a2 + 5;
  if (v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "static_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v43 + 160))(v43, __p, v20);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_120;
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_118:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_120:
    if (v42 < 0)
      operator delete(v41[0]);
  }
}

void sub_190DF9AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_190DF9C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  void *v149[2];
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void *__p[2];
  char v154;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "nC");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 48))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v79 = v152;
    if (v152)
    {
      p_shared_owners = (unint64_t *)&v152->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "nB");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 48))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v82 = v152;
    if (v152)
    {
      v83 = (unint64_t *)&v152->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "has_biases");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v85 = v152;
    if (v152)
    {
      v86 = (unint64_t *)&v152->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "has_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v88 = v152;
    if (v152)
    {
      v89 = (unint64_t *)&v152->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "has_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v91 = v152;
    if (v152)
    {
      v92 = (unint64_t *)&v152->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "has_prelu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v94 = v152;
    if (v152)
    {
      v95 = (unint64_t *)&v152->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "is_lookup");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v97 = v152;
    if (v152)
    {
      v98 = (unint64_t *)&v152->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "add_to_output");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v100 = v152;
    if (v152)
    {
      v101 = (unint64_t *)&v152->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "use_raw_buffers");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v103 = v152;
    if (v152)
    {
      v104 = (unint64_t *)&v152->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v106 = v152;
    if (v152)
    {
      v107 = (unint64_t *)&v152->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(float *)(a2 + 20) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v151 + 96))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v109 = v152;
    if (v152)
    {
      v110 = (unint64_t *)&v152->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(float *)(a2 + 24) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v151 + 96))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v112 = v152;
    if (v152)
    {
      v113 = (unint64_t *)&v152->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "argmax_tree_n_clusters");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v115 = v152;
    if (v152)
    {
      v116 = (unint64_t *)&v152->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "argmax_tree_n_clusters_keep");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 104) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v118 = v152;
    if (v152)
    {
      v119 = (unint64_t *)&v152->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "sparse_block_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 108) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v121 = v152;
    if (v152)
    {
      v122 = (unint64_t *)&v152->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "sparse_block_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 112) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v124 = v152;
    if (v152)
    {
      v125 = (unint64_t *)&v152->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_BYTE *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 88))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v127 = v152;
    if (v152)
    {
      v128 = (unint64_t *)&v152->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 116) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v130 = v152;
    if (v152)
    {
      v131 = (unint64_t *)&v152->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "compute_every");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 120) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v133 = v152;
    if (v152)
    {
      v134 = (unint64_t *)&v152->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v136 = v152;
    if (v152)
    {
      v137 = (unint64_t *)&v152->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(float *)(a2 + 56) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v151 + 96))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v139 = v152;
    if (v152)
    {
      v140 = (unint64_t *)&v152->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(float *)(a2 + 60) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v151 + 96))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v142 = v152;
    if (v152)
    {
      v143 = (unint64_t *)&v152->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "is_lookup_rounds_to_nearest");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 124) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v145 = v152;
    if (v152)
    {
      v146 = (unint64_t *)&v152->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::string::basic_string[abi:ne180100]<0>(v149, "disable_bnns_client_ptr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, __p))
      *(_DWORD *)(a2 + 128) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v151 + 40))(v151, __p);
    if (v154 < 0)
      operator delete(__p[0]);
    v76 = v152;
    if (!v152)
      goto LABEL_495;
    v148 = (unint64_t *)&v152->__shared_owners_;
    do
      v78 = __ldaxr(v148);
    while (__stlxr(v78 - 1, v148));
    goto LABEL_493;
  }
  std::string::basic_string[abi:ne180100]<0>(v149, "nC");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 168))(v151, __p, a2);
  if (v154 < 0)
    operator delete(__p[0]);
  v5 = v152;
  if (v152)
  {
    v6 = (unint64_t *)&v152->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  std::string::basic_string[abi:ne180100]<0>(v149, "nB");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 168))(v151, __p, a2 + 4);
  if (v154 < 0)
    operator delete(__p[0]);
  v8 = v152;
  if (v152)
  {
    v9 = (unint64_t *)&v152->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  std::string::basic_string[abi:ne180100]<0>(v149, "has_biases");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 8);
  if (v154 < 0)
    operator delete(__p[0]);
  v11 = v152;
  if (v152)
  {
    v12 = (unint64_t *)&v152->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  std::string::basic_string[abi:ne180100]<0>(v149, "has_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 12);
  if (v154 < 0)
    operator delete(__p[0]);
  v14 = v152;
  if (v152)
  {
    v15 = (unint64_t *)&v152->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  std::string::basic_string[abi:ne180100]<0>(v149, "has_tanh");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 16);
  if (v154 < 0)
    operator delete(__p[0]);
  v17 = v152;
  if (v152)
  {
    v18 = (unint64_t *)&v152->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  std::string::basic_string[abi:ne180100]<0>(v149, "has_prelu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 28);
  if (v154 < 0)
    operator delete(__p[0]);
  v20 = v152;
  if (v152)
  {
    v21 = (unint64_t *)&v152->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v150 < 0)
    operator delete(v149[0]);
  if (*(_DWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "is_lookup");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 32);
    if (v154 < 0)
      operator delete(__p[0]);
    v23 = v152;
    if (v152)
    {
      v24 = (unint64_t *)&v152->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 44))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "add_to_output");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 44);
    if (v154 < 0)
      operator delete(__p[0]);
    v26 = v152;
    if (v152)
    {
      v27 = (unint64_t *)&v152->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "use_raw_buffers");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 48);
    if (v154 < 0)
      operator delete(__p[0]);
    v29 = v152;
    if (v152)
    {
      v30 = (unint64_t *)&v152->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 36))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 36);
    if (v154 < 0)
      operator delete(__p[0]);
    v32 = v152;
    if (v152)
    {
      v33 = (unint64_t *)&v152->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(float *)(a2 + 20) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 216))(v151, __p, a2 + 20);
    if (v154 < 0)
      operator delete(__p[0]);
    v35 = v152;
    if (v152)
    {
      v36 = (unint64_t *)&v152->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(float *)(a2 + 24) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 216))(v151, __p, a2 + 24);
    if (v154 < 0)
      operator delete(__p[0]);
    v38 = v152;
    if (v152)
    {
      v39 = (unint64_t *)&v152->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 100))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "argmax_tree_n_clusters");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 100);
    if (v154 < 0)
      operator delete(__p[0]);
    v41 = v152;
    if (v152)
    {
      v42 = (unint64_t *)&v152->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 104))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "argmax_tree_n_clusters_keep");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 104);
    if (v154 < 0)
      operator delete(__p[0]);
    v44 = v152;
    if (v152)
    {
      v45 = (unint64_t *)&v152->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 108))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "sparse_block_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 108);
    if (v154 < 0)
      operator delete(__p[0]);
    v47 = v152;
    if (v152)
    {
      v48 = (unint64_t *)&v152->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 112))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "sparse_block_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 112);
    if (v154 < 0)
      operator delete(__p[0]);
    v50 = v152;
    if (v152)
    {
      v51 = (unint64_t *)&v152->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 208))(v151, __p, a2 + 40);
    if (v154 < 0)
      operator delete(__p[0]);
    v53 = v152;
    if (v152)
    {
      v54 = (unint64_t *)&v152->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 116))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 116);
    if (v154 < 0)
      operator delete(__p[0]);
    v56 = v152;
    if (v152)
    {
      v57 = (unint64_t *)&v152->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "compute_every");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 120);
    if (v154 < 0)
      operator delete(__p[0]);
    v59 = v152;
    if (v152)
    {
      v60 = (unint64_t *)&v152->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 52) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 52);
    if (v154 < 0)
      operator delete(__p[0]);
    v62 = v152;
    if (v152)
    {
      v63 = (unint64_t *)&v152->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(float *)(a2 + 56) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 216))(v151, __p, a2 + 56);
    if (v154 < 0)
      operator delete(__p[0]);
    v65 = v152;
    if (v152)
    {
      v66 = (unint64_t *)&v152->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(float *)(a2 + 60) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "fused_activation_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 216))(v151, __p, a2 + 60);
    if (v154 < 0)
      operator delete(__p[0]);
    v68 = v152;
    if (v152)
    {
      v69 = (unint64_t *)&v152->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  if (*(_DWORD *)(a2 + 124))
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "is_lookup_rounds_to_nearest");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, a2 + 124);
    if (v154 < 0)
      operator delete(__p[0]);
    v71 = v152;
    if (v152)
    {
      v72 = (unint64_t *)&v152->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v150 < 0)
      operator delete(v149[0]);
  }
  v75 = *(_DWORD *)(a2 + 128);
  v74 = a2 + 128;
  if (v75)
  {
    std::string::basic_string[abi:ne180100]<0>(v149, "disable_bnns_client_ptr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v149, &v151);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v151 + 160))(v151, __p, v74);
    if (v154 < 0)
      operator delete(__p[0]);
    v76 = v152;
    if (!v152)
      goto LABEL_495;
    v77 = (unint64_t *)&v152->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
LABEL_493:
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
LABEL_495:
    if (v150 < 0)
      operator delete(v149[0]);
  }
}

void sub_190DFBBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::read(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  char v20[32];
  __int128 v21;
  uint64_t v22;
  int v23;

  v23 = a4;
  v14 = 0;
  v15 = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v21 = 0u;
  v22 = 0;
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  __p[0] = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v20[8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v20[7] < 0)
    operator delete(v19[0]);
  if (v17[1])
  {
    *(void **)&v18 = v17[1];
    operator delete(v17[1]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
}

void sub_190DFBEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::dev_op_params_t::~dev_op_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::query_dilation_options(uint64_t a1, int a2, int a3, char *a4, _BYTE *a5, void *a6)
{
  id v11;
  int v12;
  void *v13;
  Espresso::ANECompilerEngine::sparsity_options *v14;
  const NSDictionary *v15;
  BOOL v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  unsigned int v27;
  std::string *v28;
  __int128 v29;
  void *v30;
  char v31;
  char v32;
  char *v33;
  char v34;
  void *__p;
  _BYTE v36[15];
  char v37;
  std::string v38;
  std::string v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v11 = a6;
  *a4 = 0;
  *a5 = 0;
  v12 = Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a1, v11);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v14 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  v16 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v14, v15);
  if (!v12)
  {
    v17 = 1;
    goto LABEL_29;
  }
  v17 = 0;
  v18 = *(__int16 *)(a1 + 96);
  v19 = *(__int16 *)(a1 + 98);
  v20 = v19 < 2 && v18 < 2;
  if (!v20 && a2)
  {
    v21 = (*(_DWORD *)(a1 + 48) - 1) * v18 + 1;
    if (a3 == 4 || a3 == 2)
    {
      if (v21 >= 0x1E)
      {
        std::to_string(&v38, v21);
        v25 = std::string::insert(&v38, 0, "Filter width of ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v39, " exceeds max filter width in S/Int8.");
        goto LABEL_17;
      }
    }
    else
    {
      if (a3 != 1)
      {
        v32 = 0;
        v33 = "Invalid compute path.";
        goto LABEL_23;
      }
      if (v21 >= 0xE)
      {
        std::to_string(&v38, v21);
        v22 = std::string::insert(&v38, 0, "Filter width of ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v39, " exceeds max filter width in fp16.");
LABEL_17:
        v30 = (void *)v24->__r_.__value_.__r.__words[0];
        v40[0] = v24->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
        v31 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v34 = 0;
        *(_QWORD *)&v36[7] = *(_QWORD *)((char *)v40 + 7);
        __p = v30;
        *(_QWORD *)v36 = v40[0];
        v37 = v31;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        goto LABEL_24;
      }
    }
    v27 = (*(_DWORD *)(a1 + 52) - 1) * v19 + 1;
    if (v27 >= 0x1E)
    {
      std::to_string(&v38, v27);
      v28 = std::string::insert(&v38, 0, "Filter height of ");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v39, " exceeds max filter height.");
      goto LABEL_17;
    }
    v33 = "Success";
    v32 = 1;
LABEL_23:
    v34 = v32;
    std::string::basic_string[abi:ne180100]<0>(&__p, v33);
LABEL_24:
    if (v37 < 0)
      operator delete(__p);
    if (v34)
      v17 = 1;
    else
      v17 = v12 ^ 1;
  }
LABEL_29:
  *a4 = v17;
  *a5 = (v12 ^ 1) & !v16;

}

void sub_190DFC200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;

  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);

  _Unwind_Resume(a1);
}

BOOL Espresso::is_valid_kernel_input_size(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const Espresso::net *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  BOOL v33;
  _BOOL4 v34;
  _BOOL8 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  int v42;
  int v43;
  char v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  int v49;
  char v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD v61[2];
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  const Espresso::net *v66;
  std::__shared_weak_count *v67;
  char v68[32];
  _OWORD v69[2];
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  const Espresso::net *v74;
  std::__shared_weak_count *v75;
  char v76[32];
  const Espresso::net *v77;
  std::__shared_weak_count *v78;

  v6 = *((_DWORD *)a2 + 16);
  v7 = a2[6];
  v77 = 0;
  v78 = 0;
  v8 = *(std::__shared_weak_count **)(v7 + 80);
  if (v8 && (v9 = std::__shared_weak_count::lock(v8), (v78 = v9) != 0))
  {
    v10 = *(const Espresso::net **)(v7 + 72);
    v77 = v10;
    v74 = v10;
    v75 = v9;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v10 = 0;
    v74 = 0;
    v75 = 0;
  }
  v13 = *a2;
  v14 = *(_QWORD *)(*a2 + 32);
  v15 = *(_OWORD *)(*a2 + 16);
  v69[0] = *(_OWORD *)*a2;
  v69[1] = v15;
  v70 = v14;
  __p = 0;
  v72 = 0;
  v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v13 + 40), *(_QWORD *)(v13 + 48), (uint64_t)(*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v76, v10, (const Espresso::layer_shape *)v69, 1);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  v16 = v75;
  if (v75)
  {
    v17 = (unint64_t *)&v75->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = v77;
  v19 = v78;
  v66 = v77;
  v67 = v78;
  if (v78)
  {
    v21 = (unint64_t *)&v78->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a2[3];
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_OWORD *)(v23 + 16);
  v61[0] = *(_OWORD *)v23;
  v61[1] = v25;
  v62 = v24;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *(const void **)(v23 + 40), *(_QWORD *)(v23 + 48), (uint64_t)(*(_QWORD *)(v23 + 48) - *(_QWORD *)(v23 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v68, v20, (const Espresso::layer_shape *)v61, 1);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = *(_DWORD *)(a1 + 48);
  v28 = *(_DWORD *)(a1 + 52);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v77 + 472);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a1, v30) & 1) == 0)
  {
    v29 = (*(_DWORD *)(a1 + 48) - 1) * *(__int16 *)(a1 + 96) + 1;
    v28 = (*(_DWORD *)(a1 + 52) - 1) * *(__int16 *)(a1 + 98) + 1;
  }
  if (*(int *)(a1 + 116) <= 1)
    v31 = 1;
  else
    v31 = *(_DWORD *)(a1 + 116);
  if (v6 >= 2)
    v32 = 15;
  else
    v32 = 7;
  v33 = v29 > v32;
  v34 = v28 > 15;
  if (a3)
  {
    if (v28 > 15 || v29 > v32)
    {
      v35 = 0;
      goto LABEL_78;
    }
    v38 = *(__int16 *)(a1 + 92);
    v40 = *(__int16 *)(a1 + 94);
    if (v38 == 2)
    {
      if ((v29 & 1) != 0 || (v29 >= 0 ? (v41 = v29) : (v41 = v29 + 1), (v41 & 2) != 0))
      {
        v34 = 0;
        v42 = (v29 + 1) >> 1;
      }
      else
      {
        v34 = 0;
        v42 = (v29 >> 1) + 1;
      }
      v39 = 1;
      v38 = 2;
      v37 = *(__int16 *)(a1 + 94);
      v36 = 1;
      goto LABEL_56;
    }
    v34 = 0;
    v33 = 0;
    v39 = 1;
    v37 = *(__int16 *)(a1 + 94);
    v36 = 1;
  }
  else
  {
    v36 = *(__int16 *)(a1 + 94);
    v37 = 1;
    if (v29 <= v32)
      v38 = 1;
    else
      v38 = 2;
    if (v29 <= v32)
      v39 = *(__int16 *)(a1 + 92);
    else
      v39 = 2;
    if (v28 <= 15)
      v40 = 1;
    else
      v40 = 2;
    if (v28 > 15)
      v36 = 2;
  }
  v42 = v29 + (v33 && (v29 & 1) == 0);
LABEL_56:
  v43 = (*(_DWORD *)(a1 + 44) - 1) / v31 + 1;
  if (v37 == 2)
  {
    if ((v28 & 1) != 0 || (v28 >= 0 ? (v44 = v28) : (v44 = v28 + 1), (v44 & 2) != 0))
      v45 = (v28 + 1) >> 1;
    else
      v45 = (v28 >> 1) + 1;
  }
  else
  {
    v46 = (v28 & 1) == 0 && v34;
    v45 = v28 + v46;
  }
  v47 = v40 * v38;
  v48 = 2 * v47;
  v49 = v47 * v43 * (v42 % v39 + v42) * (v45 % v36 + v45);
  if (v6 >= 2)
    v50 = 3;
  else
    v50 = 4;
  v51 = v49 << v50;
  v53 = v51 + 7;
  v52 = v51 < -7;
  v54 = v51 + 14;
  if (!v52)
    v54 = v53;
  v55 = v48 + (v54 >> 3) + 2;
  v56 = v55 & 0x1F;
  if (v55 <= 0)
    v56 = -(-v55 & 0x1F);
  if (v56)
    v55 = v55 - v56 + 32;
  v35 = v55 <= 0x10000;
LABEL_78:

  v57 = v78;
  if (v78)
  {
    v58 = (unint64_t *)&v78->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return v35;
}

void sub_190DFC668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  uint64_t v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 80);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_valid_for_engine_conv(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  int v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const Espresso::net *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const Espresso::net *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  const Espresso::net *v58;
  void *v59;
  int32x2_t v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  _BOOL4 v64;
  int v65;
  int v66;
  int data;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  unsigned int v87;
  std::__shared_weak_count *v88;
  std::string::size_type v89;
  char *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int64x2_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  unint64_t *v102;
  unint64_t v103;
  char v104;
  int64x2_t *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  BOOL v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  BOOL v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  _BOOL4 v123;
  int v124;
  int v125;
  BOOL v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v133;
  _BOOL4 v134;
  int64x2_t *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int v159;
  int v160;
  int v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  double v174;
  uint64_t v175;
  float v176;
  BOOL v177;
  int v178;
  int v179;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::string *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  int v191;
  char v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::string *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  int v201;
  uint64_t v202;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  std::string::size_type v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  int64x2_t *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL8 is_valid_kernel_input_size;
  const char *v249;
  BOOL v250;
  unint64_t *v251;
  unint64_t v252;
  NSObject *v253;
  int v254;
  __int32 v255;
  unint64_t v256;
  NSObject *v257;
  Espresso::layer_shape *v258;
  int *v259;
  int v260;
  unsigned __int32 v261;
  int64x2_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  std::string *v266;
  int64x2_t **v267;
  unint64_t v268;
  int64x2_t *v269;
  unint64_t *v270;
  unint64_t v271;
  std::string *v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int32x2_t v277;
  int32x2_t v278;
  int32x2_t v279;
  int32x2_t v280;
  BOOL v281;
  BOOL v282;
  int64x2_t *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::string *v289;
  __int128 v290;
  std::string *v291;
  __int128 v292;
  std::string *v293;
  __int128 v294;
  std::string *v295;
  std::string::size_type v296;
  std::string *v297;
  __int128 v298;
  std::string *v299;
  __int128 v300;
  std::string *v301;
  std::string::size_type v302;
  std::string *v303;
  __int128 v304;
  std::string *v305;
  __int128 v306;
  std::string *v307;
  std::string::size_type v308;
  std::string *v309;
  __int128 v310;
  std::string *v311;
  __int128 v312;
  std::string *v313;
  std::string::size_type v314;
  std::string *v315;
  __int128 v316;
  std::string *v317;
  __int128 v318;
  std::string *v319;
  std::string::size_type v320;
  std::string *v321;
  __int128 v322;
  std::string *v323;
  __int128 v324;
  std::string *v325;
  std::string::size_type v326;
  std::string *v327;
  __int128 v328;
  std::string *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  void *v334;
  void *v335;
  int64x2_t *v336;
  unint64_t *v337;
  unint64_t v338;
  int64x2_t **v339;
  uint64_t v340;
  char v341;
  __int128 v342;
  uint64_t v343;
  int v344;
  int64x2_t *v345;
  unint64_t *v346;
  unint64_t v347;
  std::string *v348;
  __int128 v349;
  std::string *v350;
  __int128 v351;
  std::string *v352;
  std::string::size_type v353;
  std::string *v354;
  int64x2_t *v355;
  unint64_t *v356;
  unint64_t v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  _BOOL4 v363;
  int v364;
  void *v365;
  void *v366;
  int64x2_t **v367;
  int32x2_t v368;
  int64x2_t *v369[2];
  void *__p[2];
  __int128 v371;
  uint64_t v372;
  void *v373;
  void *v374;
  uint64_t v375;
  int64x2_t *v376[2];
  int64x2_t *v377[2];
  int64x2_t *v378[2];
  std::string v379;
  std::string v380;
  std::string v381;
  std::string v382;
  std::string v383;
  std::string v384;
  std::string v385;
  std::string v386;
  std::string v387;
  std::string v388;
  std::string v389;
  std::string v390;
  std::string v391;
  std::string v392;
  std::string v393;
  std::string v394;
  std::string v395;
  int64x2_t *v396;
  std::__shared_weak_count *v397;
  int64x2_t *v398[2];
  int64x2_t *v399[4];
  int64x2_t *v400;
  std::__shared_weak_count *v401;
  int64x2_t *v402;
  std::__shared_weak_count *v403;
  int64x2_t *v404;
  std::__shared_weak_count *v405;
  int64x2_t *v406;
  std::__shared_weak_count *v407;
  int64x2_t *v408;
  std::__shared_weak_count *v409;
  int64x2_t *v410;
  std::__shared_weak_count *v411;
  int64x2_t *v412;
  std::__shared_weak_count *v413;
  __int128 v414;
  std::string v415;
  _OWORD v416[2];
  uint64_t v417;
  void *v418;
  void *v419;
  uint64_t v420;
  const Espresso::net *v421;
  std::__shared_weak_count *v422;
  std::string v423;
  _OWORD v424[2];
  uint64_t v425;
  void *v426;
  void *v427;
  uint64_t v428;
  const Espresso::net *v429;
  std::__shared_weak_count *v430;
  std::string v431;
  const Espresso::net *v432;
  std::__shared_weak_count *v433;
  std::string v434;
  std::string v435;
  std::string v436;
  std::string v437;
  std::string v438;
  int64x2_t *v439;
  std::__shared_weak_count *v440;
  std::string buf;
  _QWORD v442[3];
  _BYTE v443[32];
  std::__shared_weak_count *v444;
  void **v445[2];

  if (a6)
  {
    v12 = *(_DWORD *)(a3 + 116);
    if (v12 >= 2 && (v12 != *(_DWORD *)(a3 + 44) || v12 != *(_DWORD *)(a3 + 40)))
    {
      v14 = *(std::__shared_weak_count **)(a5 + 8);
      v439 = *(int64x2_t **)a5;
      v440 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v12 = *(_DWORD *)(a3 + 116);
      }
      std::to_string(&v436, v12);
      v17 = std::string::insert(&v436, 0, "[Unsupported Deconvolution] n_groups = ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v437.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v437, " does not match input channels = ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v438.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v438.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v435, *(_DWORD *)(a3 + 44));
      if ((v435.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v435;
      else
        v21 = (std::string *)v435.__r_.__value_.__r.__words[0];
      if ((v435.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v435.__r_.__value_.__r.__words[2]);
      else
        size = v435.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v438, (const std::string::value_type *)v21, size);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v423.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v423.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v423, " or output channels = ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v431.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v434, *(_DWORD *)(a3 + 40));
      if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v434;
      else
        v27 = (std::string *)v434.__r_.__value_.__r.__words[0];
      if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
      else
        v28 = v434.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v431, (const std::string::value_type *)v27, v28);
      *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      *(_QWORD *)&v371 = *((_QWORD *)&v29->__r_.__value_.__l + 2);
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
      Espresso::emit_kernel_validation_warning(&v439, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
      v30 = v444;
      if (v444)
      {
        v31 = (unint64_t *)&v444->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v395.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
      v395.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SBYTE7(v371) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v434.__r_.__value_.__l.__data_);
      if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v431.__r_.__value_.__l.__data_);
      if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v423.__r_.__value_.__l.__data_);
      if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v435.__r_.__value_.__l.__data_);
      if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v438.__r_.__value_.__l.__data_);
      if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v437.__r_.__value_.__l.__data_);
      if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v436.__r_.__value_.__l.__data_);
      v33 = v440;
      if (v440)
      {
        v34 = (unint64_t *)&v440->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return 0;
    }
  }
  v37 = a4[6];
  v433 = 0;
  v432 = 0;
  v38 = *(std::__shared_weak_count **)(v37 + 80);
  if (v38 && (v39 = std::__shared_weak_count::lock(v38), (v433 = v39) != 0))
  {
    v40 = *(const Espresso::net **)(v37 + 72);
    v432 = v40;
    v429 = v40;
    v430 = v39;
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  else
  {
    v40 = 0;
    v430 = 0;
    v429 = 0;
  }
  v43 = *a4;
  v44 = *(_QWORD *)(*a4 + 32);
  v45 = *(_OWORD *)(*a4 + 16);
  v424[0] = *(_OWORD *)*a4;
  v424[1] = v45;
  v425 = v44;
  v426 = 0;
  v428 = 0;
  v427 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v426, *(const void **)(v43 + 40), *(_QWORD *)(v43 + 48), (uint64_t)(*(_QWORD *)(v43 + 48) - *(_QWORD *)(v43 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v431, v40, (const Espresso::layer_shape *)v424, 1);
  if (v426)
  {
    v427 = v426;
    operator delete(v426);
  }
  v46 = v430;
  if (v430)
  {
    v47 = (unint64_t *)&v430->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v432;
  v50 = v433;
  v421 = v432;
  v422 = v433;
  if (v433)
  {
    v51 = (unint64_t *)&v433->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = a4[3];
  v54 = *(_QWORD *)(v53 + 32);
  v55 = *(_OWORD *)(v53 + 16);
  v416[0] = *(_OWORD *)v53;
  v416[1] = v55;
  v417 = v54;
  v418 = 0;
  v420 = 0;
  v419 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v418, *(const void **)(v53 + 40), *(_QWORD *)(v53 + 48), (uint64_t)(*(_QWORD *)(v53 + 48) - *(_QWORD *)(v53 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v423, v49, (const Espresso::layer_shape *)v416, 1);
  if (v418)
  {
    v419 = v418;
    operator delete(v418);
  }
  if (v50)
  {
    v56 = (unint64_t *)&v50->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v368 = *(int32x2_t *)(a3 + 48);
  v58 = v432;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v432 + 472);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a3, v59) & 1) == 0)
  {
    v60.i32[0] = *(__int16 *)(a3 + 96);
    v60.i32[1] = *(__int16 *)(a3 + 98);
    v368 = vmla_s32((int32x2_t)0x100000001, vadd_s32(*(int32x2_t *)(a3 + 48), (int32x2_t)-1), v60);
  }
  if (a4[1] - *a4 == 64)
  {
    v61 = *(_QWORD *)a4[6] + 224 * a4[9];
    v62 = *(__int128 **)(v61 + 136);
    if (*(__int128 **)(v61 + 144) == v62)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    if (*((char *)v62 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v415, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
    }
    else
    {
      v63 = *v62;
      v415.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
      *(_OWORD *)&v415.__r_.__value_.__l.__data_ = v63;
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v58 + 45), &v415))
    {
      v65 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v58 + 352, &v415) + 8);
      if (v65 == -1)
        v66 = 1;
      else
        v66 = v65;
    }
    else
    {
      v66 = 1;
    }
    if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v415.__r_.__value_.__l.__data_);
    v64 = Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv(a1, v59, a2, a3, (uint64_t)&v431, v66, (uint64_t)&v423, a6);
  }
  else
  {
    v64 = 0;
  }
  v367 = (int64x2_t **)a5;
  if ((a6 & 1) != 0)
  {
    Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&buf, (const Espresso::convolution_uniforms *)a3, v431.__r_.__value_.__r.__words[2], SHIDWORD(v431.__r_.__value_.__r.__words[1]), v423.__r_.__value_.__r.__words[2], SHIDWORD(v423.__r_.__value_.__r.__words[1]));
    data = (int)buf.__r_.__value_.__l.__data_;
    v68 = HIDWORD(buf.__r_.__value_.__r.__words[0]);
    v70 = buf.__r_.__value_.__r.__words[1];
    v69 = HIDWORD(buf.__r_.__value_.__r.__words[1]);
    if (v64)
      goto LABEL_311;
LABEL_110:
    v359 = data;
    v360 = v68;
    v361 = v70;
    v362 = v69;
    v80 = *(__int16 *)(a3 + 92);
    v364 = *(__int16 *)(a3 + 94);
    v81 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)&v414 = *(_QWORD *)a5;
    *((_QWORD *)&v414 + 1) = v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v363 = v64;
    v84 = (_QWORD *)a4[6];
    v85 = *v84 + 224 * a4[9];
    v86 = *(_QWORD **)(v85 + 136);
    v365 = v59;
    if (*(_QWORD **)(v85 + 144) == v86)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v358 = *(__int16 *)(a3 + 72);
    v87 = *((_DWORD *)a4 + 16);
    *(_OWORD *)&v438.__r_.__value_.__l.__data_ = 0uLL;
    v88 = (std::__shared_weak_count *)v84[10];
    if (v88 && (v438.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v88)) != 0)
    {
      v89 = v84[9];
      v438.__r_.__value_.__r.__words[0] = v89;
    }
    else
    {
      v89 = 0;
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v89 + 360), v86))
    {
      __p[0] = v86;
      v90 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v89 + 352), v86, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v90 + 56);
      v442[0] = 0;
      v442[1] = 0;
      buf.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf.__r_.__value_.__r.__words[2], *((const void **)v90 + 9), *((_QWORD *)v90 + 10), (uint64_t)(*((_QWORD *)v90 + 10) - *((_QWORD *)v90 + 9)) >> 2);
      v87 = LODWORD(buf.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(buf.__r_.__value_.__r.__words[1]);
      if (buf.__r_.__value_.__r.__words[2])
      {
        v442[0] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
        operator delete((void *)buf.__r_.__value_.__r.__words[2]);
      }
    }
    if (a6)
      v91 = 15;
    else
      v91 = 29;
    if (v80 == 2)
      v92 = v91;
    else
      v92 = 29;
    if ((a6 & (v80 == 2)) != 0)
      v93 = 7;
    else
      v93 = 13;
    if (v364 == 2)
      v94 = v91;
    else
      v94 = 29;
    if (v87 > 1)
    {
      if (v87 != 4 && v87 != 2)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", *((unsigned int *)a4 + 16));
      std::string::basic_string[abi:ne180100]<0>(&buf, "(dilated)kernel width");
      v96 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
      v105 = (int64x2_t *)v414;
      *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v414;
      if (*((_QWORD *)&v414 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      if (Espresso::ANECompilerEngine::validate_size(v368.i32[0], v92, (uint64_t)&buf, (uint64_t)a4, v105, v96))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "(dilated)kernel height");
        v436.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
        v436.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
        if (v96)
        {
          v108 = (unint64_t *)&v96->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        v110 = Espresso::ANECompilerEngine::validate_size(v368.i32[1], v94, (uint64_t)__p, (uint64_t)a4, v105, v96);
        if (v96)
        {
          v111 = (unint64_t *)&v96->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v104 = !v110;
        if (SBYTE7(v371) < 0)
          operator delete(__p[0]);
        v96 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
        if (!v437.__r_.__value_.__l.__size_)
        {
LABEL_180:
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v59 = v365;
          if ((v104 & 1) != 0)
          {
            v116 = 0;
LABEL_184:
            v64 = v363;
            goto LABEL_301;
          }
          if (v364 == 4 && v80 == 4 && a6 && v368.i32[1] <= 9 && v368.i32[0] <= 9 && v368.i32[0] == v368.i32[1])
          {
            v117 = v361 + v362;
            v118 = v359 + v360;
            v119 = v361 + v362 < 0 != __OFADD__(v361, v362) ? v117 + 1 : v361 + v362;
            v120 = v118 >= 0 ? v359 + v360 : v118 + 1;
            if (v120 >> 1 <= v368.i32[0]
              && v118 - (v120 >> 1) <= v368.i32[0]
              && v119 >> 1 <= v368.i32[0]
              && v117 - (v119 >> 1) <= v368.i32[0])
            {
              v116 = 1;
              goto LABEL_184;
            }
          }
          if (((v87 - 2) & 0xFFFFFFFD) != 0)
            v121 = 7;
          else
            v121 = 15;
          v123 = v368.i32[1] > 15 || v121 < v368.i32[0];
          if (v358 == 2 || (v124 = 0, !v358) && !v359 && !v360 && !v361 && !v362)
            v124 = a6 ^ 1;
          if (v358 == 1)
            v124 = 1;
          v125 = v124 | a6;
          v127 = v80 == 3 && v364 < 4;
          if (a6)
          {
            v64 = v363;
            if (!v127)
            {
              v128 = v80 == 4;
              v129 = v80 < 4;
              if (v364 != 3)
                v129 = 0;
              if (v364 != 4)
                v128 = 0;
              v125 &= v129 || v128;
            }
            if (((v123 | v125 ^ 1) & 1) == 0)
            {
              v116 = v359 <= v368.i32[0] && v360 <= v368.i32[0] && v361 <= v368.i32[1] && v362 <= v368.i32[1];
              goto LABEL_301;
            }
          }
          else
          {
            v64 = v363;
            if (!v127)
            {
              v133 = v80 == 4;
              v134 = v80 < 4;
              if (v364 != 3)
                v134 = 0;
              if (v364 != 4)
                v133 = 0;
              v125 &= v134 || v133;
            }
            if (((v123 | v125 ^ 1) & 1) == 0)
            {
              v116 = 0;
              if (v359 <= v368.i32[0] && v360 <= v368.i32[0] && v361 <= v368.i32[1] && v362 <= v368.i32[1])
              {
                if (*(_DWORD *)*a4 % v80 || *(_DWORD *)(*a4 + 4) % v364)
                {
                  *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v414;
                  if (*((_QWORD *)&v414 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
                    do
                      v144 = __ldxr(v143);
                    while (__stxr(v144 + 1, v143));
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "Convolution with stride >= 3 requires input blobs where respective axis size is divisible by stride.");
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 1);
                  Espresso::emit_kernel_validation_warning((int64x2_t **)&v435, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                  v145 = v444;
                  if (v444)
                  {
                    v146 = (unint64_t *)&v444->__shared_owners_;
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
                  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  if (SBYTE7(v371) < 0)
                    operator delete(__p[0]);
                  v148 = (std::__shared_weak_count *)v435.__r_.__value_.__l.__size_;
                  if (v435.__r_.__value_.__l.__size_)
                  {
                    v149 = (unint64_t *)(v435.__r_.__value_.__l.__size_ + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  v116 = 0;
                }
                else
                {
                  v116 = 1;
                }
              }
LABEL_301:
              v153 = (std::__shared_weak_count *)v438.__r_.__value_.__l.__size_;
              if (v438.__r_.__value_.__l.__size_)
              {
                v154 = (unint64_t *)(v438.__r_.__value_.__l.__size_ + 8);
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              v156 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
              if (!*((_QWORD *)&v414 + 1))
                goto LABEL_310;
              v157 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
                if (v116)
                  goto LABEL_311;
              }
              else
              {
LABEL_310:
                if (v116)
                  goto LABEL_311;
              }
              v214 = (std::__shared_weak_count *)v367[1];
              v412 = *v367;
              v413 = v214;
              if (v214)
              {
                v215 = (unint64_t *)&v214->__shared_owners_;
                do
                  v216 = __ldxr(v215);
                while (__stxr(v216 + 1, v215));
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported kernel size, strides or padding");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
              Espresso::emit_kernel_validation_warning(&v412, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
              v217 = v444;
              if (v444)
              {
                v218 = (unint64_t *)&v444->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
                if (!v219)
                {
                  ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                  std::__shared_weak_count::__release_weak(v217);
                }
              }
              v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
              v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SBYTE7(v371) < 0)
                operator delete(__p[0]);
              v171 = v413;
              if (!v413)
                goto LABEL_479;
              v220 = (unint64_t *)&v413->__shared_owners_;
              do
                v173 = __ldaxr(v220);
              while (__stlxr(v173 - 1, v220));
LABEL_477:
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
              goto LABEL_479;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&buf, "stride_x");
          v136 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
          v135 = (int64x2_t *)v414;
          *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v414;
          if (*((_QWORD *)&v414 + 1))
          {
            v137 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          if (Espresso::ANECompilerEngine::validate_size(v80, 2, (uint64_t)&buf, (uint64_t)a4, v135, v136))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "stride_y");
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
            v434.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
            if (v136)
            {
              v139 = (unint64_t *)&v136->__shared_owners_;
              do
                v140 = __ldxr(v139);
              while (__stxr(v140 + 1, v139));
            }
            v116 = Espresso::ANECompilerEngine::validate_size(v364, 2, (uint64_t)__p, (uint64_t)a4, v135, v136);
            if (v136)
            {
              v141 = (unint64_t *)&v136->__shared_owners_;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (SBYTE7(v371) < 0)
              operator delete(__p[0]);
            v136 = (std::__shared_weak_count *)v435.__r_.__value_.__l.__size_;
          }
          else
          {
            v116 = 0;
          }
          if (v136)
          {
            v151 = (unint64_t *)&v136->__shared_owners_;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v59 = v365;
          goto LABEL_301;
        }
      }
      else
      {
        v104 = 1;
        if (!v96)
          goto LABEL_180;
      }
      v115 = (unint64_t *)&v96->__shared_owners_;
      do
        v114 = __ldaxr(v115);
      while (__stlxr(v114 - 1, v115));
    }
    else
    {
      v87 = 1;
      std::string::basic_string[abi:ne180100]<0>(&buf, "(dilated)kernel width");
      v96 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
      v95 = (int64x2_t *)v414;
      *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v414;
      if (*((_QWORD *)&v414 + 1))
      {
        v97 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      if (Espresso::ANECompilerEngine::validate_size(v368.i32[0], v93, (uint64_t)&buf, (uint64_t)a4, v95, v96))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "(dilated)kernel height");
        v436.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
        v436.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
        if (v96)
        {
          v99 = (unint64_t *)&v96->__shared_owners_;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
        v101 = Espresso::ANECompilerEngine::validate_size(v368.i32[1], v94, (uint64_t)__p, (uint64_t)a4, v95, v96);
        if (v96)
        {
          v102 = (unint64_t *)&v96->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v104 = !v101;
        if (SBYTE7(v371) < 0)
          operator delete(__p[0]);
        v96 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
        if (!v437.__r_.__value_.__l.__size_)
          goto LABEL_180;
      }
      else
      {
        v104 = 1;
        if (!v96)
          goto LABEL_180;
      }
      v113 = (unint64_t *)&v96->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
    }
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    goto LABEL_180;
  }
  v71 = *(__int16 *)(a3 + 72);
  if (v71 != 4)
  {
    if (v71 == 2)
    {
      v69 = 0;
      v70 = 0;
      v68 = 0;
      data = 0;
      if (!v64)
        goto LABEL_110;
      goto LABEL_311;
    }
    if (v71 != 1)
    {
      data = *(__int16 *)(a3 + 80);
      v68 = *(__int16 *)(a3 + 82);
      v70 = *(__int16 *)(a3 + 84);
      v69 = *(__int16 *)(a3 + 86);
      if (v64)
        goto LABEL_311;
      goto LABEL_110;
    }
  }
  v72 = *(_DWORD *)(a3 + 52)
      - HIDWORD(v431.__r_.__value_.__r.__words[1])
      + (HIDWORD(v423.__r_.__value_.__r.__words[1]) - 1) * *(__int16 *)(a3 + 94);
  v73 = *(_DWORD *)(a3 + 48)
      - LODWORD(v431.__r_.__value_.__r.__words[2])
      + (LODWORD(v423.__r_.__value_.__r.__words[2]) - 1) * *(__int16 *)(a3 + 92);
  v74 = v72 & ~(v72 >> 31);
  v75 = v73 & ~(v73 >> 31);
  v76 = *(unsigned __int16 *)(a3 + 72);
  v77 = v75 >> 1;
  data = v75 - (v75 >> 1);
  v78 = v74 >> 1;
  v70 = v74 - (v74 >> 1);
  v79 = v76 == 1;
  if (v76 == 1)
    v69 = v70;
  else
    v69 = v78;
  if (v79)
  {
    v70 = v78;
    v68 = data;
  }
  else
  {
    v68 = v77;
  }
  if (v79)
    data = v77;
  if (!v64)
    goto LABEL_110;
LABEL_311:
  v159 = *(_DWORD *)(a3 + 44);
  v160 = *(_DWORD *)(a3 + 116);
  if (v160 <= 1)
    v160 = 1;
  v161 = (v159 - 1) / v160;
  if (v161 >= 0x10000)
  {
    v162 = (std::__shared_weak_count *)v367[1];
    v410 = *v367;
    v411 = v162;
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    std::to_string(&v437, v161 + 1);
    v165 = std::string::insert(&v437, 0, "Unsupported: input channel = ");
    v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
    v438.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v438.__r_.__value_.__l.__data_ = v166;
    v165->__r_.__value_.__l.__size_ = 0;
    v165->__r_.__value_.__r.__words[2] = 0;
    v165->__r_.__value_.__r.__words[0] = 0;
    v167 = std::string::append(&v438, " > 65536");
    *(_OWORD *)__p = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
    *(_QWORD *)&v371 = *((_QWORD *)&v167->__r_.__value_.__l + 2);
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v167->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v410, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    v168 = v444;
    if (v444)
    {
      v169 = (unint64_t *)&v444->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v436.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
    v436.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v438.__r_.__value_.__l.__data_);
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v437.__r_.__value_.__l.__data_);
    v171 = v411;
    if (!v411)
      goto LABEL_479;
    v172 = (unint64_t *)&v411->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    goto LABEL_477;
  }
  v366 = v59;
  if (*a4 == a4[1])
  {
    v177 = 0;
  }
  else
  {
    v174 = (double)(v159 / v160) * (double)*(int *)(a3 + 48) * (double)*(int *)(a3 + 52);
    v175 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)*a4);
    v176 = (v174 * (double)v175 + v174 * (double)v175) * 0.000000001;
    v177 = v176 < 0.004;
  }
  v178 = *((_DWORD *)a4 + 16);
  if (v178 == 4 || v178 == 2)
  {
    v191 = *(_DWORD *)(a3 + 40);
    v192 = (v191 & 7) == 0 || v177;
    if ((v192 & 1) == 0)
    {
      v193 = (std::__shared_weak_count *)v367[1];
      v406 = *v367;
      v407 = v193;
      if (v193)
      {
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
        v191 = *(_DWORD *)(a3 + 40);
      }
      std::to_string(&v438, v191);
      v196 = std::string::insert(&v438, 0, "HW utilization loss: Number of channels should be multiple of 8 for best performance. Instead: oc/groups= ");
      *(_OWORD *)__p = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
      *(_QWORD *)&v371 = *((_QWORD *)&v196->__r_.__value_.__l + 2);
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v196->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 1);
      Espresso::emit_kernel_validation_warning(&v406, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
      v197 = v444;
      if (v444)
      {
        v198 = (unint64_t *)&v444->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v437);
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v437);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SBYTE7(v371) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v438.__r_.__value_.__l.__data_);
      v188 = v407;
      if (v407)
      {
        v200 = (unint64_t *)&v407->__shared_owners_;
        do
          v190 = __ldaxr(v200);
        while (__stlxr(v190 - 1, v200));
LABEL_385:
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
    }
  }
  else if (v178 == 1)
  {
    v179 = *(_DWORD *)(a3 + 40);
    if ((v179 & 0xF) != 0 && !v177)
    {
      v181 = (std::__shared_weak_count *)v367[1];
      v408 = *v367;
      v409 = v181;
      if (v181)
      {
        v182 = (unint64_t *)&v181->__shared_owners_;
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
        v179 = *(_DWORD *)(a3 + 40);
      }
      std::to_string(&v438, v179);
      v184 = std::string::insert(&v438, 0, "HW utilization loss: Number of channels should be multiple of 16 for best performance. Instead: oc/groups= ");
      *(_OWORD *)__p = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
      *(_QWORD *)&v371 = *((_QWORD *)&v184->__r_.__value_.__l + 2);
      v184->__r_.__value_.__l.__size_ = 0;
      v184->__r_.__value_.__r.__words[2] = 0;
      v184->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 1);
      Espresso::emit_kernel_validation_warning(&v408, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
      v185 = v444;
      if (v444)
      {
        v186 = (unint64_t *)&v444->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v437);
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v437);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SBYTE7(v371) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v438.__r_.__value_.__l.__data_);
      v188 = v409;
      if (v409)
      {
        v189 = (unint64_t *)&v409->__shared_owners_;
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        goto LABEL_385;
      }
    }
  }
  v201 = *(_DWORD *)a3;
  if (*(int *)a3 > 0x4000 || *(int *)(a3 + 4) > 0x4000)
  {
    v211 = (std::__shared_weak_count *)v367[1];
    v404 = *v367;
    v405 = v211;
    if (v211)
    {
      v212 = (unint64_t *)&v211->__shared_owners_;
      v59 = v366;
      do
        v213 = __ldxr(v212);
      while (__stxr(v213 + 1, v212));
      v201 = *(_DWORD *)a3;
    }
    else
    {
      v59 = v366;
    }
    std::to_string(&v435, v201);
    v228 = std::string::insert(&v435, 0, "Unsupported: input width = ");
    v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
    v436.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v229;
    v228->__r_.__value_.__l.__size_ = 0;
    v228->__r_.__value_.__r.__words[2] = 0;
    v228->__r_.__value_.__r.__words[0] = 0;
    v230 = std::string::append(&v436, ". input height = ");
    v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
    v437.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v231;
    v230->__r_.__value_.__l.__size_ = 0;
    v230->__r_.__value_.__r.__words[2] = 0;
    v230->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v434, *(_DWORD *)(a3 + 4));
    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &v434;
    else
      v232 = (std::string *)v434.__r_.__value_.__r.__words[0];
    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
    else
      v233 = v434.__r_.__value_.__l.__size_;
    v234 = std::string::append(&v437, (const std::string::value_type *)v232, v233);
    v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
    v438.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v438.__r_.__value_.__l.__data_ = v235;
    v234->__r_.__value_.__l.__size_ = 0;
    v234->__r_.__value_.__r.__words[2] = 0;
    v234->__r_.__value_.__r.__words[0] = 0;
    v236 = std::string::append(&v438, ", at least one of them > 16384");
    *(_OWORD *)__p = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
    *(_QWORD *)&v371 = *((_QWORD *)&v236->__r_.__value_.__l + 2);
    v236->__r_.__value_.__l.__size_ = 0;
    v236->__r_.__value_.__r.__words[2] = 0;
    v236->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v404, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    v237 = v444;
    if (v444)
    {
      v238 = (unint64_t *)&v444->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    v395.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
    v395.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v438.__r_.__value_.__l.__data_);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v437.__r_.__value_.__l.__data_);
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v436.__r_.__value_.__l.__data_);
    if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v435.__r_.__value_.__l.__data_);
    v171 = v405;
    if (!v405)
      goto LABEL_479;
    v240 = (unint64_t *)&v405->__shared_owners_;
    do
      v173 = __ldaxr(v240);
    while (__stlxr(v173 - 1, v240));
    goto LABEL_477;
  }
  v202 = a4[1] - *a4;
  if (v202 == 128 && a6 != 0)
  {
    v221 = (std::__shared_weak_count *)v367[1];
    v402 = *v367;
    v403 = v221;
    if (v221)
    {
      v222 = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    v59 = v366;
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic deconvolution not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v402, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    v224 = v444;
    if (v444)
    {
      v225 = (unint64_t *)&v444->__shared_owners_;
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
    v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    v171 = v403;
    if (!v403)
      goto LABEL_479;
    v227 = (unint64_t *)&v403->__shared_owners_;
    do
      v173 = __ldaxr(v227);
    while (__stlxr(v173 - 1, v227));
    goto LABEL_477;
  }
  if (v202 == 192)
  {
    v204 = (std::__shared_weak_count *)v367[1];
    v400 = *v367;
    v401 = v204;
    if (v204)
    {
      v205 = (unint64_t *)&v204->__shared_owners_;
      do
        v206 = __ldxr(v205);
      while (__stxr(v206 + 1, v205));
    }
    v59 = v366;
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic biases not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v400, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    v207 = v444;
    if (v444)
    {
      v208 = (unint64_t *)&v444->__shared_owners_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
    v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    v438.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    v171 = v401;
    if (!v401)
      goto LABEL_479;
    v210 = (unint64_t *)&v401->__shared_owners_;
    do
      v173 = __ldaxr(v210);
    while (__stlxr(v173 - 1, v210));
    goto LABEL_477;
  }
  v245 = v367[1];
  v399[2] = *v367;
  v399[3] = v245;
  if (v245)
  {
    v246 = &v245->u64[1];
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  is_valid_kernel_input_size = Espresso::is_valid_kernel_input_size(a3, a4, a6);
  v250 = is_valid_kernel_input_size;
  if (v245)
  {
    v251 = &v245->u64[1];
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      (*(void (**)(int64x2_t *))(v245->i64[0] + 16))(v245);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v245);
    }
  }
  if (!v250)
  {
    if (!v64)
    {
      v260 = *(_DWORD *)(a3 + 116);
      v261 = vmul_lane_s32(v368, v368, 1).u32[0];
      if (v260 <= 1)
        v260 = 1;
      v262 = v367[1];
      v263 = (int)(v261 + v261 * ((*(_DWORD *)(a3 + 44) - 1) / v260));
      v399[0] = *v367;
      v399[1] = v262;
      if (v262)
      {
        v264 = &v262->u64[1];
        do
          v265 = __ldxr(v264);
        while (__stxr(v265 + 1, v264));
      }
      v59 = v366;
      std::to_string(&v438, v263);
      v266 = std::string::insert(&v438, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
      *(_OWORD *)__p = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
      *(_QWORD *)&v371 = *((_QWORD *)&v266->__r_.__value_.__l + 2);
      v266->__r_.__value_.__l.__size_ = 0;
      v266->__r_.__value_.__r.__words[2] = 0;
      v266->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
      Espresso::emit_kernel_validation_warning(v399, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
      if (SBYTE7(v371) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v438.__r_.__value_.__l.__data_);
      v267 = v399;
      goto LABEL_530;
    }
    Espresso::espresso_os_log_subsystem((Espresso *)is_valid_kernel_input_size, v249);
    v253 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v253, OS_LOG_TYPE_DEBUG, "Overridding Espresso judgment for input kernel size check based on ANECValidateConvLayer. Likely kernel streaming mode can be used.", (uint8_t *)&buf, 2u);
    }

  }
  v254 = *(_DWORD *)(a3 + 116);
  if (v254 <= 1)
    v254 = 1;
  v255 = v368.i32[0] * v368.i32[1] + v368.i32[0] * v368.i32[1] * ((*(_DWORD *)(a3 + 44) - 1) / v254);
  v256 = 0x10000;
  if (*((_DWORD *)a4 + 16) < 2u)
    v256 = 0x8000;
  if (v256 <= v255)
  {
    if (!v64)
    {
      v268 = v255;
      v269 = v367[1];
      v398[0] = *v367;
      v398[1] = v269;
      if (v269)
      {
        v270 = &v269->u64[1];
        do
          v271 = __ldxr(v270);
        while (__stxr(v271 + 1, v270));
      }
      v59 = v366;
      std::to_string(&v438, v268);
      v272 = std::string::insert(&v438, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
      *(_OWORD *)__p = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
      *(_QWORD *)&v371 = *((_QWORD *)&v272->__r_.__value_.__l + 2);
      v272->__r_.__value_.__l.__size_ = 0;
      v272->__r_.__value_.__r.__words[2] = 0;
      v272->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
      Espresso::emit_kernel_validation_warning(v398, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
      if (SBYTE7(v371) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v438.__r_.__value_.__l.__data_);
      v267 = v398;
      goto LABEL_530;
    }
    Espresso::espresso_os_log_subsystem((Espresso *)is_valid_kernel_input_size, v249);
    v257 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v257, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v257, OS_LOG_TYPE_DEBUG, "Overridding Espresso judgment for output kernel size check based on ANECValidateConvLayer. Likely kernel streaming mode is used.", (uint8_t *)&buf, 2u);
    }

  }
  v438.__r_.__value_.__r.__words[2] = 0;
  *(int32x4_t *)&v438.__r_.__value_.__l.__data_ = vmovl_s16(*(int16x4_t *)(a3 + 80));
  v258 = (Espresso::layer_shape *)*a4;
  if (*a4 != a4[1])
  {
    v259 = (int *)a4[3];
    if (v259 != (int *)a4[4])
    {
      if (a6)
      {
        Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&buf, (const Espresso::convolution_uniforms *)a3, *(_DWORD *)v258, *((_DWORD *)v258 + 1), *v259, v259[1]);
        v438 = buf;
      }
      else
      {
        Espresso::padding_params_t::get_final_lrtb((int32x4_t *)&v438, (int16x4_t *)(a3 + 72), *(_DWORD *)v258, *((_DWORD *)v258 + 1), *v259, v259[1], *(__int16 *)(a3 + 92), *(__int16 *)(a3 + 94), v368.i32[0], v368.i32[1]);
      }
    }
  }
  v273 = (v368.i32[0] - 1) * *(__int16 *)(a3 + 96) + 1;
  v274 = (v368.i32[1] - 1) * *(__int16 *)(a3 + 98) + 1;
  if (a6)
    v275 = 0;
  else
    v275 = 32;
  if (SLODWORD(v438.__r_.__value_.__l.__data_) >= v275 + v273
    || SHIDWORD(v438.__r_.__value_.__r.__words[0]) >= v275 + v273
    || (v276 = v275 + v274, SLODWORD(v438.__r_.__value_.__r.__words[1]) >= v276)
    || ((uint64_t)v438.__r_.__value_.__l.__data_ & 0x80000000) != 0
    || SHIDWORD(v438.__r_.__value_.__r.__words[1]) >= v276
    || (v438.__r_.__value_.__r.__words[1] & 0x80000000) != 0
    || SHIDWORD(v438.__r_.__value_.__r.__words[0]) <= -*(__int16 *)(a3 + 92)
    || SHIDWORD(v438.__r_.__value_.__r.__words[1]) <= -*(__int16 *)(a3 + 94))
  {
    v286 = (std::__shared_weak_count *)v367[1];
    v396 = *v367;
    v397 = v286;
    if (v286)
    {
      v287 = (unint64_t *)&v286->__shared_owners_;
      do
        v288 = __ldxr(v287);
      while (__stxr(v288 + 1, v287));
    }
    v59 = v366;
    std::to_string(&v385, 32);
    v289 = std::string::insert(&v385, 0, "Padding size at left, right, top, bottom should all < (kernel_size_adjusted + ");
    v290 = *(_OWORD *)&v289->__r_.__value_.__l.__data_;
    v386.__r_.__value_.__r.__words[2] = v289->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v290;
    v289->__r_.__value_.__l.__size_ = 0;
    v289->__r_.__value_.__r.__words[2] = 0;
    v289->__r_.__value_.__r.__words[0] = 0;
    v291 = std::string::append(&v386, ") size. ");
    v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
    v387.__r_.__value_.__r.__words[2] = v291->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v387.__r_.__value_.__l.__data_ = v292;
    v291->__r_.__value_.__l.__size_ = 0;
    v291->__r_.__value_.__r.__words[2] = 0;
    v291->__r_.__value_.__r.__words[0] = 0;
    v293 = std::string::append(&v387, "Instead get padding size (");
    v294 = *(_OWORD *)&v293->__r_.__value_.__l.__data_;
    v388.__r_.__value_.__r.__words[2] = v293->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v294;
    v293->__r_.__value_.__l.__size_ = 0;
    v293->__r_.__value_.__r.__words[2] = 0;
    v293->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v384, *(__int16 *)(a3 + 80));
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = &v384;
    else
      v295 = (std::string *)v384.__r_.__value_.__r.__words[0];
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v296 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
    else
      v296 = v384.__r_.__value_.__l.__size_;
    v297 = std::string::append(&v388, (const std::string::value_type *)v295, v296);
    v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
    v389.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v389.__r_.__value_.__l.__data_ = v298;
    v297->__r_.__value_.__l.__size_ = 0;
    v297->__r_.__value_.__r.__words[2] = 0;
    v297->__r_.__value_.__r.__words[0] = 0;
    v299 = std::string::append(&v389, ", ");
    v300 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
    v390.__r_.__value_.__r.__words[2] = v299->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v300;
    v299->__r_.__value_.__l.__size_ = 0;
    v299->__r_.__value_.__r.__words[2] = 0;
    v299->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v383, *(__int16 *)(a3 + 82));
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v301 = &v383;
    else
      v301 = (std::string *)v383.__r_.__value_.__r.__words[0];
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v302 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
    else
      v302 = v383.__r_.__value_.__l.__size_;
    v303 = std::string::append(&v390, (const std::string::value_type *)v301, v302);
    v304 = *(_OWORD *)&v303->__r_.__value_.__l.__data_;
    v391.__r_.__value_.__r.__words[2] = v303->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v391.__r_.__value_.__l.__data_ = v304;
    v303->__r_.__value_.__l.__size_ = 0;
    v303->__r_.__value_.__r.__words[2] = 0;
    v303->__r_.__value_.__r.__words[0] = 0;
    v305 = std::string::append(&v391, ", ");
    v306 = *(_OWORD *)&v305->__r_.__value_.__l.__data_;
    v392.__r_.__value_.__r.__words[2] = v305->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v392.__r_.__value_.__l.__data_ = v306;
    v305->__r_.__value_.__l.__size_ = 0;
    v305->__r_.__value_.__r.__words[2] = 0;
    v305->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v382, *(__int16 *)(a3 + 84));
    if ((v382.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v307 = &v382;
    else
      v307 = (std::string *)v382.__r_.__value_.__r.__words[0];
    if ((v382.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v308 = HIBYTE(v382.__r_.__value_.__r.__words[2]);
    else
      v308 = v382.__r_.__value_.__l.__size_;
    v309 = std::string::append(&v392, (const std::string::value_type *)v307, v308);
    v310 = *(_OWORD *)&v309->__r_.__value_.__l.__data_;
    v393.__r_.__value_.__r.__words[2] = v309->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v393.__r_.__value_.__l.__data_ = v310;
    v309->__r_.__value_.__l.__size_ = 0;
    v309->__r_.__value_.__r.__words[2] = 0;
    v309->__r_.__value_.__r.__words[0] = 0;
    v311 = std::string::append(&v393, ", ");
    v312 = *(_OWORD *)&v311->__r_.__value_.__l.__data_;
    v394.__r_.__value_.__r.__words[2] = v311->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v394.__r_.__value_.__l.__data_ = v312;
    v311->__r_.__value_.__l.__size_ = 0;
    v311->__r_.__value_.__r.__words[2] = 0;
    v311->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v381, *(__int16 *)(a3 + 86));
    if ((v381.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v313 = &v381;
    else
      v313 = (std::string *)v381.__r_.__value_.__r.__words[0];
    if ((v381.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v314 = HIBYTE(v381.__r_.__value_.__r.__words[2]);
    else
      v314 = v381.__r_.__value_.__l.__size_;
    v315 = std::string::append(&v394, (const std::string::value_type *)v313, v314);
    v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
    v395.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v395.__r_.__value_.__l.__data_ = v316;
    v315->__r_.__value_.__l.__size_ = 0;
    v315->__r_.__value_.__r.__words[2] = 0;
    v315->__r_.__value_.__r.__words[0] = 0;
    v317 = std::string::append(&v395, ") and adjusted kernel size ((kernel_size - 1) * dilation_rate + 1) (");
    v318 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
    v434.__r_.__value_.__r.__words[2] = v317->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v318;
    v317->__r_.__value_.__l.__size_ = 0;
    v317->__r_.__value_.__r.__words[2] = 0;
    v317->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v380, v273);
    if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v319 = &v380;
    else
      v319 = (std::string *)v380.__r_.__value_.__r.__words[0];
    if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v320 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
    else
      v320 = v380.__r_.__value_.__l.__size_;
    v321 = std::string::append(&v434, (const std::string::value_type *)v319, v320);
    v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
    v435.__r_.__value_.__r.__words[2] = v321->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v322;
    v321->__r_.__value_.__l.__size_ = 0;
    v321->__r_.__value_.__r.__words[2] = 0;
    v321->__r_.__value_.__r.__words[0] = 0;
    v323 = std::string::append(&v435, ", ");
    v324 = *(_OWORD *)&v323->__r_.__value_.__l.__data_;
    v436.__r_.__value_.__r.__words[2] = v323->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v324;
    v323->__r_.__value_.__l.__size_ = 0;
    v323->__r_.__value_.__r.__words[2] = 0;
    v323->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v379, v274);
    if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v325 = &v379;
    else
      v325 = (std::string *)v379.__r_.__value_.__r.__words[0];
    if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v326 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
    else
      v326 = v379.__r_.__value_.__l.__size_;
    v327 = std::string::append(&v436, (const std::string::value_type *)v325, v326);
    v328 = *(_OWORD *)&v327->__r_.__value_.__l.__data_;
    v437.__r_.__value_.__r.__words[2] = v327->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v328;
    v327->__r_.__value_.__l.__size_ = 0;
    v327->__r_.__value_.__r.__words[2] = 0;
    v327->__r_.__value_.__r.__words[0] = 0;
    v329 = std::string::append(&v437, ")");
    *(_OWORD *)__p = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
    *(_QWORD *)&v371 = *((_QWORD *)&v329->__r_.__value_.__l + 2);
    v329->__r_.__value_.__l.__size_ = 0;
    v329->__r_.__value_.__r.__words[2] = 0;
    v329->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v396, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    v330 = v444;
    if (v444)
    {
      v331 = (unint64_t *)&v444->__shared_owners_;
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
    v445[0] = (void **)v443;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v445);
    v445[0] = (void **)v442;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v445);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v437.__r_.__value_.__l.__data_);
    if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v379.__r_.__value_.__l.__data_);
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v436.__r_.__value_.__l.__data_);
    if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v435.__r_.__value_.__l.__data_);
    if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v380.__r_.__value_.__l.__data_);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v395.__r_.__value_.__l.__data_);
    if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v381.__r_.__value_.__l.__data_);
    if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v394.__r_.__value_.__l.__data_);
    if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v393.__r_.__value_.__l.__data_);
    if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v382.__r_.__value_.__l.__data_);
    if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v392.__r_.__value_.__l.__data_);
    if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v391.__r_.__value_.__l.__data_);
    if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v383.__r_.__value_.__l.__data_);
    if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v390.__r_.__value_.__l.__data_);
    if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v389.__r_.__value_.__l.__data_);
    if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v384.__r_.__value_.__l.__data_);
    if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v388.__r_.__value_.__l.__data_);
    if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v387.__r_.__value_.__l.__data_);
    if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v386.__r_.__value_.__l.__data_);
    if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v385.__r_.__value_.__l.__data_);
    v171 = v397;
    if (!v397)
      goto LABEL_479;
    v333 = (unint64_t *)&v397->__shared_owners_;
    do
      v173 = __ldaxr(v333);
    while (__stlxr(v173 - 1, v333));
    goto LABEL_477;
  }
  if (*(_WORD *)(a3 + 92) != 4
    || *(_WORD *)(a3 + 94) != 4
    || !a6
    || (v277 = vadd_s32(vmax_s32(vadd_s32(vsub_s32(*(int32x2_t *)a4[3], vadd_s32(v368, vshl_n_s32(*(int32x2_t *)*a4, 2uLL))), (int32x2_t)0x400000004), (int32x2_t)-1), (int32x2_t)0x100000001), v278 = (int32x2_t)vshr_n_u32((uint32x2_t)v277, 1uLL), v279 = vcgt_s32(v368, v278), (v279.i8[0] & 1) != 0)&& (v280 = vsub_s32(v277, v278), v280.i32[0] < v368.i32[0])&& (v279.i8[4] & 1) != 0&& (v280.i32[1] >= -1 ? (v281 = v280.i32[1] < v368.i32[1]) : (v281 = 0), v281 ? (v282 = v280.i32[0] <= -2) : (v282 = 1), !v282))
  {
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v432 + 472);
    v334 = (void *)objc_claimAutoreleasedReturnValue();
    v335 = v334;
    if (*(_WORD *)(a3 + 74))
    {
      if (*(_WORD *)(a3 + 74) == 1)
      {
        if ((objc_msgSend(v334, "isEqualToString:", CFSTR("H11")) & 1) != 0
          || objc_msgSend(v335, "isEqualToString:", CFSTR("M9")))
        {
          v336 = v367[1];
          v377[0] = *v367;
          v377[1] = v336;
          if (v336)
          {
            v337 = &v336->u64[1];
            do
              v338 = __ldxr(v337);
            while (__stxr(v338 + 1, v337));
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "Border replicate padding not supported on this architecture");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
          Espresso::emit_kernel_validation_warning(v377, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
          if (SBYTE7(v371) < 0)
            operator delete(__p[0]);
          v339 = v377;
LABEL_706:
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v339);
          goto LABEL_707;
        }
LABEL_669:
        if (check_kernel_size_vs_input_output_size<Espresso::convolution_uniforms>(v368.i32[0], v368.i32[1], (int *)a4, (int *)&v438, a6, a3, v367))
        {
          v340 = a4[3];
          v341 = v340 == a4[4] || v177;
          if ((v341 & 1) == 0)
          {
            v342 = *(_OWORD *)(v340 + 16);
            v343 = *(_QWORD *)(v340 + 32);
            *(_OWORD *)__p = *(_OWORD *)v340;
            v371 = v342;
            v372 = v343;
            v373 = 0;
            v374 = 0;
            v375 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v373, *(const void **)(v340 + 40), *(_QWORD *)(v340 + 48), (uint64_t)(*(_QWORD *)(v340 + 48) - *(_QWORD *)(v340 + 40)) >> 2);
            v344 = (int)__p[0];
            if (SLODWORD(__p[0]) >= 2
              && SHIDWORD(__p[0]) >= 2
              && (float)((float)((float)(int)(((8 * LODWORD(__p[0]) - 8) & 0xFFFFFFC0)
                                            + 64
                                            + (((8 * LODWORD(__p[0]) - 8) & 0xFFFFFFC0) + 64)
                                            * ((HIDWORD(__p[0]) - 1) >> 3))
                               + 1.0)
                       / (float)((float)(HIDWORD(__p[0]) * LODWORD(__p[0])) + 1.0)) > 1.9)
            {
              v345 = v367[1];
              v369[0] = *v367;
              v369[1] = v345;
              if (v345)
              {
                v346 = &v345->u64[1];
                do
                  v347 = __ldxr(v346);
                while (__stxr(v347 + 1, v346));
              }
              std::to_string(&v434, v344);
              v348 = std::string::insert(&v434, 0, "HW utilization loss: HW may round up computation of output sizes to multiple of 8 or 16, but the output size is ");
              v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
              v435.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v349;
              v348->__r_.__value_.__l.__size_ = 0;
              v348->__r_.__value_.__r.__words[2] = 0;
              v348->__r_.__value_.__r.__words[0] = 0;
              v350 = std::string::append(&v435, "x");
              v351 = *(_OWORD *)&v350->__r_.__value_.__l.__data_;
              v436.__r_.__value_.__r.__words[2] = v350->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v351;
              v350->__r_.__value_.__l.__size_ = 0;
              v350->__r_.__value_.__r.__words[2] = 0;
              v350->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v395, SHIDWORD(__p[0]));
              if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v352 = &v395;
              else
                v352 = (std::string *)v395.__r_.__value_.__r.__words[0];
              if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v353 = HIBYTE(v395.__r_.__value_.__r.__words[2]);
              else
                v353 = v395.__r_.__value_.__l.__size_;
              v354 = std::string::append(&v436, (const std::string::value_type *)v352, v353);
              v437 = *v354;
              v354->__r_.__value_.__l.__size_ = 0;
              v354->__r_.__value_.__r.__words[2] = 0;
              v354->__r_.__value_.__r.__words[0] = 0;
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)&v437, (uint64_t)a4, 1);
              Espresso::emit_kernel_validation_warning(v369, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v437.__r_.__value_.__l.__data_);
              if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v395.__r_.__value_.__l.__data_);
              if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v436.__r_.__value_.__l.__data_);
              if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v435.__r_.__value_.__l.__data_);
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v434.__r_.__value_.__l.__data_);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v369);
            }
            if (v373)
            {
              v374 = v373;
              operator delete(v373);
            }
          }
          v36 = 1;
          goto LABEL_708;
        }
LABEL_707:
        v36 = 0;
LABEL_708:
        v59 = v366;

        goto LABEL_480;
      }
    }
    else if (fabsf(*(float *)(a3 + 76)) < 1.1755e-38)
    {
      goto LABEL_669;
    }
    v355 = v367[1];
    v376[0] = *v367;
    v376[1] = v355;
    if (v355)
    {
      v356 = &v355->u64[1];
      do
        v357 = __ldxr(v356);
      while (__stxr(v357 + 1, v356));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Only CONSTANT fill mode with 0 padding is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v376, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
    if (SBYTE7(v371) < 0)
      operator delete(__p[0]);
    v339 = v376;
    goto LABEL_706;
  }
  v283 = v367[1];
  v378[0] = *v367;
  v378[1] = v283;
  if (v283)
  {
    v284 = &v283->u64[1];
    do
      v285 = __ldxr(v284);
    while (__stxr(v285 + 1, v284));
  }
  v59 = v366;
  std::string::basic_string[abi:ne180100]<0>(__p, "The 4x4 deconv is decomposed by split_4x4_deconvolution to deconv0 + crop + deconv1. In deconv1, the padding size at left, right, top, bottom should all < kernel_size");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (__int128 *)__p, (uint64_t)a4, 0);
  Espresso::emit_kernel_validation_warning(v378, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&buf.__r_.__value_.__l.__data_);
  if (SBYTE7(v371) < 0)
    operator delete(__p[0]);
  v267 = v378;
LABEL_530:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v267);
LABEL_479:
  v36 = 0;
LABEL_480:

  v241 = v433;
  if (v433)
  {
    v242 = (unint64_t *)&v433->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  return v36;
}

void sub_190DFEE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v28 - 224));
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x4E7]) < 0)
    operator delete((void *)STACK[0x4D0]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape(Espresso::ANECompilerEngine::blob_container *this, const Espresso::net *a2, const Espresso::layer_shape *a3, int a4)
{
  std::string *v8;
  _BOOL4 v9;
  Espresso::ANECompilerEngine *v10;
  NSString *v11;
  Espresso::ANECompilerEngine *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const Espresso::layer_shape *v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  Espresso::ANECompilerEngine *v25;
  char is_mix;
  Espresso::ANECompilerEngine *v27;
  char v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 v34;
  std::string *v35;
  void *__p[2];
  char v37;
  std::string v38;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(&v38, "espresso.aneruntime.mix_enable_sub_batching");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)&v38, (uint64_t)__p, &v39);
  if (v37 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v39.__r_.__value_.__l.__size_ == 1)
    {
      v8 = (std::string *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_10;
    }
  }
  else if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
  {
    v8 = &v39;
LABEL_10:
    v9 = v8->__r_.__value_.__s.__data_[0] != 48;
    goto LABEL_12;
  }
  v9 = 1;
LABEL_12:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
  v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v12 = v10;
  v13 = *((_DWORD *)a3 + 4);
  if (v13 == 1)
    v14 = 4;
  else
    v14 = 5;
  if (*((_DWORD *)a3 + 5) == -1)
    v15 = v14;
  else
    v15 = *((_DWORD *)a3 + 5);
  v17 = *((_DWORD *)a3 + 2);
  v16 = *((_DWORD *)a3 + 3);
  v20 = a3;
  v18 = *(_DWORD *)a3;
  v19 = *((_DWORD *)v20 + 1);
  v21 = *((unsigned __int8 *)a2 + 1281);
  *(_QWORD *)&v22 = 0x100000001;
  *((_QWORD *)&v22 + 1) = 0x100000001;
  *(_OWORD *)this = v22;
  *((_QWORD *)this + 2) = 0x100000001;
  *((_DWORD *)this + 6) = v15;
  *((_DWORD *)this + 7) = -1;
  if (v15 == 5 && v21)
  {
    if (v9)
      v23 = a4;
    else
      v23 = v13;
    *(_DWORD *)this = v23;
    *((_DWORD *)this + 1) = v16;
    *((_DWORD *)this + 2) = v17;
    *((_DWORD *)this + 3) = v19;
    *((_DWORD *)this + 7) = 0;
    v24 = v13 / v23;
LABEL_24:
    *((_DWORD *)this + 4) = v18;
    *((_DWORD *)this + 5) = v24;
    goto LABEL_49;
  }
  if (v15 == 5)
  {
    v25 = v10;
    is_mix = Espresso::ANECompilerEngine::is_mix(v10, v11);
    v12 = v25;
    if ((is_mix & 1) == 0)
    {
      if (v9)
        v33 = a4;
      else
        v33 = v16;
      *(_DWORD *)this = v33;
      *((_DWORD *)this + 1) = v17;
      *((_DWORD *)this + 2) = v13;
      *((_DWORD *)this + 3) = v19;
      *((_DWORD *)this + 7) = 1;
      v24 = v16 / v33;
      goto LABEL_24;
    }
  }
  v27 = v12;
  v28 = Espresso::ANECompilerEngine::is_mix(v12, v11);
  if (v9)
    v29 = a4;
  else
    v29 = v16;
  if ((v28 & 1) != 0)
    v30 = a4;
  else
    v30 = v29;
  v31 = v16 / v29;
  if ((v28 & 1) != 0)
    v32 = (v16 * v13 - 1) / a4 + 1;
  else
    v32 = v31;
  *(_DWORD *)this = v30;
  *((_DWORD *)this + 5) = v32;
  if (v15 != 5)
  {
    switch(v15)
    {
      case 0:
        *((_DWORD *)this + 4) = 1;
        goto LABEL_47;
      case 1:
        *((_DWORD *)this + 4) = v18;
LABEL_47:
        *(_QWORD *)&v34 = 0x100000001;
        *((_QWORD *)&v34 + 1) = 0x100000001;
        *(_OWORD *)this = v34;
        goto LABEL_48;
      case 2:
        *((_DWORD *)this + 2) = 1;
        *((_DWORD *)this + 3) = v19;
        *((_DWORD *)this + 4) = v18;
        *(_QWORD *)this = 0x100000001;
        goto LABEL_48;
      case 3:
        *((_DWORD *)this + 2) = 1;
        *((_DWORD *)this + 3) = v19;
        *((_DWORD *)this + 4) = v18;
        *(_DWORD *)this = 1;
        *((_DWORD *)this + 1) = v17;
        goto LABEL_48;
      case 4:
        break;
      default:
        std::to_string(&v38, v15);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v38;
        else
          v35 = (std::string *)v38.__r_.__value_.__r.__words[0];
        __p[0] = v35;
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*>("ANE does not support blob with rank: %s", __p);
    }
  }
  *((_DWORD *)this + 1) = v17;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = v19;
  *((_DWORD *)this + 4) = v18;
LABEL_48:
  v12 = v27;
LABEL_49:

  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_190DFF9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a21 < 0)
    operator delete(__p);

  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::ane_arch_allow_network_override(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::string *p_p;
  std::string __p;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "ane_arch_override");
  v2 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1, v7);
  if ((_QWORD *)(a1 + 8) == v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch((Espresso::ANECompilerEngine *)v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*((char *)v2 + 79) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[7], v2[8]);
    else
      __p = *(std::string *)(v2 + 7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0)
    operator delete(v7[0]);
  return v3;
}

void sub_190DFFB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id Espresso::ANECompilerEngine::current_ane_arch(Espresso::ANECompilerEngine *this)
{
  std::string *p_p;
  id v2;
  void *v3;
  std::string __p;

  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_13770);
  Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch((Espresso::ANECompilerEngine::precompilation_settings_t *)Espresso::ANECompilerEngine::precompilation_settings_t::global, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (Espresso::ANECompilerEngine::current_ane_arch(void)::onceToken != -1)
    dispatch_once(&Espresso::ANECompilerEngine::current_ane_arch(void)::onceToken, &__block_literal_global_7593);
  v2 = (id)Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr;
LABEL_12:
  v3 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_190DFFC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch(Espresso::ANECompilerEngine::precompilation_settings_t *this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
  std::mutex::unlock(v4);
}

void sub_190DFFC9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::map_const_get<std::map<std::string,std::string>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t *v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  __int128 v28;

  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_40;
  v8 = *(char *)(a2 + 23);
  v9 = v8 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v10 = v8 >= 0 ? (const void *)a2 : *(const void **)a2;
  v11 = a1 + 8;
  do
  {
    v12 = *(char *)(v7 + 55);
    if (v12 >= 0)
      v13 = *(unsigned __int8 *)(v7 + 55);
    else
      v13 = *(_QWORD *)(v7 + 40);
    if (v12 >= 0)
      v14 = (const void *)(v7 + 32);
    else
      v14 = *(const void **)(v7 + 32);
    if (v9 >= v13)
      v15 = v13;
    else
      v15 = v9;
    v16 = memcmp(v14, v10, v15);
    v17 = v13 < v9;
    if (v16)
      v17 = v16 < 0;
    v18 = !v17;
    if (v17)
      v19 = (uint64_t *)(v7 + 8);
    else
      v19 = (uint64_t *)v7;
    if (v18)
      v11 = v7;
    v7 = *v19;
  }
  while (*v19);
  if (v11 == v6)
    goto LABEL_40;
  v20 = *(char *)(v11 + 55);
  v21 = v20 >= 0 ? *(unsigned __int8 *)(v11 + 55) : *(_QWORD *)(v11 + 40);
  v22 = v20 >= 0 ? (const void *)(v11 + 32) : *(const void **)(v11 + 32);
  v23 = v21 >= v9 ? v9 : v21;
  v24 = memcmp(v10, v22, v23);
  v25 = v9 < v21;
  if (v24)
    v25 = v24 < 0;
  if (v25)
  {
LABEL_40:
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
      return;
    }
    v26 = *(const std::string::value_type **)a3;
    v27 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    if ((*(char *)(v11 + 79) & 0x80000000) == 0)
    {
      v28 = *(_OWORD *)(v11 + 56);
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 72);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v28;
      return;
    }
    v26 = *(const std::string::value_type **)(v11 + 56);
    v27 = *(_QWORD *)(v11 + 64);
  }
  std::string::__init_copy_ctor_external(a4, v26, v27);
}

unint64_t Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(uint64_t a1, void *a2)
{
  NSString *v3;
  Espresso::ANECompilerEngine *v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t j;

  v4 = a2;
  v5 = *(__int16 *)(a1 + 96);
  if (v5 != 1)
  {
    v6 = operator new(0x10uLL);
    v7 = 0;
    *v6 = xmmword_191A93430;
    do
    {
      for (i = *((_QWORD *)v6 + v7); !(v5 % i); v5 /= i)
        ;
      ++v7;
    }
    while (v7 != 2);
    v5 = v5 == 1;
    operator delete(v6);
  }
  v9 = *(__int16 *)(a1 + 98);
  if (v9 != 1)
  {
    v10 = operator new(0x10uLL);
    v11 = 0;
    *v10 = xmmword_191A93430;
    do
    {
      for (j = *((_QWORD *)v10 + v11); !(v9 % j); v9 /= j)
        ;
      ++v11;
    }
    while (v11 != 2);
    if (v9 == 1)
      v5 = v5;
    else
      v5 = 0;
    operator delete(v10);
  }
  if (Espresso::ANECompilerEngine::is_mix(v4, v3))
  {
    if (*(__int16 *)(a1 + 96) < 5 && *(__int16 *)(a1 + 98) < 5)
      v5 = v5;
    else
      v5 = 0;
  }

  return v5;
}

void sub_190DFFF30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  id v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  __int16 v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v43;
  int v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  _BOOL4 v48;
  const __CFString *v50;
  const __CFString *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  BOOL v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  _BOOL8 v97;
  __CFString *v98;
  uint64_t v99;
  __int128 v100;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  void *v110;
  int v111;
  _BYTE v112[40];
  uint64_t v113;
  _OWORD v114[2];
  _OWORD v115[2];
  __int16 v116;
  _QWORD v117[2];
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  __int128 v124;
  int v125;
  int v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  const __CFString *v135;
  const __CFString *v136;
  const __CFString *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD v157[2];
  _QWORD v158[5];

  v13 = a2;
  v110 = v13;
  ANECConvLayerDescInitialize();
  v14 = *(__int16 *)(a4 + 96);
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = *(__int16 *)(a4 + 96);
  v16 = *(__int16 *)(a4 + 98);
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = *(__int16 *)(a4 + 98);
  v19 = *(_DWORD *)(a4 + 48);
  v18 = *(_DWORD *)(a4 + 52);
  v20 = *(_DWORD *)(a4 + 152);
  if (v20 <= 1)
    v21 = 1;
  else
    v21 = *(_DWORD *)(a4 + 152);
  v22 = *(_DWORD *)(a5 + 16);
  v103 = *(_DWORD *)(a5 + 12);
  v23 = *(_DWORD *)(a5 + 8);
  v104 = *(_DWORD *)(a7 + 16);
  v102 = *(_DWORD *)(a7 + 12);
  v24 = *(_DWORD *)(a7 + 8);
  v117[0] = 1;
  v25 = *(_DWORD *)(a4 + 88);
  v126 = *(_DWORD *)(a4 + 92);
  __asm { FMOV            V0.2S, #1.0 }
  v122 = _D0;
  v134 = 0;
  v133 = 0;
  v117[1] = *(_QWORD *)(a4 + 40);
  v118 = v19;
  v119 = v18;
  v120 = v21;
  v121 = -1;
  v107 = v17;
  v108 = v21;
  v128 = v14;
  v30 = *(__int16 *)(a4 + 156);
  v127 = *(_WORD *)(a4 + 156);
  v129 = v16;
  v130 = 1;
  v31 = *(_DWORD *)(a4 + 116);
  v131 = 0;
  v132 = v31;
  v124 = *(_OWORD *)(a4 + 72);
  v123 = 0;
  v125 = v25;
  v111 = a6;
  v105 = v22;
  v106 = a5;
  if (a8)
  {
    v32 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)v112 = *(_OWORD *)a5;
    *(_OWORD *)&v112[16] = v32;
    v33 = *(_OWORD *)(a7 + 16);
    v157[0] = *(_OWORD *)a7;
    v157[1] = v33;
    Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)v158, (uint64_t)v117, v112, v157);
    v34 = v158[2] != 0;
    v20 = *(_DWORD *)(a4 + 152);
    v35 = *(_WORD *)(a4 + 156);
    goto LABEL_23;
  }
  v35 = v30;
  v36 = *(__int16 *)(a4 + 72);
  switch(v36)
  {
    case 4:
      goto LABEL_15;
    case 2:
      v41 = 0;
      v39 = 0;
      break;
    case 1:
LABEL_15:
      v37 = *(unsigned __int16 *)(a4 + 72);
      v38 = (v21 - v23 + (v24 - 1) * v30) & ~((v21 - v23 + (v24 - 1) * v30) >> 31);
      v39 = v38 >> 1;
      v40 = v38 - (v38 >> 1);
      if (v37 == 1)
        v41 = v38 - (v38 >> 1);
      else
        v41 = v38 >> 1;
      if (v37 != 1)
        v39 = v40;
      break;
    default:
      v39 = *(__int16 *)(a4 + 88);
      v41 = *(__int16 *)(a4 + 90);
      break;
  }
  v34 = (v39 | v41) != 0;
LABEL_23:
  v43 = v20 > 1 || v35 > 1 || v34;
  v116 = 0;
  Espresso::ANECompilerEngine::query_dilation_options(a4, a8, v111, (char *)&v116 + 1, &v116, v13);
  v44 = *(_DWORD *)(a4 + 44);
  v45 = *(int *)(a4 + 40);
  v46 = v45 == v44;
  v47 = *(int *)(a4 + 116);
  v48 = v44 == v47;
  _ZF = !v46 || !v48;
  if (v46 && v48)
    v50 = CFSTR("ChannelWiseDeConv");
  else
    v50 = CFSTR("DeConv");
  v51 = CFSTR("Conv");
  if (!_ZF)
    v51 = CFSTR("ChannelWiseConv");
  if (!a8)
    v50 = v51;
  v135 = v50;
  v52 = *a3;
  v136 = Espresso::ANECompilerEngine::ane_conv_kernel_mode(*a3, v116);
  v137 = Espresso::ANECompilerEngine::ane_conv_kernel_format(v52);
  v138 = v45;
  v139 = v47;
  v140 = 0;
  ANECKernelSizeInitialize();
  v53 = (v19 - 1) * v15 + 1;
  v54 = (v18 - 1) * v107 + 1;
  v55 = HIBYTE(v116);
  if (HIBYTE(v116))
  {
    v56 = v53;
    v57 = v54;
    v58 = v108;
  }
  else
  {
    v56 = *(_DWORD *)(a4 + 48);
    v57 = *(_DWORD *)(a4 + 52);
    v58 = *(_DWORD *)(a4 + 152);
    if (v58 <= 1)
      v58 = 1;
  }
  v141 = v56;
  v142 = v57;
  v143 = v58;
  ANECStepInitialize();
  v59 = *(__int16 *)(a4 + 94);
  v144 = *(__int16 *)(a4 + 92);
  v145 = v59;
  v146 = *(__int16 *)(a4 + 156);
  v153 = 0;
  ANECKernelDilationRateInitialize();
  v60 = *(__int16 *)(a4 + 96);
  v61 = *(__int16 *)(a4 + 98);
  if (v55)
  {
    v60 = 1;
    v61 = 1;
  }
  v154 = v60;
  v155 = v61;
  v156 = 1;
  ANECPaddingInitialize();
  if ((v43 & 1) == 0)
  {
    if (a8)
    {
      Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)v112, (const Espresso::convolution_uniforms *)a4, v105, v103, v104, v102);
      v65 = v111;
      v73 = *(_DWORD *)v112;
      v72 = *(_DWORD *)&v112[4];
      v75 = *(_DWORD *)&v112[8];
      v74 = *(_DWORD *)&v112[12];
LABEL_77:
      v62 = v106;
      v147 = v73;
      v148 = v72;
      v149 = v75;
      v150 = v74;
      goto LABEL_78;
    }
    v88 = *(__int16 *)(a4 + 72);
    v65 = v111;
    if (v88 != 4)
    {
      if (v88 == 2)
      {
        v74 = 0;
        v75 = 0;
        v72 = 0;
        v73 = 0;
        goto LABEL_77;
      }
      if (v88 != 1)
      {
        v73 = *(__int16 *)(a4 + 80);
        v72 = *(__int16 *)(a4 + 82);
        v75 = *(__int16 *)(a4 + 84);
        v74 = *(__int16 *)(a4 + 86);
        goto LABEL_77;
      }
    }
    v89 = v54 - v103 + (v102 - 1) * *(__int16 *)(a4 + 94);
    v90 = v53 - v105 + (v104 - 1) * *(__int16 *)(a4 + 92);
    v91 = v89 & ~(v89 >> 31);
    v92 = v90 & ~(v90 >> 31);
    v93 = *(unsigned __int16 *)(a4 + 72);
    v73 = v92 >> 1;
    v94 = v92 - (v92 >> 1);
    v95 = v91 >> 1;
    v75 = v91 - (v91 >> 1);
    v96 = v93 == 1;
    if (v93 == 1)
      v74 = v75;
    else
      v74 = v95;
    if (v96)
    {
      v75 = v95;
      v72 = v94;
    }
    else
    {
      v72 = v73;
    }
    if (!v96)
      v73 = v94;
    goto LABEL_77;
  }
  if (!a8)
  {
    v76 = *(__int16 *)(a4 + 72);
    v65 = v111;
    v62 = v106;
    if (v76 != 4)
    {
      if (v76 == 2)
      {
        v70 = 0;
        v71 = 0;
        v68 = 0;
        v69 = 0;
        v66 = 0;
        v67 = 0;
        goto LABEL_75;
      }
      if (v76 != 1)
      {
        v67 = *(__int16 *)(a4 + 80);
        v66 = *(__int16 *)(a4 + 82);
        v69 = *(__int16 *)(a4 + 84);
        v68 = *(__int16 *)(a4 + 86);
        v71 = *(__int16 *)(a4 + 88);
        v70 = *(__int16 *)(a4 + 90);
        goto LABEL_75;
      }
    }
    v77 = v54 - *(_DWORD *)(v106 + 12) + (*(_DWORD *)(a7 + 12) - 1) * *(__int16 *)(a4 + 94);
    v78 = v53 - *(_DWORD *)(v106 + 16) + (*(_DWORD *)(a7 + 16) - 1) * *(__int16 *)(a4 + 92);
    v79 = v77 & ~(v77 >> 31);
    v80 = v78 & ~(v78 >> 31);
    v81 = v108 - *(_DWORD *)(v106 + 8) + (*(_DWORD *)(a7 + 8) - 1) * *(__int16 *)(a4 + 156);
    v82 = v81 & ~(v81 >> 31);
    v67 = v80 >> 1;
    v83 = *(unsigned __int16 *)(a4 + 72);
    v84 = v80 - (v80 >> 1);
    v69 = v79 >> 1;
    v85 = v79 - (v79 >> 1);
    v86 = v82 >> 1;
    v71 = v82 - (v82 >> 1);
    v87 = v83 == 1;
    if (v83 == 1)
      v70 = v71;
    else
      v70 = v86;
    if (v87)
    {
      v71 = v86;
      v68 = v85;
    }
    else
    {
      v68 = v69;
    }
    if (v87)
    {
      v66 = v84;
    }
    else
    {
      v69 = v85;
      v66 = v67;
    }
    if (!v87)
      v67 = v84;
    goto LABEL_75;
  }
  v62 = v106;
  v63 = *(_OWORD *)(v106 + 16);
  v115[0] = *(_OWORD *)v106;
  v115[1] = v63;
  v64 = *(_OWORD *)(a7 + 16);
  v114[0] = *(_OWORD *)a7;
  v114[1] = v64;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)v112, (uint64_t)v117, v115, v114);
  v65 = v111;
  v67 = *(_DWORD *)v112;
  v66 = *(_DWORD *)&v112[4];
  v69 = *(_DWORD *)&v112[8];
  v68 = *(_DWORD *)&v112[12];
  v70 = *(_DWORD *)&v112[16];
  v71 = *(_DWORD *)&v112[20];
LABEL_75:
  v147 = v67;
  v148 = v66;
  v149 = v69;
  v150 = v68;
  v151 = v71;
  v152 = v70;
LABEL_78:
  if (v65 <= 7 && ((0x97u >> v65) & 1) != 0)
  {
    v98 = off_1E2DD3590[v65];
    ANECTensorDescInitialize();
    *(_QWORD *)v112 = v98;
    v99 = *(_QWORD *)(v62 + 12);
    *(_QWORD *)&v100 = (int)v99;
    *((_QWORD *)&v100 + 1) = SHIDWORD(v99);
    *(_OWORD *)&v112[24] = v100;
    v113 = *(int *)(v62 + 8);
    *(_QWORD *)&v100 = (int)*(_QWORD *)v62;
    *((_QWORD *)&v100 + 1) = (int)HIDWORD(*(_QWORD *)v62);
    *(_OWORD *)&v112[8] = v100;
    *(_QWORD *)&v157[0] = 0;
    v158[0] = 0;
    v97 = ANECValidateConvLayer() == 0;
  }
  else
  {
    v97 = 0;
  }

  return v97;
}

void sub_190E00548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

const __CFString *Espresso::ANECompilerEngine::ane_conv_kernel_format(uint64_t a1)
{
  const __CFString *result;
  uint64_t v3;
  int v4;

  result = CFSTR("Float16");
  if (!a1)
    return result;
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 32) | v3)
  {
    if (v3)
      return CFSTR("Int8");
  }
  else if (!*(_QWORD *)(a1 + 64))
  {
    v4 = *(_DWORD *)(a1 + 160);
    if (v4 <= 0)
      v4 = *(_DWORD *)(a1 + 156);
    if (v4 == 8)
    {
      if (*(_BYTE *)(a1 + 164))
        return CFSTR("Int8");
      else
        return CFSTR("UInt8");
    }
    return result;
  }
  if (*(_QWORD *)(a1 + 64))
    return CFSTR("UInt8");
  return result;
}

const __CFString *Espresso::ANECompilerEngine::ane_conv_kernel_mode(uint64_t a1, int a2)
{
  const __CFString *v2;
  const __CFString *v3;

  if (a1 && (*(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 64)))
  {
    switch(*(_DWORD *)(a1 + 156))
    {
      case 1:
        v2 = CFSTR("Palette2");
        v3 = CFSTR("Palette2Sparse");
        break;
      case 2:
        v2 = CFSTR("Palette4");
        v3 = CFSTR("Palette4Sparse");
        break;
      case 3:
      case 4:
        v2 = CFSTR("Palette16");
        v3 = CFSTR("Palette16Sparse");
        break;
      case 5:
      case 6:
        v2 = CFSTR("Palette64");
        v3 = CFSTR("Palette64Sparse");
        break;
      case 7:
      case 8:
        v2 = CFSTR("Palette256");
        v3 = CFSTR("Palette256Sparse");
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v2 = CFSTR("Dense");
    v3 = CFSTR("Sparse");
  }
  if (a2)
    return v3;
  else
    return v2;
}

BOOL Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(Espresso::ANECompilerEngine::sparsity_options *this, const NSDictionary *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char *__endptr;

  -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.no_sparse_for_dilated"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.no_sparse_for_dilated"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLValue");

  }
  else
  {
    v5 = 0;
  }
  v6 = getenv("ESPRESSO_ANEC_NO_SPARSE_FOR_DILATED");
  if (v6)
  {
    __endptr = 0;
    return strtol(v6, &__endptr, 10) != 0;
  }
  return v5;
}

void sub_190E00758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL check_kernel_size_vs_input_output_size<Espresso::convolution_uniforms>(int a1, int a2, int *a3, int *a4, char a5, uint64_t a6, int64x2_t **a7)
{
  __int128 *v8;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  int64x2_t *v121;
  unint64_t *v122;
  unint64_t v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  int v137;
  _QWORD *v139;
  __int128 *v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  std::string::size_type v143;
  Espresso::ANECompilerEngine *v144;
  uint64_t v145;
  NSString *v146;
  int v147;
  char *v148;
  int v149;
  int64x2_t *v150;
  unint64_t *v151;
  unint64_t v152;
  int64x2_t *v153[2];
  int64x2_t *v154[2];
  int64x2_t *v155;
  std::__shared_weak_count *v156;
  int64x2_t *v157;
  std::__shared_weak_count *v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  std::string __p;
  _QWORD v177[3];
  _BYTE v178[32];
  std::__shared_weak_count *v179;
  int64x2_t *v180;
  std::__shared_weak_count *v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  void *v185;
  void *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  void *v192;
  uint64_t v193;
  void **v194;

  if (*(_QWORD *)a3 == *((_QWORD *)a3 + 1))
    return 1;
  v8 = (__int128 *)*((_QWORD *)a3 + 3);
  if (v8 == *((__int128 **)a3 + 4) || (a5 & 1) != 0)
    return 1;
  v14 = v8[1];
  v15 = *((_QWORD *)v8 + 4);
  v188 = *v8;
  v189 = v14;
  v190 = v15;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v191, *((const void **)v8 + 5), *((_QWORD *)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 2);
  v16 = *(__int128 **)a3;
  v17 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v18 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v182 = *(_OWORD *)*(_QWORD *)a3;
  v183 = v18;
  v184 = v17;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v185, *((const void **)v16 + 5), *((_QWORD *)v16 + 6), (uint64_t)(*((_QWORD *)v16 + 6) - *((_QWORD *)v16 + 5)) >> 2);
  v19 = a4[1];
  v20 = *a4 + v182;
  if (v19 < a1 + ((int)v188 - 1) * *(__int16 *)(a6 + 92) - v20)
  {
    v21 = (std::__shared_weak_count *)a7[1];
    v180 = *a7;
    v181 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    std::to_string(&v164, v182);
    v24 = std::string::insert(&v164, 0, "Declared right pad less than derived value for src_w=");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v165, " dst_w=");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v163, v188);
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v163;
    else
      v28 = (std::string *)v163.__r_.__value_.__r.__words[0];
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    else
      size = v163.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v166, (const std::string::value_type *)v28, size);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v167, " stride_x=");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v168.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v162, *(__int16 *)(a6 + 92));
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v162;
    else
      v34 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v35 = v162.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v168, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v169.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v169, " Nx=");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v170.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v161, a1);
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v161;
    else
      v40 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
    else
      v41 = v161.__r_.__value_.__l.__size_;
    v42 = std::string::append(&v170, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v171, " pad_l=");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v160, *a4);
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v160;
    else
      v46 = (std::string *)v160.__r_.__value_.__r.__words[0];
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
    else
      v47 = v160.__r_.__value_.__l.__size_;
    v48 = std::string::append(&v172, (const std::string::value_type *)v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v173, " pad_r=");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v159, a4[1]);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v159;
    else
      v52 = (std::string *)v159.__r_.__value_.__r.__words[0];
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    else
      v53 = v159.__r_.__value_.__l.__size_;
    v54 = std::string::append(&v174, (const std::string::value_type *)v52, v53);
    v175 = *v54;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v175, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v180, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v55 = v179;
    if (v179)
    {
      v56 = (unint64_t *)&v179->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v194 = (void **)v178;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v194);
    v194 = (void **)v177;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v194);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    v58 = v181;
    if (!v181)
      goto LABEL_239;
    v59 = (unint64_t *)&v181->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
LABEL_204:
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
LABEL_239:
    v137 = 1;
    goto LABEL_240;
  }
  v61 = a4[3];
  v62 = a4[2] + DWORD1(v182);
  if (v61 < a2 + (DWORD1(v188) - 1) * *(__int16 *)(a6 + 94) - v62)
  {
    v63 = (std::__shared_weak_count *)a7[1];
    v157 = *a7;
    v158 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::to_string(&v164, SDWORD1(v182));
    v66 = std::string::insert(&v164, 0, "Declared bottom pad less than derived value for src_h=");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v165, " dst_h=");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v163, SDWORD1(v188));
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v163;
    else
      v70 = (std::string *)v163.__r_.__value_.__r.__words[0];
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    else
      v71 = v163.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v166, (const std::string::value_type *)v70, v71);
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v74 = std::string::append(&v167, " stride_y=");
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v168.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v162, *(__int16 *)(a6 + 94));
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v162;
    else
      v76 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v77 = v162.__r_.__value_.__l.__size_;
    v78 = std::string::append(&v168, (const std::string::value_type *)v76, v77);
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v169.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    v80 = std::string::append(&v169, " Ny=");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v170.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v161, a2);
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v161;
    else
      v82 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
    else
      v83 = v161.__r_.__value_.__l.__size_;
    v84 = std::string::append(&v170, (const std::string::value_type *)v82, v83);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    v86 = std::string::append(&v171, " pad_t=");
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v160, a4[2]);
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v160;
    else
      v88 = (std::string *)v160.__r_.__value_.__r.__words[0];
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v89 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
    else
      v89 = v160.__r_.__value_.__l.__size_;
    v90 = std::string::append(&v172, (const std::string::value_type *)v88, v89);
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    v92 = std::string::append(&v173, " pad_b");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v159, a4[3]);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v159;
    else
      v94 = (std::string *)v159.__r_.__value_.__r.__words[0];
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    else
      v95 = v159.__r_.__value_.__l.__size_;
    v96 = std::string::append(&v174, (const std::string::value_type *)v94, v95);
    v175 = *v96;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v175, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v157, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v97 = v179;
    if (v179)
    {
      v98 = (unint64_t *)&v179->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v194 = (void **)v178;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v194);
    v194 = (void **)v177;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v194);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    v58 = v158;
    if (!v158)
      goto LABEL_239;
    v100 = (unint64_t *)&v158->__shared_owners_;
    do
      v60 = __ldaxr(v100);
    while (__stlxr(v60 - 1, v100));
    goto LABEL_204;
  }
  if (v20 + v19 < a1)
  {
    v101 = (std::__shared_weak_count *)a7[1];
    v155 = *a7;
    v156 = v101;
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    std::to_string(&v170, v182);
    v104 = std::string::insert(&v170, 0, "Input width ");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    v106 = std::string::append(&v171, " plus horizontal padding ");
    v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v169, a4[1] + *a4);
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v108 = &v169;
    else
      v108 = (std::string *)v169.__r_.__value_.__r.__words[0];
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v109 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    else
      v109 = v169.__r_.__value_.__l.__size_;
    v110 = std::string::append(&v172, (const std::string::value_type *)v108, v109);
    v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    v112 = std::string::append(&v173, " is less than the kernel width ");
    v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v168, a1);
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &v168;
    else
      v114 = (std::string *)v168.__r_.__value_.__r.__words[0];
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
    else
      v115 = v168.__r_.__value_.__l.__size_;
    v116 = std::string::append(&v174, (const std::string::value_type *)v114, v115);
    v175 = *v116;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v175, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v155, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v117 = v179;
    if (v179)
    {
      v118 = (unint64_t *)&v179->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    v58 = v156;
    if (!v156)
      goto LABEL_239;
    v120 = (unint64_t *)&v156->__shared_owners_;
    do
      v60 = __ldaxr(v120);
    while (__stlxr(v60 - 1, v120));
    goto LABEL_204;
  }
  if (v62 + v61 < a2)
  {
    v121 = a7[1];
    v154[0] = *a7;
    v154[1] = v121;
    if (v121)
    {
      v122 = &v121->u64[1];
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    std::to_string(&v170, SDWORD1(v182));
    v124 = std::string::insert(&v170, 0, "Input height ");
    v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    v126 = std::string::append(&v171, " plus vertical padding ");
    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v169, a4[3] + a4[2]);
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v128 = &v169;
    else
      v128 = (std::string *)v169.__r_.__value_.__r.__words[0];
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v129 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    else
      v129 = v169.__r_.__value_.__l.__size_;
    v130 = std::string::append(&v172, (const std::string::value_type *)v128, v129);
    v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    v132 = std::string::append(&v173, " is less than the kernel height ");
    v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v168, a2);
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v134 = &v168;
    else
      v134 = (std::string *)v168.__r_.__value_.__r.__words[0];
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v135 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
    else
      v135 = v168.__r_.__value_.__l.__size_;
    v136 = std::string::append(&v174, (const std::string::value_type *)v134, v135);
    v175 = *v136;
    v136->__r_.__value_.__l.__size_ = 0;
    v136->__r_.__value_.__r.__words[2] = 0;
    v136->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v175, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v154, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v154);
    goto LABEL_239;
  }
  v139 = (_QWORD *)*((_QWORD *)a3 + 6);
  v140 = *(__int128 **)(*v139 + 224 * *((_QWORD *)a3 + 9) + 136);
  if (*((char *)v140 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)v140, *((_QWORD *)v140 + 1));
    v139 = (_QWORD *)*((_QWORD *)a3 + 6);
  }
  else
  {
    v141 = *v140;
    v175.__r_.__value_.__r.__words[2] = *((_QWORD *)v140 + 2);
    *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v141;
  }
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = 0uLL;
  v142 = (std::__shared_weak_count *)v139[10];
  if (v142)
  {
    v173.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v142);
    if (v173.__r_.__value_.__l.__size_)
    {
      v143 = v139[9];
      v173.__r_.__value_.__r.__words[0] = v143;
    }
    else
    {
      v143 = v173.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    v143 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v143 + 472);
  v144 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v145 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v173.__r_.__value_.__r.__words[0] + 360), &v175);
  if (a3[16] <= 1)
    v147 = 1;
  else
    v147 = a3[16];
  if (v145)
  {
    v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
    v148 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v173.__r_.__value_.__r.__words[0] + 352), &v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v174);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v148 + 56);
    v177[1] = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    v177[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v148 + 9), *((_QWORD *)v148 + 10), (uint64_t)(*((_QWORD *)v148 + 10) - *((_QWORD *)v148 + 9)) >> 2);
    v147 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
    if (__p.__r_.__value_.__r.__words[2])
    {
      v177[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v147 == 1)
  {
    v137 = 0;
    v149 = Espresso::ANECompilerEngine::is_mix(v144, v146) ^ 1;
    if (a1 < 8)
      LOBYTE(v149) = 1;
    if ((v149 & 1) == 0 && *a4 >= 8)
    {
      v150 = a7[1];
      v153[0] = *a7;
      v153[1] = v150;
      if (v150)
      {
        v151 = &v150->u64[1];
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      std::string::basic_string[abi:ne180100]<0>(&v174, "Left pad exceeds hardware limit.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v174, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v153, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v174.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v153);
      v137 = 1;
    }
  }
  else
  {
    v137 = 0;
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v173);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
LABEL_240:
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  return !v137;
}

void sub_190E017B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  void *__p;
  void *v71;
  uint64_t v72;
  void *v74;
  void *v75;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&STACK[0x230]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  v74 = *(void **)(v72 - 184);
  if (v74)
  {
    *(_QWORD *)(v72 - 176) = v74;
    operator delete(v74);
  }
  v75 = *(void **)(v72 - 120);
  if (v75)
  {
    *(_QWORD *)(v72 - 112) = v75;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

void sub_190E01D10()
{
  JUMPOUT(0x190E01C40);
}

void sub_190E01D18()
{
  JUMPOUT(0x190E01C50);
}

void sub_190E01D20()
{
  JUMPOUT(0x190E01C60);
}

void sub_190E01D28()
{
  JUMPOUT(0x190E01C70);
}

void sub_190E01D30()
{
  JUMPOUT(0x190E01C80);
}

void sub_190E01D38()
{
  JUMPOUT(0x190E01C90);
}

void sub_190E01D40()
{
  JUMPOUT(0x190E01CA0);
}

void sub_190E01D48()
{
  JUMPOUT(0x190E01CB0);
}

void sub_190E01D50()
{
  JUMPOUT(0x190E01CC0);
}

void sub_190E01D58()
{
  JUMPOUT(0x190E01CD0);
}

void sub_190E01D60()
{
  JUMPOUT(0x190E01CE0);
}

void sub_190E01D68()
{
  JUMPOUT(0x190E01CF8);
}

int32x4_t *Espresso::padding_params_t::get_final_lrtb(int32x4_t *this, int16x4_t *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  __int32 v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  *this = vmovl_s16(a2[1]);
  v10 = a2[2].i16[0];
  this[1].i32[0] = a2[2].i16[1];
  this[1].i32[1] = v10;
  v11 = a2->i16[0];
  if (v11 != 4)
  {
    if (v11 == 2)
    {
      this->i64[0] = 0;
      this->i64[1] = 0;
      this[1].i64[0] = 0;
      return this;
    }
    if (v11 != 1)
      return this;
  }
  v12 = ((a6 - 1) * a8 - a4 + a10) & ~(((a6 - 1) * a8 - a4 + a10) >> 31);
  v13 = ((a5 - 1) * a7 - a3 + a9) & ~(((a5 - 1) * a7 - a3 + a9) >> 31);
  v14 = v13 >> 1;
  v15 = v13 - (v13 >> 1);
  v16 = v12 >> 1;
  v17 = v12 - (v12 >> 1);
  if (a2->i16[0] == 1)
  {
    this->i32[0] = v14;
    this->i32[1] = v15;
    this->i32[2] = v16;
    this->i32[3] = v17;
  }
  else
  {
    this->i32[0] = v15;
    this->i32[1] = v14;
    this->i32[2] = v17;
    this->i32[3] = v16;
  }
  this[1].i64[0] = 0;
  return this;
}

void Espresso::ANECompilerEngine::deconvolution_kernel::get_padding(Espresso::ANECompilerEngine::deconvolution_kernel *this, const Espresso::convolution_uniforms *a2, int a3, int a4, int a5, int a6)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  Espresso *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  Espresso *v30;
  const char *v31;
  NSObject *v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v39;
  unsigned int v40;
  void *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = *((__int16 *)a2 + 48);
  if (v8 > 1)
    v9 = (*((_DWORD *)a2 + 12) - 1) * v8 + 1;
  else
    v9 = *((_DWORD *)a2 + 12);
  v10 = *((__int16 *)a2 + 49);
  if (v10 > 1)
    v11 = (*((_DWORD *)a2 + 13) - 1) * v10 + 1;
  else
    v11 = *((_DWORD *)a2 + 13);
  *((_QWORD *)this + 2) = 0;
  v12 = *((__int16 *)a2 + 47);
  v13 = *((__int16 *)a2 + 46);
  v39 = ~(v12 * a4) + a6 + v11;
  v40 = (v11 - a6 + (a4 - 1) * v12) & ~((v11 - a6 + (a4 - 1) * v12) >> 31);
  v14 = v11 + ~(v40 >> 1);
  v15 = v39 - v14;
  *((_DWORD *)this + 2) = v14;
  *((_DWORD *)this + 3) = v39 - v14;
  v35 = (v9 - a5 + (a3 - 1) * v13) & ~((v9 - a5 + (a3 - 1) * v13) >> 31);
  v36 = ~(v13 * a3) + a5 + v9;
  v16 = v9 + ~(v35 >> 1);
  v17 = v36 - v16;
  *(_DWORD *)this = v16;
  *((_DWORD *)this + 1) = v36 - v16;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v43 = v19;
  objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.force_pads"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.force_pads"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "componentsSeparatedByString:", CFSTR(","));
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "objectAtIndexedSubscript:", 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v25, "intValue");
    *((_DWORD *)this + 2) = v14;

    objc_msgSend(v24, "objectAtIndexedSubscript:", 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v26, "intValue");
    *((_DWORD *)this + 3) = v15;

    objc_msgSend(v24, "objectAtIndexedSubscript:", 2);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v27, "intValue");
    *(_DWORD *)this = v16;

    objc_msgSend(v24, "objectAtIndexedSubscript:", 3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v28, "intValue");
    *((_DWORD *)this + 1) = v17;

  }
  Espresso::espresso_os_log_subsystem(v21, v22);
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    v33 = *((__int16 *)a2 + 47);
    *(_DWORD *)buf = 67111168;
    v45 = a4;
    v46 = 1024;
    v47 = a6;
    v48 = 1024;
    v49 = v33;
    v50 = 1024;
    v51 = v11;
    v52 = 1024;
    v53 = v39;
    v54 = 1024;
    v55 = v40 >> 1;
    v56 = 1024;
    v57 = v40 - (v40 >> 1);
    v58 = 1024;
    v59 = v14;
    v60 = 1024;
    v61 = v15;
    _os_log_debug_impl(&dword_190DAF000, v29, OS_LOG_TYPE_DEBUG, "DECONV %d\t%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", buf, 0x38u);
  }

  Espresso::espresso_os_log_subsystem(v30, v31);
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v34 = *((__int16 *)a2 + 46);
    *(_DWORD *)buf = 67111168;
    v45 = a3;
    v46 = 1024;
    v47 = a5;
    v48 = 1024;
    v49 = v34;
    v50 = 1024;
    v51 = v9;
    v52 = 1024;
    v53 = v36;
    v54 = 1024;
    v55 = v35 >> 1;
    v56 = 1024;
    v57 = v35 - (v35 >> 1);
    v58 = 1024;
    v59 = v16;
    v60 = 1024;
    v61 = v17;
    _os_log_debug_impl(&dword_190DAF000, v32, OS_LOG_TYPE_DEBUG, "DECONV %d\t%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", buf, 0x38u);
  }

}

void sub_190E021B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding(unsigned int *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  void *v28;
  void *v29;
  Espresso *v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  Espresso *v41;
  const char *v42;
  NSObject *v43;
  Espresso *v44;
  const char *v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  void *v67;
  uint8_t buf[4];
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  unsigned int v79;
  __int16 v80;
  unsigned int v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = *(__int16 *)(a2 + 70);
  if (v6 > 1)
    v7 = (*(_DWORD *)(a2 + 16) - 1) * v6 + 1;
  else
    v7 = *(_DWORD *)(a2 + 16);
  v8 = *(__int16 *)(a2 + 72);
  if (v8 > 1)
    v9 = (*(_DWORD *)(a2 + 20) - 1) * v8 + 1;
  else
    v9 = *(_DWORD *)(a2 + 20);
  v10 = *(__int16 *)(a2 + 74);
  if (v10 > 1)
    v11 = (*(_DWORD *)(a2 + 24) - 1) * v10 + 1;
  else
    v11 = *(_DWORD *)(a2 + 24);
  v13 = a3[2];
  v12 = a3[3];
  v14 = *(__int16 *)(a2 + 66);
  v16 = a4[2];
  v15 = a4[3];
  v17 = a3[4];
  v18 = *(__int16 *)(a2 + 64);
  v19 = a4[4];
  v20 = *(__int16 *)(a2 + 68);
  v62 = (v9 - v15 + (v12 - 1) * v14) & ~((v9 - v15 + (v12 - 1) * v14) >> 31);
  v63 = ~(v12 * v14) + v15 + v9;
  v64 = v9;
  v21 = v9 + ~(v62 >> 1);
  v22 = v63 - v21;
  a1[2] = v21;
  a1[3] = v63 - v21;
  v56 = (v7 - v19 + (v17 - 1) * v18) & ~((v7 - v19 + (v17 - 1) * v18) >> 31);
  v57 = ~(v17 * v18) + v19 + v7;
  v58 = v7;
  v59 = (v11 - v16 + (v13 - 1) * v20) & ~((v11 - v16 + (v13 - 1) * v20) >> 31);
  v23 = v7 + ~(v56 >> 1);
  v24 = v57 - v23;
  *a1 = v23;
  a1[1] = v57 - v23;
  v60 = ~(v13 * v20) + v16 + v11;
  v61 = v11;
  v25 = v11 + ~(v59 >> 1);
  v26 = v60 - v25;
  a1[4] = v60 - v25;
  a1[5] = v25;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v67 = v28;
  objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.force_pads"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    objc_msgSend(v67, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.force_pads"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "componentsSeparatedByString:", CFSTR(","));
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend(v33, "count") <= 5)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("com.apple.espresso.force_pads should contain 6 elements for deconv3d");
    objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v34, "intValue");
    a1[2] = v21;

    objc_msgSend(v33, "objectAtIndexedSubscript:", 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v35, "intValue");
    a1[3] = v22;

    objc_msgSend(v33, "objectAtIndexedSubscript:", 2);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v36, "intValue");
    *a1 = v23;

    objc_msgSend(v33, "objectAtIndexedSubscript:", 3);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v37, "intValue");
    a1[1] = v24;

    objc_msgSend(v33, "objectAtIndexedSubscript:", 4);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v38, "intValue");
    a1[5] = v25;

    objc_msgSend(v33, "objectAtIndexedSubscript:", 5);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v39, "intValue");
    a1[4] = v26;

  }
  Espresso::espresso_os_log_subsystem(v30, v31);
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    v47 = a3[3];
    v48 = a4[3];
    v49 = *(__int16 *)(a2 + 66);
    *(_DWORD *)buf = 67111168;
    v69 = v47;
    v70 = 1024;
    v71 = v48;
    v72 = 1024;
    v73 = v49;
    v74 = 1024;
    v75 = v64;
    v76 = 1024;
    v77 = v63;
    v78 = 1024;
    v79 = v62 >> 1;
    v80 = 1024;
    v81 = v62 - (v62 >> 1);
    v82 = 1024;
    v83 = v21;
    v84 = 1024;
    v85 = v22;
    _os_log_debug_impl(&dword_190DAF000, v40, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }

  Espresso::espresso_os_log_subsystem(v41, v42);
  v43 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    v50 = a3[4];
    v51 = a4[4];
    v52 = *(__int16 *)(a2 + 64);
    *(_DWORD *)buf = 67111168;
    v69 = v50;
    v70 = 1024;
    v71 = v51;
    v72 = 1024;
    v73 = v52;
    v74 = 1024;
    v75 = v58;
    v76 = 1024;
    v77 = v57;
    v78 = 1024;
    v79 = v56 >> 1;
    v80 = 1024;
    v81 = v56 - (v56 >> 1);
    v82 = 1024;
    v83 = v23;
    v84 = 1024;
    v85 = v24;
    _os_log_debug_impl(&dword_190DAF000, v43, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }

  Espresso::espresso_os_log_subsystem(v44, v45);
  v46 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    v53 = a3[2];
    v54 = a4[2];
    v55 = *(__int16 *)(a2 + 68);
    *(_DWORD *)buf = 67111168;
    v69 = v53;
    v70 = 1024;
    v71 = v54;
    v72 = 1024;
    v73 = v55;
    v74 = 1024;
    v75 = v61;
    v76 = 1024;
    v77 = v60;
    v78 = 1024;
    v79 = v59 >> 1;
    v80 = 1024;
    v81 = v59 - (v59 >> 1);
    v82 = 1024;
    v83 = v25;
    v84 = 1024;
    v85 = v26;
    _os_log_debug_impl(&dword_190DAF000, v46, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }

}

void sub_190E0275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17generic_factory_t6sharedERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEU13block_pointerFNS1_10shared_ptrIS0_EEvE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  char v22;

  v2 = Espresso::factories;
  v3 = (__int128 *)a1[6];
  v4 = (uint64_t **)(Espresso::factories + 8);
  v5 = *(_QWORD **)(Espresso::factories + 8);
  if (!v5)
    goto LABEL_8;
  v6 = (uint64_t **)(Espresso::factories + 8);
  do
  {
    v7 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, v3);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = (uint64_t **)v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v4 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, v6 + 4))
  {
LABEL_8:
    (*(void (**)(__int128 *__return_ptr))(a1[4] + 16))(&v20);
    v9 = *v4;
    v10 = v4;
    v11 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v10 = (uint64_t **)v9;
          v12 = v9 + 4;
          if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, v9 + 4))
            break;
          v9 = *v10;
          v11 = v10;
          if (!*v10)
            goto LABEL_14;
        }
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v3))
          break;
        v11 = v10 + 1;
        v9 = v10[1];
        if (!v9)
          goto LABEL_14;
      }
      v6 = v10;
    }
    else
    {
LABEL_14:
      v6 = (uint64_t **)operator new(0x48uLL);
      v21[0] = v6;
      v21[1] = v4;
      v22 = 0;
      v13 = (std::string *)(v6 + 4);
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v14 = *v3;
        v6[6] = (uint64_t *)*((_QWORD *)v3 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *(_OWORD *)(v6 + 7) = v20;
      v20 = 0uLL;
      v22 = 1;
      *v6 = 0;
      v6[1] = 0;
      v6[2] = (uint64_t *)v10;
      *v11 = (uint64_t *)v6;
      v15 = **(_QWORD **)v2;
      v16 = (uint64_t *)v6;
      if (v15)
      {
        *(_QWORD *)v2 = v15;
        v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 8), v16);
      ++*(_QWORD *)(v2 + 16);
      v21[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v6[7];
}

void sub_190E029B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso9factory_tINS_6SerDes21generic_serdes_objectEE6sharedEv_block_invoke(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = (std::__shared_weak_count *)operator new(0x90uLL);
  *(_OWORD *)&v2->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2630;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DAC8B8;
  v2[1].__shared_owners_ = 850045863;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[2].__shared_owners_ = 0u;
  v2[3].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_owners_ = 0u;
  v2[3].__shared_weak_owners_ = 0;
  v2[4].__vftable = (std::__shared_weak_count_vtbl *)&v2[4].__shared_owners_;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[5].__vftable = (std::__shared_weak_count_vtbl *)&v2[5].__shared_owners_;
  Espresso::SerDes::generic_serdes_object::factory_initialize_registry((uint64_t)&v2[1]);
  *a1 = v2 + 1;
  a1[1] = v2;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_190E02AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object::factory_initialize_registry(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::generic_factory_t::register_type(a1, (uint64_t)__p, &__block_literal_global_1786);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_190E02B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_factory_t::register_type(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  _QWORD v15[2];
  char v16;

  v5 = a3;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = *(uint64_t **)(a1 + 80);
  v7 = (uint64_t **)(a1 + 80);
  v8 = (uint64_t **)(a1 + 80);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v6;
        v9 = v6 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, v6 + 4))
          break;
        v6 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (_QWORD *)a2))
        break;
      v8 = v7 + 1;
      v6 = v7[1];
      if (!v6)
        goto LABEL_7;
    }
    v10 = v7;
  }
  else
  {
LABEL_7:
    v10 = operator new(0x40uLL);
    v15[0] = v10;
    v15[1] = a1 + 80;
    v16 = 0;
    v11 = (std::string *)(v10 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10[6] = *(_QWORD *)(a2 + 16);
    }
    v10[7] = 0;
    v16 = 1;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v7;
    *v8 = v10;
    v12 = **(_QWORD **)(a1 + 72);
    v13 = v10;
    if (v12)
    {
      *(_QWORD *)(a1 + 72) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v13);
    ++*(_QWORD *)(a1 + 88);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  v14 = (void *)v10[7];
  v10[7] = v5;

  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void sub_190E02C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso9factory_tINS_6SerDes13layer_io_baseEE6sharedEv_block_invoke(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = (std::__shared_weak_count *)operator new(0x90uLL);
  *(_OWORD *)&v2->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC25F8;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DAC898;
  v2[1].__shared_owners_ = 850045863;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[2].__shared_owners_ = 0u;
  v2[3].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_owners_ = 0u;
  v2[3].__shared_weak_owners_ = 0;
  v2[4].__vftable = (std::__shared_weak_count_vtbl *)&v2[4].__shared_owners_;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[5].__vftable = (std::__shared_weak_count_vtbl *)&v2[5].__shared_owners_;
  Espresso::SerDes::layer_io_base::factory_initialize_registry((uint64_t)&v2[1]);
  *a1 = v2 + 1;
  a1[1] = v2;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_190E02DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::non_maximum_suppression_kernel_cpu::on_resized(Espresso::non_maximum_suppression_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7[40];
  void *__p;
  void *v9;
  _BYTE v10[4];
  int v11;
  int v12;

  Espresso::abstract_blob_container::shape(v7, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v10, (const Espresso::layer_shape *)v7, 0);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (*((_BYTE *)this + 307))
    v4 = &v12;
  else
    v4 = &v11;
  LODWORD(v5) = *v4;
  v6 = (_QWORD *)((char *)this + 336);
  if (*((_BYTE *)this + 292))
  {
    v5 = (int)v5;
    std::vector<unsigned long>::resize(v6, (int)v5);
  }
  else
  {
    std::vector<unsigned long>::resize(v6, 0);
    v5 = (int)v5;
  }
  std::vector<float>::resize((_QWORD *)this + 45, v5);
  std::vector<unsigned long>::resize((_QWORD *)this + 48, v5);
  std::vector<float>::resize((_QWORD *)this + 51, v5);
  std::vector<unsigned long>::resize((_QWORD *)this + 54, v5);
  std::vector<int>::resize((std::vector<int> *)this + 19, v5);
}

void sub_190E02EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<float>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((uint64_t)a1, a2 - v2);
  }
}

uint64_t Espresso::net::_on_resized(Espresso::net *this)
{
  uint64_t v2;
  unint64_t i;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int *v19;
  _BOOL4 v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::runtime_error *exception;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type size;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  void *v141;
  void *v142;
  std::string v143;
  void *v144;
  void *v145;
  __int128 v146;
  __int128 v147;

  v2 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v2)
  {
    for (i = 0; i < (*((_QWORD *)this + 5) - v2) >> 4; ++i)
    {
      v4 = *(_OWORD *)(v2 + 16 * i);
      v147 = v4;
      if (*((_QWORD *)&v4 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = (_QWORD *)v4;
      if (!*((_BYTE *)this + 500))
        goto LABEL_59;
      v8 = (_QWORD *)(v4 + 40);
      v9 = *(char *)(v4 + 63);
      if (v9 < 0)
      {
        if (*(_QWORD *)(v4 + 48) != 13)
          goto LABEL_16;
        v8 = (_QWORD *)*v8;
      }
      else if (v9 != 13)
      {
        goto LABEL_16;
      }
      v10 = (_QWORD *)*v8;
      v11 = *(_QWORD *)((char *)v8 + 5);
      if (v10 != (_QWORD *)0x6E6F635F64616F6CLL || v11 != 0x746E6174736E6F63)
      {
LABEL_16:
        v13 = *(_QWORD *)(v4 + 80);
        if (*(_QWORD *)(v4 + 88) != v13)
        {
          v14 = 0;
          while (1)
          {
            v15 = *(_OWORD *)(v13 + 16 * v14);
            v146 = v15;
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
            if (*((_QWORD *)&v15 + 1))
            {
              v17 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19 = (int *)v15;
            Espresso::abstract_blob_container::shape((char *)&v143, v15);
            if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v143) <= 0)
              break;
            v20 = 0;
LABEL_33:
            if (v144)
            {
              v145 = v144;
              operator delete(v144);
            }
            if (v20)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v87 = std::string::append(&v129, ":");
              v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
              v130.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v88;
              v87->__r_.__value_.__l.__size_ = 0;
              v87->__r_.__value_.__r.__words[2] = 0;
              v87->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v128, v14);
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = &v128;
              else
                v89 = (std::string *)v128.__r_.__value_.__r.__words[0];
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
              else
                size = v128.__r_.__value_.__l.__size_;
              v91 = std::string::append(&v130, (const std::string::value_type *)v89, size);
              v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
              v131.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v92;
              v91->__r_.__value_.__l.__size_ = 0;
              v91->__r_.__value_.__r.__words[2] = 0;
              v91->__r_.__value_.__r.__words[0] = 0;
              v93 = std::string::append(&v131, ": ");
              v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
              v132.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v94;
              v93->__r_.__value_.__l.__size_ = 0;
              v93->__r_.__value_.__r.__words[2] = 0;
              v93->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v127, v19[2]);
              if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v95 = &v127;
              else
                v95 = (std::string *)v127.__r_.__value_.__r.__words[0];
              if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v96 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
              else
                v96 = v127.__r_.__value_.__l.__size_;
              v97 = std::string::append(&v132, (const std::string::value_type *)v95, v96);
              v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
              v133.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v98;
              v97->__r_.__value_.__l.__size_ = 0;
              v97->__r_.__value_.__r.__words[2] = 0;
              v97->__r_.__value_.__r.__words[0] = 0;
              v99 = std::string::append(&v133, ",");
              v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
              v134.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v100;
              v99->__r_.__value_.__l.__size_ = 0;
              v99->__r_.__value_.__r.__words[2] = 0;
              v99->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v126, v19[3]);
              if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v101 = &v126;
              else
                v101 = (std::string *)v126.__r_.__value_.__r.__words[0];
              if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v102 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
              else
                v102 = v126.__r_.__value_.__l.__size_;
              v103 = std::string::append(&v134, (const std::string::value_type *)v101, v102);
              v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              v135.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              v105 = std::string::append(&v135, ",");
              v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
              v136.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v106;
              v105->__r_.__value_.__l.__size_ = 0;
              v105->__r_.__value_.__r.__words[2] = 0;
              v105->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v125, v19[4]);
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v107 = &v125;
              else
                v107 = (std::string *)v125.__r_.__value_.__r.__words[0];
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v108 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
              else
                v108 = v125.__r_.__value_.__l.__size_;
              v109 = std::string::append(&v136, (const std::string::value_type *)v107, v108);
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v137.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              v111 = std::string::append(&v137, ",");
              v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v138.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v124, v19[5]);
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v113 = &v124;
              else
                v113 = (std::string *)v124.__r_.__value_.__r.__words[0];
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
              else
                v114 = v124.__r_.__value_.__l.__size_;
              v115 = std::string::append(&v138, (const std::string::value_type *)v113, v114);
              v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
              v139.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v116;
              v115->__r_.__value_.__l.__size_ = 0;
              v115->__r_.__value_.__r.__words[2] = 0;
              v115->__r_.__value_.__r.__words[0] = 0;
              v117 = std::string::append(&v139, ",");
              v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
              v140.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v118;
              v117->__r_.__value_.__l.__size_ = 0;
              v117->__r_.__value_.__r.__words[2] = 0;
              v117->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v123, v19[6]);
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v119 = &v123;
              else
                v119 = (std::string *)v123.__r_.__value_.__r.__words[0];
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              else
                v120 = v123.__r_.__value_.__l.__size_;
              v121 = std::string::append(&v140, (const std::string::value_type *)v119, v120);
              v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              v143.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v122;
              v121->__r_.__value_.__l.__size_ = 0;
              v121->__r_.__value_.__r.__words[2] = 0;
              v121->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v143);
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v27 = __ldaxr(p_shared_owners);
              while (__stlxr(v27 - 1, p_shared_owners));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            ++v14;
            v13 = v7[10];
            if (v14 >= (v7[11] - v13) >> 4)
              goto LABEL_45;
          }
          v21 = (_QWORD *)(v147 + 40);
          v22 = *(char *)(v147 + 63);
          if (v22 < 0)
          {
            if (*(_QWORD *)(v147 + 48) != 15)
            {
LABEL_32:
              v20 = 1;
              goto LABEL_33;
            }
            v21 = (_QWORD *)*v21;
          }
          else if (v22 != 15)
          {
            goto LABEL_32;
          }
          v23 = (_QWORD *)*v21;
          v24 = *(_QWORD *)((char *)v21 + 7);
          if (v23 == (_QWORD *)0x65636E6575716573 && v24 == 0x7461636E6F635F65)
          {
            Espresso::abstract_blob_container::shape((char *)&v140, (uint64_t)v19);
            v20 = HIDWORD(v140.__r_.__value_.__r.__words[0])
                * LODWORD(v140.__r_.__value_.__l.__data_)
                * LODWORD(v140.__r_.__value_.__r.__words[1])
                * HIDWORD(v140.__r_.__value_.__r.__words[1]) < 1;
            if (v141)
            {
              v142 = v141;
              operator delete(v141);
            }
            goto LABEL_33;
          }
          goto LABEL_32;
        }
      }
LABEL_45:
      v28 = v7[13];
      if (v7[14] != v28)
      {
        v29 = 0;
        do
        {
          v30 = *(_OWORD *)(v28 + 16 * v29);
          v146 = v30;
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = (int *)v30;
          Espresso::abstract_blob_container::shape((char *)&v143, v30);
          v35 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v143);
          if (v144)
          {
            v145 = v144;
            operator delete(v144);
          }
          if (v35 <= 0)
          {
            v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v50 = std::string::append(&v129, ":");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v130.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v128, v29);
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v128;
            else
              v52 = (std::string *)v128.__r_.__value_.__r.__words[0];
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
            else
              v53 = v128.__r_.__value_.__l.__size_;
            v54 = std::string::append(&v130, (const std::string::value_type *)v52, v53);
            v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v131.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            v56 = std::string::append(&v131, ": ");
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v127, v34[2]);
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v127;
            else
              v58 = (std::string *)v127.__r_.__value_.__r.__words[0];
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
            else
              v59 = v127.__r_.__value_.__l.__size_;
            v60 = std::string::append(&v132, (const std::string::value_type *)v58, v59);
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v133.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            v62 = std::string::append(&v133, ",");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v134.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v126, v34[3]);
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v126;
            else
              v64 = (std::string *)v126.__r_.__value_.__r.__words[0];
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
            else
              v65 = v126.__r_.__value_.__l.__size_;
            v66 = std::string::append(&v134, (const std::string::value_type *)v64, v65);
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v135.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            v68 = std::string::append(&v135, ",");
            v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v136.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v125, v34[4]);
            if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = &v125;
            else
              v70 = (std::string *)v125.__r_.__value_.__r.__words[0];
            if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
            else
              v71 = v125.__r_.__value_.__l.__size_;
            v72 = std::string::append(&v136, (const std::string::value_type *)v70, v71);
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v137.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            v74 = std::string::append(&v137, ",");
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v138.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v124, v34[5]);
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v76 = &v124;
            else
              v76 = (std::string *)v124.__r_.__value_.__r.__words[0];
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
            else
              v77 = v124.__r_.__value_.__l.__size_;
            v78 = std::string::append(&v138, (const std::string::value_type *)v76, v77);
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v139.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            v80 = std::string::append(&v139, ",");
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            v140.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v123, v34[6]);
            if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v82 = &v123;
            else
              v82 = (std::string *)v123.__r_.__value_.__r.__words[0];
            if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
            else
              v83 = v123.__r_.__value_.__l.__size_;
            v84 = std::string::append(&v140, (const std::string::value_type *)v82, v83);
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v143.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v49, &v143);
            __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (v31)
          {
            v36 = (unint64_t *)&v31->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          ++v29;
          v28 = v7[13];
        }
        while (v29 < (v7[14] - v28) >> 4);
      }
LABEL_59:
      v38 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * i);
      v39 = *(_QWORD *)(v38 + 64);
      v40 = *(std::__shared_weak_count **)(v38 + 72);
      v143.__r_.__value_.__r.__words[0] = v39;
      v143.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      if (v39)
        (*(void (**)(std::string::size_type, _QWORD *, _QWORD *))(*(_QWORD *)v39 + 80))(v39, v7 + 13, v7 + 10);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      if (*((_QWORD *)&v147 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v2 = *((_QWORD *)this + 4);
    }
  }
  return Espresso::net::_allocate_temporary_buffer(this);
}

void sub_190E03A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  void *a84;
  char a85;
  void *v85;
  int v86;
  uint64_t v87;

  if (*(char *)(v87 - 169) < 0)
    operator delete(*(void **)(v87 - 192));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v87 - 233) < 0)
    operator delete(*(void **)(v87 - 256));
  if (a85 < 0)
    operator delete(a84);
  if (a21 < 0)
    operator delete(a16);
  if (a83 < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  if (a27 < 0)
    operator delete(a22);
  if (a79 < 0)
    operator delete(a78);
  if (a77 < 0)
    operator delete(a76);
  if (a33 < 0)
    operator delete(a28);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a39 < 0)
    operator delete(a34);
  if (a71 < 0)
    operator delete(a66);
  if (a64 < 0)
    operator delete(a59);
  if (a45 < 0)
    operator delete(a40);
  if (a57 < 0)
    operator delete(a52);
  if (a51 < 0)
  {
    operator delete(a46);
    if ((v86 & 1) == 0)
    {
LABEL_42:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v87 - 128);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v87 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v86)
  {
    goto LABEL_42;
  }
  __cxa_free_exception(v85);
  goto LABEL_42;
}

void Espresso::BNNSEngine::elementwise_kernel::on_resized(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void **v4;

  v2 = a1[42];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  }
  else
  {
    v3 = (void **)a1[44];
    v4 = (void **)a1[45];
    if (v3 != v4)
    {
      do
      {
        if (*v3)
          BNNSFilterDestroy(*v3);
        ++v3;
      }
      while (v3 != v4);
      v3 = (void **)a1[44];
    }
    a1[45] = v3;
  }
}

uint64_t Espresso::generic_load_constant_kernel_impl::on_resized(uint64_t result)
{
  *(_BYTE *)(result + 360) = 1;
  return result;
}

double Espresso::generic_pool_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (*(_DWORD *)(a1 + 360))
  {
    result = *(double *)(**(_QWORD **)a3 + 8);
    *(double *)(a1 + 308) = result;
  }
  return result;
}

void Espresso::BNNSEngine::inner_product_kernel::on_resized(Espresso::BNNSEngine::inner_product_kernel *this, const void ***a2, Espresso::layer_data *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  int v59;
  unint64_t *v60;
  const char *v61;
  __int128 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  _BYTE v69[4];
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  _OWORD v75[11];
  __int128 v76;
  _OWORD v77[12];
  __int128 __p;
  _BYTE v79[188];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  Espresso::inner_product_kernel_cpu::on_resized(this, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bnns_auto_sparse");
  *((_BYTE *)this + 968) = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)this + 30, (unsigned __int8 *)&__p) != 0;
  if ((v79[7] & 0x80000000) != 0)
    operator delete((void *)__p);
  v6 = (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 1) + 8))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  Espresso::abstract_blob_container::shape((char *)&__p, **(_QWORD **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v69, (const Espresso::layer_shape *)&__p, 0);
  if (*(_QWORD *)&v79[24])
  {
    *(_QWORD *)&v79[32] = *(_QWORD *)&v79[24];
    operator delete(*(void **)&v79[24]);
  }
  Espresso::abstract_blob_container::shape((char *)&__p, (uint64_t)**a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v63, (const Espresso::layer_shape *)&__p, 0);
  if (*(_QWORD *)&v79[24])
  {
    *(_QWORD *)&v79[32] = *(_QWORD *)&v79[24];
    operator delete(*(void **)&v79[24]);
  }
  if (!*((_BYTE *)this + 344) && v74 > 3)
  {
    if (v74 == 5)
    {
      v8 = v72;
      v7 = v73;
      v9 = v71;
      goto LABEL_16;
    }
    if (v74 == 4)
    {
      v8 = v71;
      v7 = v72;
      v9 = v70;
LABEL_16:
      v10 = v8 * (uint64_t)v7 * v9;
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (!v74)
  {
LABEL_14:
    v10 = 0;
    goto LABEL_17;
  }
  v10 = *(int *)&v69[4 * v74 - 4];
LABEL_17:
  if (*((_BYTE *)this + 344) || v68 <= 3)
  {
    switch(v68)
    {
      case 1u:
        v11 = 1;
        if (!v68)
          goto LABEL_27;
        break;
      case 2u:
        v11 = v63;
        if (!v68)
          goto LABEL_27;
        break;
      case 3u:
        v11 = v64 * (uint64_t)v63;
        if (!v68)
          goto LABEL_27;
        break;
      case 4u:
        v11 = v64 * (uint64_t)v63 * v65;
        if (!v68)
          goto LABEL_27;
        break;
      case 5u:
        v11 = v64 * (uint64_t)v63 * v65 * v66;
        if (!v68)
          goto LABEL_27;
        break;
      default:
        v11 = 0;
        if (!v68)
          goto LABEL_27;
        break;
    }
    v12 = *(&v63 + (int)v68 - 1);
  }
  else if (v68 == 5)
  {
    v11 = v64 * (uint64_t)v63;
    v12 = v66 * (uint64_t)v67 * v65;
  }
  else if (v68 == 4)
  {
    v11 = v63;
    v12 = v65 * (uint64_t)v66 * v64;
  }
  else
  {
    v11 = 0;
LABEL_27:
    v12 = 0;
  }
  if (!*((_BYTE *)this + 968) || v6 != 100)
  {
    __p = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 952, &__p);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      return;
    v25 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_81;
  }
  v13 = *((_QWORD *)this + 119);
  if (!v13)
    goto LABEL_48;
  if (*(_QWORD *)(v13 + 224) != v11)
  {
    __p = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 952, &__p);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (!*((_QWORD *)this + 119))
    {
LABEL_48:
      v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 32))(**(_QWORD **)a3);
      v18 = (*(uint64_t (**)(const void *))(*(_QWORD *)**a2 + 32))(**a2);
      v19 = (char *)operator new(0x3F0uLL);
      v20 = v19;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_QWORD *)v19 = &off_1E2DB6690;
      v21 = 131073;
      *((_QWORD *)v19 + 29) = v12;
      *((_QWORD *)v19 + 30) = v10;
      *((_DWORD *)v19 + 50) = 3145729;
      *((_QWORD *)v19 + 31) = v11;
      *(_QWORD *)(v19 + 204) = 0;
      *(_OWORD *)(v19 + 212) = 0u;
      *((_DWORD *)v19 + 57) = 0;
      *((_QWORD *)v19 + 26) = *((_QWORD *)this + 122);
      memset(v75, 0, sizeof(v75));
      v22 = *((_QWORD *)this + 86);
      if (v22)
      {
        v21 = 0x20000;
        v23 = v10;
      }
      else
      {
        v22 = *((_QWORD *)this + 88);
        if (!v22)
        {
          v61 = "bnns_auto_sparse_helper: need fp16 weights";
          goto LABEL_86;
        }
        v23 = v12;
        v12 = v10;
      }
      v27 = *(_QWORD *)(v22 + 16);
      v28 = v19 + 24;
      DWORD1(v75[0]) = v21;
      *((_QWORD *)&v75[0] + 1) = v23;
      *(_QWORD *)&v75[1] = v12;
      *(_OWORD *)((char *)&v75[1] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[2] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[3] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[4] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[5] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[6] + 8) = 0uLL;
      *(_OWORD *)((char *)&v75[7] + 8) = 0uLL;
      *((_QWORD *)&v75[8] + 1) = v27;
      memset((char *)&v75[9] + 4, 0, 28);
      LODWORD(v75[9]) = 65552;
      *(_OWORD *)(v19 + 24) = 0uLL;
      *(_OWORD *)(v19 + 40) = 0uLL;
      *(_OWORD *)(v19 + 56) = 0uLL;
      *(_OWORD *)(v19 + 72) = 0uLL;
      *(_OWORD *)(v19 + 88) = 0uLL;
      *(_OWORD *)(v19 + 104) = 0uLL;
      *(_OWORD *)(v19 + 120) = 0uLL;
      *(_OWORD *)(v19 + 136) = 0uLL;
      *(_OWORD *)(v19 + 152) = 0uLL;
      *(_OWORD *)(v19 + 168) = 0uLL;
      *(_OWORD *)(v19 + 184) = 0uLL;
      if (!MEMORY[0x19401ABA0](v75, v19 + 24, 0, v11, 0, 0, v19 + 200))
      {
        v29 = 0;
        *(_QWORD *)v79 = 0;
        __p = 0uLL;
        *(_DWORD *)&v79[8] = 0;
        if (v17)
          v30 = 65552;
        else
          v30 = 65568;
        v31 = *(_OWORD *)(v20 + 120);
        *(_OWORD *)&v79[124] = *(_OWORD *)(v20 + 136);
        v32 = *(_OWORD *)(v20 + 168);
        *(_OWORD *)&v79[140] = *(_OWORD *)(v20 + 152);
        *(_OWORD *)&v79[156] = v32;
        *(_OWORD *)&v79[172] = *(_OWORD *)(v20 + 184);
        v33 = *(_OWORD *)(v20 + 56);
        *(_OWORD *)&v79[60] = *(_OWORD *)(v20 + 72);
        v34 = *(_OWORD *)(v20 + 104);
        *(_OWORD *)&v79[76] = *(_OWORD *)(v20 + 88);
        *(_OWORD *)&v79[92] = v34;
        *(_OWORD *)&v79[108] = v31;
        v35 = *(_OWORD *)(v20 + 40);
        *(_OWORD *)&v79[12] = *v28;
        *(_OWORD *)&v79[28] = v35;
        *(_OWORD *)&v79[44] = v33;
        v76 = 0uLL;
        DWORD2(v77[0]) = 0;
        *(_QWORD *)&v77[0] = 0;
        v36 = *((_QWORD *)v20 + 29);
        v37 = *((_QWORD *)v20 + 30);
        if (v18)
          v38 = 65552;
        else
          v38 = 65568;
        memset((char *)v77 + 12, 0, 176);
        *((_QWORD *)v20 + 32) = 0;
        *((_QWORD *)v20 + 33) = v37;
        *((_QWORD *)v20 + 41) = 1;
        *((_QWORD *)v20 + 42) = v37;
        *((_QWORD *)v20 + 34) = v11;
        *(_OWORD *)(v20 + 296) = 0u;
        *(_OWORD *)(v20 + 312) = 0u;
        *(_OWORD *)(v20 + 280) = 0u;
        *((_QWORD *)v20 + 49) = 0;
        *(_OWORD *)(v20 + 360) = 0u;
        *(_OWORD *)(v20 + 376) = 0u;
        *(_OWORD *)(v20 + 344) = 0u;
        *((_DWORD *)v20 + 100) = v30;
        *((_OWORD *)v20 + 37) = *(_OWORD *)&v79[172];
        v39 = *(_OWORD *)&v79[160];
        *(_OWORD *)(v20 + 564) = *(_OWORD *)&v79[144];
        *(_OWORD *)(v20 + 580) = v39;
        v40 = *(_OWORD *)&v79[32];
        *(_OWORD *)(v20 + 436) = *(_OWORD *)&v79[16];
        *(_OWORD *)(v20 + 452) = v40;
        v41 = *(_OWORD *)&v79[128];
        *(_OWORD *)(v20 + 532) = *(_OWORD *)&v79[112];
        *(_OWORD *)(v20 + 548) = v41;
        v42 = *(_OWORD *)&v79[96];
        *(_OWORD *)(v20 + 500) = *(_OWORD *)&v79[80];
        *(_OWORD *)(v20 + 516) = v42;
        v43 = *(_OWORD *)&v79[64];
        *(_OWORD *)(v20 + 468) = *(_OWORD *)&v79[48];
        *(_OWORD *)(v20 + 484) = v43;
        v44 = *(_OWORD *)v79;
        *(_OWORD *)(v20 + 404) = __p;
        *(_OWORD *)(v20 + 420) = v44;
        *((_QWORD *)v20 + 76) = 0;
        *((_QWORD *)v20 + 77) = v36;
        *((_QWORD *)v20 + 78) = v11;
        *(_OWORD *)(v20 + 632) = 0u;
        *(_OWORD *)(v20 + 648) = 0u;
        *(_OWORD *)(v20 + 664) = 0u;
        *((_QWORD *)v20 + 85) = 1;
        *((_QWORD *)v20 + 86) = v36;
        *(_OWORD *)(v20 + 696) = 0u;
        *(_OWORD *)(v20 + 712) = 0u;
        *(_OWORD *)(v20 + 728) = 0u;
        *((_QWORD *)v20 + 93) = 0;
        *((_DWORD *)v20 + 188) = v38;
        v45 = v77[6];
        *(_OWORD *)(v20 + 852) = v77[5];
        *(_OWORD *)(v20 + 868) = v45;
        v46 = v77[2];
        *(_OWORD *)(v20 + 788) = v77[1];
        *(_OWORD *)(v20 + 804) = v46;
        v47 = v77[4];
        *(_OWORD *)(v20 + 820) = v77[3];
        *(_OWORD *)(v20 + 836) = v47;
        v48 = v77[0];
        *(_OWORD *)(v20 + 756) = v76;
        *(_OWORD *)(v20 + 772) = v48;
        v49 = v77[7];
        v50 = v77[8];
        *((_OWORD *)v20 + 59) = *(_OWORD *)((char *)&v77[10] + 12);
        *((_OWORD *)v20 + 60) = 0u;
        v51 = v77[10];
        *(_OWORD *)(v20 + 916) = v77[9];
        *(_OWORD *)(v20 + 932) = v51;
        *(_OWORD *)(v20 + 884) = v49;
        *(_OWORD *)(v20 + 900) = v50;
        *((_OWORD *)v20 + 61) = 0u;
        *((_OWORD *)v20 + 62) = 0u;
        v52 = *((_QWORD *)this + 90);
        v53 = *((_QWORD *)this + 68);
        if (v53 | v52)
        {
          if (!v53)
            v53 = *((_QWORD *)this + 90);
          v29 = *(_QWORD *)(v53 + 16);
        }
        if (v52)
          v54 = 65552;
        else
          v54 = 65568;
        v55 = *(unsigned int *)(*(uint64_t (**)(Espresso::BNNSEngine::inner_product_kernel *))(*(_QWORD *)this + 384))(this);
        v56 = (*(uint64_t (**)(Espresso::BNNSEngine::inner_product_kernel *))(*(_QWORD *)this + 384))(this);
        v57 = v20 + 960;
        *((_DWORD *)v20 + 197) = 0x10000;
        *((_QWORD *)v20 + 99) = v55;
        *((_QWORD *)v20 + 107) = 1;
        *((_DWORD *)v20 + 232) = v54;
        *((_QWORD *)v20 + 115) = v29;
        *((_DWORD *)v20 + 240) = 0;
        v58 = v20 + 964;
        *(_QWORD *)(v20 + 964) = 0;
        v59 = *(_DWORD *)(v56 + 12);
        if (v59 == 2)
        {
          *v57 = 2;
          *v58 = 1048576000;
        }
        else if (v59 == 1)
        {
          *v57 = 1;
        }
        if (*(_DWORD *)(v56 + 16))
        {
          *v57 = 5;
          *(_QWORD *)v58 = *(_QWORD *)(v56 + 20);
        }
        if (*(_DWORD *)(v56 + 28))
          *v57 = 29;
        *(_QWORD *)&v62 = v20 + 24;
        *((_QWORD *)&v62 + 1) = v20;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 952, &v62);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v26 = __ldaxr(v60);
          while (__stlxr(v26 - 1, v60));
LABEL_81:
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          return;
        }
        return;
      }
      v61 = "bnns_auto_sparse_helper: BNNSNDArrayFullyConnectedSparsify failed (check BNNS logs)";
LABEL_86:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v61);
    }
  }
}

void sub_190E044B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __int128 a66;
  uint64_t v66;
  uint64_t v67;

  if (a2)
  {
    __cxa_begin_catch(a1);
    a66 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v67, &a66);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
    *(_BYTE *)(v66 + 968) = 0;
    __cxa_end_catch();
    JUMPOUT(0x190E04460);
  }
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::on_resized(Espresso::inner_product_kernel_cpu *this, const void ***a2, Espresso::layer_data *a3)
{
  const void *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  Espresso *v8;
  const char *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 106) >= 1)
  {
    v4 = **a2;
    v5 = v4
    v6 = v5[20];
    if (v6)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v16, v6 + 8);
      v7 = *((_OWORD *)v5 + 10);
      *((_OWORD *)v5 + 10) = v16;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
      v16 = v7;
      *((_DWORD *)this + 236) = 0;
      Espresso::espresso_os_log_subsystem(v8, v9);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v13 = (_QWORD *)((char *)this + 176);
        if (*((char *)this + 199) < 0)
          v13 = (_QWORD *)*v13;
        v14 = *((_DWORD *)this + 106);
        *(_DWORD *)buf = 136315394;
        v18 = v13;
        v19 = 1024;
        v20 = v14;
        _os_log_debug_impl(&dword_190DAF000, v10, OS_LOG_TYPE_DEBUG, "inner_product_kernel_cpu: layer %s cached for %d uses\n", buf, 0x12u);
      }

      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
}

void Espresso::BNNSEngine::reduce_kernel::on_resized(Espresso::BNNSEngine::reduce_kernel *this, Espresso::layer_data *a2, uint64_t **a3)
{
  _QWORD v6[3];
  char *v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  __int128 v11[2];
  void *__p;
  void *v13;
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 41))
  {
    Espresso::abstract_blob_container::shape((char *)v11, **a3);
    v7 = 0;
    v8 = 0;
    v9[0] = 0;
    v9[1] = &v7;
    v10 = 0;
    v7 = (char *)operator new(0x40uLL);
    v8 = (uint64_t)v7;
    v9[0] = v7 + 64;
    v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)v9, v11, &v14, (uint64_t)v7);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    (*(void (**)(_QWORD *__return_ptr, _QWORD, char **))(**((_QWORD **)this + 41) + 64))(v6, *((_QWORD *)this + 41), &v7);
    *(_QWORD *)&v11[0] = v6;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
    (*(void (**)(_QWORD, Espresso::layer_data *, uint64_t **))(**((_QWORD **)this + 41) + 80))(*((_QWORD *)this + 41), a2, a3);
    *(_QWORD *)&v11[0] = &v7;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  }
  else
  {
    BNNSFilterDestroy(*((void **)this + 43));
    *((_QWORD *)this + 43) = 0;
  }
}

void sub_190E047E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_reduce_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  __int128 v29[2];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;

  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v15 = **a2;
  v16 = (*a2)[1];
  v17 = *((_QWORD *)*a2 + 4);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v18, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  if (*(_BYTE *)(a1 + 320))
  {
    v6 = *(_DWORD *)(a1 + 316);
    if ((v6 & 0x80000000) == 0)
    {
      v7 = DWORD1(v16);
      if ((_DWORD)v16 == 1)
        v8 = 4;
      else
        v8 = 5;
      if (DWORD1(v16) == -1)
        v7 = v8;
      v6 -= v7;
    }
    if (v6 >= 0xFFFFFFFB)
      *(_DWORD *)(a1 + 288) = *((_DWORD *)&unk_191AB3680 + v6 + 5);
  }
  v9 = *(_DWORD *)(a1 + 288);
  switch(v9)
  {
    case 1:
      LODWORD(v15) = 1;
      goto LABEL_21;
    case 2:
      DWORD1(v15) = 1;
      goto LABEL_21;
    case 3:
      *(_QWORD *)&v15 = 0x100000001;
      goto LABEL_21;
    case 4:
      goto LABEL_19;
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      goto LABEL_21;
    case 7:
      *(_QWORD *)&v15 = 0x100000001;
LABEL_19:
      DWORD2(v15) = 1;
      goto LABEL_21;
    case 8:
      HIDWORD(v15) = 1;
      goto LABEL_21;
    case 16:
      goto LABEL_15;
    default:
      if (v9 != 31)
        goto LABEL_21;
      *(_QWORD *)&v10 = 0x100000001;
      *((_QWORD *)&v10 + 1) = 0x100000001;
      v15 = v10;
LABEL_15:
      LODWORD(v16) = 1;
LABEL_21:
      if ((*(_DWORD *)(a1 + 280) & 0xFFFFFFFE) == 6)
      {
        v23 = v15;
        v24 = v16;
        v25 = v17;
        __p = 0;
        v27 = 0;
        v28 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, (uint64_t)v19, (v19 - (_BYTE *)v18) >> 2);
        v29[0] = v15;
        v29[1] = v16;
        v30 = v17;
        v31 = 0;
        v32[0] = 0;
        v32[1] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31, v18, (uint64_t)v19, (v19 - (_BYTE *)v18) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v21 = a3;
        v22 = 0;
        v11 = (char *)operator new(0x80uLL);
        *a3 = v11;
        a3[1] = v11;
        a3[2] = v11 + 128;
        v12 = 0;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v23, &v33, (uint64_t)v11);
        do
        {
          v13 = (void *)v32[v12 - 1];
          if (v13)
          {
            v32[v12] = v13;
            operator delete(v13);
          }
          v12 -= 8;
        }
        while (v12 != -16);
      }
      else
      {
        v23 = v15;
        v24 = v16;
        v25 = v17;
        __p = 0;
        v27 = 0;
        v28 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, (uint64_t)v19, (v19 - (_BYTE *)v18) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v21 = a3;
        v22 = 0;
        v14 = (char *)operator new(0x40uLL);
        *a3 = v14;
        a3[1] = v14;
        a3[2] = v14 + 64;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v23, v29, (uint64_t)v14);
        if (__p)
        {
          v27 = __p;
          operator delete(__p);
        }
      }
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      return;
  }
}

void sub_190E04AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t Espresso::net::_allocate_temporary_buffer(Espresso::net *this)
{
  uint64_t *v1;
  uint64_t *v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _OWORD v34[2];
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;

  v36 = 0u;
  v37 = 0u;
  v38 = 1065353216;
  v1 = (uint64_t *)*((_QWORD *)this + 4);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (v1 != v2)
  {
    do
    {
      v5 = *v1;
      v4 = (std::__shared_weak_count *)v1[1];
      *(_QWORD *)&v34[0] = *v1;
      *((_QWORD *)&v34[0] + 1) = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 64) + 96))(*(_QWORD *)(v5 + 64), v5 + 104, v5 + 80);
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 64) + 104))(*(_QWORD *)(v5 + 64));
      if (v8 <= v9)
        v8 = v9;
      v11 = *(_DWORD *)(v5 + 8);
      v10 = (unsigned int *)(v5 + 8);
      if (v8 > std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v36, v11, v10)[3])std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v36, *v10, v10)[3] = v8;
      if (v4)
      {
        v12 = (unint64_t *)&v4->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v1 += 2;
    }
    while (v1 != v2);
    if (*((_QWORD *)&v37 + 1))
    {
      memset(v34, 0, sizeof(v34));
      v35 = 1065353216;
      v14 = (uint64_t *)*((_QWORD *)this + 4);
      v15 = (uint64_t *)*((_QWORD *)this + 5);
      while (v14 != v15)
      {
        v17 = *v14;
        v16 = (std::__shared_weak_count *)v14[1];
        v32 = *v14;
        v33 = v16;
        if (v16)
        {
          v18 = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 64) + 96))(*(_QWORD *)(v17 + 64), v17 + 104, v17 + 80);
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 64) + 104))(*(_QWORD *)(v17 + 64));
        v22 = *(_DWORD *)(v17 + 8);
        v31 = v22;
        if (v21 | v20)
        {
          if (std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v34, v22, &v31)[3])
          {
            v23 = *(_QWORD *)(v17 + 64);
            v24 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v34, v22, &v31);
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 120))(v23, v24 + 3);
          }
          else
          {
            v25 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v34, v22, &v31);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v25 + 3, *(_QWORD *)(v17 + 64), *(_QWORD *)(v17 + 72));
            v26 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v34, v22, &v31)[3];
            v27 = std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v36, *(_DWORD *)(v17 + 8), (_DWORD *)(v17 + 8));
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 112))(v26, v27[3]);
          }
        }
        if (v16)
        {
          v28 = (unint64_t *)&v16->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 += 2;
      }
      std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table((uint64_t)v34);
    }
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v36);
}

void sub_190E04E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table((uint64_t)va1);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::tmp_aux_buffer_size(Espresso::base_kernel *this)
{
  return 0;
}

uint64_t Espresso::base_kernel::tmp_aux_buffer_size()
{
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_190E05244(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::pass_blob_name_indexing::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  std::vector<std::string>::size_type *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t *p_shared_weak_owners;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  char v26;
  std::string **v27;
  std::string *v28;
  std::string *v29;
  uint64_t shared_weak_owners;
  unint64_t shared_owners;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  _DWORD *v47;
  void **v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  _DWORD *v69;
  void **v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int *v87;
  int *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t **v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  int *v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v111;
  char *v112;
  std::vector<std::string> *v113;
  _QWORD *v114;
  Espresso::net *v115;
  _QWORD *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *p_shared_owners;
  char *v122;
  char *v123;
  uint64_t *v124;
  std::__shared_weak_count *v125;
  unint64_t v126;
  uint64_t *v127[2];
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0xE0uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = &off_1E2D9B1C8;
  v109 = v4 + 24;
  *((_OWORD *)v4 + 2) = 0u;
  v6 = (std::vector<std::string>::size_type *)(v4 + 32);
  *(_QWORD *)v4 = &off_1E2DBE148;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  v113 = (std::vector<std::string> *)(v4 + 80);
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 1065353216;
  v125 = (std::__shared_weak_count *)v4;
  v126 = 0;
  v115 = a1;
  if (*((_QWORD *)a1 + 5) == *((_QWORD *)a1 + 4))
  {
    v18 = (std::__shared_weak_count *)v4;
    v17 = 0;
  }
  else
  {
    v7 = (char *)a1 + 56;
    v8 = (char *)a1 + 96;
    do
    {
      v127[0] = (uint64_t *)&v126;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v126, (uint64_t)&std::piecewise_construct, v127);
      v127[0] = (uint64_t *)&v126;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v8, &v126, (uint64_t)&std::piecewise_construct, v127);
      v11 = 0;
      v12 = 0;
      v127[0] = v9 + 3;
      v127[1] = v10 + 3;
      do
      {
        v13 = v11;
        v14 = v127[v12];
        v15 = *v14;
        v16 = v14[1];
        while (v15 != v16)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v128, v15, v15);
          v15 += 24;
        }
        v11 = 1;
        v12 = 1;
      }
      while ((v13 & 1) == 0);
      ++v126;
      a1 = v115;
    }
    while (v126 < (uint64_t)(*((_QWORD *)v115 + 5) - *((_QWORD *)v115 + 4)) >> 4);
    v17 = *((_QWORD *)&v129 + 1);
    v18 = v125;
  }
  v18[1].__shared_owners_ = v17;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v128);
  p_shared_owners = &v18[6].__shared_owners_;
  std::vector<Espresso::layer_shape>::resize(&v18[6].__shared_owners_, v18[1].__shared_owners_);
  std::vector<std::string>::resize(v113, *v6);
  p_shared_weak_owners = &v18[1].__shared_weak_owners_;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)&v18[1].__shared_weak_owners_, vcvtps_u32_f32((float)(unint64_t)v18[1].__shared_owners_ / *(float *)&v18[3].__vftable));
  v119 = &v18[4].__shared_owners_;
  std::vector<std::vector<int>>::resize(&v18[4].__shared_owners_, (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4);
  v120 = &v18[5].__shared_owners_;
  std::vector<std::vector<int>>::resize(&v18[5].__shared_owners_, (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4);
  v126 = 0;
  if (*((_QWORD *)a1 + 5) != *((_QWORD *)a1 + 4))
  {
    v111 = (char *)a1 + 96;
    v112 = (char *)a1 + 56;
    v122 = (char *)a1 + 184;
    v123 = (char *)a1 + 192;
    v20 = &std::piecewise_construct;
    do
    {
      *(_QWORD *)&v128 = &v126;
      v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v112, &v126, (uint64_t)v20, (uint64_t **)&v128);
      *(_QWORD *)&v128 = &v126;
      v22 = (uint64_t)v20;
      v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v111, &v126, (uint64_t)v20, (uint64_t **)&v128);
      v24 = 0;
      v25 = 0;
      v116 = v21;
      v114 = v23;
      *(_QWORD *)&v128 = v21 + 3;
      *((_QWORD *)&v128 + 1) = v23 + 3;
      do
      {
        v26 = v24;
        v27 = (std::string **)*((_QWORD *)&v128 + v25);
        v29 = *v27;
        v28 = v27[1];
        while (v29 != v28)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(p_shared_weak_owners, (unsigned __int8 *)v29))
          {
            shared_weak_owners = v125[2].__shared_weak_owners_;
            shared_owners = v125[1].__shared_owners_;
            if ((int)shared_weak_owners >= shared_owners)
              Espresso::throw_exception_selector<Espresso::invalid_state_error,int &,unsigned long &>(v125[2].__shared_weak_owners_, shared_owners);
            v32 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v122, v29);
            if (v123 != v32)
            {
              v33 = *p_shared_owners + ((uint64_t)(int)shared_weak_owners << 6);
              v34 = *(_OWORD *)(v32 + 56);
              v35 = *(_OWORD *)(v32 + 72);
              *(_QWORD *)(v33 + 32) = *((_QWORD *)v32 + 11);
              *(_OWORD *)v33 = v34;
              *(_OWORD *)(v33 + 16) = v35;
              if ((char *)v33 != v32 + 56)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v33 + 40), *((char **)v32 + 12), *((_QWORD *)v32 + 13), (uint64_t)(*((_QWORD *)v32 + 13) - *((_QWORD *)v32 + 12)) >> 2);
            }
            v127[0] = (uint64_t *)v29;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)p_shared_weak_owners, (unsigned __int8 *)v29, v22, (__int128 **)v127)+ 10) = shared_weak_owners;
            std::string::operator=(&v113->__begin_[(int)shared_weak_owners], v29);
          }
          ++v29;
        }
        v24 = 1;
        v25 = 1;
      }
      while ((v26 & 1) == 0);
      std::vector<int>::reserve((std::vector<int> *)(*v119 + 24 * v126), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114[4] - v114[3]) >> 3));
      std::vector<int>::reserve((std::vector<int> *)(*v120 + 24 * v126), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116[4] - v116[3]) >> 3));
      v37 = (unsigned __int8 *)v116[3];
      v36 = (unsigned __int8 *)v116[4];
      v117 = v36;
      while (v37 != v36)
      {
        v38 = v126;
        v39 = *v120;
        v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(p_shared_weak_owners, v37);
        v41 = v40;
        if (!v40)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v42 = v39 + 24 * v38;
        v45 = *(char **)(v42 + 8);
        v44 = v42 + 8;
        v43 = v45;
        v46 = *(_QWORD *)(v44 + 8);
        if ((unint64_t)v45 >= v46)
        {
          v48 = (void **)(v39 + 24 * v38);
          v49 = (char *)*v48;
          v50 = (v43 - (_BYTE *)*v48) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v52 = v46 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
          v54 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v53)
            v54 = v51;
          if (v54)
          {
            v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v54);
            v43 = *(char **)v44;
            v49 = (char *)*v48;
          }
          else
          {
            v55 = 0;
          }
          v56 = (_DWORD *)(v54 + 4 * v50);
          *v56 = *((_DWORD *)v41 + 10);
          v47 = v56 + 1;
          while (v43 != v49)
          {
            v57 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *--v56 = v57;
          }
          *v48 = v56;
          *(_QWORD *)v44 = v47;
          *(_QWORD *)(v44 + 8) = v54 + 4 * v55;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_DWORD *)v43 = *((_DWORD *)v40 + 10);
          v47 = v43 + 4;
        }
        *(_QWORD *)v44 = v47;
        v37 += 24;
        v36 = v117;
      }
      v59 = (unsigned __int8 *)v114[3];
      v58 = (unsigned __int8 *)v114[4];
      v118 = v58;
      while (v59 != v58)
      {
        v60 = v126;
        v61 = *v119;
        v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(p_shared_weak_owners, v59);
        v63 = v62;
        if (!v62)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v64 = v61 + 24 * v60;
        v67 = *(char **)(v64 + 8);
        v66 = v64 + 8;
        v65 = v67;
        v68 = *(_QWORD *)(v66 + 8);
        if ((unint64_t)v67 >= v68)
        {
          v70 = (void **)(v61 + 24 * v60);
          v71 = (char *)*v70;
          v72 = (v65 - (_BYTE *)*v70) >> 2;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v74 = v68 - (_QWORD)v71;
          if (v74 >> 1 > v73)
            v73 = v74 >> 1;
          v53 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL;
          v75 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v53)
            v75 = v73;
          if (v75)
          {
            v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v75);
            v65 = *(char **)v66;
            v71 = (char *)*v70;
          }
          else
          {
            v76 = 0;
          }
          v77 = (_DWORD *)(v75 + 4 * v72);
          *v77 = *((_DWORD *)v63 + 10);
          v69 = v77 + 1;
          while (v65 != v71)
          {
            v78 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--v77 = v78;
          }
          *v70 = v77;
          *(_QWORD *)v66 = v69;
          *(_QWORD *)(v66 + 8) = v75 + 4 * v76;
          if (v71)
            operator delete(v71);
        }
        else
        {
          *(_DWORD *)v65 = *((_DWORD *)v62 + 10);
          v69 = v65 + 4;
        }
        *(_QWORD *)v66 = v69;
        v59 += 24;
        v58 = v118;
      }
      v18 = v125;
      ++v126;
      a1 = v115;
      v20 = (void *)v22;
    }
    while (v126 < (uint64_t)(*((_QWORD *)v115 + 5) - *((_QWORD *)v115 + 4)) >> 4);
  }
  v79 = &v18[8].__shared_owners_;
  std::vector<std::vector<unsigned long>>::resize(&v18[8].__shared_owners_, v18[1].__shared_owners_);
  v124 = &v18[7].__shared_owners_;
  std::vector<unsigned long>::resize(&v18[7].__shared_owners_, v18[1].__shared_owners_);
  v80 = (uint64_t *)v18[7].__shared_owners_;
  v81 = v18[7].__shared_weak_owners_;
  v83 = *((_QWORD *)a1 + 4);
  v82 = *((_QWORD *)a1 + 5);
  if (v81 - (uint64_t)v80 >= 1)
  {
    v84 = ((unint64_t)(v81 - (_QWORD)v80) >> 3) + 1;
    do
    {
      *v80++ = (v82 - v83) >> 4;
      --v84;
    }
    while (v84 > 1);
  }
  if (v82 != v83)
  {
    v85 = 0;
    do
    {
      v86 = *v120 + 24 * v85;
      v88 = *(int **)v86;
      v87 = *(int **)(v86 + 8);
      while (v88 != v87)
      {
        v89 = *v79 + 24 * *v88;
        v91 = (unint64_t **)(v89 + 8);
        v90 = *(unint64_t **)(v89 + 8);
        v92 = *(_QWORD *)(v89 + 16);
        if ((unint64_t)v90 >= v92)
        {
          v94 = *(unint64_t **)v89;
          v95 = ((uint64_t)v90 - *(_QWORD *)v89) >> 3;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v97 = v92 - (_QWORD)v94;
          if (v97 >> 2 > v96)
            v96 = v97 >> 2;
          v53 = (unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8;
          v98 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v53)
            v98 = v96;
          if (v98)
          {
            v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v98);
            v90 = *v91;
            v94 = *(unint64_t **)v89;
          }
          else
          {
            v99 = 0;
          }
          v100 = (unint64_t *)(v98 + 8 * v95);
          *v100 = v85;
          v93 = v100 + 1;
          while (v90 != v94)
          {
            v101 = *--v90;
            *--v100 = v101;
          }
          *(_QWORD *)v89 = v100;
          *v91 = v93;
          *(_QWORD *)(v89 + 16) = v98 + 8 * v99;
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v90 = v85;
          v93 = v90 + 1;
        }
        *v91 = v93;
        ++v88;
      }
      v102 = *v119 + 24 * v85;
      v103 = *(int **)v102;
      v104 = *(int **)(v102 + 8);
      if (v103 != v104)
      {
        v105 = *v124;
        do
        {
          v106 = *v103++;
          *(_QWORD *)(v105 + 8 * v106) = v85;
        }
        while (v103 != v104);
      }
      ++v85;
    }
    while (v85 < (uint64_t)(*((_QWORD *)v115 + 5) - *((_QWORD *)v115 + 4)) >> 4);
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  do
    v107 = __ldxr(v5);
  while (__stxr(v107 + 1, v5));
  *(_QWORD *)(a2 + 8) = v109;
  *(_QWORD *)(a2 + 16) = v125;
  do
    v108 = __ldaxr(v5);
  while (__stlxr(v108 - 1, v5));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
}

void sub_190E05B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unint64_t *v27;
  unint64_t v29;

  do
    v29 = __ldaxr(v27);
  while (__stlxr(v29 - 1, v27));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
    std::__shared_weak_count::__release_weak(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  std::vector<int>::pointer begin;
  int *end;
  int *v10;
  int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(__n);
    v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void std::vector<unsigned long>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)a1, a2 - v2);
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::string *value;
  std::string *end;
  std::vector<std::string>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  std::string *v13;
  std::string *v14;
  size_t v15;
  std::string *v16;
  __int128 v17;
  std::vector<std::string>::pointer v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v12 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(this->__end_, v12);
      end = (std::string *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v8 = v7 + __n;
    if (v7 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::string *)&v11[24 * v7];
    v14 = (std::string *)&v11[24 * v10];
    v15 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = (std::string *)((char *)v13 + v15);
    if (end == begin)
    {
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (end)
LABEL_24:
        operator delete(end);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v13[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_ = v17;
        --v13;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      v18 = this->__begin_;
      end = this->__end_;
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (end != v18)
      {
        do
        {
          if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(end[-1].__r_.__value_.__l.__data_);
          --end;
        }
        while (end != v18);
        end = v18;
      }
      if (end)
        goto LABEL_24;
    }
  }
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

void std::vector<std::vector<unsigned long>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void std::vector<std::vector<unsigned long>>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<Espresso::layer_shape>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v15 = v4 + (a2 << 6);
      while (v5 != v15)
      {
        v16 = *(void **)(v5 - 24);
        if (v16)
        {
          *(_QWORD *)(v5 - 16) = v16;
          operator delete(v16);
        }
        v5 -= 64;
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (a2 - v6 <= (v7 - v5) >> 6)
    {
      v17 = v5 + 16;
      v18 = (a2 << 6) - (v6 << 6);
      do
      {
        *(_QWORD *)(v17 + 40) = 0;
        *(_OWORD *)(v17 + 24) = 0uLL;
        *(_OWORD *)(v17 + 8) = 0uLL;
        *(_OWORD *)(v17 - 16) = xmmword_191A8AA80;
        *(_QWORD *)v17 = 0xFFFFFFFF00000001;
        v17 += 64;
        v18 -= 64;
      }
      while (v18);
      a1[1] = v5 + ((a2 - v6) << 6);
    }
    else
    {
      if (a2 >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = a1 + 2;
      v8 = v7 - v4;
      v9 = v8 >> 5;
      if (v8 >> 5 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
        v10 = 0x3FFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v10);
      v19 = v11;
      v20 = &v11[64 * v6];
      v22 = &v11[64 * v12];
      v13 = v20 + 16;
      v14 = (a2 << 6) - (v6 << 6);
      do
      {
        *((_QWORD *)v13 + 5) = 0;
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *((_OWORD *)v13 - 1) = xmmword_191A8AA80;
        *(_QWORD *)v13 = 0xFFFFFFFF00000001;
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
      v21 = &v11[64 * a2];
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, &v19);
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v19);
    }
  }
}

void Espresso::activation_kernel_cpu::on_resized(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 392, &v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 408, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void Espresso::BNNSEngine::batch_matmul_kernel::on_resized(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 283))
  {
    BNNSFilterDestroy(*(void **)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
}

void Espresso::softmax_nd_kernel_cpu::on_resized(std::vector<int> *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int *begin;
  _BYTE v5[24];
  std::vector<int> v6;
  char v7[40];
  void *__p;
  void *v9;

  Espresso::abstract_blob_container::shape(v7, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, (const Espresso::layer_shape *)v7, 0);
  Espresso::layer_nd_shape::shape_vector(&v6, (uint64_t)v5);
  begin = this[12].__begin_;
  if (begin)
  {
    this[12].__end_ = begin;
    operator delete(begin);
    this[12].__begin_ = 0;
    this[12].__end_ = 0;
    this[12].__end_cap_.__value_ = 0;
  }
  this[12] = v6;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_190E066F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::load_constant_kernel::blob_options(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t espresso_network_select_configuration(_QWORD *a1, int a2, char *a3)
{
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *v19;
  char *v20;
  char **v21;
  uint64_t *v22;
  char v23;
  _QWORD *v24;
  char **v25;
  char *v26;
  const char *v27;
  __int128 v28;
  NSObject *v29;
  _QWORD *v30;
  NSObject *v31;
  const char *v32;
  __int128 v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int v104;
  BOOL v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  unsigned int v114;
  uint64_t *v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  char *__s;
  int v127;
  void *__p[2];
  _BYTE v129[24];
  void *v130[3];
  __int128 v131;
  __int128 v132;
  int v133;
  _QWORD v134[3];
  char **v135;
  char *v136[2];
  _DWORD *v137;
  _DWORD *v138;
  unint64_t v139;
  void *v140;
  _QWORD *v141;
  unint64_t v142;
  void *v143;
  char *v144;
  unint64_t v145;
  void *v146;
  char *v147;
  unint64_t v148;
  void *v149;
  char *v150;
  unint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  _BYTE buf[18];
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  if (!a1
  {
    return 4294967290;
  }
  if (*(_DWORD *)(a1[133] + 160))
    return 4294967291;
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v158);
  v8 = v158;
  if (!v158)
  {
    v6 = 4294967290;
    goto LABEL_206;
  }
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  memset(v134, 0, sizeof(v134));
  v136[0] = 0;
  v136[1] = 0;
  v135 = v136;
  if (a3)
  {
    v9 = a3;
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    v10 = v8 + 98;
    v11 = (_QWORD *)v8[98];
    if (!v11)
      goto LABEL_16;
    v12 = v8 + 98;
    do
    {
      v13 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11 + 4, __p);
      v14 = v11 + 1;
      if (!v13)
      {
        v14 = v11;
        v12 = v11;
      }
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v12 == v10 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v12 + 4))
LABEL_16:
      v12 = v8 + 98;
    if ((v129[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    if (v10 == v12)
    {
      v122 = 0;
      v6 = 4294967290;
      goto LABEL_192;
    }
    a3 = v9;
    if (v134 != v12 + 7)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v134, (std::string *)v12[7], (std::string *)v12[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[8] - v12[7]) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)&v135, (__int128 *)v12[10], (__int128 *)(v12 + 11));
    }
  }
  v131 = 0u;
  v132 = 0u;
  v133 = 1065353216;
  v15 = (_QWORD *)v8[103];
  if (v15 != v8 + 104)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v131, (uint64_t)(v15 + 4), (uint64_t)(v15 + 4));
      v16 = (_QWORD *)v15[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v15[2];
          v18 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      v15 = v17;
    }
    while (v17 != v8 + 104);
  }
  v19 = (uint64_t *)v135;
  if (v135 != v136)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v131, (uint64_t)(v19 + 4), (uint64_t)(v19 + 4));
      v20 = (char *)v19[1];
      if (v20)
      {
        do
        {
          v21 = (char **)v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char **)v19[2];
          v18 = *v21 == (char *)v19;
          v19 = (uint64_t *)v21;
        }
        while (!v18);
      }
      v19 = (uint64_t *)v21;
    }
    while (v21 != v136);
  }
  v127 = a2;
  __s = a3;
  v22 = (uint64_t *)v132;
  if (!(_QWORD)v132)
  {
    v107 = (uint64_t)v155;
    v108 = (uint64_t)v152;
    v109 = v149;
    v110 = v146;
    v111 = v143;
    v106 = v140;
    v36 = v141;
    goto LABEL_175;
  }
  v23 = 0;
  do
  {
    v24 = v22 + 2;
    *(_OWORD *)&v129[8] = 0u;
    memset(v130, 0, sizeof(v130));
    *(_OWORD *)__p = xmmword_191A8AA80;
    *(_QWORD *)v129 = 0xFFFFFFFF00000001;
    v25 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v135, v22 + 2);
    v26 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v8 + 103), v22 + 2);
    if (v136 != v25)
    {
      v28 = *(_OWORD *)(v25 + 9);
      *(_OWORD *)__p = *(_OWORD *)(v25 + 7);
      *(_OWORD *)v129 = v28;
      *(_QWORD *)&v129[16] = v25[11];
      if (__p != (void **)(v25 + 7))
        v26 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v130, v25[12], (uint64_t)v25[13], (v25[13] - v25[12]) >> 2);
      Espresso::espresso_os_log_subsystem((Espresso *)v26, v27);
      v29 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        goto LABEL_53;
      v30 = v22 + 2;
      if (*((char *)v22 + 39) < 0)
        v30 = (_QWORD *)*v24;
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = v30;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = __p[0];
      v161 = 1024;
      v162 = HIDWORD(__p[0]);
      v163 = 1024;
      v164 = (int)__p[1];
      v165 = 1024;
      v166 = HIDWORD(__p[1]);
      v167 = 1024;
      v168 = *(_DWORD *)v129;
      v169 = 1024;
      v170 = *(_DWORD *)&v129[4];
      v31 = v29;
      v32 = "[configuration] %s %d %d %d %d %d, rank=%d\n";
      goto LABEL_52;
    }
    if (v8 + 104 == (_QWORD *)v26)
      goto LABEL_54;
    v33 = *(_OWORD *)(v26 + 72);
    *(_OWORD *)__p = *(_OWORD *)(v26 + 56);
    *(_OWORD *)v129 = v33;
    *(_QWORD *)&v129[16] = *((_QWORD *)v26 + 11);
    if (__p != (void **)(v26 + 56))
      v26 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v130, *((char **)v26 + 12), *((_QWORD *)v26 + 13), (uint64_t)(*((_QWORD *)v26 + 13) - *((_QWORD *)v26 + 12)) >> 2);
    Espresso::espresso_os_log_subsystem((Espresso *)v26, v27);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      v34 = v22 + 2;
      if (*((char *)v22 + 39) < 0)
        v34 = (_QWORD *)*v24;
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = v34;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = __p[0];
      v161 = 1024;
      v162 = HIDWORD(__p[0]);
      v163 = 1024;
      v164 = (int)__p[1];
      v165 = 1024;
      v166 = HIDWORD(__p[1]);
      v167 = 1024;
      v168 = *(_DWORD *)v129;
      v169 = 1024;
      v170 = *(_DWORD *)&v129[4];
      v31 = v29;
      v32 = "[configuration (default)] %s %d %d %d %d %d, rank=%d\n";
LABEL_52:
      _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, v32, buf, 0x30u);
    }
LABEL_53:

LABEL_54:
    if (*((char *)v22 + 39) < 0)
      v24 = (_QWORD *)*v24;
    v35 = (char *)v141;
    if ((unint64_t)v141 >= v142)
    {
      v37 = (char *)v140;
      v38 = ((char *)v141 - (_BYTE *)v140) >> 3;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v40 = v142 - (_QWORD)v140;
      if ((uint64_t)(v142 - (_QWORD)v140) >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
      else
        v42 = 0;
      v43 = (_QWORD *)(v41 + 8 * v38);
      *v43 = v24;
      v36 = v43 + 1;
      if (v35 != v37)
      {
        do
        {
          v44 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v43 = v44;
        }
        while (v35 != v37);
        v35 = (char *)v140;
      }
      v140 = v43;
      v142 = v41 + 8 * v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v141 = v24;
      v36 = v35 + 8;
    }
    v141 = v36;
    v45 = v156;
    if ((unint64_t)v156 >= v157)
    {
      v47 = v155;
      v48 = (v156 - v155) >> 2;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 62)
        goto LABEL_211;
      v50 = v157 - (_QWORD)v155;
      if ((uint64_t)(v157 - (_QWORD)v155) >> 1 > v49)
        v49 = v50 >> 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
        v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
      else
        v52 = 0;
      v53 = (char *)(v51 + 4 * v48);
      *(_DWORD *)v53 = __p[0];
      v46 = v53 + 4;
      while (v45 != v47)
      {
        v54 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v53 - 1) = v54;
        v53 -= 4;
      }
      v155 = v53;
      v157 = v51 + 4 * v52;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_DWORD *)v156 = __p[0];
      v46 = v45 + 4;
    }
    v156 = v46;
    v55 = v153;
    if ((unint64_t)v153 >= v154)
    {
      v57 = v152;
      v58 = (v153 - v152) >> 2;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 62)
        goto LABEL_211;
      v60 = v154 - (_QWORD)v152;
      if ((uint64_t)(v154 - (_QWORD)v152) >> 1 > v59)
        v59 = v60 >> 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
        v61 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v61);
      else
        v62 = 0;
      v63 = (char *)(v61 + 4 * v58);
      *(_DWORD *)v63 = HIDWORD(__p[0]);
      v56 = v63 + 4;
      while (v55 != v57)
      {
        v64 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *((_DWORD *)v63 - 1) = v64;
        v63 -= 4;
      }
      v152 = v63;
      v154 = v61 + 4 * v62;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_DWORD *)v153 = HIDWORD(__p[0]);
      v56 = v55 + 4;
    }
    v153 = v56;
    v65 = v150;
    if ((unint64_t)v150 >= v151)
    {
      v67 = (char *)v149;
      v68 = (v150 - (_BYTE *)v149) >> 2;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 62)
        goto LABEL_211;
      v70 = v151 - (_QWORD)v149;
      if ((uint64_t)(v151 - (_QWORD)v149) >> 1 > v69)
        v69 = v70 >> 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
        v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v71);
      else
        v72 = 0;
      v73 = (char *)(v71 + 4 * v68);
      *(_DWORD *)v73 = __p[1];
      v66 = v73 + 4;
      while (v65 != v67)
      {
        v74 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      v149 = v73;
      v151 = v71 + 4 * v72;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *(_DWORD *)v150 = __p[1];
      v66 = v65 + 4;
    }
    v150 = v66;
    v75 = v147;
    if ((unint64_t)v147 >= v148)
    {
      v77 = (char *)v146;
      v78 = (v147 - (_BYTE *)v146) >> 2;
      v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62)
        goto LABEL_211;
      v80 = v148 - (_QWORD)v146;
      if ((uint64_t)(v148 - (_QWORD)v146) >> 1 > v79)
        v79 = v80 >> 1;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v79;
      if (v81)
        v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v81);
      else
        v82 = 0;
      v83 = (char *)(v81 + 4 * v78);
      *(_DWORD *)v83 = HIDWORD(__p[1]);
      v76 = v83 + 4;
      while (v75 != v77)
      {
        v84 = *((_DWORD *)v75 - 1);
        v75 -= 4;
        *((_DWORD *)v83 - 1) = v84;
        v83 -= 4;
      }
      v146 = v83;
      v148 = v81 + 4 * v82;
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(_DWORD *)v147 = HIDWORD(__p[1]);
      v76 = v75 + 4;
    }
    v147 = v76;
    v85 = v144;
    if ((unint64_t)v144 >= v145)
    {
      v87 = (char *)v143;
      v88 = (v144 - (_BYTE *)v143) >> 2;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62)
        goto LABEL_211;
      v90 = v145 - (_QWORD)v143;
      if ((uint64_t)(v145 - (_QWORD)v143) >> 1 > v89)
        v89 = v90 >> 1;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
        v91 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
        v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v91);
      else
        v92 = 0;
      v93 = (char *)(v91 + 4 * v88);
      *(_DWORD *)v93 = *(_DWORD *)v129;
      v86 = v93 + 4;
      while (v85 != v87)
      {
        v94 = *((_DWORD *)v85 - 1);
        v85 -= 4;
        *((_DWORD *)v93 - 1) = v94;
        v93 -= 4;
      }
      v143 = v93;
      v145 = v91 + 4 * v92;
      if (v87)
        operator delete(v87);
    }
    else
    {
      *(_DWORD *)v144 = *(_DWORD *)v129;
      v86 = v85 + 4;
    }
    v144 = v86;
    v95 = v138;
    if ((unint64_t)v138 >= v139)
    {
      v97 = v137;
      v98 = v138 - v137;
      v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 62)
LABEL_211:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v100 = v139 - (_QWORD)v137;
      if ((uint64_t)(v139 - (_QWORD)v137) >> 1 > v99)
        v99 = v100 >> 1;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
        v101 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v101 = v99;
      if (v101)
        v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v101);
      else
        v102 = 0;
      v103 = (_DWORD *)(v101 + 4 * v98);
      *v103 = *(_DWORD *)&v129[4];
      v96 = v103 + 1;
      while (v95 != v97)
      {
        v104 = *--v95;
        *--v103 = v104;
      }
      v137 = v103;
      v139 = v101 + 4 * v102;
      if (v97)
        operator delete(v97);
    }
    else
    {
      *v138 = *(_DWORD *)&v129[4];
      v96 = v95 + 1;
    }
    v138 = v96;
    v105 = *(_DWORD *)&v129[4] != -1;
    if (v130[0])
    {
      v130[1] = v130[0];
      operator delete(v130[0]);
    }
    v23 |= v105;
    v22 = (uint64_t *)*v22;
  }
  while (v22);
  v106 = v140;
  v107 = (uint64_t)v155;
  v108 = (uint64_t)v152;
  v109 = v149;
  v110 = v146;
  v111 = v143;
  if ((v23 & 1) != 0)
  {
    v6 = espresso_network_change_input_blob_shapes_seq_rank(a1, v127, (unint64_t)((char *)v36 - (_BYTE *)v140) >> 3, (uint64_t)v140, (uint64_t)v155, (uint64_t)v152, (uint64_t)v149, (uint64_t)v146, (uint64_t)v143, (uint64_t)v137);
    goto LABEL_176;
  }
LABEL_175:
  v112 = (void *)MEMORY[0x19401D4A4]();
  v6 = espresso_network_change_input_blob_shapes_seq_rank(a1, v127, (unint64_t)((char *)v36 - v106) >> 3, (uint64_t)v106, v107, v108, (uint64_t)v109, (uint64_t)v110, (uint64_t)v111, 0);
  objc_autoreleasePoolPop(v112);
LABEL_176:
  v113 = v158;
  v114 = (***(uint64_t (****)(_QWORD))(v158[2] + 8))(*(_QWORD *)(v158[2] + 8));
  v115 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v113 + 66, v114);
  if (!v115)
  {
    v116 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
LABEL_184:
    MEMORY[0x19401C808](v113 + 152, __s);
    goto LABEL_185;
  }
  v117 = v115[3];
  v116 = (std::__shared_weak_count *)v115[4];
  *(_QWORD *)buf = v117;
  *(_QWORD *)&buf[8] = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v119 = __ldxr(p_shared_owners);
    while (__stxr(v119 + 1, p_shared_owners));
  }
  if (!v117)
    goto LABEL_184;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v117 + 56))(v117, __p);
  if ((v129[7] & 0x80000000) != 0)
    operator delete(__p[0]);
LABEL_185:
  if (v116)
  {
    v120 = (unint64_t *)&v116->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v131);
  v122 = v137;
LABEL_192:
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v135, v136[0]);
  __p[0] = v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v122)
    operator delete(v122);
  if (v140)
    operator delete(v140);
  if (v143)
    operator delete(v143);
  if (v146)
    operator delete(v146);
  if (v149)
    operator delete(v149);
  if (v152)
    operator delete(v152);
  if (v155)
    operator delete(v155);
LABEL_206:
  v123 = v159;
  if (v159)
  {
    v124 = (unint64_t *)&v159->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  return v6;
}

void sub_190E07314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  uint64_t v58;
  void *v60;
  void *v61;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a34);
  Espresso::net_configuration::~net_configuration(&a39);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  v60 = *(void **)(v58 - 240);
  if (v60)
  {
    *(_QWORD *)(v58 - 232) = v60;
    operator delete(v60);
  }
  v61 = *(void **)(v58 - 216);
  if (v61)
  {
    *(_QWORD *)(v58 - 208) = v61;
    operator delete(v61);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 192);
  _Unwind_Resume(a1);
}

void Espresso::convert_to_explicit_padding(char **a1, char a2, int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  const void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  Espresso *v25;
  const char *v26;
  Espresso *v27;
  int v28;
  const char *v30;
  NSObject *v31;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  __int16 v59;
  __int16 v60;
  char *v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  __int16 v76;
  __int16 v77;
  _QWORD *v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  uint64_t *i;
  uint64_t **v89;
  char *v90;
  __int128 v91;
  const void *v92;
  char *v93;
  __int128 v94;
  const void *v95;
  const char *v96;
  _BOOL8 v97;
  const char *v98;
  NSObject *v99;
  char *v100;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  void *__p;
  void *v107;
  uint64_t v108;
  uint64_t *v109[3];
  char *v110[3];
  char *v111[4];
  uint64_t *v112[3];
  __int128 *v113[3];
  _BYTE v114[18];
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  uint8_t buf[16];
  __int128 v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v112, (__int128 **)*a1 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v113, (__int128 **)v4 + 26);
  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 5) != v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_OWORD *)(v6 + 16 * v7);
      *(_OWORD *)v114 = v8;
      if (*((_QWORD *)&v8 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = v8;
      v12 = *(uint64_t **)(v8 + 80);
      if (*(uint64_t **)(v8 + 88) == v12)
      {
        v15 = 0;
        v14 = 0;
      }
      else
      {
        v13 = *v12;
        v15 = *(_DWORD *)(v13 + 8);
        v14 = *(_DWORD *)(v13 + 12);
      }
      v16 = *(uint64_t **)(v8 + 104);
      if (*(uint64_t **)(v8 + 112) == v16)
      {
        v19 = 0;
        v18 = 0;
      }
      else
      {
        v17 = *v16;
        v19 = *(_DWORD *)(v17 + 8);
        v18 = *(_DWORD *)(v17 + 12);
      }
      v20 = *(const void **)(v8 + 64);
      if (!v20)
        break;
      if (!v21)
      {
        v103 = 0uLL;
        if (v42)
        {
          v34 = *(std::__shared_weak_count **)(v11 + 72);
          *(_QWORD *)buf = v42;
          *(_QWORD *)&buf[8] = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v44 = __ldxr(p_shared_owners);
            while (__stxr(v44 + 1, p_shared_owners));
          }
          v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 384))(v42);
          v46 = *(unsigned __int16 *)(v45 + 72);
          if (v46 != 4 && v46 != 1)
            goto LABEL_37;
          switch(v46)
          {
            case 4:
LABEL_67:
              v48 = *(__int16 *)(v45 + 98);
              if (v48 <= 1)
                v48 = 1;
              v49 = *(__int16 *)(v45 + 96);
              if (v49 <= 1)
                v49 = 1;
              v50 = (v18 - 1) * *(__int16 *)(v45 + 94) - v14 + (*(_DWORD *)(v45 + 52) - 1) * v48 + 1;
              v51 = (v19 - 1) * *(__int16 *)(v45 + 92) - v15 + (*(_DWORD *)(v45 + 48) - 1) * v49 + 1;
              v52 = v50 & ~(v50 >> 31);
              v53 = v51 & ~(v51 >> 31);
              v54 = v53 >> 1;
              v55 = v53 - (v53 >> 1);
              v56 = v52 >> 1;
              v57 = v52 - (v52 >> 1);
              v58 = v46 == 1;
              if (v46 == 1)
                v59 = v55;
              else
                v59 = v54;
              if (v58)
                v60 = v52 >> 1;
              else
                v60 = v52 - (v52 >> 1);
              if (v58)
              {
                LOWORD(v56) = v57;
                LOWORD(v55) = v54;
              }
              break;
            case 2:
              v59 = 0;
              v60 = 0;
              LOWORD(v56) = 0;
              LOWORD(v55) = 0;
              break;
            case 1:
              goto LABEL_67;
            default:
              LOWORD(v55) = *(_WORD *)(v45 + 80);
              v59 = *(_WORD *)(v45 + 82);
              v60 = *(_WORD *)(v45 + 84);
              LOWORD(v56) = *(_WORD *)(v45 + 86);
              break;
          }
          *(_WORD *)(v45 + 80) = v55;
          *(_WORD *)(v45 + 82) = v59;
          *(_WORD *)(v45 + 84) = v60;
          *(_WORD *)(v45 + 86) = v56;
          *(_WORD *)(v45 + 72) = 0;
LABEL_37:
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
          goto LABEL_43;
        }
        memset(buf, 0, sizeof(buf));
        if (v61)
        {
          v62 = *(char **)(v11 + 72);
          v111[2] = v61;
          v111[3] = v62;
          if (v62)
          {
            v63 = (unint64_t *)(v62 + 8);
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          v65 = (*(uint64_t (**)(char *))(*(_QWORD *)v61 + 384))(v61);
          v66 = *(__int16 *)(v65 + 36);
          v67 = *(unsigned __int16 *)(v65 + 36);
          if (v66 == 4)
          {
LABEL_87:
            v68 = *(_DWORD *)(v65 + 8) - v14 + *(_DWORD *)(v65 + 20) * (v18 - 1);
            v69 = *(_DWORD *)(v65 + 4) - v15 + *(_DWORD *)(v65 + 16) * (v19 - 1);
            v70 = v68 & ~(v68 >> 31);
            v71 = v69 & ~(v69 >> 31);
            v72 = v71 >> 1;
            v73 = v71 - (v71 >> 1);
            v74 = v70 >> 1;
            v75 = v70 - (v70 >> 1);
            v76 = v75;
            v77 = v73;
            if (v67 != 1)
              goto LABEL_97;
          }
          else
          {
            if (v66 == 2)
            {
              LOWORD(v73) = 0;
              LOWORD(v72) = 0;
              LOWORD(v75) = 0;
              LOWORD(v74) = 0;
            }
            else
            {
              if (v66 == 1)
                goto LABEL_87;
              LOWORD(v73) = *(_WORD *)(v65 + 44);
              LOWORD(v72) = *(_WORD *)(v65 + 46);
              LOWORD(v75) = *(_WORD *)(v65 + 48);
              LOWORD(v74) = *(_WORD *)(v65 + 50);
            }
LABEL_97:
            v79 = v67 == 4 || v67 == 1;
            v76 = v74;
            LOWORD(v74) = v75;
            v77 = v72;
            LOWORD(v72) = v73;
            if (!v79)
            {
LABEL_103:
              if (v62)
              {
                v80 = (unint64_t *)(v62 + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  (*(void (**)(char *))(*(_QWORD *)v62 + 16))(v62);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
                }
              }
              goto LABEL_36;
            }
          }
          *(_WORD *)(v65 + 44) = v72;
          *(_WORD *)(v65 + 46) = v77;
          *(_WORD *)(v65 + 48) = v74;
          *(_WORD *)(v65 + 50) = v76;
          *(_WORD *)(v65 + 36) = 0;
          goto LABEL_103;
        }
LABEL_36:
        v34 = *(std::__shared_weak_count **)&buf[8];
        goto LABEL_37;
      }
      v22 = *(std::__shared_weak_count **)(v11 + 72);
      *(_QWORD *)&v103 = v21;
      *((_QWORD *)&v103 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 384))(v21);
      v27 = v25;
      v28 = *((unsigned __int16 *)v25 + 36);
      if (v28 == 4 || v28 == 1)
      {
        if (a3)
        {
          v30 = (const char *)(v11 + 16);
          if (*(char *)(v11 + 39) < 0)
            v30 = *(const char **)v30;
          v25 = (Espresso *)printf("Warning: padding deconvolution %s in SAME mode will not be pad-invariant for all resolutions\n", v30);
        }
        Espresso::espresso_os_log_subsystem(v25, v26);
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v78 = (_QWORD *)(v11 + 16);
          if (*(char *)(v11 + 39) < 0)
            v78 = (_QWORD *)*v78;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v78;
          _os_log_error_impl(&dword_190DAF000, v31, OS_LOG_TYPE_ERROR, "Warning: padding deconvolution %s in SAME mode will not be pad-invariant for all resolutions", buf, 0xCu);
        }

      }
      if (*((int *)v27 + 34) > 0 || *((_DWORD *)v27 + 35) >= 1)
      {
        Espresso::espresso_os_log_subsystem(v25, v26);
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_190DAF000, v33, OS_LOG_TYPE_ERROR, "Warning: deconvolution is specifying manual output size via deconv_out_width/deconv_out_height and that is not compatible with multple resolutions. Ignoring that deconv_out_width/deconv_out_height", buf, 2u);
        }

        *((_QWORD *)v27 + 17) = 0;
      }
LABEL_43:
      if (v22)
      {
        v37 = (unint64_t *)&v22->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v39 = *(std::__shared_weak_count **)&v114[8];
      if (*(_QWORD *)&v114[8])
      {
        v40 = (unint64_t *)(*(_QWORD *)&v114[8] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      ++v7;
      v5 = *a1;
      v6 = *((_QWORD *)*a1 + 4);
      if (v7 >= (*((_QWORD *)*a1 + 5) - v6) >> 4)
        goto LABEL_108;
    }
    v103 = 0uLL;
    memset(buf, 0, sizeof(buf));
    goto LABEL_36;
  }
LABEL_108:
  if ((a2 & 1) != 0)
  {
    v82 = a1[1];
    v111[0] = v5;
    v111[1] = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v109, (__int128 **)v112);
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v110, v113);
    reshape_network(v111, v109);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v110, v110[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v109, (char *)v109[1]);
    if (v82)
    {
      v85 = (unint64_t *)(v82 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        (*(void (**)(char *))(*(_QWORD *)v82 + 16))(v82);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v82);
      }
    }
    v87 = (char *)*((_QWORD *)*a1 + 86);
    for (i = (uint64_t *)*((_QWORD *)*a1 + 87); v87 != (char *)i; v87 += 24)
    {
      v89 = (uint64_t **)(*a1 + 184);
      *(_QWORD *)v114 = v87;
      v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v89, v87, (__int128 **)v114);
      v91 = *(_OWORD *)(v90 + 72);
      v103 = *(_OWORD *)(v90 + 56);
      v104 = v91;
      v92 = (const void *)*((_QWORD *)v90 + 12);
      v105 = *((_QWORD *)v90 + 11);
      __p = 0;
      v107 = 0;
      v108 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v92, *((_QWORD *)v90 + 13), (uint64_t)(*((_QWORD *)v90 + 13) - (_QWORD)v92) >> 2);
      *(_QWORD *)v114 = v87;
      v93 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v112, v87, (__int128 **)v114);
      v94 = *(_OWORD *)(v93 + 72);
      *(_OWORD *)buf = *(_OWORD *)(v93 + 56);
      v134 = v94;
      v95 = (const void *)*((_QWORD *)v93 + 12);
      v135 = *((_QWORD *)v93 + 11);
      v136 = 0;
      v137 = 0;
      v138 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, v95, *((_QWORD *)v93 + 13), (uint64_t)(*((_QWORD *)v93 + 13) - (_QWORD)v95) >> 2);
      if (a3)
      {
        v96 = v87;
        if (v87[23] < 0)
          v96 = *(const char **)v87;
        printf("[convert_to_explicit_padding] Shape for blob %s (%d %d %d %d %d) -> (%d %d %d %d %d)\n", v96, *(_DWORD *)buf, *(_DWORD *)&buf[4], *(_DWORD *)&buf[8], *(_DWORD *)&buf[12], (_DWORD)v134, (_DWORD)v103, DWORD1(v103), DWORD2(v103), HIDWORD(v103), (_DWORD)v104);
      }
      v97 = Espresso::layer_shape::operator==((uint64_t)&v103, (uint64_t)buf);
      if (!v97)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v97, v98);
        v99 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          v100 = v87;
          if (v87[23] < 0)
            v100 = *(char **)v87;
          *(_DWORD *)v114 = 136317698;
          *(_QWORD *)&v114[4] = v100;
          *(_WORD *)&v114[12] = 1024;
          *(_DWORD *)&v114[14] = *(_DWORD *)buf;
          v115 = 1024;
          v116 = *(_DWORD *)&buf[4];
          v117 = 1024;
          v118 = *(_DWORD *)&buf[8];
          v119 = 1024;
          v120 = *(_DWORD *)&buf[12];
          v121 = 1024;
          v122 = v134;
          v123 = 1024;
          v124 = v103;
          v125 = 1024;
          v126 = DWORD1(v103);
          v127 = 1024;
          v128 = DWORD2(v103);
          v129 = 1024;
          v130 = HIDWORD(v103);
          v131 = 1024;
          v132 = v104;
          _os_log_error_impl(&dword_190DAF000, v99, OS_LOG_TYPE_ERROR, "[convert_to_explicit_padding] Shape mismatch for blob %s (%d %d %d %d %d) -> (%d %d %d %d %d)", v114, 0x48u);
        }

      }
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      if (__p)
      {
        v107 = __p;
        operator delete(__p);
      }
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v113, (char *)v113[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v112, (char *)v112[1]);
}

void sub_190E07CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char *a45,uint64_t a46)
{
  Espresso::network_shape::~network_shape(&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  Espresso::network_shape::~network_shape(&a45);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t **a1, _QWORD *a2, _QWORD *a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v10, (uint64_t)a1, a4);
    v7 = v10[0];
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a2 + 4))
  {
    v11 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v13 = a2;
LABEL_17:
      if (v11)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v11)
    {
      v12 = (_QWORD *)*a2;
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v16 = a2;
      do
      {
        v13 = (_QWORD *)v16[2];
        v17 = *v13 == (_QWORD)v16;
        v16 = v13;
      }
      while (v17);
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, a5))
      goto LABEL_17;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 + 4, a5))
  {
    v14 = a2[1];
    if (v14)
    {
      v15 = (_QWORD *)a2[1];
      do
      {
        a4 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      v18 = a2;
      do
      {
        a4 = (_QWORD *)v18[2];
        v17 = *a4 == (_QWORD)v18;
        v18 = a4;
      }
      while (!v17);
    }
    if (a4 == v9 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4 + 4))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  __int128 *v14;
  BOOL v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD v21[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v18 = result;
    v19 = v9;
    v20 = v9;
    if (v9)
    {
      v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v21[0] = v9 + 4;
          v21[1] = v9 + 7;
          std::pair<std::string &,Espresso::layer_shape &>::operator=[abi:ne180100]<std::string const,Espresso::layer_shape,(void *)0>((uint64_t)v21, (uint64_t)(v10 + 2));
          v11 = *v8;
          v12 = v5 + 1;
          v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v14 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = *(__int128 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v15 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          v9 = v20;
          if (v20)
            v15 = a2 == a3;
          else
            v15 = 1;
          v10 = a2;
        }
        while (!v15);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_multi<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v5, a2 + 2);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v15 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_190E08140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_multi<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD v8[3];

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v8, a1, a2);
  v3 = (uint64_t *)v8[0];
  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  return v3;
}

std::string *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x78uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_190E0824C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void ___ZN8Espresso17ANECompilerEngine7context42transform_network_refactor_large_conv_padsEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int32x4_t v10;
  int16x4_t *v11;
  int32x2_t v12;
  Espresso::ANECompilerEngine *v13;
  NSString *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  size_t v44;
  std::string *v45;
  std::string *p_p;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  std::string *v71;
  std::string *v72;
  void **p_data;
  uint64_t v74[2];
  std::string v75;
  std::string v76;
  std::string __str;
  std::string lpsrc;
  std::string __p;
  uint64_t v80;
  std::string::size_type size;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  int16x4_t v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[28];
  std::string **v91;
  char v92;
  std::string v93;
  uint64_t v94;
  std::string v95;
  __int128 v96;

  *(_QWORD *)&v96 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 40) + 56;
      v86 = a2[3].i32[2];
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v86, &v86);
      if (v8[4] - v8[3] != 24)
        return;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
      v11 = (int16x4_t *)v9;
      if (*(_WORD *)(v9 + 72))
        return;
      if (*(_WORD *)(v9 + 74))
        return;
      if (*(float *)(v9 + 76) >= 1.1755e-38)
        return;
      v12.i32[0] = *(__int16 *)(v9 + 96);
      v12.i32[1] = *(__int16 *)(v9 + 98);
      *(int32x2_t *)v10.i8 = vmul_s32(vadd_s32(*(int32x2_t *)(v9 + 48), (int32x2_t)-1), v12);
      v70 = v10.i64[0];
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgtq_s32(vmovl_s16(*(int16x4_t *)(v9 + 80)), vzip1q_s32(v10, v10))), 0xFuLL))) & 1) == 0)return;
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(_QWORD *)(a1 + 40) + 472);
      v13 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      if (Espresso::ANECompilerEngine::is_mix(v13, v14))
        v15 = 6;
      else
        v15 = 12;
      v89 = 0u;
      memset(v90, 0, sizeof(v90));
      v88 = 0u;
      v86 = (unint64_t)v11[9];
      v16 = v11[10].i16[0];
      v17 = __OFSUB__(v16, (_DWORD)v70);
      v18 = v16 - v70;
      if ((v18 < 0) ^ v17 | (v18 == 0))
        v18 = 0;
      if (v15 < v18)
        LOWORD(v18) = v15;
      v87.i16[0] = v18;
      v19 = v11[10].i16[1];
      v20 = v19 - v70;
      if (v19 <= (int)v70)
        v20 = 0;
      v21 = v15 - (__int16)v18;
      if (v21 >= v20)
        LOWORD(v21) = v20;
      v87.i16[1] = v21;
      v22 = v11[10].i16[2];
      v17 = __OFSUB__(v22, HIDWORD(v70));
      v23 = v22 - HIDWORD(v70);
      if ((v23 < 0) ^ v17 | (v23 == 0))
        v23 = 0;
      if (v15 < v23)
        LOWORD(v23) = v15;
      v87.i16[2] = v23;
      v24 = v11[10].i16[3];
      v25 = v24 - HIDWORD(v70);
      if (v24 <= SHIDWORD(v70))
        v25 = 0;
      v26 = v15 - (__int16)v23;
      if (v26 >= v25)
        LOWORD(v26) = v25;
      v87.i16[3] = v26;
      v27 = *(_QWORD *)(a1 + 40);
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(std::__shared_weak_count **)(v27 + 24);
      v84 = v29;
      v85 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      Espresso::abstract_engine_factory::shared(&v82);
      v32 = v82;
      std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
      LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v84 + 8))(*(_QWORD *)(v84 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v32, (uint64_t)&v84, (uint64_t)&__p, (uint64_t)&v86, (int *)&__str);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v80 = (uint64_t)v33;
        size = lpsrc.__r_.__value_.__l.__size_;
        if (!lpsrc.__r_.__value_.__l.__size_)
          goto LABEL_48;
        v34 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      else
      {
        v80 = 0;
        size = 0;
      }
      v36 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
LABEL_48:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v39 = *(_QWORD *)(a1 + 40);
      v40 = a2[3].i32[2];
      v41 = *(_QWORD *)(*(_QWORD *)(v39 + 32) + 16 * v40);
      if (*(char *)(v41 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v41 + 16), *(_QWORD *)(v41 + 24));
        v39 = *(_QWORD *)(a1 + 40);
        v40 = a2[3].i32[2];
      }
      else
      {
        __p = *(std::string *)(v41 + 16);
      }
      __str.__r_.__value_.__r.__words[0] = v40;
      v42 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39 + 56, v40, &__str)[3];
      if (*((char *)v42 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
      }
      else
      {
        v43 = *v42;
        lpsrc.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
        *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v43;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v44 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v76, v44 + 19);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v76;
      else
        v45 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (v44)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v45, p_p, v44);
      }
      strcpy((char *)v45 + v44, "__@general_padding_");
      std::to_string(&v75, v6);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v75;
      else
        v47 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      else
        v48 = v75.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v76, (const std::string::value_type *)v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v51 = *(_QWORD *)(a1 + 40) + 56;
      v52 = a2[3].i32[2];
      v76.__r_.__value_.__r.__words[0] = v52;
      v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v51, v52, &v76);
      std::string::operator=((std::string *)v53[3], &__str);
      v54 = (std::__shared_weak_count *)size;
      v74[0] = v80;
      v74[1] = size;
      if (size)
      {
        v55 = (unint64_t *)(size + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      std::string::basic_string[abi:ne180100]<0>(&v76, "general_padding");
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v95, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
      else
        v95 = lpsrc;
      memset(&v75, 0, sizeof(v75));
      v71 = &v75;
      LOBYTE(v72) = 0;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
      v75.__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[0] + 24;
      v75.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75.__r_.__value_.__r.__words[2], (__int128 *)&v95, &v96, (std::string *)v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v93, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v93 = __str;
      v71 = 0;
      v72 = 0;
      p_data = 0;
      v91 = &v71;
      v92 = 0;
      v71 = (std::string *)operator new(0x18uLL);
      v72 = v71;
      p_data = (void **)&v71[1].__r_.__value_.__l.__data_;
      v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v93, (__int128 *)&v94, v71);
      Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, v74, &v76, &__str, (std::string **)&v75, &v71, 1);
      v91 = &v71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v71 = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v76.__r_.__value_.__l.__data_);
        if (v54)
        {
LABEL_94:
          v57 = (unint64_t *)&v54->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      else if (v54)
      {
        goto LABEL_94;
      }
      v11[10] = vsub_s16(v11[10], v87);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v59 = (std::__shared_weak_count *)size;
      if (size)
      {
        v60 = (unint64_t *)(size + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = v83;
      if (v83)
      {
        v63 = (unint64_t *)&v83->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = v85;
      if (v85)
      {
        v66 = (unint64_t *)&v85->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }

      ++v6;
      v68 = *(_QWORD *)(a1 + 32);
    }
    while (*(_QWORD *)(a2->i64[0] + 8) == v68 || v68 == 0);
  }
}

void sub_190E08A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  void *v58;
  uint64_t v59;

  a16 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a38 < 0)
    operator delete(a33);
  if (a45 < 0)
    operator delete(a40);
  if (a52 < 0)
    operator delete(a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a58);

  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::convolution_uniforms,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void ___ZN8Espresso20espresso_plan_tracerC2Ev_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.trace"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record = objc_msgSend(v1, "BOOLValue");
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.trace.path"));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path;
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path = v2;

  if (!Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0CB3620]);
    objc_msgSend(v4, "currentDirectoryPath");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path;
    Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path = v5;

  }
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::pid = objc_msgSend(v7, "processIdentifier");

}

void sub_190E08C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t espresso_network_get_version(_QWORD *a1, int a2, char *a3, size_t a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  void *__p[2];
  char v25;
  std::string v26;
  __int128 v27;
  void **v28;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    v10 = 4294967290;
    if (a3 && v9)
    {
      v11 = *(_QWORD *)(a1[133] + 24);
      if (a2 >= (unint64_t)((*(_QWORD *)(a1[133] + 32) - v11) >> 4))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid network_index.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v12 = *(_OWORD *)(v11 + 16 * a2);
      v27 = v12;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = v12;
      if (!(_QWORD)v12)
      {
        v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v23, "Null network found.");
        __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "network_version");
      v28 = __p;
      v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v16 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      if (*((char *)v17 + 79) < 0)
        std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)v17 + 7), *((_QWORD *)v17 + 8));
      else
        v26 = *(std::string *)((char *)v17 + 56);
      if (v25 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        v18 = (void *)v26.__r_.__value_.__r.__words[0];
        strncpy(a3, v26.__r_.__value_.__l.__data_, a4);
        operator delete(v18);
        if (!v13)
        {
LABEL_23:
          v10 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        strncpy(a3, (const char *)&v26, a4);
        if (!v13)
          goto LABEL_23;
      }
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_23;
    }
  }
  else
  {
    v10 = 4294967290;
  }
LABEL_24:
  objc_autoreleasePoolPop(v8);
  return v10;
}

void sub_190E08EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  EspressoLight *v22;
  std::exception *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a2 == 1)
  {
    v22 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v22, v23);
    __cxa_end_catch();
    JUMPOUT(0x190E08E70);
  }
  _Unwind_Resume(a1);
}

void sub_190E0918C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::context::create_compiler_for_network(uint64_t a1, const Espresso::net **a2)
{
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  const Espresso::net *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  __int128 v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const Espresso::net *v19;
  std::__shared_weak_count *v20;
  uint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  const Espresso::net *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  _QWORD *i;
  const void *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  void *v74;
  void *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unsigned int v79;
  const Espresso::net *v80;
  std::__shared_weak_count *v81;
  _DWORD *v82[3];

  v79 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = (char *)operator new(0x270uLL);
  v4 = v3;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E2DB9368;
  v76 = v3 + 24;
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v80 = *a2;
  v81 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  v3[48] = 0;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 11) = 0;
  *((_QWORD *)v3 + 10) = v3 + 88;
  *((_QWORD *)v3 + 8) = 0;
  *((_QWORD *)v3 + 9) = 0;
  *((_QWORD *)v3 + 12) = 0;
  *((_QWORD *)v3 + 13) = 0;
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 3) = &off_1E2D70510;
  *((_QWORD *)v3 + 16) = 0;
  v77 = v3 + 128;
  *((_QWORD *)v3 + 19) = 0;
  v9 = (uint64_t *)(v3 + 152);
  *((_QWORD *)v3 + 17) = 0;
  *((_QWORD *)v3 + 20) = 0;
  *((_OWORD *)v3 + 11) = 0u;
  v3[168] = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  v70 = v3 + 248;
  v71 = v3 + 104;
  v3[224] = 0;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *((_DWORD *)v3 + 70) = 1065353216;
  v72 = v3 + 80;
  v73 = v3 + 56;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v3 + 36, "default");
  *((_WORD *)v4 + 156) = 0;
  v4[320] = 0;
  *((_QWORD *)v4 + 41) = 0;
  v4[336] = 0;
  *((_QWORD *)v4 + 49) = 0;
  v10 = 0uLL;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *((_DWORD *)v4 + 100) = 1065353216;
  *((_OWORD *)v4 + 29) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *((_QWORD *)v4 + 57) = v4 + 464;
  *(_OWORD *)(v4 + 488) = 0u;
  *((_QWORD *)v4 + 60) = v4 + 488;
  *((_OWORD *)v4 + 32) = 0u;
  *((_QWORD *)v4 + 63) = v4 + 512;
  *(_OWORD *)(v4 + 536) = 0u;
  *((_QWORD *)v4 + 66) = v4 + 536;
  *((_OWORD *)v4 + 35) = 0u;
  *((_QWORD *)v4 + 69) = v4 + 560;
  *(_OWORD *)(v4 + 584) = 0u;
  *((_QWORD *)v4 + 72) = v4 + 584;
  *((_OWORD *)v4 + 38) = 0u;
  *((_QWORD *)v4 + 75) = v4 + 608;
  v11 = (const void *)*((_QWORD *)v6 + 2);
  if (v11)
  {
    v10 = 0uLL;
    if (v12)
    {
      v13 = *((_QWORD *)v6 + 3);
      *(_QWORD *)&v10 = v12;
      *((_QWORD *)&v10 + 1) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)v4 + 17);
  *((_OWORD *)v4 + 8) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v80;
  v20 = v81;
  if (v81)
  {
    p_shared_weak_owners = &v81->__shared_weak_owners_;
    do
      v22 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v22 + 1, (unint64_t *)p_shared_weak_owners));
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 4) = v80;
  *((_QWORD *)v4 + 5) = v20;
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  v4[224] = *(_BYTE *)(*((_QWORD *)v4 + 16) + 123);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table((uint64_t **)v4 + 57, v19);
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v28 = v80;
  if (!v80)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating compiler");
    goto LABEL_77;
  }
  if (!*(_QWORD *)v77)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
LABEL_77:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle", v4 + 288, v4 + 456, v70, v71, v72, v73);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "bundleIdentifier");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "bundlePath");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "stringByDeletingLastPathComponent");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v75 = v33;
  objc_msgSend(v33, "componentsSeparatedByString:", CFSTR("/"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v34;
  if (!v30)
  {
    objc_msgSend(v34, "lastObject");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler_nocache"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v37, "BOOLValue") & 1) != 0)
  {

  }
  else
  {
    v38 = *(unsigned __int8 *)(*(_QWORD *)v77 + 138);

    if (!v38)
      goto LABEL_35;
  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "UUIDString");
  v40 = objc_claimAutoreleasedReturnValue();

  v30 = (void *)v40;
LABEL_35:
  if (!v30)
  {
    v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v69, "Null bundleID");
    __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("espresso.ane.verbose"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
  {
    objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("espresso.ane.verbose"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "BOOLValue");

    if (v43)
      v4[320] = 1;
  }
  objc_storeStrong((id *)v4 + 22, v30);
  if (v4[224])
  {
    v44 = operator new();
    v45 = v44;
    v82[0] = v28;
    v82[1] = v81;
    if (v81)
    {
      v46 = &v81->__shared_owners_;
      do
        v47 = __ldxr((unint64_t *)v46);
      while (__stxr(v47 + 1, (unint64_t *)v46));
    }
    Espresso::ANECompilerEngine::compiler::compiler(v44, (const Espresso::net **)v82);
    if (v81)
    {
      v48 = &v81->__shared_owners_;
      do
        v49 = __ldaxr((unint64_t *)v48);
      while (__stlxr(v49 - 1, (unint64_t *)v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v50 = *v9;
    *v9 = v45;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  else
  {
    v51 = (char *)v28 + 592;
    if (*((char *)v28 + 615) < 0)
      v51 = *(const char **)v51;
    model_path_to_model_url(v51);
    v52 = objc_claimAutoreleasedReturnValue();
    v53 = (void *)*((_QWORD *)v4 + 23);
    *((_QWORD *)v4 + 23) = v52;

    for (i = (_QWORD *)*((_QWORD *)v28 + 19); i; i = (_QWORD *)*i)
    {
      v55 = (const void *)i[5];
      if (v55)
      {
        if (v56)
        {
          if (v81)
          {
            v57 = &v81->__shared_owners_;
            do
              v58 = __ldxr((unint64_t *)v57);
            while (__stxr(v58 + 1, (unint64_t *)v57));
          }
          Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v56, v80, v81);
          if (v81)
          {
            v59 = &v81->__shared_owners_;
            do
              v60 = __ldaxr((unint64_t *)v59);
            while (__stlxr(v60 - 1, (unint64_t *)v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
      }
    }
  }

  if (v81)
  {
    v61 = &v81->__shared_owners_;
    do
      v62 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v62 - 1, (unint64_t *)v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  *(_QWORD *)&v78 = v76;
  *((_QWORD *)&v78 + 1) = v4;
  v63 = (uint64_t)*a2 + 528;
  v82[0] = &v79;
  v64 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v63, &v79, (uint64_t)&std::piecewise_construct, v82);
  v65 = (std::__shared_weak_count *)v64[4];
  *(_OWORD *)(v64 + 3) = v78;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_190E09944(_Unwind_Exception *a1, void **a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, void *a8, void *a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  void *v21;
  va_list va;

  va_start(va, a14);

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(_QWORD **)(v14 + 608));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(_QWORD **)(v14 + 584));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v14 + 552, *(char **)(v14 + 560));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v14 + 528, *(char **)(v14 + 536));
  std::__tree<std::string>::destroy(v14 + 504, *(char **)(v14 + 512));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v14 + 480, *(_QWORD *)(v14 + 488));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a3, *(_QWORD *)(v14 + 464));
  v17 = *(void **)(v14 + 432);
  if (v17)
  {
    *(_QWORD *)(v14 + 440) = v17;
    operator delete(v17);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 + 416);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v14 + 368);
  if (*(char *)(v14 + 311) < 0)
    operator delete(*a2);
  std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table(a4);

  v18 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v14 + 152) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
  *a10 = off_1E2D94680;
  v19 = *a5;
  if (*a5)
  {
    *(_QWORD *)(v14 + 112) = v19;
    operator delete(v19);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a6, *(_QWORD **)(v14 + 88));
  *(_QWORD *)(v15 - 88) = a7;
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 88));
  *(_QWORD *)(v14 + 24) = off_1E2D5FD08;
  v20 = *(std::__shared_weak_count **)(v14 + 40);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape(uint64_t a1, const Espresso::net *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  char v11[40];
  void *__p;
  void *v13;
  const Espresso::net *v14;
  std::__shared_weak_count *v15;
  _OWORD v16[2];

  v14 = a2;
  v15 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::shape(v11, a1);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v16, a2, (const Espresso::layer_shape *)v11, *(_DWORD *)(a1 + 204));
  v8 = v16[1];
  *(_OWORD *)(a1 + 160) = v16[0];
  *(_OWORD *)(a1 + 176) = v8;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_190E09D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  v27[0] = v11;
  v27[1] = a1 + 16;
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v28 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v8 && (float)(v15 * (float)v8) >= v14)
  {
    v7 = v4;
  }
  else
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_31;
    if (prime < v8)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v8)
LABEL_31:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v24)
  {
    *v11 = *v24;
LABEL_54:
    *v24 = v11;
    goto LABEL_55;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v23 + 8 * v7) = v13;
  if (*v11)
  {
    v25 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_54;
  }
LABEL_55:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
  return v11;
}

void sub_190E0A034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::EspressoReporterUtilities::isRunningManualTests(Espresso::EspressoReporterUtilities *this)
{
  void *v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "environment");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("XCTestConfigurationFilePath"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

void sub_190E0A0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::fetch_hash_for_analytics(Espresso *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    Espresso::sha_hash_filepath((void **)a2, (const char *)this);
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
      operator delete(*(void **)a2);
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void Espresso::write_net_hashes_to_trace(Espresso *this, const char *a2)
{
  int is_enabled;
  std::string::size_type v5;
  unsigned __int8 v6;
  std::string *v7;
  __int128 v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  unsigned __int8 v19;

  is_enabled = kdebug_is_enabled();
  if (this && is_enabled)
  {
    Espresso::sha_hash_filepath((void **)&v17, (const char *)this);
    v5 = v19;
    v6 = v19;
    if ((v19 & 0x80u) != 0)
      v5 = v18;
    if (v5)
    {
      std::to_string(&v13, (unint64_t)a2);
      v7 = std::string::append(&v13, ":");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((v19 & 0x80u) == 0)
        v9 = (const std::string::value_type *)&v17;
      else
        v9 = v17;
      if ((v19 & 0x80u) == 0)
        v10 = v19;
      else
        v10 = v18;
      v11 = std::string::append(&v14, v9, v10);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v16 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      kdebug_trace_string();
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      v6 = v19;
    }
    if ((v6 & 0x80) != 0)
      operator delete(v17);
  }
}

void sub_190E0A258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::sha_hash_filepath(void **this, const char *a2)
{
  uint64_t result;
  int v5;
  off_t st_size;
  void *v7;
  void *v8;
  std::string v9;
  stat v10;
  const char *v11;

  v11 = a2;
  std::string::basic_string[abi:ne180100]<0>(this, "");
  result = open(a2, 0);
  v5 = result;
  if ((result & 0x80000000) == 0)
  {
    if ((fstat(result, &v10) & 0x80000000) == 0)
    {
      st_size = v10.st_size;
      v7 = mmap(0, v10.st_size, 1, 2, v5, 0);
      v8 = v7;
      if (v7)
      {
        if (v7 == (void *)-1)
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("mmap of %s failed", &v11);
        Espresso::sha_hash(&v9, v7, st_size, 0);
        if (*((char *)this + 23) < 0)
          operator delete(*this);
        *(std::string *)this = v9;
        munmap(v8, st_size);
      }
    }
    return close(v5);
  }
  return result;
}

void sub_190E0A3A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_name_translator::fill_name_table(uint64_t **this, const Espresso::net *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t **v4;
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const std::string *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  const std::string *v23;
  uint64_t *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const std::string *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const std::string *v44;
  uint64_t *v45;
  __int128 *i;
  uint64_t v47;
  std::string::size_type size;
  std::string::size_type v49;
  std::string *p_str;
  std::string *p_s1;
  void *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::string __s1;
  std::string __str;
  std::__shared_weak_count *v66;
  std::string *v67;

  v2 = *((_QWORD *)a2 + 4);
  v61 = *((_QWORD *)a2 + 5);
  if (v2 != v61)
  {
    v3 = 0;
    v59 = (_QWORD *)((char *)a2 + 96);
    v60 = (_QWORD *)((char *)a2 + 56);
    v4 = this + 3;
    do
    {
      v5 = *(const void **)(*(_QWORD *)v2 + 64);
      if (v5)
      {
        if (v6)
        {
          v7 = v6;
          v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v60, v3);
          if (!v8)
            goto LABEL_61;
          v9 = v3;
          v10 = v8;
          v62 = v9;
          v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v59, v9);
          if (!v11)
            goto LABEL_61;
          v12 = v10[3];
          v13 = v10[4];
          if (v13 - v12 != v7[59] - v7[58])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of bottoms for tunneling kernel.");
          v14 = v11;
          v15 = v11[3];
          v16 = v11[4];
          if (v16 - v15 != v7[62] - v7[61])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of tops for tunneling kernel.");
          if (v13 != v12)
          {
            v17 = 0;
            v18 = 0;
            do
            {
              v19 = (const std::string *)(v7[58] + v17);
              __str.__r_.__value_.__r.__words[0] = v12 + v17;
              v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)(v12 + v17), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
              std::string::operator=((std::string *)(v20 + 7), v19);
              ++v18;
              v12 = v10[3];
              v17 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v10[4] - v12) >> 3) > v18);
            v15 = v14[3];
            v16 = v14[4];
          }
          v3 = v62;
          if (v16 != v15)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              v23 = (const std::string *)(v7[61] + v21);
              __str.__r_.__value_.__r.__words[0] = v15 + v21;
              v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)(v15 + v21), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
              std::string::operator=((std::string *)(v24 + 7), v23);
              ++v22;
              v15 = v14[3];
              v21 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v14[4] - v15) >> 3) > v22);
          }
        }
        else
        {
          if (v25)
          {
            v26 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v25 + 320))(v25);
            v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v60, v3);
            if (!v27
              || (v28 = v3,
                  v29 = v27,
                  v63 = v28,
                  (v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v59, v28)) == 0))
            {
LABEL_61:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            v31 = v30;
            v32 = v26[12] - v26[11];
            if (v32)
            {
              v33 = v29[3];
              v34 = v29[4];
              if (v34 - v33 != v32)
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of bottoms for dev_op non-default names.");
              if (v34 != v33)
              {
                v35 = 0;
                v36 = 0;
                do
                {
                  v37 = (const std::string *)(v26[11] + v35);
                  __str.__r_.__value_.__r.__words[0] = v33 + v35;
                  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)(v33 + v35), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
                  std::string::operator=((std::string *)(v38 + 7), v37);
                  ++v36;
                  v33 = v29[3];
                  v35 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v29[4] - v33) >> 3) > v36);
              }
            }
            v39 = v26[15] - v26[14];
            v3 = v63;
            if (v39)
            {
              v40 = v31[3];
              v41 = v31[4];
              if (v41 - v40 != v39)
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of tops for dev_op non-default names.");
              if (v41 != v40)
              {
                v42 = 0;
                v43 = 0;
                do
                {
                  v44 = (const std::string *)(v26[14] + v42);
                  __str.__r_.__value_.__r.__words[0] = v40 + v42;
                  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)(v40 + v42), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
                  std::string::operator=((std::string *)(v45 + 7), v44);
                  ++v43;
                  v40 = v31[3];
                  v42 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v31[4] - v40) >> 3) > v43);
              }
            }
          }
        }
      }
      ++v3;
      v2 += 16;
    }
    while (v2 != v61);
  }
  for (i = (__int128 *)*((_QWORD *)a2 + 19); i; i = *(__int128 **)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__str, i + 1);
    Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this, (char *)&__str, &__s1);
    v47 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = __str.__r_.__value_.__l.__size_;
    if (size == v49)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (!memcmp(__s1.__r_.__value_.__l.__data_, p_str, __s1.__r_.__value_.__l.__size_))
          goto LABEL_51;
      }
      else
      {
        if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
          goto LABEL_52;
        p_s1 = &__s1;
        while (p_s1->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v47)
          {
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_52;
            goto LABEL_50;
          }
        }
      }
    }
    v67 = &__s1;
    v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this, &__s1, (uint64_t)&std::piecewise_construct, (__int128 **)&v67);
    std::string::operator=((std::string *)(v53 + 7), &__str);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_52;
LABEL_50:
    v52 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_51:
    operator delete(v52);
LABEL_52:
    v54 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *, std::string *))v54->__on_zero_shared)(v54, p_str);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_190E0A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_name_translator::ane_name(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  _QWORD *v11;
  unint64_t v12;
  size_t v13;
  int8x8_t v14;
  void *prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD **v19;
  unint64_t v20;
  uint8x8_t v21;
  _QWORD *i;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  void *v27;
  _BOOL4 v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string::size_type v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **j;
  unint64_t v40;
  _BOOL4 v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  std::string __str;
  void *__p[2];
  __int128 v53;
  float v54;
  char v55;

  v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 24, a2);
  if ((_QWORD *)(a1 + 32) == v6)
  {
    v8 = std::string::find((const std::string *)a2, 58, 0);
    v9 = std::string::find((const std::string *)a2, 124, 0);
    v10 = std::string::find((const std::string *)a2, 64, 0);
    *(_OWORD *)__p = 0u;
    v53 = 0u;
    v54 = 1.0;
    v11 = operator new(0x18uLL);
    *v11 = 0;
    v11[1] = 95;
    *((_BYTE *)v11 + 16) = 95;
    v12 = vcvtps_u32_f32(1.0 / v54);
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    if (v12 >= 2)
    {
      if ((v13 & (v13 - 1)) != 0)
      {
        prime = (void *)std::__next_prime(v13);
        v13 = (size_t)prime;
        v14 = (int8x8_t)__p[1];
        if (prime <= __p[1])
        {
          if (prime >= __p[1])
            goto LABEL_49;
          v24 = vcvtps_u32_f32((float)*((unint64_t *)&v53 + 1) / v54);
          if (__p[1] < (void *)3
            || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
          {
            v24 = std::__next_prime(v24);
          }
          else
          {
            v26 = 1 << -(char)__clz(v24 - 1);
            if (v24 >= 2)
              v24 = v26;
          }
          if (v13 <= v24)
            v13 = v24;
          if ((void *)v13 >= __p[1])
          {
            v14 = (int8x8_t)__p[1];
            goto LABEL_49;
          }
          if (!v13)
          {
            v27 = __p[0];
            __p[0] = 0;
            if (v27)
              operator delete(v27);
            v14 = 0;
            __p[1] = 0;
            v28 = 1;
            goto LABEL_50;
          }
        }
      }
      v14 = (int8x8_t)v13;
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
    }
    else
    {
      v14 = (int8x8_t)2;
    }
    v16 = operator new(8 * *(_QWORD *)&v14);
    v17 = __p[0];
    __p[0] = v16;
    if (v17)
      operator delete(v17);
    v18 = 0;
    __p[1] = (void *)v14;
    do
      *((_QWORD *)__p[0] + v18++) = 0;
    while (*(_QWORD *)&v14 != v18);
    v19 = (_QWORD **)v53;
    if ((_QWORD)v53)
    {
      v20 = *(_QWORD *)(v53 + 8);
      v21 = (uint8x8_t)vcnt_s8(v14);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v14)
          v20 %= *(_QWORD *)&v14;
      }
      else
      {
        v20 &= *(_QWORD *)&v14 - 1;
      }
      *((_QWORD *)__p[0] + v20) = &v53;
      for (i = *v19; i; v20 = v23)
      {
        v23 = i[1];
        if (v21.u32[0] > 1uLL)
        {
          if (v23 >= *(_QWORD *)&v14)
            v23 %= *(_QWORD *)&v14;
        }
        else
        {
          v23 &= *(_QWORD *)&v14 - 1;
        }
        if (v23 != v20)
        {
          if (!*((_QWORD *)__p[0] + v23))
          {
            *((_QWORD *)__p[0] + v23) = v19;
            goto LABEL_31;
          }
          *v19 = (_QWORD *)*i;
          *i = **((_QWORD **)__p[0] + v23);
          **((_QWORD **)__p[0] + v23) = i;
          i = v19;
        }
        v23 = v20;
LABEL_31:
        v19 = (_QWORD **)i;
        i = (_QWORD *)*i;
      }
    }
LABEL_49:
    v29 = (uint8x8_t)vcnt_s8(v14);
    v29.i16[0] = vaddlv_u8(v29);
    v28 = v29.u32[0] < 2uLL;
    if (v29.u32[0] >= 2uLL)
    {
      if (*(_QWORD *)&v14 <= 0x5FuLL)
        v30 = 0x5FuLL % *(_QWORD *)&v14;
      else
        v30 = 95;
LABEL_54:
      v31 = __p[0];
      v32 = (_QWORD *)*((_QWORD *)__p[0] + v30);
      if (v32)
      {
        *v11 = *v32;
      }
      else
      {
        *v11 = v53;
        *(_QWORD *)&v53 = v11;
        v31[v30] = &v53;
        if (!*v11)
          goto LABEL_63;
        v33 = *(_QWORD *)(*v11 + 8);
        if (v28)
        {
          v33 &= *(_QWORD *)&v14 - 1;
        }
        else if (v33 >= *(_QWORD *)&v14)
        {
          v33 %= *(_QWORD *)&v14;
        }
        v32 = (char *)__p[0] + 8 * v33;
      }
      *v32 = v11;
LABEL_63:
      ++*((_QWORD *)&v53 + 1);
      LODWORD(v34) = a2[23];
      v35 = *(char **)a2;
      if ((v34 & 0x80u) == 0)
        v36 = a2;
      else
        v36 = *(char **)a2;
      if (v14)
      {
        v37 = *v36;
        if (v28)
        {
          v38 = (*(_QWORD *)&v14 - 1) & v37;
        }
        else
        {
          v38 = v37;
          if (*(_QWORD *)&v14 <= v37)
            v38 = v37 % *(_QWORD *)&v14;
        }
        j = (uint64_t **)*((_QWORD *)__p[0] + v38);
        if (j)
        {
          for (j = (uint64_t **)*j; j; j = (uint64_t **)*j)
          {
            v40 = (unint64_t)j[1];
            if (v40 == v37)
            {
              if (*((unsigned __int8 *)j + 16) == v37)
                break;
            }
            else
            {
              if (v28)
              {
                v40 &= *(_QWORD *)&v14 - 1;
              }
              else if (v40 >= *(_QWORD *)&v14)
              {
                v40 %= *(_QWORD *)&v14;
              }
              if (v40 != v38)
                goto LABEL_83;
            }
          }
        }
      }
      else
      {
LABEL_83:
        j = 0;
      }
      v42 = (v9 & v8 & v10) != 0xFFFFFFFFFFFFFFFFLL || j != 0;
      if ((v34 & 0x80) == 0)
      {
        if ((_DWORD)v34 == 7)
        {
          v43 = *(_DWORD *)(a2 + 3);
          v44 = *(_DWORD *)a2 == 1734960471;
          v45 = 1937008743;
        }
        else
        {
          if ((_DWORD)v34 != 5)
          {
            if (!v42 && v34 < 0x21)
            {
LABEL_105:
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
              a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
LABEL_122:
              std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
              return;
            }
            goto LABEL_108;
          }
          v43 = a2[4];
          v44 = *(_DWORD *)a2 == 1953066581;
          v45 = 115;
        }
        if (v44 && v43 == v45)
          LOBYTE(v42) = 1;
        if (!v42)
          goto LABEL_105;
LABEL_108:
        v35 = a2;
        goto LABEL_120;
      }
      v34 = *((_QWORD *)a2 + 1);
      if (v34 == 5)
      {
        v46 = v35[4];
        v47 = *(_DWORD *)v35 == 1953066581;
        v48 = 115;
      }
      else
      {
        if (v34 != 7)
        {
          if (v42 || v34 > 0x20)
          {
LABEL_120:
            Espresso::sha_hash(&__str, v35, v34, 0);
            std::string::basic_string(a3, &__str, 0, 0x20uLL, (std::allocator<char> *)&v55);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            goto LABEL_122;
          }
LABEL_117:
          std::string::__init_copy_ctor_external(a3, v35, v34);
          goto LABEL_122;
        }
        v46 = *(_DWORD *)(v35 + 3);
        v47 = *(_DWORD *)v35 == 1734960471;
        v48 = 1937008743;
      }
      if (v47 && v46 == v48)
        LOBYTE(v42) = 1;
      if (v42)
        goto LABEL_120;
      goto LABEL_117;
    }
LABEL_50:
    v30 = (v14.i32[0] - 1) & 0x5FLL;
    goto LABEL_54;
  }
  if (*((char *)v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v6[7], v6[8]);
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 7);
    a3->__r_.__value_.__r.__words[2] = v6[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_190E0AE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::sha_hash(std::string *this, const void *a2, CC_LONG a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  char __str[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0x1516ED34uLL);
  CC_SHA256(a2, a3, v8);
  std::string::basic_string[abi:ne180100]<0>(this, "");
  v9 = 0;
  *(_QWORD *)__str = 0;
  if (!a4)
  {
    v10 = "%02x";
    goto LABEL_4;
  }
  v10 = "%02X";
  snprintf(__str, 8uLL, "%02X");
  while (1)
  {
    std::string::append(this, __str);
    if (++v9 == 32)
      break;
LABEL_4:
    snprintf(__str, 8uLL, v10, v8[v9]);
  }
  free(v8);
}

void sub_190E0AFAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x50uLL);
    v13[0] = v7;
    v13[1] = a1 + 1;
    v14 = 0;
    v9 = (std::string *)(v7 + 4);
    v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v7[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v15, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
  return v7;
}

void sub_190E0B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::context::setup_blobs_internal_properties_before_resize(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  _OWORD *v3;
  unsigned __int8 *v4;
  int v5;
  _BOOL4 v6;
  __int128 *v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string v16;
  void *lpsrc;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void **v21;

  std::string::basic_string[abi:ne180100]<0>(&v16, "ane_compiler_batch");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 60), &v16))
  {
    v6 = 0;
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ane_compiler_batch");
  v21 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2 + 59, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  v4 = (unsigned __int8 *)v3 + 56;
  v5 = *((char *)v3 + 79);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 1)
      goto LABEL_9;
LABEL_8:
    v6 = *v4 == 49;
    goto LABEL_10;
  }
  if (*((_QWORD *)v3 + 8) == 1)
  {
    v4 = *(unsigned __int8 **)v4;
    goto LABEL_8;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  if (v20 < 0)
    operator delete(__p[0]);
LABEL_12:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v7 = (__int128 *)*((_QWORD *)a2 + 19);
  if (v7)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&v16, v7 + 1);
      if (!lpsrc)
        goto LABEL_24;
      if (!v8)
        goto LABEL_24;
      v9 = v18;
      if (v18)
        break;
      v8[50] = v6;
LABEL_30:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v7 = *(__int128 **)v7;
      if (!v7)
        return;
    }
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v8[50] = v6;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_24:
    v13 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_30;
  }
}

void sub_190E0B280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v7;
}

uint64_t Espresso::MetalLowmemEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v6 = *(const void **)(a1 + 8);
  if (v6
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    v26 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v6 = *(const void **)(a1 + 8);
      if (!v6)
        goto LABEL_14;
    }
  }
  else
  {
    v26 = 0;
    if (!v6)
    {
LABEL_14:
      v10 = 0;
      v25 = 0;
      goto LABEL_15;
    }
  }
  if (!v10)
    goto LABEL_14;
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_15:
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(a3, (unsigned int *)(a1 + 280), v10 != 0);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v17;
}

void sub_190E0B530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::DummyMPSEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(a3, (unsigned int *)(a1 + 280), 1);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_190E0B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(_QWORD *a1, unsigned int *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v19;
  BOOL v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  char v26;
  int v27;
  char v28;
  BOOL v29;
  BOOL v30;
  _BYTE v32[32];
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  _OWORD v36[2];
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[32];
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  if (a3)
  {
    v46 = 0x7500000076;
    v43 = xmmword_191A9516C;
    v44 = unk_191A9517C;
    v45 = xmmword_191A9518C;
    *(_OWORD *)v41 = xmmword_191A9512C;
    *(_OWORD *)&v41[16] = unk_191A9513C;
    *(_OWORD *)v42 = xmmword_191A9514C;
    *(_OWORD *)&v42[16] = unk_191A9515C;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>((uint64_t)v36, (unsigned int *)v41, (unsigned int *)&v47);
  }
  else
  {
    *(_OWORD *)v42 = xmmword_191A951C4;
    *(_OWORD *)&v42[16] = unk_191A951D4;
    v43 = xmmword_191A951E4;
    v44 = unk_191A951F4;
    *(_OWORD *)v41 = xmmword_191A951A4;
    *(_OWORD *)&v41[16] = unk_191A951B4;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>((uint64_t)v36, (unsigned int *)v41, (unsigned int *)&v45);
  }
  v6 = 0;
  v7 = (_QWORD *)*a1;
  v8 = (a1[1] - *a1) >> 6;
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 1)
    {
LABEL_75:
      if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(*(uint64_t *)&v36[0], *((unint64_t *)&v36[0] + 1), *a2))
      {
        v6 = v6 ^ 1;
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_79;
    }
    v9 = *((_OWORD *)v7 + 1);
    v10 = v7[4];
    *(_OWORD *)v41 = *(_OWORD *)v7;
    *(_OWORD *)&v41[16] = v9;
    *(_QWORD *)v42 = v10;
    memset(&v42[8], 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42[8], (const void *)v7[5], v7[6], (uint64_t)(v7[6] - v7[5]) >> 2);
    v11 = (_QWORD *)*a1;
    v12 = *(_OWORD *)(*a1 + 80);
    *(_OWORD *)v32 = *(_OWORD *)(*a1 + 64);
    *(_OWORD *)&v32[16] = v12;
    v13 = (const void *)v11[13];
    v33 = v11[12];
    __p[0] = 0;
    __p[1] = 0;
    v35 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v13, v11[14], (uint64_t)(v11[14] - (_QWORD)v13) >> 2);
    v14 = a1[1] - *a1;
    if (v14 == 128 && (v5 < 0xA || v5 - 29 <= 3))
    {
      v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v41);
      if (v15 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)v32))
      {
        v16 = *(void **)&v42[8];
        v40 = *(_QWORD *)v42;
        v38 = *(_OWORD *)v41;
        v39 = *(_OWORD *)&v41[16];
        v17 = *(_QWORD *)&v42[24];
        *(_OWORD *)v41 = *(_OWORD *)v32;
        *(_OWORD *)&v41[16] = *(_OWORD *)&v32[16];
        *(_QWORD *)v42 = v33;
        *(_OWORD *)&v42[8] = *(_OWORD *)__p;
        *(_QWORD *)&v42[24] = v35;
        *(_OWORD *)v32 = v38;
        *(_OWORD *)&v32[16] = v39;
        v33 = v40;
        __p[0] = v16;
        v35 = v17;
      }
    }
    if (*(_DWORD *)v32 == *(_DWORD *)v41 && *(_OWORD *)&v41[4] == *(_OWORD *)&v32[4])
    {
      LODWORD(v6) = *a2 == 13 && v14 == 128;
      goto LABEL_69;
    }
    if (*a2 > 1)
    {
      LODWORD(v6) = 0;
      v26 = 0;
      goto LABEL_70;
    }
    if (*(_DWORD *)&v32[8] == 1)
    {
      v19 = *(int *)&v32[16] <= 1 ? 1 : *(_DWORD *)&v32[16];
      if (v19 * *(_DWORD *)&v32[12] == 1 && *(_QWORD *)v32 == *(_QWORD *)v41)
        goto LABEL_68;
    }
    v20 = *(_DWORD *)v32 == 1 && *(_DWORD *)&v32[4] == 1;
    v21 = v20;
    if (v20)
    {
      if (*(int *)&v32[16] <= 1)
        v22 = 1;
      else
        v22 = *(_DWORD *)&v32[16];
      v23 = *(_DWORD *)&v32[12];
      v24 = v22 * *(_DWORD *)&v32[12];
      v25 = *(_DWORD *)&v41[8];
      if (v24 == 1 && *(_DWORD *)&v32[8] == *(_DWORD *)&v41[8])
        goto LABEL_68;
    }
    else
    {
      v23 = *(_DWORD *)&v32[12];
      v25 = *(_DWORD *)&v41[8];
      if (*(int *)&v32[16] <= 1)
        v27 = 1;
      else
        v27 = *(_DWORD *)&v32[16];
      v24 = v27 * *(_DWORD *)&v32[12];
    }
    if (*(_DWORD *)v32 != *(_DWORD *)v41 || v24 != 1 || *(_QWORD *)&v32[4] != __PAIR64__(v25, *(unsigned int *)&v41[4]))
    {
      v28 = v21 ^ 1;
      if (*(_DWORD *)&v32[8] != 1)
        v28 = 1;
      if ((v28 & 1) != 0
        || v23 * *(_DWORD *)&v32[16] != *(_DWORD *)&v41[16] * *(_DWORD *)&v41[12]
        && (v23 != 1 || *(_DWORD *)&v32[16] != 1))
      {
        if ((_DWORD)v8 != 2
          || *(_DWORD *)v32 != 1 && *(_DWORD *)v32 != *(_DWORD *)v41 && *(_DWORD *)v41 != 1
          || (*(_DWORD *)&v41[4] != 1 ? (v29 = *(_DWORD *)&v32[4] == *(_DWORD *)&v41[4]) : (v29 = 1),
              !v29 ? (v30 = *(_DWORD *)&v32[4] == 1) : (v30 = 1),
              !v30 || *(_DWORD *)&v32[8] != v25 || *(_QWORD *)&v41[12] != __PAIR64__(*(unsigned int *)&v32[16], v23)))
        {
          LODWORD(v6) = 1;
          goto LABEL_69;
        }
      }
    }
LABEL_68:
    LODWORD(v6) = 0;
LABEL_69:
    v26 = 1;
LABEL_70:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v42[8])
    {
      *(_QWORD *)&v42[16] = *(_QWORD *)&v42[8];
      operator delete(*(void **)&v42[8]);
    }
    if ((v26 & 1) == 0)
    {
      v6 = 0;
      goto LABEL_79;
    }
    goto LABEL_75;
  }
LABEL_79:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v36);
  return v6;
}

void sub_190E0BA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *j;
  unint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _BOOL8 v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (!v9)
    {
      while (1)
      {
        v11 = *v4;
        *((_DWORD *)v8 + 4) = v11;
        v10 = (_QWORD *)*v8;
        v8[1] = v11;
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            v14 = v11;
            if (v12 <= v11)
              v14 = v11 % v12;
          }
          else
          {
            v14 = ((_DWORD)v12 - 1) & v11;
          }
          v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v14);
          if (v15)
          {
            for (j = *v15; j; j = (uint64_t *)*j)
            {
              v17 = j[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)j + 4) == (_DWORD)v11)
                  goto LABEL_49;
              }
              else
              {
                if (v13.u32[0] > 1uLL)
                {
                  if (v17 >= v12)
                    v17 %= v12;
                }
                else
                {
                  v17 &= v12 - 1;
                }
                if (v17 != v14)
                  break;
              }
            }
          }
        }
        v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v19 = *(float *)(a1 + 32);
        if (!v12 || (float)(v19 * (float)v12) < v18)
        {
          v20 = 2 * v12;
          v21 = v12 < 3 || (v12 & (v12 - 1)) != 0;
          v22 = v21 | v20;
          v23 = vcvtps_u32_f32(v18 / v19);
          if (v22 <= v23)
            v24 = v23;
          else
            v24 = v22;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
          v12 = *(_QWORD *)(a1 + 8);
          v11 = v8[1];
        }
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v11 >= v12)
            v11 %= v12;
        }
        else
        {
          v11 &= v12 - 1;
        }
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v26)
        {
          *v8 = *v26;
        }
        else
        {
          *v8 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
          if (!*v8)
            goto LABEL_48;
          v27 = *(_QWORD *)(*v8 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v27 >= v12)
              v27 %= v12;
          }
          else
          {
            v27 &= v12 - 1;
          }
          v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
        }
        *v26 = v8;
LABEL_48:
        ++*(_QWORD *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          v8 = v10;
          if (v4 != a3)
            continue;
        }
        goto LABEL_51;
      }
    }
    v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        v28 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v28;
      }
      while (v28);
    }
  }
  while (v4 != a3)
  {
    v29 = *v4++;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(a1, v29, v29);
  }
}

void sub_190E0BCB8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_190E0BCD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_190E0BEE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t Espresso::blob_storage_mmap::blob_storage_mmap(uint64_t a1, __int128 *a2, uint64_t a3)
{
  const char **v5;
  __int128 v6;
  int v7;
  const char *v8;
  int v9;
  int *v10;
  off_t st_size;
  void *v12;
  int v14;
  const char *v15;
  char *v16;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error *v19;
  int *v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  stat v25;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E2D81658;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  v5 = (const char **)(a1 + 48);
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  v7 = *(char *)(a1 + 71);
  v8 = (const char *)(a1 + 48);
  if (v7 < 0)
    v8 = *v5;
  v9 = open(v8, 0);
  v10 = __error();
  if (v9 == -1)
  {
    v14 = *v10;
    v15 = (const char *)v5;
    if (*(char *)(a1 + 71) < 0)
      v15 = *v5;
    v16 = strerror(v14);
    Espresso::throw_exception_selector<Espresso::io_error,char const*,char *>(v15, v16);
  }
  v25.st_size = 0;
  fstat(v9, &v25);
  st_size = v25.st_size;
  *(_QWORD *)(a1 + 80) = v25.st_size;
  if (!st_size)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = mmap(0, st_size, 1, 2, v9, 0);
  *(_QWORD *)(a1 + 72) = v12;
  if (!v12)
  {
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v18, &v24);
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v12 == (void *)-1)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v20 = __error();
    std::to_string(&v23, *v20);
    v21 = std::string::insert(&v23, 0, "mmap error: ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v24);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::blob_storage_mmap::setup_header((uint64_t **)a1, a3);
  close(v9);
  return a1;
}

void sub_190E0C1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  encrypted_file **v22;
  void **v23;
  void *v24;
  int v25;
  _QWORD **v26;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v21 + 71) < 0)
        operator delete(*v23);
      std::unique_ptr<encrypted_file>::reset[abi:ne180100](v22);
      std::__tree<int>::destroy(*v26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

uint64_t **Espresso::blob_storage_mmap::setup_header(uint64_t **this, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  std::runtime_error *exception;

  v2 = (char *)this[9] + a2;
  if (*((_DWORD *)v2 + 1))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Provided weight file is not of blob_v1 format.");
  v3 = (uint64_t)this;
  if (*(_QWORD *)v2)
  {
    v4 = 0;
    v5 = a2 + 16 * *(_QWORD *)v2 + 8;
    v6 = (unint64_t *)(v2 + 8);
    do
    {
      v7 = *v6;
      *((_DWORD *)std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6)+ 10) = v7;
      v8 = (uint64_t *)v6[1];
      std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6)[7] = v8;
      this = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6);
      this[6] = (uint64_t *)v5;
      v5 += v6[1];
      ++v4;
      v6 += 2;
    }
    while (*(_QWORD *)v2 > v4);
  }
  if (*(_QWORD *)(v3 + 24))
  {
    v9 = (_QWORD *)(v3 + 16);
    v10 = *(_QWORD **)(v3 + 16);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v9[2];
        v12 = *v11 == (_QWORD)v9;
        v9 = v11;
      }
      while (v12);
    }
    if (v11[7] + v11[6] > *(_QWORD *)(v3 + 80))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected end of weight file");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_190E0C410(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v7[4] = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  _QWORD *InputPorts;
  uint64_t v5;
  E5RT::TensorDescriptor *v6;
  uint64_t *TensorShape;
  uint64_t *v8;
  void (***v9)(E5RT::IOPortPriv *__hidden);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  _BOOL4 v22;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v24;
  unint64_t Rank;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  size_t v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  std::string::size_type v40;
  void (***v41)(E5RT::IOPortPriv *__hidden);
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  void *v53;
  std::string *v54;
  __int128 v55;
  void *v56;
  std::string *v57;
  __int128 v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  std::string *v66;
  __int128 v67;
  void *exception;
  uint64_t v69;
  std::string::size_type v70;
  std::__shared_weak_count *v71;
  E5RT::TensorDescriptor *v72;
  std::__shared_weak_count *v73;
  std::string v74;
  _OWORD __src[5];
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  std::string::size_type v80;
  char *v81;
  __int128 v82;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__src, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v81, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v79, 2, &v81);
    E5RT::E5RTError::E5RTError(exception, __src, &v79);
  }
  E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors((E5RT::ExecutionStreamOperationInternal **)a1, a2);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v5 = a2 + 16;
  while (1)
  {
    v5 = *(_QWORD *)v5;
    if (!v5)
      break;
    v9 = (void (***)(E5RT::IOPortPriv *__hidden))std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v5 + 16)[5];
    if (!v9 || *v9 != &off_1E2D59AC8)
      v9 = 0;
    v10 = *(std::__shared_weak_count **)(v5 + 48);
    v77 = *(_QWORD *)(v5 + 40);
    v78 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v9, &v77);
    v13 = v78;
    if (v78)
    {
      v14 = (unint64_t *)&v78->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(v5 + 40));
    TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v6);
    *(_QWORD *)&__src[0] = v5 + 16;
    v8 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, v5 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__src);
    if (espresso_buffer_pack_tensor_shape((uint64_t)(v8 + 5), (TensorShape[1] - *TensorShape) >> 3, *TensorShape))
    {
      v59 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__src, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v81, "Unable to set new tensor shape to espresso_buffer_t.");
      E5RT::Status::Status(&v79, 2, &v81);
      E5RT::E5RTError::E5RTError(v59, __src, &v79);
    }
  }
  v76 = 0;
  v16 = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                    + 16);
  if (v16)
  {
    while (1)
    {
      memset(__src, 0, sizeof(__src));
      v17 = (uint64_t)(v16 + 2);
      if (*((char *)v16 + 39) < 0)
        v17 = v16[2];
      if (espresso_network_query_blob_shape(*(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), v17, (uint64_t)&v76, (uint64_t)__src))
      {
        v60 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v81, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v79, "Unable to query output dimensions after reshaping espresso network inputs.");
        E5RT::Status::Status(&v74, 2, &v79);
        E5RT::E5RTError::E5RTError(v60, &v81, &v74);
      }
      v18 = v76;
      if (v76)
      {
        v19 = (uint64_t *)__src;
        while (1)
        {
          v20 = *v19++;
          if (v20 != 1)
            break;
          if (!--v18)
            goto LABEL_26;
        }
        v22 = 0;
      }
      else
      {
LABEL_26:
        LODWORD(v72) = 0;
        if (*((char *)v16 + 39) >= 0)
          v21 = (char *)(v16 + 2);
        else
          v21 = (char *)v16[2];
        if (espresso_blob_is_dynamic(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v21, &v72))
        {
          v62 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v81, "operator()");
          std::operator+<char>();
          E5RT::Status::Status(&v74, 2, &v79);
          E5RT::E5RTError::E5RTError(v62, &v81, &v74);
        }
        v22 = (_DWORD)v72 != 0;
      }
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v16[5]);
      v24 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      Rank = E5RT::TensorDescriptor::GetRank(v24);
      v26 = Rank;
      v27 = v76;
      if (v22)
        break;
      if (Rank)
        v31 = 1;
      else
        v31 = v76 == 1;
      if (!v31)
      {
        v65 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v81, "ReshapeOperationInternal");
        std::operator+<char>();
        v66 = std::string::append(&v74, " is not 1 from Classic CPU");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v80 = v66->__r_.__value_.__r.__words[2];
        v79 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v72, 11, &v79);
        E5RT::E5RTError::E5RTError(v65, &v81, &v72);
      }
      if (v76 < Rank)
      {
        v64 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v81, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(&v74, 11, &v79);
        E5RT::E5RTError::E5RTError(v64, &v81, &v74);
      }
      if (Rank)
      {
        v32 = v76 - Rank;
        if (v76 > Rank)
        {
          v33 = (uint64_t *)__src + Rank;
          do
          {
            v34 = *v33++;
            if (v34 != 1)
            {
              v56 = __cxa_allocate_exception(0x18uLL);
              v81 = (char *)operator new(0x20uLL);
              v82 = xmmword_191A71250;
              strcpy(v81, "ReshapeOperationInternal");
              std::operator+<char>();
              v57 = std::string::append(&v74, " and upper dims are not 1");
              v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
              v80 = v57->__r_.__value_.__r.__words[2];
              v79 = v58;
              v57->__r_.__value_.__l.__size_ = 0;
              v57->__r_.__value_.__r.__words[2] = 0;
              v57->__r_.__value_.__r.__words[0] = 0;
              E5RT::Status::Status(&v72, 11, &v79);
              E5RT::E5RTError::E5RTError(v56, &v81, &v72);
            }
            --v32;
          }
          while (v32);
          goto LABEL_51;
        }
      }
      v76 = Rank;
      v81 = 0;
      v82 = 0uLL;
      if (v27 != Rank)
        goto LABEL_52;
      v79 = 0uLL;
      v80 = 0;
      if (!Rank)
      {
LABEL_59:
        v36 = 0;
        goto LABEL_60;
      }
      if ((Rank & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v37 = 8 * Rank;
      v36 = (char *)operator new(8 * Rank);
      v26 = (unint64_t)&v36[8 * v26];
      memcpy(v36, __src, v37);
LABEL_60:
      v81 = v36;
      *(_QWORD *)&v82 = v26;
      *((_QWORD *)&v82 + 1) = v26;
      E5RT::TensorDataType::TensorDataType(&v79, 4, 6u);
      E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v79, (uint64_t *)&v81, &v74);
      v38 = v74.__r_.__value_.__r.__words[0];
      v72 = (E5RT::TensorDescriptor *)v74.__r_.__value_.__r.__words[0];
      if (v74.__r_.__value_.__r.__words[0])
      {
        v39 = (std::__shared_weak_count *)operator new();
        v40 = v74.__r_.__value_.__r.__words[0];
        v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
        v39->__shared_owners_ = 0;
        v39->__shared_weak_owners_ = 0;
        v39[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
        v73 = v39;
        v74.__r_.__value_.__r.__words[0] = 0;
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v79);
        v41 = (void (***)(E5RT::IOPortPriv *__hidden))v16[5];
        if (v41)
          goto LABEL_64;
      }
      else
      {
        v39 = 0;
        v73 = 0;
        v74.__r_.__value_.__r.__words[0] = 0;
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v79);
        v41 = (void (***)(E5RT::IOPortPriv *__hidden))v16[5];
        if (v41)
        {
LABEL_64:
          if (*v41 == &off_1E2D59AC8)
            goto LABEL_66;
        }
      }
      v41 = 0;
LABEL_66:
      v70 = v38;
      v71 = v39;
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v41, (uint64_t *)&v70);
      v44 = v71;
      if (v71)
      {
        v45 = (unint64_t *)&v71->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v72);
      *(_QWORD *)&v79 = v16 + 2;
      v48 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, (uint64_t)(v16 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v79);
      if (espresso_buffer_pack_tensor_shape((uint64_t)(v48 + 5), (v47[1] - *v47) >> 3, *v47))
      {
        v61 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v79, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v74, "Unable to set new tensor shape to espresso_buffer_t.");
        E5RT::Status::Status(&v69, 2, &v74);
        E5RT::E5RTError::E5RTError(v61, &v79, &v69);
      }
      v49 = v73;
      if (v73)
      {
        v50 = (unint64_t *)&v73->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          v52 = v81;
          if (!v81)
            goto LABEL_18;
LABEL_80:
          *(_QWORD *)&v82 = v52;
          operator delete(v52);
          goto LABEL_18;
        }
      }
      v52 = v81;
      if (v81)
        goto LABEL_80;
LABEL_18:
      v16 = (uint64_t *)*v16;
      if (!v16)
        return;
    }
    v28 = v76 - Rank;
    if (v76 < Rank)
    {
      v63 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v81, "ReshapeOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(&v74, 11, &v79);
      E5RT::E5RTError::E5RTError(v63, &v81, &v74);
    }
    if (v76 > Rank)
    {
      v29 = (uint64_t *)__src + Rank;
      do
      {
        v30 = *v29++;
        if (v30 != 1)
        {
          v53 = __cxa_allocate_exception(0x18uLL);
          v81 = (char *)operator new(0x20uLL);
          v82 = xmmword_191A71250;
          strcpy(v81, "ReshapeOperationInternal");
          std::operator+<char>();
          v54 = std::string::append(&v74, " and upper dims are not 1");
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v80 = v54->__r_.__value_.__r.__words[2];
          v79 = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(&v72, 11, &v79);
          E5RT::E5RTError::E5RTError(v53, &v81, &v72);
        }
        --v28;
      }
      while (v28);
    }
LABEL_51:
    v76 = Rank;
    v81 = 0;
    v82 = 0uLL;
LABEL_52:
    v79 = 0uLL;
    v80 = 0;
    if (!Rank)
      goto LABEL_59;
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v35 = 8 * Rank;
    v36 = (char *)operator new(8 * Rank);
    v26 = (unint64_t)&v36[8 * v26];
    memset(v36, 255, v35);
    goto LABEL_60;
  }
}

void sub_190E0CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  v37 = *(void **)(v35 - 144);
  if (v37)
  {
    *(_QWORD *)(v35 - 136) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v35 - 120);
  if (!v38)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v35 - 112) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

void sub_190E0D214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190E0D24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    JUMPOUT(0x190E0D1C8);
  JUMPOUT(0x190E0D1A8);
}

void sub_190E0D260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    JUMPOUT(0x190E0D1C8);
  JUMPOUT(0x190E0D1A8);
}

void sub_190E0D274(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190E0D288(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 97) < 0)
  {
    operator delete(*(void **)(v2 - 120));
    __cxa_free_exception(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190E0D2B4);
}

void sub_190E0D2C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::IOPortPriv::SetPortDescriptor(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = a2[1];
  v9 = *a2;
  v10 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  E5RT::IOPortImpl::SetPortDescriptor(v2, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E0D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortImpl::SetPortDescriptor(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  E5RT::TensorDescriptor *v17;
  uint64_t result;
  E5RT::SurfaceDescriptor *v19;
  void *exception;
  void *v21;
  _QWORD v22[3];
  _BYTE v23[8];
  _QWORD v24[3];

  if (*((_BYTE *)a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SetPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v22, "Port descriptor cannot be changed while port is locked.");
    E5RT::Status::Status(v23, 2, v22);
    E5RT::E5RTError::E5RTError(exception, v24, v23);
  }
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v5)
  {
    v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SetPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v22, "Port descriptor cannot be changed while memory object is bound to port.");
    E5RT::Status::Status(v23, 2, v22);
    E5RT::E5RTError::E5RTError(v21, v24, v23);
  }
  v10 = *a2;
  v9 = a2[1];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)a1[3];
  a1[2] = v10;
  a1[3] = v9;
  if (!v13)
    goto LABEL_16;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = (void *)a1[2];
    v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v16);
    if (v17)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    v16 = (void *)a1[2];
    v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v16);
    if (v17)
    {
LABEL_17:
      result = E5RT::TensorDescriptor::HasKnownShape(v17);
      *((_BYTE *)a1 + 97) = result;
      return result;
    }
  }
  v19 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)v16);
  if (E5RT::SurfaceDescriptor::GetSurfaceWidth(v19) == -1)
  {
    result = 0;
    *((_BYTE *)a1 + 97) = 0;
  }
  else
  {
    result = E5RT::SurfaceDescriptor::GetSurfaceHeight(v19) != -1;
    *((_BYTE *)a1 + 97) = result;
  }
  return result;
}

void sub_190E0D5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::SurfaceDescriptor::~SurfaceDescriptor(E5RT::SurfaceDescriptor *this)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AE60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1010C40037D6C11);
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AE60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1010C40037D6C11);
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AE60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1010C40037D6C11);
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

_QWORD *E5RT::TensorDescriptor::CreateTensorDesc@<X0>(E5RT::TensorDataType::Impl **this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  E5RT::TensorDataType::GetNumComponents(this);
  v6 = operator new();
  E5RT::TensorDescriptorImpl::TensorDescriptorImpl(v6, a2, (E5RT::TensorDataType *)this, 0);
  v7 = (_QWORD *)operator new();
  result = E5RT::OperandDescriptor::OperandDescriptor(v7);
  *v7 = &off_1E2D5AD70;
  v7[1] = v6;
  *a3 = v7;
  return result;
}

void sub_190E0D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, E5RT::TensorDescriptorImpl *a10)
{
  uint64_t v10;

  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v10, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_190E0D7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190E0D7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void E5RT::TensorDescriptor::~TensorDescriptor(E5RT::TensorDescriptor *this)
{
  E5RT::TensorDescriptorImpl *v2;

  v2 = (E5RT::TensorDescriptorImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AD70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::TensorDescriptorImpl *v2;

  v2 = (E5RT::TensorDescriptorImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AD70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  E5RT::TensorDescriptorImpl *v2;

  v2 = (E5RT::TensorDescriptorImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5AD70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

__n128 *std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>(unint64_t *a1, uint64_t a2, __n128 *a3)
{
  __n128 *v5;
  unint64_t v6;
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __n128 v19;
  unint64_t v20;
  __n128 *v21;
  uint64_t i;
  __n128 *v23;
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  void (**v31)(uint64_t, __n128);
  uint64_t v32;
  __n128 v33;
  __n128 v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;

  v6 = *a1;
  v5 = (__n128 *)a1[1];
  v7 = (uint64_t)(a2 - *a1) / 40;
  v8 = (__n128 *)(*a1 + 40 * v7);
  v9 = a1[2];
  if ((unint64_t)v5 < v9)
  {
    if (v8 == v5)
    {
      E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)(*a1 + 40 * v7), a3);
      a1[1] = (unint64_t)&v8[2].n128_u64[1];
      return v8;
    }
    v39 = a1 + 2;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(&v35, a3);
    v10 = a1[1];
    v11 = (__n128 *)(v10 - 40);
    if (v10 < 0x28)
    {
      v14 = &v8[2].n128_i8[8];
      a1[1] = v10;
      if ((__int8 *)v10 == &v8[2].n128_i8[8])
      {
LABEL_34:
        v33 = E5RT::TensorDimensionImpl::operator=(v8, &v35);
        (*(void (**)(__n128 *, __n128))v35.n128_u64[0])(&v35, v33);
        return v8;
      }
    }
    else
    {
      v12 = (__n128 *)(v10 - 40);
      v13 = (__n128 *)a1[1];
      do
      {
        E5RT::TensorDimensionImpl::TensorDimensionImpl(v13, v12);
        v12 = (__n128 *)((char *)v12 + 40);
        v13 = (__n128 *)((char *)v13 + 40);
      }
      while ((unint64_t)v12 < v10);
      v14 = &v8[2].n128_i8[8];
      a1[1] = (unint64_t)v13;
      if ((__int8 *)v10 == &v8[2].n128_i8[8])
        goto LABEL_34;
    }
    v32 = 8 * ((uint64_t)(v10 - (_QWORD)v14) >> 3);
    do
    {
      E5RT::TensorDimensionImpl::operator=(v11, (__n128 *)(v6 + 40 * v7 - 40 + v32));
      v11 = (__n128 *)((char *)v11 - 40);
      v32 -= 40;
    }
    while (v32);
    goto LABEL_34;
  }
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v5 - v6) >> 3) + 1;
  if (v15 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v6) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x333333333333333)
    v17 = 0x666666666666666;
  else
    v17 = v15;
  v38 = a1 + 2;
  if (v17)
  {
    if (v17 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(40 * v17);
  }
  else
  {
    v18 = 0;
  }
  v35.n128_u64[0] = (unint64_t)v18;
  v35.n128_u64[1] = (unint64_t)&v18[40 * v7];
  v36 = v35.n128_u64[1];
  v37 = &v18[40 * v17];
  std::__split_buffer<E5RT::TensorDimensionImpl>::emplace_back<E5RT::TensorDimensionImpl>((uint64_t)&v35, a3);
  v20 = v35.n128_u64[1];
  v21 = (__n128 *)*a1;
  for (i = 40; ; i -= 40)
  {
    v23 = (__n128 *)((char *)v8 + i);
    if ((__n128 *)((char *)&v8[-2] + i - 8) == v21)
      break;
    v24 = (__n128 *)(v20 + i - 80);
    v19 = E5RT::TensorDimensionImpl::TensorDimensionImpl(v24, v23 - 5);
  }
  v25 = v20 + i - 40;
  v35.n128_u64[1] = v25;
  v26 = (__n128 *)a1[1];
  v27 = v36;
  if (v26 != v8)
  {
    v28 = 0;
    do
    {
      v19 = E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)(v27 + v28), (__n128 *)((char *)v8 + v28));
      v28 += 40;
    }
    while ((__n128 *)((char *)v8 + v28) != v26);
    v25 = v35.n128_i64[1];
    v8 = (__n128 *)a1[1];
    v27 += v28;
  }
  v29 = *a1;
  *a1 = v25;
  a1[1] = v27;
  v30 = (char *)a1[2];
  a1[2] = (unint64_t)v37;
  v36 = (unint64_t)v8;
  v37 = v30;
  v35.n128_u64[0] = v29;
  v35.n128_u64[1] = v29;
  if (v8 != (__n128 *)v29)
  {
    do
    {
      v31 = (void (**)(uint64_t, __n128))v8[-3].n128_u64[1];
      v36 = (unint64_t)&v8[-3].n128_u64[1];
      (*v31)((uint64_t)&v8[-3].n128_i64[1], v19);
      v8 = (__n128 *)v36;
    }
    while (v36 != v29);
    v8 = (__n128 *)v35.n128_u64[0];
  }
  if (v8)
    operator delete(v8);
  return (__n128 *)v20;
}

void sub_190E0DB2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_190E0DB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(_QWORD))
{
  (*a9)(&a9);
  _Unwind_Resume(a1);
}

void sub_190E0DB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  for (; v10; v10 -= 40)
    (**(void (***)(uint64_t))(v9 - 40 + v10))(v9 - 40 + v10);
  std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 E5RT::TensorDimensionImpl::TensorDimensionImpl(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a2[2].n128_u64[0];
  result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  a1->n128_u64[0] = (unint64_t)&off_1E2D5B098;
  a1->n128_u64[1] = (unint64_t)a1;
  return result;
}

__n128 E5RT::TensorDimensionImpl::operator=(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a2[2].n128_u64[0];
  result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  return result;
}

_QWORD *E5RT::TensorDimensionImpl::TensorDimensionImpl(_QWORD *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  this[2] = a2;
  this[3] = a3;
  this[4] = a4;
  *this = &off_1E2D5B098;
  this[1] = this;
  return this;
}

void std::vector<E5RT::TensorDimensionImpl>::reserve(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;
  __int128 v15;

  v2 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = a1[1];
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 40;
      E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)&v8[v7], (__n128 *)(v7 + v4));
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v15;
    if (v9 != v10)
    {
      v11 = v9 - 40;
      v12 = v9 - 40;
      do
      {
        v13 = *(void (***)(char *))v12;
        v12 -= 40;
        (*v13)(v11);
        v14 = v11 == v10;
        v11 = v12;
      }
      while (!v14);
    }
    if (v10)
      operator delete(v10);
  }
}

uint64_t E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *exception;
  void *v8;
  _QWORD v9[3];
  _BYTE v10[8];
  _QWORD v11[3];

  if (!*(_BYTE *)(this + 104))
  {
    v1 = *(_QWORD *)(this + 24);
    v2 = *(_QWORD *)(this + 32) - v1;
    if (v2 < 1)
      goto LABEL_13;
    v3 = 0;
    v4 = (unint64_t)v2 >> 3;
    v5 = v1 - 8;
    while (1)
    {
      while (v3)
      {
        if (*(_QWORD *)(*(_QWORD *)(this + 48) + 8 * v4 - 8) != 0x7FFFFFFFFFFFFFFFLL)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v11, "ValidateUnknownDimensions");
          std::string::basic_string[abi:ne180100]<0>(v9, "Dimension strides must be unknown if any of the inner dimension lengths are unknown.");
          E5RT::Status::Status(v10, 2, v9);
          E5RT::E5RTError::E5RTError(exception, v11, v10);
        }
        if (v4 <= 1)
          return this;
        v3 = 1;
        --v4;
      }
      v6 = *(_QWORD *)(v5 + 8 * v4);
      v3 = v6 == -1;
      if (v4 < 2)
        break;
      --v4;
    }
    if (v6 != -1)
    {
LABEL_13:
      v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "ValidateUnknownDimensions");
      std::string::basic_string[abi:ne180100]<0>(v9, "TensorDescriptor indicates unknown shape but all dim lengths are known");
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(v8, v11, v10);
    }
  }
  return this;
}

void sub_190E0DEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

char *std::vector<unsigned long>::insert(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v19 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (char *)(v14 + v6);
      v16 = v14 + v6 + 8;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        v19 = a1[1];
      }
      else
      {
        v18 = v5 - (_QWORD)v15;
        v19 = a1[1];
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v21);
          v19 = (_QWORD *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v9 = *(_QWORD *)v3;
    return v9;
  }
  v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v28 = v10 - v6;
  if (v28 >> 2 > v26)
    v26 = v28 >> 2;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
    v29 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v30 = (char *)operator new(8 * v29);
    v31 = &v30[8 * v8];
    v32 = &v30[8 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(8 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v52 = 1;
    else
      v52 = v7 >> 2;
    if (v52 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v53 = (char *)operator new(8 * v52);
    v31 = &v53[8 * (v52 >> 2)];
    v32 = &v53[8 * v52];
    if (v30)
    {
      v54 = &v53[8 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = (char *)*a1;
      *(_QWORD *)v31 = *(_QWORD *)v3;
      v35 = v31 + 8;
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(_QWORD *)v31 = *(_QWORD *)v3;
  v35 = v31 + 8;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v38 = v37 - v34 - 8;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x58)
      goto LABEL_61;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_61;
    v40 = (v38 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (__int128 *)(v6 + 8 * v8 - 16);
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_61:
      do
      {
        v46 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *((_QWORD *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34)
    operator delete(v34);
  return v31;
}

void sub_190E0E318(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<long>::insert(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v19 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (char *)(v14 + v6);
      v16 = v14 + v6 + 8;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        v19 = a1[1];
      }
      else
      {
        v18 = v5 - (_QWORD)v15;
        v19 = a1[1];
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v21);
          v19 = (_QWORD *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v28 = v10 - v6;
  if (v28 >> 2 > v26)
    v26 = v28 >> 2;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
    v29 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v30 = (char *)operator new(8 * v29);
    v31 = &v30[8 * v8];
    v32 = &v30[8 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(8 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v52 = 1;
    else
      v52 = v7 >> 2;
    if (v52 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v53 = (char *)operator new(8 * v52);
    v31 = &v53[8 * (v52 >> 2)];
    v32 = &v53[8 * v52];
    if (v30)
    {
      v54 = &v53[8 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = (char *)*a1;
      *(_QWORD *)v31 = *a3;
      v35 = v31 + 8;
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(_QWORD *)v31 = *a3;
  v35 = v31 + 8;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v38 = v37 - v34 - 8;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x58)
      goto LABEL_59;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_59;
    v40 = (v38 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (__int128 *)(v6 + 8 * v8 - 16);
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        v46 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *((_QWORD *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34)
    operator delete(v34);
  return v31;
}

void sub_190E0E684(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal **v3;
  uint64_t InputPorts;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t **v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v18;
  E5RT::TensorDescriptor *v19;
  uint64_t v20;
  int **TensorShape;
  unint64_t Rank;
  int *v23;
  uint64_t v24;
  int *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *exception;
  void *v31;
  void *v32;
  void *v33;
  E5RT::ExecutionStreamOperationInternal **v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  _QWORD *v42;
  void *v43;
  void *__p;
  char *v45;
  char *v46;
  _QWORD v47[3];
  char v48[8];
  _QWORD v49[4];

  v3 = a1;
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  v5 = *(_QWORD *)(a2 + 24);
  v42 = (_QWORD *)InputPorts;
  if (v5 != *(_QWORD *)(InputPorts + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(&__p, 2, v47);
    E5RT::E5RTError::E5RTError(exception, v49, &__p);
  }
  v6 = v5 << 32;
  __p = 0;
  v45 = 0;
  v46 = 0;
  v41 = v5;
  if (!(v5 << 32))
  {
    v43 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(uint64_t ***)(a2 + 16);
    if (!v13)
      goto LABEL_28;
    goto LABEL_7;
  }
  if ((v6 & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  __p = operator new((8 * v5) & 0x7FFFFFFFFLL);
  v46 = (char *)__p + 8 * (int)v5;
  bzero(__p, (8 * v5) & 0x7FFFFFFFFLL);
  v45 = (char *)__p + ((8 * v5) & 0x7FFFFFFFFLL);
  v7 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v7, (4 * v5) & 0x3FFFFFFFFLL);
  v8 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v8, (4 * v5) & 0x3FFFFFFFFLL);
  v9 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v9, (4 * v5) & 0x3FFFFFFFFLL);
  v10 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  v43 = __p;
  bzero(v10, (4 * v5) & 0x3FFFFFFFFLL);
  v11 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v11, v6 >> 30);
  v12 = operator new(v6 >> 30);
  bzero(v12, v6 >> 30);
  v13 = *(uint64_t ***)(a2 + 16);
  if (v13)
  {
LABEL_7:
    v34 = v3;
    v35 = v12;
    v14 = v10;
    v15 = 0;
    v36 = v11;
    v37 = v14;
    v38 = v9;
    v39 = v8;
    v40 = v7;
    while (1)
    {
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v42, (uint64_t)(v13 + 2));
      if (!v16)
      {
        v28 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
        std::string::basic_string[abi:ne180100]<0>(v47, "Unknown operand name given for reshaping.");
        E5RT::Status::Status(v48, 2, v47);
        E5RT::E5RTError::E5RTError(v28, v49, v48);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v16[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        v29 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
        std::string::basic_string[abi:ne180100]<0>(v47, "EIR op cannot reshape a surface descriptor.");
        E5RT::Status::Status(v48, 2, v47);
        E5RT::E5RTError::E5RTError(v29, v49, v48);
      }
      v18 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v13[5]);
      v19 = v18;
      v20 = *((char *)v13 + 39) >= 0 ? (uint64_t)(v13 + 2) : (uint64_t)v13[2];
      v43 = __p;
      *(_QWORD *)((char *)__p + v15) = v20;
      TensorShape = (int **)E5RT::TensorDescriptor::GetTensorShape(v18);
      Rank = E5RT::TensorDescriptor::GetRank(v19);
      if (!Rank)
        break;
      v23 = *TensorShape;
      v24 = (uint64_t)&(*TensorShape)[2 * Rank];
      *v7 = *(_QWORD *)(v24 - 8);
      if (Rank == 1)
        goto LABEL_20;
      *v8 = *(_QWORD *)(v24 - 16);
      if (Rank <= 2)
        goto LABEL_21;
      v25 = &v23[2 * Rank];
      *v9 = *((_QWORD *)v25 - 3);
      if (Rank == 3)
        goto LABEL_22;
      *v14 = *((_QWORD *)v25 - 4);
      if (Rank != 5)
      {
        *v11 = 1;
        *v12 = Rank;
        if (Rank >= 6)
        {
          v27 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v49, "operator()");
          std::string::basic_string[abi:ne180100]<0>(v47, "Cannot reshape a tensor of rank > 5.");
          E5RT::Status::Status(v48, 2, v47);
          E5RT::E5RTError::E5RTError(v27, v49, v48);
        }
        goto LABEL_24;
      }
      v26 = *v23;
LABEL_23:
      *v11 = v26;
      *v12 = Rank;
LABEL_24:
      v15 += 8;
      ++v7;
      v13 = (uint64_t **)*v13;
      ++v8;
      ++v9;
      ++v14;
      ++v12;
      ++v11;
      if (!v13)
      {
        v8 = v39;
        v7 = v40;
        v10 = v37;
        v9 = v38;
        v12 = v35;
        v11 = v36;
        v3 = v34;
        goto LABEL_28;
      }
    }
    *v7 = 1;
LABEL_20:
    *v8 = 1;
LABEL_21:
    *v9 = 1;
LABEL_22:
    v26 = 1;
    *v14 = 1;
    goto LABEL_23;
  }
LABEL_28:
  if (espresso_plan_build_clean(v3[2]))
  {
    v31 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to clean plan before reshaping EIR op. Op state is corrupted.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v31, v49, v48);
  }
  if (espresso_network_change_input_blob_shapes_seq_rank(v3[3], (int)v3[4], v41, (uint64_t)v43, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12))
  {
    v32 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to reshape espresso network input shapes.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v32, v49, v48);
  }
  if (espresso_plan_build(v3[2]))
  {
    v33 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to rebuild plan after reshaping espresso network inputs.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v33, v49, v48);
  }
  if (v12)
    operator delete(v12);
  if (v11)
    operator delete(v11);
  if (v10)
    operator delete(v10);
  if (v9)
    operator delete(v9);
  if (v8)
    operator delete(v8);
  if (v7)
    operator delete(v7);
  if (__p)
    operator delete(__p);
}

void sub_190E0ED20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v36;

  operator delete(v32);
  if (v30)
  {
    operator delete(v30);
    if (v33)
    {
LABEL_10:
      operator delete(v33);
      if (v31)
      {
LABEL_11:
        operator delete(v31);
        if (v34)
        {
LABEL_12:
          operator delete(v34);
          v36 = __p;
          if (!__p)
LABEL_7:
            _Unwind_Resume(a1);
LABEL_6:
          operator delete(v36);
          goto LABEL_7;
        }
LABEL_5:
        v36 = __p;
        if (!__p)
          goto LABEL_7;
        goto LABEL_6;
      }
LABEL_4:
      if (v34)
        goto LABEL_12;
      goto LABEL_5;
    }
  }
  else if (v33)
  {
    goto LABEL_10;
  }
  if (v31)
    goto LABEL_11;
  goto LABEL_4;
}

uint64_t espresso_plan_build(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x19401D4A4]();
  v3 = espresso_plan_build_with_options(a1, 0, 0);
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t espresso_plan_build_with_options(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __str;

  v6 = (void *)MEMORY[0x19401D4A4]();
  if (!a1
  {
LABEL_14:
    v12 = 4294967290;
    goto LABEL_15;
  }
  if (a3)
  {
    if (a2)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(a2 + 8 * v7);
        if (*(_DWORD *)v8 != 1)
          break;
        std::string::basic_string[abi:ne180100](&__str, *(void **)(v8 + 16), *(_QWORD *)(v8 + 8));
        v9 = a1[133];
        v10 = *(_QWORD *)(v9 + 24);
        v11 = *(_QWORD *)(v9 + 32);
        while (v10 != v11)
        {
          std::string::operator=((std::string *)(*(_QWORD *)v10 + 448), &__str);
          v10 += 16;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (++v7 == a3)
          goto LABEL_13;
      }
    }
    goto LABEL_14;
  }
LABEL_13:
  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v12 = 0;
LABEL_15:
  objc_autoreleasePoolPop(v6);
  return v12;
}

void Espresso::generic_alloc_kernel::register_layer_io(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF450;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA20D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_190E0F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_loop_kernel::register_layer_io(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF920;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2658;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_190E0F3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::generic_load_global_kernel::register_layer_io(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0100;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2F58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_190E0F4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (a3)
  {
    *(_QWORD *)&v9 = a3;
    *((_QWORD *)&v9 + 1) = a4;
    if (a4)
    {
      v4 = (unint64_t *)(a4 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  else
  {
    v9 = 0uLL;
  }
  Espresso::generic_factory_t::register_object_(a1, a2, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E0F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_factory_t::register_object_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::mutex *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1 + 96, &v17, (_QWORD *)a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x48uLL);
    v15[0] = v8;
    v15[1] = a1 + 104;
    v16 = 0;
    v10 = (std::string *)(v8 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v8[6] = *(_QWORD *)(a2 + 16);
    }
    v8[7] = 0;
    v8[8] = 0;
    v16 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)(a1 + 96), v17, v9, v8);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  v11 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v12 = (std::__shared_weak_count *)v8[8];
  *(_OWORD *)(v8 + 7) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::mutex::unlock(v6);
}

void sub_190E0F6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

__n128 Espresso::engine_cpu::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0xB8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6B28;
  result.n128_u64[0] = Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_190E0F784(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::load_js_fstream(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;

  v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v6, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 280))(*a1, a2);
}

void sub_190E0F7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::get_net_info_ir(uint64_t *a1, uint64_t *a2, Espresso ***a3, uint64_t a4, unsigned int *a5, int *a6, int *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v67[2];
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;

  v17 = *a1;
  v18 = (std::__shared_weak_count *)a1[1];
  __asm { FMOV            V0.2S, #1.0 }
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v71 = v17;
    v72 = v18;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v73 = 100;
    v74 = 0;
    v76 = 0;
    v75 = 0;
    v77 = 0;
    v78 = _D0;
    v79 = 0;
    v80 = 0;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v71 = *a1;
    v72 = 0;
    v73 = 100;
    v74 = 0;
    v76 = 0;
    v75 = 0;
    v77 = 0;
    v78 = _D0;
    v79 = 0;
    v80 = 0;
  }
  v28 = *a10;
  if (!*a10)
  {
    v29 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *(_QWORD *)v29 = &off_1E2DBDC08;
    *(_OWORD *)(v29 + 88) = 0u;
    *(_OWORD *)(v29 + 136) = 0u;
    *(_OWORD *)(v29 + 120) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_OWORD *)(v29 + 72) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 104) = 0u;
    *((_QWORD *)v29 + 12) = v29 + 104;
    *((_QWORD *)v29 + 17) = 0;
    *((_QWORD *)v29 + 16) = 0;
    *((_QWORD *)v29 + 15) = v29 + 128;
    *((_QWORD *)v29 + 21) = 0;
    *((_QWORD *)v29 + 20) = 0;
    *((_QWORD *)v29 + 19) = v29 + 160;
    *(_QWORD *)&v70 = v29 + 24;
    *((_QWORD *)&v70 + 1) = v29;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a10, &v70);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v28 = *a10;
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v79, v28, a10[1]);
  v33 = *a7;
  v73 = *a6;
  LODWORD(v74) = v33;
  if (!*a8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v70, (const Espresso::cpu_context_transfer_algo_options *)&v71);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a8, &v70);
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  if (!*a9)
  {
    v34 = (char *)operator new(0x70uLL);
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_1E2DB7030;
    *(_OWORD *)(v34 + 40) = 0u;
    *(_OWORD *)(v34 + 24) = 0u;
    *(_OWORD *)(v34 + 56) = 0u;
    *((_QWORD *)v34 + 6) = v34 + 56;
    *((_QWORD *)v34 + 10) = 0;
    *((_QWORD *)v34 + 9) = v34 + 80;
    *((_QWORD *)v34 + 12) = 0;
    *((_QWORD *)v34 + 13) = 0;
    *((_QWORD *)v34 + 11) = 0;
    *(_QWORD *)&v70 = v34 + 24;
    *((_QWORD *)&v70 + 1) = v34;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a9, &v70);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *a9;
    v40 = *a2;
    v39 = a2[1];
    if (v39)
    {
      v41 = (unint64_t *)(v39 + 16);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = *(std::__shared_weak_count **)(v38 + 80);
    *(_QWORD *)(v38 + 72) = v40;
    *(_QWORD *)(v38 + 80) = v39;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  v44 = *a8;
  v45 = (std::__shared_weak_count *)a1[1];
  v68 = *a1;
  v69 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *a5;
  v49 = (std::__shared_weak_count *)a9[1];
  v67[0] = *a9;
  v67[1] = (uint64_t)v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  Espresso::cpu_context_transfer_algo_t::create_net_info_ir(v44, a3, &v68, a4, v48, v67);
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v54 = v69;
  if (v69)
  {
    v55 = (unint64_t *)&v69->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v80;
  if (v80)
  {
    v58 = (unint64_t *)&v80->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *(_QWORD *)&v70 = (char *)&v74 + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  v60 = v72;
  if (v72)
  {
    v61 = (unint64_t *)&v72->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_190E0FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options((Espresso::cpu_context_transfer_algo_options *)va);
  _Unwind_Resume(a1);
}

Espresso::cpu_context_transfer_algo_t *Espresso::cpu_context_transfer_algo_t::cpu_context_transfer_algo_t(Espresso::cpu_context_transfer_algo_t *this, const Espresso::cpu_context_transfer_algo_options *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 buf;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)this + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  v7 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 9) = 0;
  v10 = (uint64_t *)((char *)this + 72);
  *((_QWORD *)this + 11) = 850045863;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  Espresso::create_context((int *)this + 4, &buf);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 72, &buf);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *v10;
  if (!*v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_fault_impl(&dword_190DAF000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Error creating fallback context: check process entitlements", (uint8_t *)&buf, 2u);
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Error creating fallback context: check process entitlements");
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v22 = *(_QWORD *)this;
  v23 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 112))(v14, &v22);
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return this;
}

void sub_190E0FE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::cpu_context_transfer_algo_options *v9;
  uint64_t v10;
  std::mutex *v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::~mutex(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10);
  Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options(v9);
  _Unwind_Resume(a1);
}

uint64_t espresso_create_context(unsigned int a1, unsigned int a2)
{
  void *v2;
  Espresso *v3;
  int v4;
  std::mutex *v5;
  int v6;
  uint64_t v7;
  Espresso *v8;
  const char *v9;
  NSObject *v10;
  unsigned int v12;
  unsigned int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a1;
  v2 = (void *)MEMORY[0x19401D4A4]();
  adjust_espresso_engine((Espresso *)&v13, (char *)&v12);
  v3 = (Espresso *)v12;
  v4 = v13;
  if (pre_validate_context(v13))
  {
    if (g_espresso_autoinitialize)
    {
      v5 = (std::mutex *)g_autoinitialize_mutex;
      std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
      if (g_espresso_autoinitialize)
      {
        v6 = g_autoinitialize_ctx_count;
        if (!g_autoinitialize_ctx_count)
        {
          espresso_initialize_was_called = 1;
          initialize_static_memory();
          v6 = g_autoinitialize_ctx_count;
        }
        g_autoinitialize_ctx_count = v6 + 1;
      }
      else
      {
        initialize_static_memory();
      }
      std::mutex::unlock(v5);
    }
    else
    {
      initialize_static_memory();
    }
    v7 = operator new();
    v8 = (Espresso *)EspressoLight::espresso_context::espresso_context(v7, v4, v3, 0, 0);
    Espresso::espresso_os_log_subsystem(v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      v15 = v7;
      v16 = 1024;
      v17 = v4;
      v18 = 1024;
      v19 = (int)v3;
      _os_log_impl(&dword_190DAF000, v10, OS_LOG_TYPE_INFO, "Creating context %zu eng=%d dev=%d", buf, 0x18u);
    }

  }
  else
  {
    v7 = 0;
  }
  objc_autoreleasePoolPop(v2);
  return v7;
}

void sub_190E100DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_190E100E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_context::espresso_context(uint64_t a1, int a2, Espresso *a3, void *a4, const void *a5)
{
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  void *v52;
  Espresso::context_metal *v53;
  void *v54;
  std::string *p_p;
  void *v56;
  void *v57;
  NSDictionary *v58;
  id v59;
  void *v60;
  unint64_t *v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::string::size_type v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  unint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t *v135;
  unint64_t *v136;
  std::logic_error *exception;
  std::logic_error *v139;
  std::string *v140;
  __int128 v141;
  std::runtime_error *v142;
  std::string *v143;
  std::string *v144;
  const char *v145;
  std::string v146;
  int v147;
  int v148;
  id v149;
  std::__shared_weak_count *v150;
  std::string __p;

  *(_QWORD *)a1 = 0x50FBC8A8A6F7B03CLL;
  *(_DWORD *)(a1 + 8) = 0;
  v10 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 16) = v10;
  v11 = (uint64_t *)(a1 + 16);
  *v10 = 0;
  v10[1] = 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("espresso.force_engine"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
    a2 = objc_msgSend(v14, "intValue");

  if (a2 > 10005)
  {
    if (a2 <= 50001)
    {
      switch(a2)
      {
        case 10006:
          LODWORD(v146.__r_.__value_.__l.__data_) = 10006;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_224;
          v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          goto LABEL_222;
        case 10007:
          LODWORD(v146.__r_.__value_.__l.__data_) = 10007;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_224;
          v81 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v24 = __ldaxr(v81);
          while (__stlxr(v24 - 1, v81));
          goto LABEL_222;
        case 10008:
          LODWORD(v146.__r_.__value_.__l.__data_) = 10008;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_224;
          v80 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v24 = __ldaxr(v80);
          while (__stlxr(v24 - 1, v80));
          goto LABEL_222;
        case 10009:
        case 10011:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Unsupported engine type");
          goto LABEL_238;
        case 10010:
          LODWORD(v146.__r_.__value_.__l.__data_) = 10010;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          v16 = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v79 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v79);
          while (__stlxr(v18 - 1, v79));
          goto LABEL_232;
        default:
          goto LABEL_239;
      }
    }
    if (a2 <= 50007)
    {
      if (a2 == 50002)
      {
        if (a4)
        {
          LODWORD(v149) = 50002;
          Espresso::abstract_engine_factory::shared(&__p);
          Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
          v74 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v75 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v77 = operator new(0x110uLL);
          v77[1] = 0;
          v77[2] = 0;
          *v77 = &off_1E2DB99F8;
          v78 = Espresso::MPSEngine::context::context<objc_object  {objcproto15MTLCommandQueue}* {__strong}>((uint64_t)(v77 + 3), &v146, a4);
        }
        else
        {
          v148 = 50002;
          Espresso::abstract_engine_factory::shared(&__p);
          Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, &v148, &v146);
          v107 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v108 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          Espresso::select_metal_device(a3);
          v74 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
          v77 = operator new(0x110uLL);
          v77[1] = 0;
          v77[2] = 0;
          *v77 = &off_1E2DB99F8;
          v78 = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>((uint64_t)(v77 + 3), &v146, v74);
        }
        v77[3] = &off_1E2D72C40;
        *((_WORD *)v77 + 132) = 1;
        *((_BYTE *)v77 + 68) = 1;
        *((_BYTE *)v77 + 80) = 1;
        *(_QWORD *)&v110 = v78;
        *((_QWORD *)&v110 + 1) = v77;
        v111 = *(std::__shared_weak_count **)(*v11 + 8);
        *(_OWORD *)*v11 = v110;
        if (v111)
        {
          p_shared_owners = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldaxr(p_shared_owners);
          while (__stlxr(v113 - 1, p_shared_owners));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        if (a4)
        {

          v16 = v146.__r_.__value_.__l.__size_;
          if (!v146.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v114 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v114);
          while (__stlxr(v18 - 1, v114));
        }
        else
        {

          v16 = v146.__r_.__value_.__l.__size_;
          if (!v146.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v135 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v135);
          while (__stlxr(v18 - 1, v135));
        }
        goto LABEL_232;
      }
      if (a2 == 50005)
      {
        if (a4)
        {
          LODWORD(v149) = 50005;
          Espresso::abstract_engine_factory::shared(&__p);
          Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
          v33 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = operator new(0x110uLL);
          v36[1] = 0;
          v36[2] = 0;
          *v36 = &off_1E2DB7FF0;
          v37 = Espresso::MPSEngine::context::context<objc_object  {objcproto15MTLCommandQueue}* {__strong}>((uint64_t)(v36 + 3), &v146, a4);
        }
        else
        {
          v148 = 50005;
          Espresso::abstract_engine_factory::shared(&__p);
          Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, &v148, &v146);
          v115 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v116 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          Espresso::select_metal_device(a3);
          v33 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
          v36 = operator new(0x110uLL);
          v36[1] = 0;
          v36[2] = 0;
          *v36 = &off_1E2DB7FF0;
          v37 = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>((uint64_t)(v36 + 3), &v146, v33);
        }
        *((_WORD *)v36 + 132) = 1;
        v36[3] = &off_1E2D66D08;
        *((_BYTE *)v36 + 96) = 1;
        *((_BYTE *)v36 + 68) = 0;
        *((_BYTE *)v36 + 80) = 1;
        *((_BYTE *)v36 + 148) = 1;
        *(_QWORD *)&v118 = v37;
        *((_QWORD *)&v118 + 1) = v36;
        v119 = *(std::__shared_weak_count **)(*v11 + 8);
        *(_OWORD *)*v11 = v118;
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        if (a4)
        {

          v16 = v146.__r_.__value_.__l.__size_;
          if (!v146.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v122 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v122);
          while (__stlxr(v18 - 1, v122));
        }
        else
        {

          v16 = v146.__r_.__value_.__l.__size_;
          if (!v146.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v136 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v136);
          while (__stlxr(v18 - 1, v136));
        }
        goto LABEL_232;
      }
    }
    else
    {
      switch(a2)
      {
        case 50008:
          LODWORD(v146.__r_.__value_.__l.__data_) = 50008;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          v16 = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v72 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v72);
          while (__stlxr(v18 - 1, v72));
          goto LABEL_232;
        case 80000:
          LODWORD(v146.__r_.__value_.__l.__data_) = 80000;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          v16 = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v73 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v73);
          while (__stlxr(v18 - 1, v73));
          goto LABEL_232;
        case 100000:
          LODWORD(v146.__r_.__value_.__l.__data_) = 100000;
          Espresso::create_context((int *)&v146, &__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
          v16 = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_235;
          v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          goto LABEL_232;
      }
    }
LABEL_239:
    v139 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v146, a2);
    v140 = std::string::insert(&v146, 0, "Invalid platform enum ");
    v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v139, &__p);
    v139->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v139, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  switch(a2)
  {
    case 0:
      LODWORD(v146.__r_.__value_.__l.__data_) = 100;
      Espresso::create_context((int *)&v146, &__p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
      v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_BYTE *)(*(_QWORD *)*v11 + 65) = 0;
      goto LABEL_235;
    case 1:
      LODWORD(v146.__r_.__value_.__l.__data_) = 0;
      Espresso::create_context((int *)&v146, &__p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
      v16 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_235;
      v62 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v62);
      while (__stlxr(v18 - 1, v62));
      goto LABEL_232;
    case 2:
      Espresso::select_metal_device(a3);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      Espresso::create_metal_context((uint64_t)&v146, v52, 0);

      v53 = (Espresso::context_metal *)v146.__r_.__value_.__r.__words[0];
      if (!v146.__r_.__value_.__r.__words[0])
      {
        v142 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Espresso cannot find available METAL engine.");
        std::runtime_error::runtime_error(v142, &__p);
        v142->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
        LODWORD(v142[1].__vftable) = -12;
      }
      if (a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a4);
        v54 = (void *)MEMORY[0x1E0C99D50];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "dataWithContentsOfFile:", v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v57)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v143 = &__p;
          else
            v143 = (std::string *)__p.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::io_error,char const*>("Wisdom file not available (%s)", (uint64_t)v143);
        }
        v149 = 0;
        objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v57, 0, &v149);
        v58 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        v59 = v149;
        v60 = v59;
        if (!v58)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v144 = &__p;
          else
            v144 = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(v59, "description");
          v145 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
          Espresso::throw_exception_selector<Espresso::io_error,char const*,char const*>((const char *)v144, v145);
        }
        Espresso::context_metal::load_wisdom_from_nsdictionary(v53, v58);

        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&v146);
      *(_BYTE *)(*(_QWORD *)*v11 + 56) = 1;
      v16 = v146.__r_.__value_.__l.__size_;
      if (!v146.__r_.__value_.__l.__size_)
        goto LABEL_235;
      v61 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v61);
      while (__stlxr(v18 - 1, v61));
      goto LABEL_232;
    case 3:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Espresso compiled without CUDNN engine.");
      goto LABEL_238;
    case 4:
    case 6:
      goto LABEL_239;
    case 5:
      if (a4)
      {
        v148 = 50000;
        Espresso::abstract_engine_factory::shared(&__p);
        Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, &v148, &v149);
        v47 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v48 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = operator new(0x108uLL);
        v50[1] = 0;
        v50[2] = 0;
        *v50 = &off_1E2DC2588;
        v146.__r_.__value_.__r.__words[0] = Espresso::MPSEngine::context::context<objc_object  {objcproto15MTLCommandQueue}* {__strong}>((uint64_t)(v50 + 3), &v149, a4);
        v146.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
      }
      else
      {
        v147 = 50000;
        Espresso::abstract_engine_factory::shared(&__p);
        Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, &v147, &v149);
        v95 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v96 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        Espresso::select_metal_device(a3);
        v50 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::context,std::allocator<Espresso::MPSEngine::context>,std::shared_ptr<Espresso::abstract_engine>,objc_object  {objcproto9MTLDevice}* {__strong},void>((uint64_t *)&v146, &v149, v50);
      }
      v98 = *v11;
      v99 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = 0uLL;
      v100 = *(std::__shared_weak_count **)(v98 + 8);
      *(_OWORD *)v98 = v99;
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
      if (v146.__r_.__value_.__l.__size_)
      {
        v104 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      if (a4)
      {

        size = v150;
        if (!v150)
          goto LABEL_224;
        v106 = (unint64_t *)&v150->__shared_owners_;
        do
          v24 = __ldaxr(v106);
        while (__stlxr(v24 - 1, v106));
      }
      else
      {

        size = v150;
        if (!v150)
          goto LABEL_224;
        v134 = (unint64_t *)&v150->__shared_owners_;
        do
          v24 = __ldaxr(v134);
        while (__stlxr(v24 - 1, v134));
      }
LABEL_222:
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
LABEL_224:
      *(_BYTE *)(*(_QWORD *)*v11 + 56) = 1;
      goto LABEL_235;
    case 7:
      LODWORD(v149) = 5;
      Espresso::abstract_engine_factory::shared(&__p);
      Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
      v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = operator new(0xC0uLL);
      v41[1] = 0;
      v41[2] = 0;
      *v41 = &off_1E2DC12F0;
      *(_QWORD *)&v42 = Espresso::HXEngine::context::context((uint64_t)(v41 + 3), &v146, a4, a5);
      *((_QWORD *)&v42 + 1) = v41;
      v43 = *(std::__shared_weak_count **)(*v11 + 8);
      *(_OWORD *)*v11 = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v16 = v146.__r_.__value_.__l.__size_;
      if (!v146.__r_.__value_.__l.__size_)
        goto LABEL_235;
      v46 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v46);
      while (__stlxr(v18 - 1, v46));
      goto LABEL_232;
    case 8:
      LODWORD(v146.__r_.__value_.__l.__data_) = 6;
      Espresso::create_context((int *)&v146, &__p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v11, (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_224;
      v51 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v51);
      while (__stlxr(v24 - 1, v51));
      goto LABEL_222;
    case 9:
      LODWORD(v149) = 7;
      Espresso::abstract_engine_factory::shared(&__p);
      Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
      v63 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v64 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = operator new(0xD0uLL);
      v66[1] = 0;
      v66[2] = 0;
      *v66 = &off_1E2DC1B08;
      *(_QWORD *)&v67 = Espresso::CVAEngine::context::context((uint64_t)(v66 + 3), &v146, a4, a5);
      *((_QWORD *)&v67 + 1) = v66;
      v68 = *(std::__shared_weak_count **)(*v11 + 8);
      *(_OWORD *)*v11 = v67;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v16 = v146.__r_.__value_.__l.__size_;
      if (!v146.__r_.__value_.__l.__size_)
        goto LABEL_235;
      v71 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v71);
      while (__stlxr(v18 - 1, v71));
      goto LABEL_232;
    default:
      if (a2 == 201)
      {
        LODWORD(v149) = 20000;
        Espresso::abstract_engine_factory::shared(&__p);
        Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
        v82 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v83 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        Espresso::select_metal_device(a3);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        v86 = operator new(0xF8uLL);
        v86[1] = 0;
        v86[2] = 0;
        *v86 = &off_1E2DBB390;
        *(_QWORD *)&v87 = Espresso::MetalLowmemEngine::context::context((uint64_t)(v86 + 3), &v146, v85, 1);
        *((_QWORD *)&v87 + 1) = v86;
        v88 = *(std::__shared_weak_count **)(*v11 + 8);
        *(_OWORD *)*v11 = v87;
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = v146.__r_.__value_.__l.__size_;

        if (v91)
        {
          v92 = (unint64_t *)(v91 + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v91 + 16))(v91);
            v94 = (std::__shared_weak_count *)v91;
LABEL_234:
            std::__shared_weak_count::__release_weak(v94);
          }
        }
      }
      else
      {
        if (a2 != 209)
          goto LABEL_239;
        LODWORD(v149) = 90000;
        Espresso::abstract_engine_factory::shared(&__p);
        Espresso::abstract_engine_factory::engine_for_platform((uint64_t)__p.__r_.__value_.__l.__data_, (int *)&v149, &v146);
        v25 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (a4)
        {
          v28 = (std::__shared_weak_count *)operator new(0x108uLL);
          v28->__shared_owners_ = 0;
          v28->__shared_weak_owners_ = 0;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1830;
          v29 = v28 + 1;
          Espresso::context_metal::context_metal((uint64_t)&v28[1], &v146, a4);
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA6AC0;
          HIDWORD(v28[10].__vftable) = 16843009;
          LOBYTE(v28[10].__shared_owners_) = 1;
          *(uint64_t *)((char *)&v28[10].__shared_owners_ + 4) = 0xFFFFFFFF00000000;
          BYTE4(v28[2].__shared_weak_owners_) = 1;
          _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v28[2], (__int128 *)&__p);
          v30 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        else
        {
          Espresso::select_metal_device(a3);
          a4 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = (std::__shared_weak_count *)operator new(0x108uLL);
          v28->__shared_owners_ = 0;
          v28->__shared_weak_owners_ = 0;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1830;
          v29 = v28 + 1;
          Espresso::context_metal::context_metal((uint64_t)&v28[1], &v146, a4);
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA6AC0;
          HIDWORD(v28[10].__vftable) = 16843009;
          LOBYTE(v28[10].__shared_owners_) = 1;
          *(uint64_t *)((char *)&v28[10].__shared_owners_ + 4) = 0xFFFFFFFF00000000;
          BYTE4(v28[2].__shared_weak_owners_) = 1;
          _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v28[2], (__int128 *)&__p);
          v123 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v124 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        objc_msgSend((id)v28[7].__shared_weak_owners_, "setKernelPrefix:", CFSTR("V9_"));

        v126 = (_QWORD *)*v11;
        v127 = (unint64_t *)&v28->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
        v129 = (std::__shared_weak_count *)v126[1];
        *v126 = v29;
        v126[1] = v28;
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        HIDWORD(v29[7].__shared_weak_owners_) = 0;
        BYTE4(v29[1].__shared_weak_owners_) = 1;
        do
          v132 = __ldaxr(v127);
        while (__stlxr(v132 - 1, v127));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        v16 = v146.__r_.__value_.__l.__size_;
        if (v146.__r_.__value_.__l.__size_)
        {
          v133 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v133);
          while (__stlxr(v18 - 1, v133));
LABEL_232:
          if (v18)
            goto LABEL_235;
          (*(void (**)(std::string::size_type))(*(_QWORD *)v16 + 16))(v16);
          v94 = (std::__shared_weak_count *)v16;
          goto LABEL_234;
        }
      }
LABEL_235:
      if (!*(_QWORD *)*v11)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Could not create context");
LABEL_238:
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }

      return a1;
  }
}

void sub_190E11368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t *v23;
  void *v24;
  void *v25;
  int v26;

  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      std::unique_ptr<EspressoLight::espresso_context::priv_t>::reset[abi:ne180100](v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_190E11600()
{
  void *v0;

  JUMPOUT(0x190E115F0);
}

void sub_190E1160C()
{
  JUMPOUT(0x190E115F0);
}

void Espresso::create_context(int *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  Espresso *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  Espresso *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  Espresso::abstract_engine_factory::shared(&v21);
  Espresso::abstract_engine_factory::engine_for_platform(v21, a1, &v19);
  v5 = v22;
  if (!v22)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = v19;
    if (v19)
    {
LABEL_6:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v19, 0xFFFFFFFFLL);
      v9 = v20;
      if (!v20)
        return;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_5:
    v8 = v19;
    if (v19)
      goto LABEL_6;
  }
  Espresso::espresso_os_log_subsystem(v8, v4);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    Espresso::create_context((uint64_t)a1, v10, v11, v12, v13, v14, v15, v16);

    *a2 = 0;
    a2[1] = 0;
    v9 = v20;
    if (!v20)
      return;
  }
  else
  {

    *a2 = 0;
    a2[1] = 0;
    v9 = v20;
    if (!v20)
      return;
  }
LABEL_11:
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_190E11750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;

  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)())v26->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v23 = __cxa_begin_catch(exception_object);
  Espresso::espresso_os_log_subsystem(0, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    Espresso::create_context((uint64_t)v23);

  *v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

void Espresso::abstract_engine_factory::engine_for_platform(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  std::recursive_mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = a1 + 32;
  v7 = v9;
  if (!v9)
    goto LABEL_11;
  v10 = *a2;
  v11 = v8;
  do
  {
    v12 = *(_DWORD *)(v7 + 32);
    v13 = v12 < v10;
    if (v12 >= v10)
      v14 = (uint64_t *)v7;
    else
      v14 = (uint64_t *)(v7 + 8);
    if (!v13)
      v11 = v7;
    v7 = *v14;
  }
  while (*v14);
  if (v11 != v8 && v10 >= *(_DWORD *)(v11 + 32))
  {
    v16 = *(_QWORD *)(v11 + 40);
    v15 = *(_QWORD *)(v11 + 48);
    *a3 = v16;
    a3[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }
  std::recursive_mutex::unlock(v6);
}

BOOL pre_validate_context(unsigned int a1)
{
  _BOOL8 result;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (a1 >> 1 != 5003 || (result = Espresso::hardware::supports_platform(10007)))
  {
    if (a1 == 5)
    {
      if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1)
        dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_24_4921);
      if (!Espresso::hardware::is_virtual_machine(void)::result)
        return 1;
    }
    else
    {
      if (a1 != 100000)
        return 1;
      Espresso::abstract_engine_factory::shared(&v11);
      v10 = 100000;
      Espresso::abstract_engine_factory::engine_for_platform(v11, &v10, &v13);
      v3 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v7 = v13;
      v6 = v14;
      if (!v14)
        goto LABEL_14;
      v8 = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v7)
          return 1;
      }
      else
      {
LABEL_14:
        if (v7)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_190E119FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void initialize_static_memory(void)
{
  std::mutex *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  if (initialize_static_memory(void)::initializeOnceToken != -1)
    dispatch_once(&initialize_static_memory(void)::initializeOnceToken, &__block_literal_global_142_1920);
  v0 = (std::mutex *)initialize_static_memory(void)::initializeMutex;
  std::mutex::lock((std::mutex *)initialize_static_memory(void)::initializeMutex);
  Espresso::abstract_engine_factory::shared(&v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::mutex::unlock(v0);
}

void sub_190E11AB0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared()
{
  uint64_t v0;
  const void *v1;
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "generic_serdes_object");
  v0 = Espresso::generic_factory_t::shared((uint64_t)__p, &__block_literal_global_836);
  v1 = (const void *)v0;
  if (v4 < 0)
  {
    operator delete(__p[0]);
    if (v1)
  }
  else if (v0)
  {
  }
  return 0;
}

__n128 Espresso::BNNSEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0xF0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6700;
  Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D5E820;
  *((_BYTE *)v4 + 184) = 0;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  v4[28] = 0;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_DWORD *)v4 + 35) = (_get_cpu_capabilities() >> 27) & 0xF;
  *((_BYTE *)v4 + 146) = (MEMORY[0xFFFFFC020] & 8) != 0;
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_190E11BE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  id *v2;
  void *v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v1[8].__shared_owners_);
  v1[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[7]);
  Espresso::abstract_context::~abstract_context(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_cpu::context_cpu(uint64_t a1, _QWORD *a2)
{
  char *v3;

  *(_QWORD *)Espresso::abstract_context::abstract_context(a1, a2) = &off_1E2D5F9E8;
  v3 = (char *)operator new(0x90uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E2DC25C0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 17) = 0;
  *((_QWORD *)v3 + 3) = &off_1E2DAC840;
  *(_QWORD *)(a1 + 144) = v3 + 24;
  *(_QWORD *)(a1 + 152) = v3;
  *(_BYTE *)(a1 + 44) = 1;
  return a1;
}

void sub_190E11CB4(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::abstract_context::~abstract_context(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::abstract_context(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  void *v12;
  __int128 v14;

  *(_QWORD *)a1 = &unk_1E2D72D00;
  *(_QWORD *)(a1 + 8) = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 1993;
  *(_WORD *)(a1 + 64) = 256;
  *(_DWORD *)(a1 + 68) = 0;
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 121) = 0;
  *(_QWORD *)(a1 + 113) = 0;
  *(_BYTE *)(a1 + 137) = 0;
  *(_QWORD *)(a1 + 129) = 0;
  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC27F0;
  *((_DWORD *)v6 + 6) = 1;
  *(_QWORD *)&v14 = v6 + 3;
  *((_QWORD *)&v14 + 1) = v6;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 88, &v14);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  dispatch_get_global_queue(-2, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create_with_target_V2("com.espresso.random", 0, v10);
  v12 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v11;

  return a1;
}

void sub_190E11E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_context::set_as_child_of(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(v2 + 64);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v2 + 68);
    *(_WORD *)(a1 + 72) = *(_WORD *)(v2 + 72);
    *(_QWORD *)(a1 + 76) = *(_QWORD *)(v2 + 76);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
    objc_storeStrong((id *)(a1 + 104), *(id *)(*a2 + 104));
    v5 = *a2;
    if (*(_BYTE *)(*a2 + 114))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v5 = *a2;
    }
    *(_BYTE *)(a1 + 127) = *(_BYTE *)(v5 + 127);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(v5 + 136);
    *(_BYTE *)(a1 + 53) = *(_BYTE *)(v5 + 53);
    *(_WORD *)(a1 + 54) = *(_WORD *)(v5 + 54);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v5 + 128);
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(v5 + 121);
  }
}

void Espresso::abstract_context::~abstract_context(id *this)
{
  *this = &unk_1E2D72D00;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void Espresso::cpu_context_transfer_algo_t::create_net_info_ir(uint64_t a1, Espresso ***a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v37;
  uint64_t *v39;
  uint64_t v40;
  unint64_t i;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  int v46;
  uint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  _DWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  _QWORD *v61;
  int v62;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _DWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  __int128 *v73;
  std::string **v74;
  __int128 *v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  std::string *v86;
  BOOL v87;
  std::string *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  __int128 *v94;
  float v95;
  __int128 v96;
  _BOOL4 v97;
  __int128 v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  char v109[8];
  int v110;
  int v111;
  std::string v112;
  uint64_t *v113[2];
  uint64_t *v114;

  v7 = a5;
  Espresso::cpu_context_transfer_algo_t::assemble_input_output_blob_topology(a1, a2, (uint64_t)a3, a4, a5, a6);
  Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(v12, (uint64_t **)a6);
  Espresso::cpu_context_transfer_algo_t::is_kernel_registered_on_engine(v13, a2, (uint64_t **)a6, a3, v7, a4);
  Espresso::cpu_context_transfer_algo_t::check_all_kernels_availability_on_context(a1, a2, a3, v7, (uint64_t **)a6);
  Espresso::cpu_context_transfer_algo_t::may_invalidate_ane_layers_after_custom_layer(v14, v15, (uint64_t)a3, v16, (uint64_t **)a6);
  v17 = (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8));
  if ((v17 - 10006) > 5 || ((0x2Fu >> (v17 - 22)) & 1) == 0)
    goto LABEL_37;
  v20 = *(_QWORD *)*a6;
  v19 = *(_QWORD *)(*a6 + 8);
  if (v19 == v20)
    goto LABEL_37;
  v21 = 0;
  v22 = (v19 - v20) / 224;
  if (v22 <= 1)
    v22 = 1;
  v23 = v20 + 48;
  v24 = -1;
  do
  {
    v25 = v24;
    v26 = *(char *)(v23 + 23);
    if (v26 < 0)
    {
      if (*(_QWORD *)(v23 + 8) != 15)
        goto LABEL_18;
      v27 = *(uint64_t **)v23;
    }
    else
    {
      v27 = (uint64_t *)v23;
      if (v26 != 15)
        goto LABEL_18;
    }
    v28 = *v27;
    v29 = *(uint64_t *)((char *)v27 + 7);
    if (v28 != 0x64656C656E6E7574 || v29 != 0x706F5F656E615F64)
    {
LABEL_18:
      v24 = v25;
      goto LABEL_19;
    }
    v24 = v21;
    if ((v25 & 0x8000000000000000) == 0)
    {
      v24 = v21;
      if (v21 == v25 + 1)
      {
        *(_BYTE *)(v20 + 224 * v21 + 105) = 0;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Multiple contigous tunneled segments are not supported in the same network.");
      }
    }
LABEL_19:
    ++v21;
    v23 += 224;
  }
  while (v22 != v21);
  if ((v24 & 0x8000000000000000) == 0)
  {
    v31 = v20 + 56;
    do
    {
      v32 = (_QWORD *)(v31 - 8);
      v33 = *(char *)(v31 + 15);
      if (v33 < 0)
      {
        if (*(_QWORD *)v31 == 15)
        {
          v32 = (_QWORD *)*v32;
LABEL_31:
          v34 = (_QWORD *)*v32;
          v35 = *(_QWORD *)((char *)v32 + 7);
          if (v34 == (_QWORD *)0x64656C656E6E7574 && v35 == 0x706F5F656E615F64)
            goto LABEL_36;
        }
      }
      else if (v33 == 15)
      {
        goto LABEL_31;
      }
      *(_BYTE *)(v31 + 49) = 0;
LABEL_36:
      v31 += 224;
      --v22;
    }
    while (v22);
  }
LABEL_37:
  v37 = (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8));
  if ((v37 - 10006) <= 5 && ((0x2Fu >> (v37 - 22)) & 1) != 0)
  {
    v39 = (uint64_t *)*a6;
    v40 = *(_QWORD *)*a6;
    if (*(_QWORD *)(*a6 + 8) != v40)
    {
      for (i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((v39[1] - *v39) >> 5); ++i)
      {
        v42 = v40 + 224 * i;
        v43 = (_QWORD *)(v42 + 48);
        v44 = *(char *)(v42 + 71);
        if (v44 < 0)
        {
          if (v43[1] != 9)
            goto LABEL_81;
          v43 = (_QWORD *)*v43;
        }
        else if (v44 != 9)
        {
          goto LABEL_81;
        }
        v45 = (_QWORD *)*v43;
        v46 = *((unsigned __int8 *)v43 + 8);
        if (v45 != (_QWORD *)0x6E5F726568746167 || v46 != 100)
          goto LABEL_81;
        v48 = v40 + 224 * i;
        v50 = *(std::__shared_weak_count **)(v48 + 96);
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldxr(p_shared_owners);
          while (__stxr(v52 + 1, p_shared_owners));
        }
        v53 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 320))(v49);
        if (v50)
        {
          v54 = (unint64_t *)&v50->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (*v53)
          goto LABEL_81;
        v113[0] = (uint64_t *)*a6;
        v56 = v113[0];
        v113[1] = (uint64_t *)&v114;
        v114 = v113[0];
        v57 = *v113[0];
        v58 = *v113[0] + 224 * i;
        v59 = (_QWORD *)(v58 + 48);
        v60 = *(char *)(v58 + 71);
        if (v60 < 0)
        {
          if (v59[1] != 9)
            goto LABEL_81;
          v59 = (_QWORD *)*v59;
        }
        else if (v60 != 9)
        {
          goto LABEL_81;
        }
        v61 = (_QWORD *)*v59;
        v62 = *((unsigned __int8 *)v59 + 8);
        if (v61 == (_QWORD *)0x6E5F726568746167 && v62 == 100)
        {
          v64 = v57 + 224 * i;
          v66 = *(std::__shared_weak_count **)(v64 + 96);
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v65 + 320))(v65);
          if (v66)
          {
            v70 = (unint64_t *)&v66->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          if (!*v69)
          {
            v72 = v57 + 224 * i;
            v75 = *(__int128 **)(v72 + 136);
            v74 = (std::string **)(v72 + 136);
            v73 = v75;
            if (*((char *)v75 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v73, *((_QWORD *)v73 + 1));
            }
            else
            {
              v76 = *v73;
              v112.__r_.__value_.__r.__words[2] = *((_QWORD *)v73 + 2);
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v76;
            }
            v77 = v114;
            v78 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v114 + 3), &v112);
            if (v77 + 4 == v78)
              v79 = -1;
            else
              v79 = *((_DWORD *)v78 + 14);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
            if (v79 != -1)
            {
              v80 = *v56 + 224 * v79;
              v81 = v80 + 48;
              v82 = *(char *)(v80 + 71);
              if (v82 < 0)
              {
                if (*(_QWORD *)(v81 + 8) == 7)
                {
                  v81 = *(_QWORD *)v81;
LABEL_97:
                  v83 = *(_DWORD *)v81;
                  v84 = *(_DWORD *)(v81 + 3);
                  if (v83 == 1752393074 && v84 == 1701863784)
                  {
                    v104 = v79;
                    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v109, *(const Espresso::layer_shape **)(*v56 + 224 * v79 + 184), 0);
                    if (v111 == 4)
                    {
                      v86 = *v74;
                      if (SHIBYTE((*v74)[1].__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v108, v86[1].__r_.__value_.__l.__data_, v86[1].__r_.__value_.__l.__size_);
                      else
                        v108 = v86[1];
                      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v108.__r_.__value_.__l.__data_);
                      if (v87)
                      {
                        v88 = *v74;
                        if (SHIBYTE((*v74)[1].__r_.__value_.__r.__words[2]) < 0)
                          std::string::__init_copy_ctor_external(&v107, v88[1].__r_.__value_.__l.__data_, v88[1].__r_.__value_.__l.__size_);
                        else
                          v107 = v88[1];
                        v89 = v114;
                        v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v114 + 3), &v107);
                        if (v89 + 4 == v90)
                          v91 = -1;
                        else
                          v91 = *((int *)v90 + 14);
                        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v107.__r_.__value_.__l.__data_);
                        v92 = *v56 + 224 * (int)v91;
                        v93 = *(__int128 **)(v92 + 136);
                        v94 = *(__int128 **)(v92 + 144);
                        if (v93 != v94)
                        {
                          v95 = (float)v110;
                          while (1)
                          {
                            if (*((char *)v93 + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                            }
                            else
                            {
                              v96 = *v93;
                              v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                              *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v96;
                            }
                            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v106.__r_.__value_.__l.__data_);
                            if (v97)
                              break;
                            v93 = (__int128 *)((char *)v93 + 24);
                            if (v93 == v94)
                              goto LABEL_81;
                          }
                          if (*((char *)v93 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                          }
                          else
                          {
                            v98 = *v93;
                            v105.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v98;
                          }
                          v99 = v114;
                          v100 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v114 + 3), &v105);
                          if (v99 + 4 == v100)
                            v101 = -1;
                          else
                            v101 = *((_DWORD *)v100 + 14);
                          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v105.__r_.__value_.__l.__data_);
                          if (v101 != -1)
                          {
                            v102 = (_QWORD *)operator new();
                            *v102 = i;
                            v102[1] = v104;
                            v102[2] = v91;
                            v102[3] = v101;
                            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v112, *(const Espresso::layer_shape **)(*v39 + 224 * (int)v104 + 184), 0);
                            if (HIDWORD(v112.__r_.__value_.__r.__words[0]) * LODWORD(v112.__r_.__value_.__r.__words[1]) >= 2048)
                            {
                              v103 = *v39;
                              *(_BYTE *)(*v39 + 224 * v102[2] + 105) = 0;
                              *(_BYTE *)(v103 + 224 * v102[3] + 105) = 0;
                            }
                            MEMORY[0x19401CD90](v102, 0x1000C40E0EAB150);
                          }
                        }
                      }
                    }
                  }
                }
              }
              else if (v82 == 7)
              {
                goto LABEL_97;
              }
            }
          }
        }
LABEL_81:
        v40 = *v39;
      }
    }
  }
}

void sub_190E126F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1000C40E0EAB150);
  _Unwind_Resume(a1);
}

uint64_t Espresso::cpu_context_transfer_algo_t::may_invalidate_ane_layers_after_custom_layer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t **v11;
  int v12;
  int v13;
  int v14;
  char v16;
  int32x4_t *v17;
  int32x4_t *v18;

  v5 = *a5;
  result = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  if ((result - 10006) <= 5 && ((0x2Fu >> (result - 22)) & 1) != 0)
  {
    v8 = *v5;
    v9 = v5[1];
    if (*v5 != v9)
    {
      v10 = 0;
      do
      {
        v11 = (uint64_t **)(v8 + 48);
        v12 = *(char *)(v8 + 71);
        if (v12 < 0)
        {
          if (*(_QWORD *)(v8 + 56) != 5)
            goto LABEL_16;
          v11 = (uint64_t **)*v11;
        }
        else if (v12 != 5)
        {
          goto LABEL_16;
        }
        v13 = *(_DWORD *)v11;
        v14 = *((unsigned __int8 *)v11 + 4);
        if (v13 == 1667854946 && v14 == 107)
        {
          v17 = *(int32x4_t **)(v8 + 160);
          v18 = *(int32x4_t **)(v8 + 168);
          if (v17 != v18)
          {
            while ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*v17))) & 1) == 0 && !(v10 & 1 | (v17[1].i32[0] == 0)))
            {
              v10 = 0;
              v16 = 0;
              v17 += 4;
              if (v17 == v18)
                goto LABEL_19;
            }
            goto LABEL_17;
          }
        }
LABEL_16:
        if ((v10 & 1) == 0)
        {
          v16 = 0;
          goto LABEL_19;
        }
LABEL_17:
        *(_BYTE *)(v8 + 105) = 0;
        v16 = 1;
LABEL_19:
        v8 += 224;
        v10 = v16;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t Espresso::cpu_context_transfer_algo_t::check_kernels_availability_on_fallback_context(int *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 *v101;
  __int128 *v102;
  _BYTE *v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  __int128 *v107;
  __int128 *v108;
  _BYTE *v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  int v113;
  _BYTE *v114;
  int v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  Espresso *v123;
  const char *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _BOOL4 v130;
  NSObject *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t **v143;
  uint64_t **v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t *v149;
  int v151;
  __int128 v152;
  const void *v154[3];
  std::__shared_weak_count *v155;
  int64x2_t *v156;
  std::__shared_weak_count *v157;
  uint64_t *v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  __int128 v167;
  int64x2_t *v168;
  std::__shared_weak_count *v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  __int128 v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  int v183;
  _BYTE buf[40];
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)a3;
  v151 = (***(uint64_t (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8));
  if (v151 == 50005)
    v5 = 50006;
  else
    v5 = 50001;
  v183 = v5;
  Espresso::create_context(&v183, &v181);
  v6 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 127))
  {
    v7 = *((_QWORD *)a1 + 9);
    *(_BYTE *)(v7 + 127) = 1;
    *(_QWORD *)(v7 + 128) = *(_QWORD *)(v6 + 128);
    if (*(_BYTE *)(v6 + 127))
    {
      v8 = v181;
      *(_BYTE *)(v181 + 127) = *(_BYTE *)(v6 + 127);
      *(_QWORD *)(v8 + 128) = *(_QWORD *)(v6 + 128);
    }
  }
  v9 = *v4;
  if (v4[1] != *v4)
  {
    v10 = 0;
    LODWORD(v11) = 1;
    v149 = v4;
    while (1)
    {
      v12 = *(_OWORD *)(*a2 + 16 * v10);
      v180 = v12;
      v152 = v12;
      v13 = *((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v9 = *v4;
      }
      v16 = v9 + 224 * v10;
      if ((***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50000
        || (***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50005)
      {
        v179 = v152;
        if (v13)
        {
          v17 = (unint64_t *)(v13 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v177 = v181;
        v178 = v182;
        if (v182)
        {
          p_shared_owners = (unint64_t *)&v182->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        v21 = v11;
        Espresso::create_kernel_for_engine(buf, v16, (uint64_t *)&v179, &v177, a1[5]);
        v22 = (uint64_t *)(v9 + 224 * v10 + 208);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v22, (__int128 *)buf);
        v23 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v178;
        if (v178)
        {
          v27 = (unint64_t *)&v178->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
        if (*((_QWORD *)&v179 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v175 = *v22;
        v32 = *(std::__shared_weak_count **)(v9 + 224 * v10 + 216);
        v176 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v174 = v180;
        if (*((_QWORD *)&v180 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v172 = v181;
        v173 = v182;
        if (v182)
        {
          v37 = (unint64_t *)&v182->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = a1[5];
        v40 = *(std::__shared_weak_count **)(a3 + 8);
        v170 = *(uint64_t **)a3;
        v171 = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v168 = 0;
        v169 = 0;
        *(_BYTE *)(v9 + 224 * v10 + 106) = is_kernel_available_on_engine(v10, &v175, v16, (uint64_t *)&v174, (uint64_t)&v172, v39, (uint64_t *)&v170, &v168);
        v43 = v169;
        if (v169)
        {
          v44 = (unint64_t *)&v169->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = v171;
        if (v171)
        {
          v47 = (unint64_t *)&v171->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v173;
        if (v173)
        {
          v50 = (unint64_t *)&v173->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
        if (*((_QWORD *)&v174 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = v176;
        if (v176)
        {
          v56 = (unint64_t *)&v176->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v22, (__int128 *)buf);
        v58 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_135;
        v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
      }
      else
      {
        v167 = v152;
        if (v13)
        {
          v61 = (unint64_t *)(v13 + 8);
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v63 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
        v165 = *((_QWORD *)a1 + 9);
        v166 = v63;
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        v21 = v11;
        Espresso::create_kernel_for_engine(buf, v16, (uint64_t *)&v167, &v165, a1[5]);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v9 + 224 * v10 + 208, (__int128 *)buf);
        v66 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = v166;
        if (v166)
        {
          v70 = (unint64_t *)&v166->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
        if (*((_QWORD *)&v167 + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v163 = *(_QWORD *)(v9 + 224 * v10 + 208);
        v75 = *(std::__shared_weak_count **)(v9 + 224 * v10 + 216);
        v164 = v75;
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        v162 = v180;
        if (*((_QWORD *)&v180 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        v80 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
        v160 = *((_QWORD *)a1 + 9);
        v161 = v80;
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v83 = a1[5];
        v84 = *(std::__shared_weak_count **)(a3 + 8);
        v158 = *(uint64_t **)a3;
        v159 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v156 = 0;
        v157 = 0;
        *(_BYTE *)(v9 + 224 * v10 + 106) = is_kernel_available_on_engine(v10, &v163, v16, (uint64_t *)&v162, (uint64_t)&v160, v83, (uint64_t *)&v158, &v156);
        v87 = v157;
        if (v157)
        {
          v88 = (unint64_t *)&v157->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v90 = v159;
        if (v159)
        {
          v91 = (unint64_t *)&v159->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = v161;
        if (v161)
        {
          v94 = (unint64_t *)&v161->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v96 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        if (*((_QWORD *)&v162 + 1))
        {
          v97 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v58 = v164;
        if (!v164)
          goto LABEL_135;
        v99 = (unint64_t *)&v164->__shared_owners_;
        do
          v60 = __ldaxr(v99);
        while (__stlxr(v60 - 1, v99));
      }
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
LABEL_135:
      if (!(!is_metal_but_not_mps_buffers(v151) | ((v151 - 50005) < 4) & (0xBu >> ((v151 - 85) & 0xF))))
      {
        v100 = v9 + 224 * v10;
        v101 = *(__int128 **)(v100 + 184);
        v102 = *(__int128 **)(v100 + 192);
        if (v101 != v102)
        {
          v103 = (_BYTE *)(v9 + 224 * v10 + 106);
          do
          {
            v104 = *v101;
            v105 = v101[1];
            *(_QWORD *)&buf[32] = *((_QWORD *)v101 + 4);
            *(_OWORD *)buf = v104;
            *(_OWORD *)&buf[16] = v105;
            v186 = 0;
            v187 = 0;
            v185 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v185, *((const void **)v101 + 5), *((_QWORD *)v101 + 6), (uint64_t)(*((_QWORD *)v101 + 6) - *((_QWORD *)v101 + 5)) >> 2);
            if (((***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50000
               || (***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50001)
              && (*(int *)buf > 0x4000 || *(int *)&buf[4] > 0x4000))
            {
              *v103 = 0;
            }
            if (*(_DWORD *)&buf[8] * *(_DWORD *)&buf[12] * *(_DWORD *)&buf[16] > 0x2000)
              *v103 = 0;
            if (v185)
            {
              v186 = v185;
              operator delete(v185);
            }
            v101 += 4;
          }
          while (v101 != v102);
        }
        v106 = v9 + 224 * v10;
        v107 = *(__int128 **)(v106 + 160);
        v108 = *(__int128 **)(v106 + 168);
        if (v107 != v108)
        {
          v109 = (_BYTE *)(v9 + 224 * v10 + 106);
          do
          {
            v110 = *v107;
            v111 = v107[1];
            *(_QWORD *)&buf[32] = *((_QWORD *)v107 + 4);
            *(_OWORD *)buf = v110;
            *(_OWORD *)&buf[16] = v111;
            v186 = 0;
            v187 = 0;
            v185 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v185, *((const void **)v107 + 5), *((_QWORD *)v107 + 6), (uint64_t)(*((_QWORD *)v107 + 6) - *((_QWORD *)v107 + 5)) >> 2);
            if (((***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50000
               || (***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8)) == 50001)
              && (*(int *)buf > 0x4000 || *(int *)&buf[4] > 0x4000))
            {
              *v109 = 0;
            }
            if (*(_DWORD *)&buf[8] * *(_DWORD *)&buf[12] * *(_DWORD *)&buf[16] > 0x2000)
              *v109 = 0;
            if (v185)
            {
              v186 = v185;
              operator delete(v185);
            }
            v107 += 4;
          }
          while (v107 != v108);
        }
      }
      v112 = v9 + 224 * v10;
      v115 = *(unsigned __int8 *)(v112 + 106);
      v114 = (_BYTE *)(v112 + 106);
      v113 = v115;
      v116 = *(uint64_t **)a3;
      v117 = *(std::__shared_weak_count **)(a3 + 8);
      v154[2] = *(const void **)a3;
      v155 = v117;
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      v120 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
      v154[0] = *((const void **)a1 + 9);
      v154[1] = v120;
      v4 = v149;
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (Espresso *)Espresso::also_check_not_blacklisted(v10, v113 != 0, *v116, v154);
      *v114 = (_BYTE)v123;
      if (v120)
      {
        v125 = (unint64_t *)&v120->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v127 = v155;
      if (v155)
      {
        v128 = (unint64_t *)&v155->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      if (*(_BYTE *)(*v149 + 224 * v10 + 105))
        v130 = 1;
      else
        v130 = *(unsigned __int8 *)(*v149 + 224 * v10 + 106) != 0;
      v11 = v21 & v130;
      if ((v21 & v130 & 1) == 0)
      {
        Espresso::espresso_os_log_subsystem(v123, v124);
        v131 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
        {
          v135 = v9 + 224 * v10;
          v136 = (_QWORD *)(v135 + 48);
          if (*(char *)(v135 + 71) < 0)
            v136 = (_QWORD *)*v136;
          v137 = *v149 + 224 * v10;
          v138 = *(unsigned __int8 *)(v137 + 105);
          LODWORD(v137) = *(unsigned __int8 *)(v137 + 106);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v136;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v138;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v137;
          _os_log_debug_impl(&dword_190DAF000, v131, OS_LOG_TYPE_DEBUG, "layer %zu (%s) not available (%d %d)", buf, 0x22u);
        }

      }
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
      if (*((_QWORD *)&v180 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      ++v10;
      v9 = *v149;
      if (v10 >= 0x6DB6DB6DB6DB6DB7 * ((v149[1] - *v149) >> 5))
        goto LABEL_193;
    }
  }
  v11 = 1;
LABEL_193:
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 9) + 8) + 40))(*(_QWORD *)(*((_QWORD *)a1 + 9)
                                                                                               + 8));
  LODWORD(v180) = (***(uint64_t (****)(_QWORD))(*((_QWORD *)a1 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 9)
                                                                                                + 8));
  v139 = *v4;
  if (v4[1] != *v4)
  {
    v140 = 0;
    v141 = 106;
    do
    {
      v142 = *(unsigned __int8 *)(v139 + v141);
      v143 = (uint64_t **)(*((_QWORD *)a1 + 7) + 72);
      *(_QWORD *)buf = v139 + v141 - 106;
      v144 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, *(_QWORD **)buf, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v144 + 7, v180, (unsigned int *)&v180)+ 8) = v142;
      ++v140;
      v139 = *v4;
      v141 += 224;
    }
    while (v140 < 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5));
  }
  v145 = v182;
  if (v182)
  {
    v146 = (unint64_t *)&v182->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  return v11;
}

void sub_190E1355C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 200);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::check_all_kernels_availability_on_context(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  _BYTE *v75;
  unsigned int v76;
  __int128 v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  _BYTE *v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  int v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t **v93;
  uint64_t **v94;
  _BOOL4 v95;
  uint64_t **v96;
  uint64_t **v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  void *__p;
  void *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  const void *v108[3];
  std::__shared_weak_count *v109;
  int64x2_t *v110;
  std::__shared_weak_count *v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  const void *v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  std::__shared_weak_count *v118;

  v8 = *a5;
  v9 = **a5;
  if ((*a5)[1] != v9)
  {
    v12 = 0;
    do
    {
      v13 = *(_OWORD *)(*a2 + 16 * v12);
      v100 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v9 = *v8;
      }
      v16 = v9 + 224 * v12;
      v117 = *(_QWORD *)(v16 + 88);
      v17 = *(std::__shared_weak_count **)(v16 + 96);
      v118 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v116 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (std::__shared_weak_count *)a3[1];
      v114 = (const void *)*a3;
      v115 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (std::__shared_weak_count *)a5[1];
      v112 = *a5;
      v113 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(std::__shared_weak_count **)(a1 + 64);
      v110 = *(int64x2_t **)(a1 + 56);
      v111 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v9 + 224 * v12;
      *(_BYTE *)(v31 + 105) = is_kernel_available_on_engine(v12, &v117, v16, (uint64_t *)&v116, (uint64_t)&v114, a4, (uint64_t *)&v112, &v110);
      v32 = (_BYTE *)(v31 + 105);
      v33 = v111;
      if (v111)
      {
        v34 = (unint64_t *)&v111->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v113;
      if (v113)
      {
        v37 = (unint64_t *)&v113->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v115;
      if (v115)
      {
        v40 = (unint64_t *)&v115->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v118;
      if (v118)
      {
        v46 = (unint64_t *)&v118->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = *v32;
      v49 = *a5;
      v50 = (std::__shared_weak_count *)a5[1];
      v108[2] = *a5;
      v109 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = (std::__shared_weak_count *)a3[1];
      v108[0] = *(const void **)a3;
      v108[1] = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      *v32 = Espresso::also_check_not_blacklisted(v12, v48 != 0, *v49, v108);
      if (v53)
      {
        v56 = (unint64_t *)&v53->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v58 = v109;
      if (v109)
      {
        v59 = (unint64_t *)&v109->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (*((_QWORD *)&v100 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
        }
      }
      ++v12;
      v9 = *v8;
    }
    while (v12 < 0x6DB6DB6DB6DB6DB7 * ((v8[1] - *v8) >> 5));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*a3 + 8) + 40))(*(_QWORD *)(*a3 + 8));
  v63 = (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8));
  v107 = v63;
  v98 = a1;
  if (is_metal_but_not_mps_buffers(v63))
  {
    v65 = *v8;
    v64 = v8[1];
    if ((v63 - 50005) <= 3 && ((0xBu >> ((v63 - 85) & 0xF)) & 1) != 0)
      goto LABEL_117;
    if (v64 == v65)
      return;
    v67 = 0;
    v99 = a2;
    while (1)
    {
      v68 = *(_OWORD *)(*a2 + 16 * v67);
      v106 = v68;
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
        v65 = *v8;
      }
      v72 = v65 + 224 * v67;
      v74 = *(__int128 **)(v72 + 184);
      v73 = *(__int128 **)(v72 + 192);
      if (v74 != v73)
      {
        v75 = (_BYTE *)(v65 + 224 * v67 + 105);
        v76 = v107 & 0xFFFFFFFE;
        do
        {
          v77 = *v74;
          v78 = v74[1];
          v102 = *((_QWORD *)v74 + 4);
          v100 = v77;
          v101 = v78;
          v104 = 0;
          v105 = 0;
          __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v74 + 5), *((_QWORD *)v74 + 6), (uint64_t)(*((_QWORD *)v74 + 6) - *((_QWORD *)v74 + 5)) >> 2);
          if (v76 == 50000)
          {
            if ((int)v100 > 0x4000 || SDWORD1(v100) > 0x4000)
              *v75 = 0;
            v79 = DWORD2(v100);
            if (DWORD2(v100) * HIDWORD(v100) * (int)v101 <= 0x2000)
              goto LABEL_92;
          }
          else
          {
            v79 = DWORD2(v100) * HIDWORD(v100) * v101;
          }
          if (v79 > 0x2000)
            *v75 = 0;
LABEL_92:
          if (__p)
          {
            v104 = __p;
            operator delete(__p);
          }
          v74 += 4;
        }
        while (v74 != v73);
      }
      v80 = v65 + 224 * v67;
      v82 = *(__int128 **)(v80 + 160);
      v81 = *(__int128 **)(v80 + 168);
      if (v82 != v81)
        break;
LABEL_109:
      a2 = v99;
      if (v69)
      {
        v88 = (unint64_t *)&v69->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      ++v67;
      v65 = *v8;
      v64 = v8[1];
      if (v67 >= 0x6DB6DB6DB6DB6DB7 * ((v64 - *v8) >> 5))
        goto LABEL_117;
    }
    v83 = (_BYTE *)(v65 + 224 * v67 + 105);
    v84 = v107 & 0xFFFFFFFE;
    while (1)
    {
      v85 = *v82;
      v86 = v82[1];
      v102 = *((_QWORD *)v82 + 4);
      v100 = v85;
      v101 = v86;
      v104 = 0;
      v105 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v82 + 5), *((_QWORD *)v82 + 6), (uint64_t)(*((_QWORD *)v82 + 6) - *((_QWORD *)v82 + 5)) >> 2);
      if (v84 == 50000)
      {
        if ((int)v100 > 0x4000 || SDWORD1(v100) > 0x4000)
          *v83 = 0;
        v87 = DWORD2(v100);
        if (DWORD2(v100) * HIDWORD(v100) * (int)v101 <= 0x2000)
          goto LABEL_106;
      }
      else
      {
        v87 = DWORD2(v100) * HIDWORD(v100) * v101;
      }
      if (v87 > 0x2000)
        *v83 = 0;
LABEL_106:
      if (__p)
      {
        v104 = __p;
        operator delete(__p);
      }
      v82 += 4;
      if (v82 == v81)
        goto LABEL_109;
    }
  }
  v65 = *v8;
  v64 = v8[1];
LABEL_117:
  if (v64 != v65)
  {
    v90 = 0;
    v91 = 0;
    do
    {
      v92 = *(unsigned __int8 *)(v65 + v90 + 105);
      v93 = (uint64_t **)(*(_QWORD *)(v98 + 56) + 72);
      *(_QWORD *)&v100 = v65 + v90;
      v94 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93, (_QWORD *)(v65 + v90), (uint64_t)&std::piecewise_construct, (__int128 **)&v100);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v94 + 7, v107, (unsigned int *)&v107)+ 8) = v92;
      v95 = *(_QWORD *)(v65 + v90 + 88) != 0;
      v96 = (uint64_t **)(*(_QWORD *)(v98 + 56) + 96);
      *(_QWORD *)&v100 = v65 + v90;
      v97 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v96, (_QWORD *)(v65 + v90), (uint64_t)&std::piecewise_construct, (__int128 **)&v100);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v97 + 7, v107, (unsigned int *)&v107)+ 8) = v95;
      ++v91;
      v65 = *v8;
      v90 += 224;
    }
    while (v91 < 0x6DB6DB6DB6DB6DB7 * ((v8[1] - *v8) >> 5));
  }
}

void sub_190E13D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v11 = v6 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
          break;
        v6 = *v8;
        v9 = v8;
        if (!*v8)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, a2))
        return v8;
      v9 = v8 + 1;
      v6 = v8[1];
      if (!v6)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v12 = operator new(0x50uLL);
    v19[0] = v12;
    v19[1] = v7;
    v20 = 0;
    v13 = (std::string *)(v12 + 4);
    v14 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12[6] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
    }
    v12[9] = 0;
    v12[8] = 0;
    v12[7] = v12 + 8;
    v20 = 1;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v8;
    *v9 = v12;
    v16 = (uint64_t *)**a1;
    v17 = v12;
    if (v16)
    {
      *a1 = v16;
      v17 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
  }
  return (uint64_t **)v12;
}

void sub_190E13F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

BOOL Espresso::hardware::supports_platform(int a1)
{
  _BOOL8 result;
  int v3;

  if (a1 >> 1 == 5003)
  {
    if (Espresso::hardware::supports_platform(Espresso::platform)::once_token != -1)
      dispatch_once(&Espresso::hardware::supports_platform(Espresso::platform)::once_token, &__block_literal_global_4920);
    if (Espresso::hardware::supports_platform(Espresso::platform)::has_ane)
    {
      if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1)
        dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_24_4921);
      return Espresso::hardware::is_virtual_machine(void)::result == 0;
    }
    return 0;
  }
  result = 1;
  if (a1 <= 49999)
  {
    if (a1 <= 10007)
    {
      if (!a1 || a1 == 100)
        return result;
      return 0;
    }
    if (a1 == 10008 || a1 == 10010)
      return result;
    v3 = 20000;
  }
  else
  {
    if ((a1 - 50000) <= 8 && ((1 << (a1 - 80)) & 0x125) != 0 || a1 == 100000)
      return result;
    v3 = 90000;
  }
  if (a1 != v3)
    return 0;
  if (Espresso::hardware::supports_platform(Espresso::platform)::once_token != -1)
    dispatch_once(&Espresso::hardware::supports_platform(Espresso::platform)::once_token, &__block_literal_global_18_4922);
  return Espresso::hardware::supports_platform(Espresso::platform)::has_metal != 0;
}

__n128 Espresso::MPSEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2588;
  result.n128_u64[0] = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190E141B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A470;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A500;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_190E14338(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E14354(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A810;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A8A0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_190E14538(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E14554(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A388;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A418;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_190E14738(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E14754(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperationImpl<CastOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A9E0;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5AA70;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_190E14938(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_190E14954(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

_QWORD *E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap(_QWORD *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  return a1;
}

void sub_190E14A4C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;

  v4 = (void **)v1[5];
  if (v4)
    sub_1910124C8(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    v6 = (void **)*v1;
    if (!*v1)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (void **)*v1;
    if (!*v1)
      goto LABEL_5;
  }
  v7 = (void **)v1[1];
  v8 = v6;
  if (v7 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v6);
    v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::E5Operand const>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190E14BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190E14C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::E5Operand const>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v45[0] = v25;
  v45[1] = a1 + 16;
  v46 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v27 = *(_QWORD *)(a3 + 32);
  v25[5] = *(_QWORD *)(a3 + 24);
  v25[6] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_60;
    }
LABEL_84:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_95;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_84;
LABEL_60:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_95:
  v14 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E15078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E1508C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_190E151BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190E151D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E15628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E1563C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5OperationBuilder::E5OperationBuilder(_QWORD *this)
{
  *this = off_1E2D5AED8;
  return this;
}

_QWORD *E5RT::E5Operation::E5Operation(_QWORD *this)
{
  *this = off_1E2D59BB0;
  return this;
}

float newpANEHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.0;
}

float newpANEHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpANEHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

void Espresso::stack_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  void *v25;
  int *v26;
  unint64_t v27;
  int *v28;
  int *v29;
  unint64_t v30;
  int v31;
  const char *v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  float *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char **v55[3];
  uint64_t v56;
  std::__shared_weak_count *v57;
  char ***v58;

  v6 = *a4;
  if (a4[1] != *a4)
  {
    for (i = 0; i < (a4[1] - *a4) >> 4; ++i)
    {
      v9 = (_QWORD *)(v6 + 16 * i);
      if (*v9 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
      {
        v11 = *(_QWORD *)(*v9 + 160);
        v12 = *(std::__shared_weak_count **)(*v9 + 168);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * i) = *(_QWORD *)(v11 + 24);
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          goto LABEL_7;
        }
        v10 = *(_QWORD *)(v11 + 24);
      }
      else
      {
        v10 = MEMORY[0x18];
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * i) = v10;
LABEL_7:
      v6 = *a4;
    }
  }
  v17 = a3;
  v16 = *a3;
  if (v17[1] == v16 || !*v16 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16))
  {
    v18 = 0;
    v19 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(*v16 + 160);
    v18 = *(std::__shared_weak_count **)(*v16 + 168);
    v56 = v19;
    v57 = v18;
    if (v18)
    {
      v47 = (unint64_t *)&v18->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
  }
  v20 = *(_DWORD *)(a1 + 280);
  memset(v55, 0, sizeof(v55));
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v55, *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3));
  NDLayers::stack_nd_shape_computation(v20, v55, (char **)(a1 + 336));
  v58 = v55;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v21 = *(_DWORD *)(a1 + 280);
  v23 = *(_BYTE **)(a1 + 312);
  v22 = *(_BYTE **)(a1 + 320);
  v24 = v22 - v23;
  if (v22 == v23)
  {
    v25 = 0;
  }
  else
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24 >> 3);
    memmove(v25, v23, v24);
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(&v52, *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3));
  v26 = (int *)v52[1];
  v27 = (unint64_t)v26 - *v52;
  v29 = *(int **)(a1 + 336);
  v28 = *(int **)(a1 + 344);
  if (v28 - v29 != (uint64_t)((v27 << 30) + 0x100000000) >> 32)
  {
    v32 = "Stack_nd layer: Invalid rank of output tensor.";
    goto LABEL_54;
  }
  v30 = v27 >> 2;
  v31 = (((v27 >> 2) + 1) & (v21 >> 31)) + v21;
  v32 = "Stack_nd layer: Invalid value of the argument 'axis'.";
  if (v31 < 0 || v31 > (int)v30)
LABEL_54:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v32);
  v33 = 1;
  while (v29 != v28)
  {
    v34 = *v29++;
    v33 *= v34;
  }
  v35 = (int *)(*v52 + 4 * v31);
  v36 = 1;
  while (v35 != v26)
  {
    v37 = *v35++;
    v36 *= v37;
  }
  if (v33 >= 1)
  {
    v38 = 0;
    v39 = 0;
    v50 = *(_QWORD *)(v19 + 24);
    v51 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v52) >> 3);
    v49 = -1431655765 * ((v53 - (uint64_t)v52) >> 3);
    do
    {
      if ((int)v51 >= 1)
      {
        v40 = v39;
        v41 = v25;
        v42 = v25;
        v43 = v49;
        v44 = (float *)(v50 + 4 * v39);
        do
        {
          cblas_scopy(v36, (const float *)(*v42 + 4 * v38), 1, v44, 1);
          v40 += v36;
          v44 += v36;
          ++v42;
          --v43;
        }
        while (v43);
        v39 = v40;
        v25 = v41;
      }
      v38 += v36;
    }
    while (v39 < v33);
  }
  v58 = (char ***)&v52;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (v25)
    operator delete(v25);
  if (v18)
  {
    v45 = (unint64_t *)&v18->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_190E15AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void Espresso::pass_blob_name_indexing_result::~pass_blob_name_indexing_result(Espresso::pass_blob_name_indexing_result *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2D9B1C8;
  v3 = (void **)((char *)this + 176);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 128);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 104);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 16);
}

{
  Espresso::pass_blob_name_indexing_result::~pass_blob_name_indexing_result(this);
  JUMPOUT(0x19401CD90);
}

