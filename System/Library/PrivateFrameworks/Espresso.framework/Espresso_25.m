void sub_1917DAE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 104);
  _Unwind_Resume(a1);
}

void Espresso::space_to_depth_kernel_cpu::~space_to_depth_kernel_cpu(Espresso::space_to_depth_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::space_to_depth_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int i;
  int j;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  int k;
  int m;
  int n;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;

  v6 = *a3;
  v7 = **a3;
  if (v7 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7))
  {
    v9 = *(_QWORD *)(*v6 + 160);
    v8 = *(std::__shared_weak_count **)(*v6 + 168);
    v70 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v70 = 0;
  }
  v10 = *a4;
  if (*v10 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = *(_QWORD *)(*v10 + 160);
    v12 = *(std::__shared_weak_count **)(*v10 + 168);
    if (v12)
    {
      v54 = (unint64_t *)&v12->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = a1[71];
  if (v13)
  {
    v70 = v12;
    v14 = v11;
  }
  else
  {
    v8 = v12;
    v14 = v9;
    v9 = v11;
  }
  v15 = *(_DWORD *)(v9 + 8);
  v16 = *(_DWORD *)(v9 + 12);
  v17 = *(_DWORD *)(v9 + 16);
  v18 = *(unsigned int *)(v14 + 8);
  v19 = *(_DWORD *)(v14 + 12);
  v20 = *(_DWORD *)(v14 + 16);
  if (a1[72])
  {
    v21 = v19 * v18;
    v22 = v21 * v20;
    v23 = *(_DWORD *)(v9 + 20);
    if (v13)
    {
      if (v23 >= 1)
      {
        v24 = 0;
        a2 = 0;
        do
        {
          if (v17 >= 1)
          {
            for (i = 0; i != v17; ++i)
            {
              if (v16 >= 1)
              {
                for (j = 0; j != v16; ++j)
                {
                  if (v15 >= 1)
                  {
                    v27 = 0;
                    v28 = a1[70];
                    v29 = *(_QWORD *)(v14 + 24);
                    v30 = (int)a2;
                    v31 = *(_QWORD *)(v9 + 24) + 4 * (int)a2;
                    do
                    {
                      *(_DWORD *)(v31 + 4 * v27) = *(_DWORD *)(v29
                                                             + 4
                                                             * ((int)v27 / v28
                                                              + v24 * v22
                                                              + j / v28 * (int)v18
                                                              + ((int)v27
                                                               + v28 * (j + v28 * (i - j / v28) - (int)v27 / v28))
                                                              * v21));
                      ++v27;
                    }
                    while (v15 != (_DWORD)v27);
                    a2 = v30 + v27;
                  }
                }
              }
            }
          }
          ++v24;
        }
        while (v24 != v23);
      }
    }
    else if (v23 >= 1)
    {
      a2 = 0;
      for (k = 0; k != v23; ++k)
      {
        if (v17 >= 1)
        {
          for (m = 0; m != v17; ++m)
          {
            if (v16 >= 1)
            {
              for (n = 0; n != v16; ++n)
              {
                if (v15 >= 1)
                {
                  v49 = 0;
                  v50 = a1[70];
                  v51 = *(_QWORD *)(v14 + 24);
                  v52 = (int)a2;
                  v53 = *(_QWORD *)(v9 + 24) + 4 * (int)a2;
                  do
                  {
                    *(_DWORD *)(v51
                              + 4
                              * ((int)v49 / v50
                               + k * v22
                               + n / v50 * (int)v18
                               + ((int)v49 + v50 * (n + v50 * (m - n / v50) - (int)v49 / v50)) * v21)) = *(_DWORD *)(v53 + 4 * v49);
                    ++v49;
                  }
                  while (v15 != (_DWORD)v49);
                  a2 = v52 + v49;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v32 = v16 * v15 * v17;
    v33 = *(unsigned int *)(v14 + 20);
    if (v13)
    {
      if ((int)v33 >= 1)
      {
        v34 = 0;
        LODWORD(v35) = 0;
        v36 = v16 * v15;
        do
        {
          if (v20 >= 1)
          {
            LODWORD(a2) = 0;
            v37 = *(_QWORD *)(v9 + 24) + 4 * v34 * v32;
            v38 = a1[70];
            do
            {
              if (v19 >= 1)
              {
                v39 = 0;
                v40 = (int)a2 / v17 + v36 * ((int)a2 % v17) + (v15 - v38) * ((int)a2 / v17 / v38);
                do
                {
                  if ((int)v18 >= 1)
                  {
                    v41 = *(_QWORD *)(v14 + 24);
                    v35 = (int)v35;
                    v42 = v40;
                    v43 = v18;
                    do
                    {
                      *(_DWORD *)(v37 + 4 * v42) = *(_DWORD *)(v41 + 4 * v35++);
                      v42 += v38;
                      --v43;
                    }
                    while (v43);
                  }
                  ++v39;
                  v40 += v15 * v38;
                }
                while (v39 != v19);
              }
              a2 = (a2 + 1);
            }
            while ((_DWORD)a2 != v20);
          }
          ++v34;
        }
        while (v34 != v33);
      }
    }
    else if ((int)v33 >= 1)
    {
      v56 = 0;
      LODWORD(v57) = 0;
      v58 = v16 * v15;
      do
      {
        if (v20 >= 1)
        {
          LODWORD(a2) = 0;
          v59 = *(_QWORD *)(v9 + 24) + 4 * v56 * v32;
          v60 = a1[70];
          do
          {
            if (v19 >= 1)
            {
              v61 = 0;
              v62 = (int)a2 / v17 + v58 * ((int)a2 % v17) + (v15 - v60) * ((int)a2 / v17 / v60);
              do
              {
                if ((int)v18 >= 1)
                {
                  v63 = *(_QWORD *)(v14 + 24);
                  v57 = (int)v57;
                  v64 = v62;
                  v65 = v18;
                  do
                  {
                    *(_DWORD *)(v63 + 4 * v57++) = *(_DWORD *)(v59 + 4 * v64);
                    v64 += v60;
                    --v65;
                  }
                  while (v65);
                }
                ++v61;
                v62 += v15 * v60;
              }
              while (v61 != v19);
            }
            a2 = (a2 + 1);
          }
          while ((_DWORD)a2 != v20);
        }
        ++v56;
      }
      while (v56 != v33);
    }
  }
  if (v8)
  {
    v66 = (unint64_t *)&v8->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, a2);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v70)
  {
    v68 = (unint64_t *)&v70->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v70->__on_zero_shared)(v70, a2);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_1917DB380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::slice_kernel_cpu::~slice_kernel_cpu(Espresso::slice_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::broadcast_kernel_cpu::~broadcast_kernel_cpu(Espresso::broadcast_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::broadcast_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::vector<int>::size_type v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t i;
  unint64_t v19;
  std::vector<int>::pointer v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _DWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t k;
  char *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::vector<int>::pointer v84;
  int64_t v85;
  uint64_t v86;
  std::vector<int> *v87;
  int v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t j;
  float32x4_t *v96;
  float32x4_t v97;
  BOOL v98;
  _QWORD *v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  __int128 v110;
  int v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *end;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v124;
  uint64_t v125;
  std::vector<int>::pointer begin;
  int64_t v127;
  int64_t v128;
  std::vector<int>::pointer v129;
  int64_t v130;
  int64_t v131;
  _DWORD *v132;
  std::vector<int>::size_type v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  std::vector<int>::size_type v141;
  int *v142;
  int v143;
  int v144;
  int v145;
  std::vector<int>::pointer v147;
  int v148;
  int v149;
  uint64_t v150;
  const float *v151;
  _DWORD *v152;
  float *v153;
  int v154;
  int *v155;
  std::vector<int>::pointer v156;
  std::vector<int>::pointer v157;
  uint64_t v158;
  int v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  int *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  const char *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  std::vector<int> v188;
  std::vector<int> v189;
  _BYTE v190[24];
  _BYTE v191[24];
  char *v192;
  std::__shared_weak_count *v193;
  _BYTE v194[32];
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  int32x4_t v198;
  _BYTE v199[24];
  __int128 __p;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  void *v207;
  void *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  int *v212;
  int *v213;
  uint64_t v214;
  std::vector<int> v215;
  std::vector<int> v216;
  int v217;
  std::vector<int> v218;

  if (*(_BYTE *)(a1 + 304))
  {
    v8 = *a3;
    if (a3[1] == *a3 || !*v8 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
    {
      v211 = 0uLL;
    }
    else
    {
      v89 = *(_QWORD *)(*v8 + 168);
      *(_QWORD *)&v211 = *(_QWORD *)(*v8 + 160);
      *((_QWORD *)&v211 + 1) = v89;
      if (v89)
      {
        v90 = (unint64_t *)(v89 + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
    }
    v9 = *a4;
    v10 = **a4;
    if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
    {
      v66 = *(std::__shared_weak_count **)(*v9 + 168);
      v209 = *(_QWORD *)(*v9 + 160);
      v210 = v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(p_shared_owners);
        while (__stxr(v68 + 1, p_shared_owners));
      }
    }
    else
    {
      v209 = 0;
      v210 = 0;
    }
    Espresso::abstract_blob_container::shape((char *)&v202, **a4);
    v201 = 0;
    __p = 0u;
    *(_OWORD *)&v199[8] = 0u;
    v198 = *(int32x4_t *)(a1 + 280);
    *(_QWORD *)v199 = *(_QWORD *)(a1 + 296);
    v12 = *a4;
    v11 = (char *)a4[1];
    if (v11 - (char *)*a4 == 32 && !*(_BYTE *)(a1 + 312))
    {
      Espresso::abstract_blob_container::shape(v194, v12[2]);
      v198 = *(int32x4_t *)v194;
      *(_OWORD *)v199 = *(_OWORD *)&v194[16];
      *(_QWORD *)&v199[16] = v195;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      __p = v196;
      v201 = v197;
      v12 = *a4;
      v11 = (char *)a4[1];
    }
    if (v11 - (char *)v12 != 32 || !*(_BYTE *)(a1 + 312))
    {
LABEL_162:
      v121 = v202;
      if (v198.i32[0] >= 1 && v202 != 1 && v198.i32[0] != v202)
      {
        v170 = "Bcast shape error 1 != w: %d";
        goto LABEL_263;
      }
      if (v198.i32[1] < 1 || (v121 = v203, v203 == 1) || v198.i32[1] == v203)
      {
        if (v198.i32[2] < 1 || (v121 = v204, v204 == 1) || v198.i32[2] == v204)
        {
          if (v198.i32[3] < 1 || (v121 = v205, v205 == 1) || v198.i32[3] == v205)
          {
            if (*(int *)v199 < 1 || (v121 = v206, v206 == 1) || *(_DWORD *)v199 == v206)
            {
              Espresso::abstract_blob_container::shape(v194, **a4);
              Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v191, (const Espresso::layer_shape *)v194, 0);
              if ((_QWORD)v196)
              {
                *((_QWORD *)&v196 + 1) = v196;
                operator delete((void *)v196);
              }
              Espresso::abstract_blob_container::shape(v194, **a3);
              Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v190, (const Espresso::layer_shape *)v194, 0);
              if ((_QWORD)v196)
              {
                *((_QWORD *)&v196 + 1) = v196;
                operator delete((void *)v196);
              }
              v124 = v209;
              if (!v209)
                goto LABEL_240;
              v125 = v211;
              if (!(_QWORD)v211)
                goto LABEL_240;
              Espresso::layer_nd_shape::shape_vector(&v189, (uint64_t)v190);
              v185 = *(_DWORD **)(v124 + 24);
              Espresso::layer_nd_shape::shape_vector(&v188, (uint64_t)v191);
              begin = v188.__begin_;
              v127 = (char *)v188.__end_ - (char *)v188.__begin_;
              v128 = v188.__end_ - v188.__begin_;
              v129 = v189.__begin_;
              v130 = (char *)v189.__end_ - (char *)v189.__begin_;
              v131 = v189.__end_ - v189.__begin_;
              if ((int)v131 < (int)v128)
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("BroadcastTo layer: Invalid target shape.");
              v132 = *(_DWORD **)(v125 + 24);
              if (v131 | v128)
              {
                v133 = (int)(v130 >> 2);
                v134 = (int)(v127 >> 2);
                if (v189.__begin_ == (std::vector<int>::pointer)((char *)v189.__begin_
                                                                + (v130 << 30 >> 30)
                                                                - (v127 << 30 >> 30)))
                {
                  v136 = 1;
                }
                else
                {
                  v135 = 4 * v133 - 4 * v134;
                  v136 = 1;
                  do
                  {
                    v137 = *v129++;
                    v136 *= v137;
                    v135 -= 4;
                  }
                  while (v135);
                }
                v138 = 1;
                while (begin != v188.__end_)
                {
                  v139 = *begin++;
                  v138 *= v139;
                }
                std::vector<int>::vector((std::vector<int> *)v194, (int)(v127 >> 2));
                std::vector<int>::vector(&v218, v133);
                NDShapeUtils::compute_strides((uint64_t)v189.__begin_, (uint64_t)v189.__end_, (uint64_t)v218.__begin_, (uint64_t)v218.__end_);
                NDShapeUtils::compute_strides((uint64_t)v188.__begin_, (uint64_t)v188.__end_, *(uint64_t *)v194, *(uint64_t *)&v194[8]);
                if ((int)v128 >= 1)
                {
                  v140 = (v128 + 1) - 1;
                  v141 = v133 - 1;
                  v142 = &v188.__begin_[v134 - 1];
                  while (1)
                  {
                    v144 = *v142--;
                    v143 = v144;
                    v145 = v189.__begin_[v141];
                    if (v144 != v145)
                      break;
                    --v141;
                    if (!--v140)
                      goto LABEL_210;
                  }
                  if (v143 != 1 || v145 <= 1)
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>("BroadcastTo layer: Invalid shapes for broadcasting.");
                  v138 = v218.__begin_[v141];
                  v136 = v189.__begin_[v141];
                }
LABEL_210:
                v217 = 0;
                std::vector<int>::vector(&v216, v133);
                std::vector<int>::vector(&v215, (int)(v127 >> 2));
                v147 = v189.__begin_;
                v148 = 1;
                if (v189.__begin_ == v189.__end_)
                  goto LABEL_213;
                do
                {
                  v149 = *v147++;
                  v148 *= v149;
                }
                while (v147 != v189.__end_);
                if (v148 >= 1)
                {
LABEL_213:
                  v150 = 0;
                  v187 = (int)v131 - (int)v128;
                  v181 = v128;
                  v183 = ((unint64_t)v127 >> 2);
                  do
                  {
                    if (v136 >= 1)
                    {
                      v151 = (const float *)&v185[v217];
                      v128 = (int)v150;
                      v152 = v132;
                      v153 = (float *)&v132[(int)v150];
                      v154 = v136;
                      do
                      {
                        cblas_scopy(v138, v151, 1, v153, 1);
                        v128 += v138;
                        v153 += v138;
                        --v154;
                      }
                      while (v154);
                      v150 = v128;
                      LODWORD(v128) = v181;
                      v132 = v152;
                    }
                    NDShapeUtils::unravel_index(v150, (uint64_t)v189.__begin_, (uint64_t)v189.__end_, v216.__begin_, (uint64_t)v216.__end_);
                    v155 = &v216.__begin_[v187];
                    if (v216.__end_ != v155)
                      memmove(v215.__begin_, v155, (char *)v216.__end_ - (char *)v155);
                    if ((int)v128 >= 1)
                    {
                      v156 = v188.__begin_;
                      v157 = v215.__begin_;
                      v158 = v183;
                      do
                      {
                        v159 = *v156++;
                        if (v159 == 1)
                          *v157 = 0;
                        ++v157;
                        --v158;
                      }
                      while (v158);
                    }
                    v212 = 0;
                    v213 = 0;
                    v214 = 0;
                    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v212, *(const void **)v194, *(uint64_t *)&v194[8], (uint64_t)(*(_QWORD *)&v194[8] - *(_QWORD *)v194) >> 2);
                    NDShapeUtils::ravel_multi_index(v215.__begin_, (uint64_t)v215.__end_, (uint64_t)v188.__begin_, (uint64_t)v188.__end_, v212, &v217);
                    if (v212)
                    {
                      v213 = v212;
                      operator delete(v212);
                    }
                  }
                  while ((int)v150 < v148);
                }
                if (v215.__begin_)
                {
                  v215.__end_ = v215.__begin_;
                  operator delete(v215.__begin_);
                }
                if (v216.__begin_)
                {
                  v216.__end_ = v216.__begin_;
                  operator delete(v216.__begin_);
                }
                if (v218.__begin_)
                {
                  v218.__end_ = v218.__begin_;
                  operator delete(v218.__begin_);
                }
                if (*(_QWORD *)v194)
                {
                  *(_QWORD *)&v194[8] = *(_QWORD *)v194;
                  operator delete(*(void **)v194);
                }
                begin = v188.__begin_;
                if (!v188.__begin_)
                  goto LABEL_238;
              }
              else
              {
                *v132 = *v185;
                if (!begin)
                {
LABEL_238:
                  if (v189.__begin_)
                  {
                    v189.__end_ = v189.__begin_;
                    operator delete(v189.__begin_);
                  }
LABEL_240:
                  if ((_QWORD)__p)
                  {
                    *((_QWORD *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  if (v207)
                  {
                    v208 = v207;
                    operator delete(v207);
                  }
                  v160 = v210;
                  if (v210)
                  {
                    v161 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v163 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
                  if (*((_QWORD *)&v211 + 1))
                  {
                    v164 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }
                  return;
                }
              }
              v188.__end_ = begin;
              operator delete(begin);
              goto LABEL_238;
            }
            v170 = "Bcast shape error 1 != seq: %d";
          }
          else
          {
            v170 = "Bcast shape error 1 != n: %d";
          }
        }
        else
        {
          v170 = "Bcast shape error 1 != k: %d";
        }
      }
      else
      {
        v170 = "Bcast shape error 1 != h: %d";
      }
LABEL_263:
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v170, v121);
    }
    v13 = v12[2];
    if (v13 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
    {
      v166 = v12[2];
      v14 = *(_QWORD *)(v166 + 160);
      v167 = *(int **)(v166 + 168);
      v215.__begin_ = (std::vector<int>::pointer)v14;
      v215.__end_ = v167;
      if (v167)
      {
        v168 = (unint64_t *)(v167 + 2);
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
      }
    }
    else
    {
      v14 = 0;
      v215.__begin_ = 0;
      v215.__end_ = 0;
    }
    if (*(_QWORD *)(*(_QWORD *)a2 + 64))
    {
      v15 = *(int *)(v14 + 8);
      if (*(_DWORD *)(a1 + 308))
      {
        v16 = 0;
        v17 = *(int *)(v14 + 8);
        do
        {
          v17 *= *(int *)(v14 + 12 + v16);
          v16 += 4;
        }
        while (v16 != 12);
        if (v17 <= 5)
        {
          for (i = 0; i != 12; i += 4)
            v15 *= *(int *)(v14 + 12 + i);
          std::vector<int>::vector(&v218, v15);
          v19 = 0;
          v20 = v218.__begin_;
          while (1)
          {
            v21 = 0;
            v22 = *(int *)(v14 + 8);
            do
            {
              v22 *= *(int *)(v14 + 12 + v21);
              v21 += 4;
            }
            while (v21 != 12);
            if (v22 <= v19)
              break;
            v20[v19] = (int)(float)(*(float *)(*(_QWORD *)(v14 + 24) + 4 * v19) + 0.5);
            ++v19;
          }
          memset(&v216, 0, sizeof(v216));
          v84 = v218.__begin_;
          v85 = (char *)v218.__end_ - (char *)v218.__begin_;
          if (v218.__end_ != v218.__begin_)
          {
            v86 = v85 >> 2;
            if ((unint64_t)(v85 >> 2) <= 1)
              v86 = 1;
            v87 = &v216;
            do
            {
              v88 = *v84++;
              LODWORD(v87->__begin_) = v88;
              v87 = (std::vector<int> *)((char *)v87 + 4);
              --v86;
            }
            while (v86);
          }
          HIDWORD(v216.__end_cap_.__value_) = (unint64_t)v85 >> 2;
          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v216, 0, (uint64_t)v194);
          v198 = *(int32x4_t *)v194;
          *(_OWORD *)v199 = *(_OWORD *)&v194[16];
          *(_QWORD *)&v199[16] = v195;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          __p = v196;
          v201 = v197;
          if (v218.__begin_)
          {
            v218.__end_ = v218.__begin_;
            operator delete(v218.__begin_);
          }
          goto LABEL_131;
        }
        v171 = "broadcast_kernel_cpu: invalid rank";
      }
      else
      {
        for (j = 0; j != 12; j += 4)
          v15 *= *(int *)(v14 + 12 + j);
        if (v15 == 5)
        {
          v96 = *(float32x4_t **)(v14 + 24);
          v97.i64[0] = 0x3F0000003F000000;
          v97.i64[1] = 0x3F0000003F000000;
          v198 = vcvtq_s32_f32(vaddq_f32(*v96, v97));
          *(_DWORD *)v199 = (int)(float)(v96[1].f32[0] + 0.5);
LABEL_131:
          Espresso::abstract_blob_container::shape(v194, **a3);
          v98 = Espresso::layer_shape::operator==((uint64_t)v194, (uint64_t)&v198);
          if ((_QWORD)v196)
          {
            *((_QWORD *)&v196 + 1) = v196;
            operator delete((void *)v196);
          }
          if (!v98)
          {
            v99 = operator new(0x98uLL);
            v99[1] = 0;
            v100 = v99 + 1;
            v99[2] = 0;
            *v99 = &off_1E2DBE998;
            *((_OWORD *)v99 + 4) = 0u;
            *((_OWORD *)v99 + 5) = 0u;
            *((_OWORD *)v99 + 2) = 0u;
            *((_OWORD *)v99 + 3) = 0u;
            *((_OWORD *)v99 + 6) = 0u;
            *((_OWORD *)v99 + 7) = 0u;
            *((_OWORD *)v99 + 8) = 0u;
            v99[17] = 0;
            v99[18] = 0;
            *((_DWORD *)v99 + 12) = 1065353216;
            v99[7] = 0x1FFFFFFFFLL;
            v99[12] = 0;
            v99[13] = 0;
            v99[8] = 0;
            v99[9] = 0;
            *((_BYTE *)v99 + 88) = 0;
            v99[10] = 0;
            v99[3] = &off_1E2DA0BF0;
            v99[15] = 0;
            v99[16] = 0;
            *((_BYTE *)v99 + 144) = 0;
            *(_QWORD *)v194 = v99 + 3;
            *(_QWORD *)&v194[8] = v99;
            *((_BYTE *)v99 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
            v101 = **a3;
            v192 = (char *)(v99 + 3);
            v193 = (std::__shared_weak_count *)v99;
            do
              v102 = __ldxr(v100);
            while (__stxr(v102 + 1, v100));
            (*(void (**)(uint64_t, int32x4_t *, char **))(*(_QWORD *)v101 + 16))(v101, &v198, &v192);
            v103 = v193;
            if (v193)
            {
              v104 = (unint64_t *)&v193->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v106 = *(std::__shared_weak_count **)&v194[8];
            if (*(_QWORD *)&v194[8])
            {
              v107 = (unint64_t *)(*(_QWORD *)&v194[8] + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
          }
          v109 = *a3;
          v110 = 0uLL;
          if (a3[1] != *a3)
          {
            if (*v109)
            {
              v111 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v109 + 32))(*v109, (__n128)0);
              v110 = 0uLL;
              if (!v111)
              {
                v110 = *(_OWORD *)(*v109 + 160);
                v112 = *(_QWORD *)(*v109 + 168);
                if (v112)
                {
                  v113 = (unint64_t *)(v112 + 8);
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
              }
            }
          }
          v115 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
          v211 = v110;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          end = (std::__shared_weak_count *)v215.__end_;
          if (v215.__end_)
          {
            v119 = (unint64_t *)(v215.__end_ + 2);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
          goto LABEL_162;
        }
        v171 = "broadcast_kernel_cpu: Blob with full 5d shape is required as fill argument";
      }
    }
    else
    {
      v171 = "broadcast_kernel_cpu: dynamic parameters require interpreter";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v171);
  }
  if ((char *)a4[1] - (char *)*a4 != 16)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("broadcast with more than 1 input is not supported when ndlayers_impl == false");
  v23 = *a3;
  v24 = **a3;
  if (v24 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
  {
    v92 = *v23;
    v25 = *(_QWORD *)(*v23 + 160);
    v26 = *(std::__shared_weak_count **)(v92 + 168);
    if (v26)
    {
      v93 = (unint64_t *)&v26->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v27 = *a4;
  (*(void (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4);
  v28 = *(_QWORD *)(*v27 + 160);
  v29 = *(std::__shared_weak_count **)(*v27 + 168);
  v173 = v26;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v172 = v29;
  v32 = *(char **)(v25 + 24);
  v33 = *(char **)(v28 + 24);
  v34 = *(_DWORD *)(a1 + 280);
  v35 = *(_DWORD *)(a1 + 284);
  v36 = *(_DWORD *)(a1 + 288);
  v37 = *(_DWORD *)(a1 + 292);
  v38 = *(_DWORD *)(a1 + 296);
  v39 = (int *)**a3;
  v40 = v39[2];
  v41 = v39[3];
  v42 = v39[4];
  v43 = v39[5];
  v44 = v39[6];
  v45 = (int *)**a4;
  v46 = v45[2];
  v47 = v45[3] * (uint64_t)(int)v46;
  v48 = v47 * v45[4];
  v49 = v48 * v45[5];
  if (v35 <= 0)
    v50 = v46;
  else
    v50 = 0;
  if (v36 <= 0)
    v51 = v47;
  else
    v51 = 0;
  if (v37 <= 0)
    v52 = v48;
  else
    v52 = 0;
  if (v38 <= 0)
    v53 = v49;
  else
    v53 = 0;
  if (v34 <= 0)
  {
    if ((_DWORD)v44)
    {
      v69 = 0;
      v70 = 4 * v40;
      if (v41 <= 1)
        v71 = 1;
      else
        v71 = v41;
      v186 = v71;
      if (v42 <= 1)
        v72 = 1;
      else
        v72 = v42;
      v174 = 4 * v53;
      v179 = 4 * v52;
      v180 = v42;
      if (v43 <= 1)
        v73 = 1;
      else
        v73 = v43;
      v178 = v73;
      v74 = 4 * v51;
      v75 = 4 * v50;
      v175 = v43;
      do
      {
        v176 = v69;
        v177 = v33;
        if ((_DWORD)v43)
        {
          v76 = 0;
          do
          {
            v182 = v33;
            v184 = v76;
            if ((_DWORD)v42)
            {
              for (k = 0; k != v72; ++k)
              {
                v78 = v33;
                v79 = v186;
                if ((_DWORD)v41)
                {
                  do
                  {
                    memcpy(v32, v78, v70);
                    v78 += v75;
                    v32 += v70;
                    --v79;
                  }
                  while (v79);
                }
                v33 += v74;
              }
            }
            v76 = v184 + 1;
            LODWORD(v42) = v180;
            v33 = &v182[v179];
          }
          while (v184 + 1 != v178);
        }
        v69 = v176 + 1;
        v33 = &v177[v174];
        LODWORD(v43) = v175;
      }
      while (v176 + 1 != v44);
    }
  }
  else if ((_DWORD)v44)
  {
    v54 = 0;
    if (v41 <= 1)
      v55 = 1;
    else
      v55 = v41;
    if (v42 <= 1)
      v56 = 1;
    else
      v56 = v42;
    if (v43 <= 1)
      v57 = 1;
    else
      v57 = v43;
    do
    {
      if ((_DWORD)v43)
      {
        v58 = 0;
        v59 = v33;
        do
        {
          if ((_DWORD)v42)
          {
            v60 = 0;
            v61 = v59;
            do
            {
              if ((_DWORD)v41)
              {
                v62 = 0;
                v63 = v61;
                do
                {
                  if ((int)v40 >= 1)
                  {
                    v64 = (v40 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                    v65 = v32;
                    do
                    {
                      *v65++ = *(_DWORD *)v63;
                      --v64;
                    }
                    while (v64 > 1);
                  }
                  v32 += 4 * v40;
                  v63 += 4 * v50;
                  ++v62;
                }
                while (v62 != v55);
              }
              v61 += 4 * v51;
              ++v60;
            }
            while (v60 != v56);
          }
          v59 += 4 * v52;
          ++v58;
        }
        while (v58 != v57);
      }
      v33 += 4 * v53;
      ++v54;
    }
    while (v54 != v44);
  }
  if (!v172)
    goto LABEL_103;
  v80 = (unint64_t *)&v172->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
    std::__shared_weak_count::__release_weak(v172);
    if (!v173)
      return;
  }
  else
  {
LABEL_103:
    if (!v173)
      return;
  }
  v82 = (unint64_t *)&v173->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
}

void sub_1917DC1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  uint64_t v59;
  void *v61;

  v61 = *(void **)(v59 - 120);
  if (v61)
  {
    *(_QWORD *)(v59 - 112) = v61;
    operator delete(v61);
  }
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a50)
    operator delete(a50);
  if (a58)
    operator delete(a58);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 224);
  _Unwind_Resume(a1);
}

void Espresso::cast_kernel_cpu::~cast_kernel_cpu(Espresso::cast_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cast_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  _BOOL4 v13;
  Espresso *v14;
  unsigned __int8 v15;
  NSObject *v16;
  int v17;
  Espresso *v18;
  const char *v19;
  unsigned __int8 v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  vDSP_Length v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  vImagePixelCount v50;
  uint64_t v51;
  vDSP_Length v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  vDSP_Length v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  vImagePixelCount v68;
  uint64_t v69;
  vDSP_Length v70;
  unint64_t *v71;
  uint64_t v72;
  vDSP_Length v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  vDSP_Length v80;
  vImagePixelCount v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  vDSP_Length v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t i;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  vImagePixelCount v99;
  uint64_t v100;
  vDSP_Length v101;
  uint64_t v102;
  int *v103;
  _WORD *v104;
  uint64_t v105;
  int v106;
  unint64_t j;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  vImagePixelCount v119;
  uint64_t v120;
  vDSP_Length v121;
  unint64_t *v122;
  uint64_t v123;
  _QWORD *data;
  vDSP_Length v125;
  uint64_t v126;
  int *v127;
  _WORD *v128;
  uint64_t v129;
  int v130;
  std::__shared_weak_count *height;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  vDSP_Length v139;
  uint64_t v140;
  int *v141;
  _WORD *v142;
  uint64_t v143;
  int v144;
  unint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  vDSP_Length v149;
  uint64_t v150;
  int *v151;
  _WORD *v152;
  uint64_t v153;
  int v154;
  unint64_t *v156;
  unint64_t *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  vImage_Buffer dest;
  void *__p;
  void *v214;
  vImage_Buffer src;
  Espresso *v216;
  Espresso *v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  v4 = *a4;
  v5 = a4[1];
  if (v5 - *a4 != a3[1] - *a3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cast_kernel_cpu: mismatching input blobs");
  if (v5 != v4)
  {
    v8 = 0;
    while (1)
    {
      v9 = (uint64_t *)(v4 + 16 * v8);
      v10 = *a3;
      Espresso::abstract_blob_container::shape((char *)&src, *v9);
      v11 = (uint64_t *)(v10 + 16 * v8);
      if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&src))
      {
        Espresso::abstract_blob_container::shape((char *)&dest, *v11);
        v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&dest) == 0;
        if (__p)
        {
          v214 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v13 = 1;
      }
      v14 = v216;
      if (v216)
      {
        v217 = v216;
        operator delete(v216);
      }
      if (!v13)
        break;
      if ((v15 & 1) == 0)
      {
        if ((_DWORD)v14)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
          Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFA;
        }
      }
      if (Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        Espresso::espresso_os_log_subsystem(v14, v12);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(src.data) = 0;
          _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "cast_kernel_cpu: zero shaped input or output so skipping computation", (uint8_t *)&src, 2u);
        }

      }
LABEL_263:
      ++v8;
      v4 = *a4;
      if (v8 >= (a4[1] - *a4) >> 4)
        return;
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
    v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
    if (v17 == (_DWORD)v18)
    {
      if ((v20 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
          Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFA;
        }
      }
      if (Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        Espresso::espresso_os_log_subsystem(v18, v19);
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LODWORD(src.data) = 134217984;
          *(void **)((char *)&src.data + 4) = (void *)v8;
          _os_log_error_impl(&dword_190DAF000, v21, OS_LOG_TYPE_ERROR, "cast_kernel_cpu: same compute path of bottom and top blob %zu", (uint8_t *)&src, 0xCu);
        }

      }
    }
    if (*v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 1)
    {
      v22 = *(std::__shared_weak_count **)(*v11 + 184);
      v210 = *(_QWORD *)(*v11 + 176);
      v211 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
    }
    else
    {
      v210 = 0;
      v211 = 0;
    }
    if (*v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11))
    {
      v25 = *(_QWORD *)(*v11 + 160);
      v56 = *(std::__shared_weak_count **)(*v11 + 168);
      v208 = v25;
      v209 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
    }
    else
    {
      v25 = 0;
      v208 = 0;
      v209 = 0;
    }
    if (*v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 3)
    {
      v27 = *(_QWORD *)(*v11 + 208);
      v26 = *(std::__shared_weak_count **)(*v11 + 216);
      v206 = v27;
      v207 = v26;
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
    }
    else
    {
      v27 = 0;
      v206 = 0;
      v207 = 0;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v204, v11);
    if (*v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 1)
    {
      v31 = *(_QWORD *)(*v9 + 176);
      v30 = *(std::__shared_weak_count **)(*v9 + 184);
      v202 = v31;
      v203 = v30;
      if (v30)
      {
        v32 = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
    }
    else
    {
      v31 = 0;
      v202 = 0;
      v203 = 0;
    }
    if (*v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
    {
      v34 = *(_QWORD *)(*v9 + 160);
      v59 = *(std::__shared_weak_count **)(*v9 + 168);
      v200 = v34;
      v201 = v59;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
    }
    else
    {
      v34 = 0;
      v200 = 0;
      v201 = 0;
    }
    if (*v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
    {
      v36 = *(_QWORD *)(*v9 + 208);
      v35 = *(std::__shared_weak_count **)(*v9 + 216);
      v198 = v36;
      v199 = v35;
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
    }
    else
    {
      v36 = 0;
      v198 = 0;
      v199 = 0;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v196, v9);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
      {
        v44 = 0;
        v45 = *(int *)(v25 + 8);
        do
        {
          v45 *= *(int *)(v25 + 12 + v44);
          v44 += 4;
        }
        while (v44 != 12);
        vDSP_vflt32(*(const int **)(v36 + 24), 1, *(float **)(v25 + 24), 1, v45);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 2)
      {
        v62 = 0;
        v63 = *(int *)(v25 + 8);
        do
        {
          v63 *= *(int *)(v25 + 12 + v62);
          v62 += 4;
        }
        while (v62 != 12);
        vDSP_vflt8(*(const char **)(v196 + 24), 1, *(float **)(v25 + 24), 1, v63);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 4)
      {
        v79 = 0;
        v80 = *(int *)(v25 + 8);
        do
        {
          v80 *= *(int *)(v25 + 12 + v79);
          v79 += 4;
        }
        while (v79 != 12);
        vDSP_vfltu8(*(const unsigned __int8 **)(v196 + 24), 1, *(float **)(v25 + 24), 1, v80);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 1)
      {
        v97 = 0;
        v98 = *(void **)(v25 + 24);
        v99 = *(int *)(v25 + 8);
        do
        {
          v99 *= *(int *)(v25 + 12 + v97);
          v97 += 4;
        }
        while (v97 != 12);
        src.data = *(void **)(v31 + 24);
        src.height = 1;
        src.width = v99;
        src.rowBytes = 2 * v99;
        dest.data = v98;
        dest.height = 1;
        dest.width = v99;
        dest.rowBytes = 4 * v99;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
      {
        v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
        v187 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
        Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v186, v187);
      }
      v135 = 0;
      v40 = *(void **)(v25 + 24);
      v41 = *(const void **)(v34 + 24);
      v42 = *(int *)(v34 + 8);
      do
      {
        v42 *= *(int *)(v34 + 12 + v135);
        v135 += 4;
      }
      while (v135 != 12);
      goto LABEL_62;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 3)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
      {
        v72 = 0;
        v73 = *(int *)(v27 + 8);
        do
        {
          v73 *= *(int *)(v27 + 12 + v72);
          v72 += 4;
        }
        while (v72 != 12);
        vDSP_vfix32(*(const float **)(v34 + 24), 1, *(int **)(v27 + 24), 1, v73);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
      {
        v39 = 0;
        v40 = *(void **)(v27 + 24);
        v41 = *(const void **)(v36 + 24);
        v42 = *(int *)(v36 + 8);
        do
        {
          v42 *= *(int *)(v36 + 12 + v39);
          v39 += 4;
        }
        while (v39 != 12);
LABEL_62:
        v43 = 4 * v42;
LABEL_63:
        memcpy(v40, v41, v43);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 2)
      {
        v74 = 0;
        v75 = v196;
        v76 = v196 + 12;
        while (1)
        {
          v77 = 0;
          v78 = *(int *)(v75 + 8);
          do
          {
            v78 *= *(int *)(v76 + v77);
            v77 += 4;
          }
          while (v77 != 12);
          if (v74 >= v78)
            break;
          *(_DWORD *)(*(_QWORD *)(v27 + 24) + 4 * v74) = *(char *)(*(_QWORD *)(v75 + 24) + v74);
          ++v74;
        }
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 4)
      {
        v92 = 0;
        v93 = v196;
        v94 = v196 + 12;
        while (1)
        {
          v95 = 0;
          v96 = *(int *)(v93 + 8);
          do
          {
            v96 *= *(int *)(v94 + v95);
            v95 += 4;
          }
          while (v95 != 12);
          if (v92 >= v96)
            break;
          *(_DWORD *)(*(_QWORD *)(v27 + 24) + 4 * v92) = *(unsigned __int8 *)(*(_QWORD *)(v93 + 24) + v92);
          ++v92;
        }
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 1)
      {
        v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
        v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
        Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v184, v185);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v194, v27 + 8);
      v116 = 0;
      v117 = v194;
      v118 = *(void **)(v194 + 24);
      v119 = *(int *)(v194 + 8);
      do
      {
        v119 *= *(int *)(v194 + 12 + v116);
        v116 += 4;
      }
      while (v116 != 12);
      src.data = *(void **)(v31 + 24);
      src.height = 1;
      src.width = v119;
      src.rowBytes = 2 * v119;
      dest.data = v118;
      dest.height = 1;
      dest.width = v119;
      dest.rowBytes = 4 * v119;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v120 = 0;
      v121 = *(int *)(v27 + 8);
      do
      {
        v121 *= *(int *)(v27 + 12 + v120);
        v120 += 4;
      }
      while (v120 != 12);
      vDSP_vfix32(*(const float **)(v117 + 24), 1, *(int **)(v27 + 24), 1, v121);
      v53 = v195;
      if (!v195)
        goto LABEL_223;
      v122 = (unint64_t *)&v195->__shared_owners_;
      do
        v55 = __ldaxr(v122);
      while (__stlxr(v55 - 1, v122));
LABEL_221:
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      goto LABEL_223;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 2)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
      {
        v85 = 0;
        v86 = *(int *)(v204 + 8);
        do
        {
          v86 *= *(int *)(v204 + 12 + v85);
          v85 += 4;
        }
        while (v85 != 12);
        vDSP_vfix8(*(const float **)(v34 + 24), 1, *(char **)(v204 + 24), 1, v86);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 1)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
        {
          for (i = 0; ; ++i)
          {
            v90 = 0;
            v91 = *(int *)(v36 + 8);
            do
            {
              v91 *= *(int *)(v36 + 12 + v90);
              v90 += 4;
            }
            while (v90 != 12);
            if (i >= 4 * v91)
              break;
            *(_BYTE *)(*(_QWORD *)(v204 + 24) + i) = *(_DWORD *)(*(_QWORD *)(v36 + 24) + 4 * i);
          }
          goto LABEL_223;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 2
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 4)
        {
          v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
          v189 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v188, v189);
        }
        v115 = 0;
        v40 = *(void **)(v204 + 24);
        v41 = *(const void **)(v196 + 24);
        v43 = *(int *)(v196 + 8);
        do
        {
          v43 *= *(int *)(v196 + 12 + v115);
          v115 += 4;
        }
        while (v115 != 12);
        goto LABEL_63;
      }
      v46 = v204;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v194, v204 + 8);
      v47 = 0;
      v48 = v194;
      v49 = *(void **)(v194 + 24);
      v50 = *(int *)(v194 + 8);
      do
      {
        v50 *= *(int *)(v194 + 12 + v47);
        v47 += 4;
      }
      while (v47 != 12);
      src.data = *(void **)(v31 + 24);
      src.height = 1;
      src.width = v50;
      src.rowBytes = 2 * v50;
      dest.data = v49;
      dest.height = 1;
      dest.width = v50;
      dest.rowBytes = 4 * v50;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v51 = 0;
      v52 = *(int *)(v46 + 8);
      do
      {
        v52 *= *(int *)(v46 + 12 + v51);
        v51 += 4;
      }
      while (v51 != 12);
      vDSP_vfix8(*(const float **)(v48 + 24), 1, *(char **)(v46 + 24), 1, v52);
      v53 = v195;
      if (!v195)
        goto LABEL_223;
      v54 = (unint64_t *)&v195->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      goto LABEL_221;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 4)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
      {
        v100 = 0;
        v101 = *(int *)(v204 + 8);
        do
        {
          v101 *= *(int *)(v204 + 12 + v100);
          v100 += 4;
        }
        while (v100 != 12);
        vDSP_vfixu8(*(const float **)(v34 + 24), 1, *(unsigned __int8 **)(v204 + 24), 1, v101);
        goto LABEL_223;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 1)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
        {
          for (j = 0; ; ++j)
          {
            v113 = 0;
            v114 = *(int *)(v36 + 8);
            do
            {
              v114 *= *(int *)(v36 + 12 + v113);
              v113 += 4;
            }
            while (v113 != 12);
            if (j >= 4 * v114)
              break;
            *(_BYTE *)(*(_QWORD *)(v204 + 24) + j) = *(_DWORD *)(*(_QWORD *)(v36 + 24) + 4 * j);
          }
          goto LABEL_223;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 4
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 2)
        {
          v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
          v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v192, v193);
        }
        v136 = 0;
        v40 = *(void **)(v204 + 24);
        v41 = *(const void **)(v196 + 24);
        v43 = *(int *)(v196 + 8);
        do
        {
          v43 *= *(int *)(v196 + 12 + v136);
          v136 += 4;
        }
        while (v136 != 12);
        goto LABEL_63;
      }
      v64 = v204;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v194, v204 + 8);
      v65 = 0;
      v66 = v194;
      v67 = *(void **)(v194 + 24);
      v68 = *(int *)(v194 + 8);
      do
      {
        v68 *= *(int *)(v194 + 12 + v65);
        v65 += 4;
      }
      while (v65 != 12);
      src.data = *(void **)(v31 + 24);
      src.height = 1;
      src.width = v68;
      src.rowBytes = 2 * v68;
      dest.data = v67;
      dest.height = 1;
      dest.width = v68;
      dest.rowBytes = 4 * v68;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v69 = 0;
      v70 = *(int *)(v64 + 8);
      do
      {
        v70 *= *(int *)(v64 + 12 + v69);
        v69 += 4;
      }
      while (v69 != 12);
      vDSP_vfixu8(*(const float **)(v66 + 24), 1, *(unsigned __int8 **)(v64 + 24), 1, v70);
      v53 = v195;
      if (!v195)
        goto LABEL_223;
      v71 = (unint64_t *)&v195->__shared_owners_;
      do
        v55 = __ldaxr(v71);
      while (__stlxr(v55 - 1, v71));
      goto LABEL_221;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) != 1)
    {
      v182 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
      v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
      Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v182, v183);
    }
    if (*v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) == 1)
    {
      v82 = *(_QWORD *)(*v11 + 176);
      v81 = *(_QWORD *)(*v11 + 184);
      src.data = (void *)v82;
      src.height = v81;
      if (v81)
      {
        v83 = (unint64_t *)(v81 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
    }
    else
    {
      v82 = 0;
      src.data = 0;
      src.height = 0;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
    {
      v102 = 0;
      v103 = *(int **)(v34 + 24);
      v104 = *(_WORD **)(v82 + 24);
      v105 = *(int *)(v82 + 8);
      do
      {
        v105 *= *(int *)(v82 + 12 + v102);
        v102 += 4;
      }
      while (v102 != 12);
      for (; v105; --v105)
      {
        v106 = *v103++;
        _S0 = v106;
        __asm { FCVT            H0, S0 }
        *v104++ = _S0;
      }
      goto LABEL_218;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 1)
    {
      v87 = 0;
      v88 = *(int *)(v31 + 8);
      do
      {
        v88 *= *(int *)(v31 + 12 + v87);
        v87 += 4;
      }
      while (v87 != 12);
      memcpy(*(void **)(v82 + 24), *(const void **)(v31 + 24), 2 * v88);
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 3)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, v82 + 8);
        v123 = 0;
        data = dest.data;
        v125 = *((int *)dest.data + 2);
        do
        {
          v125 *= *(int *)((char *)dest.data + v123 + 12);
          v123 += 4;
        }
        while (v123 != 12);
        vDSP_vflt32(*(const int **)(v36 + 24), 1, *((float **)dest.data + 3), 1, v125);
        v126 = 0;
        v127 = (int *)data[3];
        v128 = *(_WORD **)(v82 + 24);
        v129 = *(int *)(v82 + 8);
        do
        {
          v129 *= *(int *)(v82 + 12 + v126);
          v126 += 4;
        }
        while (v126 != 12);
        for (; v129; --v129)
        {
          v130 = *v127++;
          _S0 = v130;
          __asm { FCVT            H0, S0 }
          *v128++ = _S0;
        }
        height = (std::__shared_weak_count *)dest.height;
        if (!dest.height)
          goto LABEL_218;
        v133 = (unint64_t *)(dest.height + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
      }
      else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) == 2)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, v82 + 8);
        v137 = 0;
        v138 = dest.data;
        v139 = *((int *)dest.data + 2);
        do
        {
          v139 *= *(int *)((char *)dest.data + v137 + 12);
          v137 += 4;
        }
        while (v137 != 12);
        vDSP_vflt8(*(const char **)(v196 + 24), 1, *((float **)dest.data + 3), 1, v139);
        v140 = 0;
        v141 = (int *)v138[3];
        v142 = *(_WORD **)(v82 + 24);
        v143 = *(int *)(v82 + 8);
        do
        {
          v143 *= *(int *)(v82 + 12 + v140);
          v140 += 4;
        }
        while (v140 != 12);
        for (; v143; --v143)
        {
          v144 = *v141++;
          _S0 = v144;
          __asm { FCVT            H0, S0 }
          *v142++ = _S0;
        }
        height = (std::__shared_weak_count *)dest.height;
        if (!dest.height)
          goto LABEL_218;
        v146 = (unint64_t *)(dest.height + 8);
        do
          v134 = __ldaxr(v146);
        while (__stlxr(v134 - 1, v146));
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9) != 4)
        {
          v190 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
          v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11);
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v190, v191);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, v82 + 8);
        v147 = 0;
        v148 = dest.data;
        v149 = *((int *)dest.data + 2);
        do
        {
          v149 *= *(int *)((char *)dest.data + v147 + 12);
          v147 += 4;
        }
        while (v147 != 12);
        vDSP_vfltu8(*(const unsigned __int8 **)(v196 + 24), 1, *((float **)dest.data + 3), 1, v149);
        v150 = 0;
        v151 = (int *)v148[3];
        v152 = *(_WORD **)(v82 + 24);
        v153 = *(int *)(v82 + 8);
        do
        {
          v153 *= *(int *)(v82 + 12 + v150);
          v150 += 4;
        }
        while (v150 != 12);
        for (; v153; --v153)
        {
          v154 = *v151++;
          _S0 = v154;
          __asm { FCVT            H0, S0 }
          *v152++ = _S0;
        }
        height = (std::__shared_weak_count *)dest.height;
        if (!dest.height)
          goto LABEL_218;
        v156 = (unint64_t *)(dest.height + 8);
        do
          v134 = __ldaxr(v156);
        while (__stlxr(v134 - 1, v156));
      }
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
LABEL_218:
    v53 = (std::__shared_weak_count *)src.height;
    if (!src.height)
    {
LABEL_223:
      v158 = v197;
      if (v197)
      {
        v159 = (unint64_t *)&v197->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v161 = v199;
      if (v199)
      {
        v162 = (unint64_t *)&v199->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v164 = v201;
      if (v201)
      {
        v165 = (unint64_t *)&v201->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      v167 = v203;
      if (v203)
      {
        v168 = (unint64_t *)&v203->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v170 = v205;
      if (v205)
      {
        v171 = (unint64_t *)&v205->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      v173 = v207;
      if (v207)
      {
        v174 = (unint64_t *)&v207->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      v176 = v209;
      if (v209)
      {
        v177 = (unint64_t *)&v209->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v179 = v211;
      if (v211)
      {
        v180 = (unint64_t *)&v211->__shared_owners_;
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      goto LABEL_263;
    }
    v157 = (unint64_t *)(src.height + 8);
    do
      v55 = __ldaxr(v157);
    while (__stlxr(v55 - 1, v157));
    goto LABEL_221;
  }
}

void sub_1917DD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("cast_kernel_cpu doesn't support casting from %d to %d", a1, a2);
}

void Espresso::compute_stats_kernel_cpu::~compute_stats_kernel_cpu(Espresso::compute_stats_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::compute_stats_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  vDSP_Length v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const float *v17;
  float *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;

  v5 = *a3;
  v6 = **a3;
  if (v6 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6))
  {
    v7 = *(_QWORD *)(*v5 + 160);
    v23 = *(std::__shared_weak_count **)(*v5 + 168);
    v30 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v30 = 0;
  }
  v8 = *a4;
  if (*v8 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v26 = *(std::__shared_weak_count **)(*v8 + 168);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = v26;
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v9 = 0;
  }
  v10 = (*(_DWORD *)(v9 + 20) * *(_DWORD *)(v9 + 16));
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 4 * *(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8);
    v15 = 4;
    do
    {
      v16 = *(_QWORD *)(v7 + 24);
      v17 = (const float *)(*(_QWORD *)(v9 + 24) + v12);
      vDSP_minv(v17, 1, (float *)(v16 + v11), v10);
      vDSP_maxv(v17, 1, (float *)(v16 + 4 * (v15 - 3)), v10);
      vDSP_normalize(v17, 1, 0, 1, (float *)(v16 + 4 * (v15 - 2)), (float *)(v16 + 4 * (v15 - 1)), v10);
      v18 = (float *)(v16 + 4 * v15);
      vDSP_svesq(v17, 1, v18, v10);
      *v18 = *v18 / (float)(int)v10;
      ++v13;
      v12 += v14;
      v15 += 5;
      v11 += 20;
    }
    while (v13 < *(int *)(v9 + 20) * (uint64_t)*(int *)(v9 + 16));
  }
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1917DDAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::lambda_kernel_cpu::~lambda_kernel_cpu(void **this)
{
  Espresso::generic_lambda_kernel::~generic_lambda_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::patch_extractor_kernel_cpu::~patch_extractor_kernel_cpu(Espresso::patch_extractor_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::patch_extractor_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v14;
  std::__shared_weak_count *height;
  int *data;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  vImagePixelCount v36;
  int32x2_t v37;
  unsigned __int32 v38;
  float32x2_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int32 v48;
  uint64_t v49;
  size_t v50;
  float v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int32x2_t v55;
  float32x2_t *v56;
  int v57;
  unsigned int v58;
  float32x2_t v59;
  int8x8_t v60;
  int32x2_t v61;
  int8x8_t v62;
  signed int v63;
  int32x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x2_t v69;
  float32x2_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int32x2_t v77;
  void *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int v94;
  int v95;
  int v96;
  int v97;
  _BOOL4 v99;
  _BOOL4 v101;
  _BOOL4 v103;
  _BOOL4 v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  float32x2_t v113;
  int32x2_t v114;
  int32x2_t v115;
  __int32 v116;
  __int32 v117;
  uint64_t v118;
  float32x2_t v119;
  int32x2_t v120;
  int32x2_t v121;
  int v122;
  _BOOL4 v124;
  float v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  float v129;
  float *v130;
  __int32 v131;
  float v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  __int32 v140;
  CGFloat v142;
  CGFloat v143;
  CGFloat v144;
  CGFloat v145;
  CGFloat v146;
  float64x2_t v147;
  float64x2_t v148;
  double v149;
  double tx;
  __int128 v151;
  int v152;
  double v153;
  int v154;
  float32x4_t v155;
  float v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::runtime_error *v163;
  std::runtime_error *exception;
  std::runtime_error *v165;
  std::runtime_error *v166;
  int32x2_t *v167;
  unsigned __int32 v168;
  int v169;
  uint64_t v170;
  __int32 v171;
  int v172;
  int32x2_t v173;
  double v174;
  double v175;
  uint64_t v176;
  float32x2_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  CGFloat v184;
  CGFloat v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  float *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int32x2_t *v197;
  int8x16_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  vImagePixelCount v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  int32x2_t v210;
  float v212;
  float v213;
  float v214;
  int32x2_t v215;
  CGAffineTransform v216;
  CGAffineTransform v217;
  CGAffineTransform v218;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v221;
  CGAffineTransform v222;
  CGAffineTransform v223;
  CGAffineTransform v224;
  vImage_AffineTransform v225;
  vImage_Buffer dest;
  vImage_Buffer src;
  vImage_AffineTransform transform;
  CGAffineTransform v229;
  CGFloat ty;

  v10 = *a4;
  v11 = (char *)a4[1] - (char *)*a4;
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: requires at least one input");
    goto LABEL_187;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    if (v11 > 0x1F)
    {
      v14 = v10[2];
      if (v14 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
      {
        v17 = v10[2];
        data = *(int **)(v17 + 160);
        height = *(std::__shared_weak_count **)(v17 + 168);
        if (height)
        {
          p_shared_owners = (unint64_t *)&height->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
      }
      else
      {
        height = 0;
        data = 0;
      }
      goto LABEL_12;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: sparse mode requires two inputs");
LABEL_187:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::abstract_blob_container::shape((char *)&v229, *v10);
  (*(void (**)(vImage_Buffer *__return_ptr, uint64_t, CGAffineTransform *))(*(_QWORD *)a1 + 328))(&src, a1, &v229);
  data = (int *)src.data;
  height = (std::__shared_weak_count *)src.height;
  src.height = 0;
  src.data = 0;
  if (*(_QWORD *)&v229.ty)
  {
    ty = v229.ty;
    operator delete(*(void **)&v229.ty);
  }
LABEL_12:
  v20 = *a4;
  v21 = **a4;
  if (v21 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21))
  {
    v22 = *(std::__shared_weak_count **)(*v20 + 168);
    v197 = *(int32x2_t **)(*v20 + 160);
    if (v22)
    {
      v28 = (unint64_t *)&v22->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    v197 = 0;
    v22 = 0;
  }
  v23 = *a3;
  v24 = **a3;
  if (v24)
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v26 = a1;
    if (v25)
    {
      v196 = 0;
      v27 = 0;
    }
    else
    {
      v27 = *(std::__shared_weak_count **)(*v23 + 168);
      v196 = *(_QWORD *)(*v23 + 160);
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
    }
  }
  else
  {
    v196 = 0;
    v27 = 0;
    v26 = a1;
  }
  v181 = v22;
  v182 = height;
  v183 = v27;
  if (!v197 || !v196)
  {
    v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v165, "Inconsistent state");
    __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!data)
  {
    v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v166, "Inconsistent state");
    __cxa_throw(v166, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v180 = data[4];
  v32 = data[4] & 1;
  if ((int)v180 < 0)
    v32 = -v32;
  if (*(_DWORD *)(v26 + 280) == 4)
    v32 = v32 == 0;
  v179 = v32;
  v172 = v197[2].i32[1];
  if (v32)
    v33 = v197[2].i32[1];
  else
    v33 = 1;
  v169 = data[5];
  v178 = (v33 * v169);
  if ((int)v178 >= 1)
  {
    v189 = 0;
    v34 = 0;
    v36 = *(int *)(v196 + 8);
    v35 = *(_DWORD *)(v196 + 12);
    v37 = v197[1];
    v38 = v197[2].u32[0];
    __asm { FMOV            V2.2S, #1.0 }
    v43 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(v26 + 320) == 0), 0x1FuLL)), (int8x8_t)vcvt_f32_s32(vadd_s32(v37, (int32x2_t)-1)), _D2);
    v167 = (int32x2_t *)(v26 + 284);
    v44 = v35 * v36;
    v45 = v38 * v35 * v36;
    v47 = v37.i32[1];
    v46 = v37.i32[0];
    v48 = v37.i32[1] * v37.i32[0];
    v203 = v38;
    v171 = v37.i32[1] * v37.i32[0] * v38;
    v49 = v37.i32[0];
    v50 = 4 * v37.i32[0];
    v213 = (float)(int)v36;
    v212 = (float)v35;
    v205 = 1.0 / (float)v35;
    if (v37.i32[0] <= 1)
      v46 = 1;
    v51 = 2.0 / (float)v46;
    if (v37.i32[1] <= 1)
      v52 = 1;
    else
      v52 = HIDWORD(*(_QWORD *)&v197[1]);
    v174 = (float)(2.0 / (float)v52);
    v175 = v51;
    v195 = v44;
    v194 = v48;
    v170 = v45;
    v204 = *(int *)(v196 + 12);
    v53 = *(unsigned int *)(v196 + 12);
    v54 = *(unsigned int *)(v196 + 8);
    v55.i32[1] = v37.i32[1];
    v55.i32[0] = 0;
    v173 = v55;
    v176 = 4 * v45;
    v192 = 4 * v44;
    v193 = 4 * v48;
    v168 = vdup_lane_s32(v37, 1).u32[0];
    v215 = v37;
    v177 = v43;
    while (1)
    {
      v56 = (float32x2_t *)(*((_QWORD *)data + 3) + 4 * v34 * v180);
      if (v179)
      {
        v57 = (int)v56->f32[v34];
        v56 = (float32x2_t *)((char *)v56 + 4);
        if (v172 < v57)
          v57 = v172;
      }
      else
      {
        v57 = (int)v34 / v169;
      }
      v58 = *(_DWORD *)(v26 + 280);
      v190 = (float *)v56;
      v188 = v34;
      if (v58 == 3)
        break;
      if (v58 != 4)
      {
        if (v58 == 5)
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
        v59 = vmul_f32(v43, *v56);
        v60 = (int8x8_t)vcvt_s32_f32(vrnda_f32(v59));
        if (v58 > 1)
        {
          v61 = vcvt_s32_f32(vrnda_f32(vmul_f32(v43, v56[1])));
          v62 = (int8x8_t)vsub_s32(v61, (int32x2_t)v60);
          if (v58 != 2)
          {
            v191 = 0;
            v62 = (int8x8_t)vmax_s32((int32x2_t)v62, (int32x2_t)0x100000001);
            goto LABEL_61;
          }
        }
        else
        {
          v61 = vcvt_s32_f32(vrnda_f32(vadd_f32(v59, vcvt_f32_s32(*v167))));
          v62 = (int8x8_t)vsub_s32(v61, (int32x2_t)v60);
        }
        *(int32x2_t *)v65.i8 = vzip1_s32(v37, v61);
        v65.i64[1] = __PAIR64__(v60.u32[0], v37.u32[0]);
        v66.i64[0] = __PAIR64__(v60.u32[1], v168);
        v66.u64[1] = (unint64_t)vzip2_s32(v37, v61);
        v67.i64[0] = v60.u32[1];
        v67.i64[1] = v61.u32[1];
        v68.i64[0] = v61.u32[0];
        v68.i64[1] = v60.u32[0];
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v68, v65), (int16x8_t)vcgtq_s32(v67, v66)))) & 1) == 0)
        {
          v191 = 0;
LABEL_61:
          v63 = v60.i32[0];
          v64 = vzip2_s32((int32x2_t)v60, v61);
          goto LABEL_62;
        }
        v63 = 0;
        transform.a = v213 / (float)v62.i32[0];
        v69 = vcvt_f32_s32((int32x2_t)vext_s8(v62, v60, 4uLL));
        v70.f32[0] = v212;
        v70.f32[1] = -transform.a;
        *(float *)&v71 = vdiv_f32(v70, v69).f32[0];
        HIDWORD(v71) = vmul_f32(v70, v69).i32[1];
        *(_QWORD *)&transform.d = v71;
        transform.ty = (float)-(float)vsub_s32(v37, v61).i32[1] * *(float *)&v71;
        *(_QWORD *)&transform.b = 0;
        v191 = 1;
        goto LABEL_58;
      }
      v63 = 0;
      v191 = 0;
      v5 = v56->f32[0];
      v208 = v56->f32[1];
      v8 = v56[1].f32[0];
      v9 = v56[1].f32[1];
      v7 = v56[2].f32[1];
      v207 = v56[2].f32[0];
      v6 = v56[3].f32[0];
      v206 = v56[3].f32[1];
      v62 = (int8x8_t)v37;
      v64 = v173;
      v4 = v56[4].f32[0];
LABEL_62:
      if ((int)v203 >= 1)
      {
        v72 = 0;
        v202 = v34 * v170;
        v201 = vmul_s32(v64, v215).i32[0];
        v199 = v63;
        v200 = v171 * v57;
        v73.i64[0] = v62.i32[0];
        v73.i64[1] = v62.i32[1];
        v214 = (float)v62.i32[0] / v213;
        v198 = vextq_s8(v73, v73, 8uLL);
        v210 = vdup_n_s32(v63);
        v74 = 4 * v200;
        v75 = v189;
        v209 = (float)v62.i32[1] / v212;
        do
        {
          v76 = *(_QWORD *)(v196 + 24);
          v77 = v197[3];
          v78 = (void *)(*(_QWORD *)&v77 + 4 * v200 + 4 * v72 * v194 + 4 * v201 + 4 * v199);
          *(int8x16_t *)&src.height = v198;
          src.data = v78;
          src.rowBytes = v50;
          dest.data = (void *)(v76 + 4 * v202 + 4 * v72 * v195);
          dest.height = v204;
          dest.width = v36;
          dest.rowBytes = 4 * v36;
          v79 = *(_DWORD *)(a1 + 280);
          switch(v79)
          {
            case 0:
            case 1:
            case 2:
              if (v191)
                vImageAffineWarp_PlanarF(&src, &dest, 0, &transform, 0.0, 4u);
              else
                vImageScale_PlanarF(&src, &dest, 0, 0);
              break;
            case 3:
              v142 = v190[3];
              v143 = v190[1];
              v144 = v190[4];
              v145 = v190[2];
              v146 = v190[5];
              v224.a = *v190;
              v224.b = v142;
              v224.c = v143;
              v224.d = v144;
              v224.tx = v145;
              v224.ty = v146;
              CGAffineTransformInvert(&v229, &v224);
              v147 = *(float64x2_t *)&v229.a;
              v148 = *(float64x2_t *)&v229.c;
              tx = v229.tx;
              v149 = v229.ty;
              if (!*(_BYTE *)(a1 + 320))
              {
                v186 = *(_OWORD *)&v229.c;
                v187 = *(_OWORD *)&v229.a;
                v151 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
                *(_OWORD *)&v223.a = *MEMORY[0x1E0C9BAA8];
                *(_OWORD *)&v223.c = v151;
                *(_OWORD *)&v223.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
                v152 = *(_DWORD *)(a1 + 284);
                if (v152 <= 1)
                  v152 = 1;
                v184 = v229.tx;
                v185 = v229.ty;
                v153 = (float)((float)v152 * 0.5);
                if (*(int *)(a1 + 288) <= 1)
                  v154 = 1;
                else
                  v154 = *(_DWORD *)(a1 + 288);
                CGAffineTransformScale(&v229, &v223, v153, (float)((float)v154 * 0.5));
                v222 = v229;
                CGAffineTransformTranslate(&v229, &v222, 1.0, 1.0);
                v221 = v229;
                CGAffineTransformScale(&v229, &v221, 1.0, -1.0);
                *(_OWORD *)&t1.a = v187;
                *(_OWORD *)&t1.c = v186;
                t1.tx = v184;
                t1.ty = v185;
                t2 = v229;
                CGAffineTransformConcat(&v229, &t1, &t2);
                v218 = v229;
                CGAffineTransformScale(&v229, &v218, 1.0, -1.0);
                v217 = v229;
                CGAffineTransformTranslate(&v229, &v217, -1.0, -1.0);
                v216 = v229;
                CGAffineTransformScale(&v229, &v216, v175, v174);
                v147 = *(float64x2_t *)&v229.a;
                v148 = *(float64x2_t *)&v229.c;
                tx = v229.tx;
                v149 = v229.ty;
              }
              v155 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v147), v148);
              v156 = tx;
              *(float32x4_t *)&v225.a = v155;
              v155.f32[0] = v149;
              v225.tx = v156;
              LODWORD(v225.ty) = v155.i32[0];
              vImageAffineWarp_PlanarF(&src, &dest, 0, &v225, 0.0, 4u);
              break;
            case 4:
            case 5:
              if ((int)v204 >= 1)
              {
                v80 = 0;
                v81 = v76 + v75;
                do
                {
                  if ((int)v36 >= 1)
                  {
                    v82 = 0;
                    v83 = *(unsigned __int8 *)(a1 + 320);
                    if (*(_BYTE *)(a1 + 320))
                      v84 = (float)(int)v80;
                    else
                      v84 = (float)((float)((float)(int)v80 * v205) + -1.0)
                          + (float)((float)((float)(int)v80 * v205) + -1.0);
                    v85 = v208 * v84;
                    v86 = v207 * v84;
                    v87 = v206 * v84;
                    do
                    {
                      v88 = (float)(int)v82;
                      if (!v83)
                        v88 = (float)((float)((float)(int)v82 * (float)(1.0 / (float)(int)v36)) + -1.0)
                            + (float)((float)((float)(int)v82 * (float)(1.0 / (float)(int)v36)) + -1.0);
                      v89 = v8 + (float)(v85 + (float)(v5 * v88));
                      v90 = v7 + (float)(v86 + (float)(v9 * v88));
                      v91 = v4 + (float)(v87 + (float)(v6 * v88));
                      v92 = v89 / v91;
                      v93 = v90 / v91;
                      if (!v83)
                      {
                        v92 = (float)((float)(v92 + 1.0) * 0.5) * v213;
                        v93 = (float)((float)(v93 + 1.0) * 0.5) * v212;
                      }
                      v94 = vcvtms_s32_f32(v92);
                      v95 = v94 + 1;
                      v96 = vcvtms_s32_f32(v93);
                      v97 = v96 + 1;
                      v99 = v94 < 0 || (int)v49 <= v94;
                      v101 = v94 < -1 || v95 >= (int)v49;
                      v103 = v96 < 0 || v47 <= v96;
                      v105 = v96 < -1 || v97 >= v47;
                      v106 = 0.0;
                      v107 = 0.0;
                      if (!v99 && !v103)
                        v107 = *((float *)v78 + v94 + (int)v49 * v96);
                      if (!v99 && !v105)
                        v106 = *((float *)v78 + v94 + v97 * (int)v49);
                      v108 = 0.0;
                      v109 = 0.0;
                      if (!v101 && !v103)
                        v109 = *((float *)v78 + v95 + (int)v49 * v96);
                      if (!v101 && !v105)
                        v108 = *((float *)v78 + v95 + v97 * (int)v49);
                      v110 = v92 - (float)v94;
                      *(float *)(v81 + 4 * v82++) = (float)((float)((float)((float)(v93 - (float)v96)
                                                                          * (float)((float)(1.0 - v110) * v106))
                                                                  + (float)((float)((float)(1.0 - v110) * v107)
                                                                          * (float)(1.0 - (float)(v93 - (float)v96))))
                                                          + (float)((float)(v110 * v109)
                                                                  * (float)(1.0 - (float)(v93 - (float)v96))))
                                                  + (float)((float)(v110 * v108) * (float)(v93 - (float)v96));
                    }
                    while (v54 != v82);
                  }
                  ++v80;
                  v81 += 4 * v36;
                }
                while (v80 != v53);
              }
              break;
            case 6:
            case 7:
              if ((int)v204 >= 1)
              {
                v111 = 0;
                do
                {
                  if ((int)v36 >= 1)
                  {
                    v112 = 0;
                    v113.f32[0] = (float)(int)v111;
                    v113.f32[1] = (float)(int)v111 + 1.0;
                    v114 = vmax_s32(vadd_s32(v210, vcvt_s32_f32(vrndm_f32(vmul_n_f32(v113, v209)))), 0);
                    v115 = vmin_s32(v215, v114);
                    v116 = v115.i32[1];
                    v117 = v115.i32[0];
                    v118 = v114.u32[0];
                    if (v49 < v114.u32[0])
                      v118 = v49;
                    do
                    {
                      v119.f32[0] = (float)(int)v112;
                      v119.f32[1] = (float)(int)v112 + 1.0;
                      v120 = vmax_s32(vadd_s32(v64, vcvt_s32_f32(vrndm_f32(vmul_n_f32(v119, v214)))), 0);
                      v121 = vmin_s32(v215, v120);
                      v122 = v121.i32[0];
                      v124 = v121.i32[1] > v121.i32[0] && v116 > v117;
                      v125 = 0.0;
                      if (v79 == 6)
                      {
                        if (v121.i32[1] > v122)
                        {
                          v133 = v120.u32[0];
                          if (v49 < v120.u32[0])
                            v133 = v49;
                          v134 = v121.i32[1] + v133 - v122;
                          v135 = v118 + v49 * v133;
                          v136 = *(_QWORD *)&v77 + 4 * (v118 + v49 * v133);
                          v137 = -1;
                          do
                          {
                            v138 = v136;
                            v139 = v135;
                            v140 = v116 - v117;
                            if (v116 > v117)
                            {
                              do
                              {
                                if (*(float *)(v138 + v74) > v125 || v137 == -1)
                                {
                                  v125 = *(float *)(v138 + v74);
                                  v137 = v139;
                                }
                                ++v139;
                                v138 += 4;
                                --v140;
                              }
                              while (v140);
                            }
                            ++v133;
                            v135 += v49;
                            v136 += v50;
                          }
                          while (v134 != (_DWORD)v133);
                        }
                      }
                      else if (v79 == 7)
                      {
                        if (v121.i32[1] <= v122)
                        {
                          v125 = NAN;
                        }
                        else
                        {
                          v126 = v120.u32[0];
                          if (v49 < v120.u32[0])
                            v126 = v49;
                          v127 = v121.i32[1] + v126 - v122;
                          v128 = *(_QWORD *)&v77 + v74 + 4 * (v118 + v49 * v126);
                          v129 = 0.0;
                          do
                          {
                            v130 = (float *)v128;
                            v131 = v116 - v117;
                            if (v116 > v117)
                            {
                              do
                              {
                                v132 = *v130++;
                                v129 = v129 + v132;
                                v125 = v125 + 1.0;
                                --v131;
                              }
                              while (v131);
                            }
                            ++v126;
                            v128 += v50;
                          }
                          while (v127 != (_DWORD)v126);
                          v125 = v129 / v125;
                        }
                        if (!v124)
                          v125 = 0.0;
                      }
                      *(float *)(v76 + 4 * v202 + 4 * v72 * v195 + 4 * (v112 + v111 * v36)) = v125;
                      ++v112;
                    }
                    while (v112 != v54);
                  }
                  ++v111;
                }
                while (v111 != v53);
              }
              break;
            default:
              v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v163, "Invalid mode");
              __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          ++v72;
          v74 += v193;
          v75 += v192;
        }
        while (v72 != v203);
      }
      v34 = v188 + 1;
      v189 += v176;
      v22 = v181;
      height = v182;
      v27 = v183;
      v26 = a1;
      v37 = v215;
      v43 = v177;
      if (v188 + 1 == v178)
        goto LABEL_165;
    }
    v63 = 0;
    v191 = 0;
LABEL_58:
    v62 = (int8x8_t)v37;
    v64 = v173;
    goto LABEL_62;
  }
LABEL_165:
  if (v27)
  {
    v157 = (unint64_t *)&v27->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v22)
  {
    v159 = (unint64_t *)&v22->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (height)
  {
    v161 = (unint64_t *)&height->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
}

void sub_1917DE948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  __cxa_free_exception(v30);
  _Unwind_Resume(a1);
}

void Espresso::crop_and_resize_kernel_cpu::~crop_and_resize_kernel_cpu(Espresso::crop_and_resize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::crop_and_resize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int64x2_t v4;
  int64x2_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v12;
  char v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int32x2_t v63;
  int32x2_t v64;
  double v65;
  int64x2_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  int v94;
  uint64_t v95;
  uint64x2_t v96;
  float32x2_t v97;
  uint64x2_t v98;
  uint64_t v99;
  float32x2_t v100;
  float v101;
  int v102;
  float v103;
  float v104;
  int v105;
  float v106;
  uint64_t v107;
  float v108;
  float *v109;
  double v110;
  double v111;
  double v112;
  float *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  float v119;
  float v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  float32x2_t v125;
  int32x2_t v126;
  int32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  uint64_t v130;
  int64x2_t v131;
  int32x2_t v132;
  int32x2_t v133;
  float *v134;
  uint64_t v135;
  int32x2_t v136;
  float v137;
  float v138;
  float *v139;
  uint64_t v140;
  int32x2_t v141;
  float v142;
  float v143;
  float32x2_t v144;
  int64x2_t v145;
  float *v146;
  uint64_t v147;
  int32x2_t v148;
  float32x2_t v149;
  float v150;
  int32x2_t v151;
  float *v152;
  uint64_t v153;
  int32x2_t v154;
  float32x2_t v155;
  float v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  int32x2_t v160;
  int32x2_t v161;
  float32x2_t v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  int64x2_t v166;
  int32x2_t v167;
  int32x2_t v168;
  uint64_t v169;
  uint64_t v170;
  float32x2_t v171;
  int32x2_t v172;
  int32x2_t v173;
  float32x2_t v174;
  uint64_t v175;
  uint64_t v176;
  int64x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  float *v180;
  unsigned int *v181;
  uint64_t v182;
  int *v183;
  float v184;
  unsigned int v185;
  int v186;
  float *v187;
  unsigned int *v188;
  uint64_t v189;
  unsigned int *v190;
  float v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  float *v200;
  int *v201;
  uint64_t v202;
  float v203;
  float *v204;
  float *v205;
  float *v206;
  float *v207;
  uint64_t v208;
  float v209;
  float v210;
  int v211;
  float v212;
  float v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t i;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  float v230;
  float v231;
  uint64_t v232;
  float v233;
  BOOL v234;
  uint64_t v235;
  int v236;
  int v237;
  float v238;
  int v239;
  float v240;
  int v241;
  float v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  __int128 v289;
  int v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  const char *v294;
  const char *v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  int v298;
  char v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  _BOOL4 v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  char *v338;
  std::__shared_weak_count *v339;
  char *v340;
  std::__shared_weak_count *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  void *v344;
  void *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  __int128 v350;

  v6 = *a4;
  v7 = (char *)a4[1] - (char *)*a4;
  if ((unint64_t)((v7 >> 4) - 1) >= 3)
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: requires one, two, or three inputs");
  v12 = *(_DWORD *)(a1 + 280);
  if (v7 == 16 && v12 == 0)
  {
    *(_DWORD *)(a1 + 280) = 1;
LABEL_10:
    v14 = 0;
    v350 = 0uLL;
LABEL_11:
    v15 = 4;
    v321 = 1;
LABEL_12:
    v299 = 1;
    goto LABEL_13;
  }
  if (v12 == 2)
  {
    if (*(_DWORD *)(a1 + 292) != 2)
      Espresso::throw_exception_selector<Espresso::generic_error>("resize currently only supports resized_dims = 2");
    goto LABEL_10;
  }
  v350 = 0uLL;
  if (v12 == 3)
  {
    v288 = v6[2];
    v289 = 0uLL;
    if (v288)
    {
      v290 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v288 + 32))(v288, (__n128)0);
      v289 = 0uLL;
      if (!v290)
      {
        v289 = *(_OWORD *)(v6[2] + 160);
        v291 = *(_QWORD *)(v6[2] + 168);
        if (v291)
        {
          v292 = (unint64_t *)(v291 + 8);
          do
            v293 = __ldxr(v292);
          while (__stxr(v293 + 1, v292));
        }
      }
    }
    v14 = 0;
    v350 = v289;
    v321 = *(_DWORD *)(v289 + 12);
    v15 = 4;
    goto LABEL_12;
  }
  if (v12)
  {
    v14 = 0;
    goto LABEL_11;
  }
  v71 = v6[2];
  v72 = 0uLL;
  if (v71)
  {
    v73 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v71 + 32))(v71, (__n128)0);
    v72 = 0uLL;
    if (!v73)
    {
      v72 = *(_OWORD *)(v6[2] + 160);
      v74 = *(_QWORD *)(v6[2] + 168);
      if (v74)
      {
        v75 = (unint64_t *)(v74 + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
    }
  }
  v350 = v72;
  if (!(_QWORD)v72)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  v15 = *(_DWORD *)(v72 + 16);
  v321 = *(_DWORD *)(v72 + 20);
  if (v15 == 4)
  {
    v14 = 0;
    goto LABEL_12;
  }
  if (v15 != 5)
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("generic_crop_and_resize_kernel: crop indices must be of size 4 or 5");
  v299 = 0;
  v14 = 1;
LABEL_13:
  v16 = *a4;
  v17 = **a4;
  if (!v17 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17))
  {
    v348 = 0;
    v349 = 0;
    goto LABEL_362;
  }
  v18 = *(_QWORD *)(*v16 + 160);
  v19 = *(std::__shared_weak_count **)(*v16 + 168);
  v348 = v18;
  v349 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v18)
LABEL_362:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  v23 = *(_DWORD *)(v18 + 8);
  v22 = *(_DWORD *)(v18 + 12);
  v319 = v14;
  if (*(_DWORD *)(a1 + 280) == 2)
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64) && (!*(_DWORD *)(a1 + 288) || !*(_DWORD *)(a1 + 284)))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic resize requires interpreter");
    v24 = *a4;
    (*(void (**)(uint64_t))(*(_QWORD *)(*a4)[2] + 32))((*a4)[2]);
    v25 = v24[2];
    v26 = *(_QWORD *)(v25 + 160);
    v27 = *(std::__shared_weak_count **)(v25 + 168);
    v346 = v26;
    v347 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)(v26 + 24);
    v31 = *(_DWORD *)(v26 + 8);
    v32 = *(float *)(v30 + 4 * (v31 - 2));
    v33 = *(float *)(v30 + 4 * (v31 - 1));
    Espresso::abstract_blob_container::shape((char *)&v342, **a4);
    v34 = (unint64_t)v32;
    v35 = (unint64_t)v33;
    if ((unint64_t)v33)
      v36 = (unint64_t)v33;
    else
      v36 = v23;
    if ((_DWORD)v34)
      v37 = (unint64_t)v32;
    else
      v37 = v22;
    v342 = __PAIR64__(v37, v36);
    v38 = operator new(0x98uLL);
    v38[1] = 0;
    v39 = v38 + 1;
    v38[2] = 0;
    *v38 = &off_1E2DBE998;
    *((_OWORD *)v38 + 4) = 0u;
    *((_OWORD *)v38 + 5) = 0u;
    *((_OWORD *)v38 + 2) = 0u;
    *((_OWORD *)v38 + 3) = 0u;
    *((_OWORD *)v38 + 6) = 0u;
    *((_OWORD *)v38 + 7) = 0u;
    *((_OWORD *)v38 + 8) = 0u;
    v38[17] = 0;
    v38[18] = 0;
    *((_DWORD *)v38 + 12) = 1065353216;
    v38[7] = 0x1FFFFFFFFLL;
    v38[12] = 0;
    v38[13] = 0;
    v38[8] = 0;
    v38[9] = 0;
    *((_BYTE *)v38 + 88) = 0;
    v38[10] = 0;
    v38[3] = &off_1E2DA0BF0;
    v38[15] = 0;
    v38[16] = 0;
    *((_BYTE *)v38 + 144) = 0;
    v340 = (char *)(v38 + 3);
    v341 = (std::__shared_weak_count *)v38;
    *((_BYTE *)v38 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
    v40 = **a3;
    v338 = (char *)(v38 + 3);
    v339 = (std::__shared_weak_count *)v38;
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
    (*(void (**)(uint64_t, unint64_t *, char **))(*(_QWORD *)v40 + 16))(v40, &v342, &v338);
    v42 = v339;
    if (v339)
    {
      v43 = (unint64_t *)&v339->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v341;
    if (v341)
    {
      v46 = (unint64_t *)&v341->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v344)
    {
      v345 = v344;
      operator delete(v344);
    }
    v48 = v347;
    if (v347)
    {
      v49 = (unint64_t *)&v347->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    LODWORD(v34) = 0;
    LODWORD(v35) = 0;
  }
  v51 = *a3;
  if (!*v51 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v51 + 32))(*v51))
  {
    v342 = 0;
    v343 = 0;
    goto LABEL_364;
  }
  v53 = *(_QWORD *)(*v51 + 160);
  v52 = *(std::__shared_weak_count **)(*v51 + 168);
  v342 = v53;
  v343 = v52;
  if (v52)
  {
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (!v53)
LABEL_364:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  if (*(_DWORD *)(a1 + 280) == 2)
    goto LABEL_61;
  LODWORD(v35) = *(_DWORD *)(v53 + 8);
  if ((_DWORD)v35 != *(_DWORD *)(a1 + 284))
  {
    v295 = "generic_crop_and_resize_kernel: output width does not match the kernel target width parameter";
    goto LABEL_373;
  }
  LODWORD(v34) = *(_DWORD *)(v53 + 12);
  if ((_DWORD)v34 != *(_DWORD *)(a1 + 288))
  {
    v295 = "generic_crop_and_resize_kernel: output height does not match the kernel target height parameter";
LABEL_373:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v295);
  }
LABEL_61:
  v317 = a4;
  v298 = v15;
  v56 = v348;
  v57 = *(_DWORD *)(v348 + 16);
  if (*(_BYTE *)(a1 + 312))
    v57 /= (int)v35 * (int)v34 / *(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 316);
  if ((_DWORD)v35)
    v58 = v35;
  else
    v58 = v23;
  if ((_DWORD)v34)
    v59 = v34;
  else
    v59 = v22;
  if (!(_DWORD)v58)
  {
    v294 = "generic_crop_and_resize_kernel: zero output width";
    goto LABEL_370;
  }
  v60 = v321;
  if (!(_DWORD)v59)
  {
    v294 = "generic_crop_and_resize_kernel: zero output height";
    goto LABEL_370;
  }
  if (!v23)
  {
    v294 = "generic_crop_and_resize_kernel: zero input width";
    goto LABEL_370;
  }
  v310 = v57;
  v308 = v53;
  if (!v22)
  {
    v294 = "generic_crop_and_resize_kernel: zero input height";
LABEL_370:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v294);
  }
  v61 = *(unsigned int *)(v348 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v346, v58, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v340, v59, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v336, v58, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v334, v58, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v332, v59, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v330, v59, 1, 1, 1);
  v62 = v58 * v59;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v328, v58 * v59, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v326, v58 * v59, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v324, v58 * v59, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v322, v58 * v59, 1, 1, 1);
  v67 = 0;
  if (v7 == 48)
  {
    v68 = 0;
    if (*(_DWORD *)(a1 + 280) != 3)
      goto LABEL_91;
    v69 = *v317;
    v70 = (*v317)[4];
    if (!v70 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70))
    {
      v68 = 0;
      v67 = 0;
LABEL_78:
      v60 = v321;
      goto LABEL_91;
    }
    v284 = v69[4];
    v68 = *(_QWORD *)(v284 + 160);
    v67 = *(std::__shared_weak_count **)(v284 + 168);
    if (!v67)
      goto LABEL_78;
    v285 = *(_QWORD *)(v284 + 160);
    v286 = (unint64_t *)&v67->__shared_owners_;
    v60 = v321;
    do
      v287 = __ldxr(v286);
    while (__stxr(v287 + 1, v286));
    v68 = v285;
  }
  else
  {
    v68 = 0;
  }
LABEL_91:
  v296 = v67;
  v297 = v68;
  if (v60 >= 1)
  {
    v77 = 0;
    v78 = 0;
    v79 = v23 - 1;
    v80 = (float)(v23 - 1);
    v81 = v22 - 1;
    if (*(_BYTE *)(a1 + 296))
      v82 = (float)v79;
    else
      v82 = 1.0;
    v300 = v22 - 1;
    v83 = (float)v81;
    if (*(_BYTE *)(a1 + 296))
      v84 = (float)v81;
    else
      v84 = 1.0;
    v85 = (float)(v58 - 1);
    v86 = (float)(v59 - 1);
    v301 = v350;
    v87 = (float)(int)v59;
    v318 = v346;
    v88 = v340;
    v89 = v336;
    v90 = v334;
    v91 = v332;
    v92 = v330;
    v93 = v319;
    if (v7 != 32)
      v93 = 0;
    v303 = v93;
    v94 = v22 * v23;
    v315 = v62;
    v304 = v310 * v62;
    v307 = v310 * v62;
    v302 = v60;
    v306 = v22 * v23 * v310;
    v95 = (v58 + 1) & 0x1FFFFFFFELL;
    v96 = (uint64x2_t)vdupq_n_s64(v58 - 1);
    *(float *)v63.i32 = (float)v23 / (float)(int)v58;
    v97 = (float32x2_t)vdup_lane_s32(v63, 0);
    v98 = (uint64x2_t)vdupq_n_s64(v59 - 1);
    v99 = (v59 + 1) & 0x1FFFFFFFELL;
    *(float *)v64.i32 = (float)v22 / (float)(int)v59;
    v100 = (float32x2_t)vdup_lane_s32(v64, 0);
    v320 = 4 * (int)v58;
    v101 = (float)(v59 - v22) / v87;
    v311 = v61;
    while (1)
    {
      v102 = *(_DWORD *)(a1 + 280);
      if (v102 == 3)
        break;
      LODWORD(v65) = 0;
      v103 = v83;
      v4.i32[0] = 0;
      v104 = (float)(v23 - 1);
      if (!v102)
      {
        if ((v299 & 1) != 0)
        {
          v105 = 4 * v77;
          v106 = 0.0;
        }
        else
        {
          v105 = 5 * v77 + 1;
          v106 = *(float *)(*(_QWORD *)(v301 + 24) + 4 * (5 * v77));
        }
LABEL_110:
        v78 = (int)v106;
        if ((int)v61 <= (int)v78)
          Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: RoI batch id greater than input batch size");
        switch(*(_DWORD *)(a1 + 304))
        {
          case 0:
            v107 = *(_QWORD *)(v301 + 24) + 4 * v105;
            LODWORD(v65) = *(_DWORD *)v107;
            v66.i32[0] = *(_DWORD *)(v107 + 4);
            v108 = *(float *)(v107 + 8);
            v5.i32[0] = *(_DWORD *)(v107 + 12);
            break;
          case 1:
            v118 = *(_QWORD *)(v301 + 24) + 4 * v105;
            v66.i32[0] = *(_DWORD *)v118;
            LODWORD(v65) = *(_DWORD *)(v118 + 4);
            v5.i32[0] = *(_DWORD *)(v118 + 8);
            v108 = *(float *)(v118 + 12);
            break;
          case 2:
            v109 = (float *)(*(_QWORD *)(v301 + 24) + 4 * v105);
            v110 = *v109;
            *(double *)v5.i64 = v109[2];
            v65 = v110 + *(double *)v5.i64 * -0.5;
            *(float *)&v65 = v65;
            v111 = v109[1];
            v112 = v109[3];
            *(double *)v66.i64 = v111 + v112 * -0.5;
            *(float *)v66.i32 = *(double *)v66.i64;
            v108 = v110 + *(double *)v5.i64 * 0.5;
            *(double *)v4.i64 = v111 + v112 * 0.5;
            *(float *)v5.i32 = *(double *)v4.i64;
            break;
          case 3:
            v113 = (float *)(*(_QWORD *)(v301 + 24) + 4 * v105);
            v114 = *v113;
            v115 = v113[2];
            *(float *)v66.i32 = v114 + v115 * -0.5;
            v116 = v113[1];
            v117 = v113[3];
            v65 = v116 + v117 * -0.5;
            *(float *)&v65 = v65;
            *(double *)v4.i64 = v114 + v115 * 0.5;
            *(float *)v5.i32 = *(double *)v4.i64;
            v108 = v116 + v117 * 0.5;
            break;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_crop_and_resize_kernel: Invalid crop index mode");
        }
        v119 = *(float *)(a1 + 308);
        *(float *)&v65 = *(float *)&v65 * (float)(v84 * v119);
        v103 = v108 * (float)(v84 * v119);
        v120 = v82 * v119;
        *(float *)v4.i32 = *(float *)v66.i32 * (float)(v82 * v119);
        v104 = *(float *)v5.i32 * v120;
      }
      v66.i32[0] = 1.0;
      v5.i32[0] = 1.0;
      if ((_DWORD)v58 != 1)
        *(float *)v5.i32 = (float)(v104 - *(float *)v4.i32) / v85;
      if ((_DWORD)v59 != 1)
        *(float *)v66.i32 = (float)(v103 - *(float *)&v65) / v86;
      v121 = *(unsigned int *)(a1 + 300);
      switch((int)v121)
      {
        case 0:
          v122 = (float)(*(float *)&v65 + v103) * 0.5;
          if ((_DWORD)v59 == 1)
            *(float *)&v65 = v122;
          if ((int)v58 >= 1)
          {
            v123 = 0;
            if ((_DWORD)v58 == 1)
              *(float *)v4.i32 = (float)(*(float *)v4.i32 + v104) * 0.5;
            v124 = *(_QWORD *)(v318 + 16);
            v125 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            v5 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v126 = vmovn_s64((int64x2_t)vcgeq_u64(v96, (uint64x2_t)v5));
              v127.i32[0] = v123;
              v127.i32[1] = v123 + 1;
              v128 = vmla_f32(*(float32x2_t *)v4.i8, v125, vcvt_f32_s32(v127));
              if ((v126.i8[0] & 1) != 0)
                *(_DWORD *)(v124 + 4 * v123) = v128.i32[0];
              if ((v126.i8[4] & 1) != 0)
                *(_DWORD *)(v124 + 4 * v123 + 4) = v128.i32[1];
              v123 += 2;
              v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v95 != v123);
          }
          if ((int)v59 >= 1)
          {
            v129 = 0;
            v130 = *((_QWORD *)v88 + 2);
            *(int32x2_t *)v66.i8 = vdup_lane_s32(*(int32x2_t *)v66.i8, 0);
            v65 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v65, 0));
            v131 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v132 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)v131));
              v133.i32[0] = v129;
              v133.i32[1] = v129 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)&v65, *(float32x2_t *)v66.i8, vcvt_f32_s32(v133));
              if ((v132.i8[0] & 1) != 0)
                *(_DWORD *)(v130 + 4 * v129) = v5.i32[0];
              if ((v132.i8[4] & 1) != 0)
                *(_DWORD *)(v130 + 4 * v129 + 4) = v5.i32[1];
              v129 += 2;
              v4 = vdupq_n_s64(2uLL);
              v131 = vaddq_s64(v131, v4);
            }
            while (v99 != v129);
          }
          break;
        case 1:
          if ((int)v58 >= 1)
          {
            v169 = 0;
            v170 = *(_QWORD *)(v318 + 16);
            v171 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            v5 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v172 = vmovn_s64((int64x2_t)vcgeq_u64(v96, (uint64x2_t)v5));
              v173.i32[0] = v169;
              v173.i32[1] = v169 + 1;
              v174 = vmla_f32(*(float32x2_t *)v4.i8, v171, vcvt_f32_s32(v173));
              if ((v172.i8[0] & 1) != 0)
                *(_DWORD *)(v170 + 4 * v169) = v174.i32[0];
              if ((v172.i8[4] & 1) != 0)
                *(_DWORD *)(v170 + 4 * v169 + 4) = v174.i32[1];
              v169 += 2;
              v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v95 != v169);
          }
          if ((int)v59 >= 1)
          {
            v175 = 0;
            v176 = *((_QWORD *)v88 + 2);
            *(int32x2_t *)v66.i8 = vdup_lane_s32(*(int32x2_t *)v66.i8, 0);
            v65 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v65, 0));
            v177 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v178 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)v177));
              v179.i32[0] = v175;
              v179.i32[1] = v175 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)&v65, *(float32x2_t *)v66.i8, vcvt_f32_s32(v179));
              if ((v178.i8[0] & 1) != 0)
                *(_DWORD *)(v176 + 4 * v175) = v5.i32[0];
              if ((v178.i8[4] & 1) != 0)
                *(_DWORD *)(v176 + 4 * v175 + 4) = v5.i32[1];
              v175 += 2;
              v4 = vdupq_n_s64(2uLL);
              v177 = vaddq_s64(v177, v4);
            }
            while (v99 != v175);
          }
          break;
        case 2:
          if ((_DWORD)v58 != 1)
            *(float *)v5.i32 = (float)((float)((float)((float)(v58 - v23) / (float)(int)v58) + v104) - *(float *)v4.i32)
                             / v85;
          if ((_DWORD)v59 != 1)
            *(float *)v66.i32 = (float)((float)(v101 + v103) - *(float *)&v65) / v86;
          if ((int)v58 >= 1)
          {
            v144 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            v5.i64[0] = 0x100000000;
            v145 = (int64x2_t)xmmword_191A82A80;
            v146 = (float *)(*(_QWORD *)(v318 + 16) + 4);
            v147 = v95;
            do
            {
              v148 = vmovn_s64((int64x2_t)vcgeq_u64(v96, (uint64x2_t)v145));
              v149 = vmla_f32(*(float32x2_t *)v4.i8, v144, vcvt_f32_s32(*(int32x2_t *)v5.i8));
              if ((v148.i8[0] & 1) != 0)
              {
                if (v149.f32[0] <= v80)
                  v150 = v149.f32[0];
                else
                  v150 = (float)(v23 - 1);
                *(v146 - 1) = v150;
              }
              if ((v148.i8[4] & 1) != 0)
              {
                v149.i32[0] = v149.i32[1];
                if (v149.f32[1] > v80)
                  v149.f32[0] = (float)(v23 - 1);
                *v146 = v149.f32[0];
              }
              v145 = vaddq_s64(v145, vdupq_n_s64(2uLL));
              *(int32x2_t *)v5.i8 = vadd_s32(*(int32x2_t *)v5.i8, (int32x2_t)0x200000002);
              v146 += 2;
              v147 -= 2;
            }
            while (v147);
          }
          if ((int)v59 >= 1)
          {
            *(int32x2_t *)v66.i8 = vdup_lane_s32(*(int32x2_t *)v66.i8, 0);
            v65 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v65, 0));
            v151 = (int32x2_t)0x100000000;
            v4 = (int64x2_t)xmmword_191A82A80;
            v152 = (float *)(*((_QWORD *)v88 + 2) + 4);
            v153 = v99;
            do
            {
              v154 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)v4));
              v155 = vmla_f32(*(float32x2_t *)&v65, *(float32x2_t *)v66.i8, vcvt_f32_s32(v151));
              if ((v154.i8[0] & 1) != 0)
              {
                if (v155.f32[0] <= v83)
                  v156 = v155.f32[0];
                else
                  v156 = v83;
                *(v152 - 1) = v156;
              }
              if ((v154.i8[4] & 1) != 0)
              {
                v155.i32[0] = v155.i32[1];
                if (v155.f32[1] > v83)
                  v155.f32[0] = v83;
                *v152 = v155.f32[0];
              }
              v5 = vdupq_n_s64(2uLL);
              v4 = vaddq_s64(v4, v5);
              v151 = vadd_s32(v151, (int32x2_t)0x200000002);
              v152 += 2;
              v153 -= 2;
            }
            while (v153);
          }
          break;
        case 3:
          if ((int)v58 >= 1)
          {
            v157 = 0;
            *(float *)v66.i32 = fmaxf(v104 - *(float *)v4.i32, 1.0) / (float)(int)v58;
            v158 = *(float *)v4.i32 + *(float *)v66.i32 * 0.5;
            *(float *)&v158 = v158;
            v159 = *(_QWORD *)(v318 + 16);
            *(int32x2_t *)v66.i8 = vdup_lane_s32(*(int32x2_t *)v66.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)&v158, 0);
            v5 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v160 = vmovn_s64((int64x2_t)vcgeq_u64(v96, (uint64x2_t)v5));
              v161.i32[0] = v157;
              v161.i32[1] = v157 + 1;
              v162 = vmla_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v66.i8, vcvt_f32_s32(v161));
              if ((v160.i8[0] & 1) != 0)
                *(_DWORD *)(v159 + 4 * v157) = v162.i32[0];
              if ((v160.i8[4] & 1) != 0)
                *(_DWORD *)(v159 + 4 * v157 + 4) = v162.i32[1];
              v157 += 2;
              v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v95 != v157);
          }
          if ((int)v59 >= 1)
          {
            v163 = 0;
            *(float *)v66.i32 = fmaxf(v103 - *(float *)&v65, 1.0) / v87;
            v164 = *(float *)v66.i32;
            *(float *)&v164 = *(float *)&v65 + *(float *)v66.i32 * 0.5;
            v165 = *((_QWORD *)v88 + 2);
            v65 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v66.i8, 0));
            *(int32x2_t *)v66.i8 = vdup_lane_s32(*(int32x2_t *)&v164, 0);
            v166 = (int64x2_t)xmmword_191A82A80;
            do
            {
              v167 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)v166));
              v168.i32[0] = v163;
              v168.i32[1] = v163 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)&v65, vcvt_f32_s32(v168));
              if ((v167.i8[0] & 1) != 0)
                *(_DWORD *)(v165 + 4 * v163) = v5.i32[0];
              if ((v167.i8[4] & 1) != 0)
                *(_DWORD *)(v165 + 4 * v163 + 4) = v5.i32[1];
              v163 += 2;
              v4 = vdupq_n_s64(2uLL);
              v166 = vaddq_s64(v166, v4);
            }
            while (v99 != v163);
          }
          break;
        case 4:
          if ((int)v58 >= 1)
          {
            *(_QWORD *)&v65 = 0x100000000;
            v66 = (int64x2_t)xmmword_191A82A80;
            v134 = (float *)(*(_QWORD *)(v318 + 16) + 4);
            v135 = v95;
            do
            {
              v136 = vmovn_s64((int64x2_t)vcgeq_u64(v96, (uint64x2_t)v66));
              *(float32x2_t *)v5.i8 = vmla_f32((float32x2_t)0xBF000000BF000000, v97, vadd_f32(vcvt_f32_s32(*(int32x2_t *)&v65), (float32x2_t)0x3F0000003F000000));
              *(float32x2_t *)v4.i8 = vmaxnm_f32(*(float32x2_t *)v5.i8, 0);
              if ((v136.i8[0] & 1) != 0)
              {
                if (*(float *)v4.i32 <= v80)
                  v137 = *(float *)v4.i32;
                else
                  v137 = (float)(v23 - 1);
                *(v134 - 1) = v137;
              }
              if ((v136.i8[4] & 1) != 0)
              {
                v138 = *(float *)&v4.i32[1];
                if (*(float *)&v4.i32[1] > v80)
                  v138 = (float)(v23 - 1);
                *v134 = v138;
              }
              v66 = vaddq_s64(v66, vdupq_n_s64(2uLL));
              v65 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)&v65, (int32x2_t)0x200000002));
              v134 += 2;
              v135 -= 2;
            }
            while (v135);
          }
          if ((int)v59 >= 1)
          {
            *(_QWORD *)&v65 = 0x100000000;
            v66 = (int64x2_t)xmmword_191A82A80;
            v139 = (float *)(*((_QWORD *)v88 + 2) + 4);
            v140 = v99;
            do
            {
              v141 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)v66));
              *(float32x2_t *)v5.i8 = vmla_f32((float32x2_t)0xBF000000BF000000, v100, vadd_f32(vcvt_f32_s32(*(int32x2_t *)&v65), (float32x2_t)0x3F0000003F000000));
              *(float32x2_t *)v4.i8 = vmaxnm_f32(*(float32x2_t *)v5.i8, 0);
              if ((v141.i8[0] & 1) != 0)
              {
                if (*(float *)v4.i32 <= v83)
                  v142 = *(float *)v4.i32;
                else
                  v142 = v83;
                *(v139 - 1) = v142;
              }
              if ((v141.i8[4] & 1) != 0)
              {
                v143 = *(float *)&v4.i32[1];
                if (*(float *)&v4.i32[1] > v83)
                  v143 = v83;
                *v139 = v143;
              }
              v66 = vaddq_s64(v66, vdupq_n_s64(2uLL));
              v65 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)&v65, (int32x2_t)0x200000002));
              v139 += 2;
              v140 -= 2;
            }
            while (v140);
          }
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_crop_and_resize_kernel: Invalid grid sampling mode. Got %d", v121);
      }
      if ((int)v58 >= 1)
      {
        v180 = *(float **)(v318 + 16);
        v181 = *(unsigned int **)(v89 + 16);
        v182 = v58;
        v183 = *(int **)(v90 + 16);
        do
        {
          v184 = *v180++;
          v185 = vcvtms_s32_f32(v184);
          *v181++ = v185;
          if (v79 >= (int)(v185 + 1))
            v186 = v185 + 1;
          else
            v186 = v79;
          *v183++ = v186;
          --v182;
        }
        while (v182);
      }
      if ((int)v59 >= 1)
      {
        v187 = (float *)*((_QWORD *)v88 + 2);
        v188 = *(unsigned int **)(v91 + 16);
        v189 = v59;
        v190 = *(unsigned int **)(v92 + 16);
        do
        {
          v191 = *v187++;
          v192 = vcvtms_s32_f32(v191);
          *v188++ = v192;
          if (v300 >= (int)(v192 + 1))
            v193 = v192 + 1;
          else
            v193 = v300;
          *v190++ = v193;
          --v189;
        }
        while (v189);
        v194 = 0;
        v195 = 0;
        v196 = v328;
        v197 = v324;
        v198 = v322;
        v199 = v326;
        do
        {
          if ((int)v58 >= 1)
          {
            v200 = *(float **)(v318 + 16);
            v201 = *(int **)(v89 + 16);
            v202 = *((_QWORD *)v88 + 2);
            v203 = (float)*(int *)(*(_QWORD *)(v91 + 16) + 4 * v195);
            v204 = (float *)(*(_QWORD *)(v199 + 16) + v194);
            v205 = (float *)(*(_QWORD *)(v198 + 16) + v194);
            v206 = (float *)(*(_QWORD *)(v197 + 16) + v194);
            v207 = (float *)(*(_QWORD *)(v196 + 16) + v194);
            v208 = v58;
            do
            {
              v209 = *v200++;
              v210 = v209;
              v211 = *v201++;
              v212 = v210 - (float)v211;
              v213 = *(float *)(v202 + 4 * v195) - v203;
              *v207++ = (float)(1.0 - v212) * (float)(1.0 - v213);
              *v206++ = v212 * v213;
              *v205++ = v212 * (float)(1.0 - v213);
              *v204++ = (float)(1.0 - v212) * v213;
              --v208;
            }
            while (v208);
          }
          ++v195;
          v194 += v320;
        }
        while (v195 != v59);
      }
      if ((v303 & 1) != 0)
      {
        v312 = 1;
        v214 = v304;
        LODWORD(v61) = v311;
      }
      else
      {
        v312 = *(_DWORD *)(a1 + 280) == 3;
        LODWORD(v61) = v311;
        if (*(_DWORD *)(a1 + 280) == 3)
          v215 = 1;
        else
          v215 = v311;
        v214 = v215 * v304;
      }
      v305 = v77;
      if ((int)v61 < 1)
      {
        v217 = v78;
      }
      else
      {
        v216 = 0;
        v309 = v214 * (int)v77;
        do
        {
          LODWORD(v217) = v216;
          if (v312)
          {
            v217 = v78;
            if (v216)
              break;
          }
          v313 = v217;
          v314 = v216;
          if (v310 >= 1)
          {
            v218 = 0;
            v316 = *(_QWORD *)(v308 + 24) + 4 * v309 + 4 * v216 * v307;
            do
            {
              if ((int)v59 >= 1)
              {
                v219 = 0;
                v220 = 0;
                for (i = 0; i != v59; ++i)
                {
                  if ((int)v58 >= 1)
                  {
                    v222 = 0;
                    v223 = *(unsigned __int8 *)(a1 + 312);
                    v224 = *(_QWORD *)(v318 + 16);
                    v225 = v328;
                    v226 = v322;
                    v227 = v326;
                    v228 = v324;
                    do
                    {
                      v229 = v218;
                      if (v223)
                        v229 = (int)v222 / *(_DWORD *)(a1 + 316)
                             + ((int)i / *(_DWORD *)(a1 + 316) + (int)v59 / *(_DWORD *)(a1 + 316) * v218)
                             * ((int)v58
                              / *(_DWORD *)(a1 + 316));
                      v230 = *(float *)(v224 + 4 * v222);
                      if (v230 <= v80
                        && (v233 = *(float *)(*((_QWORD *)v88 + 2) + 4 * i), v233 >= 0.0)
                        && (v230 >= 0.0 ? (v234 = v233 <= v83) : (v234 = 0), v234))
                      {
                        v235 = *(_QWORD *)(v56 + 24) + 4 * (int)(v306 * v313) + 4 * v229 * v94;
                        v236 = *(_DWORD *)(*(_QWORD *)(v91 + 16) + 4 * i) * v23;
                        v237 = *(_DWORD *)(*(_QWORD *)(v89 + 16) + 4 * v222);
                        v238 = *(float *)(v235 + 4 * (v237 + v236));
                        v239 = *(_DWORD *)(*(_QWORD *)(v90 + 16) + 4 * v222);
                        v240 = *(float *)(v235 + 4 * (v239 + v236));
                        v241 = *(_DWORD *)(*(_QWORD *)(v92 + 16) + 4 * i) * v23;
                        v242 = *(float *)(v235 + 4 * (v241 + v239));
                        v232 = v220 + v222;
                        v231 = (float)((float)((float)(v240 * *(float *)(*(_QWORD *)(v226 + 16) + v219 + 4 * v222))
                                             + (float)(v238 * *(float *)(*(_QWORD *)(v225 + 16) + v219 + 4 * v222)))
                                     + (float)(*(float *)(v235 + 4 * (v241 + v237))
                                             * *(float *)(*(_QWORD *)(v227 + 16) + v219 + 4 * v222)))
                             + (float)(v242 * *(float *)(*(_QWORD *)(v228 + 16) + v219 + 4 * v222));
                      }
                      else
                      {
                        v231 = *(float *)(a1 + 320);
                        v232 = v222 + i * (int)v58;
                      }
                      *(float *)(v316 + 4 * v218 * v315 + 4 * v232) = v231;
                      ++v222;
                    }
                    while (v58 != v222);
                  }
                  v220 += (int)v58;
                  v219 += v320;
                }
              }
              ++v218;
            }
            while (v218 != v310);
          }
          v216 = v314 + 1;
          v217 = v313;
          v78 = v313;
          LODWORD(v61) = v311;
        }
        while (v314 + 1 != v311);
      }
      v77 = v305 + 1;
      v78 = v217;
      v95 = (v58 + 1) & 0x1FFFFFFFELL;
      v79 = v23 - 1;
      v99 = (v59 + 1) & 0x1FFFFFFFELL;
      if (v305 + 1 == v302)
        goto LABEL_275;
    }
    if (v297)
      v106 = *(float *)(*(_QWORD *)(v297 + 24) + 4 * v77);
    else
      v106 = (float)(int)v77;
    v105 = v77 * v298;
    goto LABEL_110;
  }
LABEL_275:
  if (v296)
  {
    v243 = (unint64_t *)&v296->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v245 = v323;
  if (v323)
  {
    v246 = (unint64_t *)&v323->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v325;
  if (v325)
  {
    v249 = (unint64_t *)&v325->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v327;
  if (v327)
  {
    v252 = (unint64_t *)&v327->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  v254 = v329;
  if (v329)
  {
    v255 = (unint64_t *)&v329->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = v331;
  if (v331)
  {
    v258 = (unint64_t *)&v331->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = v333;
  if (v333)
  {
    v261 = (unint64_t *)&v333->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v335;
  if (v335)
  {
    v264 = (unint64_t *)&v335->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = v337;
  if (v337)
  {
    v267 = (unint64_t *)&v337->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = v341;
  if (v341)
  {
    v270 = (unint64_t *)&v341->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = v347;
  if (v347)
  {
    v273 = (unint64_t *)&v347->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = v343;
  if (v343)
  {
    v276 = (unint64_t *)&v343->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v349;
  if (v349)
  {
    v279 = (unint64_t *)&v349->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
  if (*((_QWORD *)&v350 + 1))
  {
    v282 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
}

void sub_1917E0130(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void Espresso::topk_kernel_cpu::~topk_kernel_cpu(Espresso::topk_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::topk_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t i;
  void *v30;
  _QWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const float *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD *v85;
  float *v86;
  unint64_t v87;
  float *v88;
  uint64_t v89;
  float *v90;
  int v91;
  float v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  int v98;
  _QWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  BOOL v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  float v112;
  unint64_t v114;
  int v115;
  float *v117;
  unint64_t v118;
  float *v119;
  uint64_t v120;
  float *v121;
  int v122;
  float v123;
  int v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  int v129;
  _QWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  float v135;
  BOOL v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  float v143;
  unint64_t v145;
  int v146;
  float *v148;
  float *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  float *v153;
  int v154;
  float v155;
  float v156;
  unint64_t v157;
  float *v158;
  uint64_t k;
  float v160;
  float *m;
  float v162;
  float *v163;
  float v164;
  float *v165;
  uint64_t v166;
  int v167;
  float *v168;
  float v169;
  int v170;
  int v171;
  float *v172;
  float v173;
  uint64_t v174;
  float v175;
  float *v176;
  float v177;
  float v178;
  int v179;
  float v180;
  int v181;
  float v182;
  float j;
  float v184;
  float v185;
  float v186;
  BOOL v187;
  int v188;
  float *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  float *v193;
  int v194;
  float v195;
  float v196;
  unint64_t v197;
  float *v198;
  uint64_t n;
  float v200;
  float *ii;
  float v202;
  float *v203;
  float v204;
  float *v205;
  uint64_t v206;
  int v207;
  float *v208;
  float v209;
  int v210;
  int v211;
  float *v212;
  float v213;
  uint64_t v214;
  float v215;
  float *v216;
  float v217;
  float v218;
  int v219;
  float v220;
  int v221;
  float v222;
  float jj;
  float v224;
  float v225;
  float v226;
  BOOL v227;
  int v228;
  float v229;
  float v230;
  BOOL v231;
  int v232;
  int v233;
  float *v234;
  uint64_t v235;
  float *v236;
  int v237;
  int v238;
  float *v239;
  uint64_t v240;
  float *v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  signed int v249;
  uint64_t v250;
  BOOL v251;
  unint64_t *p_shared_owners;
  unint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  BOOL v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  _DWORD *v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  _DWORD *v270;
  int v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  float *v282;
  uint64_t v283;
  _DWORD *v284;
  _DWORD *v285;
  float *v286;
  unint64_t v287;
  float *v288;
  float *v289;
  float *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  float v295;
  int v296;
  float *v297;
  float *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  float *v303;
  float v304;
  float v305;
  float v306;
  int v307;
  float *v308;
  float *v309;
  float *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  float *v317;
  uint64_t v318;
  float *v319;
  int v320;
  float v321;
  float *v322;
  float *v323;
  float v324;
  float v325;
  int v326;
  float *v327;
  float *v328;
  float v329;
  float *v330;
  float v331;
  float v332;
  float v333;
  float v334;
  int v335;
  float v336;
  int v337;
  float *v338;
  float v339;
  float v340;
  float *v341;
  float *v342;
  float v343;
  float v344;
  float v345;
  int v346;
  int v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  int v355;
  float *v356;
  float v357;
  float v358;
  float *v359;
  float *v360;
  float *v361;
  float v362;
  float v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  float *v375;
  uint64_t v376;
  _DWORD *v377;
  uint64_t v378;
  float *v379;
  unint64_t v380;
  float *v381;
  float *v382;
  float *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  float v388;
  int v389;
  float *v390;
  float *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  float *v396;
  float v397;
  float v398;
  float v399;
  int v400;
  float *v401;
  float *v402;
  float *v403;
  unint64_t v404;
  uint64_t v405;
  float *v406;
  int v407;
  float v408;
  float *v409;
  float *v410;
  float v411;
  float v412;
  int v413;
  float *v414;
  float *v415;
  float v416;
  float *v417;
  float v418;
  float v419;
  float v420;
  float v421;
  int v422;
  float v423;
  int v424;
  float *v425;
  float v426;
  float v427;
  float *v428;
  float *v429;
  float v430;
  float v431;
  float v432;
  int v433;
  int v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  int v442;
  float *v443;
  float v444;
  float v445;
  float *v446;
  float *v447;
  float *v448;
  float v449;
  float v450;
  int v451;
  uint64_t v452;
  int v453;
  int *v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  const char *v463;
  int v464;
  int v465;
  std::__shared_weak_count *v466;
  std::__shared_weak_count *v467;
  __int128 v468;
  int v469;
  int v470;
  int v471;
  unint64_t v472;
  int v473;
  unint64_t v474;
  int v475;
  unint64_t v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t **v504;
  uint64_t v506;
  uint64_t v507;
  __int128 v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  char *v512;
  std::__shared_weak_count *v513;
  char *v514;
  std::__shared_weak_count *v515;
  vDSP_Length __I;
  vDSP_Length v517;
  vDSP_Length v518;
  char *v519;
  std::__shared_weak_count *v520;
  int v521;
  signed int v522;
  __int128 v523;
  __int128 v524;
  uint64_t v525;
  void *__p;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  std::__shared_weak_count *v530;
  vDSP_Length *p_I;
  char v532;
  __int128 v533[2];
  void *v534;
  void *v535;
  char v536[64];
  __int128 v537;

  *(_QWORD *)&v537 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v9 = *(std::__shared_weak_count **)(*v7 + 168);
    v501 = *(_QWORD *)(*v7 + 160);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v253 = __ldxr(p_shared_owners);
      while (__stxr(v253 + 1, p_shared_owners));
    }
  }
  else
  {
    v501 = 0;
    v9 = 0;
  }
  v10 = *a3;
  v11 = **a3;
  v508 = 0u;
  if (v11)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
    {
      v12 = *(_OWORD *)(*v10 + 160);
      v508 = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
  }
  v467 = v9;
  if (*(_BYTE *)(a1 + 294)
    && (v15 = *a3, (v16 = (*a3)[2]) != 0)
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16))
  {
    v257 = v15[2];
    v18 = *(_QWORD *)(v257 + 160);
    v17 = *(std::__shared_weak_count **)(v257 + 168);
    if (v17)
    {
      v258 = (unint64_t *)&v17->__shared_owners_;
      do
        v259 = __ldxr(v258);
      while (__stxr(v259 + 1, v258));
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = *a4;
  v510 = *(_DWORD *)(a1 + 280);
  if (v510 == -1)
  {
    if ((char *)a4[1] - (char *)v19 == 16)
    {
      if (*(_BYTE *)(a1 + 293))
      {
        if (*(_BYTE *)(a1 + 285))
        {
          Espresso::abstract_blob_container::shape((char *)v533, *v19);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v523, (const Espresso::layer_shape *)v533, 0);
          if (v534)
          {
            v535 = v534;
            operator delete(v534);
          }
          v510 = *((_DWORD *)&v523 + *(_DWORD *)(a1 + 288) + (DWORD1(v524) & (*(int *)(a1 + 288) >> 31)));
          v19 = *a4;
          goto LABEL_20;
        }
        v463 = "topk_kernel_cpu with k == -1 (sort) requires single_axis_topk == true.";
      }
      else
      {
        v463 = "topk_kernel_cpu with k == -1 (sort) requires sort == true.";
      }
    }
    else
    {
      v463 = "topk_kernel_cpu with k == -1 (sort) does not support support dynamic k.";
    }
LABEL_721:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v463);
  }
LABEL_20:
  if ((char *)a4[1] - (char *)v19 != 32)
  {
    v468 = v508;
    goto LABEL_88;
  }
  if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
  {
    v463 = "dynamic topk requires interpreter";
    goto LABEL_721;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2]);
  v20 = v19[2];
  v21 = *(_QWORD *)(v20 + 160);
  v22 = *(std::__shared_weak_count **)(v20 + 168);
  v529 = v21;
  v530 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (int)(float)(**(float **)(v21 + 24) + 0.5);
  v26 = *(_DWORD *)(a1 + 280);
  if (v25 < 1)
    v25 = *(_DWORD *)(a1 + 280);
  v510 = v25;
  *(_DWORD *)(a1 + 280) = v25;
  Espresso::abstract_blob_container::shape((char *)v533, **a4);
  Espresso::abstract_blob_container::shape(v536, (*a4)[2]);
  __I = 0;
  v517 = 0;
  v518 = 0;
  p_I = &__I;
  v532 = 0;
  __I = (vDSP_Length)operator new(0x80uLL);
  v517 = __I;
  v518 = __I + 128;
  v517 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v518, v533, &v537, __I);
  (*(void (**)(char **__return_ptr, uint64_t, vDSP_Length *))(*(_QWORD *)a1 + 64))(&v519, a1, &__I);
  v27 = *((_QWORD *)v519 + 4);
  v28 = *((_OWORD *)v519 + 1);
  v523 = *(_OWORD *)v519;
  v524 = v28;
  v525 = v27;
  __p = 0;
  v527 = 0;
  v528 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v519 + 5), *((_QWORD *)v519 + 6), (uint64_t)(*((_QWORD *)v519 + 6) - *((_QWORD *)v519 + 5)) >> 2);
  p_I = (vDSP_Length *)&v519;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_I);
  p_I = &__I;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_I);
  for (i = 0; i != -128; i -= 64)
  {
    v30 = *(void **)&v536[i + 40];
    if (v30)
    {
      *(_QWORD *)&v536[i + 48] = v30;
      operator delete(v30);
    }
  }
  *(_DWORD *)(a1 + 280) = v26;
  v31 = operator new(0x98uLL);
  v31[1] = 0;
  v32 = v31 + 1;
  v31[2] = 0;
  *v31 = &off_1E2DBE998;
  *((_OWORD *)v31 + 4) = 0u;
  *((_OWORD *)v31 + 5) = 0u;
  *((_OWORD *)v31 + 2) = 0u;
  *((_OWORD *)v31 + 3) = 0u;
  *((_OWORD *)v31 + 6) = 0u;
  *((_OWORD *)v31 + 7) = 0u;
  *((_OWORD *)v31 + 8) = 0u;
  v31[17] = 0;
  v31[18] = 0;
  *((_DWORD *)v31 + 12) = 1065353216;
  v31[7] = 0x1FFFFFFFFLL;
  v31[12] = 0;
  v31[13] = 0;
  v31[8] = 0;
  v31[9] = 0;
  *((_BYTE *)v31 + 88) = 0;
  v31[3] = &off_1E2DA0BF0;
  v31[10] = 0;
  v31[15] = 0;
  v31[16] = 0;
  *((_BYTE *)v31 + 144) = 0;
  v519 = (char *)(v31 + 3);
  v520 = (std::__shared_weak_count *)v31;
  *((_BYTE *)v31 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
  v33 = **a3;
  if (v33)
  {
    Espresso::abstract_blob_container::shape((char *)v533, v33);
    v34 = Espresso::layer_shape::operator==((uint64_t)&v523, (uint64_t)v533);
    if (v534)
    {
      v535 = v534;
      operator delete(v534);
    }
    if (!v34)
    {
      v35 = **a3;
      v514 = (char *)(v31 + 3);
      v515 = (std::__shared_weak_count *)v31;
      do
        v36 = __ldxr(v32);
      while (__stxr(v36 + 1, v32));
      (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v35 + 16))(v35, &v523, &v514);
      v37 = v515;
      if (v515)
      {
        v38 = (unint64_t *)&v515->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
  }
  v40 = (*a3)[2];
  if (v40)
  {
    Espresso::abstract_blob_container::shape((char *)v533, v40);
    v41 = Espresso::layer_shape::operator==((uint64_t)&v523, (uint64_t)v533);
    if (v534)
    {
      v535 = v534;
      operator delete(v534);
    }
    if (!v41)
    {
      v42 = (*a3)[2];
      v512 = v519;
      v513 = v520;
      if (v520)
      {
        v43 = (unint64_t *)&v520->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v42 + 16))(v42, &v523, &v512);
      v45 = v513;
      if (v513)
      {
        v46 = (unint64_t *)&v513->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
  }
  v48 = *a3;
  v49 = **a3;
  v468 = 0u;
  if (v49)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49))
    {
      v50 = *(_OWORD *)(*v48 + 160);
      v468 = v50;
      if (*((_QWORD *)&v50 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
    }
  }
  if (*((_QWORD *)&v508 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v508 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v508 + 1) + 16))(*((_QWORD *)&v508 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v508 + 1));
    }
  }
  if (*(_BYTE *)(a1 + 294))
  {
    v55 = *a3;
    v56 = (*a3)[2];
    if (v56 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56))
    {
      v262 = v55[2];
      v18 = *(_QWORD *)(v262 + 160);
      v57 = *(std::__shared_weak_count **)(v262 + 168);
      if (v57)
      {
        v263 = (unint64_t *)&v57->__shared_owners_;
        do
          v264 = __ldxr(v263);
        while (__stxr(v264 + 1, v263));
      }
    }
    else
    {
      v18 = 0;
      v57 = 0;
    }
    if (v17)
    {
      v58 = (unint64_t *)&v17->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v17 = v57;
  }
  v60 = v520;
  if (v520)
  {
    v61 = (unint64_t *)&v520->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (__p)
  {
    v527 = __p;
    operator delete(__p);
  }
  v63 = v530;
  if (v530)
  {
    v64 = (unint64_t *)&v530->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v19 = *a4;
LABEL_88:
  Espresso::abstract_blob_container::shape((char *)v533, *v19);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v523, (const Espresso::layer_shape *)v533, 0);
  if (v534)
  {
    v535 = v534;
    operator delete(v534);
  }
  Espresso::abstract_blob_container::shape((char *)v533, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v519, (const Espresso::layer_shape *)v533, 0);
  if (v534)
  {
    v535 = v534;
    operator delete(v534);
  }
  v502 = a1;
  v509 = v18;
  v466 = v17;
  if (!*(_BYTE *)(a1 + 285))
  {
    if (DWORD1(v524) < 4)
    {
      v251 = *(_BYTE *)(a1 + 284) != 0;
      v249 = v522;
      v250 = v522;
      if (!*(_BYTE *)(a1 + 284) && v522 > 3)
      {
        if (v522 == 5)
        {
          v254 = v521;
          v255 = HIDWORD(v520);
          v256 = (int)v520;
        }
        else
        {
          if (v522 != 4)
          {
            v507 = 0;
            goto LABEL_582;
          }
          v254 = HIDWORD(v520);
          v255 = (int)v520;
          v256 = SHIDWORD(v519);
        }
        v507 = v255 * (uint64_t)v254 * v256;
        goto LABEL_582;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 284))
      {
        std::vector<std::pair<float,int>>::vector(v533, *(int *)(**a4 + 16));
        v504 = a4;
        v265 = (_DWORD *)**a4;
        if ((int)v265[6] < 1)
          goto LABEL_697;
        v266 = 0;
        v267 = 0;
        v268 = 0;
        v485 = v265[2];
        v269 = v265[3] * v485;
        v270 = (_DWORD *)**a3;
        v483 = v270[2];
        v271 = v270[3] * v483;
        v272 = v510;
        v273 = (unint64_t)(v510 - 2) >> 1;
        v475 = v269 * v265[4];
        v274 = 4 * v269;
        v494 = 2 * v273;
        v497 = v273 + 1;
        v473 = v271 * v270[4];
        v464 = v473 * v270[5];
        v465 = v475 * v265[5];
        v275 = 4 * v271;
        v500 = v275;
        do
        {
          v469 = v268;
          v470 = v267;
          v471 = v266;
          if ((int)v265[5] >= 1)
          {
            v276 = 0;
            do
            {
              v481 = v276;
              v479 = v266;
              v477 = v267;
              if ((int)v265[3] >= 1)
              {
                v277 = 0;
                do
                {
                  v491 = v277;
                  v489 = v266;
                  v487 = v267;
                  if ((int)v265[2] >= 1)
                  {
                    v278 = 0;
                    v279 = v266;
                    v280 = v267;
                    do
                    {
                      v281 = v265[4];
                      v282 = *(float **)&v533[0];
                      if ((int)v281 >= 1)
                      {
                        v283 = 0;
                        v284 = (_DWORD *)(*(_QWORD *)&v533[0] + 4);
                        v285 = (_DWORD *)(*(_QWORD *)(v501 + 24) + 4 * (int)v280);
                        do
                        {
                          *(v284 - 1) = *v285;
                          *v284 = v283;
                          v284 += 2;
                          ++v283;
                          v285 = (_DWORD *)((char *)v285 + v274);
                        }
                        while (v281 != v283);
                      }
                      if (*(_BYTE *)(a1 + 293))
                      {
                        if (v510)
                        {
                          v286 = (float *)*((_QWORD *)&v533[0] + 1);
                          if (v510 >= 2)
                          {
                            v287 = v497;
                            v288 = &v282[v494];
                            do
                            {
                              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v282, v272, v288);
                              v288 -= 2;
                              --v287;
                            }
                            while (v287);
                          }
                          v289 = &v282[2 * v272];
                          if (v289 != v286)
                          {
                            v290 = &v282[2 * v272];
                            do
                            {
                              v291 = *(_QWORD *)v290;
                              v292 = *(_QWORD *)v282;
                              if (COERCE_FLOAT(*(_QWORD *)v290) > COERCE_FLOAT(*(_QWORD *)v282))
                              {
                                *(_DWORD *)v290 = v292;
                                *(_DWORD *)v282 = v291;
                                v290[1] = *((float *)&v292 + 1);
                                v282[1] = *((float *)&v291 + 1);
                                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v282, v272, v282);
                              }
                              v290 += 2;
                            }
                            while (v290 != v286);
                          }
                          a1 = v502;
                          if (v510 > 1)
                          {
                            v293 = v510 & 0x1FFFFFFFFFFFFFFFLL;
                            do
                            {
                              v294 = 0;
                              v295 = *v282;
                              v296 = *((_DWORD *)v282 + 1);
                              v297 = v282;
                              do
                              {
                                v298 = v297;
                                v297 += 2 * v294 + 2;
                                v299 = 2 * v294;
                                v294 = (2 * v294) | 1;
                                v300 = v299 + 2;
                                if (v300 < v293 && *v297 > v297[2])
                                {
                                  v297 += 2;
                                  v294 = v300;
                                }
                                *v298 = *v297;
                                v298[1] = v297[1];
                              }
                              while (v294 <= (uint64_t)((unint64_t)(v293 - 2) >> 1));
                              if (v297 == v289 - 2)
                              {
                                *v297 = v295;
                                *((_DWORD *)v297 + 1) = v296;
                              }
                              else
                              {
                                *v297 = *(v289 - 2);
                                v297[1] = *(v289 - 1);
                                *(v289 - 2) = v295;
                                *((_DWORD *)v289 - 1) = v296;
                                v301 = (char *)v297 - (char *)v282 + 8;
                                if (v301 >= 9)
                                {
                                  v302 = (((unint64_t)v301 >> 3) - 2) >> 1;
                                  v303 = &v282[2 * v302];
                                  v304 = *v297;
                                  v305 = COERCE_FLOAT(*(_QWORD *)v303);
                                  v306 = *v297;
                                  if (v305 > *v297)
                                  {
                                    v307 = *((_DWORD *)v297 + 1);
                                    do
                                    {
                                      v308 = v297;
                                      v297 = v303;
                                      *v308 = v305;
                                      v308[1] = v303[1];
                                      if (!v302)
                                        break;
                                      v302 = (v302 - 1) >> 1;
                                      v303 = &v282[2 * v302];
                                      v305 = COERCE_FLOAT(*(_QWORD *)v303);
                                    }
                                    while (v305 > v306);
                                    *v297 = v304;
                                    *((_DWORD *)v297 + 1) = v307;
                                  }
                                }
                              }
                              v289 -= 2;
                              v94 = v293-- <= 2;
                            }
                            while (!v94);
                          }
                        }
                      }
                      else
                      {
                        v309 = &v282[2 * v272];
                        v310 = (float *)*((_QWORD *)&v533[0] + 1);
                        while (v310 != v309)
                        {
                          v311 = ((char *)v310 - (char *)v282) >> 3;
                          if (v311 < 2)
                            break;
                          if (v311 == 3)
                          {
                            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v282, (uint64_t)(v282 + 2), (uint64_t)(v310 - 2));
                            break;
                          }
                          if (v311 == 2)
                          {
                            v353 = *(v310 - 2);
                            v354 = *v282;
                            if (v353 > *v282)
                            {
                              *v282 = v353;
                              *(v310 - 2) = v354;
                              v355 = *((_DWORD *)v282 + 1);
                              v282[1] = *(v310 - 1);
                              *((_DWORD *)v310 - 1) = v355;
                            }
                            break;
                          }
                          if ((char *)v310 - (char *)v282 <= 63)
                          {
                            while (v282 != v310 - 2)
                            {
                              v356 = v282;
                              v282 += 2;
                              if (v356 != v310 && v282 != v310)
                              {
                                v357 = *v356;
                                v358 = *v356;
                                v359 = v282;
                                v360 = v356;
                                v361 = v282;
                                do
                                {
                                  v362 = *v361;
                                  v361 += 2;
                                  v363 = v362;
                                  if (v362 > v358)
                                  {
                                    v358 = v363;
                                    v360 = v359;
                                  }
                                  v359 = v361;
                                }
                                while (v361 != v310);
                                if (v360 != v356)
                                {
                                  *v356 = *v360;
                                  *v360 = v357;
                                  v364 = *((_DWORD *)v356 + 1);
                                  v356[1] = v360[1];
                                  *((_DWORD *)v360 + 1) = v364;
                                }
                              }
                            }
                            break;
                          }
                          v312 = v274;
                          v313 = v272;
                          v314 = v278;
                          v315 = v280;
                          v316 = v279;
                          v317 = v309;
                          v318 = (uint64_t)&v282[2 * (v311 >> 1)];
                          v319 = v310 - 2;
                          v320 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v282, v318, (uint64_t)(v310 - 2));
                          v321 = *v282;
                          if (*v282 <= *(float *)v318)
                          {
                            v322 = v310 - 4;
                            v309 = v317;
                            v279 = v316;
                            v280 = v315;
                            v278 = v314;
                            v272 = v313;
                            v274 = v312;
                            v275 = v500;
                            while (v322 != v282)
                            {
                              v323 = v322;
                              v324 = *v322;
                              v322 -= 2;
                              v325 = v324;
                              if (v324 > *(float *)v318)
                              {
                                *v282 = v325;
                                v322[2] = v321;
                                v326 = *((_DWORD *)v282 + 1);
                                v282[1] = v322[3];
                                *((_DWORD *)v322 + 3) = v326;
                                ++v320;
                                v319 = v323;
                                goto LABEL_511;
                              }
                            }
                            v341 = v282 + 2;
                            if (v321 <= *v319)
                            {
                              a1 = v502;
                              if (v341 == v319)
                                break;
                              while (1)
                              {
                                v345 = *v341;
                                if (v321 > *v341)
                                  break;
                                v341 += 2;
                                if (v341 == v319)
                                  goto LABEL_567;
                              }
                              *v341 = *v319;
                              *(v310 - 2) = v345;
                              v346 = *((_DWORD *)v341 + 1);
                              v341[1] = *(v310 - 1);
                              *((_DWORD *)v310 - 1) = v346;
                              v341 += 2;
                            }
                            else
                            {
                              a1 = v502;
                            }
                            if (v341 == v319)
                              break;
                            while (1)
                            {
                              v348 = *v282;
                              do
                              {
                                v338 = v341;
                                v349 = *v341;
                                v341 += 2;
                                v350 = v349;
                              }
                              while (v348 <= v349);
                              do
                              {
                                v351 = *(v319 - 2);
                                v319 -= 2;
                                v352 = v351;
                              }
                              while (v348 > v351);
                              if (v338 >= v319)
                                break;
                              *v338 = v352;
                              *v319 = v350;
                              v347 = *((_DWORD *)v338 + 1);
                              v338[1] = v319[1];
                              *((_DWORD *)v319 + 1) = v347;
                            }
                            if (v338 > v309)
                              break;
                          }
                          else
                          {
                            v309 = v317;
                            v279 = v316;
                            v280 = v315;
                            v278 = v314;
                            v272 = v313;
                            v274 = v312;
                            v275 = v500;
LABEL_511:
                            v327 = v282 + 2;
                            if (v282 + 2 >= v319)
                            {
                              v330 = v282 + 2;
                            }
                            else
                            {
                              v328 = v282 + 2;
                              while (1)
                              {
                                v329 = *(float *)v318;
                                do
                                {
                                  v330 = v328;
                                  v331 = *v328;
                                  v328 += 2;
                                  v332 = v331;
                                }
                                while (v331 > v329);
                                do
                                {
                                  v333 = *(v319 - 2);
                                  v319 -= 2;
                                  v334 = v333;
                                }
                                while (v333 <= v329);
                                if (v330 >= v319)
                                  break;
                                *v330 = v334;
                                *v319 = v332;
                                v335 = *((_DWORD *)v330 + 1);
                                v330[1] = v319[1];
                                *((_DWORD *)v319 + 1) = v335;
                                ++v320;
                                if ((float *)v318 == v330)
                                  v318 = (uint64_t)v319;
                              }
                            }
                            if (v330 != (float *)v318)
                            {
                              v336 = *v330;
                              if (*(float *)v318 > *v330)
                              {
                                *v330 = *(float *)v318;
                                *(float *)v318 = v336;
                                v337 = *((_DWORD *)v330 + 1);
                                v330[1] = *(float *)(v318 + 4);
                                *(_DWORD *)(v318 + 4) = v337;
                                ++v320;
                              }
                            }
                            a1 = v502;
                            if (v330 == v309)
                              break;
                            if (!v320)
                            {
                              if (v330 <= v309)
                              {
                                v342 = v330 + 2;
                                while (v342 != v310)
                                {
                                  v343 = *v342;
                                  v344 = *(v342 - 2);
                                  v342 += 2;
                                  if (v343 > v344)
                                    goto LABEL_526;
                                }
                              }
                              else
                              {
                                while (v327 != v330)
                                {
                                  v339 = *v327;
                                  v340 = *(v327 - 2);
                                  v327 += 2;
                                  if (v339 > v340)
                                    goto LABEL_526;
                                }
                              }
                              break;
                            }
LABEL_526:
                            if (v330 <= v309)
                            {
                              v338 = v330 + 2;
                            }
                            else
                            {
                              v310 = v330;
                              v338 = v282;
                            }
                          }
                          v282 = v338;
                        }
                      }
LABEL_567:
                      v365 = *(unsigned int *)(**a3 + 16);
                      if ((int)v365 >= 1)
                      {
                        v366 = 4 * (int)v279;
                        v367 = *(_QWORD *)(v468 + 24);
                        v368 = *(unsigned __int8 *)(a1 + 294);
                        v369 = (int *)(*(_QWORD *)&v533[0] + 4);
                        do
                        {
                          *(_DWORD *)(v367 + v366) = *(v369 - 1);
                          if (v368)
                            *(float *)(*(_QWORD *)(v509 + 24) + v366) = (float)*v369;
                          v369 += 2;
                          v366 += v275;
                          --v365;
                        }
                        while (v365);
                      }
                      ++v278;
                      v265 = (_DWORD *)**v504;
                      v280 = (v280 + 1);
                      v279 = (v279 + 1);
                    }
                    while (v278 < (int)v265[2]);
                  }
                  v277 = v491 + 1;
                  v267 = (v487 + v485);
                  v266 = (v489 + v483);
                }
                while (v491 + 1 < v265[3]);
              }
              v276 = v481 + 1;
              v267 = (v477 + v475);
              v266 = (v479 + v473);
            }
            while (v481 + 1 < v265[5]);
          }
          v268 = v469 + 1;
          v267 = (v470 + v465);
          v266 = (v471 + v464);
        }
        while (v469 + 1 < v265[6]);
        goto LABEL_697;
      }
      v249 = v522;
      v250 = v522;
      v251 = 1;
    }
    if (v249)
      v507 = *((int *)&v519 + v250 - 1);
    else
      v507 = 0;
    v260 = !v251;
    if (DWORD1(v524) <= 3)
      v260 = 0;
    if (v260)
    {
      if (SDWORD1(v524) == 5)
      {
        v503 = SDWORD1(v523) * (uint64_t)(int)v523;
        v261 = SHIDWORD(v523) * (uint64_t)(int)v524 * SDWORD2(v523);
      }
      else if (SDWORD1(v524) == 4)
      {
        v503 = (int)v523;
        v261 = SDWORD2(v523) * (uint64_t)SHIDWORD(v523) * SDWORD1(v523);
      }
      else
      {
        v503 = 0;
LABEL_591:
        v261 = 0;
      }
      goto LABEL_592;
    }
LABEL_582:
    switch(DWORD1(v524))
    {
      case 1:
        v370 = 1;
        goto LABEL_588;
      case 2:
        v370 = (int)v523;
        goto LABEL_588;
      case 3:
        v370 = SDWORD1(v523) * (uint64_t)(int)v523;
        goto LABEL_588;
      case 4:
        v370 = SDWORD1(v523) * (uint64_t)(int)v523 * SDWORD2(v523);
        goto LABEL_588;
      case 5:
        v370 = SDWORD1(v523) * (uint64_t)(int)v523 * SDWORD2(v523) * SHIDWORD(v523);
LABEL_588:
        v503 = v370;
        if (DWORD1(v524))
          goto LABEL_589;
        goto LABEL_591;
      default:
        v503 = 0;
        if (!DWORD1(v524))
          goto LABEL_591;
LABEL_589:
        v261 = *((int *)&v523 + SDWORD1(v524) - 1);
        break;
    }
LABEL_592:
    std::vector<std::pair<float,int>>::vector(v533, v261);
    if (!v503)
      goto LABEL_697;
    v371 = 0;
    v372 = 0;
    v373 = 0;
    v374 = (unint64_t)(v510 - 2) >> 1;
    v492 = 2 * v374;
    v495 = v374 + 1;
    do
    {
      v375 = *(float **)&v533[0];
      if (v261)
      {
        v376 = 0;
        v377 = (_DWORD *)(*(_QWORD *)&v533[0] + 4);
        v378 = *(_QWORD *)(v501 + 24) + v372;
        do
        {
          *(v377 - 1) = *(_DWORD *)(v378 + 4 * v376);
          *v377 = v376;
          v377 += 2;
          ++v376;
        }
        while (v261 != v376);
      }
      if (*(_BYTE *)(a1 + 293))
      {
        if (v510)
        {
          v379 = (float *)*((_QWORD *)&v533[0] + 1);
          if (v510 >= 2)
          {
            v380 = v495;
            v381 = &v375[v492];
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v375, v510, v381);
              v381 -= 2;
              --v380;
            }
            while (v380);
          }
          v382 = &v375[2 * v510];
          if (v382 != v379)
          {
            v383 = &v375[2 * v510];
            do
            {
              v384 = *(_QWORD *)v383;
              v385 = *(_QWORD *)v375;
              if (COERCE_FLOAT(*(_QWORD *)v383) > COERCE_FLOAT(*(_QWORD *)v375))
              {
                *(_DWORD *)v383 = v385;
                *(_DWORD *)v375 = v384;
                v383[1] = *((float *)&v385 + 1);
                v375[1] = *((float *)&v384 + 1);
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v375, v510, v375);
              }
              v383 += 2;
            }
            while (v383 != v379);
          }
          v18 = v509;
          if (v510 >= 2)
          {
            v386 = v510 & 0x1FFFFFFFFFFFFFFFLL;
            do
            {
              v387 = 0;
              v388 = *v375;
              v389 = *((_DWORD *)v375 + 1);
              v390 = v375;
              do
              {
                v391 = v390;
                v390 += 2 * v387 + 2;
                v392 = 2 * v387;
                v387 = (2 * v387) | 1;
                v393 = v392 + 2;
                if (v393 < v386 && *v390 > v390[2])
                {
                  v390 += 2;
                  v387 = v393;
                }
                *v391 = *v390;
                v391[1] = v390[1];
              }
              while (v387 <= (uint64_t)((unint64_t)(v386 - 2) >> 1));
              if (v390 == v382 - 2)
              {
                *v390 = v388;
                *((_DWORD *)v390 + 1) = v389;
              }
              else
              {
                *v390 = *(v382 - 2);
                v390[1] = *(v382 - 1);
                *(v382 - 2) = v388;
                *((_DWORD *)v382 - 1) = v389;
                v394 = (char *)v390 - (char *)v375 + 8;
                if (v394 >= 9)
                {
                  v395 = (((unint64_t)v394 >> 3) - 2) >> 1;
                  v396 = &v375[2 * v395];
                  v397 = *v390;
                  v398 = COERCE_FLOAT(*(_QWORD *)v396);
                  v399 = *v390;
                  if (v398 > *v390)
                  {
                    v400 = *((_DWORD *)v390 + 1);
                    do
                    {
                      v401 = v390;
                      v390 = v396;
                      *v401 = v398;
                      v401[1] = v396[1];
                      if (!v395)
                        break;
                      v395 = (v395 - 1) >> 1;
                      v396 = &v375[2 * v395];
                      v398 = COERCE_FLOAT(*(_QWORD *)v396);
                    }
                    while (v398 > v399);
                    *v390 = v397;
                    *((_DWORD *)v390 + 1) = v400;
                  }
                }
              }
              v382 -= 2;
              v94 = v386-- <= 2;
            }
            while (!v94);
          }
        }
      }
      else
      {
        v402 = &v375[2 * v510];
        v403 = (float *)*((_QWORD *)&v533[0] + 1);
        while (v403 != v402)
        {
          v404 = ((char *)v403 - (char *)v375) >> 3;
          if (v404 < 2)
            break;
          if (v404 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v375, (uint64_t)(v375 + 2), (uint64_t)(v403 - 2));
            break;
          }
          if (v404 == 2)
          {
            v440 = *(v403 - 2);
            v441 = *v375;
            if (v440 > *v375)
            {
              *v375 = v440;
              *(v403 - 2) = v441;
              v442 = *((_DWORD *)v375 + 1);
              v375[1] = *(v403 - 1);
              *((_DWORD *)v403 - 1) = v442;
            }
            break;
          }
          if ((char *)v403 - (char *)v375 <= 63)
          {
            while (v375 != v403 - 2)
            {
              v443 = v375;
              v375 += 2;
              if (v443 != v403 && v375 != v403)
              {
                v444 = *v443;
                v445 = *v443;
                v446 = v375;
                v447 = v443;
                v448 = v375;
                do
                {
                  v449 = *v448;
                  v448 += 2;
                  v450 = v449;
                  if (v449 > v445)
                  {
                    v445 = v450;
                    v447 = v446;
                  }
                  v446 = v448;
                }
                while (v448 != v403);
                if (v447 != v443)
                {
                  *v443 = *v447;
                  *v447 = v444;
                  v451 = *((_DWORD *)v443 + 1);
                  v443[1] = v447[1];
                  *((_DWORD *)v447 + 1) = v451;
                }
              }
            }
            break;
          }
          v405 = (uint64_t)&v375[2 * (v404 >> 1)];
          v406 = v403 - 2;
          v407 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v375, v405, (uint64_t)(v403 - 2));
          v408 = *v375;
          if (*v375 > *(float *)v405)
          {
LABEL_635:
            v414 = v375 + 2;
            if (v375 + 2 >= v406)
            {
              v417 = v375 + 2;
            }
            else
            {
              v415 = v375 + 2;
              while (1)
              {
                v416 = *(float *)v405;
                do
                {
                  v417 = v415;
                  v418 = *v415;
                  v415 += 2;
                  v419 = v418;
                }
                while (v418 > v416);
                do
                {
                  v420 = *(v406 - 2);
                  v406 -= 2;
                  v421 = v420;
                }
                while (v420 <= v416);
                if (v417 >= v406)
                  break;
                *v417 = v421;
                *v406 = v419;
                v422 = *((_DWORD *)v417 + 1);
                v417[1] = v406[1];
                *((_DWORD *)v406 + 1) = v422;
                ++v407;
                if ((float *)v405 == v417)
                  v405 = (uint64_t)v406;
              }
            }
            if (v417 != (float *)v405)
            {
              v423 = *v417;
              if (*(float *)v405 > *v417)
              {
                *v417 = *(float *)v405;
                *(float *)v405 = v423;
                v424 = *((_DWORD *)v417 + 1);
                v417[1] = *(float *)(v405 + 4);
                *(_DWORD *)(v405 + 4) = v424;
                ++v407;
              }
            }
            v18 = v509;
            if (v417 == v402)
              break;
            if (!v407)
            {
              if (v417 <= v402)
              {
                v429 = v417 + 2;
                while (v429 != v403)
                {
                  v430 = *v429;
                  v431 = *(v429 - 2);
                  v429 += 2;
                  if (v430 > v431)
                    goto LABEL_650;
                }
              }
              else
              {
                while (v414 != v417)
                {
                  v426 = *v414;
                  v427 = *(v414 - 2);
                  v414 += 2;
                  if (v426 > v427)
                    goto LABEL_650;
                }
              }
              break;
            }
LABEL_650:
            if (v417 <= v402)
            {
              v425 = v417 + 2;
            }
            else
            {
              v403 = v417;
              v425 = v375;
            }
          }
          else
          {
            v409 = v403 - 4;
            while (v409 != v375)
            {
              v410 = v409;
              v411 = *v409;
              v409 -= 2;
              v412 = v411;
              if (v411 > *(float *)v405)
              {
                *v375 = v412;
                v409[2] = v408;
                v413 = *((_DWORD *)v375 + 1);
                v375[1] = v409[3];
                *((_DWORD *)v409 + 3) = v413;
                ++v407;
                v406 = v410;
                goto LABEL_635;
              }
            }
            v428 = v375 + 2;
            if (v408 <= *v406)
            {
              v18 = v509;
              if (v428 == v406)
                break;
              while (1)
              {
                v432 = *v428;
                if (v408 > *v428)
                  break;
                v428 += 2;
                if (v428 == v406)
                  goto LABEL_691;
              }
              *v428 = *v406;
              *(v403 - 2) = v432;
              v433 = *((_DWORD *)v428 + 1);
              v428[1] = *(v403 - 1);
              *((_DWORD *)v403 - 1) = v433;
              v428 += 2;
            }
            else
            {
              v18 = v509;
            }
            if (v428 == v406)
              break;
            while (1)
            {
              v435 = *v375;
              do
              {
                v425 = v428;
                v436 = *v428;
                v428 += 2;
                v437 = v436;
              }
              while (v435 <= v436);
              do
              {
                v438 = *(v406 - 2);
                v406 -= 2;
                v439 = v438;
              }
              while (v435 > v438);
              if (v425 >= v406)
                break;
              *v425 = v439;
              *v406 = v437;
              v434 = *((_DWORD *)v425 + 1);
              v425[1] = v406[1];
              *((_DWORD *)v406 + 1) = v434;
            }
            if (v425 > v402)
              break;
          }
          v375 = v425;
        }
      }
LABEL_691:
      a1 = v502;
      if (v507)
      {
        v452 = *(_QWORD *)(v468 + 24);
        v453 = *(unsigned __int8 *)(v502 + 294);
        v454 = (int *)(*(_QWORD *)&v533[0] + 4);
        v455 = v371;
        v456 = v507;
        do
        {
          *(_DWORD *)(v452 + v455) = *(v454 - 1);
          if (v453)
            *(float *)(*(_QWORD *)(v18 + 24) + v455) = (float)*v454;
          v454 += 2;
          v455 += 4;
          --v456;
        }
        while (v456);
      }
      ++v373;
      v372 += 4 * v261;
      v371 += 4 * v507;
    }
    while (v373 != v503);
    goto LABEL_697;
  }
  v66 = *(_DWORD *)(a1 + 288);
  if ((v66 & 0x80000000) != 0 && (v66 += DWORD1(v524), (v66 & 0x80000000) != 0) || (int)v66 >= SDWORD1(v524))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis argument in topk_kernel_cpu.");
  v67 = 0;
  v68 = 1;
  v69 = 1;
  v70 = 1;
  do
  {
    if (v67 >= v66)
    {
      if (v66 == v67)
        v69 *= *((int *)&v523 + v66);
      else
        v68 *= *((int *)&v523 + v67);
    }
    else
    {
      v70 *= *((int *)&v523 + v67);
    }
    ++v67;
  }
  while (DWORD1(v524) != v67);
  if (*((_DWORD *)&v523 + v66) >= v510)
    v71 = v510;
  else
    v71 = *((_DWORD *)&v523 + v66);
  if (*((_DWORD *)&v519 + v66) != v510)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("topk kernel: computed output shape along specified axis is not equal to num_k");
  std::vector<std::pair<float,int>>::vector(v533, v69);
  __I = 0;
  v480 = v70;
  if (v70)
  {
    v490 = 0;
    v493 = 0;
    v72 = v71;
    v472 = v68 * v71;
    v474 = v68 * v69;
    v486 = v71 & 0x1FFFFFFFFFFFFFFFLL;
    v488 = 0;
    v73 = (unint64_t)(v71 - 2) >> 1;
    if ((unint64_t)v71 <= 1)
      v74 = 1;
    else
      v74 = v71;
    v496 = v74;
    v498 = v68;
    v75 = 4 * v68;
    v482 = 8 * v73;
    v484 = v73 + 1;
    v476 = 4 * v71 * v68;
    v478 = 4 * v68 * v69;
    do
    {
      if (!v68)
        goto LABEL_430;
      v76 = 0;
      v77 = v490;
      v78 = v493;
      v499 = v472 * v488;
      do
      {
        v79 = *(_QWORD *)(v501 + 24);
        v511 = v77;
        if ((_DWORD)v72 == 1)
        {
          v80 = (const float *)(v79 + 4 * (v76 + v474 * v488));
          v81 = (float *)(*(_QWORD *)(v468 + 24) + 4 * (v76 + v499));
          if (*(_BYTE *)(a1 + 292))
            vDSP_minvi(v80, v68, v81, &__I, v69);
          else
            vDSP_maxvi(v80, v68, v81, &__I, v69);
          if (*(_BYTE *)(a1 + 294))
            *(float *)(*(_QWORD *)(v18 + 24) + 4 * (v76 + v499)) = (float)(int)(__I / v68);
          goto LABEL_429;
        }
        v82 = *(_QWORD *)&v533[0];
        if (v69)
        {
          v83 = 0;
          v84 = (_DWORD *)(*(_QWORD *)&v533[0] + 4);
          v85 = (_DWORD *)(v79 + v77);
          do
          {
            *(v84 - 1) = *v85;
            *v84 = v83;
            v84 += 2;
            ++v83;
            v85 = (_DWORD *)((char *)v85 + v75);
          }
          while (v69 != v83);
        }
        if (*(_BYTE *)(a1 + 292))
        {
          if (*(_BYTE *)(a1 + 293))
          {
            if (!(_DWORD)v72)
              goto LABEL_429;
            v86 = (float *)*((_QWORD *)&v533[0] + 1);
            if ((int)v72 >= 2)
            {
              v87 = v484;
              v88 = (float *)(v482 + v82);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v72, v88);
                v88 -= 2;
                --v87;
              }
              while (v87);
            }
            v506 = v78;
            v89 = v82 + 8 * v72;
            if ((float *)v89 != v86)
            {
              v90 = (float *)(v82 + 8 * v72);
              do
              {
                v92 = *v90;
                v91 = *((_DWORD *)v90 + 1);
                v93 = *(_DWORD *)(v82 + 4);
                if (*v90 < *(float *)v82 || (*v90 == *(float *)v82 ? (v94 = v91 < v93) : (v94 = 0), v94))
                {
                  *v90 = *(float *)v82;
                  *(float *)v82 = v92;
                  *((_DWORD *)v90 + 1) = v93;
                  *(_DWORD *)(v82 + 4) = v91;
                  std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v72, (float *)v82);
                }
                v90 += 2;
              }
              while (v90 != v86);
            }
            v18 = v509;
            if ((int)v72 < 2)
              goto LABEL_424;
            v95 = v486;
            while (2)
            {
              v96 = 0;
              v97 = *(float *)v82;
              v98 = *(_DWORD *)(v82 + 4);
              v99 = (_QWORD *)v82;
              do
              {
                v100 = v99;
                v99 += v96 + 1;
                v101 = 2 * v96;
                v96 = (2 * v96) | 1;
                v102 = v101 + 2;
                if (v102 < v95)
                {
                  v103 = COERCE_FLOAT(*v99);
                  v104 = COERCE_FLOAT(v99[1]);
                  if (v103 < v104
                    || (v103 == v104 ? (v105 = (int)HIDWORD(*v99) < (int)HIDWORD(v99[1])) : (v105 = 0), v105))
                  {
                    ++v99;
                    v96 = v102;
                  }
                }
                *v100 = *(_DWORD *)v99;
                v100[1] = *((_DWORD *)v99 + 1);
              }
              while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
              if (v99 == (_QWORD *)(v89 - 8))
              {
                *(float *)v99 = v97;
              }
              else
              {
                *(_DWORD *)v99 = *(_DWORD *)(v89 - 8);
                *((_DWORD *)v99 + 1) = *(_DWORD *)(v89 - 4);
                *(float *)(v89 - 8) = v97;
                *(_DWORD *)(v89 - 4) = v98;
                v106 = (uint64_t)v99 - v82 + 8;
                if (v106 < 9)
                  goto LABEL_167;
                v107 = ((unint64_t)v106 >> 3) - 2;
                v108 = v107 >> 1;
                v109 = v82 + 8 * (v107 >> 1);
                v110 = *(_DWORD *)(v109 + 4);
                v111 = *(_DWORD *)v99;
                v98 = *((_DWORD *)v99 + 1);
                v112 = *(float *)v99;
                if (*(float *)v109 >= *(float *)v99 && (*(float *)v109 != *(float *)v99 || v110 >= v98))
                {
LABEL_167:
                  v89 -= 8;
                  v94 = v95-- <= 2;
                  if (v94)
                    goto LABEL_424;
                  continue;
                }
                *(_DWORD *)v99 = *(_DWORD *)v109;
                *((_DWORD *)v99 + 1) = v110;
                if (v107 >= 2)
                {
                  while (1)
                  {
                    v114 = v108 - 1;
                    v108 = (v108 - 1) >> 1;
                    v99 = (_QWORD *)(v82 + 8 * v108);
                    v115 = *((_DWORD *)v99 + 1);
                    if (*(float *)v99 >= v112 && (*(float *)v99 != v112 || v98 <= v115))
                      break;
                    *(_DWORD *)v109 = *(_DWORD *)v99;
                    *(_DWORD *)(v109 + 4) = v115;
                    v109 = v82 + 8 * v108;
                    if (v114 <= 1)
                      goto LABEL_164;
                  }
                }
                v99 = (_QWORD *)v109;
LABEL_164:
                *(_DWORD *)v99 = v111;
              }
              break;
            }
            *((_DWORD *)v99 + 1) = v98;
            goto LABEL_167;
          }
          v506 = v78;
          v148 = (float *)(v82 + 8 * v72);
          v149 = (float *)*((_QWORD *)&v533[0] + 1);
          if (v148 == *((float **)&v533[0] + 1))
            goto LABEL_424;
          while (2)
          {
            v150 = ((uint64_t)v149 - v82) >> 3;
            if (v150 < 2)
              goto LABEL_424;
            if (v150 == 3)
            {
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v82 + 8, (_DWORD *)v149 - 2);
              goto LABEL_424;
            }
            if (v150 == 2)
            {
              v229 = *(v149 - 2);
              v230 = *(float *)v82;
              v231 = v229 == *(float *)v82;
              if (v229 >= *(float *)v82)
                goto LABEL_408;
              goto LABEL_392;
            }
            if ((uint64_t)v149 - v82 <= 63)
            {
              while ((float *)v82 != v149 - 2)
              {
                v234 = (float *)v82;
                v82 += 8;
                if (v234 != v149 && (float *)v82 != v149)
                {
                  v235 = v82;
                  v236 = v234;
                  do
                  {
                    if (*(float *)v235 < *v236
                      || *(float *)v235 == *v236 && *(_DWORD *)(v235 + 4) < *((_DWORD *)v236 + 1))
                    {
                      v236 = (float *)v235;
                    }
                    v235 += 8;
                  }
                  while ((float *)v235 != v149);
                  if (v236 != v234)
                  {
                    v237 = *(_DWORD *)v234;
                    *v234 = *v236;
                    *(_DWORD *)v236 = v237;
                    v238 = *((_DWORD *)v234 + 1);
                    v234[1] = v236[1];
                    *((_DWORD *)v236 + 1) = v238;
                  }
                }
              }
              goto LABEL_424;
            }
            v151 = v150 >> 1;
            v152 = v82 + 8 * (v150 >> 1);
            v153 = v149 - 2;
            v154 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v152, (_DWORD *)v149 - 2);
            v155 = *(float *)v82;
            v156 = *(float *)v152;
            if (*(float *)v82 < *(float *)v152
              || *(float *)v82 == *(float *)v152 && *(_DWORD *)(v82 + 4) < *(_DWORD *)(v82 + 8 * v151 + 4))
            {
              v157 = (unint64_t)(v149 - 2);
              goto LABEL_231;
            }
            v157 = (unint64_t)(v149 - 4);
            if ((float *)v82 == v149 - 4)
            {
LABEL_256:
              v172 = (float *)(v82 + 8);
              if (v155 >= *v153)
              {
                v18 = v509;
                if (v155 != *v153 || *(_DWORD *)(v82 + 4) >= *((_DWORD *)v149 - 1))
                {
                  while (v172 != v153)
                  {
                    v180 = *v172;
                    if (v155 < *v172)
                    {
                      v181 = *((_DWORD *)v172 + 1);
LABEL_290:
                      *v172 = *v153;
                      *(v149 - 2) = v180;
                      v172[1] = *(v149 - 1);
                      *((_DWORD *)v149 - 1) = v181;
                      v172 += 2;
                      goto LABEL_291;
                    }
                    if (v155 == *v172)
                    {
                      v181 = *((_DWORD *)v172 + 1);
                      if (*(_DWORD *)(v82 + 4) < v181)
                        goto LABEL_290;
                    }
                    v172 += 2;
                  }
                  goto LABEL_424;
                }
              }
              else
              {
                v18 = v509;
              }
LABEL_291:
              if (v172 == v153)
                goto LABEL_424;
              while (1)
              {
                v182 = *(float *)v82;
                for (j = *v172; v182 >= j && (v182 != j || *(_DWORD *)(v82 + 4) >= *((_DWORD *)v172 + 1)); j = v184)
                {
                  v184 = v172[2];
                  v172 += 2;
                }
                do
                {
                  do
                  {
                    v185 = *(v153 - 2);
                    v153 -= 2;
                    v186 = v185;
                    v187 = v182 == v185;
                  }
                  while (v182 < v185);
                }
                while (v187 && *(_DWORD *)(v82 + 4) < *((_DWORD *)v153 + 1));
                if (v172 >= v153)
                  break;
                *v172 = v186;
                *v153 = j;
                v188 = *((_DWORD *)v172 + 1);
                v172[1] = v153[1];
                *((_DWORD *)v153 + 1) = v188;
                v172 += 2;
              }
              if (v172 > v148)
                goto LABEL_424;
            }
            else
            {
              while (*(float *)v157 >= v156
                   && (*(float *)v157 != v156 || *(_DWORD *)(v157 + 4) >= *(_DWORD *)(v82 + 8 * v151 + 4)))
              {
                v157 -= 8;
                if (v157 == v82)
                  goto LABEL_256;
              }
              *(_DWORD *)v82 = *(_DWORD *)v157;
              *(float *)v157 = v155;
              v179 = *(_DWORD *)(v82 + 4);
              *(_DWORD *)(v82 + 4) = *(_DWORD *)(v157 + 4);
              *(_DWORD *)(v157 + 4) = v179;
              ++v154;
LABEL_231:
              v158 = (float *)(v82 + 8);
              if (v82 + 8 >= v157)
              {
                k = 1;
              }
              else
              {
                for (k = 1; ; ++k)
                {
                  v160 = *(float *)v152;
                  for (m = (float *)(v82 + 4 + 8 * k); ; m += 2)
                  {
                    v162 = *(m - 1);
                    if (v162 >= v160 && (v162 != v160 || *(_DWORD *)m >= *(_DWORD *)(v152 + 4)))
                      break;
                    ++k;
                  }
                  v163 = (float *)(v157 - 8);
                  v164 = *(float *)(v157 - 8);
                  if (v164 >= v160)
                  {
                    do
                    {
                      if (v164 == v160 && *(_DWORD *)(v157 - 4) < *(_DWORD *)(v152 + 4))
                        break;
                      v164 = *(float *)(v157 - 16);
                      v157 -= 8;
                    }
                    while (v164 >= v160);
                    v163 = (float *)(v157 - 8);
                  }
                  v165 = (float *)(v82 + 8 * k);
                  if (v165 >= v163)
                    break;
                  *v165 = v164;
                  *v163 = v162;
                  v166 = v82 + 8 * k;
                  v167 = *(_DWORD *)(v166 + 4);
                  *(_DWORD *)(v166 + 4) = *(_DWORD *)(v157 - 4);
                  *(_DWORD *)(v157 - 4) = v167;
                  ++v154;
                  if ((float *)v152 == v165)
                    v152 = (uint64_t)v163;
                  v157 = (unint64_t)v163;
                }
              }
              v168 = (float *)(v82 + 8 * k);
              if (v168 != (float *)v152)
              {
                v169 = *v168;
                if (*(float *)v152 < *v168)
                {
                  v170 = *(_DWORD *)(v82 + 8 * k + 4);
                  v171 = *(_DWORD *)(v152 + 4);
                  goto LABEL_260;
                }
                if (*(float *)v152 == *v168)
                {
                  v171 = *(_DWORD *)(v152 + 4);
                  v170 = *(_DWORD *)(v82 + 8 * k + 4);
                  if (v171 < v170)
                  {
LABEL_260:
                    *v168 = *(float *)v152;
                    *(float *)v152 = v169;
                    *(_DWORD *)(v82 + 8 * k + 4) = v171;
                    *(_DWORD *)(v152 + 4) = v170;
                    ++v154;
                  }
                }
              }
              v18 = v509;
              if (v168 == v148)
                goto LABEL_424;
              if (!v154)
              {
                if (v168 <= v148)
                {
                  v176 = v168 + 2;
                  if (v168 + 2 == v149)
                    goto LABEL_424;
                  v177 = *v168;
                  while (1)
                  {
                    v178 = v177;
                    v177 = *v176;
                    if (*v176 < v178 || *v176 == v178 && *((_DWORD *)v176 + 1) < *((_DWORD *)v176 - 1))
                      break;
                    v176 += 2;
                    if (v176 == v149)
                      goto LABEL_424;
                  }
                }
                else
                {
                  if (k == 1)
                    goto LABEL_424;
                  v173 = *(float *)v82;
                  v174 = 8 * k - 8;
                  while (1)
                  {
                    v175 = v173;
                    v173 = *v158;
                    if (*v158 < v175 || *v158 == v175 && *((_DWORD *)v158 + 1) < *((_DWORD *)v158 - 1))
                      break;
                    v158 += 2;
                    v174 -= 8;
                    if (!v174)
                      goto LABEL_424;
                  }
                }
              }
              v172 = v168 + 2;
              if (v168 > v148)
              {
                v149 = v168;
                v172 = (float *)v82;
              }
            }
            v82 = (uint64_t)v172;
            if (v149 == v148)
              goto LABEL_424;
            continue;
          }
        }
        if (*(_BYTE *)(a1 + 293))
        {
          if (!(_DWORD)v72)
            goto LABEL_429;
          v117 = (float *)*((_QWORD *)&v533[0] + 1);
          if ((int)v72 >= 2)
          {
            v118 = v484;
            v119 = (float *)(v482 + v82);
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v72, v119);
              v119 -= 2;
              --v118;
            }
            while (v118);
          }
          v506 = v78;
          v120 = v82 + 8 * v72;
          if ((float *)v120 != v117)
          {
            v121 = (float *)(v82 + 8 * v72);
            do
            {
              v123 = *v121;
              v122 = *((_DWORD *)v121 + 1);
              v124 = *(_DWORD *)(v82 + 4);
              if (*v121 > *(float *)v82 || (*v121 == *(float *)v82 ? (v125 = v122 < v124) : (v125 = 0), v125))
              {
                *v121 = *(float *)v82;
                *(float *)v82 = v123;
                *((_DWORD *)v121 + 1) = v124;
                *(_DWORD *)(v82 + 4) = v122;
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v72, (float *)v82);
              }
              v121 += 2;
            }
            while (v121 != v117);
          }
          v18 = v509;
          if ((int)v72 < 2)
            goto LABEL_424;
          v126 = v486;
          while (2)
          {
            v127 = 0;
            v128 = *(float *)v82;
            v129 = *(_DWORD *)(v82 + 4);
            v130 = (_QWORD *)v82;
            do
            {
              v131 = v130;
              v130 += v127 + 1;
              v132 = 2 * v127;
              v127 = (2 * v127) | 1;
              v133 = v132 + 2;
              if (v133 < v126)
              {
                v134 = COERCE_FLOAT(*v130);
                v135 = COERCE_FLOAT(v130[1]);
                if (v134 > v135
                  || (v134 == v135 ? (v136 = (int)HIDWORD(*v130) < (int)HIDWORD(v130[1])) : (v136 = 0), v136))
                {
                  ++v130;
                  v127 = v133;
                }
              }
              *v131 = *(_DWORD *)v130;
              v131[1] = *((_DWORD *)v130 + 1);
            }
            while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
            if (v130 == (_QWORD *)(v120 - 8))
            {
              *(float *)v130 = v128;
            }
            else
            {
              *(_DWORD *)v130 = *(_DWORD *)(v120 - 8);
              *((_DWORD *)v130 + 1) = *(_DWORD *)(v120 - 4);
              *(float *)(v120 - 8) = v128;
              *(_DWORD *)(v120 - 4) = v129;
              v137 = (uint64_t)v130 - v82 + 8;
              if (v137 < 9)
                goto LABEL_219;
              v138 = ((unint64_t)v137 >> 3) - 2;
              v139 = v138 >> 1;
              v140 = v82 + 8 * (v138 >> 1);
              v141 = *(_DWORD *)(v140 + 4);
              v142 = *(_DWORD *)v130;
              v129 = *((_DWORD *)v130 + 1);
              v143 = *(float *)v130;
              if (*(float *)v140 <= *(float *)v130 && (*(float *)v140 != *(float *)v130 || v141 >= v129))
              {
LABEL_219:
                v120 -= 8;
                v94 = v126-- <= 2;
                if (v94)
                  goto LABEL_424;
                continue;
              }
              *(_DWORD *)v130 = *(_DWORD *)v140;
              *((_DWORD *)v130 + 1) = v141;
              if (v138 >= 2)
              {
                while (1)
                {
                  v145 = v139 - 1;
                  v139 = (v139 - 1) >> 1;
                  v130 = (_QWORD *)(v82 + 8 * v139);
                  v146 = *((_DWORD *)v130 + 1);
                  if (*(float *)v130 <= v143 && (*(float *)v130 != v143 || v129 <= v146))
                    break;
                  *(_DWORD *)v140 = *(_DWORD *)v130;
                  *(_DWORD *)(v140 + 4) = v146;
                  v140 = v82 + 8 * v139;
                  if (v145 <= 1)
                    goto LABEL_216;
                }
              }
              v130 = (_QWORD *)v140;
LABEL_216:
              *(_DWORD *)v130 = v142;
            }
            break;
          }
          *((_DWORD *)v130 + 1) = v129;
          goto LABEL_219;
        }
        v506 = v78;
        v189 = (float *)(v82 + 8 * v72);
        v149 = (float *)*((_QWORD *)&v533[0] + 1);
        if (v189 == *((float **)&v533[0] + 1))
          goto LABEL_424;
        while (1)
        {
          v190 = ((uint64_t)v149 - v82) >> 3;
          if (v190 < 2)
            goto LABEL_424;
          if (v190 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v82 + 8, (_DWORD *)v149 - 2);
            goto LABEL_424;
          }
          if (v190 == 2)
          {
            v229 = *(v149 - 2);
            v230 = *(float *)v82;
            v231 = v229 == *(float *)v82;
            if (v229 > *(float *)v82)
            {
LABEL_392:
              v232 = *(_DWORD *)(v82 + 4);
              v233 = *((_DWORD *)v149 - 1);
            }
            else
            {
LABEL_408:
              if (!v231)
                goto LABEL_424;
              v233 = *((_DWORD *)v149 - 1);
              v232 = *(_DWORD *)(v82 + 4);
              if (v233 >= v232)
                goto LABEL_424;
            }
            *(float *)v82 = v229;
            *(v149 - 2) = v230;
            *(_DWORD *)(v82 + 4) = v233;
            *((_DWORD *)v149 - 1) = v232;
            goto LABEL_424;
          }
          if ((uint64_t)v149 - v82 <= 63)
          {
            while ((float *)v82 != v149 - 2)
            {
              v239 = (float *)v82;
              v82 += 8;
              if (v239 != v149 && (float *)v82 != v149)
              {
                v240 = v82;
                v241 = v239;
                do
                {
                  if (*(float *)v240 > *v241
                    || *(float *)v240 == *v241 && *(_DWORD *)(v240 + 4) < *((_DWORD *)v241 + 1))
                  {
                    v241 = (float *)v240;
                  }
                  v240 += 8;
                }
                while ((float *)v240 != v149);
                if (v241 != v239)
                {
                  v242 = *(_DWORD *)v239;
                  *v239 = *v241;
                  *(_DWORD *)v241 = v242;
                  v243 = *((_DWORD *)v239 + 1);
                  v239[1] = v241[1];
                  *((_DWORD *)v241 + 1) = v243;
                }
              }
            }
            goto LABEL_424;
          }
          v191 = v190 >> 1;
          v192 = v82 + 8 * (v190 >> 1);
          v193 = v149 - 2;
          v194 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(v82, v192, (_DWORD *)v149 - 2);
          v195 = *(float *)v82;
          v196 = *(float *)v192;
          if (*(float *)v82 > *(float *)v192
            || *(float *)v82 == *(float *)v192 && *(_DWORD *)(v82 + 4) < *(_DWORD *)(v82 + 8 * v191 + 4))
          {
            v197 = (unint64_t)(v149 - 2);
            goto LABEL_315;
          }
          v197 = (unint64_t)(v149 - 4);
          if ((float *)v82 != v149 - 4)
          {
            while (*(float *)v197 <= v196
                 && (*(float *)v197 != v196 || *(_DWORD *)(v197 + 4) >= *(_DWORD *)(v82 + 8 * v191 + 4)))
            {
              v197 -= 8;
              if (v197 == v82)
                goto LABEL_340;
            }
            *(_DWORD *)v82 = *(_DWORD *)v197;
            *(float *)v197 = v195;
            v219 = *(_DWORD *)(v82 + 4);
            *(_DWORD *)(v82 + 4) = *(_DWORD *)(v197 + 4);
            *(_DWORD *)(v197 + 4) = v219;
            ++v194;
LABEL_315:
            v198 = (float *)(v82 + 8);
            if (v82 + 8 >= v197)
            {
              n = 1;
            }
            else
            {
              for (n = 1; ; ++n)
              {
                v200 = *(float *)v192;
                for (ii = (float *)(v82 + 4 + 8 * n); ; ii += 2)
                {
                  v202 = *(ii - 1);
                  if (v202 <= v200 && (v202 != v200 || *(_DWORD *)ii >= *(_DWORD *)(v192 + 4)))
                    break;
                  ++n;
                }
                v203 = (float *)(v197 - 8);
                v204 = *(float *)(v197 - 8);
                if (v204 <= v200)
                {
                  do
                  {
                    if (v204 == v200 && *(_DWORD *)(v197 - 4) < *(_DWORD *)(v192 + 4))
                      break;
                    v204 = *(float *)(v197 - 16);
                    v197 -= 8;
                  }
                  while (v204 <= v200);
                  v203 = (float *)(v197 - 8);
                }
                v205 = (float *)(v82 + 8 * n);
                if (v205 >= v203)
                  break;
                *v205 = v204;
                *v203 = v202;
                v206 = v82 + 8 * n;
                v207 = *(_DWORD *)(v206 + 4);
                *(_DWORD *)(v206 + 4) = *(_DWORD *)(v197 - 4);
                *(_DWORD *)(v197 - 4) = v207;
                ++v194;
                if ((float *)v192 == v205)
                  v192 = (uint64_t)v203;
                v197 = (unint64_t)v203;
              }
            }
            v208 = (float *)(v82 + 8 * n);
            if (v208 != (float *)v192)
            {
              v209 = *v208;
              if (*(float *)v192 > *v208)
              {
                v210 = *(_DWORD *)(v82 + 8 * n + 4);
                v211 = *(_DWORD *)(v192 + 4);
                goto LABEL_344;
              }
              if (*(float *)v192 == *v208)
              {
                v211 = *(_DWORD *)(v192 + 4);
                v210 = *(_DWORD *)(v82 + 8 * n + 4);
                if (v211 < v210)
                {
LABEL_344:
                  *v208 = *(float *)v192;
                  *(float *)v192 = v209;
                  *(_DWORD *)(v82 + 8 * n + 4) = v211;
                  *(_DWORD *)(v192 + 4) = v210;
                  ++v194;
                }
              }
            }
            v18 = v509;
            if (v208 == v189)
              goto LABEL_424;
            if (!v194)
            {
              if (v208 <= v189)
              {
                v216 = v208 + 2;
                if (v208 + 2 == v149)
                  goto LABEL_424;
                v217 = *v208;
                while (1)
                {
                  v218 = v217;
                  v217 = *v216;
                  if (*v216 > v218 || *v216 == v218 && *((_DWORD *)v216 + 1) < *((_DWORD *)v216 - 1))
                    break;
                  v216 += 2;
                  if (v216 == v149)
                    goto LABEL_424;
                }
              }
              else
              {
                if (n == 1)
                  goto LABEL_424;
                v213 = *(float *)v82;
                v214 = 8 * n - 8;
                while (1)
                {
                  v215 = v213;
                  v213 = *v198;
                  if (*v198 > v215 || *v198 == v215 && *((_DWORD *)v198 + 1) < *((_DWORD *)v198 - 1))
                    break;
                  v198 += 2;
                  v214 -= 8;
                  if (!v214)
                    goto LABEL_424;
                }
              }
            }
            v212 = v208 + 2;
            if (v208 > v189)
            {
              v149 = v208;
              v212 = (float *)v82;
            }
            goto LABEL_388;
          }
LABEL_340:
          v212 = (float *)(v82 + 8);
          if (v195 <= *v193)
            break;
          v18 = v509;
LABEL_375:
          if (v212 == v193)
            goto LABEL_424;
          while (1)
          {
            v222 = *(float *)v82;
            for (jj = *v212; v222 <= jj && (v222 != jj || *(_DWORD *)(v82 + 4) >= *((_DWORD *)v212 + 1)); jj = v224)
            {
              v224 = v212[2];
              v212 += 2;
            }
            do
            {
              do
              {
                v225 = *(v193 - 2);
                v193 -= 2;
                v226 = v225;
                v227 = v222 == v225;
              }
              while (v222 > v225);
            }
            while (v227 && *(_DWORD *)(v82 + 4) < *((_DWORD *)v193 + 1));
            if (v212 >= v193)
              break;
            *v212 = v226;
            *v193 = jj;
            v228 = *((_DWORD *)v212 + 1);
            v212[1] = v193[1];
            *((_DWORD *)v193 + 1) = v228;
            v212 += 2;
          }
          if (v212 > v189)
            goto LABEL_424;
LABEL_388:
          v82 = (uint64_t)v212;
          if (v149 == v189)
            goto LABEL_424;
        }
        v18 = v509;
        if (v195 == *v193 && *(_DWORD *)(v82 + 4) < *((_DWORD *)v149 - 1))
          goto LABEL_375;
        while (v212 != v193)
        {
          v220 = *v212;
          if (v195 > *v212)
          {
            v221 = *((_DWORD *)v212 + 1);
LABEL_374:
            *v212 = *v193;
            *(v149 - 2) = v220;
            v212[1] = *(v149 - 1);
            *((_DWORD *)v149 - 1) = v221;
            v212 += 2;
            goto LABEL_375;
          }
          if (v195 == *v212)
          {
            v221 = *((_DWORD *)v212 + 1);
            if (*(_DWORD *)(v82 + 4) < v221)
              goto LABEL_374;
          }
          v212 += 2;
        }
LABEL_424:
        a1 = v502;
        v68 = v498;
        v78 = v506;
        if ((_DWORD)v72)
        {
          v244 = *(_QWORD *)(v468 + 24);
          v245 = *(unsigned __int8 *)(v502 + 294);
          v246 = (int *)(*(_QWORD *)&v533[0] + 4);
          v247 = v506;
          v248 = v496;
          do
          {
            *(_DWORD *)(v244 + v247) = *(v246 - 1);
            if (v245)
              *(float *)(*(_QWORD *)(v18 + 24) + v247) = (float)*v246;
            v246 += 2;
            v247 += v75;
            --v248;
          }
          while (v248);
        }
LABEL_429:
        ++v76;
        v77 = v511 + 4;
        v78 += 4;
      }
      while (v76 != v68);
LABEL_430:
      ++v488;
      v490 += v478;
      v493 += v476;
    }
    while (v488 != v480);
  }
LABEL_697:
  if (*(_QWORD *)&v533[0])
  {
    *((_QWORD *)&v533[0] + 1) = *(_QWORD *)&v533[0];
    operator delete(*(void **)&v533[0]);
  }
  if (v466)
  {
    v457 = (unint64_t *)&v466->__shared_owners_;
    do
      v458 = __ldaxr(v457);
    while (__stlxr(v458 - 1, v457));
    if (!v458)
    {
      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
      std::__shared_weak_count::__release_weak(v466);
    }
  }
  if (*((_QWORD *)&v468 + 1))
  {
    v459 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v468 + 1) + 16))(*((_QWORD *)&v468 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v468 + 1));
    }
  }
  if (v467)
  {
    v461 = (unint64_t *)&v467->__shared_owners_;
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
}

void sub_1917E2A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,__int128 a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (*((_QWORD *)&a13 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&a13 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&a13 + 1) + 16))(*((_QWORD *)&a13 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&a13 + 1));
    }
  }
  if (a12)
  {
    v60 = (unint64_t *)&a12->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[2])
      {
        v7 += 2;
        v6 = v8;
      }
      v9 = *a3;
      v10 = *v7;
      v11 = *a3;
      if (*v7 <= *a3)
      {
        v12 = *((_DWORD *)a3 + 1);
        do
        {
          v13 = a3;
          a3 = v7;
          *v13 = v10;
          v13[1] = v7[1];
          if (v4 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 8 * v6);
          v15 = v14 + 2;
          if (v15 < a2 && *v7 > v7[2])
          {
            v7 += 2;
            v6 = v15;
          }
          v10 = *v7;
        }
        while (*v7 <= v11);
        *a3 = v9;
        *((_DWORD *)a3 + 1) = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  int v7;
  float v8;
  int v9;
  int v10;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)a1)
  {
    if (v5 > v3)
    {
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      v6 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v6;
      return 1;
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v10 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v10;
    if (*(float *)a3 <= v4)
      return 1;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v10;
    return 2;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v7;
    v8 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1)
      return 1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v8;
    v9 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = COERCE_FLOAT(*(_QWORD *)v7);
        v10 = COERCE_FLOAT(*((_QWORD *)v7 + 1));
        if (v9 < v10
          || (v9 == v10 ? (v11 = (int)HIDWORD(*(_QWORD *)v7) < (int)HIDWORD(*((_QWORD *)v7 + 1))) : (v11 = 0), v11))
        {
          v7 += 2;
          v6 = v8;
        }
      }
      v12 = *a3;
      v13 = COERCE_FLOAT(*(_QWORD *)v7);
      v14 = *a3;
      if (v13 >= *a3)
      {
        v15 = *((_DWORD *)a3 + 1);
        if (v13 != *a3 || (int)HIDWORD(*(_QWORD *)v7) >= v15)
        {
          do
          {
            v17 = a3;
            a3 = v7;
            *v17 = v13;
            v17[1] = v7[1];
            if (v4 < v6)
              break;
            v18 = 2 * v6;
            v6 = (2 * v6) | 1;
            v7 = (float *)(result + 8 * v6);
            v19 = v18 + 2;
            if (v19 < a2)
            {
              v20 = COERCE_FLOAT(*(_QWORD *)v7);
              v21 = COERCE_FLOAT(*((_QWORD *)v7 + 1));
              if (v20 < v21
                || (v20 == v21 ? (v22 = (int)HIDWORD(*(_QWORD *)v7) < (int)HIDWORD(*((_QWORD *)v7 + 1))) : (v22 = 0), v22))
              {
                v7 += 2;
                v6 = v19;
              }
            }
            v13 = COERCE_FLOAT(*(_QWORD *)v7);
            if (v13 < v14)
              break;
          }
          while (v13 != v14 || v15 <= (int)HIDWORD(*(_QWORD *)v7));
          *a3 = v12;
          *((_DWORD *)a3 + 1) = v15;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1 || *(float *)a2 == *(float *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
  {
    if (*(float *)a3 < v3)
    {
      v5 = a3[1];
LABEL_11:
      *(_DWORD *)a1 = *a3;
      *(float *)a3 = v4;
      v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v5;
      a3[1] = v8;
      return 1;
    }
    if (*(float *)a3 == v3)
    {
      v5 = a3[1];
      v13 = *(_DWORD *)(a2 + 4);
      if (v5 < v13)
        goto LABEL_11;
    }
    else
    {
      v13 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v14 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v13;
    *(_DWORD *)(a2 + 4) = v14;
    if (*(float *)a3 >= v4)
    {
      if (*(float *)a3 != v4)
        return 1;
      v15 = a3[1];
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v15 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v15;
    result = 2;
    a3[1] = v14;
  }
  else
  {
    if (*(float *)a3 >= v3)
    {
      if (*(float *)a3 != v3)
        return 0;
      v7 = a3[1];
      v6 = *(_DWORD *)(a2 + 4);
      if (v7 >= v6)
        return 0;
    }
    else
    {
      v6 = *(_DWORD *)(a2 + 4);
      v7 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v7;
    a3[1] = v6;
    v10 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (*(float *)a2 != *(float *)a1)
        return 1;
      v12 = *(_DWORD *)(a2 + 4);
      v11 = *(_DWORD *)(a1 + 4);
      if (v12 >= v11)
        return 1;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 4);
      v12 = *(_DWORD *)(a2 + 4);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v10;
    *(_DWORD *)(a1 + 4) = v12;
    result = 2;
    *(_DWORD *)(a2 + 4) = v11;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = COERCE_FLOAT(*(_QWORD *)v7);
        v10 = COERCE_FLOAT(*((_QWORD *)v7 + 1));
        if (v9 > v10
          || (v9 == v10 ? (v11 = (int)HIDWORD(*(_QWORD *)v7) < (int)HIDWORD(*((_QWORD *)v7 + 1))) : (v11 = 0), v11))
        {
          v7 += 2;
          v6 = v8;
        }
      }
      v12 = *a3;
      v13 = COERCE_FLOAT(*(_QWORD *)v7);
      v14 = *a3;
      if (v13 <= *a3)
      {
        v15 = *((_DWORD *)a3 + 1);
        if (v13 != *a3 || (int)HIDWORD(*(_QWORD *)v7) >= v15)
        {
          do
          {
            v17 = a3;
            a3 = v7;
            *v17 = v13;
            v17[1] = v7[1];
            if (v4 < v6)
              break;
            v18 = 2 * v6;
            v6 = (2 * v6) | 1;
            v7 = (float *)(result + 8 * v6);
            v19 = v18 + 2;
            if (v19 < a2)
            {
              v20 = COERCE_FLOAT(*(_QWORD *)v7);
              v21 = COERCE_FLOAT(*((_QWORD *)v7 + 1));
              if (v20 > v21
                || (v20 == v21 ? (v22 = (int)HIDWORD(*(_QWORD *)v7) < (int)HIDWORD(*((_QWORD *)v7 + 1))) : (v22 = 0), v22))
              {
                v7 += 2;
                v6 = v19;
              }
            }
            v13 = COERCE_FLOAT(*(_QWORD *)v7);
            if (v13 > v14)
              break;
          }
          while (v13 != v14 || v15 <= (int)HIDWORD(*(_QWORD *)v7));
          *a3 = v12;
          *((_DWORD *)a3 + 1) = v15;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  if (*(float *)a2 > *(float *)a1 || *(float *)a2 == *(float *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
  {
    if (*(float *)a3 > v3)
    {
      v5 = a3[1];
LABEL_11:
      *(_DWORD *)a1 = *a3;
      *(float *)a3 = v4;
      v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v5;
      a3[1] = v8;
      return 1;
    }
    if (*(float *)a3 == v3)
    {
      v5 = a3[1];
      v13 = *(_DWORD *)(a2 + 4);
      if (v5 < v13)
        goto LABEL_11;
    }
    else
    {
      v13 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v14 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v13;
    *(_DWORD *)(a2 + 4) = v14;
    if (*(float *)a3 <= v4)
    {
      if (*(float *)a3 != v4)
        return 1;
      v15 = a3[1];
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v15 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v15;
    result = 2;
    a3[1] = v14;
  }
  else
  {
    if (*(float *)a3 <= v3)
    {
      if (*(float *)a3 != v3)
        return 0;
      v7 = a3[1];
      v6 = *(_DWORD *)(a2 + 4);
      if (v7 >= v6)
        return 0;
    }
    else
    {
      v6 = *(_DWORD *)(a2 + 4);
      v7 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v7;
    a3[1] = v6;
    v10 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1)
    {
      if (*(float *)a2 != *(float *)a1)
        return 1;
      v12 = *(_DWORD *)(a2 + 4);
      v11 = *(_DWORD *)(a1 + 4);
      if (v12 >= v11)
        return 1;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 4);
      v12 = *(_DWORD *)(a2 + 4);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v10;
    *(_DWORD *)(a1 + 4) = v12;
    result = 2;
    *(_DWORD *)(a2 + 4) = v11;
  }
  return result;
}

void Espresso::gather_kernel_cpu::~gather_kernel_cpu(Espresso::gather_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::gather_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, unsigned int ***a3, char **a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  int v17;
  float v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  float v34;
  int v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;

  if (a1[70] == -2 && a1[71] == -2 && a1[72] == -2 && a1[73] == -2 && a1[74] == -2)
  {
    v7 = *a4;
  }
  else
  {
    v7 = *a4;
    if (a4[1] - *a4 != 32)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
  }
  if (*(_QWORD *)v7 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v7 + 32))(*(_QWORD *)v7))
  {
    v8 = *(_QWORD *)(*(_QWORD *)v7 + 160);
    v67 = *(std::__shared_weak_count **)(*(_QWORD *)v7 + 168);
    v83 = v67;
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(p_shared_owners);
      while (__stxr(v69 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v83 = 0;
  }
  v9 = *a4;
  v10 = *((_QWORD *)*a4 + 2);
  if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v70 = *((_QWORD *)v9 + 2);
    v11 = *(_QWORD *)(v70 + 160);
    v71 = *(std::__shared_weak_count **)(v70 + 168);
    v82 = v71;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
  }
  else
  {
    v11 = 0;
    v82 = 0;
  }
  v12 = *a3;
  v13 = **a3;
  if (v13 && !(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v13 + 32))(v13))
  {
    v14 = *((_QWORD *)*v12 + 20);
    v15 = (std::__shared_weak_count *)*((_QWORD *)*v12 + 21);
    if (v15)
    {
      v74 = (unint64_t *)&v15->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = *(_DWORD **)*a4;
  v17 = a1[70];
  if (v17 == -2)
    v18 = **(float **)(v11 + 24);
  else
    v18 = (float)v17;
  v19 = v16[2];
  v20 = a1[71];
  if (v20 == -2)
    v21 = *(float *)(*(_QWORD *)(v11 + 24) + 4);
  else
    v21 = (float)v20;
  v22 = v16[3] * v19;
  v23 = a1[72];
  if (v23 == -2)
    v24 = *(float *)(*(_QWORD *)(v11 + 24) + 8);
  else
    v24 = (float)v23;
  v25 = v22 * v16[4];
  v26 = v16[5];
  v27 = a1[73];
  if (v27 == -2)
    v28 = *(float *)(*(_QWORD *)(v11 + 24) + 12);
  else
    v28 = (float)v27;
  v29 = 0;
  v78 = v25 * v26;
  v30 = (int)v18;
  v31 = (int)v21;
  v32 = (int)v24;
  v33 = *(int *)(v11 + 8);
  do
  {
    v33 *= *(int *)(v11 + 12 + v29);
    v29 += 4;
  }
  while (v29 != 12);
  v34 = 0.0;
  if (v33 >= 5)
  {
    v35 = a1[74];
    if (v35 == -2)
      v34 = *(float *)(*(_QWORD *)(v11 + 24) + 16);
    else
      v34 = (float)v35;
  }
  v76 = v15;
  v36 = (int)v28;
  v77 = (int)v34;
  if (v17 == -1 || v20 == -1 || v23 == -1 || v27 == -1 || a1[74] == -1)
  {
    v37 = **a3;
    v79 = v37[6];
    if (v79 >= 1)
    {
      v81 = 0;
      v80 = 0;
      v38 = v37[2];
      v39 = v37[3];
      v40 = v37[4];
      v41 = v37[5];
      v42 = v39 * v38;
      do
      {
        if (v41 >= 1)
        {
          v43 = 0;
          v44 = (int)v34;
          if (v77 < 0)
            v44 = v80;
          v45 = v44 * v78;
          v46 = v81;
          do
          {
            if (v40 >= 1)
            {
              v47 = 0;
              if (v36 >= 0)
                v48 = (int)v28;
              else
                v48 = v43;
              v49 = v45 + v48 * v25;
              v50 = v46;
              do
              {
                if (v39 >= 1)
                {
                  v51 = 0;
                  if (v32 >= 0)
                    v52 = (int)v24;
                  else
                    v52 = v47;
                  v53 = v49 + v52 * v22;
                  v54 = v50;
                  do
                  {
                    if ((int)v38 >= 1)
                    {
                      v55 = 0;
                      if (v31 >= 0)
                        v56 = (int)v21;
                      else
                        v56 = v51;
                      v57 = *(_QWORD *)(v8 + 24);
                      v58 = v53 + v56 * v19;
                      v59 = *(_QWORD *)(v14 + 24);
                      do
                      {
                        if (v30 >= 0)
                          v60 = v30;
                        else
                          v60 = v55;
                        *(_DWORD *)(v59 + 4 * (v54 + (int)v55++)) = *(_DWORD *)(v57 + 4 * (v58 + v60));
                      }
                      while (v38 != v55);
                    }
                    ++v51;
                    v54 += v38;
                  }
                  while (v51 != v39);
                }
                ++v47;
                v50 += v42;
              }
              while (v47 != v40);
            }
            ++v43;
            v46 += v42 * v40;
          }
          while (v43 != v41);
        }
        v81 += v42 * v41 * v40;
        ++v80;
      }
      while (v80 != v79);
    }
  }
  else
  {
    **(_DWORD **)(v14 + 24) = *(_DWORD *)(*(_QWORD *)(v8 + 24)
                                        + 4 * (v30 + v19 * v31 + v22 * v32 + v25 * v36 + v78 * v77));
  }
  if (v76)
  {
    v61 = (unint64_t *)&v76->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v82)
  {
    v63 = (unint64_t *)&v82->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v83)
  {
    v65 = (unint64_t *)&v83->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1917E3824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::dynamic_quantize_kernel_cpu::~dynamic_quantize_kernel_cpu(Espresso::dynamic_quantize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dynamic_quantize_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  int v72;
  int32x4_t v73;
  int v74;
  void *__p;
  void *v76;

  Espresso::abstract_blob_container::shape((char *)&v72, **a3);
  v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v73)));
  if (v74 == -1)
    v9 = v73.i32[3] != 1;
  else
    v9 = v74 == 5;
  if (v73.i32[3])
    v9 = 0;
  if ((v8 & 1) == 0 && v72 >= 1 && !v9)
  {
    if (a1[71])
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a1 + 328))(a1, a2, a3, a4);
      goto LABEL_11;
    }
    Espresso::get_cpu_blob_8((uint64_t)*a3, &v70);
    v10 = *a4;
    v11 = **a4;
    if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
    {
      v15 = *v10;
      v12 = *(_QWORD *)(*v10 + 160);
      v16 = *(std::__shared_weak_count **)(v15 + 168);
      v68 = v12;
      v69 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
    }
    else
    {
      v12 = 0;
      v68 = 0;
      v69 = 0;
    }
    Espresso::abstract_blob_container::shape((char *)&v58, **a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v62, (const Espresso::layer_shape *)&v58, 0);
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v67 > 3)
    {
      if (v67 == 5)
      {
        v13 = v63 * (uint64_t)v62;
        v14 = v65 * (uint64_t)v66 * v64;
        goto LABEL_39;
      }
      if (v67 == 4)
      {
        v13 = v62;
        v14 = v64 * (uint64_t)v65 * v63;
        goto LABEL_39;
      }
      v13 = 0;
    }
    else
    {
      switch(v67)
      {
        case 1u:
          v13 = 1;
          break;
        case 2u:
          v13 = v62;
          break;
        case 3u:
          v13 = v63 * (uint64_t)v62;
          break;
        case 4u:
          v13 = v63 * (uint64_t)v62 * v64;
          break;
        case 5u:
          v13 = v63 * (uint64_t)v62 * v64 * v65;
          break;
        default:
          v13 = 0;
          break;
      }
      if (v67)
      {
        v14 = *(&v62 + (int)v67 - 1);
        goto LABEL_39;
      }
    }
    v14 = 0;
LABEL_39:
    v19 = *a3;
    v20 = (*a3)[2];
    if (v20 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
    {
      v46 = v19[2];
      v21 = *(_QWORD *)(v46 + 160);
      v47 = *(std::__shared_weak_count **)(v46 + 168);
      v58 = v21;
      v59 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v21 = 0;
      v58 = 0;
      v59 = 0;
    }
    v22 = *a3;
    v23 = (*a3)[6];
    if (v23 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23))
    {
      v50 = v22[6];
      v24 = *(_QWORD *)(v50 + 160);
      v51 = *(std::__shared_weak_count **)(v50 + 168);
      v57 = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
    }
    else
    {
      v24 = 0;
      v57 = 0;
    }
    v25 = *a3;
    v26 = v25[4];
    if (v26 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26))
    {
      v54 = v25[4];
      v28 = *(_QWORD *)(v54 + 160);
      v27 = *(std::__shared_weak_count **)(v54 + 168);
      if (v27)
      {
        v55 = (unint64_t *)&v27->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    if (v13)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        vDSP_sve((const float *)(*(_QWORD *)(v12 + 24) + v29), 1, (float *)(*(_QWORD *)(v24 + 24) + v30), v14);
        v30 += 4;
        v29 += 4 * v14;
        --v13;
      }
      while (v13);
    }
    v31 = 0;
    v32 = *(_DWORD *)(v12 + 8);
    do
    {
      v32 *= *(_DWORD *)(v12 + 12 + v31);
      v31 += 4;
    }
    while (v31 != 12);
    Espresso::range_quantizer<signed char>::quantize_chunks(*(_QWORD *)(v12 + 24), v32, v14, *(_QWORD *)(v28 + 24), *(_QWORD *)(v21 + 24), *(_QWORD *)(v70 + 24));
    if (v27)
    {
      v33 = (unint64_t *)&v27->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v57)
    {
      v35 = (unint64_t *)&v57->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v37 = v59;
    if (v59)
    {
      v38 = (unint64_t *)&v59->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v69;
    if (v69)
    {
      v41 = (unint64_t *)&v69->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v71;
    if (v71)
    {
      v44 = (unint64_t *)&v71->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
LABEL_11:
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
}

void sub_1917E3D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::dynamic_quantize_kernel_cpu::blob_options(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;

  if (a2 || !a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBE228;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((_BYTE *)v5 + 88) = 0;
    v5[10] = 0;
    a3[1] = v5;
    *((_BYTE *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 2;
    v5[3] = &off_1E2D9B4D8;
    *a3 = v5 + 3;
  }
}

void Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  vDSP_Length v22;
  float v23;
  float v24;
  Espresso *v25;
  const char *v26;
  unsigned __int8 v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  float __B;
  float __C;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  double v56;
  void *__p;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = a3[1];
  (*(void (**)(_QWORD))(**(_QWORD **)(v7 - 16) + 32))(*(_QWORD *)(v7 - 16));
  v8 = *(_QWORD *)(v7 - 16);
  v9 = *(_QWORD *)(v8 + 160);
  v10 = *(std::__shared_weak_count **)(v8 + 168);
  v51 = v9;
  v52 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  **(_DWORD **)(v9 + 24) = 1065353216;
  v13 = a4[1];
  if (((v13 - *a4) >> 4) + 1 != (uint64_t)(a3[1] - *a3) >> 4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic_quantize_kernel_cpu: top blob count should be equal to bottom blob count");
  if (v13 != *a4)
  {
    v14 = 0;
    do
    {
      Espresso::get_cpu_blob_8(*a3 + 16 * v14, &v49);
      v15 = (_QWORD *)(*a4 + 16 * v14);
      if (*v15 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15))
      {
        v16 = *(_QWORD *)(*v15 + 160);
        v19 = *(std::__shared_weak_count **)(*v15 + 168);
        v47 = v16;
        v48 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
      }
      else
      {
        v16 = 0;
        v47 = 0;
        v48 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)buf, *(_QWORD *)(*a4 + 16 * v14));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v41, (const Espresso::layer_shape *)buf, 0);
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      if (v46 > 3)
      {
        if (v46 == 5)
        {
          v17 = v42 * (uint64_t)v41;
          v18 = v44 * (uint64_t)v45 * v43;
        }
        else if (v46 == 4)
        {
          v17 = v41;
          v18 = v43 * (uint64_t)v44 * v42;
        }
        else
        {
          v17 = 0;
LABEL_25:
          v18 = 0;
        }
      }
      else
      {
        switch(v46)
        {
          case 1u:
            v17 = 1;
            if (!v46)
              goto LABEL_25;
            break;
          case 2u:
            v17 = v41;
            if (!v46)
              goto LABEL_25;
            break;
          case 3u:
            v17 = v42 * (uint64_t)v41;
            if (!v46)
              goto LABEL_25;
            break;
          case 4u:
            v17 = v42 * (uint64_t)v41 * v43;
            if (!v46)
              goto LABEL_25;
            break;
          case 5u:
            v17 = v42 * (uint64_t)v41 * v43 * v44;
            if (!v46)
              goto LABEL_25;
            break;
          default:
            v17 = 0;
            if (!v46)
              goto LABEL_25;
            break;
        }
        v18 = *(&v41 + (int)v46 - 1);
      }
      __C = 0.0;
      v22 = v18 * v17;
      vDSP_maxmgv(*(const float **)(v16 + 24), 1, &__C, v18 * v17);
      v23 = __C;
      if (fabsf(__C) <= 1.0e-10)
      {
        __C = 1.0;
        v23 = 1.0;
      }
      v24 = 127.0 / v23;
      if (v24 >= (float)(2147500000.0 / (float)((float)(unint64_t)v18 * 127.0)))
        v24 = 2147500000.0 / (float)((float)(unint64_t)v18 * 127.0);
      __B = v24;
      v38 = 1.0 / v24;
      vDSP_vsmul(*(const float **)(v16 + 24), 1, &__B, *(float **)(v16 + 24), 1, v22);
      vDSP_vfixr8(*(const float **)(v16 + 24), 1, *(char **)(v49 + 24), 1, v22);
      vDSP_vsmul(*(const float **)(v16 + 24), 1, &v38, *(float **)(v16 + 24), 1, v22);
      **(float **)(v51 + 24) = __B * **(float **)(v51 + 24);
      if ((v27 & 1) == 0)
      {
        if ((_DWORD)v25)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
          Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BF9;
        }
      }
      if (Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        Espresso::espresso_os_log_subsystem(v25, v26);
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          v35 = a1 + 176;
          if (*(char *)(a1 + 199) < 0)
            v35 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)buf = 136315394;
          v54 = v35;
          v55 = 2048;
          v56 = __B;
          _os_log_debug_impl(&dword_190DAF000, v28, OS_LOG_TYPE_DEBUG, "dynamic_quantize_kernel_cpu: %s activation scale: %f", buf, 0x16u);
        }

      }
      v29 = v48;
      if (v48)
      {
        v30 = (unint64_t *)&v48->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v50;
      if (v50)
      {
        v33 = (unint64_t *)&v50->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      ++v14;
    }
    while (v14 < (uint64_t)(a4[1] - *a4) >> 4);
    v10 = v52;
  }
  if (v10)
  {
    v36 = (unint64_t *)&v10->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1917E4380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void Espresso::dynamic_dequantize_kernel_cpu::~dynamic_dequantize_kernel_cpu(Espresso::dynamic_dequantize_kernel_cpu *this)
{
  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  BOOL v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  vDSP_Length v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  void *__p;
  void *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  int v96;
  int32x4_t v97;
  int v98;
  void *v99;
  void *v100;

  Espresso::abstract_blob_container::shape((char *)&v96, **(_QWORD **)a3);
  v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v97)));
  if (v98 == -1)
    v9 = v97.i32[3] != 1;
  else
    v9 = v98 == 5;
  if (v97.i32[3])
    v9 = 0;
  if ((v8 & 1) == 0 && v96 >= 1 && !v9)
  {
    v10 = *(uint64_t **)a3;
    if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
      || !*v10
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
    {
      v11 = 0;
      v12 = 0;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v24 = *v10;
      v12 = *(_QWORD *)(*v10 + 160);
      v11 = *(std::__shared_weak_count **)(v24 + 168);
      v94 = v12;
      v95 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
    }
    v13 = *(_QWORD **)a4;
    if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4
      && *v13
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13) == 3)
    {
      v15 = *(_QWORD *)(*v13 + 208);
      v14 = *(std::__shared_weak_count **)(*v13 + 216);
      v92 = v15;
      v93 = v14;
      if (v14)
      {
        v16 = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    else
    {
      v15 = 0;
      v92 = 0;
      v93 = 0;
    }
    v18 = *(_QWORD **)a4;
    if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
      || !*v18
      || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 32))(*v18))
    {
      v19 = 0;
      v90 = 0;
      v91 = 0;
    }
    else
    {
      v27 = *v18;
      v19 = *(_QWORD *)(*v18 + 160);
      v28 = *(std::__shared_weak_count **)(v27 + 168);
      v90 = v19;
      v91 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
    }
    if (v12)
    {
      if (v15)
      {
        v20 = 0;
        v21 = *(int *)(v12 + 8);
        do
        {
          v21 *= *(int *)(v12 + 12 + v20);
          v20 += 4;
        }
        while (v20 != 12);
        vDSP_vflt32(*(const int **)(v15 + 24), 1, *(float **)(v12 + 24), 1, v21);
        goto LABEL_31;
      }
      if (v19)
      {
LABEL_31:
        Espresso::abstract_blob_container::shape((char *)v81, **(_QWORD **)a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v84, (const Espresso::layer_shape *)v81, 0);
        if (__p)
        {
          v83 = __p;
          operator delete(__p);
        }
        if (v89 > 3)
        {
          if (v89 == 5)
          {
            v22 = v85 * (uint64_t)v84;
            v23 = v87 * (uint64_t)v88 * v86;
          }
          else if (v89 == 4)
          {
            v22 = v84;
            v23 = v86 * (uint64_t)v87 * v85;
          }
          else
          {
            v22 = 0;
LABEL_42:
            v23 = 0;
          }
        }
        else
        {
          switch(v89)
          {
            case 1u:
              v22 = 1;
              if (!v89)
                goto LABEL_42;
              break;
            case 2u:
              v22 = v84;
              if (!v89)
                goto LABEL_42;
              break;
            case 3u:
              v22 = v85 * (uint64_t)v84;
              if (!v89)
                goto LABEL_42;
              break;
            case 4u:
              v22 = v85 * (uint64_t)v84 * v86;
              if (!v89)
                goto LABEL_42;
              break;
            case 5u:
              v22 = v85 * (uint64_t)v84 * v86 * v87;
              if (!v89)
                goto LABEL_42;
              break;
            default:
              v22 = 0;
              if (!v89)
                goto LABEL_42;
              break;
          }
          v23 = *(&v84 + (int)v89 - 1);
        }
        v79 = v22;
        v80 = v23;
        v31 = 41;
        if (!*(_DWORD *)(a1 + 304))
          v31 = 42;
        v32 = *(_QWORD *)(v12 + 24);
        if (v19)
          v32 = *(_QWORD *)(v19 + 24);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 8 * v31))(a1, a2, *(_QWORD *)(v12 + 24), &v79, v32, a4);
        memset(&v81[1], 0, 24);
        v33 = *(_DWORD *)(a1 + 300);
        v65 = 0x100000001;
        v66 = 1;
        v34 = *(_QWORD *)(a1 + 292);
        v67 = *(_QWORD *)(a1 + 284);
        v68 = v34;
        v69 = v33;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = -1;
        __asm { FMOV            V1.2S, #1.0 }
        v74 = _D1;
        v75 = 0;
        v77 = 0u;
        v76 = v81[0];
        v78 = 0;
        v63 = v12;
        v64 = v11;
        if (v11)
        {
          v40 = (unint64_t *)&v11->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = 0;
        v43 = *(_DWORD *)(v12 + 8);
        do
        {
          v43 *= *(_DWORD *)(v12 + 12 + v42);
          v42 += 4;
        }
        while (v42 != 12);
        v44 = *(_QWORD *)(a1 + 360);
        v45 = *(std::__shared_weak_count **)(a1 + 368);
        v62[0] = v44;
        v62[1] = v45;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v65, &v63, v43, (uint64_t)v62, v80, v79);
        if (v45)
        {
          v48 = (unint64_t *)&v45->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v50 = v64;
        if (v64)
        {
          v51 = (unint64_t *)&v64->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = v91;
        if (v91)
        {
          v54 = (unint64_t *)&v91->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v93;
        if (v93)
        {
          v57 = (unint64_t *)&v93->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v95;
        if (v95)
        {
          v60 = (unint64_t *)&v95->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        goto LABEL_98;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic_dequantize_kernel_cpu: Atleast one bottom and one top required");
  }
LABEL_98:
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
}

void sub_1917E4988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 160);
  v40 = *(void **)(v38 - 104);
  if (v40)
  {
    *(_QWORD *)(v38 - 96) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

_BYTE *Espresso::dynamic_dequantize_kernel_cpu::blob_options@<X0>(char a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _BYTE *result;
  _BYTE *v8;

  result = getenv("ESPRESSO_USE_I32_OUTPUT");
  if (a2 || (a1 & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v8 = result;
    result = operator new(0x70uLL);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = &off_1E2DBE228;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_QWORD *)result + 3) = &off_1E2D9B4D8;
    *((_DWORD *)result + 12) = 1065353216;
    *((_QWORD *)result + 7) = 0x1FFFFFFFFLL;
    *((_QWORD *)result + 12) = 0;
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 9) = 0;
    result[88] = 0;
    *((_QWORD *)result + 10) = 0;
    *a3 = result + 24;
    a3[1] = result;
    result[32] = 1;
    if (v8)
    {
      if (*v8 == 49)
        *((_DWORD *)result + 9) = 3;
    }
  }
  return result;
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch_simple_mode(uint64_t a1, uint64_t a2, float *a3, unint64_t *a4, const float *a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float __B;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v10 = *a6;
  (*(void (**)(_QWORD))(**(_QWORD **)(*a6 + 16) + 32))(*(_QWORD *)(*a6 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 + 160);
  v13 = *(std::__shared_weak_count **)(v11 + 168);
  v25 = v12;
  v26 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  __B = 1.0 / (float)(*(float *)(a1 + 308) * **(float **)(v12 + 24));
  vDSP_vsmul(a5, 1, &__B, a3, 1, a4[1] * *a4);
  v16 = *(_QWORD *)(a1 + 312);
  v17 = *a4;
  if (*(_QWORD *)(a1 + 360))
  {
    if (v16)
    {
      if (v17)
      {
        v18 = 0;
        do
        {
          v19 = &a3[a4[1] * v18];
          vDSP_vma(v19, 1, *(const float **)(*(_QWORD *)(a1 + 312) + 16), 1, *(const float **)(*(_QWORD *)(a1 + 360) + 16), 1, v19, 1, a4[1]);
          ++v18;
        }
        while (v18 < *a4);
      }
    }
    else if (v17)
    {
      v21 = 0;
      do
      {
        vDSP_vadd(&a3[a4[1] * v21], 1, *(const float **)(*(_QWORD *)(a1 + 360) + 16), 1, &a3[a4[1] * v21], 1, a4[1]);
        ++v21;
      }
      while (v21 < *a4);
    }
  }
  else if (v16 && v17)
  {
    v20 = 0;
    do
    {
      vDSP_vmul(&a3[a4[1] * v20], 1, *(const float **)(*(_QWORD *)(a1 + 312) + 16), 1, &a3[a4[1] * v20], 1, a4[1]);
      ++v20;
    }
    while (v20 < *a4);
  }
  if (v13)
  {
    v22 = (unint64_t *)&v13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1917E4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch_legacy_mode(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *__E;
  const float *v20;
  const float *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;

  v8 = *a6;
  v9 = *(_QWORD *)(*a6 + 16);
  if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v29 = *(_QWORD *)(v8 + 16);
    v31 = *(_QWORD *)(v29 + 160);
    v30 = *(std::__shared_weak_count **)(v29 + 168);
    v45 = v31;
    v50 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
  }
  else
  {
    v45 = 0;
    v50 = 0;
  }
  v10 = *a6;
  v11 = *(_QWORD *)(*a6 + 32);
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v34 = *(_QWORD *)(v10 + 32);
    v36 = *(_QWORD *)(v34 + 160);
    v35 = *(std::__shared_weak_count **)(v34 + 168);
    v44 = v36;
    v49 = v35;
    if (v35)
    {
      v37 = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
  }
  else
  {
    v44 = 0;
    v49 = 0;
  }
  v12 = *a6;
  v13 = *(_QWORD *)(*a6 + 48);
  if (v13 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
  {
    v39 = *(_QWORD *)(v12 + 48);
    v14 = *(_QWORD *)(v39 + 160);
    v40 = *(std::__shared_weak_count **)(v39 + 168);
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v43 = v40;
    }
    else
    {
      v43 = 0;
    }
  }
  else
  {
    v43 = 0;
    v14 = 0;
  }
  if (*a4)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 4 * a4[1];
    do
    {
      __E = (float *)(a3 + v15);
      v20 = *(const float **)(a1[39] + 16);
      v21 = *(const float **)(a1[41] + 16);
      vDSP_vmma((const float *)(*(_QWORD *)(v44 + 24) + v16), 0, (const float *)(a5 + v15), 1, (const float *)(*(_QWORD *)(v45 + 24) + v16), 0, *(const float **)(a1[43] + 16), 1, (float *)(a3 + v15), 1, *(int *)(a1[43] + 8));
      vDSP_vmma(__E, 1, v20, 1, v21, 1, (const float *)(*(_QWORD *)(v14 + 24) + v16), 0, __E, 1, *(int *)(a1[43] + 8));
      v22 = a1[45];
      if (v22)
        vDSP_vadd(__E, 1, *(const float **)(v22 + 16), 1, __E, 1, *(int *)(a1[43] + 8));
      ++v17;
      v16 += 4;
      v15 += v18;
    }
    while (v17 < *a4);
  }
  if (v43)
  {
    v23 = (unint64_t *)&v43->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v49)
  {
    v25 = (unint64_t *)&v49->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v50)
  {
    v27 = (unint64_t *)&v50->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_1917E4FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13 - 96);
  _Unwind_Resume(a1);
}

void Espresso::quantized_gather_kernel_cpu::~quantized_gather_kernel_cpu(Espresso::quantized_gather_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D96698;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D96698;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::quantized_gather_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  float *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v28;
  signed int v29;
  int v30;
  uint64_t v31;
  float *v32;
  int v33;
  int v34;
  int v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  float *v77;
  unsigned int v78;
  int v79;
  double v80;
  float v81;
  float v82;
  BOOL v83;
  int v84;
  double v85;
  double v86;
  float v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  int v105;
  float v106;
  float v107;
  int v108;
  float v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  _DWORD *v115;
  float __B;
  float v117;
  float v118;
  float __C;
  float v120;
  float __A;
  float v122;
  float v123;
  int v124[10];
  void *v125;
  void *v126;
  _BYTE v127[20];
  int v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v135 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v8 = **a3;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v96 = *v7;
    v9 = *(_QWORD *)(*v7 + 160);
    v97 = *(std::__shared_weak_count **)(v96 + 168);
    v133 = v9;
    v134 = v97;
    if (v97)
    {
      p_shared_owners = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldxr(p_shared_owners);
      while (__stxr(v99 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v133 = 0;
    v134 = 0;
  }
  v10 = *a4;
  v11 = **a4;
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v100 = *(std::__shared_weak_count **)(*v10 + 168);
    v131 = v12;
    v132 = v100;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
  }
  else
  {
    v12 = 0;
    v131 = 0;
    v132 = 0;
  }
  v14 = a4;
  v13 = (char *)*a4;
  if ((unint64_t)((char *)v14[1] - v13) < 0x11)
  {
    v16 = *(_QWORD *)(a1 + 352);
    v17 = *(std::__shared_weak_count **)(a1 + 360);
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)v13 + 2) + 32))(*((_QWORD *)v13 + 2));
    v15 = *((_QWORD *)v13 + 2);
    v16 = *(_QWORD *)(v15 + 160);
    v17 = *(std::__shared_weak_count **)(v15 + 168);
  }
  v129 = v16;
  v130 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_DWORD **)(v9 + 24);
  v21 = *(float **)(v12 + 24);
  v22 = *(_QWORD *)(v16 + 24);
  Espresso::abstract_blob_container::shape((char *)v124, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v127, (const Espresso::layer_shape *)v124, 0);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  v24 = v128;
  v25 = 1;
  if (v128 >= 1)
  {
    v26 = (int *)v127;
    do
    {
      v27 = *v26++;
      v25 *= v27;
      --v24;
    }
    while (v24);
  }
  v28 = *(unsigned int *)(a1 + 304);
  v112 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 16);
  v29 = v25 / v28;
  if (!*(_DWORD *)(a1 + 312))
  {
    if (v29 < 1)
      goto LABEL_80;
    v74 = 0;
LABEL_71:
    v75 = 0;
    v76 = (unsigned __int8 *)(v112 + (v28 * (int)(*v21 + 0.5)));
    while (1)
    {
      v77 = (float *)(v22 + 4 * ((v75 * 4) & 0xFFFFFFFC));
      v78 = *v76;
      v79 = v78 - 64;
      if (v78 <= 0x40)
        break;
      v83 = v78 >= 0xC0;
      v84 = v78 - 192;
      if (v84 != 0 && v83)
      {
        v80 = (double)v84;
        v81 = v77[2];
        v82 = v77[3];
        goto LABEL_77;
      }
      v80 = (double)v79;
      v81 = v77[1];
      v82 = v77[2];
      v85 = v81;
      v86 = 0.0078125;
LABEL_78:
      v87 = v85 + v80 * v86 * (float)(v82 - v81);
      *(float *)&v20[v75] = v87;
      ++v76;
      if (v28 == ++v75)
      {
        v20 = (_DWORD *)((char *)v20 + v75 * 4);
        ++v74;
        ++v21;
        if (v74 == v29)
          goto LABEL_80;
        goto LABEL_71;
      }
    }
    v80 = (double)v78;
    v81 = *v77;
    v82 = v77[1];
LABEL_77:
    v85 = v81;
    v86 = 0.015625;
    goto LABEL_78;
  }
  v104 = v17;
  v103 = (uint64_t)&v103;
  v124[0] = 1 << *(_DWORD *)(a1 + 316);
  v30 = MEMORY[0x1E0C80A78](v23);
  v32 = (float *)((char *)&v103 - v31);
  v33 = *(_DWORD *)(a1 + 304);
  v34 = *(_DWORD *)(a1 + 316);
  v123 = 3.1416;
  v122 = -1.5708;
  __A = 1.0;
  v120 = -1.0;
  if (v30 >= 1)
  {
    v35 = 0;
    v111 = ((v34 * v33 - 1) >> 3) + 1;
    v109 = 0.012258;
    v108 = 1048037716;
    v107 = -1.6;
    v106 = 0.12021;
    v105 = 1060940836;
    v115 = (_DWORD *)a1;
    v110 = v30;
    do
    {
      v113 = v35;
      v114 = (int)(*v21 + 0.5);
      v36 = (float *)(v22 + 16 * v114);
      __C = *v36;
      v37 = v36[1];
      v118 = v36[2];
      v117 = v36[3];
      v38 = v124[0];
      __B = (float)(v37 - __C) / (float)(v124[0] - 1);
      if (v124[0] >= 1)
      {
        v39 = 0;
        do
        {
          v32[v39] = (float)(int)v39;
          ++v39;
        }
        while (v38 != v39);
      }
      vDSP_vsmsa(v32, 1, &__B, &__C, v32, 1, (int)v38);
      v40 = v115[78];
      switch((_DWORD)v40)
      {
        case 3:
          vDSP_vsmsa(v32, 1, &v120, &__A, v32, 1, v124[0]);
          vDSP_svdiv(&__A, v32, 1, v32, 1, v124[0]);
          vDSP_vsadd(v32, 1, &v120, v32, 1, v124[0]);
          vvlogf(v32, v32, v124);
          break;
        case 2:
          vDSP_vsmsa(v32, 1, &v123, &v122, v32, 1, v124[0]);
          vvtanf(v32, v32, v124);
          break;
        case 1:
          v41 = v124[0];
          if (v124[0] >= 1)
          {
            v42 = 0;
            do
            {
              v43 = v32[v42];
              v44 = -1.0e30;
              if (v43 > 0.0)
              {
                v44 = 1.0e30;
                if (v43 < 1.0)
                {
                  v45 = v43 + -0.5;
                  if (fabsf(v43 + -0.5) <= 0.425)
                  {
                    v54 = 0.18063 - (float)(v45 * v45);
                    v55 = 0.0;
                    v56 = 3;
                    do
                    {
                      v55 = Espresso::normal_inverse_cdf_4(float)::a[v56] + (float)(v55 * v54);
                      v57 = v56-- + 1;
                    }
                    while (v57 > 1);
                    v58 = 0.0;
                    v59 = 3;
                    do
                    {
                      v58 = Espresso::normal_inverse_cdf_4(float)::b[v59] + (float)(v58 * v54);
                      v60 = v59-- + 1;
                    }
                    while (v60 > 1);
                    v44 = (float)(v45 * v55) / v58;
                  }
                  else
                  {
                    v46 = 1.0 - v43;
                    if (v45 < 0.0)
                      v46 = v32[v42];
                    if (v46 <= 0.0)
                      v46 = 0.000001;
                    v47 = sqrtf(-logf(v46));
                    if (v47 <= 5.0)
                    {
                      v48 = v47 + v107;
                      v49 = 0.0;
                      v61 = 3;
                      do
                      {
                        v49 = Espresso::normal_inverse_cdf_4(float)::c[v61] + (float)(v49 * v48);
                        v62 = v61-- + 1;
                      }
                      while (v62 > 1);
                      v52 = v106 + (float)(v48 * 0.0);
                      v53 = (float *)&v136 + 1;
                    }
                    else
                    {
                      v48 = v47 + -5.0;
                      v49 = 0.0;
                      v50 = 3;
                      do
                      {
                        v49 = Espresso::normal_inverse_cdf_4(float)::e[v50] + (float)(v49 * v48);
                        v51 = v50-- + 1;
                      }
                      while (v51 > 1);
                      v52 = v109 + (float)(v48 * 0.0);
                      v53 = (float *)&v137;
                    }
                    v44 = v49 / (float)((float)((float)(*(v53 - 64) + (float)(v52 * v48)) * v48) + 1.0);
                    if (v45 < 0.0)
                      v44 = -v44;
                  }
                }
              }
              v32[v42++] = v44;
            }
            while (v42 != v41);
          }
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Unsupported Quantized Gather type %d", v40);
      }
      vDSP_vsmsa(v32, 1, &v117, &v118, v32, 1, v124[0]);
      v63 = (unsigned __int8 *)(v112 + v111 * v114);
      v64 = v115[79];
      if ((_DWORD)v64 == 8)
      {
        v72 = v115[76];
        if (v72)
        {
          v67 = v110;
          v68 = v113;
          do
          {
            v73 = *v63++;
            *v20++ = LODWORD(v32[v73]);
            --v72;
          }
          while (v72);
          goto LABEL_67;
        }
      }
      else
      {
        if ((_DWORD)v64 != 4)
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Unsupported Quantized Gather bit length %d", v64);
        v65 = v115[76];
        if (v65)
        {
          v66 = 0;
          v67 = v110;
          v68 = v113;
          do
          {
            v69 = *v63;
            v70 = v69 >> 4;
            v71 = v69 & 0xF;
            v63 += v66 & 1;
            if ((v66 & 1) == 0)
              v71 = v70;
            *v20++ = LODWORD(v32[v71]);
            ++v66;
          }
          while (v65 != v66);
          goto LABEL_67;
        }
      }
      v67 = v110;
      v68 = v113;
LABEL_67:
      v35 = v68 + 1;
      ++v21;
    }
    while (v35 != v67);
  }
  v17 = v104;
LABEL_80:
  if (v17)
  {
    v88 = (unint64_t *)&v17->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v90 = v132;
  if (v132)
  {
    v91 = (unint64_t *)&v132->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v134;
  if (v134)
  {
    v94 = (unint64_t *)&v134->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1917E598C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void Espresso::quantized_gather_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v36 = 0;
  v37 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v36, *a6, a6[1]);
  v10 = *((char *)a3 + 23);
  if (v10 < 0)
  {
    if (a3[1] != 6)
      goto LABEL_13;
    a3 = (uint64_t *)*a3;
  }
  else if (v10 != 6)
  {
    goto LABEL_13;
  }
  if (*(_DWORD *)a3 != 1701666641 || *((_WORD *)a3 + 2) != 24948)
  {
LABEL_13:
    v31 = v36;
    v32 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v35, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v31, ((*(_DWORD *)(a1 + 316) * *(_DWORD *)(a1 + 304) - 1) >> 3) + 1, *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 336, &v35);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v32;
    if (v32)
    {
      v18 = (unint64_t *)&v32->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  v20 = 308;
  if (!*(_DWORD *)(a1 + 312))
    v20 = 304;
  v21 = *(_DWORD *)(a1 + v20);
  v33 = v36;
  v34 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v35, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v33, 4 * v21, 1, 1, 1, (a4 & 0x3F) == 0);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 352, &v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v17 = v34;
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v27);
    while (__stlxr(v19 - 1, v27));
LABEL_24:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_40:
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1917E5C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

uint64_t Espresso::quantized_gather_kernel_cpu::supports_weight_key()
{
  return 1;
}

void Espresso::general_concat_kernel_cpu::~general_concat_kernel_cpu(Espresso::general_concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::spatial_transformer_kernel_cpu::~spatial_transformer_kernel_cpu(Espresso::spatial_transformer_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::spatial_transformer_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  float *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _BOOL4 v55;
  _BOOL4 v57;
  _BOOL4 v59;
  _BOOL4 v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  const char *v76;
  _BOOL4 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  __int128 v91;

  v91 = 0uLL;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("spatial_transformer_kernel_cpu: requires two inputs");
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v90, (*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  v86 = v90;
  v91 = v90;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v90, **a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v88, **a3, (std::__shared_weak_count *)(*a3)[1]);
  v80 = v90;
  if (!(_QWORD)v90)
  {
    v76 = "Invalid state: blob_f4::ptr image in spatial_transformer_kernel_cpu is null";
    goto LABEL_102;
  }
  if (!v88)
  {
    v76 = "Invalid state: blob_f4::ptr ocrop in spatial_transformer_kernel_cpu is null";
LABEL_102:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v76);
  }
  v16 = *(unsigned int *)(v88 + 12);
  v17 = *(int *)(v88 + 8);
  v18 = *(_DWORD *)(a1 + 280);
  if ((v18 - 1) <= 2 && ((int)v17 < 2 || (int)v16 <= 1))
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("output dimensions ocrop_w, ocrop_h must both be greater than 1 for spatial_transformer_kernel_cpu.");
  v79 = v88;
  v19 = v86;
  if (!v86)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid state: blob_f4::ptr coordinates in spatial_transformer_kernel_cpu is null");
  v20 = *(_DWORD *)(v90 + 20);
  v22 = v18 == 1 && v20 == 1;
  v77 = v22;
  v23 = *(_DWORD *)(v86 + 16);
  v24 = v23 & 1;
  v84 = v23;
  if (v23 < 0)
    v24 = -v24;
  if (v18 == 2)
    v24 = v24 == 0;
  v83 = v24;
  if (v24)
    v25 = *(_DWORD *)(v90 + 20);
  else
    v25 = 1;
  v82 = (v25 * *(_DWORD *)(v86 + 20));
  if ((int)v82 >= 1)
  {
    v87 = 0;
    v26 = 0;
    v27 = *(_DWORD *)(v90 + 8);
    v28 = *(_DWORD *)(v90 + 12);
    v29 = *(unsigned int *)(v90 + 16);
    v78 = v20 - 1;
    v81 = *(_QWORD *)(v19 + 24);
    do
    {
      v30 = (float *)(v81 + 4 * v26 * v84);
      if (v83)
      {
        v31 = (int)v30[v26];
        ++v30;
        v32 = v78;
        if (v78 >= v31)
          v32 = v31;
      }
      else if (v77)
      {
        v32 = 0;
      }
      else
      {
        v32 = v26;
      }
      if (v18 != 1)
      {
        if (v18 != 2)
        {
          if (v18 == 3)
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid mode argument in spatial_transformer_kernel_cpu.");
        }
        v7 = *v30;
        v8 = v30[1];
        v9 = v30[2];
        v10 = v30[3];
        v11 = v30[4];
        v12 = v30[5];
        v13 = v30[6];
        v14 = v30[7];
        v15 = v30[8];
      }
      v85 = v26;
      if ((int)v29 >= 1)
      {
        v33 = 0;
        v34 = *(_QWORD *)(v80 + 24) + 4 * v28 * v27 * (int)v29 * v32;
        v35 = *(_QWORD *)(v79 + 24) + v87;
        do
        {
          if ((int)v16 >= 1)
          {
            v36 = 0;
            v37 = v34 + 4 * v33 * v28 * v27;
            v38 = v35;
            do
            {
              if ((int)v17 >= 1)
              {
                v39 = 0;
                v40 = (float)((float)((float)(int)v36 + (float)(int)v36) * (float)(1.0 / (float)((float)(int)v16 + -1.0)))
                    + -1.0;
                v41 = *(_DWORD *)(a1 + 300);
                do
                {
                  v42 = (float)((float)((float)(int)v39 + (float)(int)v39)
                              * (float)(1.0 / (float)((float)(int)v17 + -1.0)))
                      + -1.0;
                  if (v18 == 1)
                  {
                    v43 = v30[2] + (float)((float)(v40 * v30[1]) + (float)(*v30 * v42));
                    v44 = v30[5] + (float)((float)(v40 * v30[4]) + (float)(v30[3] * v42));
                  }
                  else
                  {
                    v45 = v9 + (float)((float)(v8 * v40) + (float)(v7 * v42));
                    v46 = v12 + (float)((float)(v11 * v40) + (float)(v10 * v42));
                    v47 = v15 + (float)((float)(v14 * v40) + (float)(v13 * v42));
                    v43 = v45 / v47;
                    v44 = v46 / v47;
                  }
                  v48 = (float)((float)v27 + -1.0) * (float)((float)(v43 + 1.0) * 0.5);
                  v49 = (float)((float)v28 + -1.0) * (float)((float)(v44 + 1.0) * 0.5);
                  if (v41 == 1)
                  {
                    v48 = fmin(fmax(v48, 0.0), (double)(v27 - 1));
                    v49 = fmin(fmax(v49, 0.0), (double)(v28 - 1));
                  }
                  v50 = vcvtms_s32_f32(v48);
                  v51 = v50 + 1;
                  v52 = vcvtms_s32_f32(v49);
                  v53 = v52 + 1;
                  v55 = v50 < 0 || v27 <= v50;
                  v57 = v50 < -1 || v51 >= v27;
                  v59 = v52 < 0 || v28 <= v52;
                  v61 = v52 < -1 || v53 >= v28;
                  v62 = 0.0;
                  v63 = 0.0;
                  if (!v55 && !v59)
                    v63 = *(float *)(v37 + 4 * (v50 + v27 * v52));
                  if (!v55 && !v61)
                    v62 = *(float *)(v37 + 4 * (v50 + v53 * v27));
                  v64 = 0.0;
                  v65 = 0.0;
                  if (!v57 && !v59)
                    v65 = *(float *)(v37 + 4 * (v51 + v27 * v52));
                  if (!v57 && !v61)
                    v64 = *(float *)(v37 + 4 * (v51 + v53 * v27));
                  v66 = v48 - (float)v50;
                  *(float *)(v38 + 4 * v39++) = (float)((float)((float)((float)(v49 - (float)v52)
                                                                      * (float)((float)(1.0 - v66) * v62))
                                                              + (float)((float)((float)(1.0 - v66) * v63)
                                                                      * (float)(1.0 - (float)(v49 - (float)v52))))
                                                      + (float)((float)(v66 * v65)
                                                              * (float)(1.0 - (float)(v49 - (float)v52))))
                                              + (float)((float)(v66 * v64) * (float)(v49 - (float)v52));
                }
                while (v17 != v39);
              }
              ++v36;
              v38 += 4 * v17;
            }
            while (v36 != v16);
          }
          ++v33;
          v35 += 4 * (int)v16 * (int)v17;
        }
        while (v33 != v29);
      }
      v26 = v85 + 1;
      v87 += 4 * (int)v29 * (int)v16 * (int)v17;
    }
    while (v85 + 1 != v82);
  }
  v67 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1917E62A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a13);
  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::copy_kernel_cpu::~copy_kernel_cpu(Espresso::copy_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::scatter_kernel_cpu::~scatter_kernel_cpu(Espresso::scatter_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::scatter_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  int v52;
  double v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  vDSP_Length v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  float *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t i;
  BOOL v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v139;
  BOOL v141;
  BOOL v143;
  BOOL v145;
  BOOL v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  float v152;
  int v153;
  int v154;
  float v155;
  float v156;
  int v157;
  int v158;
  float v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  float *v166;
  BOOL v170;
  unsigned int *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  float v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  _DWORD v247[5];
  int v248;
  float __C;
  uint64_t v250;
  std::__shared_weak_count *v251;
  _DWORD v252[5];
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  int v262;
  void *v263;
  void *v264;
  _BYTE v265[20];
  int v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;

  v7 = *a4;
  if (*a3 == a3[1])
    v8 = *a4;
  else
    v8 = *a3;
  if (*(_BYTE *)(a1 + 301))
  {
    if (*(_DWORD *)(a1 + 296) != -2)
    {
      v11 = 0;
      v10 = 0;
      v269 = 0;
      v270 = 0;
      v15 = 1;
      v12 = v7;
      goto LABEL_55;
    }
    if ((char *)a4[1] - (char *)v7 == 48)
    {
      v10 = (void *)v7[2];
      v11 = (std::__shared_weak_count *)v7[3];
      v269 = (uint64_t)v10;
      v270 = v11;
      v12 = v7;
      if (!v11)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v12 = *a4;
      if (*(_DWORD *)(a1 + 296) != -2)
        v15 = 1;
      else
LABEL_11:
        v15 = 2;
LABEL_55:
      v41 = &v12[2 * v15];
      if (*v41 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v41 + 32))(*v41))
      {
        v48 = *(std::__shared_weak_count **)(*v41 + 168);
        v267 = *(_QWORD *)(*v41 + 160);
        v268 = v48;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
      }
      else
      {
        v267 = 0;
        v268 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)&v260, *v7);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v265, (const Espresso::layer_shape *)&v260, 0);
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      Espresso::abstract_blob_container::shape((char *)&v260, *v41);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v254, (const Espresso::layer_shape *)&v260, 0);
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      Espresso::abstract_blob_container::shape((char *)&v260, *v8);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v252, (const Espresso::layer_shape *)&v260, 0);
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v250, v10, v11);
      v42 = (float)*(int *)(a1 + 296);
      __C = v42;
      v43 = v250;
      if (v250)
      {
        Espresso::abstract_blob_container::shape((char *)&v260, (uint64_t)v10);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v247, (const Espresso::layer_shape *)&v260, 0);
        if (v263)
        {
          v264 = v263;
          operator delete(v263);
        }
        v44 = v248;
        if (v248)
        {
          v45 = v247;
          v46 = 1;
          do
          {
            v47 = *v45++;
            v46 *= v47;
            --v44;
          }
          while (v44);
        }
        else
        {
          v46 = 1;
        }
        vDSP_maxv(*(const float **)(v43 + 24), 1, &__C, v46);
        v42 = __C;
      }
      else
      {
        v46 = 1;
      }
      v51 = (int)v42;
      v52 = v252[0];
      if (v252[0] <= (int)v42)
      {
        if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
        {
          Espresso::abstract_blob_container::shape((char *)&v260, *v7);
          Espresso::throw_exception_selector<Espresso::invalid_state_error,float &,int &,int &,int &,int &,int &>(v260, SHIDWORD(v260), (int)v261, SHIDWORD(v261), v262, __C);
        }
        v252[0] = (int)(float)(v42 + 1.0);
        *(int32x2_t *)&v53 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v252, 0, (uint64_t)&v260);
        v54 = *v8;
        v245 = 0;
        v246 = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, double))(*(_QWORD *)v54 + 16))(v54, &v260, &v245, v53);
        v55 = v246;
        if (v246)
        {
          v56 = (unint64_t *)&v246->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v263)
        {
          v264 = v263;
          operator delete(v263);
        }
      }
      if (*v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
      {
        v58 = *(_QWORD *)(*v8 + 160);
        v89 = *(std::__shared_weak_count **)(*v8 + 168);
        v243 = v58;
        v244 = v89;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
      }
      else
      {
        v58 = 0;
        v243 = 0;
        v244 = 0;
      }
      if (v52 <= v51)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7);
        v69 = *(_QWORD *)(*v7 + 160);
        v66 = *(std::__shared_weak_count **)(*v7 + 168);
        if (v66)
        {
          v70 = (unint64_t *)&v66->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        v72 = 0;
        v73 = *(const void **)(v69 + 24);
        v74 = v69 + 12;
        v75 = *(int *)(v69 + 8);
        do
        {
          v75 *= *(int *)(v74 + v72);
          v72 += 4;
        }
        while (v72 != 12);
        memcpy(*(void **)(v58 + 24), v73, 4 * v75);
        if (v66)
        {
          v76 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v76);
          while (__stlxr(v68 - 1, v76));
LABEL_112:
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
      }
      else if (*a3 != a3[1])
      {
        v59 = *v8;
        v60 = v7[1];
        v241 = *v7;
        v242 = (std::__shared_weak_count *)v60;
        if (v60)
        {
          v61 = (unint64_t *)(v60 + 8);
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v239 = 0;
        v240 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v59 + 144))(v59, a2, &v241, &v239);
        v63 = v240;
        if (v240)
        {
          v64 = (unint64_t *)&v240->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = v242;
        if (v242)
        {
          v67 = (unint64_t *)&v242->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          goto LABEL_112;
        }
      }
      v77 = 0;
      v78 = v243;
      v79 = *(int *)(v243 + 8);
      do
      {
        v79 *= *(int *)(v243 + 12 + v77);
        v77 += 4;
      }
      while (v77 != 12);
      v80 = 0;
      v81 = v252[0];
      v82 = v267;
      v83 = *(int *)(v267 + 8);
      do
      {
        v83 *= *(int *)(v267 + 12 + v80);
        v80 += 4;
      }
      while (v80 != 12);
      if (v259 == v266)
      {
        if (v46 > v254)
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long &>(v254, v46);
        v83 /= (unint64_t)v254;
      }
      else
      {
        if (v266 - 1 == v259)
        {
          v84 = 0;
          goto LABEL_153;
        }
        Espresso::abstract_blob_container::shape((char *)&v260, v269);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v247, (const Espresso::layer_shape *)&v260, 0);
        if (v263)
        {
          v264 = v263;
          operator delete(v263);
        }
        if (v248)
        {
          v85 = 0;
          v86 = 1;
          do
          {
            v87 = *(&v254 + v85);
            v88 = v247[v85];
            if ((_DWORD)v87 != v88)
              Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int &,unsigned long &,int &>(v85, v88, v85, v87);
            v86 *= v87;
            ++v85;
          }
          while (v248 != v85);
        }
        else
        {
          v86 = 1;
        }
        v83 /= v86;
      }
      v84 = v83;
LABEL_153:
      v106 = v79 / v81;
      if (v106 != v83)
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid shape of value blob");
      if (v46)
      {
        v107 = 0;
        v108 = 0;
        v109 = v250;
        v110 = 4 * v84;
        do
        {
          if (v109)
            v111 = (int)*(float *)(*(_QWORD *)(v109 + 24) + 4 * v108);
          else
            v111 = *(_DWORD *)(a1 + 296);
          v112 = (float *)(*(_QWORD *)(v78 + 24) + 4 * v106 * v111);
          if (*(_BYTE *)(a1 + 300))
            vDSP_vadd(v112, 1, (const float *)(*(_QWORD *)(v82 + 24) + v107), 1, v112, 1, v106);
          else
            memcpy(v112, (const void *)(*(_QWORD *)(v82 + 24) + v107), 4 * v106);
          ++v108;
          v107 += v110;
        }
        while (v46 != v108);
      }
      v113 = v244;
      if (v244)
      {
        v114 = (unint64_t *)&v244->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = v251;
      if (v251)
      {
        v117 = (unint64_t *)&v251->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v119 = v268;
      if (v268)
      {
        v120 = (unint64_t *)&v268->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = v270;
      if (v270)
      {
        v123 = (unint64_t *)&v270->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
LABEL_360:
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
        return;
      }
      return;
    }
LABEL_371:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
  }
  if (*(_DWORD *)(a1 + 280) == -2
    && *(_DWORD *)(a1 + 284) == -2
    && *(_DWORD *)(a1 + 288) == -2
    && *(_DWORD *)(a1 + 292) == -2
    && *(_DWORD *)(a1 + 296) == -2
    && (char *)a4[1] - (char *)v7 != 48)
  {
    goto LABEL_371;
  }
  if (*v7 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v16 = *(_QWORD *)(*v7 + 160);
    v92 = *(std::__shared_weak_count **)(*v7 + 168);
    v269 = v16;
    v270 = v92;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
  }
  else
  {
    v16 = 0;
    v269 = 0;
    v270 = 0;
  }
  v17 = *a4;
  v18 = (*a4)[2];
  if (v18 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18))
  {
    v95 = v17[2];
    v19 = *(_QWORD *)(v95 + 160);
    v96 = *(std::__shared_weak_count **)(v95 + 168);
    v267 = v19;
    v268 = v96;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
  }
  else
  {
    v19 = 0;
    v267 = 0;
    v268 = 0;
  }
  v20 = *a4;
  v21 = (*a4)[4];
  if (v21 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21))
  {
    v99 = v20[4];
    v22 = *(_QWORD *)(v99 + 160);
    v100 = *(std::__shared_weak_count **)(v99 + 168);
    v250 = v22;
    v251 = v100;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
  }
  else
  {
    v22 = 0;
    v250 = 0;
    v251 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v260, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v265, (const Espresso::layer_shape *)&v260, 0);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  Espresso::abstract_blob_container::shape((char *)&v260, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v254, (const Espresso::layer_shape *)&v260, 0);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  Espresso::abstract_blob_container::shape((char *)&v260, (*a4)[4]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v252, (const Espresso::layer_shape *)&v260, 0);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  Espresso::abstract_blob_container::shape((char *)&v260, *v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v247, (const Espresso::layer_shape *)&v260, 0);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  v23 = *a3;
  v24 = **a3;
  if (v24 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
  {
    v26 = *(_QWORD *)(*v23 + 160);
    v103 = *(std::__shared_weak_count **)(*v23 + 168);
    v260 = v26;
    v261 = v103;
    if (v103)
    {
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
      v25 = v16;
      v210 = v103;
    }
    else
    {
      v25 = v16;
      v210 = 0;
    }
  }
  else
  {
    v25 = v16;
    v210 = 0;
    v26 = 0;
    v260 = 0;
    v261 = 0;
  }
  v27 = 0;
  v28 = (_DWORD *)**a3;
  v30 = v28[2];
  v29 = v28[3];
  v31 = v28[4];
  v32 = v28[5];
  v33 = (_DWORD *)(*a4)[4];
  v35 = v33[2];
  v34 = v33[3];
  v36 = v33[4];
  v236 = v33[5];
  v37 = *(int *)(v22 + 8);
  do
  {
    v37 *= *(int *)(v22 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  v38 = v252[0];
  if (v253 == v266)
  {
    if (v252[0] != 1)
    {
      v39 = (int)v259;
      if (v259 > 3)
      {
        if (v259 == 5)
        {
LABEL_186:
          v39 = v255 * (uint64_t)v254;
LABEL_187:
          if (v39 > v252[0])
          {
            v209 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v254);
            Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long>(v38, v209);
          }
          goto LABEL_188;
        }
        if (v259 == 4)
        {
LABEL_184:
          v39 = v254;
          goto LABEL_187;
        }
      }
      else if (v259)
      {
        if (v259 == 1)
          goto LABEL_187;
        if (v259 != 2)
          goto LABEL_186;
        goto LABEL_184;
      }
LABEL_188:
      v226 = v37 / v252[0];
      goto LABEL_189;
    }
  }
  else if (v266 - 1 != v253 && v252[0] != 1)
  {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid shape of input blob");
  }
  v226 = 0;
LABEL_189:
  v238 = v29 * v30;
  v233 = v29 * v30 * v31;
  v228 = v233 * v32;
  v125 = *(int *)(v26 + 8);
  for (i = 12; i != 24; i += 4)
    v125 *= *(int *)(v26 + i);
  memcpy(*(void **)(v26 + 24), *(const void **)(v25 + 24), 4 * v125);
  if (*(_BYTE *)(a1 + 302))
    v127 = 0;
  else
    v127 = v259 > 3;
  if (v127)
  {
    if (v259 == 5)
    {
      v128 = v255 * (uint64_t)v254;
      v129 = v257 * v258 * v256;
    }
    else
    {
      if (v259 != 4)
      {
LABEL_216:
        v225 = 1;
        goto LABEL_217;
      }
      v128 = v254;
      v129 = v256 * v257 * v255;
    }
  }
  else
  {
    switch(v259)
    {
      case 1u:
        v128 = 1;
        if (!v259)
          goto LABEL_216;
        break;
      case 2u:
        v128 = v254;
        if (!v259)
          goto LABEL_216;
        break;
      case 3u:
        v128 = v255 * (uint64_t)v254;
        if (!v259)
          goto LABEL_216;
        break;
      case 4u:
        v128 = v255 * (uint64_t)v254 * v256;
        if (!v259)
          goto LABEL_216;
        break;
      case 5u:
        v128 = v255 * (uint64_t)v254 * v256 * v257;
        if (!v259)
          goto LABEL_216;
        break;
      default:
        v128 = 0;
        if (!v259)
          goto LABEL_216;
        break;
    }
    v129 = *(&v254 + (int)v259 - 1);
  }
  if (v129)
    v130 = (_DWORD)v128 == 0;
  else
    v130 = 1;
  v131 = v130;
  if ((v131 & 1) != 0)
    v128 = 1;
  v225 = v128;
  if (v128)
  {
    if ((v131 & 1) == 0)
    {
LABEL_218:
      v132 = 0;
      v223 = v129;
      v224 = *(_QWORD *)(v19 + 24);
      LODWORD(v133) = v129 - 1;
      LODWORD(v134) = v129 - 2;
      LODWORD(v135) = v129 - 3;
      LODWORD(v136) = v129 - 4;
      if (*(_BYTE *)(a1 + 302))
        v133 = v133;
      else
        v133 = 0;
      if (*(_BYTE *)(a1 + 302))
        v134 = v134;
      else
        v134 = 1;
      if (*(_BYTE *)(a1 + 302))
        v135 = v135;
      else
        v135 = 2;
      if (*(_BYTE *)(a1 + 302))
        v136 = v136;
      else
        v136 = 3;
      if (*(_BYTE *)(a1 + 302))
        v137 = (v129 - 5);
      else
        v137 = 4;
      v214 = v134;
      v215 = v133;
      v139 = (int)v133 < 0 || v129 < (int)v133;
      v222 = v139;
      v141 = (int)v134 < 0 || v129 < (int)v134;
      v221 = v141;
      v212 = v136;
      v213 = v135;
      v143 = (int)v135 < 0 || v129 < (int)v135;
      v220 = v143;
      v145 = (int)v136 < 0 || v129 < (int)v136;
      v211 = v137;
      v147 = (int)v137 < 0 || v129 < (int)v137;
      v218 = v147;
      v219 = v145;
      v216 = *a4;
      v217 = *(_QWORD *)(v22 + 24);
      v148 = v34 * v35;
      v229 = (v34 * v35 * v236 * v36);
      v235 = v34 * v35 * v36;
      v149 = v26;
      do
      {
        v150 = v224 + 4 * v132 * v223;
        v151 = -1.0;
        v152 = -1.0;
        if (!v222)
        {
          v153 = *(_DWORD *)(a1 + 280);
          if (v153 == -2)
            v152 = *(float *)(v150 + 4 * v215);
          else
            v152 = (float)v153;
        }
        if (!v221)
        {
          v154 = *(_DWORD *)(a1 + 284);
          if (v154 == -2)
            v151 = *(float *)(v150 + 4 * v214);
          else
            v151 = (float)v154;
        }
        v155 = -1.0;
        v156 = -1.0;
        if (!v220)
        {
          v157 = *(_DWORD *)(a1 + 288);
          if (v157 == -2)
            v156 = *(float *)(v150 + 4 * v213);
          else
            v156 = (float)v157;
        }
        if (!v219)
        {
          v158 = *(_DWORD *)(a1 + 292);
          if (v158 == -2)
            v155 = *(float *)(v150 + 4 * v212);
          else
            v155 = (float)v158;
        }
        v159 = -1.0;
        if (!v218)
        {
          v160 = *(_DWORD *)(a1 + 296);
          if (v160 == -2)
            v159 = *(float *)(v150 + 4 * v211);
          else
            v159 = (float)v160;
        }
        v161 = (int)v152;
        v162 = (int)v151;
        v163 = (int)v156;
        v164 = (int)v155;
        v165 = (int)v159;
        v166 = (float *)(v217 + 4 * v132 * v226);
        v170 = (int)v152 == -1 || v162 == -1 || v163 == -1 || v164 == -1 || v165 == -1;
        v227 = v132;
        if (v170)
        {
          v171 = (unsigned int *)v216[4];
          v230 = v171[6];
          if (v230 >= 1)
          {
            v172 = 0;
            v173 = 0;
            v237 = v171[5];
            v174 = v149;
            do
            {
              v232 = v172;
              v231 = v173;
              if (v237 < 1)
              {
                v149 = v174;
              }
              else
              {
                v175 = 0;
                v176 = v171[4];
                v177 = (int)v159;
                if ((int)v159 < 0)
                  v177 = v173;
                v234 = v177 * v228;
                do
                {
                  if (v176 < 1)
                  {
                    v149 = v174;
                  }
                  else
                  {
                    v178 = 0;
                    v179 = v171[3];
                    v180 = (int)v155;
                    if ((int)v155 < 0)
                      v180 = v175;
                    v181 = v234 + v180 * v233;
                    v182 = v172;
                    do
                    {
                      if (v179 < 1)
                      {
                        v149 = v174;
                      }
                      else
                      {
                        v183 = 0;
                        v184 = v171[2];
                        if (v163 >= 0)
                          v185 = (int)v156;
                        else
                          v185 = v178;
                        v186 = v181 + v185 * v238;
                        v187 = v182;
                        v149 = v174;
                        do
                        {
                          if ((int)v184 >= 1)
                          {
                            v188 = 0;
                            if (v162 >= 0)
                              v189 = v162;
                            else
                              v189 = v183;
                            v190 = v186 + v189 * v30;
                            v191 = *(unsigned __int8 *)(a1 + 300);
                            v192 = *(_QWORD *)(v174 + 24);
                            do
                            {
                              if (v161 >= 0)
                                v193 = (int)v152;
                              else
                                v193 = v188;
                              v194 = v190 + v193;
                              v195 = v187 + (int)v188;
                              if (v191)
                                v196 = *(float *)(*(_QWORD *)(v26 + 24) + 4 * v194) + v166[v195];
                              else
                                v196 = v166[v195];
                              *(float *)(v192 + 4 * v194) = v196;
                              ++v188;
                            }
                            while (v184 != v188);
                            v149 = v26;
                          }
                          ++v183;
                          v187 += v35;
                        }
                        while (v183 != v179);
                      }
                      ++v178;
                      v182 += v148;
                      v174 = v149;
                    }
                    while (v178 != v176);
                  }
                  ++v175;
                  LODWORD(v172) = v172 + v235;
                  v174 = v149;
                }
                while (v175 != v237);
              }
              v173 = v231 + 1;
              v172 = v232 + v229;
              v174 = v149;
            }
            while (v231 + 1 != v230);
          }
        }
        else
        {
          v197 = v161 + v30 * v162 + v238 * v163 + v233 * v164 + v228 * v165;
          if (*(_BYTE *)(a1 + 300))
          {
            v198 = *(_QWORD *)(v26 + 24);
            v199 = *(float *)(v198 + 4 * v197) + *v166;
          }
          else
          {
            v199 = *v166;
            v198 = *(_QWORD *)(v26 + 24);
          }
          *(float *)(v198 + 4 * v197) = v199;
        }
        v132 = v227 + 1;
      }
      while (v227 + 1 != v225);
      goto LABEL_342;
    }
LABEL_217:
    v129 = 1;
    goto LABEL_218;
  }
LABEL_342:
  if (v210)
  {
    v200 = (unint64_t *)&v210->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v202 = v251;
  if (v251)
  {
    v203 = (unint64_t *)&v251->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v268;
  if (v268)
  {
    v206 = (unint64_t *)&v268->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v122 = v270;
  if (v270)
  {
    v208 = (unint64_t *)&v270->__shared_owners_;
    do
      v124 = __ldaxr(v208);
    while (__stlxr(v124 - 1, v208));
    goto LABEL_360;
  }
}

void sub_1917E73B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 104);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,float &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, float a6)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("scatter_kernel_cpu: Invalid index %d into input (%d, %d, %d, %d, %d)", COERCE_UNSIGNED_INT64(a6), a1, a2, a3, a4, a5);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long &>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid number of value blobs %ld != %ld", a1, a2);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int &,unsigned long &,int &>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: coords.shape[%d] = %d != slice.shape[%d] = %d", a1, a2, a3, a4);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid number of value blobs %ld < %ld", a1, a2);
}

void Espresso::load_random_kernel_cpu::~load_random_kernel_cpu(Espresso::load_random_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D8EC50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D8EC50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::load_random_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::vector<int>::size_type v17;
  int *begin;
  float *v19;
  std::vector<int>::pointer v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  _QWORD *v27;
  unint64_t *v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  unint64_t *v61;
  unint64_t v62;
  id v63;
  Espresso *v64;
  Espresso *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  NSObject *v90;
  std::__shared_weak_count *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  dispatch_block_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _OWORD *v112;
  _QWORD block[4];
  id v115;
  uint64_t *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  _QWORD v119[5];
  std::__shared_weak_count *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char *v124;
  std::__shared_weak_count *v125;
  char *v126;
  std::__shared_weak_count *v127;
  _QWORD v128[2];
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::vector<int> v134;
  void *v135;
  id v136;
  Espresso *v137;
  _BYTE buf[24];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v6 + 88);
  v7 = *(std::__shared_weak_count **)(v6 + 96);
  v132 = v8;
  v133 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*(_BYTE *)(a1 + 324))
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("load_random_kernel_cpu: dynamic shape mode not supported without interpreter");
    v11 = *a4;
    if (a4[1] != *a4)
    {
      v12 = 0;
      do
      {
        v13 = (_QWORD *)(v11 + 16 * v12);
        if (*v13 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13))
        {
          v14 = *(_QWORD *)(*v13 + 160);
          v41 = *(std::__shared_weak_count **)(*v13 + 168);
          v130 = v14;
          v131 = v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
        }
        else
        {
          v14 = 0;
          v130 = 0;
          v131 = 0;
        }
        v15 = 0;
        v16 = *(int *)(v14 + 8);
        do
        {
          v16 *= *(int *)(v14 + 12 + v15);
          v15 += 4;
        }
        while (v15 != 12);
        if (v16 >= 0xA)
          v17 = 10;
        else
          v17 = v16;
        std::vector<int>::vector(&v134, v17);
        begin = v134.__begin_;
        if (v17)
        {
          v19 = *(float **)(v14 + 24);
          v20 = v134.__begin_;
          do
          {
            v21 = *v19++;
            *v20++ = (int)v21;
            --v17;
          }
          while (v17);
        }
        v128[0] = 0;
        v128[1] = 0;
        v129 = 0;
        v22 = (char *)v134.__end_ - (char *)begin;
        if (v134.__end_ != begin)
        {
          v23 = v22 >> 2;
          if ((unint64_t)(v22 >> 2) <= 1)
            v23 = 1;
          v24 = v128;
          v25 = begin;
          do
          {
            v26 = *v25++;
            *v24++ = v26;
            --v23;
          }
          while (v23);
        }
        HIDWORD(v129) = (unint64_t)v22 >> 2;
        v27 = operator new(0x98uLL);
        v27[1] = 0;
        v28 = v27 + 1;
        v27[2] = 0;
        *v27 = &off_1E2DBE998;
        *((_OWORD *)v27 + 4) = 0u;
        *((_OWORD *)v27 + 5) = 0u;
        *((_OWORD *)v27 + 2) = 0u;
        *((_OWORD *)v27 + 3) = 0u;
        *((_OWORD *)v27 + 6) = 0u;
        *((_OWORD *)v27 + 7) = 0u;
        *((_OWORD *)v27 + 8) = 0u;
        v27[17] = 0;
        v27[18] = 0;
        *((_DWORD *)v27 + 12) = 1065353216;
        v27[7] = 0x1FFFFFFFFLL;
        v27[12] = 0;
        v27[13] = 0;
        v27[8] = 0;
        v27[9] = 0;
        *((_BYTE *)v27 + 88) = 0;
        v27[10] = 0;
        v27[3] = &off_1E2DA0BF0;
        v27[15] = 0;
        v27[16] = 0;
        *((_BYTE *)v27 + 144) = 0;
        v126 = (char *)(v27 + 3);
        v127 = (std::__shared_weak_count *)v27;
        *((_BYTE *)v27 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
        v29 = (*a3)[2 * v12];
        v30.n128_u64[0] = (unint64_t)Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v128, 0, (uint64_t)buf);
        v124 = (char *)(v27 + 3);
        v125 = (std::__shared_weak_count *)v27;
        do
          v31 = __ldxr(v28);
        while (__stxr(v31 + 1, v28));
        (*(void (**)(uint64_t, _BYTE *, char **, __n128))(*(_QWORD *)v29 + 16))(v29, buf, &v124, v30);
        v32 = v125;
        if (v125)
        {
          v33 = (unint64_t *)&v125->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if ((_QWORD)v140)
        {
          *((_QWORD *)&v140 + 1) = v140;
          operator delete((void *)v140);
        }
        v35 = v127;
        if (v127)
        {
          v36 = (unint64_t *)&v127->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (v134.__begin_)
        {
          v134.__end_ = v134.__begin_;
          operator delete(v134.__begin_);
        }
        v38 = v131;
        if (v131)
        {
          v39 = (unint64_t *)&v131->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++v12;
        v11 = *a4;
      }
      while (v12 < (a4[1] - *a4) >> 4);
    }
  }
  Espresso::abstract_blob_container::shape(buf, **a3);
  v44 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  if ((_QWORD)v140)
  {
    *((_QWORD *)&v140 + 1) = v140;
    operator delete((void *)v140);
  }
  v112 = (_OWORD *)(a1 + 328);
  if (!*(_QWORD *)(a1 + 328) && v44 >> 3 >= 0x271 && v44 <= 0x1312D0)
  {
    v45 = *(_QWORD *)(a1 + 8);
    v46 = (char *)operator new(0x38uLL);
    *((_QWORD *)v46 + 1) = 0;
    *((_QWORD *)v46 + 2) = 0;
    *(_QWORD *)v46 = &off_1E2DBC0B0;
    v47 = *(id *)(v45 + 104);
    *(_OWORD *)(v46 + 40) = 0u;
    *(_OWORD *)(v46 + 24) = 0u;
    *((_QWORD *)v46 + 5) = v47;
    *(_QWORD *)&v48 = v46 + 24;
    *((_QWORD *)&v48 + 1) = v46;
    v49 = *(std::__shared_weak_count **)(a1 + 336);
    *v112 = v48;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v52 = *(_OWORD *)(a1 + 296);
  v121 = *(_OWORD *)(a1 + 280);
  v122 = v52;
  v123 = *(_OWORD *)(a1 + 312);
  v119[0] = MEMORY[0x1E0C809B0];
  v119[1] = 3321888768;
  v119[2] = ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke;
  v119[3] = &__block_descriptor_96_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE_e9_v16__0_v8l;
  v119[4] = v132;
  v120 = v133;
  if (v133)
  {
    v53 = (unint64_t *)&v133->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = (void *)MEMORY[0x19401D648](v119);
  v57 = *a3;
  v56 = a3[1];
  if (*a3 != v56)
  {
    while (1)
    {
      v58 = *(_QWORD *)v112;
      if (*(_QWORD *)v112)
        break;
      v83 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke_167;
      block[3] = &unk_1E2DD6250;
      v116 = v57;
      v115 = v55;
      dispatch_sync(v83, block);

LABEL_125:
      v57 += 2;
      if (v57 == v56)
        goto LABEL_126;
    }
    v60 = (const void *)*v57;
    v59 = v57[1];
    v117 = *v57;
    v118 = (std::__shared_weak_count *)v59;
    if (v59)
    {
      v61 = (unint64_t *)(v59 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v55;
    if (!*(_QWORD *)(v58 + 16))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("async_cache: Failed to create a dispatch queue");
    if (!v60
    {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("async_cache: no blob provided");
    }
    v65 = v64;
    v67 = (uint64_t)v64 + 160;
    v66 = *((_QWORD *)v64 + 20);
    v68 = (const char *)*(unsigned int *)(v66 + 8);
    v69 = (int)v68;
    for (i = 12; i != 24; i += 4)
      v69 *= *(int *)(v66 + i);
    v71 = *(_QWORD *)v58;
    if (*(_QWORD *)v58)
    {
      v72 = 0;
      v73 = *(int *)(v71 + 8);
      v74 = v71 + 12;
      do
      {
        v73 *= *(int *)(v74 + v72);
        v72 += 4;
      }
      while (v72 != 12);
      if (v73 >= v69)
        goto LABEL_88;
      Espresso::espresso_os_log_subsystem(v64, v68);
      v75 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        v76 = 0;
        v77 = *(int *)(*(_QWORD *)v58 + 8);
        do
        {
          v77 *= *(int *)(*(_QWORD *)v58 + 12 + v76);
          v76 += 4;
        }
        while (v76 != 12);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v77;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v69;
        _os_log_impl(&dword_190DAF000, v75, OS_LOG_TYPE_INFO, "async_cache: Invalidating cache, cached blob size (%zu) < requested blob size (%zu)", buf, 0x16u);
      }

      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v58, (__int128 *)buf);
      v78 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      if (*(_QWORD *)v58)
      {
LABEL_88:
        buf[0] = 1;
        *(_OWORD *)&buf[8] = 0u;
        v139 = 0u;
        v140 = 0u;
        v141 = 0u;
        *(_DWORD *)&buf[4] = 723714184;
        kdebug_trace();
        if (dispatch_block_wait(*(dispatch_block_t *)(v58 + 24), 0xFFFFFFFFFFFFFFFFLL))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("async block timed out");
        v81 = *((_QWORD *)v65 + 20);
        *((_QWORD *)v65 + 20) = *(_QWORD *)v58;
        *(_QWORD *)v58 = v81;
        v82 = *((_QWORD *)v65 + 21);
        *((_QWORD *)v65 + 21) = *(_QWORD *)(v58 + 8);
        *(_QWORD *)(v58 + 8) = v82;
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
LABEL_103:
        v92 = *(_QWORD *)v58;
        v91 = *(std::__shared_weak_count **)(v58 + 8);
        if (v91)
        {
          v93 = (unint64_t *)&v91->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3321888768;
          *(_QWORD *)&buf[16] = ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke_2;
          *(_QWORD *)&v139 = &unk_1E2DC3EF0;
          *((_QWORD *)&v139 + 1) = v63;
          *(_QWORD *)&v140 = v92;
          *((_QWORD *)&v140 + 1) = v91;
          do
            v95 = __ldxr(v93);
          while (__stxr(v95 + 1, v93));
        }
        else
        {
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3321888768;
          *(_QWORD *)&buf[16] = ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke_2;
          *(_QWORD *)&v139 = &unk_1E2DC3EF0;
          *((_QWORD *)&v139 + 1) = v63;
          v140 = v92;
        }
        v96 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
        v97 = *(void **)(v58 + 24);
        *(_QWORD *)(v58 + 24) = v96;

        dispatch_async(*(dispatch_queue_t *)(v58 + 16), *(dispatch_block_t *)(v58 + 24));
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }

        if (v91)
        {
          v101 = (unint64_t *)&v91->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }

        v103 = v118;
        if (v118)
        {
          v104 = (unint64_t *)&v118->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        goto LABEL_125;
      }
      v66 = *(_QWORD *)v67;
      LODWORD(v68) = *(_DWORD *)(*(_QWORD *)v67 + 8);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(buf, (int)v68, *(_DWORD *)(v66 + 12), *(_DWORD *)(v66 + 16), *(_DWORD *)(v66 + 20));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v67, (__int128 *)buf);
    v84 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v85 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(buf, *(_DWORD *)(*(_QWORD *)v67 + 8), *(_DWORD *)(*(_QWORD *)v67 + 12), *(_DWORD *)(*(_QWORD *)v67 + 16), *(_DWORD *)(*(_QWORD *)v67 + 20));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v58, (__int128 *)buf);
    v87 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v88 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = *(NSObject **)(v58 + 16);
    v134.__begin_ = (std::vector<int>::pointer)MEMORY[0x1E0C809B0];
    v134.__end_ = (std::vector<int>::pointer)3221225472;
    v134.__end_cap_.__value_ = (int *)___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke;
    v135 = &unk_1E2DD6250;
    v136 = v63;
    v137 = v65;
    dispatch_sync(v90, &v134);

    goto LABEL_103;
  }
LABEL_126:

  v106 = v120;
  if (v120)
  {
    v107 = (unint64_t *)&v120->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v133;
  if (v133)
  {
    v110 = (unint64_t *)&v133->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_1917E8080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 256);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4;
  float *v5;
  vDSP_Length v6;
  unsigned int v7;
  int v8;
  int v9;
  float v10;
  unsigned int *v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  double v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int *v42;
  unsigned int v43;
  float *v44;
  vDSP_Length v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  const float *v50;
  int v51;
  vDSP_Length __N;

  v4 = 0;
  v5 = *(float **)(a2 + 24);
  v6 = *(int *)(a2 + 8);
  do
  {
    v6 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);
  __N = v6;
  if (*(_BYTE *)(a1 + 93))
  {
    v7 = *(_DWORD *)(a1 + 60);
    if ((v7 & 0x80000000) == 0)
    {
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = *(_DWORD *)(a1 + 60);
      if (v7 == 0x7FFFFFFF)
        v9 = 1;
      else
        v9 = v8;
      **(_DWORD **)(a1 + 32) = v9;
    }
  }
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
      if (v6)
      {
        v10 = *(float *)(a1 + 52);
        v11 = *(unsigned int **)(a1 + 32);
        v12 = *(float *)(a1 + 56) - v10;
        v13 = *v11;
        do
        {
          v14 = v13 / 0xADC8;
          v15 = 48271 * (v13 % 0xADC8);
          v14 *= 3399;
          v16 = v15 >= v14;
          v17 = v15 - v14;
          if (v16)
            v18 = 0;
          else
            v18 = 0x7FFFFFFF;
          v13 = v18 + v17;
          *v5++ = v10 + (float)(v12 * (float)((float)(v13 - 1) * 4.6566e-10));
          --v6;
        }
        while (v6);
        *v11 = v13;
      }
      break;
    case 1:
      if (v6)
      {
        v21 = 0;
        v22 = 0;
        v23 = *(_QWORD *)(a1 + 52);
        v24 = *(unsigned int **)(a1 + 32);
        v25 = *((float *)&v23 + 1);
        v51 = v23;
        do
        {
          if (v21)
          {
            v21 = 0;
            v26 = a3;
          }
          else
          {
            v27 = *v24;
            do
            {
              v28 = v27 / 0xADC8;
              v29 = 48271 * (v27 % 0xADC8);
              v28 *= 3399;
              v16 = v29 >= v28;
              v30 = v29 - v28;
              if (v16)
                v31 = 0;
              else
                v31 = 0x7FFFFFFF;
              v32 = v31 + v30;
              v33 = (float)(v32 - 1) * 4.6566e-10;
              v34 = v32 / 0xADC8;
              v35 = 48271 * (v32 % 0xADC8);
              v34 *= 3399;
              v16 = v35 >= v34;
              v36 = v35 - v34;
              if (v16)
                v37 = 0;
              else
                v37 = 0x7FFFFFFF;
              v27 = v37 + v36;
              v38 = (float)(v33 * 2.0) + -1.0;
              v39 = (float)((float)((float)(v27 - 1) * 4.6566e-10) * 2.0) + -1.0;
              v40 = (float)(v39 * v39) + (float)(v38 * v38);
            }
            while (v40 > 1.0 || v40 == 0.0);
            *v24 = v27;
            v41 = sqrtf((float)(logf((float)(v39 * v39) + (float)(v38 * v38)) * -2.0) / v40);
            a3 = v39 * v41;
            v26 = v38 * v41;
            v21 = 1;
            LODWORD(v23) = v51;
          }
          v5[v22++] = *(float *)&v23 + (float)(v26 * v25);
        }
        while (v22 != v6);
      }
      break;
    case 2:
      if (v6)
      {
        v19 = *(float *)(a1 + 52);
        do
        {
          if (std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(*(unsigned int **)(a1 + 32))
             + 0.0 >= v19)
            v20 = 0.0;
          else
            v20 = 1.0;
          *v5++ = v20;
          --v6;
        }
        while (v6);
      }
      break;
    case 3:
      if (v6)
      {
        v42 = *(unsigned int **)(a1 + 32);
        v43 = *v42;
        v44 = v5;
        v45 = v6;
        do
        {
          v46 = v43 / 0xADC8;
          v47 = 48271 * (v43 % 0xADC8);
          v46 *= 3399;
          v16 = v47 >= v46;
          v48 = v47 - v46;
          if (v16)
            v49 = 0;
          else
            v49 = 0x7FFFFFFF;
          v43 = v49 + v48;
          *v44++ = (float)((float)(v43 - 1) * 4.6566e-10) + 0.0;
          --v45;
        }
        while (v45);
        *v42 = v43;
      }
      if (*(float *)(a1 + 52) != 1.0)
        vDSP_vsmul(v5, 1, (const float *)(a1 + 52), v5, 1, v6);
      v50 = (const float *)(a1 + 56);
      vDSP_vsadd(v5, 1, v50, v5, 1, v6);
      vvlogf(v5, v5, (const int *)&__N);
      vDSP_vneg(v5, 1, v5, 1, __N);
      vDSP_vsadd(v5, 1, v50, v5, 1, __N);
      vvlogf(v5, v5, (const int *)&__N);
      vDSP_vneg(v5, 1, v5, 1, __N);
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid random distribution: %D");
  }
}

void ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke_167(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v5, **(void ***)(a1 + 40), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 8));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1917E85A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Espresso::espresso_async_cache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::espresso_async_cache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::espresso_async_cache>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;

  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void Espresso::range_kernel_cpu::~range_kernel_cpu(Espresso::range_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::range_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  std::__shared_weak_count *v65;
  _QWORD v66[4];
  std::__shared_weak_count *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void **v78;

  v6 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic range requires interpreter");
    if (*v6 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v6 + 32))(*v6))
    {
      v43 = *v6;
      v8 = *(_QWORD *)(*v6 + 160);
      v44 = *(std::__shared_weak_count **)(v43 + 168);
      v76 = v8;
      v77 = v44;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(p_shared_owners);
        while (__stxr(v46 + 1, p_shared_owners));
      }
    }
    else
    {
      v8 = 0;
      v76 = 0;
      v77 = 0;
    }
    v9 = *(uint64_t **)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL
      && (v10 = v9[2]) != 0
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
    {
      v56 = v9[2];
      v11 = *(_QWORD *)(v56 + 160);
      v57 = *(std::__shared_weak_count **)(v56 + 168);
      v74 = v11;
      v75 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
    }
    else
    {
      v11 = 0;
      v74 = 0;
      v75 = 0;
    }
    v12 = *(uint64_t **)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x21uLL
      && (v13 = v12[4]) != 0
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
    {
      v60 = v12[4];
      v14 = *(_QWORD *)(v60 + 160);
      v61 = *(std::__shared_weak_count **)(v60 + 168);
      v72 = v14;
      v73 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
    }
    else
    {
      v14 = 0;
      v72 = 0;
      v73 = 0;
    }
    if (v8)
    {
      v15 = 0;
      v16 = *(int *)(v8 + 8);
      do
      {
        v16 *= *(int *)(v8 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      if (v16 != 1)
      {
        Espresso::abstract_blob_container::shape((char *)&v68, **(_QWORD **)a4);
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v68, HIDWORD(v68), v69, v70, v71);
      }
      *(_DWORD *)(a1 + 280) = **(_DWORD **)(v8 + 24);
    }
    if (v11)
    {
      v17 = 0;
      v18 = *(int *)(v11 + 8);
      do
      {
        v18 *= *(int *)(v11 + 12 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      if (v18 != 1)
      {
        Espresso::abstract_blob_container::shape((char *)&v68, *(_QWORD *)(*(_QWORD *)a4 + 16));
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v68, HIDWORD(v68), v69, v70, v71);
      }
      *(_DWORD *)(a1 + 284) = **(_DWORD **)(v11 + 24);
    }
    if (v14)
    {
      v19 = 0;
      v20 = *(int *)(v14 + 8);
      do
      {
        v20 *= *(int *)(v14 + 12 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      if (v20 != 1)
      {
        Espresso::abstract_blob_container::shape((char *)&v68, *(_QWORD *)(*(_QWORD *)a4 + 32));
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v68, HIDWORD(v68), v69, v70, v71);
      }
      *(_DWORD *)(a1 + 288) = **(_DWORD **)(v14 + 24);
    }
    v21 = operator new(0x98uLL);
    v21[1] = 0;
    v22 = v21 + 1;
    v21[2] = 0;
    *v21 = &off_1E2DBE998;
    *((_OWORD *)v21 + 4) = 0u;
    *((_OWORD *)v21 + 5) = 0u;
    *((_OWORD *)v21 + 2) = 0u;
    *((_OWORD *)v21 + 3) = 0u;
    *((_OWORD *)v21 + 6) = 0u;
    *((_OWORD *)v21 + 7) = 0u;
    *((_OWORD *)v21 + 8) = 0u;
    v21[17] = 0;
    v21[18] = 0;
    *((_DWORD *)v21 + 12) = 1065353216;
    v21[7] = 0x1FFFFFFFFLL;
    v21[12] = 0;
    v21[13] = 0;
    v21[8] = 0;
    v21[9] = 0;
    *((_BYTE *)v21 + 88) = 0;
    v21[10] = 0;
    v21[3] = &off_1E2DA0BF0;
    v21[15] = 0;
    v21[16] = 0;
    *((_BYTE *)v21 + 144) = 0;
    v66[3] = v21 + 3;
    v67 = (std::__shared_weak_count *)v21;
    *((_BYTE *)v21 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
    v23 = **a3;
    memset(v66, 0, 24);
    Espresso::generic_range_kernel::top_shapes_for_bottom_shapes((float *)a1, v66, &v68);
    v24 = v68;
    v64 = (char *)(v21 + 3);
    v65 = (std::__shared_weak_count *)v21;
    do
      v25 = __ldxr(v22);
    while (__stxr(v25 + 1, v22));
    (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v23 + 16))(v23, v24, &v64);
    v26 = v65;
    if (v65)
    {
      v27 = (unint64_t *)&v65->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v78 = (void **)&v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v78);
    v78 = (void **)v66;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v78);
    v29 = v67;
    if (v67)
    {
      v30 = (unint64_t *)&v67->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v73;
    if (v73)
    {
      v33 = (unint64_t *)&v73->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v75;
    if (v75)
    {
      v36 = (unint64_t *)&v75->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v77;
    if (v77)
    {
      v39 = (unint64_t *)&v77->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v42 = a3;
  v41 = *a3;
  if (v42[1] != v41 && *v41 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v41 + 32))(*v41))
  {
    v47 = *(_QWORD *)(*v41 + 160);
    v48 = *(std::__shared_weak_count **)(*v41 + 168);
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    if (v47)
    {
      v51 = *(unsigned int *)(v47 + 8);
      if ((int)v51 >= 1)
      {
        v52 = *(float *)(a1 + 284);
        v53 = *(float **)(v47 + 24);
        do
        {
          *v53++ = v52;
          v52 = v52 + *(float *)(a1 + 288);
          --v51;
        }
        while (v51);
      }
    }
    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
}

void sub_1917E8BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 88);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 72);
  _Unwind_Resume(a1);
}

void Espresso::matrix_band_part_kernel_cpu::~matrix_band_part_kernel_cpu(Espresso::matrix_band_part_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::matrix_band_part_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::vector<int> v47;
  void *__p;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*v6 + 160);
    v17 = *(std::__shared_weak_count **)(*v6 + 168);
    v58 = v7;
    v59 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v10 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v8 + 160);
    v9 = *(std::__shared_weak_count **)(*v8 + 168);
    v56 = v10;
    v57 = v9;
    if (v9)
    {
      v20 = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v47, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v50, (const Espresso::layer_shape *)&v47, 0);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  v11 = *(_DWORD *)(a1 + 288);
  v12 = (int)v55;
  if (!v11 && v55 > 3)
  {
    if (v55 == 5)
    {
      v13 = v51 * (uint64_t)v50;
      v14 = v53 * (uint64_t)v54 * v52;
    }
    else if (v55 == 4)
    {
      v13 = v50;
      v14 = v52 * (uint64_t)v53 * v51;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
LABEL_37:
    if (*(_DWORD *)(v7 + 8) == 1 && *(_DWORD *)(v7 + 12) == 1)
      goto LABEL_39;
    v16 = "Only 2d matrices are supported by matrix_band_part_kernel_cpu";
LABEL_87:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v16);
  }
  v15 = (int)v55 - 1;
  v16 = "Rank of the input must be atleast 2 for matrix_band_part_kernel_cpu";
  switch(v55)
  {
    case 1u:
      goto LABEL_87;
    case 2u:
      v13 = v50;
      goto LABEL_32;
    case 3u:
      v13 = v51 * (uint64_t)v50;
      goto LABEL_32;
    case 4u:
      v13 = v51 * (uint64_t)v50 * v52;
      goto LABEL_32;
    case 5u:
      v13 = v51 * (uint64_t)v50 * v52 * v53;
      goto LABEL_32;
    default:
      v13 = 0;
LABEL_32:
      if (v55 < 2)
      {
        v16 = "Rank of the input must be atleast 2 for matrix_band_part_kernel_cpu";
        goto LABEL_87;
      }
      if (!v11)
      {
        v14 = *(&v50 + v15);
        if (v55 < 4)
        {
LABEL_39:
          v22 = *(_DWORD **)(v7 + 24);
          v23 = *(int **)(v10 + 24);
          v25 = 1;
          v24 = v13;
          goto LABEL_40;
        }
        goto LABEL_37;
      }
      v22 = *(_DWORD **)(v7 + 24);
      v23 = *(int **)(v10 + 24);
      Espresso::layer_nd_shape::shape_vector(&v47, (uint64_t)&v50);
      v14 = v47.__begin_[v15];
      v47.__end_ = v47.__begin_;
      operator delete(v47.__begin_);
      Espresso::layer_nd_shape::shape_vector(&v47, (uint64_t)&v50);
      v24 = v47.__begin_[v12 - 2];
      v47.__end_ = v47.__begin_;
      operator delete(v47.__begin_);
      if (v12 < 3)
        v25 = 1;
      else
        v25 = v13 / v24;
LABEL_40:
      v26 = *(_DWORD *)(a1 + 296);
      if (!v26)
      {
LABEL_54:
        v27 = 0;
        goto LABEL_55;
      }
      if (v24 >= v14)
      {
        if (v24 > v14)
        {
          if (v26 < 0)
            v28 = v26 + v24 - v14 + 1;
          else
            v28 = v26 - 1;
          v14 += v28;
          if (v14 > v24)
LABEL_88:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,unsigned long &,unsigned long &>(v26, v24, v14);
          v27 = 0;
          if (v25)
            goto LABEL_56;
          goto LABEL_73;
        }
        goto LABEL_54;
      }
      if (v26 < 0)
        v27 = v26 + v14 - v24 + 1;
      else
        v27 = v26 - 1;
      v24 += v27;
      if (v24 > v14)
        goto LABEL_88;
LABEL_55:
      v28 = 0;
      if (v25)
      {
LABEL_56:
        v29 = 0;
        v30 = v27;
        v31 = v28;
        v32 = -(uint64_t)v28;
        v33 = v31 - v27;
        while (1)
        {
          v34 = v33;
          v35 = v30;
          if (v24 > v30)
            break;
LABEL_72:
          if (++v29 == v25)
            goto LABEL_73;
        }
        while (v14 <= v31)
        {
LABEL_71:
          ++v35;
          --v34;
          if (v35 == v24)
            goto LABEL_72;
        }
        v36 = *(int *)(a1 + 280);
        v37 = *(unsigned __int8 *)(a1 + 292);
        v38 = v34;
        v39 = v32;
        while (1)
        {
          if ((v36 & 0x80000000) != 0 || (uint64_t)(v35 + v39) <= v36)
          {
            v41 = *(unsigned int *)(a1 + 284);
            if ((v41 & 0x80000000) != 0)
            {
              v40 = 0;
              if (v37)
                goto LABEL_67;
LABEL_66:
              v40 = *v23;
              goto LABEL_67;
            }
            v40 = 0;
            if (v38 <= v41 != (v37 != 0))
              goto LABEL_66;
          }
          else
          {
            if (v37)
              goto LABEL_66;
            v40 = 0;
          }
LABEL_67:
          *v22++ = v40;
          ++v23;
          --v39;
          ++v38;
          if (-(uint64_t)v14 == v39)
            goto LABEL_71;
        }
      }
LABEL_73:
      if (v9)
      {
        v42 = (unint64_t *)&v9->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v44 = v59;
      if (v59)
      {
        v45 = (unint64_t *)&v59->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      return;
  }
}

void sub_1917E90E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,unsigned long &,unsigned long &>(int a1, int a2, int a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("matrix_band_part_kernel_cpu: Invalid offset %d for bottom [%d, %d]", a1, a2, a3);
}

void Espresso::fill_kernel_cpu::~fill_kernel_cpu(Espresso::fill_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::batch_matmul_kernel_cpu::~batch_matmul_kernel_cpu(Espresso::batch_matmul_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::batch_matmul_kernel_cpu::__launch(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  Espresso *v17;
  unsigned __int8 v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  const float *v55;
  int v56;
  CBLAS_TRANSPOSE v57;
  int v58;
  CBLAS_TRANSPOSE v59;
  int v60;
  int v61;
  int v62;
  int v63;
  std::vector<int>::const_iterator v64;
  int *end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v67;
  const char *v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  std::vector<int>::pointer v73;
  std::vector<int>::pointer v74;
  int *v75;
  uint64_t v76;
  int *v77;
  int v78;
  int64_t v79;
  std::vector<int>::pointer v80;
  std::vector<int>::pointer v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::vector<int>::size_type v86;
  std::vector<int>::size_type v87;
  int *v88;
  unint64_t i;
  uint64_t v90;
  int v91;
  CBLAS_TRANSPOSE v92;
  uint64_t v93;
  uint64_t v94;
  std::vector<int>::size_type v95;
  std::vector<int>::size_type v96;
  std::vector<int>::size_type v97;
  std::vector<int>::size_type v98;
  uint64_t v99;
  std::vector<int>::size_type v100;
  BOOL v101;
  std::vector<int>::size_type v102;
  uint64_t v103;
  std::vector<int>::pointer v104;
  std::vector<int>::pointer v105;
  std::vector<int>::pointer v106;
  std::vector<int>::pointer v107;
  std::vector<int>::pointer v108;
  uint64_t v109;
  int v110;
  std::vector<int>::pointer v111;
  std::vector<int>::pointer v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  float *__C;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  const float *v131;
  int v132;
  const float *__B;
  CBLAS_TRANSPOSE v134;
  int v135;
  CBLAS_TRANSPOSE v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  CBLAS_TRANSPOSE __TransA;
  CBLAS_TRANSPOSE __TransAa[2];
  int __K;
  int __Ka[2];
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::vector<int>::pointer v154;
  int v155;
  int *v156;
  int v157;
  std::vector<int>::pointer v158;
  uint64_t v159;
  std::vector<int>::pointer v160;
  uint64_t v161;
  int __N;
  int __Na[2];
  int __M;
  int __Ma[2];
  char v166[40];
  void *v167;
  void *v168;
  _BYTE v169[24];
  std::vector<int> v170;
  _BYTE v171[24];
  std::vector<int> v172;
  char v173[40];
  void *v174;
  void *v175;
  std::vector<int> v176;
  int v177;
  int v178;
  int __ldc;
  int v180;
  int v181;
  int v182;
  void *v183;
  void *v184;
  int v185;
  int v186;
  int __ldb;
  int v188;
  int v189;
  int v190;
  void *v191;
  void *v192;
  uint8_t buf[4];
  int v194;
  int __lda;
  int v196;
  int v197;
  int v198;
  void *__p;
  void *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  int *v210;
  int *v211;
  uint64_t v212;
  std::vector<int> v213;
  std::vector<int> v214;
  std::vector<int> v215;
  std::vector<int> v216;
  std::vector<int> __x;
  int v218[4];

  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v206 = 0;
    v205 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v29 = *(std::__shared_weak_count **)(*v7 + 168);
    v205 = v8;
    v206 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
  }
  v9 = *a4;
  if (a4[1] == *a4 || !*v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v204 = 0;
    v203 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v32 = *(std::__shared_weak_count **)(*v9 + 168);
    v203 = v10;
    v204 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  v11 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x11
    || (v12 = v11[2]) == 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
    v202 = 0;
    v201 = 0;
LABEL_14:
    Espresso::abstract_blob_container::shape((char *)buf, **a4);
    v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
    if (__p)
    {
      v200 = __p;
      operator delete(__p);
    }
    Espresso::abstract_blob_container::shape((char *)buf, (*a4)[2]);
    v14 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
    if (__p)
    {
      v200 = __p;
      operator delete(__p);
    }
    Espresso::abstract_blob_container::shape((char *)buf, **(_QWORD **)a3);
    v16 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
    v17 = (Espresso *)__p;
    if (__p)
    {
      v200 = __p;
      operator delete(__p);
    }
    if (v13 && v14 && v16)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("batch_matmul_kernel_cpu: Need atleast one ");
    if ((v18 & 1) == 0)
    {
      if ((_DWORD)v17)
      {
        if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
          dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
        Espresso::batch_matmul_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFC;
      }
    }
    if (Espresso::batch_matmul_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
    {
      Espresso::espresso_os_log_subsystem(v17, v15);
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v19, OS_LOG_TYPE_DEBUG, "batch_matmul_kernel_cpu: Zero shaped input or output so skipping computation", buf, 2u);
      }

    }
    goto LABEL_28;
  }
  v35 = v11[2];
  v37 = *(_QWORD *)(v35 + 160);
  v36 = *(std::__shared_weak_count **)(v35 + 168);
  v201 = v37;
  v202 = v36;
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (!v10 || !v37 || !v8)
    goto LABEL_14;
  Espresso::abstract_blob_container::shape((char *)buf, **a4);
  Espresso::abstract_blob_container::shape((char *)&v185, (*a4)[2]);
  Espresso::abstract_blob_container::shape((char *)&v177, **(_QWORD **)a3);
  v40 = 1;
  if ((v197 & 0x80000000) == 0 && v196 >= 1 && __lda >= 1 && v194 >= 1)
    v40 = *(_DWORD *)buf < 1;
  if (v198 == -1)
    v41 = v197 != 1;
  else
    v41 = v198 == 5;
  if (v197)
    v41 = 0;
  if (!v40 && !v41)
  {
    v42 = 1;
    if ((v189 & 0x80000000) == 0 && v188 >= 1 && __ldb >= 1 && v186 >= 1)
      v42 = v185 < 1;
    if (v190 == -1)
      v43 = v189 != 1;
    else
      v43 = v190 == 5;
    if (v189)
      v43 = 0;
    if (!v42 && !v43)
    {
      v44 = v181;
      v45 = v180;
      v46 = 1;
      v47 = __ldc;
      if ((v181 & 0x80000000) == 0 && v180 >= 1 && __ldc >= 1 && v178 >= 1)
        v46 = v177 < 1;
      if (v182 == -1)
        v48 = v181 != 1;
      else
        v48 = v182 == 5;
      if (v181)
        v48 = 0;
      if (!v46 && !v48)
      {
        if (a1[280])
        {
          if (*(int *)buf > 1 || v185 > 1 || v194 > 1 || v186 >= 2)
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("batch_matmul_kernel_cpu: Channel mode not available for 4D+ tensors");
          if (v189 != 1 && v197 != 1 && v197 != v189)
          {
            v68 = "batch_matmul_kernel_cpu: Sequence dimensions do not match";
LABEL_297:
            Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v68);
          }
          if (a1[281])
          {
            if (a1[282])
            {
              if (v196 == __ldb)
                goto LABEL_105;
              goto LABEL_148;
            }
            if (v196 != v188)
            {
LABEL_148:
              v68 = "Not compatible for multiplication";
              goto LABEL_297;
            }
          }
          else if (a1[282])
          {
            if (__lda != __ldb)
              goto LABEL_148;
          }
          else if (__lda != v188)
          {
            goto LABEL_148;
          }
LABEL_105:
          if (v181 >= 1)
          {
            v49 = 0;
            v50 = 0;
            v51 = v194 * *(_DWORD *)buf * v196 * __lda;
            v52 = v186 * v185 * v188 * __ldb;
            v53 = 4 * __ldc * v180 * v178 * v177;
            do
            {
              if (v197 == 1)
                v54 = 0;
              else
                v54 = v50;
              v55 = (const float *)(*(_QWORD *)(v10 + 24) + 4 * v51 * v54);
              if (v189 == 1)
                v56 = 0;
              else
                v56 = v50;
              if (a1[282])
                v57 = CblasTrans;
              else
                v57 = CblasNoTrans;
              if (a1[282])
                v58 = v188;
              else
                v58 = __ldb;
              if (a1[281])
                v59 = CblasTrans;
              else
                v59 = CblasNoTrans;
              if (a1[281])
                v60 = __lda;
              else
                v60 = v196;
              if (a1[281])
                v61 = v196;
              else
                v61 = __lda;
              cblas_sgemm(CblasRowMajor, v59, v57, v60, v58, v61, 1.0, v55, __lda, (const float *)(*(_QWORD *)(v37 + 24) + 4 * v52 * v56), __ldb, 0.0, (float *)(*(_QWORD *)(v8 + 24) + v49), __ldc);
              ++v50;
              v49 += v53;
            }
            while (v50 < v181);
          }
          goto LABEL_228;
        }
        if (__ldb != 1 && __lda != 1 && __lda != __ldb
          || v188 != 1 && v196 != 1 && v196 != v188
          || v189 != 1 && v197 != 1 && v197 != v189)
        {
LABEL_139:
          Espresso::abstract_blob_container::shape(v173, **(_QWORD **)a3);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v166, (const Espresso::layer_shape *)v173, 0);
          Espresso::layer_nd_shape::shape_vector(&v176, (uint64_t)v166);
          if (v174)
          {
            v175 = v174;
            operator delete(v174);
          }
          v152 = *(_QWORD *)(v10 + 24);
          Espresso::abstract_blob_container::shape(v173, **a4);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v171, (const Espresso::layer_shape *)v173, 0);
          Espresso::layer_nd_shape::shape_vector(&v172, (uint64_t)v171);
          v62 = a1[281];
          v150 = *(_QWORD *)(v37 + 24);
          Espresso::abstract_blob_container::shape(v166, (*a4)[2]);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v169, (const Espresso::layer_shape *)v166, 0);
          Espresso::layer_nd_shape::shape_vector(&v170, (uint64_t)v169);
          v63 = a1[282];
          v148 = *(_QWORD *)(v8 + 24);
          v64.__i_ = v172.__begin_;
          if ((std::vector<int>::pointer)((char *)v172.__end_ - (char *)v172.__begin_) == (std::vector<int>::pointer)4)
          {
            LODWORD(__x.__begin_) = 1;
            std::vector<int>::insert(&v172, v64, (std::vector<int>::value_type *)&__x);
          }
          begin = v170.__begin_;
          end = v170.__end_;
          v67 = v170.__end_ - v170.__begin_;
          if ((std::vector<int>::pointer)((char *)v170.__end_ - (char *)v170.__begin_) == (std::vector<int>::pointer)4)
          {
            if (v170.__end_ >= v170.__end_cap_.__value_)
            {
              v69 = (char *)v170.__end_cap_.__value_ - (char *)v170.__begin_;
              if (((char *)v170.__end_cap_.__value_ - (char *)v170.__begin_) >> 1 <= v67 + 1)
                v70 = v67 + 1;
              else
                v70 = v69 >> 1;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
                v71 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v71 = v70;
              v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v71);
              v73 = v170.__begin_;
              v74 = v170.__end_;
              v75 = (int *)&v72[4 * v67];
              v77 = (int *)&v72[4 * v76];
              *v75 = 1;
              end = v75 + 1;
              while (v74 != v73)
              {
                v78 = *--v74;
                *--v75 = v78;
              }
              v170.__begin_ = v75;
              v170.__end_ = end;
              v170.__end_cap_.__value_ = v77;
              if (v73)
                operator delete(v73);
            }
            else
            {
              *v170.__end_ = 1;
              ++end;
            }
            v170.__end_ = end;
            begin = v170.__begin_;
            v67 = end - v170.__begin_;
          }
          v158 = v172.__begin_;
          v160 = v172.__end_;
          v79 = (char *)v172.__end_ - (char *)v172.__begin_;
          v81 = v176.__begin_;
          v80 = v176.__end_;
          v82 = -2;
          if (v62)
            v83 = -1;
          else
            v83 = -2;
          v84 = v83 + (v79 >> 2);
          if (v62)
            v85 = -2;
          else
            v85 = -1;
          __M = v172.__begin_[v84];
          __K = v172.__begin_[v85 + (v79 >> 2)];
          if (!v63)
            v82 = -1;
          __N = begin[v67 + v82];
          v86 = v79 >> 2;
          *(_QWORD *)v218 = 0;
          std::vector<int>::vector(&__x, v79 >> 2);
          std::vector<int>::vector(&v216, v67);
          std::vector<int>::vector(&v215, v86);
          std::vector<int>::vector(&v214, v67);
          v87 = v80 - v81;
          std::vector<int>::vector(&v213, v87);
          v88 = v176.__begin_;
          v156 = end;
          for (i = 1; v88 != v176.__end_; i *= v90)
            v90 = *v88++;
          v154 = begin;
          if (v62)
            v91 = 112;
          else
            v91 = 111;
          __TransA = v91;
          if (v63)
            v92 = CblasTrans;
          else
            v92 = CblasNoTrans;
          NDShapeUtils::compute_strides((uint64_t)v172.__begin_, (uint64_t)v172.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_);
          NDShapeUtils::compute_strides((uint64_t)v170.__begin_, (uint64_t)v170.__end_, (uint64_t)v216.__begin_, (uint64_t)v216.__end_);
          if (i)
          {
            v93 = 0;
            v94 = 0;
            v95 = v87;
            v96 = v87 - v86;
            v97 = v95 - v67;
            v98 = v95 - 1;
            if (v86 <= 1)
              v99 = 1;
            else
              v99 = v86;
            v100 = v67;
            v101 = v67 > 1;
            v102 = v67 - 1;
            if (v101)
              v103 = v100;
            else
              v103 = 1;
            v140 = v103;
            v142 = v99;
            do
            {
              NDShapeUtils::unravel_index(v93, (uint64_t)v176.__begin_, (uint64_t)v176.__end_, v213.__begin_, (uint64_t)v213.__end_);
              v104 = v213.__begin_;
              v105 = &v213.__begin_[v96];
              if (v213.__end_ != v105)
              {
                memmove(v215.__begin_, v105, (char *)v213.__end_ - (char *)v105);
                v104 = v213.__begin_;
                v105 = v213.__end_;
              }
              v106 = &v104[v97];
              if (v105 != v106)
                memmove(v214.__begin_, v106, (char *)v105 - (char *)v106);
              if (v160 != v158)
              {
                v107 = v172.__begin_;
                v108 = v215.__begin_;
                v109 = v142;
                do
                {
                  v110 = *v107++;
                  if (v110 == 1)
                    *v108 = 0;
                  ++v108;
                  --v109;
                }
                while (v109);
              }
              if (v156 != v154)
              {
                v111 = v170.__begin_;
                v112 = v214.__begin_;
                v113 = v140;
                do
                {
                  v114 = *v111++;
                  if (v114 == 1)
                    *v112 = 0;
                  ++v112;
                  --v113;
                }
                while (v113);
              }
              v210 = 0;
              v211 = 0;
              v212 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v210, __x.__begin_, (uint64_t)__x.__end_, __x.__end_ - __x.__begin_);
              NDShapeUtils::ravel_multi_index(v215.__begin_, (uint64_t)v215.__end_, (uint64_t)v172.__begin_, (uint64_t)v172.__end_, v210, &v218[1]);
              if (v210)
              {
                v211 = v210;
                operator delete(v210);
              }
              v208 = 0;
              v207 = 0;
              v209 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v207, v216.__begin_, (uint64_t)v216.__end_, v216.__end_ - v216.__begin_);
              NDShapeUtils::ravel_multi_index(v214.__begin_, (uint64_t)v214.__end_, (uint64_t)v170.__begin_, (uint64_t)v170.__end_, (int *)v207, v218);
              if (v207)
              {
                v208 = v207;
                operator delete(v207);
              }
              cblas_sgemm(CblasRowMajor, __TransA, v92, __M, __N, __K, 1.0, (const float *)(v152 + 4 * v218[1]), v172.__begin_[v86 - 1], (const float *)(v150 + 4 * v218[0]), v170.__begin_[v102], 0.0, (float *)(v148 + 4 * v94), v176.__begin_[v98]);
              v93 = (v93 + __N * __M);
              v94 = (int)v93;
            }
            while (i > (int)v93);
          }
          if (v213.__begin_)
          {
            v213.__end_ = v213.__begin_;
            operator delete(v213.__begin_);
          }
          if (v214.__begin_)
          {
            v214.__end_ = v214.__begin_;
            operator delete(v214.__begin_);
          }
          if (v215.__begin_)
          {
            v215.__end_ = v215.__begin_;
            operator delete(v215.__begin_);
          }
          if (v216.__begin_)
          {
            v216.__end_ = v216.__begin_;
            operator delete(v216.__begin_);
          }
          if (__x.__begin_)
          {
            __x.__end_ = __x.__begin_;
            operator delete(__x.__begin_);
          }
          if (v170.__begin_)
          {
            v170.__end_ = v170.__begin_;
            operator delete(v170.__begin_);
          }
          if (v167)
          {
            v168 = v167;
            operator delete(v167);
          }
          if (v172.__begin_)
          {
            v172.__end_ = v172.__begin_;
            operator delete(v172.__begin_);
          }
          if (v174)
          {
            v175 = v174;
            operator delete(v174);
          }
          if (v176.__begin_)
          {
            v176.__end_ = v176.__begin_;
            operator delete(v176.__begin_);
          }
          goto LABEL_228;
        }
        if (a1[281])
        {
          if (a1[282])
          {
            v115 = v194;
            if (v194 != v185)
              goto LABEL_139;
LABEL_245:
            if (v181 >= 1)
            {
              v116 = 0;
              v117 = 0;
              v118 = *(_DWORD *)buf * v194;
              v119 = v115 * v186;
              v157 = *(_DWORD *)buf * v194 * __lda;
              v141 = v157 * v196;
              v143 = 4 * v180 * __ldc * v177 * v178;
              v155 = v115 * v186 * __ldb;
              v139 = v155 * v188;
              *(_QWORD *)__Na = 4 * __ldc * v177 * v178;
              v120 = 4 * v177 * v178;
              v149 = v8;
              v151 = v37;
              v153 = v10;
              do
              {
                if (v197 == 1)
                  v121 = 0;
                else
                  v121 = v117;
                if (v189 == 1)
                  v122 = 0;
                else
                  v122 = v117;
                if (v45 >= 1)
                {
                  *(_QWORD *)__TransAa = v117;
                  *(_QWORD *)__Ka = v116;
                  v123 = 0;
                  v161 = *(_QWORD *)(v10 + 24) + 4 * v141 * v121;
                  v159 = *(_QWORD *)(v37 + 24) + 4 * v139 * v122;
                  __C = (float *)(*(_QWORD *)(v8 + 24) + v116);
                  do
                  {
                    if (v196 == 1)
                      v125 = 0;
                    else
                      v125 = v123;
                    if (v188 == 1)
                      v126 = 0;
                    else
                      v126 = v123;
                    if (v47 >= 1)
                    {
                      v127 = 0;
                      v128 = v161 + 4 * v125 * v157;
                      v129 = v159 + 4 * v126 * v155;
                      *(_QWORD *)__Ma = __C;
                      do
                      {
                        if (__lda == 1)
                          v130 = 0;
                        else
                          v130 = v127;
                        v131 = (const float *)(v128 + 4 * v130 * v118);
                        if (__ldb == 1)
                          v132 = 0;
                        else
                          v132 = v127;
                        __B = (const float *)(v129 + 4 * v132 * v119);
                        if (a1[282])
                          v134 = CblasTrans;
                        else
                          v134 = CblasNoTrans;
                        if (a1[282])
                          v135 = v186;
                        else
                          v135 = v185;
                        if (a1[281])
                          v136 = CblasTrans;
                        else
                          v136 = CblasNoTrans;
                        if (a1[281])
                          v137 = *(_DWORD *)buf;
                        else
                          v137 = v194;
                        if (a1[281])
                          v138 = v194;
                        else
                          v138 = *(_DWORD *)buf;
                        cblas_sgemm(CblasRowMajor, v136, v134, v137, v135, v138, 1.0, v131, *(const int *)buf, __B, v185, 0.0, __C, v177);
                        ++v127;
                        v47 = __ldc;
                        __C = (float *)((char *)__C + v120);
                      }
                      while (v127 < __ldc);
                      v45 = v180;
                      v8 = v149;
                      v37 = v151;
                      v10 = v153;
                      __C = *(float **)__Ma;
                    }
                    ++v123;
                    __C = (float *)((char *)__C + *(_QWORD *)__Na);
                  }
                  while (v123 < v45);
                  v44 = v181;
                  v117 = *(_QWORD *)__TransAa;
                  v116 = *(_QWORD *)__Ka;
                }
                ++v117;
                v116 += v143;
              }
              while (v117 < v44);
            }
            goto LABEL_228;
          }
          if (v194 != v186)
            goto LABEL_139;
        }
        else
        {
          if (a1[282])
          {
            v115 = v185;
            if (*(_DWORD *)buf != v185)
              goto LABEL_139;
            goto LABEL_245;
          }
          if (*(_DWORD *)buf != v186)
            goto LABEL_139;
        }
        v115 = v185;
        goto LABEL_245;
      }
    }
  }
LABEL_228:
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
LABEL_28:
  v20 = v202;
  if (v202)
  {
    v21 = (unint64_t *)&v202->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v204;
  if (v204)
  {
    v24 = (unint64_t *)&v204->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v206;
  if (v206)
  {
    v27 = (unint64_t *)&v206->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1917E9FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a70;
  uint64_t v70;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  v72 = *(void **)(v70 - 192);
  if (v72)
  {
    *(_QWORD *)(v70 - 184) = v72;
    operator delete(v72);
  }
  v73 = *(void **)(v70 - 168);
  if (v73)
  {
    *(_QWORD *)(v70 - 160) = v73;
    operator delete(v73);
  }
  v74 = *(void **)(v70 - 144);
  if (v74)
  {
    *(_QWORD *)(v70 - 136) = v74;
    operator delete(v74);
  }
  v75 = *(void **)(v70 - 120);
  if (v75)
  {
    *(_QWORD *)(v70 - 112) = v75;
    operator delete(v75);
  }
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  if (a43)
    operator delete(a43);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  if (a62)
    operator delete(a62);
  if (a70)
    operator delete(a70);
  v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x248]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void Espresso::tensor_zero_pad_kernel_cpu::~tensor_zero_pad_kernel_cpu(Espresso::tensor_zero_pad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::tensor_zero_pad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v13;
  std::vector<int>::size_type v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::vector<int>::pointer v29;
  std::vector<int>::pointer v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  std::vector<int>::pointer v42;
  int64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  BOOL v47;
  _QWORD *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::vector<int>::pointer v71;
  size_t v72;
  std::vector<int>::pointer v73;
  std::vector<int>::pointer v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  float32x4_t v86;
  int8x16_t v87;
  int32x2_t v88;
  BOOL v89;
  _QWORD *v90;
  unint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int *v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  char *v117;
  unint64_t v118;
  int v119;
  char *v120;
  unint64_t v121;
  int v122;
  char *v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  std::vector<int>::pointer v133;
  std::vector<int>::pointer v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  int *v140;
  std::vector<int>::pointer v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  int v151;
  char *v152;
  unint64_t v153;
  int v154;
  char *v155;
  int v156;
  unint64_t v157;
  int v158;
  int v159;
  int v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::vector<int>::pointer v166;
  std::vector<int>::pointer v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  std::vector<int>::pointer v175;
  int *v176;
  void *v177;
  char *v178;
  char *v179;
  int *v180;
  int64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  char *v185;
  std::vector<int>::pointer v186;
  int *v187;
  char *v188;
  std::vector<int>::pointer v189;
  std::vector<int>::pointer v190;
  unint64_t v191;
  unint64_t v192;
  std::vector<int>::pointer v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  vDSP_Length v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  std::vector<int>::pointer v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  std::vector<int>::pointer v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  int *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t j;
  uint64_t i;
  int v228;
  int v229;
  int32x4_t v230;
  uint64_t v231;
  char *v232;
  std::__shared_weak_count *v233;
  char *v234;
  std::__shared_weak_count *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  char *v240;
  std::__shared_weak_count *v241;
  _BYTE __s1[32];
  uint64_t v243;
  void *__p;
  void *v245;
  uint64_t v246;
  std::vector<int> v247;
  std::vector<int> v248;
  std::vector<int> v249;
  _BYTE v250[32];
  uint64_t v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  __int128 v256;

  v7 = *a3;
  if (a3[1] == *a3 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v256 = 0uLL;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v142 = *(_QWORD *)(*v7 + 168);
    *(_QWORD *)&v256 = v8;
    *((_QWORD *)&v256 + 1) = v142;
    if (v142)
    {
      v143 = (unint64_t *)(v142 + 8);
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
  }
  v9 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v9
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v254 = 0;
    v255 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v145 = *(std::__shared_weak_count **)(*v9 + 168);
    v254 = v10;
    v255 = v145;
    if (v145)
    {
      p_shared_owners = (unint64_t *)&v145->__shared_owners_;
      do
        v147 = __ldxr(p_shared_owners);
      while (__stxr(v147 + 1, p_shared_owners));
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    Espresso::abstract_blob_container::shape(v250, **(_QWORD **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v234, (const Espresso::layer_shape *)v250, 0);
    if (v252)
    {
      v253 = v252;
      operator delete(v252);
    }
    Espresso::layer_nd_shape::shape_vector(&v249, (uint64_t)&v234);
    begin = v249.__begin_;
    end = v249.__end_;
    v13 = (char *)v249.__end_ - (char *)v249.__begin_;
    v14 = ((char *)v249.__end_ - (char *)v249.__begin_) >> 1;
    std::vector<int>::vector(&v248, v14);
    v15 = v13 >> 2;
    std::vector<int>::vector(&v247, v13 >> 2);
    v17 = a4;
    v16 = *(uint64_t **)a4;
    if (*(_QWORD *)(v17 + 8) - (_QWORD)v16 <= 0x10uLL)
    {
      if (end != begin)
      {
        v130 = 0;
        v131 = 0;
        v132 = *(unsigned __int8 *)(a1 + 544);
        v133 = v249.__begin_;
        v134 = v248.__begin_;
        if (v15 <= 1)
          v135 = 1;
        else
          v135 = v13 >> 2;
        do
        {
          v136 = a1 + 4 * v130;
          v137 = *(_DWORD *)(v136 + 288);
          if (v132)
          {
            v134[v130] = (v137 - *v133) & ~((v137 - *v133) >> 31);
            v138 = (2 * v131) | 1;
            v139 = *(_DWORD *)(v136 + 292) - *v133;
          }
          else
          {
            v134[v130] = v137 & ~(v137 >> 31);
            v138 = v130 + 1;
            v139 = *(_DWORD *)(v136 + 292);
          }
          v134[v138] = v139 & ~(v139 >> 31);
          ++v131;
          ++v133;
          v130 += 2;
          --v135;
        }
        while (v135);
      }
      Espresso::abstract_blob_container::shape(v250, **a3);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v238, (const Espresso::layer_shape *)v250, 0);
      Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__s1, (uint64_t)&v238);
      if (v247.__begin_)
      {
        v247.__end_ = v247.__begin_;
        operator delete(v247.__begin_);
      }
      v71 = *(std::vector<int>::pointer *)__s1;
      v247 = *(std::vector<int> *)__s1;
      v140 = *(int **)&__s1[8];
      memset(__s1, 0, 24);
      if (v252)
      {
        v253 = v252;
        operator delete(v252);
        v71 = v247.__begin_;
        v141 = v247.__end_;
      }
      else
      {
        v141 = v140;
      }
      v72 = (char *)v141 - (char *)v71;
      v164 = v141 - v71;
      v73 = v249.__begin_;
      v74 = v249.__end_;
      if (v164 != v15)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Output tensor rank: %zu is not equal to input rank: %zu", v164, v249.__end_ - v249.__begin_);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2]);
      v18 = v16[2];
      v20 = *(_QWORD *)(v18 + 160);
      v19 = *(std::__shared_weak_count **)(v18 + 168);
      v238 = v20;
      v239 = v19;
      if (v19)
      {
        v21 = (unint64_t *)&v19->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = 0;
      v24 = *(int *)(v20 + 8);
      v25 = v24;
      do
      {
        v25 *= *(int *)(v20 + 12 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      if (v25 != v14)
      {
        for (i = 0; i != 12; i += 4)
          v24 *= *(int *)(v20 + 12 + i);
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid pad tensor dimensions: %zu for input of rank:%zu", v24, v249.__end_ - v249.__begin_);
      }
      if (end != begin)
      {
        v26 = 0;
        v27 = 0;
        v28 = *(unsigned __int8 *)(a1 + 544);
        v29 = v249.__begin_;
        v30 = v248.__begin_;
        v31 = v247.__begin_;
        if (v15 <= 1)
          v32 = 1;
        else
          v32 = v13 >> 2;
        v33 = *(_QWORD *)(v20 + 24);
        do
        {
          v34 = (int)(float)(*(float *)(v33 + 4 * v26) + 0.5);
          if (v28)
          {
            v35 = (int)(float)(*(float *)(v33 + 4 * v26 + 4) + 0.5);
            if (v34 >= 1 && v35 >= 1)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("constant_pad_kernel: values in pads cannot be both positive when 'pad_to_given_size_mode' flag is set.");
            v37 = (2 * v27) | 1;
            v38 = (v34 - *v29) & ~((v34 - *v29) >> 31);
            v30[v26] = v38;
            v39 = v35 - *v29;
          }
          else
          {
            v38 = v34 & ~(v34 >> 31);
            v30[v26] = v38;
            v37 = v26 + 1;
            v39 = (int)(float)(*(float *)(v33 + 4 * v26 + 4) + 0.5);
          }
          v40 = v39 & ~(v39 >> 31);
          v30[v37] = v40;
          v41 = *v29++;
          *v31++ = v38 + v41 + v40;
          ++v27;
          v26 += 2;
          --v32;
        }
        while (v32);
      }
      memset(__s1, 0, 24);
      v42 = v247.__begin_;
      v43 = (char *)v247.__end_ - (char *)v247.__begin_;
      if (v247.__end_ != v247.__begin_)
      {
        v44 = v43 >> 2;
        if ((unint64_t)(v43 >> 2) <= 1)
          v44 = 1;
        v45 = __s1;
        do
        {
          v46 = *v42++;
          *v45++ = v46;
          --v44;
        }
        while (v44);
      }
      *(_DWORD *)&__s1[20] = (unint64_t)v43 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)__s1, 0, (uint64_t)v250);
      Espresso::abstract_blob_container::shape(__s1, **a3);
      v47 = Espresso::layer_shape::operator==((uint64_t)__s1, (uint64_t)v250);
      if (__p)
      {
        v245 = __p;
        operator delete(__p);
      }
      if (!v47)
      {
        v48 = operator new(0x98uLL);
        v48[1] = 0;
        v49 = v48 + 1;
        v48[2] = 0;
        *v48 = &off_1E2DBE998;
        *((_OWORD *)v48 + 4) = 0u;
        *((_OWORD *)v48 + 5) = 0u;
        *((_OWORD *)v48 + 2) = 0u;
        *((_OWORD *)v48 + 3) = 0u;
        *((_OWORD *)v48 + 6) = 0u;
        *((_OWORD *)v48 + 7) = 0u;
        *((_OWORD *)v48 + 8) = 0u;
        v48[17] = 0;
        v48[18] = 0;
        *((_DWORD *)v48 + 12) = 1065353216;
        v48[7] = 0x1FFFFFFFFLL;
        v48[12] = 0;
        v48[13] = 0;
        v48[8] = 0;
        v48[9] = 0;
        *((_BYTE *)v48 + 88) = 0;
        v48[10] = 0;
        v48[3] = &off_1E2DA0BF0;
        v48[15] = 0;
        v48[16] = 0;
        *((_BYTE *)v48 + 144) = 0;
        *(_QWORD *)__s1 = v48 + 3;
        *(_QWORD *)&__s1[8] = v48;
        *((_BYTE *)v48 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
        v50 = **a3;
        v240 = (char *)(v48 + 3);
        v241 = (std::__shared_weak_count *)v48;
        do
          v51 = __ldxr(v49);
        while (__stxr(v51 + 1, v49));
        (*(void (**)(uint64_t, _BYTE *, char **))(*(_QWORD *)v50 + 16))(v50, v250, &v240);
        v52 = v241;
        if (v241)
        {
          v53 = (unint64_t *)&v241->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v56 = a3;
        v55 = *a3;
        v57 = 0uLL;
        if (v56[1] != v55)
        {
          if (*v55)
          {
            v58 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v55 + 32))(*v55, (__n128)0);
            v57 = 0uLL;
            if (!v58)
            {
              v57 = *(_OWORD *)(*v55 + 160);
              v59 = *(_QWORD *)(*v55 + 168);
              if (v59)
              {
                v60 = (unint64_t *)(v59 + 8);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
            }
          }
        }
        v62 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
        v256 = v57;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = *(std::__shared_weak_count **)&__s1[8];
        if (*(_QWORD *)&__s1[8])
        {
          v66 = (unint64_t *)(*(_QWORD *)&__s1[8] + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      if (v252)
      {
        v253 = v252;
        operator delete(v252);
      }
      v68 = v239;
      if (v239)
      {
        v69 = (unint64_t *)&v239->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v247.__begin_;
      v72 = (char *)v247.__end_ - (char *)v247.__begin_;
      v73 = v249.__begin_;
      v74 = v249.__end_;
    }
    if (v72 == (char *)v74 - (char *)v73 && !memcmp(v71, v73, v72))
    {
      v214 = 0;
      v215 = *(int *)(v256 + 8);
      do
      {
        v215 *= *(int *)(v256 + 12 + v214);
        v214 += 4;
      }
      while (v214 != 12);
      memcpy(*(void **)(v256 + 24), *(const void **)(v254 + 24), 4 * v215);
    }
    else
    {
      *(_DWORD *)__s1 = 1;
      std::vector<int>::vector((std::vector<int> *)v250, v13 >> 2, (const std::vector<int>::value_type *)__s1);
      if ((int)((unint64_t)v13 >> 2) >= 2)
      {
        v165 = *(_QWORD *)v250;
        v166 = v247.__begin_;
        v167 = v248.__begin_;
        v168 = 4 * (v15 - 2) + 4;
        v169 = 2 * ((unint64_t)v13 >> 2);
        v170 = v169 - 4;
        do
        {
          v171 = *(std::vector<int>::pointer)((char *)v166 + v168) * *(_DWORD *)(v165 + v168);
          *(_DWORD *)(v165 + v168 - 4) = v171;
          v167[v170] *= v171;
          v167[v170 + 1] *= *(_DWORD *)(v165 + v168 - 4);
          v170 -= 2;
          v168 -= 4;
        }
        while (v168);
        v172 = ((unint64_t)v13 >> 2);
        v173 = v169 - 1;
        do
        {
          v174 = (v173 - 1);
          v175 = v248.__begin_;
          v176 = &v248.__begin_[v174];
          if (*v176 || v248.__begin_[v173])
            break;
          v177 = v176 + 1;
          v178 = (char *)((char *)v248.__end_ - (char *)(v176 + 2));
          if (v248.__end_ != v176 + 2)
          {
            memmove(v177, v176 + 2, (char *)v248.__end_ - (char *)(v176 + 2));
            v175 = v248.__begin_;
          }
          v179 = &v178[(_QWORD)v177];
          v248.__end_ = (std::vector<int>::pointer)&v178[(_QWORD)v177];
          v180 = &v175[v174];
          v181 = v179 - (char *)(v180 + 1);
          if (v179 != (char *)(v180 + 1))
            memmove(&v175[v174], v180 + 1, v179 - (char *)(v180 + 1));
          v182 = v172 - 1;
          v248.__end_ = (int *)((char *)v180 + v181);
          v183 = &v247.__begin_[(v172 - 1)];
          v184 = (v172 - 2);
          v247.__begin_[v184] *= *v183;
          v185 = (char *)((char *)v247.__end_ - (char *)(v183 + 1));
          if (v247.__end_ != v183 + 1)
            memmove(v183, v183 + 1, (char *)v247.__end_ - (char *)(v183 + 1));
          v247.__end_ = (std::vector<int>::pointer)&v185[(_QWORD)v183];
          v186 = v249.__begin_;
          v187 = &v249.__begin_[v182];
          v249.__begin_[v184] *= *v187;
          v188 = (char *)((char *)v249.__end_ - (char *)(v187 + 1));
          if (v249.__end_ != v187 + 1)
            memmove(&v186[v182], v187 + 1, (char *)v249.__end_ - (char *)(v187 + 1));
          v249.__end_ = (std::vector<int>::pointer)&v188[(_QWORD)v187];
          v173 -= 2;
          v172 = v182;
        }
        while ((unint64_t)(v182 + 1) > 2);
      }
      v190 = v247.__begin_;
      v189 = v247.__end_;
      v191 = (char *)v247.__end_ - (char *)v247.__begin_;
      v192 = v247.__end_ - v247.__begin_;
      std::vector<unsigned long>::vector(__s1, v192);
      v193 = v249.__begin_;
      v194 = *(_QWORD *)__s1;
      *(_QWORD *)(*(_QWORD *)__s1 + 8 * (v192 - 1)) = v249.__begin_[v192 - 1];
      if ((int)(v191 >> 2) >= 2)
      {
        v195 = (v192 - 2);
        v196 = *(_QWORD *)(v194 + 8 * v195 + 8);
        do
        {
          v196 *= v193[v195];
          *(_QWORD *)(v194 + 8 * v195--) = v196;
        }
        while (v195 != -1);
      }
      v197 = 0;
      v198 = v254;
      v199 = *(char **)(v254 + 24);
      v200 = *(char **)(v256 + 24);
      v201 = *(int *)(v256 + 8);
      do
      {
        v201 *= *(int *)(v256 + 12 + v197);
        v197 += 4;
      }
      while (v197 != 12);
      vDSP_vfill((const float *)(a1 + 284), *(float **)(v256 + 24), 1, v201);
      v202 = 0;
      v203 = v249.__begin_[v192 - 1];
      v204 = *(int *)(v198 + 8);
      do
      {
        v204 *= *(int *)(v198 + 12 + v202);
        v202 += 4;
      }
      while (v202 != 12);
      if (v204)
      {
        v205 = 0;
        if (v192 <= 1)
          v192 = 1;
        do
        {
          if (v189 == v190)
          {
            memcpy(v200, v199, 4 * v203);
            v200 += 4 * v203;
            v205 += v203;
          }
          else
          {
            v206 = *(unint64_t **)__s1;
            v207 = v248.__begin_;
            v208 = v192;
            do
            {
              v209 = *v206++;
              if (!(v205 % v209))
                v200 += 4 * *v207;
              v207 += 2;
              --v208;
            }
            while (v208);
            memcpy(v200, v199, 4 * v203);
            v200 += 4 * v203;
            v205 += v203;
            v210 = *(unint64_t **)__s1;
            v211 = v248.__begin_ + 1;
            v212 = v192;
            do
            {
              v213 = *v210++;
              if (!(v205 % v213))
                v200 += 4 * *v211;
              v211 += 2;
              --v212;
            }
            while (v212);
          }
          v199 += 4 * v203;
        }
        while (v205 < v204);
      }
      if (*(_QWORD *)__s1)
      {
        *(_QWORD *)&__s1[8] = *(_QWORD *)__s1;
        operator delete(*(void **)__s1);
      }
      if (*(_QWORD *)v250)
      {
        *(_QWORD *)&v250[8] = *(_QWORD *)v250;
        operator delete(*(void **)v250);
      }
    }
    if (v247.__begin_)
    {
      v247.__end_ = v247.__begin_;
      operator delete(v247.__begin_);
    }
    if (v248.__begin_)
    {
      v248.__end_ = v248.__begin_;
      operator delete(v248.__begin_);
    }
    if (v249.__begin_)
    {
      v249.__end_ = v249.__begin_;
      operator delete(v249.__begin_);
    }
  }
  else
  {
    v75 = *(uint64_t **)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 <= 0x1FuLL)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("tensor_pad kernel must have atleast two inputs");
    v76 = v75[2];
    if (v76 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76))
    {
      v222 = v75[2];
      v77 = *(_QWORD *)(v222 + 160);
      v223 = *(int **)(v222 + 168);
      v249.__begin_ = (std::vector<int>::pointer)v77;
      v249.__end_ = v223;
      if (v223)
      {
        v224 = (unint64_t *)(v223 + 2);
        do
          v225 = __ldxr(v224);
        while (__stxr(v225 + 1, v224));
      }
    }
    else
    {
      v77 = 0;
      v249.__begin_ = 0;
      v249.__end_ = 0;
    }
    Espresso::abstract_blob_container::shape(v250, **(_QWORD **)a4);
    *(_OWORD *)__s1 = *(_OWORD *)v250;
    *(_OWORD *)&__s1[16] = *(_OWORD *)&v250[16];
    v243 = v251;
    __p = 0;
    v245 = 0;
    v246 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v252, (uint64_t)v253, (v253 - v252) >> 2);
    v78 = 0;
    v79 = *(int *)(v77 + 8);
    v80 = v79;
    do
    {
      v80 *= *(int *)(v77 + 12 + v78);
      v78 += 4;
    }
    while (v78 != 12);
    if (v80 != 10)
    {
      for (j = 0; j != 12; j += 4)
        v79 *= *(int *)(v77 + 12 + j);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Invalid pad tensor dimensions: %zu", v79);
    }
    v81 = *(float32x4_t **)(v77 + 24);
    v82 = (int)(float)(v81[2].f32[0] + 0.5);
    v83 = (int)(float)(v81[2].f32[1] + 0.5);
    v84 = (int)(float)(v81[1].f32[0] + 0.5);
    v85 = (int)(float)(v81[1].f32[1] + 0.5);
    v86.i64[0] = 0x3F0000003F000000;
    v86.i64[1] = 0x3F0000003F000000;
    v87 = (int8x16_t)vcvtq_s32_f32(vaddq_f32(*v81, v86));
    v88 = (int32x2_t)vextq_s8(v87, v87, 4uLL).u64[0];
    v86.i64[0] = __PAIR64__(v88.u32[1], *(unsigned int *)__s1);
    v230 = (int32x4_t)v87;
    v87.i32[1] = vextq_s8(v87, v87, 8uLL).i32[1];
    v88.i32[1] = *(_DWORD *)&__s1[4];
    v228 = (int)(float)(v81[1].f32[3] + 0.5);
    v229 = (int)(float)(v81[1].f32[2] + 0.5);
    *(int32x2_t *)__s1 = vadd_s32(vadd_s32(*(int32x2_t *)v86.f32, *(int32x2_t *)v87.i8), v88);
    *(_DWORD *)&__s1[8] += v85 + v84;
    *(_DWORD *)&__s1[12] += v228 + v229;
    *(_DWORD *)&__s1[16] += v83 + v82;
    Espresso::abstract_blob_container::shape((char *)&v234, **a3);
    v89 = Espresso::layer_shape::operator==((uint64_t)&v234, (uint64_t)__s1);
    if (v236)
    {
      v237 = v236;
      operator delete(v236);
    }
    if (!v89)
    {
      v90 = operator new(0x98uLL);
      v90[1] = 0;
      v91 = v90 + 1;
      v90[2] = 0;
      *v90 = &off_1E2DBE998;
      *((_OWORD *)v90 + 4) = 0u;
      *((_OWORD *)v90 + 5) = 0u;
      *((_OWORD *)v90 + 2) = 0u;
      *((_OWORD *)v90 + 3) = 0u;
      *((_OWORD *)v90 + 6) = 0u;
      *((_OWORD *)v90 + 7) = 0u;
      *((_OWORD *)v90 + 8) = 0u;
      v90[17] = 0;
      v90[18] = 0;
      *((_DWORD *)v90 + 12) = 1065353216;
      v90[7] = 0x1FFFFFFFFLL;
      v90[12] = 0;
      v90[13] = 0;
      v90[8] = 0;
      v90[9] = 0;
      *((_BYTE *)v90 + 88) = 0;
      v90[10] = 0;
      v90[3] = &off_1E2DA0BF0;
      v90[15] = 0;
      v90[16] = 0;
      *((_BYTE *)v90 + 144) = 0;
      v234 = (char *)(v90 + 3);
      v235 = (std::__shared_weak_count *)v90;
      *((_BYTE *)v90 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
      v92 = **a3;
      v232 = (char *)(v90 + 3);
      v233 = (std::__shared_weak_count *)v90;
      do
        v93 = __ldxr(v91);
      while (__stxr(v93 + 1, v91));
      (*(void (**)(uint64_t, _BYTE *, char **))(*(_QWORD *)v92 + 16))(v92, __s1, &v232);
      v94 = v233;
      if (v233)
      {
        v95 = (unint64_t *)&v233->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = *a3;
      v98 = 0uLL;
      if (a3[1] != *a3)
      {
        if (*v97)
        {
          v99 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v97 + 32))(*v97, (__n128)0);
          v98 = 0uLL;
          if (!v99)
          {
            v98 = *(_OWORD *)(*v97 + 160);
            v100 = *(_QWORD *)(*v97 + 168);
            if (v100)
            {
              v101 = (unint64_t *)(v100 + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
          }
        }
      }
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
      v256 = v98;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = v235;
      if (v235)
      {
        v107 = (unint64_t *)&v235->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v10 = v254;
      v8 = v256;
    }
    v109 = *(int **)(v10 + 24);
    v110 = *(char **)(v8 + 24);
    v111 = *(_DWORD *)&__s1[4] * *(_DWORD *)__s1;
    v112 = *(_DWORD *)&__s1[4] * *(_DWORD *)__s1 * v82 * *(_DWORD *)&__s1[8] * *(_DWORD *)&__s1[12];
    bzero(v110, 4 * v112);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v230, v230))) & 1) != 0)
    {
      if (*(_DWORD *)&v250[16])
      {
        v113 = 0;
        v114 = v230.i32[0];
        v115 = &v110[4 * v112];
        do
        {
          v231 = v113;
          v116 = *(_DWORD *)__s1 * v229 * *(_DWORD *)&__s1[4] * *(_DWORD *)&__s1[8];
          bzero(v115, 4 * v116);
          v117 = &v115[4 * v116];
          if (*(_DWORD *)&v250[12])
          {
            v118 = 0;
            do
            {
              v119 = *(_DWORD *)__s1 * v84 * *(_DWORD *)&__s1[4];
              bzero(v117, 4 * v119);
              v120 = &v117[4 * v119];
              if (*(_DWORD *)&v250[8])
              {
                v121 = 0;
                do
                {
                  v122 = *(_DWORD *)__s1 * v230.i32[2];
                  bzero(v120, 4 * *(_DWORD *)__s1 * v230.i32[2]);
                  v123 = &v120[4 * v122];
                  if (*(_DWORD *)&v250[4])
                  {
                    v124 = 0;
                    v125 = *(_DWORD *)v250;
                    do
                    {
                      memcpy(&v123[4 * v114], v109, 4 * v125);
                      v126 = *(_DWORD *)__s1;
                      v123 += 4 * *(int *)__s1;
                      v125 = *(_DWORD *)v250;
                      v109 += *(int *)v250;
                      ++v124;
                    }
                    while (v124 < *(int *)&v250[4]);
                  }
                  else
                  {
                    v126 = *(_DWORD *)__s1;
                  }
                  v127 = v126 * v230.i32[3];
                  bzero(v123, 4 * v126 * v230.i32[3]);
                  v120 = &v123[4 * v127];
                  ++v121;
                }
                while (v121 < *(int *)&v250[8]);
              }
              v128 = *(_DWORD *)__s1 * v85 * *(_DWORD *)&__s1[4];
              bzero(v120, 4 * v128);
              v117 = &v120[4 * v128];
              ++v118;
            }
            while (v118 < *(int *)&v250[12]);
          }
          v129 = *(_DWORD *)__s1 * v228 * *(_DWORD *)&__s1[4] * *(_DWORD *)&__s1[8];
          bzero(v117, 4 * v129);
          v115 = &v117[4 * v129];
          v113 = v231 + 1;
        }
        while (v231 + 1 < (unint64_t)*(int *)&v250[16]);
      }
    }
    else if (*(_DWORD *)&v250[16])
    {
      v148 = 0;
      v149 = v111;
      v150 = &v110[4 * v112];
      do
      {
        v151 = *(_DWORD *)v250 * v229 * *(_DWORD *)&__s1[4] * *(_DWORD *)&__s1[8];
        bzero(v150, 4 * v151);
        v152 = &v150[4 * v151];
        if (*(_DWORD *)&v250[12])
        {
          v153 = 0;
          do
          {
            v154 = *(_DWORD *)v250 * v84 * *(_DWORD *)&__s1[4];
            bzero(v152, 4 * v154);
            v155 = &v152[4 * v154];
            v156 = *(_DWORD *)&v250[8];
            if (*(_DWORD *)&v250[8])
            {
              v157 = 0;
              do
              {
                if ((_DWORD)v149 == 1)
                {
                  v158 = *v109++;
                  *(_DWORD *)v155 = v158;
                  v155 += 4;
                }
                else
                {
                  memcpy(v155, v109, 4 * *(_DWORD *)v250 * *(_DWORD *)&v250[4]);
                  v155 += 4 * v149;
                  v156 = *(_DWORD *)&v250[8];
                  v109 += v149;
                }
                ++v157;
              }
              while (v157 < v156);
            }
            v159 = *(_DWORD *)__s1 * v85 * *(_DWORD *)&__s1[4];
            bzero(v155, 4 * v159);
            v152 = &v155[4 * v159];
            ++v153;
          }
          while (v153 < *(int *)&v250[12]);
        }
        v160 = *(_DWORD *)__s1 * v228 * *(_DWORD *)&__s1[4] * *(_DWORD *)&__s1[8];
        bzero(v152, 4 * v160);
        v150 = &v152[4 * v160];
        ++v148;
      }
      while (v148 < *(int *)&v250[16]);
    }
    if (__p)
    {
      v245 = __p;
      operator delete(__p);
    }
    if (v252)
    {
      v253 = v252;
      operator delete(v252);
    }
    v161 = (std::__shared_weak_count *)v249.__end_;
    if (v249.__end_)
    {
      v162 = (unint64_t *)(v249.__end_ + 2);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
  }
  v216 = v255;
  if (v255)
  {
    v217 = (unint64_t *)&v255->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
  if (*((_QWORD *)&v256 + 1))
  {
    v220 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
}

void sub_1917EB34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;
  void *v41;
  void *v42;
  void *v43;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  v41 = *(void **)(v39 - 152);
  if (v41)
  {
    *(_QWORD *)(v39 - 144) = v41;
    operator delete(v41);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  v42 = *(void **)(v39 - 240);
  if (v42)
  {
    *(_QWORD *)(v39 - 232) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v39 - 216);
  if (v43)
  {
    *(_QWORD *)(v39 - 208) = v43;
    operator delete(v43);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 112);
  _Unwind_Resume(a1);
}

void Espresso::squeeze_kernel_cpu::~squeeze_kernel_cpu(Espresso::squeeze_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::squeeze_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  if (a2[1] - *a2 == 40 && *(_DWORD *)(*a2 + 8) <= 4u)
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  else
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
}

void Espresso::expand_dims_kernel_cpu::~expand_dims_kernel_cpu(Espresso::expand_dims_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::expand_dims_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  if (a2[1] - *a2 == 40 && *(_DWORD *)(*a2 + 8) <= 4u)
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  else
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
}

void Espresso::array_gather_kernel_cpu::~array_gather_kernel_cpu(Espresso::array_gather_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::array_gather_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  signed int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float v41;
  float v42;
  uint64_t v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  signed int v49;
  signed int v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  float *v65;
  int v66;
  float v67;
  int v68;
  unsigned int v69;
  float v70;
  int v71;
  int v72;
  unsigned int v73;
  float v74;
  int v75;
  int v76;
  unsigned int v77;
  float v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  _BOOL4 v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int i;
  int j;
  int k;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  _BOOL4 v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  char v133[20];
  int v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  signed int v137;
  signed int v138;
  signed int v139;
  signed int v140;
  int v141;
  signed int v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *__p;
  void *v146;
  _DWORD v147[5];
  unsigned int v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;

  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v20 = *(std::__shared_weak_count **)(*v7 + 168);
    v132 = *(_QWORD *)(*v7 + 160);
    v151 = v132;
    v152 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  else
  {
    v132 = 0;
    v151 = 0;
    v152 = 0;
  }
  v9 = *a4;
  v10 = (*a4)[2];
  if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v23 = v9[2];
    v11 = *(_QWORD *)(v23 + 160);
    v24 = *(std::__shared_weak_count **)(v23 + 168);
    v149 = v11;
    v150 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v11 = 0;
    v149 = 0;
    v150 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v143, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v147, (const Espresso::layer_shape *)&v143, 0);
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v143, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v137, (const Espresso::layer_shape *)&v143, 0);
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v12 = *a3;
    if (a3[1] == *a3 || !*v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
    {
      v13 = 0;
      v127 = 0;
      v143 = 0;
      v144 = 0;
    }
    else
    {
      v13 = *(std::__shared_weak_count **)(*v12 + 168);
      v127 = *(_QWORD *)(*v12 + 160);
      v143 = v127;
      v144 = v13;
      if (v13)
      {
        v51 = (unint64_t *)&v13->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
    }
    v14 = *(_DWORD *)(a1 + 300);
    v15 = v142;
    if (v142)
    {
      v16 = &v137;
      v17 = 1;
      do
      {
        v18 = *v16++;
        v17 *= v18;
        --v15;
      }
      while (v15);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 1)
    {
      v28 = 1;
    }
    else
    {
      v27 = v147;
      v28 = 1;
      v29 = *(unsigned int *)(a1 + 300);
      do
      {
        v30 = *v27++;
        v28 *= v30;
        --v29;
      }
      while (v29);
    }
    v125 = v13;
    v31 = v14 + 1;
    if (v148 <= v31)
    {
      v33 = 1;
      if (!v28)
        goto LABEL_57;
    }
    else
    {
      v32 = &v147[v31];
      v33 = 1;
      do
      {
        v34 = *v32++;
        v33 *= v34;
        ++v31;
      }
      while (v148 > v31);
      if (!v28)
        goto LABEL_57;
    }
    v35 = 0;
    v36 = 0;
    v37 = (int)v147[*(int *)(a1 + 300)];
    v130 = v28;
    do
    {
      if (v17 >= 1)
      {
        v38 = 0;
        v39 = *(_QWORD *)(v132 + 24) + 4 * v36 * v33 * v37;
        v40 = (char *)(*(_QWORD *)(v127 + 24) + v35);
        do
        {
          v41 = *(float *)(*(_QWORD *)(v11 + 24) + 4 * v38);
          if (v41 >= 0.0)
            v42 = -0.0;
          else
            v42 = (float)(int)v37;
          v43 = (int)(float)((float)(v41 + v42) + 0.5);
          if ((int)v37 <= (int)v43 || (v43 & 0x80000000) != 0)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Invalid index %d into axis of size %d\n", v43, v37);
          v44 = (char *)(v39 + 4 * v33 * v43);
          if (v40 != v44)
            memcpy(v40, v44, 4 * v33);
          ++v38;
          v40 += 4 * v33;
        }
        while (v17 != v38);
      }
      ++v36;
      v35 += 4 * v33 * v17;
    }
    while (v36 != v130);
LABEL_57:
    v45 = v125;
    if (v125)
    {
      v46 = (unint64_t *)&v125->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
LABEL_194:
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    goto LABEL_196;
  }
  if (v142 > 3)
  {
    if (v142 == 5)
    {
      v49 = v140;
      v48 = v141;
      v50 = v139;
    }
    else
    {
      if (v142 != 4)
        goto LABEL_73;
      v49 = v139;
      v48 = v140;
      v50 = v138;
    }
    v19 = v49 * v48 * v50;
    goto LABEL_72;
  }
  if (v142)
  {
    if (v142 == 2)
    {
      v19 = v138;
    }
    else if (v142 == 1)
    {
      v19 = v137;
    }
    else
    {
      v19 = v139;
    }
LABEL_72:
    if (v19 >= 5)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather does not support indexing into 5D blobs");
  }
LABEL_73:
  v53 = *a3;
  v54 = **a3;
  if (v54 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54))
  {
    v55 = *(_QWORD *)(*v53 + 160);
    v108 = *(std::__shared_weak_count **)(*v53 + 168);
    v135 = v55;
    v136 = v108;
    if (v108)
    {
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
      v111 = v108;
    }
    else
    {
      v111 = 0;
    }
  }
  else
  {
    v111 = 0;
    v55 = 0;
    v135 = 0;
    v136 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v143, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v133, (const Espresso::layer_shape *)&v143, 0);
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  v56 = 0;
  v57 = (_DWORD *)**a4;
  v58 = v57[2];
  v59 = v57[3] * v58;
  v60 = v59 * v57[4];
  v120 = v138 * v137;
  v116 = v138;
  v117 = v137;
  v126 = v137;
  v61 = v142;
  v113 = v140 * v141 * v139;
  v114 = v139;
  v118 = v139 * v140 * v138;
  v115 = v138;
  v112 = v139;
  v121 = *a3;
  v122 = v142;
  v62 = v134;
  v119 = v134 != 5;
  v123 = a1;
  v124 = v11;
  while (v61 > 3)
  {
    v63 = v126;
    if (v61 != 4)
    {
      if (v61 != 5)
        goto LABEL_191;
      v63 = v120;
    }
LABEL_87:
    if (v63 <= v56)
      goto LABEL_191;
    if (v61 > 3)
    {
      if (v61 == 5)
        v64 = v113;
      else
        v64 = v118;
    }
    else
    {
      v64 = v126;
      if (v61 != 1)
      {
        v64 = v115;
        if (v61 != 2)
          v64 = v112;
      }
    }
    v65 = (float *)(*(_QWORD *)(v11 + 24) + 4 * v64 * v56);
    v66 = *(_DWORD *)(a1 + 280);
    if (v66 == -2)
      v67 = *v65;
    else
      v67 = (float)v66;
    v68 = *(_DWORD *)(a1 + 284);
    if (v68 == -2)
    {
      if (v61 > 3)
      {
        v69 = v118;
        if (v61 != 4)
          v69 = v113;
      }
      else
      {
        v69 = v117;
        if (v61 != 1)
        {
          v69 = v116;
          if (v61 != 2)
            v69 = v114;
        }
      }
      v70 = 0.0;
      if (v69 >= 2)
        v70 = v65[1];
    }
    else
    {
      v70 = (float)v68;
    }
    v71 = (int)v70;
    v72 = *(_DWORD *)(a1 + 288);
    if (v72 == -2)
    {
      if (v61 > 3)
      {
        if (v61 == 4)
          v73 = v118;
        else
          v73 = v113;
      }
      else
      {
        if (v61 == 2)
          v73 = v116;
        else
          v73 = v114;
        if (v61 == 1)
          v73 = v117;
      }
      if (v73 < 3)
        v74 = 0.0;
      else
        v74 = v65[2];
      v72 = -2;
    }
    else
    {
      v74 = (float)v72;
    }
    v75 = (int)v74;
    v76 = *(_DWORD *)(a1 + 292);
    if (v76 == -2)
    {
      if (v61 > 3)
      {
        if (v61 == 4)
          v77 = v118;
        else
          v77 = v113;
      }
      else if (v61 == 1)
      {
        v77 = v117;
      }
      else if (v61 == 2)
      {
        v77 = v116;
      }
      else
      {
        v77 = v114;
      }
      if (v77 < 4)
        v78 = 0.0;
      else
        v78 = v65[3];
      v76 = -2;
    }
    else
    {
      v78 = (float)v76;
    }
    v79 = (int)v67;
    v80 = (int)v78;
    if (v76 != -1 && v66 != -1 && v68 != -1 && v72 != -1 && *(_DWORD *)(a1 + 296) != -1)
    {
      *(_DWORD *)(*(_QWORD *)(v55 + 24) + 4 * v56) = *(_DWORD *)(*(_QWORD *)(v132 + 24)
                                                               + 4 * (v79 + v75 * v59 + v71 * v58 + v60 * v80));
      goto LABEL_188;
    }
    v81 = *v121;
    v83 = *(_DWORD *)(*v121 + 12);
    v82 = *(_DWORD *)(*v121 + 16);
    v84 = *(_DWORD *)(*v121 + 20);
    if ((_DWORD)v62 == 5)
    {
      v128 = 1;
      v86 = *(_DWORD *)(*v121 + 20);
LABEL_151:
      v87 = 0;
      v129 = v86;
      v86 = *(_DWORD *)(*v121 + 16);
      v85 = v119;
LABEL_152:
      v131 = v86;
      v88 = *(_DWORD *)(*v121 + 12);
      v86 = 0;
      goto LABEL_153;
    }
    v85 = 0;
    v128 = *(_DWORD *)(v81 + 24);
    v86 = 1;
    if (v62 != 2)
    {
      if (v62 == 3)
      {
        v129 = *(_DWORD *)(*v121 + 20);
        v87 = 1;
      }
      else
      {
        if (v62 == 4)
          goto LABEL_151;
        v85 = 0;
        v87 = 0;
        v86 = *(_DWORD *)(*v121 + 16);
        v129 = *(_DWORD *)(*v121 + 20);
      }
      goto LABEL_152;
    }
    v131 = *(_DWORD *)(*v121 + 16);
    v129 = *(_DWORD *)(*v121 + 20);
    v87 = 0;
    v88 = 1;
LABEL_153:
    if (v128 >= 1)
    {
      v89 = 0;
      v90 = *(_DWORD *)(v81 + 8);
      do
      {
        if (v129 >= 1)
        {
          for (i = 0; i < v129; ++i)
          {
            if (v131 >= 1)
            {
              for (j = 0; j < v131; ++j)
              {
                if (v88 >= 1)
                {
                  for (k = 0; k < v88; ++k)
                  {
                    if (v90 >= 1)
                    {
                      v94 = 0;
                      v95 = *(_QWORD *)(v132 + 24);
                      v96 = *(_QWORD *)(v55 + 24);
                      do
                      {
                        if (v79 >= 0)
                          v97 = (int)v67;
                        else
                          v97 = v94;
                        if (v71 >= 0)
                          v98 = v71;
                        else
                          v98 = k;
                        if (v75 >= 0)
                          v99 = v75;
                        else
                          v99 = j;
                        if (v80 >= 0)
                          v100 = (int)v78;
                        else
                          v100 = i;
                        if (v86)
                          k = v56;
                        if (v87)
                          j = v56;
                        if (v85)
                          i = v56;
                        if ((_DWORD)v62 == 5)
                          v89 = v56;
                        *(_DWORD *)(v96 + 4 * (v94 + v90 * (k + v83 * (j + (i + v89 * v84) * v82)))) = *(_DWORD *)(v95 + 4 * (v100 * v60 + v99 * v59 + v98 * v58 + v97));
                        ++v94;
                      }
                      while (v90 != v94);
                    }
                  }
                }
              }
            }
          }
        }
        ++v89;
      }
      while (v89 < v128);
    }
LABEL_188:
    ++v56;
    a1 = v123;
    v11 = v124;
    v61 = v122;
  }
  v63 = v61;
  if (v61 == 1)
    goto LABEL_87;
  v63 = v126;
  if (v61 == 2)
    goto LABEL_87;
  v63 = v120;
  if (v61)
    goto LABEL_87;
LABEL_191:
  v45 = v111;
  if (v111)
  {
    v101 = (unint64_t *)&v111->__shared_owners_;
    do
      v47 = __ldaxr(v101);
    while (__stlxr(v47 - 1, v101));
    goto LABEL_194;
  }
LABEL_196:
  v102 = v150;
  if (v150)
  {
    v103 = (unint64_t *)&v150->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v152;
  if (v152)
  {
    v106 = (unint64_t *)&v152->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_1917EBFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 136);
  _Unwind_Resume(a1);
}

void Espresso::multinomial_kernel_cpu::~multinomial_kernel_cpu(Espresso::multinomial_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::multinomial_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const float *v26;
  float *v27;
  float v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  float *v39;
  unint64_t v40;
  unint64_t v41;
  float *v42;
  float *v43;
  float v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  float __C;
  unsigned int *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p;
  void *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  signed int v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;

  v4 = *(uint64_t **)a4;
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("multinomial requires one input blob");
  if (*v4 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v4 + 32))(*v4))
  {
    v11 = *(std::__shared_weak_count **)(*v4 + 168);
    v59 = *(_QWORD *)(*v4 + 160);
    v81 = v59;
    v82 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v59 = 0;
    v82 = 0;
    v81 = 0;
  }
  v7 = *a3;
  v8 = **a3;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v14 = *(std::__shared_weak_count **)(*v7 + 168);
    v58 = *(_QWORD *)(*v7 + 160);
    v79 = v58;
    v80 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v58 = 0;
    v79 = 0;
    v80 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v69, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v73, (const Espresso::layer_shape *)&v69, 0);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  v9 = v78;
  if (v78 > 3)
  {
    if (v78 == 5)
    {
      v9 = v74 * (uint64_t)v73;
      v10 = v76 * (uint64_t)v77 * v75;
    }
    else if (v78 == 4)
    {
      v9 = v73;
      v10 = v75 * (uint64_t)v76 * v74;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  else
  {
    v10 = v78;
    if (v78)
    {
      if (v78 == 1)
      {
        v10 = v73;
      }
      else if (v78 == 2)
      {
        v9 = v73;
        v10 = v74;
      }
      else
      {
        v9 = v74 * (uint64_t)v73;
        v10 = v75;
      }
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v69, v10, 1, 1, 1);
  v17 = *(float **)(v69 + 24);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(std::__shared_weak_count **)(v18 + 96);
  v61 = *(unsigned int **)(v18 + 88);
  v67 = v61;
  v68 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v56 = v19;
  if (v9)
  {
    v22 = 0;
    v23 = 0;
    v57 = v9;
    v24 = *(_DWORD *)(a1 + 280);
    do
    {
      v63 = v24;
      v62 = *(_QWORD *)(v58 + 24);
      v25 = *(_QWORD *)(v59 + 24);
      v65 = v23;
      v26 = (const float *)(v25 + 4 * v23 * v10);
      __C = 0.0;
      __C = *v26;
      vDSP_maxv(v26, 1, &__C, v10);
      v64 = v22;
      if (v10)
      {
        v27 = (float *)(v25 + v22);
        v28 = 0.0;
        v29 = v17;
        v30 = v10;
        do
        {
          v31 = *v27++;
          v28 = v28 + expf(v31 - __C);
          *v29++ = v28;
          --v30;
        }
        while (v30);
      }
      else
      {
        v28 = 0.0;
      }
      v24 = *(_DWORD *)(a1 + 280);
      if (v24)
      {
        v32 = 0;
        v33 = *v61;
        do
        {
          v34 = v33 / 0xADC8;
          v35 = 48271 * (v33 % 0xADC8);
          v34 *= 3399;
          v36 = v35 >= v34;
          v37 = v35 - v34;
          if (v36)
            v38 = 0;
          else
            v38 = 0x7FFFFFFF;
          v33 = v38 + v37;
          v39 = &v17[v10];
          if (v10)
          {
            v40 = v10;
            v39 = v17;
            do
            {
              v41 = v40 >> 1;
              v42 = &v39[v40 >> 1];
              v44 = *v42;
              v43 = v42 + 1;
              v40 += ~(v40 >> 1);
              if ((float)(v28 * (float)((float)((float)(v33 - 1) * 4.6566e-10) + 0.0)) < v44)
                v40 = v41;
              else
                v39 = v43;
            }
            while (v40);
          }
          *(float *)(v62 + 4 * v65 * v63 + 4 * v32++) = (float)(v39 - v17);
        }
        while (v32 != v24);
        *v61 = v33;
      }
      v23 = v65 + 1;
      v22 = v64 + 4 * v10;
    }
    while (v65 + 1 != v57);
  }
  if (v56)
  {
    v45 = (unint64_t *)&v56->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v47 = v70;
  if (v70)
  {
    v48 = (unint64_t *)&v70->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v80;
  if (v80)
  {
    v51 = (unint64_t *)&v80->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v82;
  if (v82)
  {
    v54 = (unint64_t *)&v82->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_1917EC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 136);
  _Unwind_Resume(a1);
}

void Espresso::instancenorm_1d_kernel_cpu::~instancenorm_1d_kernel_cpu(Espresso::instancenorm_1d_kernel_cpu *this)
{
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::instancenorm_1d_kernel_cpu::__launch(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t **a9, uint64_t **a10)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t flags;
  int32x2_t v30;
  int32x2_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  vDSP_Length __N;
  uint64_t v71;
  int v72;
  int v73;
  float v74;
  float v75;
  uint64_t v76;
  float v77;
  float v78;
  const float *v79;
  uint64_t v80;
  float *v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  float v96;
  float v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  unint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  unint64_t v137;
  unint64_t v138;
  float32x4_t v139;
  float32x4_t v140;
  unint64_t v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t *v162;
  float32x4_t *v163;
  float32x4_t *v164;
  float32x4_t *v165;
  unint64_t v166;
  uint64_t v167;
  float32x4_t *v168;
  uint64_t v169;
  float32x4_t v170;
  float32x4_t v171;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  const float *v175;
  const float *v176;
  unint64_t v177;
  float32x4_t *v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t v196;
  unint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  unint64_t v201;
  uint64_t v202;
  float32x4_t v203;
  unint64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  float32x4_t v213;
  float32x4_t v214;
  uint64_t v215;
  uint64_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t v229;
  const float *v230;
  float *v231;
  unint64_t v232;
  float32x4_t v233;
  float v234;
  uint64_t v235;
  float v236;
  uint64_t v237;
  unint64_t v238;
  float v239;
  float v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  float v244;
  float v245;
  uint64_t v246;
  float *v247;
  float *v248;
  unint64_t v249;
  float v250;
  float v251;
  float v252;
  unint64_t *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  const char *v267;
  char *v268;
  std::runtime_error *v269;
  std::runtime_error *exception;
  std::__shared_weak_count *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  const float *v299;
  float *v300;
  float __B;
  BNNSFilterParameters filter_params;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t __C;
  std::__shared_weak_count *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;

  v13 = *a9;
  v14 = **a9;
  if (v14 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
  {
    v15 = *(_QWORD *)(*v13 + 160);
    v38 = *(std::__shared_weak_count **)(*v13 + 168);
    v311 = v15;
    v312 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
    }
  }
  else
  {
    v15 = 0;
    v311 = 0;
    v312 = 0;
  }
  v16 = *a10;
  v17 = **a10;
  if (v17 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17))
  {
    v18 = *(_QWORD *)(*v16 + 160);
    v41 = *(std::__shared_weak_count **)(*v16 + 168);
    v309 = v18;
    v310 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
  }
  else
  {
    v18 = 0;
    v309 = 0;
    v310 = 0;
  }
  v19 = *(_QWORD *)(a1 + 304);
  if (!v19)
  {
    v267 = "instancenorm_1d_kernel_cpu: missing param wGamma";
    goto LABEL_194;
  }
  v20 = *(_QWORD *)(a1 + 320);
  if (!v20)
  {
    v267 = "instancenorm_1d_kernel_cpu: missing param wBeta";
LABEL_194:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v267);
  }
  v21 = *(_DWORD *)(a1 + 296);
  if (!v21)
  {
    Espresso::abstract_blob_container::shape((char *)&src, **a10);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&dest, (const Espresso::layer_shape *)&src, 0);
    if (src.size[4])
    {
      src.size[5] = src.size[4];
      operator delete((void *)src.size[4]);
    }
    switch(HIDWORD(dest.size[1]))
    {
      case 1:
        flags = 1;
        if (HIDWORD(dest.size[1]))
          goto LABEL_69;
        goto LABEL_71;
      case 2:
        flags = (int)dest.flags;
        if (!HIDWORD(dest.size[1]))
          goto LABEL_71;
        goto LABEL_69;
      case 3:
        flags = (int)dest.layout * (uint64_t)(int)dest.flags;
        if (!HIDWORD(dest.size[1]))
          goto LABEL_71;
        goto LABEL_69;
      case 4:
        flags = (int)dest.layout * (uint64_t)(int)dest.flags * SLODWORD(dest.size[0]);
        if (!HIDWORD(dest.size[1]))
          goto LABEL_71;
        goto LABEL_69;
      case 5:
        flags = (int)dest.layout * (uint64_t)(int)dest.flags * SLODWORD(dest.size[0]) * SHIDWORD(dest.size[0]);
        if (HIDWORD(dest.size[1]))
          goto LABEL_69;
        goto LABEL_71;
      default:
        flags = 0;
        if (HIDWORD(dest.size[1]))
LABEL_69:
          __N = *((int *)&dest + SHIDWORD(dest.size[1]) - 1);
        else
LABEL_71:
          __N = 0;
        v71 = *(int *)(*(_QWORD *)(a1 + 304) + 8);
        if (__N == v71)
        {
          v71 = *(int *)(*(_QWORD *)(a1 + 320) + 8);
          if (__N == v71)
          {
            v72 = *(_DWORD *)(a1 + 280);
            if (__N > 1)
            {
              src.flags = BNNSNDArrayFlagBackpropSet;
              filter_params.flags = 0;
              if (!v72)
              {
                if (flags)
                {
                  v82 = 0;
                  do
                  {
                    v83 = (float *)(*(_QWORD *)(v15 + 24) + v82);
                    vDSP_normalize((const float *)(*(_QWORD *)(v18 + 24) + v82), 1, v83, 1, (float *)&src, (float *)&filter_params.flags, __N);
                    vDSP_vma(v83, 1, *(const float **)(*(_QWORD *)(a1 + 304) + 16), 1, *(const float **)(*(_QWORD *)(a1 + 320) + 16), 1, v83, 1, __N);
                    v82 += 4 * __N;
                    --flags;
                  }
                  while (flags);
                }
                goto LABEL_173;
              }
            }
            else
            {
              if (!v72 || *(_DWORD *)(a1 + 288))
                Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("instancenorm_1d_kernel_cpu: inner dimension must have size > 1");
              src.flags = BNNSNDArrayFlagBackpropSet;
              filter_params.flags = 0;
            }
            v73 = *(_DWORD *)(a1 + 292);
            if (v73)
              v74 = 0.0;
            else
              v74 = *(float *)(a1 + 284);
            if (v73)
              v75 = *(float *)(a1 + 284);
            else
              v75 = 0.0;
            if (flags)
            {
              v76 = 0;
              v77 = (float)__N + -1.0;
              if (!*(_DWORD *)(a1 + 288))
                v77 = (float)__N;
              v78 = 1.0 / v77;
              do
              {
                v79 = (const float *)(*(_QWORD *)(v18 + 24) + v76);
                v80 = *(_QWORD *)(v15 + 24);
                LODWORD(__C) = 0;
                LODWORD(v305) = 0;
                vDSP_sve(v79, 1, (float *)&__C, __N);
                v81 = (float *)(v80 + v76);
                *(float *)&__C = (float)(-1.0 / (float)__N) * *(float *)&__C;
                vDSP_vsadd(v79, 1, (const float *)&__C, v81, 1, __N);
                vDSP_svesq(v81, 1, (float *)&v305, __N);
                *(float *)&v305 = v78 * *(float *)&v305;
                __B = 1.0 / (float)(v74 + sqrtf(v75 + *(float *)&v305));
                vDSP_vsmul(v81, 1, &__B, v81, 1, __N);
                vDSP_vma(v81, 1, *(const float **)(*(_QWORD *)(a1 + 304) + 16), 1, *(const float **)(*(_QWORD *)(a1 + 320) + 16), 1, v81, 1, __N);
                v76 += 4 * __N;
                --flags;
              }
              while (flags);
            }
            goto LABEL_173;
          }
          v268 = "instancenorm_1d_kernel_cpu: wBeta (%d) size is less than input blob (%d, %d, %d, %d) size";
        }
        else
        {
          v268 = "instancenorm_1d_kernel_cpu: wGamma (%d) size is less than input blob (%d, %d, %d, %d) size";
        }
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>(v268, v71, *(unsigned int *)(v18 + 8), *(unsigned int *)(v18 + 12), *(unsigned int *)(v18 + 16), *(unsigned int *)(v18 + 20));
    }
  }
  v22 = 0;
  v23 = *(int *)(v18 + 12);
  v24 = *(int *)(v18 + 8);
  v296 = v24;
  do
  {
    v24 *= *(int *)(v18 + 12 + v22);
    v22 += 4;
  }
  while (v22 != 12);
  v25 = (int)v23 * (uint64_t)(int)v296;
  v26 = *a10;
  v27 = (char *)a10[1] - (char *)*a10;
  v28 = v24 / v25;
  if (v27 == 16)
  {
    LODWORD(a2) = *(_DWORD *)(a1 + 284);
    channelnorm1d_training_slice(0, v296, 0, v24 / v25, *(float **)(v15 + 24), *(int *)(v15 + 8), *(const float **)(v18 + 24), v23, a2, a3, a4, a5, a6, a7, v296, *(float **)(v19 + 16), *(float **)(v20 + 16), *(_DWORD *)(a1 + 288) != 0, *(_DWORD *)(a1 + 292) != 0);
    if ((char *)a9[1] - (char *)*a9 == 32)
      goto LABEL_199;
    goto LABEL_173;
  }
  if (v21 != 2)
  {
    if (v27 != 32)
      goto LABEL_199;
    v44 = v26[2];
    if (v44 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44))
    {
      v260 = v26[2];
      v45 = *(_QWORD *)(v260 + 160);
      v261 = *(std::__shared_weak_count **)(v260 + 168);
      __C = v45;
      v308 = v261;
      if (v261)
      {
        v262 = (unint64_t *)&v261->__shared_owners_;
        do
          v263 = __ldxr(v262);
        while (__stxr(v263 + 1, v262));
      }
    }
    else
    {
      v45 = 0;
      __C = 0;
      v308 = 0;
    }
    v46 = *a9;
    if ((char *)a9[1] - (char *)*a9 == 32)
    {
      v47 = v46[2];
      if (v47 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47))
      {
        v264 = v46[2];
        v49 = *(_QWORD *)(v264 + 160);
        v48 = *(std::__shared_weak_count **)(v264 + 168);
        v305 = v49;
        v306 = v48;
        if (v48)
        {
          v265 = (unint64_t *)&v48->__shared_owners_;
          do
            v266 = __ldxr(v265);
          while (__stxr(v266 + 1, v265));
        }
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v305 = 0;
        v306 = 0;
      }
      v50 = *(int *)(v49 + 8);
      if (v296 >= v50)
        v51 = v296 - v50;
      else
        v51 = 0;
      if ((char *)a10[1] - (char *)*a10 == 16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(exception);
      }
      v52 = *(float **)(v49 + 24);
      if (v296 < v50)
      {
        memset(&src.data_type, 0, 32);
        memset(&src.stride[1], 0, 64);
        memset(&src.size[1], 0, 64);
        *(_QWORD *)&src.flags = 0;
        src.size[0] = v50 - v296;
        src.size[1] = *(int *)(v45 + 12);
        v53 = *(_QWORD *)(v45 + 16);
        *(_QWORD *)&v54 = (int)v53;
        *((_QWORD *)&v54 + 1) = SHIDWORD(v53);
        *(_OWORD *)&src.size[2] = v54;
        src.stride[0] = 1;
        v55 = *(_DWORD *)(v45 + 8);
        src.stride[1] = v55;
        src.stride[2] = v55 * (uint64_t)SLODWORD(src.size[1]);
        src.stride[3] = LODWORD(src.stride[2]) * (int)v53;
        src.data = (void *)(*(_QWORD *)(v45 + 24) + 4 * v296);
        src.layout = BNNSDataLayoutImageCHW;
        src.data_type = BNNSDataTypeFloat32;
        src.data_scale = 1.0;
        memset(&dest.data_type, 0, 32);
        memset(&dest.size[3], 0, 112);
        dest.flags = BNNSNDArrayFlagBackpropSet;
        *(_OWORD *)&dest.size[1] = 0u;
        dest.layout = BNNSDataLayoutImageCHW;
        dest.size[0] = v50 - v296;
        v56 = *(_QWORD *)(v45 + 12);
        *(_QWORD *)&v54 = (int)v56;
        *((_QWORD *)&v54 + 1) = SHIDWORD(v56);
        *(_OWORD *)&dest.size[1] = v54;
        dest.size[3] = *(int *)(v45 + 20);
        dest.stride[0] = 1;
        dest.stride[1] = *(int *)(v49 + 8);
        dest.stride[2] = *(int *)(v49 + 12) * (uint64_t)SLODWORD(dest.stride[1]);
        dest.stride[3] = *(int *)(v49 + 16) * (uint64_t)SLODWORD(dest.stride[2]);
        dest.data = *(void **)(v49 + 24);
        dest.data_type = BNNSDataTypeFloat32;
        dest.data_scale = 1.0;
        memset(&filter_params, 0, sizeof(filter_params));
        v57 = *(_QWORD *)(a1 + 8);
        if (v57 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v57 == &off_1E2D5E820)
          filter_params.n_threads = *(_QWORD *)(v57 + 168);
        if (BNNSCopy(&dest, &src, &filter_params))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
        v52 += v50 - v296;
      }
      if (v48)
      {
        v58 = (unint64_t *)&v48->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v45 = __C;
      v15 = v311;
      v296 = v51;
    }
    else
    {
      v50 = 0;
      v52 = 0;
    }
    memset(&src.data_type, 0, 32);
    memset(&src.stride[1], 0, 64);
    memset(&src.size[1], 0, 64);
    *(_OWORD *)&src.flags = 0u;
    src.size[0] = *(int *)(v45 + 8);
    src.size[1] = *(int *)(v45 + 12);
    src.size[2] = *(int *)(v45 + 16);
    src.size[3] = *(int *)(v45 + 20);
    src.stride[0] = 1;
    src.stride[1] = src.size[0];
    src.stride[2] = SLODWORD(src.size[1]) * (uint64_t)SLODWORD(src.size[0]);
    src.stride[3] = SLODWORD(src.size[2]) * (uint64_t)(LODWORD(src.size[1]) * LODWORD(src.size[0]));
    src.data = *(void **)(v45 + 24);
    src.layout = BNNSDataLayoutImageCHW;
    src.data_type = BNNSDataTypeFloat32;
    src.data_scale = 1.0;
    dest.flags = BNNSNDArrayFlagBackpropSet;
    memset(&dest.data_type, 0, 32);
    memset(&dest.stride[1], 0, 64);
    memset(&dest.size[4], 0, 32);
    dest.layout = BNNSDataLayoutImageCHW;
    dest.size[0] = src.size[0];
    dest.size[1] = src.size[1];
    dest.size[2] = src.size[2];
    dest.size[3] = src.size[3];
    dest.stride[0] = 1;
    dest.stride[1] = *(int *)(v15 + 8);
    dest.stride[2] = *(int *)(v15 + 12) * (uint64_t)SLODWORD(dest.stride[1]);
    dest.stride[3] = *(int *)(v15 + 16) * (uint64_t)SLODWORD(dest.stride[2]);
    dest.data = *(void **)(v15 + 24);
    dest.data_type = BNNSDataTypeFloat32;
    dest.data_scale = 1.0;
    memset(&filter_params, 0, sizeof(filter_params));
    v60 = *(_QWORD *)(a1 + 8);
    if (v60 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v60 == &off_1E2D5E820)
      filter_params.n_threads = *(_QWORD *)(v60 + 168);
    if (BNNSCopy(&dest, &src, &filter_params))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
    LODWORD(v61) = *(_DWORD *)(a1 + 284);
    channelnorm1d_training_slice(v52, v296, v50, v28, (float *)(*(_QWORD *)(v15 + 24) + 4 * *(int *)(v45 + 8)), *(int *)(v15 + 8), *(const float **)(v309 + 24), *(int *)(v309 + 12), v61, v62, v63, v64, v65, v66, *(int *)(v309 + 8), *(float **)(*(_QWORD *)(a1 + 304) + 16), *(float **)(*(_QWORD *)(a1 + 320) + 16), *(_DWORD *)(a1 + 288) != 0, *(_DWORD *)(a1 + 292) != 0);
    v67 = v308;
    if (!v308)
      goto LABEL_173;
    v68 = (unint64_t *)&v308->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
LABEL_171:
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    goto LABEL_173;
  }
  if (v27 != 32 || (char *)a9[1] - (char *)*a9 != 16)
  {
LABEL_199:
    v269 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(v269);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v26[2] + 32))(v26[2]);
  v32 = v296;
  v33 = v26[2];
  v34 = *(_QWORD *)(v33 + 160);
  v35 = *(std::__shared_weak_count **)(v33 + 168);
  v277 = v24 / v25;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v271 = v35;
  }
  else
  {
    v271 = 0;
  }
  if (v24 >= v25)
  {
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = *(_QWORD *)(v15 + 24);
    v88 = *(int *)(v15 + 8);
    v89 = *(_QWORD *)(v18 + 24);
    v90 = *(_QWORD *)(v34 + 24);
    v91 = *(int *)(v18 + 8);
    v92 = *(int *)(v18 + 12);
    v299 = *(const float **)(*(_QWORD *)(a1 + 320) + 16);
    v300 = *(float **)(*(_QWORD *)(a1 + 304) + 16);
    v93 = *(_DWORD *)(a1 + 288);
    v94 = *(_DWORD *)(a1 + 292);
    v31.i32[0] = *(_DWORD *)(a1 + 284);
    v95 = v88;
    v96 = 1.0 / (float)v92;
    v97 = 1.0 / (float)((float)v92 + -1.0);
    if (v94)
      *(float *)v30.i32 = 0.0;
    else
      v30.i32[0] = v31.i32[0];
    if (!v94)
      *(float *)v31.i32 = 0.0;
    v98 = (float32x4_t)vdupq_lane_s32(v31, 0);
    v298 = *(int *)(v18 + 8);
    v99 = v89 + 12 * (int)v91;
    v276 = 4 * (int)v92 * (uint64_t)(int)v91;
    v100 = 16 * v91;
    v101 = v89 + 8 * v91;
    v102 = 4 * v91;
    v103 = v89 + 4 * v91;
    v274 = *(_QWORD *)(v18 + 24);
    v275 = 4 * (int)v92 * (uint64_t)(int)v88;
    v104 = 16 * v88;
    v105 = v87 + 12 * (int)v88;
    v106 = v87 + 8 * v88;
    v107 = 4 * v88;
    v108 = (float32x4_t)vdupq_lane_s32(v30, 0);
    v109 = v87 + 4 * v88;
    v284 = v105;
    v285 = v106;
    if (!v93)
      v97 = 1.0 / (float)v92;
    v110 = v87;
    v272 = v89 + 8 * v91;
    v273 = v89 + 12 * (int)v91;
    v286 = v95;
    v287 = v87;
    do
    {
      v282 = v101;
      v283 = v84;
      v279 = v86;
      v280 = v85;
      __asm { FMOV            V7.4S, #1.0 }
      v278 = v103;
      v281 = v99;
      if (v32 >= 8)
      {
        v117 = 0;
        v118 = v110;
        v119 = v90;
        v120 = v85;
        v121 = v89;
        v122 = v103;
        v123 = 8;
        do
        {
          if (v92 >= 4)
          {
            v127 = 0;
            v128 = 0uLL;
            v129 = 0uLL;
            v130 = 4;
            v131 = 0uLL;
            v132 = 0uLL;
            v133 = 0uLL;
            v134 = 0uLL;
            v135 = 0uLL;
            v136 = 0uLL;
            do
            {
              v129 = vaddq_f32(v129, *(float32x4_t *)(v121 + v127 + 16));
              v128 = vaddq_f32(v128, *(float32x4_t *)(v121 + v127));
              v132 = vaddq_f32(v132, *(float32x4_t *)(v122 + v127 + 16));
              v131 = vaddq_f32(v131, *(float32x4_t *)(v122 + v127));
              v134 = vaddq_f32(v134, *(float32x4_t *)(v101 + v127 + 16));
              v133 = vaddq_f32(v133, *(float32x4_t *)(v101 + v127));
              v136 = vaddq_f32(v136, *(float32x4_t *)(v99 + v127 + 16));
              v135 = vaddq_f32(v135, *(float32x4_t *)(v99 + v127));
              v130 += 4;
              v127 += v100;
            }
            while (v130 <= v92);
            v125 = vaddq_f32(vaddq_f32(v135, v133), vaddq_f32(v131, v128));
            v126 = vaddq_f32(vaddq_f32(v136, v134), vaddq_f32(v132, v129));
            v124 = v92 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v124 = 0;
            v125 = 0uLL;
            v126 = 0uLL;
          }
          v137 = v92 - v124;
          if (v92 > v124)
          {
            v138 = v102 * v124;
            do
            {
              v126 = vaddq_f32(v126, *(float32x4_t *)(v121 + v138 + 16));
              v125 = vaddq_f32(v125, *(float32x4_t *)(v121 + v138));
              v138 += v102;
              --v137;
            }
            while (v137);
          }
          v139 = vmulq_n_f32(v125, v96);
          v140 = vmulq_n_f32(v126, v96);
          if (v92 >= 4)
          {
            v144 = 0;
            v141 = 0;
            v145 = 0uLL;
            v146 = 0uLL;
            v147 = v120;
            v148 = 0uLL;
            v149 = 0uLL;
            v150 = 0uLL;
            v151 = 0uLL;
            v152 = 0uLL;
            v153 = 0uLL;
            do
            {
              v154 = vsubq_f32(*(float32x4_t *)(v121 + v144), v139);
              v155 = vsubq_f32(*(float32x4_t *)(v121 + v144 + 16), v140);
              v156 = vsubq_f32(*(float32x4_t *)(v122 + v144), v139);
              v157 = vsubq_f32(*(float32x4_t *)(v122 + v144 + 16), v140);
              v158 = vsubq_f32(*(float32x4_t *)(v101 + v144), v139);
              v159 = vsubq_f32(*(float32x4_t *)(v101 + v144 + 16), v140);
              v160 = vsubq_f32(*(float32x4_t *)(v99 + v144), v139);
              v161 = vsubq_f32(*(float32x4_t *)(v99 + v144 + 16), v140);
              v162 = (float32x4_t *)(v87 + v147);
              *v162 = v154;
              v162[1] = v155;
              v163 = (float32x4_t *)(v109 + v147);
              *v163 = v156;
              v163[1] = v157;
              v164 = (float32x4_t *)(v106 + v147);
              *v164 = v158;
              v164[1] = v159;
              v165 = (float32x4_t *)(v105 + v147);
              *v165 = v160;
              v165[1] = v161;
              v146 = vmlaq_f32(v146, v155, v155);
              v145 = vmlaq_f32(v145, v154, v154);
              v149 = vmlaq_f32(v149, v157, v157);
              v148 = vmlaq_f32(v148, v156, v156);
              v151 = vmlaq_f32(v151, v159, v159);
              v150 = vmlaq_f32(v150, v158, v158);
              v153 = vmlaq_f32(v153, v161, v161);
              v166 = v141 + 8;
              v152 = vmlaq_f32(v152, v160, v160);
              v141 += 4;
              v147 += v104;
              v144 += v100;
            }
            while (v166 <= v92);
            v142 = vaddq_f32(vaddq_f32(v152, v150), vaddq_f32(v148, v145));
            v143 = vaddq_f32(vaddq_f32(v153, v151), vaddq_f32(v149, v146));
          }
          else
          {
            v141 = 0;
            v142 = 0uLL;
            v143 = 0uLL;
          }
          v167 = v92 - v141;
          if (v92 > v141)
          {
            v168 = (float32x4_t *)(v110 + 4 * (v117 + v95 * v141));
            v169 = v102 * v141;
            do
            {
              v170 = vsubq_f32(*(float32x4_t *)(v121 + v169), v139);
              v171 = vsubq_f32(*(float32x4_t *)(v121 + v169 + 16), v140);
              *v168 = v170;
              v168[1] = v171;
              v143 = vmlaq_f32(v143, v171, v171);
              v142 = vmlaq_f32(v142, v170, v170);
              v168 = (float32x4_t *)((char *)v168 + v107);
              v169 += v102;
              --v167;
            }
            while (v167);
          }
          if ((_DWORD)v92)
          {
            v172 = 0;
            v173 = vdivq_f32(_Q7, vaddq_f32(v108, vsqrtq_f32(vaddq_f32(v98, vmulq_n_f32(v142, v97)))));
            v174 = vdivq_f32(_Q7, vaddq_f32(v108, vsqrtq_f32(vaddq_f32(v98, vmulq_n_f32(v143, v97)))));
            v175 = v299;
            v176 = v300;
            v177 = v92;
            do
            {
              v178 = (float32x4_t *)(v118 + v172);
              v179 = vld1q_dup_f32(v175++);
              v180 = vaddq_f32(*(float32x4_t *)(v119 + v172), v179);
              v181 = vaddq_f32(*(float32x4_t *)(v119 + v172 + 16), v179);
              v182 = vld1q_dup_f32(v176++);
              v183 = vmlaq_f32(v181, v182, vmulq_f32(v174, *(float32x4_t *)(v118 + v172 + 16)));
              *v178 = vmlaq_f32(v180, v182, vmulq_f32(v173, *(float32x4_t *)(v118 + v172)));
              v178[1] = v183;
              v172 += v107;
              --v177;
            }
            while (v177);
          }
          v116 = v123;
          v123 += 8;
          v99 += 32;
          v101 += 32;
          v122 += 32;
          v121 += 32;
          v120 += 32;
          v117 += 8;
          v119 += 32;
          v118 += 32;
        }
        while (v123 <= v32);
      }
      else
      {
        v116 = 0;
      }
      v184 = v116 | 4;
      if ((v116 | 4) <= v32)
      {
        v186 = 0;
        v187 = 4 * v116;
        v188 = v273 + 4 * v116;
        v189 = v272 + 4 * v116;
        v190 = v274 + 4 * (v298 + v116);
        v191 = v274 + 4 * v116;
        v295 = v110 + 4 * v116;
        v192 = v283;
        v294 = v284 + 4 * v116;
        v293 = v281 + 4 * v116;
        v292 = v285 + 4 * v116;
        v291 = v282 + 4 * v116;
        v289 = v89 + 4 * (v298 + v116);
        v290 = v110 + 4 * (v95 + v116);
        v288 = v89 + 4 * v116;
        do
        {
          v185 = v184;
          if (v92 >= 4)
          {
            v195 = 0uLL;
            v196 = v192;
            v197 = 4;
            v198 = 0uLL;
            v199 = 0uLL;
            v200 = 0uLL;
            do
            {
              v200 = vaddq_f32(v200, *(float32x4_t *)(v191 + v196));
              v199 = vaddq_f32(v199, *(float32x4_t *)(v190 + v196));
              v198 = vaddq_f32(v198, *(float32x4_t *)(v189 + v196));
              v195 = vaddq_f32(v195, *(float32x4_t *)(v188 + v196));
              v197 += 4;
              v196 += v100;
            }
            while (v197 <= v92);
            v194 = vaddq_f32(vaddq_f32(v200, v199), vaddq_f32(v198, v195));
            v193 = v92 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v193 = 0;
            v194 = 0uLL;
          }
          v201 = v92 - v193;
          if (v92 > v193)
          {
            v202 = 4 * (v116 + (int)v298 * (uint64_t)(int)v193);
            do
            {
              v194 = vaddq_f32(v194, *(float32x4_t *)(v89 + v202));
              v202 += v102;
              --v201;
            }
            while (v201);
          }
          v203 = vmulq_n_f32(v194, v96);
          if (v92 >= 4)
          {
            v297 = v116;
            v204 = 0;
            v206 = 0uLL;
            v208 = v288;
            v207 = v289;
            v210 = v290;
            v209 = v291;
            v212 = v292;
            v211 = v293;
            v213 = 0uLL;
            v214 = 0uLL;
            v215 = v294;
            v216 = v295;
            v217 = 0uLL;
            do
            {
              v218 = *(float32x4_t *)(v211 + v186);
              v219 = vsubq_f32(*(float32x4_t *)(v208 + v186), v203);
              v220 = vsubq_f32(*(float32x4_t *)(v207 + v186), v203);
              v221 = vsubq_f32(*(float32x4_t *)(v209 + v186), v203);
              *(float32x4_t *)(v216 + v186) = v219;
              *(float32x4_t *)(v210 + v186) = v220;
              *(float32x4_t *)(v212 + v186) = v221;
              v222 = vsubq_f32(v218, v203);
              *(float32x4_t *)(v215 + v186) = v222;
              v217 = vmlaq_f32(v217, v219, v219);
              v214 = vmlaq_f32(v214, v220, v220);
              v213 = vmlaq_f32(v213, v221, v221);
              v223 = v204 + 8;
              v204 += 4;
              v216 += v104;
              v215 += v104;
              v211 += v100;
              v212 += v104;
              v209 += v100;
              v206 = vmlaq_f32(v206, v222, v222);
              v210 += v104;
              v207 += v100;
              v208 += v100;
            }
            while (v223 <= v92);
            v205 = vaddq_f32(vaddq_f32(v217, v214), vaddq_f32(v213, v206));
            v32 = v296;
            v116 = v297;
            v95 = v286;
            v87 = v287;
          }
          else
          {
            v204 = 0;
            v205 = 0uLL;
          }
          v224 = v92 - v204;
          if (v92 > v204)
          {
            v225 = 4 * (v116 + v95 * v204);
            v226 = 4 * (v116 + v298 * v204);
            do
            {
              v227 = vsubq_f32(*(float32x4_t *)(v89 + v226), v203);
              *(float32x4_t *)(v110 + v225) = v227;
              v205 = vmlaq_f32(v205, v227, v227);
              v225 += v107;
              v226 += v102;
              --v224;
            }
            while (v224);
          }
          if ((_DWORD)v92)
          {
            v228 = vdivq_f32(_Q7, vaddq_f32(v108, vsqrtq_f32(vaddq_f32(v98, vmulq_n_f32(v205, v97)))));
            v229 = v187;
            v230 = v299;
            v231 = v300;
            v232 = v92;
            do
            {
              v233 = vld1q_dup_f32(v230++);
              v234 = *v231++;
              *(float32x4_t *)(v110 + v229) = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v90 + v229), v233), vmulq_f32(v228, *(float32x4_t *)(v110 + v229)), v234);
              v229 += v107;
              --v232;
            }
            while (v232);
          }
          v184 = v185 + 4;
          v192 += 16;
          v116 += 4;
          v186 += 16;
          v187 += 16;
        }
        while (v185 + 4 <= v32);
      }
      else
      {
        v185 = v116;
      }
      if (v185 < v32)
      {
        v235 = 4 * v185;
        do
        {
          if ((_DWORD)v92)
          {
            v236 = 0.0;
            v237 = v235;
            v238 = v92;
            do
            {
              v236 = v236 + *(float *)(v89 + v237);
              v237 += v102;
              --v238;
            }
            while (v238);
            v239 = v96 * v236;
            v240 = 0.0;
            v241 = v89;
            v242 = v110;
            v243 = v92;
            do
            {
              v244 = *(float *)(v241 + v235) - v239;
              *(float *)(v242 + v235) = v244;
              v240 = v240 + (float)(v244 * v244);
              v242 += v107;
              v241 += v102;
              --v243;
            }
            while (v243);
            v245 = 1.0 / (float)(*(float *)v30.i32 + sqrtf(*(float *)v31.i32 + (float)(v97 * v240)));
            v246 = v235;
            v247 = (float *)v299;
            v248 = v300;
            v249 = v92;
            do
            {
              v250 = *v247++;
              v251 = v250;
              v252 = *v248++;
              *(float *)(v110 + v246) = (float)(*(float *)(v90 + v246) + v251)
                                      + (float)((float)(v245 * *(float *)(v110 + v246)) * v252);
              v246 += v107;
              --v249;
            }
            while (v249);
          }
          ++v185;
          v235 += 4;
        }
        while (v185 != v32);
      }
      v86 = v279 + 1;
      v99 = v281 + v276;
      v101 = v282 + v276;
      v103 = v278 + v276;
      v89 += v276;
      v85 = v280 + v275;
      v110 += v275;
      v90 += v276;
      v84 = v283 + v276;
      v284 += v275;
      v285 += v275;
    }
    while (v279 + 1 != v277);
  }
  v67 = v271;
  if (v271)
  {
    v253 = (unint64_t *)&v271->__shared_owners_;
    do
      v69 = __ldaxr(v253);
    while (__stlxr(v69 - 1, v253));
    goto LABEL_171;
  }
LABEL_173:
  v254 = v310;
  if (v310)
  {
    v255 = (unint64_t *)&v310->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = v312;
  if (v312)
  {
    v258 = (unint64_t *)&v312->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
}

void sub_1917ED790(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void Espresso::gumbel_max_kernel_cpu::~gumbel_max_kernel_cpu(Espresso::gumbel_max_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D8A430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D8A430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::gumbel_max_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  vDSP_Length v28;
  uint64_t v29;
  unsigned int *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  float v35;
  float j;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const float *v50;
  float *v51;
  uint64_t v52;
  vDSP_Length v53;
  uint64_t v54;
  float *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  float __C;
  vDSP_Length __N[2];
  _OWORD v76[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;

  v4 = *(uint64_t **)a4;
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gumbel-max requires atleast one input blob");
  if (*v4 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v4 + 32))(*v4))
  {
    v8 = *(_QWORD *)(*v4 + 160);
    v14 = *(std::__shared_weak_count **)(*v4 + 168);
    v112 = v8;
    v113 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v112 = 0;
    v113 = 0;
  }
  v10 = a3;
  v9 = *a3;
  if (v10[1] == v9 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v11 = 0;
    v110 = 0;
    v111 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*v9 + 160);
    v17 = *(std::__shared_weak_count **)(*v9 + 168);
    v110 = v11;
    v111 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  Espresso::abstract_blob_container::shape((char *)v76, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v104, (const Espresso::layer_shape *)v76, 0);
  if (*((_QWORD *)&v77 + 1))
  {
    *(_QWORD *)&v78 = *((_QWORD *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  if (*(_BYTE *)(a1 + 289) || v109 <= 3)
  {
    switch(v109)
    {
      case 1u:
        v12 = 1;
        if (!v109)
          goto LABEL_25;
        break;
      case 2u:
        v12 = v104;
        if (!v109)
          goto LABEL_25;
        break;
      case 3u:
        v12 = v105 * (uint64_t)v104;
        if (!v109)
          goto LABEL_25;
        break;
      case 4u:
        v12 = v105 * (uint64_t)v104 * v106;
        if (!v109)
          goto LABEL_25;
        break;
      case 5u:
        v12 = v105 * (uint64_t)v104 * v106 * v107;
        if (!v109)
          goto LABEL_25;
        break;
      default:
        v12 = 0;
        if (!v109)
          goto LABEL_25;
        break;
    }
    v13 = *(&v104 + (int)v109 - 1);
  }
  else if (v109 == 5)
  {
    v12 = v105 * (uint64_t)v104;
    v13 = v107 * (uint64_t)v108 * v106;
  }
  else if (v109 == 4)
  {
    v12 = v104;
    v13 = v106 * (uint64_t)v107 * v105;
  }
  else
  {
    v12 = 0;
LABEL_25:
    v13 = 0;
  }
  v21 = a4;
  v20 = *(uint64_t **)a4;
  if (*(_QWORD *)(v21 + 8) - (_QWORD)v20 >= 0x11uLL
    && (v22 = v20[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22))
  {
    v45 = v20[2];
    v24 = *(_QWORD *)(v45 + 160);
    v23 = *(std::__shared_weak_count **)(v45 + 168);
    v102 = v24;
    v103 = v23;
    if (v23)
    {
      v46 = (unint64_t *)&v23->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v102 = 0;
    v103 = 0;
  }
  if (*(_BYTE *)(a1 + 308))
  {
    v25 = *(_QWORD *)(v8 + 24);
    v26 = *(_QWORD *)(v11 + 24);
    if (*(int *)(a1 + 312) < 1)
    {
      v101 = 0;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v82 = 0u;
      v83 = 0;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76[1] = 0u;
      v77 = 0u;
      *(_QWORD *)&v76[0] = 0x1000000000000;
      *((_QWORD *)&v76[0] + 1) = v13;
      v84 = v25;
      LODWORD(v85) = 65568;
      DWORD1(v87) = 0x10000;
      *((_QWORD *)&v87 + 1) = *(int *)(a1 + 280);
      *((_QWORD *)&v95 + 1) = v26;
      LODWORD(v96) = 65568;
      DWORD1(v98) = *(_DWORD *)(a1 + 304);
      DWORD2(v98) = *(_DWORD *)(a1 + 300);
      LODWORD(v98) = 14;
      MEMORY[0x19401A984](v76, 0, v12, v13);
    }
    else if (v12)
    {
      for (i = 0; i != v12; ++i)
      {
        MEMORY[0x19401AB7C](v26 + 4 * i * *(int *)(a1 + 280), *(float *)(a1 + 304), *(float *)(a1 + 300));
        v25 += 4 * v13;
      }
    }
  }
  else
  {
    v76[0] = 0uLL;
    if (*(_BYTE *)(a1 + 288))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(__N, v13, *(_DWORD *)(a1 + 280), 1, v12);
      v76[0] = *(_OWORD *)__N;
      v28 = __N[0];
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(__N, v13, *(_DWORD *)(a1 + 280), 1, v12);
      v76[0] = *(_OWORD *)__N;
      v28 = __N[0];
      if (!v24)
      {
        v29 = *(_QWORD *)(a1 + 8);
        v30 = *(unsigned int **)(v29 + 88);
        v31 = *(std::__shared_weak_count **)(v29 + 96);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = 0;
        v35 = *(float *)(a1 + 292);
        for (j = *(float *)(a1 + 296) - v35;
              ;
              *(float *)(*(_QWORD *)(v28 + 24) + 4 * v34++) = v35 + (float)(j * (float)((float)(v44 - 1) * 4.6566e-10)))
        {
          v37 = 0;
          v38 = *(int *)(v28 + 8);
          do
          {
            v38 *= *(int *)(v28 + 12 + v37);
            v37 += 4;
          }
          while (v37 != 12);
          if (v34 >= v38)
            break;
          v39 = 48271 * (*v30 % 0xADC8);
          v40 = 3399 * (*v30 / 0xADC8);
          v41 = v39 >= v40;
          v42 = v39 - v40;
          if (v41)
            v43 = 0;
          else
            v43 = 0x7FFFFFFF;
          v44 = v43 + v42;
          *v30 = v44;
        }
        if (v31)
        {
          v48 = (unint64_t *)&v31->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v28 = *(_QWORD *)&v76[0];
        v8 = v112;
      }
    }
    v50 = *(const float **)(v8 + 24);
    v51 = *(float **)(v28 + 24);
    if (*(float *)(a1 + 304) != 1.0)
    {
      v52 = 0;
      v53 = *(int *)(v8 + 8);
      do
      {
        v53 *= *(int *)(v8 + 12 + v52);
        v52 += 4;
      }
      while (v52 != 12);
      vDSP_vsmul(*(const float **)(v8 + 24), 1, (const float *)(a1 + 304), *(float **)(v8 + 24), 1, v53);
    }
    if (!*(_BYTE *)(a1 + 288))
    {
      if (v102)
      {
        v54 = 0;
        v55 = *(float **)(v102 + 24);
        v56 = *(_DWORD *)(v102 + 8);
        do
        {
          v56 *= *(_DWORD *)(v102 + 12 + v54);
          v54 += 4;
        }
        while (v54 != 12);
      }
      else
      {
        v57 = 0;
        v56 = *(_DWORD *)(v28 + 8);
        do
        {
          v56 *= *(_DWORD *)(v28 + 12 + v57);
          v57 += 4;
        }
        while (v57 != 12);
        v55 = v51;
      }
      LODWORD(__N[0]) = v56;
      vDSP_vsadd(v55, 1, (const float *)(a1 + 300), v55, 1, v56);
      vvlogf(v51, v55, (const int *)__N);
      vDSP_vneg(v51, 1, v51, 1, SLODWORD(__N[0]));
      vDSP_vsadd(v51, 1, (const float *)(a1 + 300), v51, 1, SLODWORD(__N[0]));
      vvlogf(v51, v51, (const int *)__N);
      vDSP_vneg(v51, 1, v51, 1, SLODWORD(__N[0]));
    }
    if (v12)
    {
      v58 = 0;
      v59 = 0;
      LODWORD(v60) = *(_DWORD *)(a1 + 280);
      do
      {
        if ((_DWORD)v60)
        {
          v61 = 0;
          v62 = *(_QWORD *)(v110 + 24) + v58 * (int)v60;
          do
          {
            vDSP_vadd(v51, 1, v50, 1, v51, 1, v13);
            __C = 0.0;
            __N[0] = 0;
            vDSP_maxvi(v51, 1, &__C, __N, v13);
            *(float *)(v62 + 4 * v61++) = (float)__N[0];
            v60 = *(int *)(a1 + 280);
            v51 += v13;
          }
          while (v61 < v60);
        }
        v50 += v13;
        ++v59;
        v58 += 4;
      }
      while (v59 != v12);
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v76[0] + 1);
    if (*((_QWORD *)&v76[0] + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v76[0] + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v23 = v103;
  }
  if (v23)
  {
    v66 = (unint64_t *)&v23->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v68 = v111;
  if (v111)
  {
    v69 = (unint64_t *)&v111->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v113;
  if (v113)
  {
    v72 = (unint64_t *)&v113->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1917EE06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 112);
  _Unwind_Resume(a1);
}

void Espresso::transplant_kernel_cpu::~transplant_kernel_cpu(Espresso::transplant_kernel_cpu *this)
{
  Espresso::generic_transplant_kernel::~generic_transplant_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::transplant_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  void **v4;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  std::__shared_weak_count *v16;
  void **v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  vImagePixelCount v39;
  uint64_t v40;
  void *v41;
  vImagePixelCount v42;
  int v43;
  float *v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  float *v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  unsigned __int32 *v76;
  _WORD *v77;
  uint64_t v78;
  unsigned __int32 v79;
  uint64_t v83;
  unsigned __int32 *v84;
  _WORD *v85;
  uint64_t v86;
  unsigned __int32 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  vImage_Buffer dest;
  vImage_Buffer src;

  v4 = *a4;
  if ((char *)a4[1] - (char *)*a4 != 32)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel needs two src blobs");
  if ((char *)a3[1] - (char *)*a3 != 32)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel produces two dst blobs.");
  if (!*(_QWORD *)(a1 + 360))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel requires batchnorm coefs");
  if (*v4 && !(*(unsigned int (**)(void *))(*(_QWORD *)*v4 + 32))(*v4))
  {
    v9 = *((_QWORD *)*v4 + 20);
    v8 = (std::__shared_weak_count *)*((_QWORD *)*v4 + 21);
    v161 = v9;
    v162 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v125 = __ldxr(p_shared_owners);
      while (__stxr(v125 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v161 = 0;
    v162 = 0;
  }
  v10 = *a4;
  v11 = (*a4)[2];
  v137 = a1;
  if (v11 && !(*(unsigned int (**)(void *))(*(_QWORD *)v11 + 32))(v11))
  {
    v126 = v10[2];
    v13 = *((_QWORD *)v126 + 20);
    v12 = (std::__shared_weak_count *)*((_QWORD *)v126 + 21);
    v159 = v13;
    v160 = v12;
    if (v12)
    {
      v127 = (unint64_t *)&v12->__shared_owners_;
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v159 = 0;
    v160 = 0;
  }
  v14 = *a3;
  v15 = **a3;
  if (v15 && !(*(unsigned int (**)(void *))(*(_QWORD *)v15 + 32))(v15))
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)*v14 + 21);
    v138 = *((_QWORD *)*v14 + 20);
    v157 = v138;
    v158 = v16;
    if (v16)
    {
      v129 = (unint64_t *)&v16->__shared_owners_;
      do
        v130 = __ldxr(v129);
      while (__stxr(v130 + 1, v129));
    }
  }
  else
  {
    v16 = 0;
    v138 = 0;
    v157 = 0;
    v158 = 0;
  }
  v17 = *a3;
  v18 = (*a3)[2];
  if (v18 && !(*(unsigned int (**)(void *))(*(_QWORD *)v18 + 32))(v18))
  {
    v131 = v17[2];
    v20 = *((_QWORD *)v131 + 20);
    v19 = (std::__shared_weak_count *)*((_QWORD *)v131 + 21);
    v155 = v20;
    v156 = v19;
    if (v19)
    {
      v132 = (unint64_t *)&v19->__shared_owners_;
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v155 = 0;
    v156 = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v153, **a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v151, (*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v149, **a3, (std::__shared_weak_count *)(*a3)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v147, (*a3)[2], (std::__shared_weak_count *)(*a3)[3]);
  v136 = v147;
  if (!(v147 | v20) || (v135 = v149, !(v149 | v138)) || (v22 = v153, !(v153 | v9)) || (v23 = v151, !(v13 | v151)))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  v24 = *(_QWORD *)(v137 + 344);
  if (!v24)
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant_kernel_cpu: weights (shift data) not found.");
  v25 = **a4;
  v26 = v25[6];
  if (v26 <= 1)
    v26 = 1;
  if ((int)v25[5] > 1 || v26 >= 2)
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant does not support n > 1 or seq > 1");
  v28 = v25[4];
  v134 = *(_QWORD *)(v24 + 16);
  if (v138)
  {
    v145 = v138;
    v146 = v16;
    if (v16)
    {
      v29 = (unint64_t *)&v16->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v145, v149 + 8);
  }
  if (v20)
  {
    v143 = v20;
    v144 = v19;
    if (v19)
    {
      v31 = (unint64_t *)&v19->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v143, v136 + 8);
  }
  if (v9)
  {
    v141 = v9;
    v142 = v8;
    if (v8)
    {
      v33 = (unint64_t *)&v8->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v141, v22 + 8);
  }
  if (v13)
  {
    v139 = v13;
    v140 = v12;
    if (v12)
    {
      v35 = (unint64_t *)&v12->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v139, v23 + 8);
  }
  if (!v9)
  {
    v37 = 0;
    v38 = *(void **)(v141 + 24);
    v39 = *(int *)(v22 + 8);
    do
    {
      v39 *= *(int *)(v22 + 12 + v37);
      v37 += 4;
    }
    while (v37 != 12);
    src.data = *(void **)(v22 + 24);
    src.height = 1;
    src.width = v39;
    src.rowBytes = 2 * v39;
    dest.data = v38;
    dest.height = 1;
    dest.width = v39;
    dest.rowBytes = 4 * v39;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  if (!v13)
  {
    v40 = 0;
    v41 = *(void **)(v139 + 24);
    v42 = *(int *)(v23 + 8);
    do
    {
      v42 *= *(int *)(v23 + 12 + v40);
      v40 += 4;
    }
    while (v40 != 12);
    src.data = *(void **)(v23 + 24);
    src.height = 1;
    src.width = v42;
    src.rowBytes = 2 * v42;
    dest.data = v41;
    dest.height = 1;
    dest.width = v42;
    dest.rowBytes = 4 * v42;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  v43 = *(_DWORD *)(v137 + 308);
  if (v43 == 1)
  {
    if ((int)v28 >= 1)
    {
      v59 = *(float **)(v141 + 24);
      v60 = *(float **)(v139 + 24);
      v61 = *(float **)(v145 + 24);
      v62 = *(float **)(v143 + 24);
      v63 = (float *)(*(_QWORD *)(*(_QWORD *)(v137 + 360) + 16) + 4);
      v64 = (float *)(v134 + 8);
      _Q0.n128_u32[0] = 1.0;
      do
      {
        v65 = *(v64 - 2);
        v66 = *(v64 - 1);
        v67 = *v64;
        v68 = v64[1];
        v64 += 4;
        v69 = *v59++;
        v70 = v69;
        v71 = *v60++;
        v72 = *(v63 - 1);
        v73 = v66 + (float)(v65 * v70);
        v74 = 1.0 / (float)(v68 + (float)(v67 * (float)(1.0 / v71)));
        *v61++ = *v63 + (float)((float)-(float)(v73 * v74) * v72);
        *v62++ = v74 * v72;
        v63 += 4;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    if (v43)
      Espresso::throw_exception_selector<Espresso::generic_error>("invalid mode selected for transplant");
    if ((int)v28 >= 1)
    {
      v44 = *(float **)(v141 + 24);
      v45 = *(float **)(v139 + 24);
      v46 = *(float **)(v145 + 24);
      v47 = *(float **)(v143 + 24);
      v48 = (float *)(*(_QWORD *)(*(_QWORD *)(v137 + 360) + 16) + 4);
      v49 = (float *)(v134 + 8);
      _Q0.n128_u32[0] = 1.0;
      do
      {
        v50 = *(v49 - 2);
        v51 = *(v49 - 1);
        v52 = *v44++;
        v53 = v52;
        v54 = *v45++;
        v55 = *v49;
        v56 = v49[1];
        v49 += 4;
        v57 = *(v48 - 1);
        v58 = v56 + (float)(v55 * (float)(1.0 / v54));
        *v46++ = (float)((float)(v58 * *v48) / v57) - (float)(v51 + (float)(v50 * v53));
        *v47++ = (float)(1.0 / v58) * v57;
        v48 += 4;
        --v28;
      }
      while (v28);
    }
  }
  if (!v138)
  {
    v75 = 0;
    v76 = *(unsigned __int32 **)(v145 + 24);
    v77 = *(_WORD **)(v135 + 24);
    v78 = *(int *)(v135 + 8);
    do
    {
      v78 *= *(int *)(v135 + 12 + v75);
      v75 += 4;
    }
    while (v75 != 12);
    for (; v78; --v78)
    {
      v79 = *v76++;
      _Q0.n128_u32[0] = v79;
      __asm { FCVT            H0, S0 }
      *v77++ = _Q0.n128_u16[0];
    }
  }
  if (!v20)
  {
    v83 = 0;
    v84 = *(unsigned __int32 **)(v143 + 24);
    v85 = *(_WORD **)(v136 + 24);
    v86 = *(int *)(v136 + 8);
    do
    {
      v86 *= *(int *)(v136 + 12 + v83);
      v83 += 4;
    }
    while (v83 != 12);
    for (; v86; --v86)
    {
      v87 = *v84++;
      _Q0.n128_u32[0] = v87;
      __asm { FCVT            H0, S0 }
      *v85++ = _Q0.n128_u16[0];
    }
  }
  v88 = v140;
  if (v140)
  {
    v89 = (unint64_t *)&v140->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, _Q0);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v142;
  if (v142)
  {
    v92 = (unint64_t *)&v142->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v91->__on_zero_shared)(v91, _Q0);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v144;
  if (v144)
  {
    v95 = (unint64_t *)&v144->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v94->__on_zero_shared)(v94, _Q0);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v146;
  if (v146)
  {
    v98 = (unint64_t *)&v146->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, _Q0);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v148;
  if (v148)
  {
    v101 = (unint64_t *)&v148->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v100->__on_zero_shared)(v100, _Q0);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v150;
  if (v150)
  {
    v104 = (unint64_t *)&v150->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v103->__on_zero_shared)(v103, _Q0);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v152;
  if (v152)
  {
    v107 = (unint64_t *)&v152->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, _Q0);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v154;
  if (v154)
  {
    v110 = (unint64_t *)&v154->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, _Q0);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v156;
  if (v156)
  {
    v113 = (unint64_t *)&v156->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v112->__on_zero_shared)(v112, _Q0);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v158;
  if (v158)
  {
    v116 = (unint64_t *)&v158->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v115->__on_zero_shared)(v115, _Q0);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v160;
  if (v160)
  {
    v119 = (unint64_t *)&v160->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v118->__on_zero_shared)(v118, _Q0);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v162;
  if (v162)
  {
    v122 = (unint64_t *)&v162->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v121->__on_zero_shared)(v121, _Q0);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
}

void sub_1917EE9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 168);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::transplant_kernel_cpu::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 344), *a2, a2[1]);
}

void Espresso::general_slice_kernel_cpu::~general_slice_kernel_cpu(Espresso::general_slice_kernel_cpu *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2D90DD0;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
  {
    *((_QWORD *)this + 49) = v7;
    operator delete(v7);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2D90DD0;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
  {
    *((_QWORD *)this + 49) = v7;
    operator delete(v7);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::general_slice_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  std::vector<int>::pointer begin;
  int64_t v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::vector<int> *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  std::__shared_weak_count *v47;
  char *v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  uint64_t v51;
  std::vector<int> __p;
  std::vector<int> v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[20];
  int v57;
  std::vector<int> v58;
  std::vector<int> *v59;
  void *v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a4[1] == *a4)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: at least one bottom blob required");
  Espresso::abstract_blob_container::shape((char *)&v58, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v56, (const Espresso::layer_shape *)&v58, 0);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  Espresso::abstract_blob_container::shape((char *)&v58, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v54, (const Espresso::layer_shape *)&v58, 0);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  v8 = v57;
  if (v57 != (uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 2)
    (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
  v10 = *a4;
  v9 = a4[1];
  if ((unint64_t)((char *)v9 - (char *)*a4) >= 0x11)
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("general_slice_kernel_cpu: dynamic parameters require interpreter");
    memset(&v53, 0, sizeof(v53));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, (const void *)(a1 + 356), a1 + 356 + 4 * v8, v8);
    Espresso::general_slice_get_params_from_inputs(a4, 1u, v8, (uint64_t *)(a1 + 384), (uint64_t *)(a1 + 408), (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504));
    Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v56);
    Espresso::layer_nd_shape::shape_vector(&v58, (uint64_t)v56);
    NDLayers::slice_nd_shape_computation(*(const void **)(a1 + 384), *(_QWORD *)(a1 + 392), a1 + 408, (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), (uint64_t *)&v58, &__p, *(_BYTE *)(a1 + 355), &v53.__begin_);
    if (v58.__begin_)
    {
      v58.__end_ = v58.__begin_;
      operator delete(v58.__begin_);
    }
    v50 = 0uLL;
    v51 = 0;
    begin = __p.__begin_;
    v12 = (char *)__p.__end_ - (char *)__p.__begin_;
    if (__p.__end_ != __p.__begin_)
    {
      v13 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1)
        v13 = 1;
      v14 = &v50;
      do
      {
        v15 = *begin++;
        *(_DWORD *)v14 = v15;
        v14 = (__int128 *)((char *)v14 + 4);
        --v13;
      }
      while (v13);
    }
    HIDWORD(v51) = (unint64_t)v12 >> 2;
    v16 = operator new(0x98uLL);
    v16[1] = 0;
    v17 = v16 + 1;
    v16[2] = 0;
    *v16 = &off_1E2DBE998;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    v16[17] = 0;
    v16[18] = 0;
    *((_DWORD *)v16 + 12) = 1065353216;
    v16[7] = 0x1FFFFFFFFLL;
    v16[12] = 0;
    v16[13] = 0;
    v16[8] = 0;
    v16[9] = 0;
    *((_BYTE *)v16 + 88) = 0;
    v16[3] = &off_1E2DA0BF0;
    v16[10] = 0;
    v16[15] = 0;
    v16[16] = 0;
    *((_BYTE *)v16 + 144) = 0;
    v48 = (char *)(v16 + 3);
    v49 = (std::__shared_weak_count *)v16;
    *((_BYTE *)v16 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
    v18 = **a3;
    v19.n128_u64[0] = (unint64_t)Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v50, 0, (uint64_t)&v58);
    v46 = (char *)(v16 + 3);
    v47 = (std::__shared_weak_count *)v16;
    do
      v20 = __ldxr(v17);
    while (__stxr(v20 + 1, v17));
    (*(void (**)(uint64_t, std::vector<int> *, char **, __n128))(*(_QWORD *)v18 + 16))(v18, &v58, &v46, v19);
    v21 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    v54 = v50;
    v55 = v51;
    v24 = v49;
    if (v49)
    {
      v25 = (unint64_t *)&v49->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v53.__begin_)
    {
      v53.__end_ = v53.__begin_;
      operator delete(v53.__begin_);
    }
    v10 = *a4;
    v9 = a4[1];
  }
  if (v9 == v10 || !*v10 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v27 = 0;
    v50 = 0uLL;
  }
  else
  {
    v27 = *(_QWORD *)(*v10 + 160);
    v33 = *(_QWORD *)(*v10 + 168);
    *(_QWORD *)&v50 = v27;
    *((_QWORD *)&v50 + 1) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  v29 = a3;
  v28 = *a3;
  if (v29[1] == v28 || !*v28 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v28 + 32))(*v28))
  {
    v48 = 0;
    v49 = 0;
    goto LABEL_44;
  }
  v37 = *(char **)(*v28 + 160);
  v36 = *(std::__shared_weak_count **)(*v28 + 168);
  v48 = v37;
  v49 = v36;
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v37)
  {
    v40 = *(_QWORD *)(v27 + 24);
    Espresso::layer_nd_shape::shape_vector(&v53, (uint64_t)v56);
    v41 = *((_QWORD *)v37 + 3);
    Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)&v54);
    v58.__begin_ = (std::vector<int>::pointer)&off_1E2DB3600;
    v59 = &v58;
    apply_func_on_nd_slice(*(const void **)(a1 + 384), *(_QWORD *)(a1 + 392), a1 + 408, (int **)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), v41, (uint64_t *)&__p, v40, 0, (uint64_t *)&v53, (uint64_t)&v58);
    v42 = v59;
    if (v59 == &v58)
    {
      v43 = 4;
      v42 = &v58;
    }
    else
    {
      if (!v59)
      {
LABEL_63:
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        if (v53.__begin_)
        {
          v53.__end_ = v53.__begin_;
          operator delete(v53.__begin_);
        }
        goto LABEL_67;
      }
      v43 = 5;
    }
    (*(void (**)(void))&v42->__begin_[2 * v43])();
    goto LABEL_63;
  }
LABEL_67:
  if (v36)
  {
    v44 = (unint64_t *)&v36->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_44:
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1917EF130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  v28 = *(_QWORD **)(v26 - 128);
  if (v28 == v25)
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 152);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Espresso::general_slice_kernel_cpu::on_resized(Espresso::general_slice_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int v4;
  int v5;
  char v6[16];
  int v7;
  int v8;
  void *__p;
  void *v10;

  Espresso::abstract_blob_container::shape(v6, **a3);
  if (v7 == 1)
    v4 = 4;
  else
    v4 = 5;
  if (v8 == -1)
    v5 = v4;
  else
    v5 = v8;
  Espresso::general_slice_on_resize(v5, (_BYTE *)this + 280, (uint64_t)this + 384, (uint64_t)this + 408, (uint64_t)this + 432, (uint64_t)this + 456, (uint64_t)this + 480, (uint64_t)this + 504);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1917EF2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double Espresso::general_slice_on_resize(int a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  double result;
  _OWORD v20[2];

  memset(v20, 0, 24);
  v15 = a1;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2, (uint64_t)&a2[4 * a1], a1);
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v16;
    operator delete(v16);
  }
  *(_OWORD *)a3 = v20[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v20[1];
  memset(v20, 0, 24);
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2 + 20, (uint64_t)&a2[4 * v15 + 20], v15);
  v17 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v17;
    operator delete(v17);
  }
  *(_OWORD *)a4 = v20[0];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&v20[1];
  memset(v20, 0, 24);
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2 + 40, (uint64_t)&a2[4 * v15 + 40], v15);
  v18 = *(void **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v18;
    operator delete(v18);
  }
  *(_OWORD *)a5 = v20[0];
  *(_QWORD *)(a5 + 16) = *(_QWORD *)&v20[1];
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 60, &a2[v15 + 60], v15);
  if (*(_QWORD *)a6)
    operator delete(*(void **)a6);
  *(_QWORD *)a6 = *(_QWORD *)&v20[0];
  *(_OWORD *)(a6 + 8) = *(_OWORD *)((char *)v20 + 8);
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 65, &a2[v15 + 65], v15);
  if (*(_QWORD *)a7)
    operator delete(*(void **)a7);
  *(_QWORD *)a7 = *(_QWORD *)&v20[0];
  *(_OWORD *)(a7 + 8) = *(_OWORD *)((char *)v20 + 8);
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 70, &a2[v15 + 70], v15);
  if (*(_QWORD *)a8)
    operator delete(*(void **)a8);
  *(_QWORD *)a8 = *(_QWORD *)&v20[0];
  result = *((double *)v20 + 1);
  *(_OWORD *)(a8 + 8) = *(_OWORD *)((char *)v20 + 8);
  return result;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1917EF4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v7;

  if (a4)
  {
    v7 = result;
    std::vector<BOOL>::__vallocate[abi:ne180100](result, a4);
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

void sub_1917EF56C(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void Espresso::general_slice_get_params_from_inputs(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unsigned int v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;

  v105 = a2;
  if (a2 < (unint64_t)((uint64_t)(a1[1] - *a1) >> 4)
    && (v16 = (_QWORD *)(*a1 + 16 * a2), *v16)
    && (v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16), a2 = v105, !v17))
  {
    v18 = *(_QWORD *)(*v16 + 160);
    v84 = *(std::__shared_weak_count **)(*v16 + 168);
    v110 = v84;
    if (v84)
    {
      p_shared_owners = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldxr(p_shared_owners);
      while (__stxr(v86 + 1, p_shared_owners));
    }
  }
  else
  {
    v18 = 0;
    v110 = 0;
  }
  v19 = a2 + 1;
  if (v19 < (uint64_t)(a1[1] - *a1) >> 4
    && (v20 = (_QWORD *)(*a1 + 16 * v19), *v20)
    && (v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20), a2 = v105, !v21))
  {
    v87 = *v20;
    v22 = *(_QWORD *)(*v20 + 160);
    v88 = *(std::__shared_weak_count **)(v87 + 168);
    v109 = v88;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
  }
  else
  {
    v22 = 0;
    v109 = 0;
  }
  v23 = a2 + 2;
  v104 = a4;
  if (v23 < (uint64_t)(a1[1] - *a1) >> 4
    && (v24 = (_QWORD *)(*a1 + 16 * v23), *v24)
    && (v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 32))(*v24), a2 = v105, !v25))
  {
    v91 = *v24;
    v26 = *(_QWORD *)(*v24 + 160);
    v92 = *(std::__shared_weak_count **)(v91 + 168);
    v108 = v92;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
  }
  else
  {
    v26 = 0;
    v108 = 0;
  }
  v27 = a2 + 3;
  v103 = a6;
  if (v27 < (uint64_t)(a1[1] - *a1) >> 4
    && (v28 = (_QWORD *)(*a1 + 16 * v27), *v28)
    && (v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v28 + 32))(*v28), a2 = v105, !v29))
  {
    v95 = *v28;
    v32 = *(_QWORD *)(*v28 + 160);
    v96 = *(std::__shared_weak_count **)(v95 + 168);
    v107 = v96;
    v30 = a7;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v31 = a8;
  }
  else
  {
    v30 = a7;
    v31 = a8;
    v32 = 0;
    v107 = 0;
  }
  v33 = a2 + 4;
  if (v33 < (uint64_t)(a1[1] - *a1) >> 4
    && (v34 = (_QWORD *)(*a1 + 16 * v33), *v34)
    && (v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v34 + 32))(*v34), a2 = v105, !v35))
  {
    v37 = *(_QWORD *)(*v34 + 160);
    v36 = *(std::__shared_weak_count **)(*v34 + 168);
    v106 = v36;
    if (v36)
    {
      v99 = (unint64_t *)&v36->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v106 = 0;
  }
  if (a3)
  {
    v38 = 0;
    v39 = *v104;
    v40 = *a5;
    v41 = *v103;
    v42 = *v30;
    v43 = *v31;
    do
    {
      if (v18)
      {
        v44 = 0;
        v45 = *(int *)(v18 + 8);
        do
        {
          v45 *= *(int *)(v18 + 12 + v44);
          v44 += 4;
        }
        while (v44 != 12);
        if (v45 > v38)
          *(_DWORD *)(v39 + 4 * v38) = llroundf(*(float *)(*(_QWORD *)(v18 + 24) + 4 * v38));
      }
      if (v22)
      {
        v46 = 0;
        v47 = *(int *)(v22 + 8);
        do
        {
          v47 *= *(int *)(v22 + 12 + v46);
          v46 += 4;
        }
        while (v46 != 12);
        if (v47 > v38)
          *(_DWORD *)(v40 + 4 * v38) = llroundf(*(float *)(*(_QWORD *)(v22 + 24) + 4 * v38));
      }
      if (v26)
      {
        v48 = 0;
        v49 = *(int *)(v26 + 8);
        do
        {
          v49 *= *(int *)(v26 + 12 + v48);
          v48 += 4;
        }
        while (v48 != 12);
        if (v49 > v38)
          *(_DWORD *)(v41 + 4 * v38) = llroundf(*(float *)(*(_QWORD *)(v26 + 24) + 4 * v38));
      }
      if (v32)
      {
        v50 = 0;
        v51 = *(int *)(v32 + 8);
        do
        {
          v51 *= *(int *)(v32 + 12 + v50);
          v50 += 4;
        }
        while (v50 != 12);
        if (v51 > v38)
        {
          v52 = v38 >> 6;
          v53 = 1 << v38;
          if (roundf(*(float *)(*(_QWORD *)(v32 + 24) + 4 * v38)) == 0.0)
            v54 = *(_QWORD *)(v42 + 8 * v52) & ~v53;
          else
            v54 = *(_QWORD *)(v42 + 8 * v52) | v53;
          *(_QWORD *)(v42 + 8 * v52) = v54;
        }
      }
      if (v37)
      {
        v55 = 0;
        v56 = *(int *)(v37 + 8);
        do
        {
          v56 *= *(int *)(v37 + 12 + v55);
          v55 += 4;
        }
        while (v55 != 12);
        if (v56 > v38)
        {
          v57 = v38 >> 6;
          v58 = 1 << v38;
          if (roundf(*(float *)(*(_QWORD *)(v37 + 24) + 4 * v38)) == 0.0)
            v59 = *(_QWORD *)(v43 + 8 * v57) & ~v58;
          else
            v59 = *(_QWORD *)(v43 + 8 * v57) | v58;
          *(_QWORD *)(v43 + 8 * v57) = v59;
        }
      }
      ++v38;
    }
    while (v38 != a3);
  }
  v60 = a1[1] - *a1;
  if ((unint64_t)v60 > 0x60)
  {
    v61 = a2 + 5;
    if (v61 < v60 >> 4
      && (v62 = (_QWORD *)(*a1 + 16 * v61), *v62)
      && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v62 + 32))(*v62))
    {
      v63 = *(_QWORD *)(*v62 + 160);
      v64 = *(std::__shared_weak_count **)(*v62 + 168);
      if (v64)
      {
        v101 = (unint64_t *)&v64->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
    }
    else
    {
      v63 = 0;
      v64 = 0;
    }
    if (a3)
    {
      v65 = 0;
      v66 = *a9;
      do
      {
        if (v63)
        {
          v67 = 0;
          v68 = *(int *)(v63 + 8);
          do
          {
            v68 *= *(int *)(v63 + 12 + v67);
            v67 += 4;
          }
          while (v67 != 12);
          if (v68 > v65)
          {
            v69 = v65 >> 6;
            v70 = 1 << v65;
            if (roundf(*(float *)(*(_QWORD *)(v63 + 24) + 4 * v65)) == 0.0)
              v71 = *(_QWORD *)(v66 + 8 * v69) & ~v70;
            else
              v71 = *(_QWORD *)(v66 + 8 * v69) | v70;
            *(_QWORD *)(v66 + 8 * v69) = v71;
          }
        }
        ++v65;
      }
      while (v65 != a3);
    }
    if (v64)
    {
      v72 = (unint64_t *)&v64->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v36 = v106;
  }
  if (v36)
  {
    v74 = (unint64_t *)&v36->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v107)
  {
    v76 = (unint64_t *)&v107->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (v108)
  {
    v78 = (unint64_t *)&v108->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v109)
  {
    v80 = (unint64_t *)&v109->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v110)
  {
    v82 = (unint64_t *)&v110->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_1917EFBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;
  uint64_t v17;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v15 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

void Espresso::stack_nd_kernel_cpu::~stack_nd_kernel_cpu(Espresso::stack_nd_kernel_cpu *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D85830;
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D85830;
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::stack_nd_kernel_cpu::on_resized(std::vector<int> *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v5;
  unint64_t v6;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v9;
  unint64_t v10;
  int *value;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  char *v19;
  std::vector<int>::pointer v20;
  uint64_t v21;
  int *v22;
  std::vector<int> *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  std::vector<int>::pointer v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[24];
  std::vector<int> v31;
  char v32[40];
  void *__p;
  void *v34;

  v5 = *((_QWORD *)a3 + 1) - *(_QWORD *)a3;
  v6 = v5 >> 4;
  begin = this[13].__begin_;
  end = this[13].__end_;
  v9 = ((char *)end - (char *)begin) >> 3;
  if (v5 >> 4 <= v9)
  {
    if (v6 >= v9)
      goto LABEL_18;
    v22 = &begin[2 * v6];
    goto LABEL_17;
  }
  v10 = v6 - v9;
  value = this[13].__end_cap_.__value_;
  if (v6 - v9 <= ((char *)value - (char *)end) >> 3)
  {
    bzero(this[13].__end_, 8 * v10);
    v22 = &end[2 * v10];
LABEL_17:
    this[13].__end_ = v22;
    goto LABEL_18;
  }
  if (v5 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v12 = (char *)value - (char *)begin;
  if (v12 >> 2 > v6)
    v6 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v6;
  v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
  v15 = &v14[8 * v9];
  v17 = (int *)&v14[8 * v16];
  bzero(v15, 8 * v10);
  v18 = (int *)&v15[8 * v10];
  v20 = this[13].__begin_;
  v19 = (char *)this[13].__end_;
  if (v19 != (char *)v20)
  {
    do
    {
      v21 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *((_QWORD *)v15 - 1) = v21;
      v15 -= 8;
    }
    while (v19 != (char *)v20);
    v19 = (char *)this[13].__begin_;
  }
  this[13].__begin_ = (std::vector<int>::pointer)v15;
  this[13].__end_ = v18;
  this[13].__end_cap_.__value_ = v17;
  if (v19)
    operator delete(v19);
LABEL_18:
  v23 = this + 12;
  std::vector<std::vector<int>>::resize((uint64_t *)&this[12], (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 4);
  v24 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      Espresso::abstract_blob_container::shape(v32, *(_QWORD *)(v24 + 16 * v25));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v30, (const Espresso::layer_shape *)v32, 0);
      Espresso::layer_nd_shape::shape_vector(&v31, (uint64_t)v30);
      v27 = v23->__begin_;
      v28 = (uint64_t)&v23->__begin_[6 * v25];
      v29 = *(void **)v28;
      if (*(_QWORD *)v28)
      {
        *(_QWORD *)&v27[6 * v25 + 2] = v29;
        operator delete(v29);
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
      }
      *(_OWORD *)v28 = *(_OWORD *)&v31.__begin_;
      *(_QWORD *)&v27[6 * v25 + 4] = v31.__end_cap_.__value_;
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      v25 = v26;
      v24 = *(_QWORD *)a3;
      ++v26;
    }
    while (v25 < (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 4);
  }
  std::vector<int>::resize(this + 14, (((*((_QWORD *)this[12].__end_ - 2) - *((_QWORD *)this[12].__end_ - 3)) << 30) + 0x100000000) >> 32);
}

void sub_1917EFF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::split_nd_kernel_cpu::~split_nd_kernel_cpu(Espresso::split_nd_kernel_cpu *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D856D8;
  v2 = (void *)*((_QWORD *)this + 103);
  if (v2)
  {
    *((_QWORD *)this + 104) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 100);
  if (v3)
  {
    *((_QWORD *)this + 101) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D856D8;
  v2 = (void *)*((_QWORD *)this + 103);
  if (v2)
  {
    *((_QWORD *)this + 104) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 100);
  if (v3)
  {
    *((_QWORD *)this + 101) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::split_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  std::vector<int>::pointer v36;
  int v37;
  std::vector<int>::pointer v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  std::vector<int>::pointer v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  std::vector<int>::pointer v50;
  std::vector<int>::pointer v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::vector<int> v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::vector<int> v58;
  void *__p;
  void *v60;
  _BYTE v61[24];
  std::vector<int>::value_type v62;
  std::vector<int> __x;

  Espresso::abstract_blob_container::shape((char *)&v58, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v61, (const Espresso::layer_shape *)&v58, 0);
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  v8 = a4;
  v7 = *a4;
  if (v8[1] == v7 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v56 = 0;
    v57 = 0;
    return;
  }
  v9 = *(_QWORD *)(*v7 + 160);
  v10 = *(std::__shared_weak_count **)(*v7 + 168);
  v56 = v9;
  v57 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v9)
    goto LABEL_58;
  v13 = *a3;
  if (a3[1] == *a3)
    goto LABEL_28;
  v14 = 0;
  do
  {
    v15 = (_QWORD *)(v13 + 16 * v14);
    if (!*v15 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15))
    {
      v16 = MEMORY[0x18];
LABEL_17:
      *(_QWORD *)(*(_QWORD *)(a1 + 824) + 8 * v14) = v16;
      goto LABEL_18;
    }
    v17 = *(_QWORD *)(*v15 + 160);
    v18 = *(std::__shared_weak_count **)(*v15 + 168);
    if (!v18)
    {
      v16 = *(_QWORD *)(v17 + 24);
      goto LABEL_17;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(*(_QWORD *)(a1 + 824) + 8 * v14) = *(_QWORD *)(v17 + 24);
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
LABEL_18:
    ++v14;
    v13 = *a3;
  }
  while (v14 < (a3[1] - *a3) >> 4);
  v9 = v56;
LABEL_28:
  v22 = *(_DWORD *)(a1 + 280);
  v23 = *(_QWORD *)(v9 + 24);
  Espresso::layer_nd_shape::shape_vector(&v55, (uint64_t)v61);
  v24 = *(_BYTE **)(a1 + 824);
  v25 = *(_BYTE **)(a1 + 832);
  v26 = v25 - v24;
  if (v25 == v24)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    if (v26 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26 >> 3);
    memmove(v27, v24, v26);
    v28 = &v27[8 * (v26 >> 3)];
  }
  v29 = v28 - v27;
  begin = v55.__begin_;
  end = v55.__end_;
  v32 = (int)((v28 - v27) >> 3);
  LODWORD(__x.__begin_) = 0;
  std::vector<int>::vector(&v58, v32, (const std::vector<int>::value_type *)&__x);
  v62 = 0;
  std::vector<int>::vector(&__x, v32, &v62);
  v33 = (unint64_t)((char *)end - (char *)begin) >> 2;
  v34 = (v33 & (v22 >> 31)) + v22;
  if (v34 < 0 || v34 >= (int)v33)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  v35 = v29 >> 3;
  v36 = v55.__end_;
  v37 = 1;
  if (v55.__begin_ != v55.__end_)
  {
    v38 = v55.__begin_;
    do
    {
      v39 = *v38++;
      v37 *= v39;
    }
    while (v38 != v55.__end_);
  }
  v40 = (v29 >> 3);
  if ((int)v35 > 0)
  {
    v41 = 0;
    v42 = &v55.__begin_[v34 + 1];
    v43 = *(_QWORD *)(a1 + 800);
    v44 = __x.__begin_;
    do
    {
      v45 = *(_DWORD *)(v43 + 4 * v41);
      if (v42 != v36)
      {
        v46 = v42;
        do
        {
          v47 = *v46++;
          v45 *= v47;
        }
        while (v46 != v36);
      }
      v44[v41++] = v45;
    }
    while (v41 != v40);
  }
  v48 = 0;
  do
  {
    if (v48 >= v37)
      break;
    if ((int)v35 >= 1)
    {
      v49 = 0;
      v50 = __x.__begin_;
      v51 = v58.__begin_;
      do
      {
        cblas_scopy(v50[v49], (const float *)(v23 + 4 * v48), 1, (float *)(*(_QWORD *)&v27[8 * v49] + 4 * v51[v49]), 1);
        v50 = __x.__begin_;
        v52 = __x.__begin_[v49];
        v51 = v58.__begin_;
        v48 += v52;
        v58.__begin_[v49++] += v52;
      }
      while (v40 != v49);
    }
  }
  while (v48);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
  if (v27)
    operator delete(v27);
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  v10 = v57;
LABEL_58:
  if (v10)
  {
    v53 = (unint64_t *)&v10->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1917F036C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 88);
  if (v23)
  {
    *(_QWORD *)(v21 - 80) = v23;
    operator delete(v23);
  }
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v20)
    operator delete(v20);
  if (a9)
    operator delete(a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void Espresso::split_nd_kernel_cpu::on_resized(Espresso::split_nd_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[6];
  char v30[16];
  int v31;
  int v32;
  void *__p;
  void *v34;

  v5 = *((_DWORD *)this + 70);
  Espresso::abstract_blob_container::shape(v30, **a3);
  if (v31 == 1)
    v6 = 4;
  else
    v6 = 5;
  if (v32 == -1)
    v7 = v6;
  else
    v7 = v32;
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  std::vector<int>::resize((std::vector<int> *)((char *)this + 800), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  v8 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
  {
    v12 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = (v7 & (v5 >> 31)) + v5;
    do
    {
      Espresso::abstract_blob_container::shape(v30, *(_QWORD *)(v8 + v9));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v29, (const Espresso::layer_shape *)v30, 0);
      *(_DWORD *)(*((_QWORD *)this + 100) + 4 * v10) = v29[v11];
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      ++v10;
      v8 = *(_QWORD *)a2;
      v12 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4;
      v9 += 16;
    }
    while (v12 > v10);
  }
  v13 = *((_QWORD *)this + 104);
  v14 = *((_QWORD *)this + 103);
  v15 = (v13 - v14) >> 3;
  if (v12 <= v15)
  {
    if (v12 >= v15)
      return;
    v28 = v14 + 8 * v12;
    goto LABEL_32;
  }
  v16 = v12 - v15;
  v17 = *((_QWORD *)this + 105);
  if (v12 - v15 <= (v17 - v13) >> 3)
  {
    bzero(*((void **)this + 104), 8 * v16);
    v28 = v13 + 8 * v16;
LABEL_32:
    *((_QWORD *)this + 104) = v28;
    return;
  }
  if (v12 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v18 = v17 - v14;
  if (v18 >> 2 > v12)
    v12 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v12;
  v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
  v21 = &v20[8 * v15];
  v23 = &v20[8 * v22];
  bzero(v21, 8 * v16);
  v24 = &v21[8 * v16];
  v25 = (char *)*((_QWORD *)this + 104);
  v26 = (char *)*((_QWORD *)this + 103);
  if (v25 != v26)
  {
    do
    {
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *((_QWORD *)v21 - 1) = v27;
      v21 -= 8;
    }
    while (v25 != v26);
    v25 = (char *)*((_QWORD *)this + 103);
  }
  *((_QWORD *)this + 103) = v21;
  *((_QWORD *)this + 104) = v24;
  *((_QWORD *)this + 105) = v23;
  if (v25)
    operator delete(v25);
}

void sub_1917F05E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::softmax_nd_kernel_cpu::~softmax_nd_kernel_cpu(Espresso::softmax_nd_kernel_cpu *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D8C3A8;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D8C3A8;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sliding_windows_kernel_cpu::~sliding_windows_kernel_cpu(Espresso::sliding_windows_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sliding_windows_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int64_t v17;
  int v18;
  int v19;
  std::vector<int>::pointer begin;
  int i;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  std::vector<int>::pointer v30;
  std::vector<int>::pointer v31;
  int v32;
  int v33;
  float *v34;
  const float *v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::vector<int> v57;
  std::vector<int> v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _BYTE v63[24];
  std::vector<int> v64;
  void *__p;
  void *v66;
  _BYTE v67[24];
  int *v68;
  int *v69;
  uint64_t v70;
  std::vector<int> v71;
  std::vector<int> v72;
  int v73[3];

  Espresso::abstract_blob_container::shape((char *)&v64, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v67, (const Espresso::layer_shape *)&v64, 0);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v64, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&v64, 0);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v8 = a4;
  v7 = *a4;
  if (v8[1] == v7 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v9 = 0;
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v42 = *v7;
    v9 = *(_QWORD *)(*v7 + 160);
    v43 = *(std::__shared_weak_count **)(v42 + 168);
    v61 = v9;
    v62 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
  }
  v11 = a3;
  v10 = *a3;
  if (v11[1] == v10 || !*v10 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v12 = 0;
    v13 = 0;
    v59 = 0;
    v60 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(*v10 + 160);
    v12 = *(std::__shared_weak_count **)(*v10 + 168);
    v59 = v13;
    v60 = v12;
    if (v12)
    {
      v46 = (unint64_t *)&v12->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  v14 = a1[70];
  v15 = a1[71];
  v16 = a1[72];
  v51 = *(_QWORD *)(v9 + 24);
  Espresso::layer_nd_shape::shape_vector(&v58, (uint64_t)v67);
  v50 = *(_QWORD *)(v13 + 24);
  Espresso::layer_nd_shape::shape_vector(&v57, (uint64_t)v63);
  v17 = (char *)v58.__end_ - (char *)v58.__begin_;
  v54 = (unint64_t)((char *)v58.__end_ - (char *)v58.__begin_) >> 2;
  v18 = (v54 & (v14 >> 31)) + v14;
  v19 = v58.__begin_[v18];
  v73[0] = 0;
  std::vector<int>::vector(&v64, (int)(v58.__end_ - v58.__begin_));
  std::vector<int>::vector(&v72, (int)(v17 >> 2));
  std::vector<int>::vector(&v71, ((v17 << 30) + 0x100000000) >> 32);
  begin = v57.__begin_;
  v48 = v12;
  for (i = 1; begin != v57.__end_; i *= v22)
    v22 = *begin++;
  NDShapeUtils::compute_strides((uint64_t)v58.__begin_, (uint64_t)v58.__end_, (uint64_t)v64.__begin_, (uint64_t)v64.__end_);
  if (i >= 1)
  {
    v23 = 0;
    v24 = v19 - v15;
    v56 = v18;
    v25 = v64.__begin_[v18];
    v55 = v25 * v16;
    v26 = v25 * v15;
    v27 = ((unint64_t)v17 >> 2);
    v28 = v25 * v15;
    v52 = i;
    v53 = v24 / v16;
    v49 = v24 / v16 + 1;
    do
    {
      NDShapeUtils::unravel_index(v23, (uint64_t)v57.__begin_, (uint64_t)v57.__end_, v71.__begin_, (uint64_t)v71.__end_);
      if ((int)v54 >= 1)
      {
        v29 = 0;
        v30 = v71.__begin_;
        v31 = v72.__begin_;
        do
        {
          if (v29 >= v56)
            v32 = 0;
          else
            v32 = v30[v29];
          v31[v29++] = v32;
        }
        while (v27 != v29);
      }
      v68 = 0;
      v69 = 0;
      v70 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v68, v64.__begin_, (uint64_t)v64.__end_, v64.__end_ - v64.__begin_);
      NDShapeUtils::ravel_multi_index(v72.__begin_, (uint64_t)v72.__end_, (uint64_t)v58.__begin_, (uint64_t)v58.__end_, v68, v73);
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      v33 = v73[0];
      if ((v53 & 0x80000000) == 0)
      {
        v33 = v73[0];
        v34 = (float *)(v50 + 4 * (int)v23);
        v23 = (int)v23;
        v35 = (const float *)(v51 + 4 * v73[0]);
        v36 = v49;
        do
        {
          cblas_scopy(v28, v35, 1, v34, 1);
          v33 += v55;
          v23 += v26;
          v34 += v28;
          v35 += v55;
          --v36;
        }
        while (v36);
      }
      v73[0] = v33;
    }
    while ((int)v23 < v52);
  }
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
  if (v72.__begin_)
  {
    v72.__end_ = v72.__begin_;
    operator delete(v72.__begin_);
  }
  if (v64.__begin_)
  {
    v64.__end_ = v64.__begin_;
    operator delete(v64.__begin_);
  }
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v39 = v62;
  if (v62)
  {
    v40 = (unint64_t *)&v62->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1917F0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void Espresso::reverse_seq_kernel_cpu::~reverse_seq_kernel_cpu(Espresso::reverse_seq_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::reverse_seq_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD **v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int v17;
  int v18;
  float *v19;
  unint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int v28;
  std::vector<int>::size_type v29;
  int v30;
  std::vector<int>::pointer begin;
  int v32;
  uint64_t v33;
  std::vector<int>::pointer v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  uint64_t v66;
  std::vector<int> v67;
  std::vector<int> v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  _BYTE v75[24];
  std::vector<int> v76;
  void *__p;
  void *v78;
  _BYTE v79[24];
  std::vector<int> v80;
  std::vector<int> v81;

  Espresso::abstract_blob_container::shape((char *)&v76, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v79, (const Espresso::layer_shape *)&v76, 0);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v76, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v75, (const Espresso::layer_shape *)&v76, 0);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v54 = *v7;
    v9 = *(_QWORD *)(*v7 + 160);
    v55 = *(std::__shared_weak_count **)(v54 + 168);
    v73 = v9;
    v74 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(p_shared_owners);
      while (__stxr(v57 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v73 = 0;
    v74 = 0;
  }
  v10 = *a4;
  v11 = v10[2];
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v58 = v10[2];
    v12 = *(_QWORD *)(v58 + 160);
    v59 = *(std::__shared_weak_count **)(v58 + 168);
    v71 = v12;
    v72 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
  }
  else
  {
    v12 = 0;
    v71 = 0;
    v72 = 0;
  }
  v14 = a3;
  v13 = *a3;
  if (v14[1] == v13 || !*v13 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13))
  {
    v15 = 0;
    v16 = 0;
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(*v13 + 160);
    v15 = *(std::__shared_weak_count **)(*v13 + 168);
    v69 = v16;
    v70 = v15;
    if (v15)
    {
      v62 = (unint64_t *)&v15->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
  }
  v17 = *(_DWORD *)(a1 + 280);
  v18 = *(_DWORD *)(a1 + 284);
  v66 = *(_QWORD *)(v9 + 24);
  Espresso::layer_nd_shape::shape_vector(&v68, (uint64_t)v79);
  v19 = *(float **)(v12 + 24);
  Espresso::layer_nd_shape::shape_vector(&v67, (uint64_t)v75);
  v20 = (unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2;
  v21 = v20 & (v17 >> 31);
  v22 = "Reverse_seq Layer: Invalid value of the argument 'batch_axis'.";
  v23 = (v17 + v21);
  if (v17 + v21 < 0)
    goto LABEL_80;
  if ((int)v23 >= (int)v20)
    goto LABEL_80;
  v24 = v20 & (v18 >> 31);
  v22 = "Reverse_seq Layer: Invalid value of the argument 'seq_axis'.";
  v25 = (v18 + v24);
  if (v18 + v24 < 0 || (int)v25 >= (int)v20)
    goto LABEL_80;
  if (v23 >= v25)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Reverse_seq Layer: batch_axis: %d should be strictly less than seq_axis: %d", v23, (v18 + v24));
  if ((std::vector<int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) != (std::vector<int>::pointer)4
    || (v26 = *v67.__begin_, v68.__begin_[v23] != (int)(float)((float)(int)v26 + 0.5)))
  {
    v22 = "Reverse_seq Layer: seq_lengths should be a vector of length equal to batch dimension of input.";
    goto LABEL_80;
  }
  v65 = *(_QWORD *)(v16 + 24);
  if ((_DWORD)v26)
  {
    v22 = "Reverse_seq Layer: each seq_lengths element should be <= sequence dimension of input.";
    v27 = v19;
    while (1)
    {
      v28 = (int)(float)(*v27 + 0.5);
      if (v28 < 0 || v68.__begin_[v25] < v28)
        break;
      ++v27;
      if (!--v26)
        goto LABEL_27;
    }
LABEL_80:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v22);
  }
LABEL_27:
  v29 = ((unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2);
  std::vector<int>::vector(&v76, v29);
  std::vector<int>::vector(&v81, v29);
  std::vector<int>::vector(&v80, v29);
  v64 = v15;
  v30 = 1;
  if (v68.__begin_ != v68.__end_)
  {
    begin = v68.__begin_;
    do
    {
      v32 = *begin++;
      v30 *= v32;
    }
    while (begin != v68.__end_);
  }
  NDShapeUtils::compute_strides((uint64_t)v68.__begin_, (uint64_t)v68.__end_, (uint64_t)v76.__begin_, (uint64_t)v76.__end_);
  if (v30 >= 1)
  {
    v33 = 0;
    v34 = v68.__begin_;
    do
    {
      NDShapeUtils::unravel_index(v33, (uint64_t)v34, (uint64_t)v68.__end_, v80.__begin_, (uint64_t)v80.__end_);
      v35 = v76.__begin_;
      LODWORD(v36) = v76.__begin_[v25];
      if ((int)v36 >= 1)
      {
        v37 = 0;
        v38 = v80.__begin_[v23];
        v40 = v65;
        v39 = v66;
        do
        {
          v41 = (int)(float)(v19[v38] + 0.5);
          if (v41 < 1)
          {
            v42 = v33;
          }
          else
          {
            cblas_scopy(v41, (const float *)(v39 + 4 * (int)v33), -(int)v36, (float *)(v40 + 4 * (int)v33), v36);
            v41 = (int)(float)(v19[v38] + 0.5);
            v35 = v76.__begin_;
            v42 = v33 + v76.__begin_[v25] * v41;
          }
          v43 = v68.__begin_[v25];
          v44 = __OFSUB__(v43, v41);
          v45 = v43 - v41;
          if (!((v45 < 0) ^ v44 | (v45 == 0)))
          {
            cblas_scopy(v45, (const float *)(v39 + 4 * v42), v35[v25], (float *)(v40 + 4 * v42), v35[v25]);
            v35 = v76.__begin_;
          }
          ++v37;
          v36 = v35[v25];
          v40 += 4;
          v39 += 4;
        }
        while (v37 < v36);
      }
      v34 = v68.__begin_;
      v33 = (v33 + v68.__begin_[v25] * v36);
    }
    while ((int)v33 < v30);
  }
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
  if (v81.__begin_)
  {
    v81.__end_ = v81.__begin_;
    operator delete(v81.__begin_);
  }
  if (v76.__begin_)
  {
    v76.__end_ = v76.__begin_;
    operator delete(v76.__begin_);
  }
  if (v67.__begin_)
  {
    v67.__end_ = v67.__begin_;
    operator delete(v67.__begin_);
  }
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  if (v64)
  {
    v46 = (unint64_t *)&v64->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v48 = v72;
  if (v72)
  {
    v49 = (unint64_t *)&v72->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v74;
  if (v74)
  {
    v52 = (unint64_t *)&v74->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1917F10C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::cross_entropy_kernel_cpu::~cross_entropy_kernel_cpu(Espresso::cross_entropy_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cross_entropy_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;

  v7 = (uint64_t)*a3;
  (*(void (**)(_QWORD))(*(_QWORD *)**a3 + 32))(**a3);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 160);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v7 + 168);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = 0;
  v13 = *(int *)(v8 + 8);
  v14 = v8 + 12;
  do
  {
    v13 *= *(int *)(v14 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  if (v13 != 1)
  {
    v18 = "cross_entropy: output should be reduced to a scalar";
    goto LABEL_16;
  }
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
  {
    v18 = "cross_entropy needs 2 inputs: probability and label as class indices";
LABEL_16:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v18);
  }
  v15.n128_f32[0] = Espresso::compute_cross_entropy_cpu(*(uint64_t **)a4, (_QWORD *)(*(_QWORD *)a4 + 16), *a3, (_BYTE *)(a1 + 280));
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v15);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1917F12D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::sgd_kernel_cpu::~sgd_kernel_cpu(Espresso::sgd_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sgd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  float v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  vDSP_Length __N;
  uint64_t v48;
  vDSP_Length v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  vDSP_Length v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  float v79;
  float __B;
  uint64_t __D;

  __D = 0;
  __B = 0.0;
  v79 = 1.0;
  v7 = *(int *)(a1 + 288);
  v8 = *a4;
  if (!*(_BYTE *)(a1 + 280))
  {
    v18 = 32 * (_DWORD)v7;
    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + v18) + 32))(*(_QWORD *)(v8 + v18));
    v19 = *(_QWORD *)(v8 + v18);
    v20 = *(_QWORD *)(v19 + 160);
    v21 = *(std::__shared_weak_count **)(v19 + 168);
    if (!v21)
    {
      *(float *)&__D = -**(float **)(v20 + 24);
      goto LABEL_28;
    }
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    *(float *)&__D = -**(float **)(v20 + 24);
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    goto LABEL_22;
  }
  v9 = 3 * v7;
  v10 = 48 * v7;
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 48 * v7) + 32))(*(_QWORD *)(v8 + 48 * v7));
  v11 = *(_QWORD *)(v8 + v10);
  v12 = *(_QWORD *)(v11 + 160);
  v13 = *(std::__shared_weak_count **)(v11 + 168);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    HIDWORD(__D) = **(_DWORD **)(v12 + 24);
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    HIDWORD(__D) = **(_DWORD **)(v12 + 24);
  }
  *(float *)&__D = -*((float *)&__D + 1);
  if (3 * *(int *)(a1 + 288) + 1 >= (unint64_t)((a4[1] - *a4) >> 4))
  {
    v32 = *(float *)(a1 + 284);
LABEL_27:
    __B = v32;
    goto LABEL_28;
  }
  v26 = *a4 + 16 * v9;
  (*(void (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 32))(*(_QWORD *)(v26 + 16));
  v27 = *(_QWORD *)(v26 + 16);
  v28 = *(_QWORD *)(v27 + 160);
  v21 = *(std::__shared_weak_count **)(v27 + 168);
  if (!v21)
  {
    v32 = **(float **)(v28 + 24);
    goto LABEL_27;
  }
  v29 = (unint64_t *)&v21->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  __B = **(float **)(v28 + 24);
  v31 = (unint64_t *)&v21->__shared_owners_;
  do
    v25 = __ldaxr(v31);
  while (__stlxr(v25 - 1, v31));
LABEL_22:
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_28:
  if (*(_DWORD *)(a1 + 288))
  {
    v33 = 0;
    do
    {
      v34 = (_QWORD *)(*a4 + 16 * v33);
      if (*v34 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 32))(*v34))
      {
        v35 = *(_QWORD *)(*v34 + 160);
        v62 = *(std::__shared_weak_count **)(*v34 + 168);
        v78 = v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
      }
      else
      {
        v35 = 0;
        v78 = 0;
      }
      v36 = (_QWORD *)(*a4 + 16 * (v33 + *(int *)(a1 + 288)));
      if (*v36 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v36 + 32))(*v36))
      {
        v37 = *(_QWORD *)(*v36 + 160);
        v65 = *(std::__shared_weak_count **)(*v36 + 168);
        v77 = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
      }
      else
      {
        v37 = 0;
        v77 = 0;
      }
      v38 = (_QWORD *)(*a3 + 16 * v33);
      if (*v38 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v38 + 32))(*v38))
      {
        v40 = *(_QWORD *)(*v38 + 160);
        v39 = *(std::__shared_weak_count **)(*v38 + 168);
        v76 = v39;
        if (v39)
        {
          v68 = (unint64_t *)&v39->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v76 = 0;
      }
      if (*(_BYTE *)(a1 + 280))
      {
        v41 = (_QWORD *)(*a4 + 16 * (v33 + 2 * *(int *)(a1 + 288)));
        if (*v41 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v41 + 32))(*v41))
        {
          v42 = *(_QWORD *)(*v41 + 160);
          v70 = *(std::__shared_weak_count **)(*v41 + 168);
          v75 = v70;
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
        }
        else
        {
          v42 = 0;
          v75 = 0;
        }
        v43 = (_QWORD *)(*a3 + 16 * (v33 + *(int *)(a1 + 288)));
        if (*v43 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v43 + 32))(*v43))
        {
          v45 = *(_QWORD *)(*v43 + 160);
          v44 = *(std::__shared_weak_count **)(*v43 + 168);
          if (v44)
          {
            v73 = (unint64_t *)&v44->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
        }
        else
        {
          v44 = 0;
          v45 = 0;
        }
        v46 = 0;
        __N = *(int *)(v42 + 8);
        do
        {
          __N *= *(int *)(v42 + 12 + v46);
          v46 += 4;
        }
        while (v46 != 12);
        vDSP_vsmsma(*(const float **)(v42 + 24), 1, &__B, *(const float **)(v37 + 24), 1, (const float *)&__D + 1, *(float **)(v45 + 24), 1, __N);
        v48 = 0;
        v49 = *(int *)(v35 + 8);
        do
        {
          v49 *= *(int *)(v35 + 12 + v48);
          v48 += 4;
        }
        while (v48 != 12);
        vDSP_vsub(*(const float **)(v45 + 24), 1, *(const float **)(v35 + 24), 1, *(float **)(v40 + 24), 1, v49);
        if (v44)
        {
          v50 = (unint64_t *)&v44->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v75)
        {
          v52 = (unint64_t *)&v75->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v39 = v76;
      }
      else
      {
        v54 = 0;
        v55 = *(int *)(v35 + 8);
        do
        {
          v55 *= *(int *)(v35 + 12 + v54);
          v54 += 4;
        }
        while (v54 != 12);
        vDSP_vsmsma(*(const float **)(v35 + 24), 1, &v79, *(const float **)(v37 + 24), 1, (const float *)&__D, *(float **)(v40 + 24), 1, v55);
      }
      if (v39)
      {
        v56 = (unint64_t *)&v39->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v77)
      {
        v58 = (unint64_t *)&v77->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if (v78)
      {
        v60 = (unint64_t *)&v78->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      ++v33;
    }
    while (v33 < *(int *)(a1 + 288));
  }
}

void sub_1917F18E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::adam_kernel_cpu::~adam_kernel_cpu(Espresso::adam_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::adam_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  float v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  float v48;
  _QWORD *v49;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  int v116[3];
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float __D;
  float v135;
  float __B[3];

  v4 = a4;
  v6 = *(int *)(a1 + 292);
  v7 = 4 * v6;
  v8 = *a4;
  v9 = v6 << 6;
  (*(void (**)(_QWORD))(**(_QWORD **)(*a4 + (v6 << 6)) + 32))(*(_QWORD *)(*a4 + (v6 << 6)));
  v10 = *(_QWORD *)(v8 + v9);
  v11 = *(_QWORD *)(v10 + 160);
  v12 = *(std::__shared_weak_count **)(v10 + 168);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = **(float **)(v11 + 24);
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = **(float **)(v11 + 24);
  }
  v18 = *v4;
  v19 = (16 * v7) | 0x10;
  (*(void (**)(_QWORD))(**(_QWORD **)(*v4 + v19) + 32))(*(_QWORD *)(*v4 + v19));
  v20 = *(_QWORD *)(v18 + v19);
  v21 = *(_QWORD *)(v20 + 160);
  v22 = *(std::__shared_weak_count **)(v20 + 168);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = (int)**(float **)(v21 + 24) + 1;
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v25 = (int)**(float **)(v21 + 24) + 1;
  }
  v28 = *(float *)(a1 + 280);
  v135 = *(float *)(a1 + 284);
  __B[0] = v28;
  v29 = *v4;
  v30 = (uint64_t)(v4[1] - *v4) >> 4;
  v31 = v7 | 3;
  if (v30 >= (v7 | 3uLL))
  {
    if (v30 != v7 + 4)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid number of inputs to adam kernel");
    v32 = (16 * v7) | 0x20;
    (*(void (**)(_QWORD))(**(_QWORD **)(v29 + v32) + 32))(*(_QWORD *)(v29 + v32));
    v33 = *(_QWORD *)(v29 + v32);
    v34 = *(_QWORD *)(v33 + 160);
    v35 = *(std::__shared_weak_count **)(v33 + 168);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      __B[0] = **(float **)(v34 + 24);
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    else
    {
      __B[0] = **(float **)(v34 + 24);
    }
    v40 = *v4;
    (*(void (**)(_QWORD))(**(_QWORD **)(*v4 + 16 * v31) + 32))(*(_QWORD *)(*v4 + 16 * v31));
    v41 = *(_QWORD *)(v40 + 16 * v31);
    v42 = *(_QWORD *)(v41 + 160);
    v43 = *(std::__shared_weak_count **)(v41 + 168);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      v135 = **(float **)(v42 + 24);
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      v135 = **(float **)(v42 + 24);
    }
  }
  if (v15 < 0.0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float const&>(v15);
  v48 = *(float *)(a1 + 288);
  v49 = a3;
  if (v48 < 0.0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("eps = %f < 0", *(float *)(a1 + 288));
  if (__B[0] < 0.0 || __B[0] >= 1.0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("beta1 = %f not in [0, 1)", __B[0]);
  if (v135 < 0.0 || v135 >= 1.0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("beta2 = %f not in [0, 1)", v135);
  v133 = 1.0 - v135;
  __D = 1.0 - __B[0];
  v132 = 1.0;
  v52 = 1.0 - pow(__B[0], (double)v25);
  v53 = 1.0 - pow(v135, (double)v25);
  v54 = sqrtf(v53);
  v130 = v48 * v54;
  v131 = (float)(v54 * (float)-v15) / v52;
  if (*(_DWORD *)(a1 + 292))
  {
    v55 = 0;
    v114 = v4;
    do
    {
      v56 = (_QWORD *)(*v4 + 16 * v55);
      if (*v56 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v56 + 32))(*v56))
      {
        v57 = *(_QWORD *)(*v56 + 160);
        v93 = *(std::__shared_weak_count **)(*v56 + 168);
        v128 = v57;
        v129 = v93;
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
      }
      else
      {
        v57 = 0;
        v128 = 0;
        v129 = 0;
      }
      v58 = (_QWORD *)(*v4 + 16 * (v55 + *(int *)(a1 + 292)));
      if (*v58 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v58 + 32))(*v58))
      {
        v59 = *(_QWORD *)(*v58 + 160);
        v96 = *(std::__shared_weak_count **)(*v58 + 168);
        v126 = v59;
        v127 = v96;
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
      }
      else
      {
        v59 = 0;
        v126 = 0;
        v127 = 0;
      }
      v60 = (_QWORD *)(*v4 + 16 * (v55 + 2 * *(int *)(a1 + 292)));
      if (*v60 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v60 + 32))(*v60))
      {
        v61 = *(_QWORD *)(*v60 + 160);
        v99 = *(std::__shared_weak_count **)(*v60 + 168);
        v124 = v61;
        v125 = v99;
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
      }
      else
      {
        v61 = 0;
        v124 = 0;
        v125 = 0;
      }
      v62 = (_QWORD *)(*v4 + 16 * (v55 + 3 * *(int *)(a1 + 292)));
      if (*v62 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v62 + 32))(*v62))
      {
        v63 = *(_QWORD *)(*v62 + 160);
        v102 = *(std::__shared_weak_count **)(*v62 + 168);
        v122 = v63;
        v123 = v102;
        if (v102)
        {
          v103 = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
      }
      else
      {
        v63 = 0;
        v122 = 0;
        v123 = 0;
      }
      v64 = (_QWORD *)(*v49 + 16 * v55);
      if (*v64 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v64 + 32))(*v64))
      {
        v65 = *(_QWORD *)(*v64 + 160);
        v105 = *(std::__shared_weak_count **)(*v64 + 168);
        v120 = v65;
        v121 = v105;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
      }
      else
      {
        v65 = 0;
        v120 = 0;
        v121 = 0;
      }
      v66 = (_QWORD *)(*v49 + 16 * (v55 + *(int *)(a1 + 292)));
      if (*v66 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v66 + 32))(*v66))
      {
        v67 = *(_QWORD *)(*v66 + 160);
        v108 = *(std::__shared_weak_count **)(*v66 + 168);
        v118 = v67;
        v119 = v108;
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
      }
      else
      {
        v67 = 0;
        v118 = 0;
        v119 = 0;
      }
      v68 = (_QWORD *)(*v49 + 16 * (v55 + 2 * *(int *)(a1 + 292)));
      if (*v68 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v68 + 32))(*v68))
      {
        v111 = *v68;
        v70 = *(_QWORD *)(*v68 + 160);
        v69 = *(std::__shared_weak_count **)(v111 + 168);
        *(_QWORD *)&v116[1] = v70;
        v117 = v69;
        if (v69)
        {
          v112 = (unint64_t *)&v69->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
      }
      else
      {
        v69 = 0;
        v70 = 0;
        *(_QWORD *)&v116[1] = 0;
        v117 = 0;
      }
      v71 = 0;
      v116[0] = 0;
      v72 = *(_DWORD *)(v70 + 8);
      do
      {
        v72 *= *(_DWORD *)(v70 + 12 + v71);
        v71 += 4;
      }
      while (v71 != 12);
      v116[0] = v72;
      vDSP_vsmsma(*(const float **)(v61 + 24), 1, __B, *(const float **)(v59 + 24), 1, &__D, *(float **)(v67 + 24), 1, v72);
      vDSP_vmul(*(const float **)(v59 + 24), 1, *(const float **)(v59 + 24), 1, *(float **)(v65 + 24), 1, v116[0]);
      vDSP_vsmsma(*(const float **)(v63 + 24), 1, &v135, *(const float **)(v65 + 24), 1, &v133, *(float **)(v70 + 24), 1, v116[0]);
      vvsqrtf(*(float **)(v65 + 24), *(const float **)(v70 + 24), v116);
      vDSP_vsadd(*(const float **)(v65 + 24), 1, &v130, *(float **)(v65 + 24), 1, v116[0]);
      vDSP_vdiv(*(const float **)(v65 + 24), 1, *(const float **)(v67 + 24), 1, *(float **)(v65 + 24), 1, v116[0]);
      vDSP_vsmsma(*(const float **)(v57 + 24), 1, &v132, *(const float **)(v65 + 24), 1, &v131, *(float **)(v65 + 24), 1, v116[0]);
      v4 = v114;
      if (v69)
      {
        v73 = (unint64_t *)&v69->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v75 = v119;
      if (v119)
      {
        v76 = (unint64_t *)&v119->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v121;
      if (v121)
      {
        v79 = (unint64_t *)&v121->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v123;
      if (v123)
      {
        v82 = (unint64_t *)&v123->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v125;
      if (v125)
      {
        v85 = (unint64_t *)&v125->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v127;
      if (v127)
      {
        v88 = (unint64_t *)&v127->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = v129;
      if (v129)
      {
        v91 = (unint64_t *)&v129->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v55;
      v49 = a3;
    }
    while (v55 < *(int *)(a1 + 292));
  }
}

void sub_1917F2210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,float const&>(float a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("lr = %f < 0", a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>(char *a1, float a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, a2);
}

void Espresso::gather_nd_kernel_cpu::~gather_nd_kernel_cpu(Espresso::gather_nd_kernel_cpu *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D86598;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D86598;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::gather_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  int v40[6];
  char v41[40];
  void *__p;
  void *v43;
  int v44[6];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  v4 = *a4;
  if ((char *)a4[1] - (char *)*a4 != 32)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: two inputs required");
  if (*v4 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v4 + 32))(*v4))
  {
    v8 = *(_QWORD *)(*v4 + 160);
    v26 = *(std::__shared_weak_count **)(*v4 + 168);
    v49 = v8;
    v50 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v49 = 0;
    v50 = 0;
  }
  v9 = *a4;
  v10 = (*a4)[2];
  if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v29 = v9[2];
    v11 = *(_QWORD *)(v29 + 160);
    v30 = *(std::__shared_weak_count **)(v29 + 168);
    v47 = v11;
    v48 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v11 = 0;
    v47 = 0;
    v48 = 0;
  }
  v12 = *a3;
  if (a3[1] == *a3 || !*v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
  {
    v13 = 0;
    v14 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(*v12 + 160);
  v14 = *(std::__shared_weak_count **)(*v12 + 168);
  v45 = v13;
  v46 = v14;
  if (v14)
  {
    v33 = (unint64_t *)&v14->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (!v8 || !v11 || !v13)
  {
LABEL_12:
    v15 = **a4;
    if (!v15
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15)
      || (v16 = (*a4)[2]) == 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16)
      || (v17 = **a3) == 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17))
    {
      v39 = "gather_nd_kernel_cpu: Only supports FP32 bottoms and tops";
    }
    else
    {
      if (!(v11 | v13))
        goto LABEL_19;
      v39 = "gather_nd_kernel_cpu: Invalid input/output blobs";
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v39);
  }
  v35 = *(_QWORD *)(v8 + 24);
  v36 = *(float **)(v11 + 24);
  v37 = *(_QWORD *)(v13 + 24);
  Espresso::abstract_blob_container::shape(v41, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v44, (const Espresso::layer_shape *)v41, 0);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  v38 = v44[5];
  Espresso::abstract_blob_container::shape(v41, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)v41, 0);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
LABEL_19:
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = v48;
  if (v48)
  {
    v21 = (unint64_t *)&v48->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v50;
  if (v50)
  {
    v24 = (unint64_t *)&v50->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1917F2668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 80);
  _Unwind_Resume(a1);
}

void Espresso::gather_nd_kernel_cpu::on_resized(Espresso::gather_nd_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  _QWORD *v4;
  void *v5;
  char v6[40];
  void *__p;
  void *v8;
  _BYTE v9[24];
  std::vector<int> v10;

  Espresso::abstract_blob_container::shape(v6, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v9, (const Espresso::layer_shape *)v6, 0);
  Espresso::layer_nd_shape::strides_vector(&v10, (uint64_t)v9);
  v4 = (_QWORD *)((char *)this + 296);
  v5 = (void *)*((_QWORD *)this + 37);
  if (v5)
  {
    *((_QWORD *)this + 38) = v5;
    operator delete(v5);
    *v4 = 0;
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 39) = 0;
  }
  *(_OWORD *)v4 = *(_OWORD *)&v10.__begin_;
  *((_QWORD *)this + 39) = v10.__end_cap_.__value_;
  memset(&v10, 0, sizeof(v10));
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1917F2758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *Espresso::layer_nd_shape::strides_vector(std::vector<int> *this, uint64_t a2)
{
  std::vector<int> *result;
  int v4;
  unint64_t v5;
  std::vector<int>::pointer begin;
  int v7;
  BOOL v8;

  result = std::vector<int>::vector(this, *(int *)(a2 + 20));
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 - 1);
  begin = result->__begin_;
  result->__begin_[(int)v5] = 1;
  if (v4 >= 2)
  {
    v7 = 1;
    do
    {
      v7 *= *(_DWORD *)(a2 + 4 * v5);
      v8 = v5-- > 1;
      begin[v5] = v7;
    }
    while (v8);
  }
  return result;
}

void Espresso::`anonymous namespace'::execute_gather_nd(uint64_t a1, int *a2, int a3, float *a4, int *a5, uint64_t a6, int a7, int a8, int a9, int **a10, unsigned __int8 a11, unsigned __int8 a12)
{
  std::vector<int>::size_type v13;
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t i;
  char *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int *begin;
  int v38;
  int *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int *v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  int *v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int j;
  int v80;
  float *v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  char v89;
  int v90;
  int v91;
  int *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  int *v112;
  float *v113;
  int *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  BOOL v121;
  int v122;
  char v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v140;
  std::vector<int>::value_type v143;
  std::vector<int> __x;
  std::vector<int> v145;

  v13 = a5[5];
  v14 = a5[5];
  v15 = 1;
  if ((int)v13 >= 1)
  {
    v16 = a5;
    v17 = a5[5];
    do
    {
      v18 = *v16++;
      v15 *= v18;
      --v17;
    }
    while (v17);
  }
  if (a9 < 0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("batch_dims cannot be negative.");
  if (a8)
  {
    if (a8 != 2)
    {
      if (a8 != 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Invalid MODE");
      v19 = a5[v13 - 1];
      v20 = v19 + a9;
      if ((int)v19 + a9 > a3)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TF_GATHER_ND mode indexes plus batch dims exceed data tensor rank.");
      if (v13 - 1 < a9)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: More batch_dims than TF_GATHER_ND indices support.");
      if (v20 >= a3 || (v21 = v20 & ~(v20 >> 31), v22 = a2[5], (int)v21 >= (int)v22))
      {
        v24 = 1;
      }
      else
      {
        v23 = v22 - v21;
        LODWORD(v24) = 1;
        v25 = &a2[v21];
        do
        {
          v26 = *v25++;
          v24 = v26 * (uint64_t)(int)v24;
          --v23;
        }
        while (v23);
      }
      v55 = a9 & ~(a9 >> 31);
      v56 = v14 - ((int)v14 > 0);
      v57 = &a5[v55];
      if ((int)v55 >= (int)v56)
      {
        v59 = 1;
      }
      else
      {
        v58 = v56 - v55;
        v59 = 1;
        v60 = &a5[v55];
        do
        {
          v61 = *v60++;
          v59 *= v61;
          --v58;
        }
        while (v58);
      }
      v91 = 1;
      if (a9 >= 1)
      {
        v92 = a2;
        v93 = a9;
        do
        {
          v94 = *v92++;
          v91 *= v94;
          --v93;
        }
        while (v93);
      }
      v95 = a2[5];
      if ((int)v55 >= (int)v95)
      {
        v97 = 1;
      }
      else
      {
        v96 = v95 - v55;
        v97 = 1;
        v98 = &a2[v55];
        do
        {
          v99 = *v98++;
          v97 *= v99;
          --v96;
        }
        while (v96);
      }
      if ((int)v55 >= (int)v14)
      {
        v101 = 1;
      }
      else
      {
        v100 = v14 - v55;
        LODWORD(v101) = 1;
        do
        {
          v102 = *v57++;
          v101 = v102 * (uint64_t)(int)v101;
          --v100;
        }
        while (v100);
      }
      if (v91 >= 1)
      {
        v103 = 0;
        v104 = 0;
        LODWORD(v105) = 0;
        v131 = 4 * v101;
        v106 = 4 * v19;
        v137 = a5[v13 - 1];
        v107 = a5[v13 - 1];
        v108 = v59;
        v135 = &a2[a9];
        v127 = v91;
        v129 = v59;
        v126 = v97;
        do
        {
          if (v59 >= 1)
          {
            v133 = v103;
            v109 = 0;
            v105 = (int)v105;
            v110 = a4;
            do
            {
              if (v107 < 1)
              {
                v115 = v104;
              }
              else
              {
                v111 = v137;
                v112 = &(*a10)[a9];
                v113 = v110;
                v114 = v135;
                v115 = v104;
                do
                {
                  v116 = llroundf(*v113);
                  v118 = *v114++;
                  v117 = v118;
                  if (((v116 < 0) & a12) != 0)
                    v119 = v117;
                  else
                    v119 = 0;
                  v120 = v119 + v116;
                  v121 = v119 + v116 >= 0 && v120 < v117;
                  v122 = v121;
                  if (v121)
                    v123 = 1;
                  else
                    v123 = a11 ^ 1;
                  if ((v123 & 1) == 0)
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int>(v120, v117);
                  if (v122)
                    v124 = v120;
                  else
                    v124 = 0;
                  v125 = *v112++;
                  v115 += v124 * v125;
                  ++v113;
                  --v111;
                }
                while (v111);
              }
              memcpy((void *)(a6 + 4 * v105), (const void *)(a1 + 4 * v115), 4 * v24);
              v105 += v24;
              ++v109;
              v110 = (float *)((char *)v110 + v106);
            }
            while (v109 != v108);
            v91 = v127;
            v59 = v129;
            v97 = v126;
            v103 = v133;
          }
          v104 += v97;
          ++v103;
          a4 = (float *)((char *)a4 + v131);
        }
        while (v103 != v91);
      }
      return;
    }
    if (a9)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TORCH_GATHER mode doesn't support batch_dims.");
    v27 = (a3 & (a7 >> 31)) + a7;
    v28 = a2[v27];
    LODWORD(__x.__begin_) = 0;
    std::vector<int>::vector(&v145, v13, (const std::vector<int>::value_type *)&__x);
    v143 = 0;
    std::vector<int>::vector(&__x, v13, &v143);
    if (v15 < 1)
    {
      begin = __x.__begin_;
      if (!__x.__begin_)
        goto LABEL_134;
    }
    else
    {
      for (i = 0; i != v15; *(_DWORD *)(a6 + 4 * i++) = *(_DWORD *)(a1 + 4 * v38))
      {
        v30 = (char *)v145.__begin_;
        v31 = i;
        v32 = v14 + 1;
        if ((int)v14 >= 2)
        {
          do
          {
            *(_DWORD *)&v30[4 * (v32 - 2)] = v31 % a5[(v32 - 2)];
            v31 /= a5[(v32-- - 2)];
          }
          while (v32 > 2);
        }
        *(_DWORD *)v30 = v31;
        v33 = llroundf(a4[i]);
        if (((v33 < 0) & a12) != 0)
          v34 = v28;
        else
          v34 = 0;
        v35 = (v34 + v33);
        if ((int)v35 >= 0 && (int)v35 < (int)v28)
          v36 = v35;
        else
          v36 = 0;
        if (!(((int)v35 >= 0 && (int)v35 < (int)v28) | (a11 ^ 1) & 1))
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("gather_nd_kernel: In TORCH_GATHER mode, Invalid index %d into axis of size %d\n", v35, v28);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__x, v30, (uint64_t)v145.__end_, ((char *)v145.__end_ - v30) >> 2);
        begin = __x.__begin_;
        __x.__begin_[v27] = v36;
        v38 = 0;
        if ((_DWORD)v14)
        {
          v39 = *a10;
          v40 = begin;
          v41 = v14;
          do
          {
            v43 = *v40++;
            v42 = v43;
            v44 = *v39++;
            v38 += v44 * v42;
            --v41;
          }
          while (v41);
        }
      }
    }
    __x.__end_ = begin;
    operator delete(begin);
LABEL_134:
    if (v145.__begin_)
    {
      v145.__end_ = v145.__begin_;
      operator delete(v145.__begin_);
    }
    return;
  }
  v45 = a3 & (a7 >> 31);
  v46 = __OFADD__(v45, a7);
  v47 = (v45 + a7);
  if ((int)v47 < 0 != v46)
    v48 = -1;
  else
    v48 = v47;
  v49 = v48 + 1;
  v50 = a2[5];
  if ((int)v49 >= (int)v50)
  {
    v52 = 1;
  }
  else
  {
    v51 = v50 - v49;
    v52 = 1;
    v53 = &a2[v49];
    do
    {
      v54 = *v53++;
      v52 *= v54;
      --v51;
    }
    while (v51);
  }
  if (v13 < a9)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: More batch_dims than TF_GATHER indices support.");
  if ((int)v47 < a9)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TF_GATHER batch_dims must be less than or equal to axis.");
  if (v13 <= a9 || (v62 = a9 & ~(a9 >> 31), (int)v62 >= (int)v13))
  {
    v65 = 1;
  }
  else
  {
    v63 = a5[5] - (unint64_t)v62;
    v64 = &a5[v62];
    v65 = 1;
    do
    {
      v66 = *v64++;
      v65 *= v66;
      --v63;
    }
    while (v63);
  }
  v67 = 1;
  if (a9 >= 1)
  {
    v68 = a2;
    v69 = a9;
    do
    {
      v70 = *v68++;
      v67 *= v70;
      --v69;
    }
    while (v69);
  }
  if ((int)v47 <= a9 || (v71 = a9 & ~(a9 >> 31), (int)v71 >= (int)v47))
  {
    v73 = 1;
  }
  else
  {
    v72 = v47 - v71;
    v73 = 1;
    v74 = &a2[v71];
    do
    {
      v75 = *v74++;
      v73 *= v75;
      --v72;
    }
    while (v72);
  }
  v130 = v67;
  if (v67 >= 1)
  {
    v132 = 0;
    v134 = v73;
    v76 = 0;
    v77 = 0;
    v78 = a2[(int)v47];
    v136 = v65;
    v138 = v65;
    v128 = 4 * v65;
    do
    {
      if (v73 >= 1)
      {
        for (j = 0; j != v73; ++j)
        {
          if (v65 >= 1)
          {
            v140 = j;
            v80 = v77;
            v82 = v138;
            v81 = a4;
            v83 = (char *)(a6 + 4 * v77);
            do
            {
              v84 = llroundf(*v81);
              if (((v84 < 0) & a12) != 0)
                v85 = v78;
              else
                v85 = 0;
              v86 = (v85 + v84);
              v87 = (int)v86 >= (int)v78 || (int)v86 < 0;
              v88 = !v87;
              if (v87)
                v89 = a11 ^ 1;
              else
                v89 = 1;
              if ((v89 & 1) == 0)
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("gather_nd_kernel: In TF_GATHER mode, Invalid index %d into axis of size %d\n", v86, v78);
              if (v88)
                v90 = v86;
              else
                v90 = 0;
              memcpy(v83, (const void *)(a1 + 4 * (v76 + v90 * v52)), 4 * v52);
              v80 += v52;
              v83 += 4 * v52;
              ++v81;
              --v82;
            }
            while (v82);
            v77 = v80;
            v65 = v136;
            v73 = v134;
            j = v140;
          }
          v76 += v52 * v78;
        }
      }
      a4 = (float *)((char *)a4 + v128);
      ++v132;
    }
    while (v132 != v130);
  }
}

void sub_1917F2F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("gather_nd_kernel: In TF_GATHER_ND mode with, Invalid index %d into axis of size %d\n", a1, a2);
}

_QWORD *Espresso::non_maximum_suppression_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t **a4)
{
  int v5;
  uint64_t (**v6)();
  __int128 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int *v35;
  unsigned int *v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  int **v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (***v47)();
  int v48;
  BOOL v49;
  char *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  float *v77;
  uint64_t v78;
  float *v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  float *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  vDSP_Stride v110;
  uint64_t v111;
  const float *v112;
  float *v113;
  unint64_t v114;
  vDSP_Length v115;
  unint64_t v116;
  uint64_t v117;
  float v118;
  vDSP_Length v119;
  vDSP_Length v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t v129;
  _DWORD *v130;
  uint64_t v131;
  unint64_t v132;
  _DWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float v138;
  float v139;
  float v140;
  float v141;
  vDSP_Length v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float64x2_t v149;
  _OWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t (***v181)();
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *result;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  vDSP_Length v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  float *__C;
  uint64_t v213;
  float *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v220;
  uint64_t v221;
  float *v222;
  _OWORD *v223;
  uint64_t v224;
  _BYTE v225[24];
  std::vector<int> v226;
  _QWORD v227[2];
  int v228;
  int v229;
  _OWORD *v230;
  float32x2_t v231;
  float32x2_t v232;
  uint64_t v233;
  float __A;
  uint64_t v235;
  std::__shared_weak_count *v236;
  char *v237;
  std::__shared_weak_count *v238;
  void *v239;
  void *v240;
  uint64_t v241;
  void *v242;
  void *v243;
  uint64_t v244;
  void *__p;
  void *v246;
  void *v247;
  void *v248;
  uint64_t v249;
  char v250[4];
  int v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  _BYTE v255[20];
  std::__shared_weak_count *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  uint64_t (**v259)();
  std::__shared_weak_count *v260;
  uint64_t v261;
  uint64_t (***v262)();
  void *v263;
  void *v264;
  __int128 __src;
  float32x2_t v266;
  __int128 *p_src;
  void *v268;
  void *v269;
  _QWORD v270[3];
  _QWORD *v271;
  uint64_t v272;

  v272 = *MEMORY[0x1E0C80C00];
  v271 = 0;
  v5 = *(_DWORD *)(a1 + 300);
  if (v5 == 1)
  {
    v6 = &off_1E2DB1E48;
  }
  else
  {
    if (v5 != 3)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("mode must be either CENTER_SIZE_WIDTH_FIRST or CORNERS_WIDTH_FIRST.");
    v6 = &off_1E2DB1DF0;
  }
  *(_QWORD *)&__src = v6;
  p_src = &__src;
  std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::swap(&__src, v270);
  v7 = p_src;
  if (p_src == &__src)
  {
    v8 = 4;
    v7 = &__src;
    goto LABEL_9;
  }
  if (p_src)
  {
    v8 = 5;
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  v9 = *a4;
  if (a4[1] == *a4 || !*v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v258 = 0;
    v257 = 0;
  }
  else
  {
    v73 = *v9;
    v10 = *(_QWORD *)(*v9 + 160);
    v74 = *(std::__shared_weak_count **)(v73 + 168);
    v257 = v10;
    v258 = v74;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldxr(p_shared_owners);
      while (__stxr(v76 + 1, p_shared_owners));
    }
  }
  v11 = *a4;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a4)[2] + 32))((*a4)[2]);
  v12 = v11[2];
  v13 = *(_QWORD *)(v12 + 160);
  v14 = *(std::__shared_weak_count **)(v12 + 168);
  *(_QWORD *)&v255[12] = v13;
  v256 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v224 = *(_QWORD *)(v10 + 24);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(float *)(a1 + 284);
  v19 = *(float *)(a1 + 288);
  v20 = *(_DWORD *)(a1 + 280);
  v21 = *a4;
  v22 = (*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) << 30;
  v23 = (v22 + 0x200000000) >> 32;
  if (v23 < ((char *)a4[1] - (char *)*a4) >> 4)
  {
    v24 = &v21[2 * v23];
    if (*v24 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v24 + 32))(*v24))
    {
      v194 = *(_QWORD *)(*v24 + 160);
      v25 = *(std::__shared_weak_count **)(*v24 + 168);
      *(_QWORD *)&__src = v194;
      *((_QWORD *)&__src + 1) = v25;
      if (v25)
      {
        v195 = (unint64_t *)&v25->__shared_owners_;
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
      }
      if (v194)
        v18 = **(float **)(v194 + 24);
    }
    else
    {
      v25 = 0;
      __src = 0uLL;
    }
    v26 = (v22 + 0x300000000) >> 32;
    if (v26 < ((char *)a4[1] - (char *)*a4) >> 4)
    {
      v27 = &(*a4)[2 * v26];
      if (*v27 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v27 + 32))(*v27))
      {
        v197 = *(_QWORD *)(*v27 + 160);
        v28 = *(std::__shared_weak_count **)(*v27 + 168);
        v259 = (uint64_t (**)())v197;
        v260 = v28;
        if (v28)
        {
          v198 = (unint64_t *)&v28->__shared_owners_;
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 1, v198));
        }
        if (v197)
          v19 = **(float **)(v197 + 24);
      }
      else
      {
        v28 = 0;
        v260 = 0;
        v259 = 0;
      }
      v29 = (v22 + 0x400000000) >> 32;
      if (v29 < ((char *)a4[1] - (char *)*a4) >> 4)
      {
        v30 = &(*a4)[2 * v29];
        if (*v30 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v30 + 32))(*v30))
        {
          v200 = *(_QWORD *)(*v30 + 160);
          v201 = *(std::__shared_weak_count **)(*v30 + 168);
          if (v201)
          {
            v202 = (unint64_t *)&v201->__shared_owners_;
            do
              v203 = __ldxr(v202);
            while (__stxr(v203 + 1, v202));
          }
          if (v200)
            v20 = (int)**(float **)(v200 + 24);
          if (v201)
          {
            v204 = (unint64_t *)&v201->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
        }
        v28 = v260;
      }
      if (v28)
      {
        v31 = (unint64_t *)&v28->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
    }
    if (v25)
    {
      v33 = (unint64_t *)&v25->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v21 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&__src, *v21);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v253, (const Espresso::layer_shape *)&__src, 0);
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v250, (const Espresso::layer_shape *)&__src, 0);
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (*(_BYTE *)(a1 + 307))
    v35 = (int *)v255;
  else
    v35 = &v254;
  if (*(_BYTE *)(a1 + 307))
    v36 = (unsigned int *)&v251;
  else
    v36 = (unsigned int *)&v252;
  if (v20 <= 1)
    v37 = 1;
  else
    v37 = v20;
  if (*(_BYTE *)(a1 + 305))
    v38 = 3;
  else
    v38 = 4;
  v39 = (_QWORD *)*a3;
  v40 = (uint64_t)(a3[1] - *a3) >> 4;
  if (v40 != v38
            - *(char *)(a1 + 304)
            - *(char *)(a1 + 306)
            + ((*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: the number of outputs is 4 minus 1 for each of no_count and no_scores that is true. Check parameters.");
  v41 = v253;
  v211 = *v35;
  v221 = *v36;
  v209 = v253;
  v210 = v37;
  if (((char *)a4[1] - (char *)*a4) >> 4 > (unint64_t)((v22 + 0x400000000) >> 32))
  {
    std::vector<std::vector<int>>::vector(&v247, 4uLL);
    if (*(_BYTE *)(a1 + 307))
    {
      LODWORD(__src) = v41;
      *(_QWORD *)((char *)&__src + 4) = 0x100000004;
      HIDWORD(__src) = v37;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247, (char *)&__src, (uint64_t)&v266, 4uLL);
      *(_QWORD *)&__src = __PAIR64__(v221, v41);
      DWORD2(__src) = 1;
      HIDWORD(__src) = v37;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247 + 24, (char *)&__src, (uint64_t)&v266, 4uLL);
      *(_QWORD *)&__src = v41 | 0x100000000;
      DWORD2(__src) = v37;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247 + 48, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    }
    else
    {
      *(_QWORD *)&__src = __PAIR64__(v37, v41);
      DWORD2(__src) = 4;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(_QWORD *)&__src = __PAIR64__(v37, v41);
      DWORD2(__src) = v221;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247 + 24, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(_QWORD *)&__src = __PAIR64__(v37, v41);
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247 + 48, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
    }
    LODWORD(__src) = v41;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v247 + 72, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    if (v40 != (uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2)
    {
      v42 = 0;
      do
      {
        v43 = (int **)((char *)v247 + 24 * v42);
        v261 = 0;
        v259 = 0;
        v260 = 0;
        v44 = *v43;
        v45 = (char *)v43[1] - (char *)*v43;
        if (v45)
        {
          v46 = v45 >> 2;
          if ((unint64_t)(v45 >> 2) <= 1)
            v46 = 1;
          v47 = &v259;
          do
          {
            v48 = *v44++;
            *(_DWORD *)v47 = v48;
            v47 = (uint64_t (***)())((char *)v47 + 4);
            --v46;
          }
          while (v46);
        }
        HIDWORD(v261) = (unint64_t)v45 >> 2;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v259, 0, (uint64_t)&__src);
        Espresso::abstract_blob_container::shape((char *)&v259, *(_QWORD *)(*a3 + 16 * v42));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v239, (const Espresso::layer_shape *)&__src, 0);
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v239, 0, (uint64_t)&v242);
        v49 = Espresso::layer_shape::operator==((uint64_t)&v259, (uint64_t)&v242);
        if (__p)
        {
          v246 = __p;
          operator delete(__p);
        }
        if (v263)
        {
          v264 = v263;
          operator delete(v263);
        }
        if (!v49)
        {
          v50 = (char *)operator new(0x98uLL);
          *((_QWORD *)v50 + 1) = 0;
          v51 = (unint64_t *)(v50 + 8);
          *((_QWORD *)v50 + 2) = 0;
          *(_QWORD *)v50 = &off_1E2DBE998;
          *((_OWORD *)v50 + 4) = 0u;
          *((_OWORD *)v50 + 5) = 0u;
          *((_OWORD *)v50 + 2) = 0u;
          *((_OWORD *)v50 + 3) = 0u;
          *((_OWORD *)v50 + 6) = 0u;
          *((_OWORD *)v50 + 7) = 0u;
          *((_OWORD *)v50 + 8) = 0u;
          *((_QWORD *)v50 + 17) = 0;
          *((_QWORD *)v50 + 18) = 0;
          *((_DWORD *)v50 + 12) = 1065353216;
          *((_QWORD *)v50 + 7) = 0x1FFFFFFFFLL;
          *((_QWORD *)v50 + 12) = 0;
          *((_QWORD *)v50 + 13) = 0;
          *((_QWORD *)v50 + 8) = 0;
          *((_QWORD *)v50 + 9) = 0;
          v50[88] = 0;
          *((_QWORD *)v50 + 10) = 0;
          *((_QWORD *)v50 + 3) = &off_1E2DA0BF0;
          *((_QWORD *)v50 + 15) = 0;
          *((_QWORD *)v50 + 16) = 0;
          v50[144] = 0;
          v259 = (uint64_t (**)())(v50 + 24);
          v260 = (std::__shared_weak_count *)v50;
          v50[144] = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
          v52 = *(_QWORD *)(*a3 + 16 * v42);
          v237 = v50 + 24;
          v238 = (std::__shared_weak_count *)v50;
          do
            v53 = __ldxr(v51);
          while (__stxr(v53 + 1, v51));
          (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v52 + 16))(v52, &__src, &v237);
          v54 = v238;
          if (v238)
          {
            v55 = (unint64_t *)&v238->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v57 = v260;
          if (v260)
          {
            v58 = (unint64_t *)&v260->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        if (v268)
        {
          v269 = v268;
          operator delete(v268);
        }
        ++v42;
      }
      while (v40 - ((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2) > v42);
    }
    *(_QWORD *)&__src = &v247;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
    v39 = (_QWORD *)*a3;
    v41 = v209;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*v39 + 32))(*v39);
  v60 = *(_QWORD *)(*v39 + 160);
  v61 = *(std::__shared_weak_count **)(*v39 + 168);
  v235 = v60;
  v236 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v223 = *(_OWORD **)(v60 + 24);
  v242 = 0;
  v243 = 0;
  v244 = 0;
  if (*(_BYTE *)(a1 + 304))
  {
    std::vector<float>::resize(&v242, (int)(v41 * v37 * v221));
    v64 = 1;
    v220 = (char *)v242;
  }
  else
  {
    v65 = (_QWORD *)*a3;
    (*(void (**)(_QWORD))(**(_QWORD **)(*a3 + 16) + 32))(*(_QWORD *)(*a3 + 16));
    v66 = v65[2];
    v67 = *(_QWORD *)(v66 + 160);
    v68 = *(std::__shared_weak_count **)(v66 + 168);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      v220 = *(char **)(v67 + 24);
      v71 = (unint64_t *)&v68->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    else
    {
      v220 = *(char **)(v67 + 24);
    }
    v64 = 2;
  }
  v247 = 0;
  v248 = 0;
  v249 = 0;
  if (*(_BYTE *)(a1 + 306))
  {
    std::vector<float>::resize(&v247, (int)(v41 * v37));
    v77 = (float *)v247;
  }
  else
  {
    v80 = (_QWORD *)(*a3 + 16 * v64);
    (*(void (**)(_QWORD))(*(_QWORD *)*v80 + 32))(*v80);
    v81 = *(_QWORD *)(*v80 + 160);
    v82 = *(std::__shared_weak_count **)(*v80 + 168);
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
      ++v64;
      __C = *(float **)(v81 + 24);
      v85 = (unint64_t *)&v82->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
      goto LABEL_111;
    }
    ++v64;
    v77 = *(float **)(v81 + 24);
  }
  __C = v77;
LABEL_111:
  v78 = (int)v41;
  v239 = 0;
  v240 = 0;
  v241 = 0;
  if (*(_BYTE *)(a1 + 305))
  {
    std::vector<float>::resize(&v239, (int)v41);
    v79 = (float *)v239;
  }
  else
  {
    v87 = (_QWORD *)(*a3 + 16 * v64);
    (*(void (**)(_QWORD))(*(_QWORD *)*v87 + 32))(*v87);
    v88 = *(_QWORD *)(*v87 + 160);
    v89 = *(std::__shared_weak_count **)(*v87 + 168);
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
      ++v64;
      v79 = *(float **)(v88 + 24);
      v92 = (unint64_t *)&v89->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    else
    {
      ++v64;
      v79 = *(float **)(v88 + 24);
    }
    v41 = v209;
  }
  v94 = 0;
  __A = -1.0;
  v95 = *(int *)(v235 + 8);
  do
  {
    v95 *= *(int *)(v235 + 12 + v94);
    v94 += 4;
  }
  while (v94 != 12);
  v206 = v64;
  bzero(v223, 4 * v95);
  bzero(v220, 4 * (int)(v221 * v41 * v37));
  vDSP_vfill(&__A, __C, 1, (int)(v41 * v37));
  v96 = *(_BYTE *)(a1 + 307) == 0;
  if (*(_BYTE *)(a1 + 307))
    v97 = v211;
  else
    v97 = 1;
  v233 = v97;
  if (v96)
    v98 = 1;
  else
    v98 = v37;
  v217 = v98;
  v218 = v37;
  v259 = &off_1E2DB1EA0;
  v260 = (std::__shared_weak_count *)&v233;
  v262 = &v259;
  v207 = *(unsigned int *)(a1 + 296);
  if ((int)v207 >= 1 && (int)v207 < v37)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("num_boxes_pre_nms should be 0 or greater than max_boxes");
  if (v211 != (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 2)
    (*(void (**)(uint64_t, _QWORD *, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
  if (!v41)
    goto LABEL_235;
  v99 = 0;
  if ((unint64_t)v211 <= 1)
    v100 = 1;
  else
    v100 = v211;
  v101 = 4 * v217;
  v222 = __C;
  v208 = v78;
  do
  {
    v103 = v222;
    v102 = v223;
    v104 = v220;
    if (v99)
    {
      ++v79;
      v103 = &v222[v218];
      v104 = &v220[4 * (int)v221 * v210];
    }
    v220 = v104;
    if (v99)
      v102 = &v223[v210];
    v222 = v103;
    v223 = v102;
    if (v99)
      v17 += 4 * (int)v221 * v211;
    v105 = v224;
    if (v99)
      v105 = v224 + 16 * v211;
    v224 = v105;
    v215 = v79;
    if (!v211)
    {
      v116 = 0;
LABEL_221:
      v150 = (_OWORD *)(v224 + 16 * v116);
      v151 = v233;
      if (v217 == 1 && v233 == 1)
      {
        *v223 = *v150;
      }
      else
      {
        v152 = 4 * v233;
        v153 = v223;
        v154 = 4;
        do
        {
          *v153 = *(_DWORD *)v150;
          v150 = (_OWORD *)((char *)v150 + v152);
          v153 = (_DWORD *)((char *)v153 + v101);
          --v154;
        }
        while (v154);
        v151 = v233;
      }
      v155 = v208;
      v79 = v215;
      if ((int)v221 >= 1)
      {
        v156 = (_DWORD *)(v17 + 4 * v116 * (int)v221);
        v157 = 4 * v151;
        v158 = v220;
        v159 = v221;
        do
        {
          *v158 = *v156;
          v156 = (_DWORD *)((char *)v156 + v157);
          v158 = (_DWORD *)((char *)v158 + v101);
          --v159;
        }
        while (v159);
      }
      *v222 = (float)v116;
      *v215 = 1.0;
      goto LABEL_234;
    }
    v213 = v99;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = **(float **)(a1 + 360);
    do
    {
      if (*(_BYTE *)(a1 + 307))
        v110 = v211;
      else
        v110 = 1;
      if (*(_BYTE *)(a1 + 307))
        v111 = 1;
      else
        v111 = (int)v221;
      v112 = (const float *)(v17 + 4 * v111 * v108);
      v113 = (float *)(*(_QWORD *)(a1 + 360) + v106);
      if (*(_BYTE *)(a1 + 292))
        vDSP_maxvi(v112, v110, v113, (vDSP_Length *)(*(_QWORD *)(a1 + 336) + v107), (int)v221);
      else
        vDSP_maxv(v112, v110, v113, (int)v221);
      ++v108;
      v107 += 8;
      v106 += 4;
    }
    while (v100 != v108);
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v117 = *(_QWORD *)(a1 + 360);
    v99 = v213;
    do
    {
      v118 = *(float *)(v117 + 4 * v114);
      if (v118 > v109)
      {
        v109 = *(float *)(v117 + 4 * v114);
        v116 = v114;
      }
      if (v118 > v19)
      {
        *(float *)(*(_QWORD *)(a1 + 408) + 4 * v115) = v118;
        *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v115) = v114;
        *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v115) = v115;
        ++v115;
      }
      ++v114;
    }
    while (v100 != v114);
    if (!v115)
      goto LABEL_221;
    vDSP_vsorti(*(const float **)(a1 + 408), *(vDSP_Length **)(a1 + 432), 0, v115, -1);
    v216 = v17;
    if (v115 >= v207)
      v119 = v207;
    else
      v119 = v115;
    if ((int)v207 > 0)
      v115 = v119;
    if (!v115)
    {
      v121 = 0;
      goto LABEL_233;
    }
    v120 = 0;
    v121 = 0;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 456) + 4 * v120))
    {
      ++v120;
LABEL_218:
      if (v120 == v115)
        goto LABEL_233;
    }
    v122 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v120));
    if (*(_BYTE *)(a1 + 307))
      v123 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v120));
    else
      v123 = 4 * v122;
    if (*(_BYTE *)(a1 + 307))
      v124 = v121;
    else
      v124 = 4 * v121;
    if (*(_BYTE *)(a1 + 307))
      v125 = 1;
    else
      v125 = (int)v221;
    v126 = (_OWORD *)(v224 + 4 * v123);
    v127 = v233;
    v128 = (_OWORD *)((char *)v223 + 4 * v124);
    if (v217 == 1 && v233 == 1)
    {
      *v128 = *v126;
    }
    else
    {
      v129 = 4 * v233;
      v130 = v126;
      v131 = 4;
      do
      {
        *(_DWORD *)v128 = *v130;
        v130 = (_DWORD *)((char *)v130 + v129);
        v128 = (_OWORD *)((char *)v128 + v101);
        --v131;
      }
      while (v131);
      v127 = v233;
    }
    if ((int)v221 >= 1)
    {
      v132 = v125 * v121;
      v133 = (_DWORD *)(v216 + 4 * v125 * v122);
      v134 = &v220[4 * v132];
      v135 = 4 * v127;
      v136 = v221;
      do
      {
        *(_DWORD *)v134 = *v133;
        v133 = (_DWORD *)((char *)v133 + v135);
        v134 += v101;
        --v136;
      }
      while (v136);
    }
    v222[v121++] = (float)v122;
    if (v121 != v218)
    {
      if (*(_BYTE *)(a1 + 292))
        v137 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v122);
      else
        v137 = 0;
      __src = 0uLL;
      v266 = 0;
      v230 = v126;
      if (!v262)
        std::__throw_bad_function_call[abi:ne180100]();
      v138 = ((float (*)(uint64_t (***)(), _OWORD **))(*v262)[6])(v262, &v230);
      std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(v138, v139, v140, v141, (uint64_t)&__src, (uint64_t)v271);
      v142 = ++v120;
      if (v120 < v115)
      {
        do
        {
          if (!*(_DWORD *)(*(_QWORD *)(a1 + 456) + 4 * v142))
          {
            v143 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v142));
            v144 = *(_BYTE *)(a1 + 292) ? *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v143) : 0;
            if (v137 == v144)
            {
              if (!*(_BYTE *)(a1 + 307))
                v143 *= 4;
              v230 = 0;
              v231 = 0;
              v232 = 0;
              v227[0] = v224 + 4 * v143;
              if (!v262)
                std::__throw_bad_function_call[abi:ne180100]();
              v145 = ((float (*)(uint64_t (***)(), _QWORD *))(*v262)[6])(v262, v227);
              std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(v145, v146, v147, v148, (uint64_t)&v230, (uint64_t)v271);
              v149 = vmaxnmq_f64(vcvtq_f64_f32(vsub_f32(vminnm_f32(v266, v232), vmaxnm_f32(*(float32x2_t *)((char *)&__src + 8), v231))), (float64x2_t)0);
              *(float *)v149.f64 = vmulq_laneq_f64(v149, v149, 1).f64[0];
              *(float *)v149.f64 = *(float *)v149.f64
                                 / ((float)((float)((float)(*(float *)&v230 * *((float *)&v230 + 1))
                                                  + (float)(*(float *)&__src * *((float *)&__src + 1)))
                                          - *(float *)v149.f64)
                                  + 0.0000001);
              if (v18 < *(float *)v149.f64)
                *(_DWORD *)(*(_QWORD *)(a1 + 456) + 4 * v142) = 1;
            }
          }
          ++v142;
        }
        while (v115 != v142);
      }
      goto LABEL_218;
    }
    v121 = v218;
LABEL_233:
    v79 = v215;
    *v215 = (float)v121;
    bzero(*(void **)(a1 + 456), 4 * v211);
    v17 = v216;
    v155 = v208;
    v99 = v213;
LABEL_234:
    ++v99;
  }
  while (v99 != v155);
LABEL_235:
  v160 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)(a1 + 320) != v160)
  {
    v161 = 0;
    v162 = v206;
    do
    {
      v163 = *(_DWORD *)(v160 + 4 * v161);
      v164 = v161 + 2;
      if (v161 + 2 < ((char *)a4[1] - (char *)*a4) >> 4
        && (v165 = &(*a4)[2 * v164], *v165)
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v165 + 32))(*v165))
      {
        v171 = *(_QWORD *)(*v165 + 160);
        v172 = *(std::__shared_weak_count **)(*v165 + 168);
        if (v172)
        {
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
          v166 = *(_QWORD *)(v171 + 24);
          do
            v175 = __ldaxr(v173);
          while (__stlxr(v175 - 1, v173));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        else
        {
          v166 = *(_QWORD *)(v171 + 24);
        }
      }
      else
      {
        v166 = MEMORY[0x18];
      }
      if (v162 < (uint64_t)(a3[1] - *a3) >> 4
        && (v167 = (_QWORD *)(*a3 + 16 * v162), *v167)
        && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v167 + 32))(*v167))
      {
        v176 = *(_QWORD *)(*v167 + 160);
        v177 = *(std::__shared_weak_count **)(*v167 + 168);
        if (v177)
        {
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldxr(v178);
          while (__stxr(v179 + 1, v178));
          v168 = *(_QWORD *)(v176 + 24);
          do
            v180 = __ldaxr(v178);
          while (__stlxr(v180 - 1, v178));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
        else
        {
          v168 = *(_QWORD *)(v176 + 24);
        }
      }
      else
      {
        v168 = MEMORY[0x18];
      }
      if (!v166 || !v168)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: inline_gather_axes requires one additional input and output for each axis specified.");
      v169 = 2 * v164;
      Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[v169]);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v230, (const Espresso::layer_shape *)&__src, 0);
      if (v268)
      {
        v269 = v268;
        operator delete(v268);
      }
      v170 = v232.i32[1];
      v227[0] = __PAIR64__(v210, v209);
      v227[1] = 0;
      v228 = 0;
      v229 = 2;
      Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[v169]);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v225, (const Espresso::layer_shape *)&__src, 0);
      Espresso::layer_nd_shape::strides_vector(&v226, (uint64_t)v225);
      if (v268)
      {
        v269 = v268;
        operator delete(v268);
      }
      if (v226.__begin_)
      {
        v226.__end_ = v226.__begin_;
        operator delete(v226.__begin_);
      }
      ++v162;
      ++v161;
      v160 = *(_QWORD *)(a1 + 312);
    }
    while (v161 < (*(_QWORD *)(a1 + 320) - v160) >> 2);
  }
  v181 = v262;
  if (v262 == &v259)
  {
    v182 = 4;
    v181 = &v259;
LABEL_275:
    (*v181)[v182]();
  }
  else if (v262)
  {
    v182 = 5;
    goto LABEL_275;
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  v183 = v236;
  if (v236)
  {
    v184 = (unint64_t *)&v236->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v256;
  if (v256)
  {
    v187 = (unint64_t *)&v256->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v258;
  if (v258)
  {
    v190 = (unint64_t *)&v258->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  result = v271;
  if (v271 == v270)
  {
    v193 = 4;
    result = v270;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v193))();
  }
  else if (v271)
  {
    v193 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v193))();
  }
  return result;
}

void sub_1917F4428(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  v3 = *(_QWORD **)(v1 - 136);
  if (v3 == (_QWORD *)(v1 - 160))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 160);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::swap(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1917F47B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  _DWORD v7[4];

  *(float *)v7 = a1;
  *(float *)&v7[1] = a2;
  *(float *)&v7[2] = a3;
  *(float *)&v7[3] = a4;
  if (!a6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a6 + 48))(a6, v7);
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1EA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1EA0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(float **)a2;
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::target_type()
{
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB1E48;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB1E48;
}

float std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()@<S0>(float *a1@<X1>, float *a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = vabds_f32(v4, *a1);
  a2[1] = vabds_f32(v5, v3);
  a2[2] = fminf(v2, v4);
  a2[3] = fminf(v3, v5);
  result = fmaxf(v2, v4);
  a2[4] = result;
  a2[5] = fmaxf(v3, v5);
  return result;
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target_type()
{
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB1DF0;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB1DF0;
}

float32x4_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float32x4_t v2;
  float32x2_t v3;
  float32x4_t v4;
  __int128 v5;
  float32x4_t result;

  v2.i64[0] = *(_QWORD *)a1;
  v2.i64[1] = *(_QWORD *)a1;
  v3 = vcvt_f32_f64(vmaxnmq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 8)), (float64x2_t)0));
  *(float32x2_t *)v4.f32 = vmul_f32(v3, (float32x2_t)0x3F0000003F000000);
  v4.i64[1] = v4.i64[0];
  *(float32x2_t *)a2 = v3;
  *(_QWORD *)&v5 = vsubq_f32(v2, v4).u64[0];
  result = vaddq_f32(v2, v4);
  *((_QWORD *)&v5 + 1) = result.i64[1];
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target_type()
{
}

void Espresso::scatter_nd_kernel_cpu::~scatter_nd_kernel_cpu(Espresso::scatter_nd_kernel_cpu *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D8C210;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D8C210;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::scatter_nd_kernel_cpu::__launch(uint64_t a1, int a2, _QWORD **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD **v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::vector<int>::size_type v22;
  uint64_t v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int *v32;
  vDSP_Length v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t i;
  char *v38;
  int v39;
  uint64_t v40;
  int *begin;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  float v49;
  uint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  float *v88;
  float *v89;
  float *v90;
  float *v91;
  float *v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int *v102;
  float *v103;
  float *v104;
  float *v105;
  float *v106;
  float *v107;
  float *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  std::vector<int>::value_type v129;
  std::vector<int> __x;
  uint64_t v131;
  std::__shared_weak_count *v132;
  _DWORD v133[5];
  int __n;
  std::vector<int> __n_4;
  void *__p;
  void *v137;
  unsigned int v138[5];
  unsigned int v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;

  if ((char *)a4[1] - (char *)*a4 != 48)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel_cpu: three inputs required.");
  Espresso::scatter_nd_kernel_cpu::check_input_shapes((Espresso::scatter_nd_kernel_cpu *)a1, a4);
  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v65 = *v7;
    v9 = *(_QWORD *)(*v7 + 160);
    v66 = *(std::__shared_weak_count **)(v65 + 168);
    v144 = v9;
    v145 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(p_shared_owners);
      while (__stxr(v68 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v144 = 0;
    v145 = 0;
  }
  v10 = *a4;
  v11 = (*a4)[2];
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v69 = v10[2];
    v71 = *(_QWORD *)(v69 + 160);
    v70 = *(std::__shared_weak_count **)(v69 + 168);
    v127 = v71;
    v142 = v71;
    v143 = v70;
    if (v70)
    {
      v72 = (unint64_t *)&v70->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
  }
  else
  {
    v127 = 0;
    v142 = 0;
    v143 = 0;
  }
  v12 = *a4;
  v13 = (*a4)[4];
  if (v13 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
  {
    v74 = v12[4];
    v76 = *(_QWORD *)(v74 + 160);
    v75 = *(std::__shared_weak_count **)(v74 + 168);
    v128 = v76;
    v140 = v76;
    v141 = v75;
    if (v75)
    {
      v77 = (unint64_t *)&v75->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
  }
  else
  {
    v128 = 0;
    v140 = 0;
    v141 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&__n_4, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v138, (const Espresso::layer_shape *)&__n_4, 0);
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&__n_4, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v133, (const Espresso::layer_shape *)&__n_4, 0);
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  v14 = v139;
  v16 = a3;
  v15 = *a3;
  if (v16[1] == v15 || !*v15 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15))
  {
    v17 = 0;
    v18 = 0;
    v131 = 0;
    v132 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(*v15 + 160);
    v17 = *(std::__shared_weak_count **)(*v15 + 168);
    v131 = v18;
    v132 = v17;
    if (v17)
    {
      v109 = (unint64_t *)&v17->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
  }
  v19 = 12;
  v20 = *(int *)(v18 + 8);
  do
  {
    v20 *= *(int *)(v18 + v19);
    v19 += 4;
  }
  while (v19 != 24);
  memcpy(*(void **)(v18 + 24), *(const void **)(v9 + 24), 4 * v20);
  v22 = __n;
  v23 = __n;
  v24 = 1;
  if (__n >= 1)
  {
    v25 = v133;
    v26 = __n;
    do
    {
      v27 = *v25++;
      v24 *= v27;
      --v26;
    }
    while (v26);
  }
  v28 = *(_DWORD *)(a1 + 280);
  v122 = v17;
  if (!v28)
  {
    v51 = *(_DWORD *)(a1 + 284);
    v52 = v14 & (v51 >> 31);
    v53 = __OFADD__(v52, v51);
    v54 = v52 + v51;
    if (v54 < 0 != v53)
      v55 = v139;
    else
      v55 = v54;
    v56 = 1;
    if ((int)v55 >= 1)
    {
      v57 = (int *)v138;
      do
      {
        v58 = *v57++;
        v56 *= v58;
        --v55;
      }
      while (v55);
    }
    if (v54 < 0)
      v59 = -1;
    else
      v59 = v54;
    v60 = v59 + 1;
    if (v60 >= (int)v139)
    {
      v63 = 1;
    }
    else
    {
      v61 = v139 - (unint64_t)v60;
      v62 = (int *)&v138[v60];
      v63 = 1;
      do
      {
        v64 = *v62++;
        v63 *= v64;
        --v61;
      }
      while (v61);
    }
    if (v56 >= 1)
    {
      v79 = 0;
      v80 = 0;
      v126 = v138[v54];
      v81 = 4 * v24;
      v124 = v24;
      v123 = v56;
      do
      {
        if (v24 >= 1)
        {
          v82 = v18;
          v83 = 0;
          v84 = v80;
          v125 = v79;
          v85 = v126 * v79;
          v86 = 4 * v80;
          do
          {
            LODWORD(v21) = llroundf(*(float *)(*(_QWORD *)(v127 + 24) + v83));
            if ((v21 & 0x80000000) != 0
              && (!*(_BYTE *)(a1 + 293) || (v21 = (v126 + v21), (v21 & 0x80000000) != 0))
              || (int)v21 >= v126)
            {
              if (*(_BYTE *)(a1 + 292))
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TF_SCATTER mode, Invalid index %d into axis of size %d\n", v21, v126);
              LODWORD(v21) = 0;
            }
            v87 = (v21 + v85) * v63;
            switch(*(_DWORD *)(a1 + 288))
            {
              case 0:
                memcpy((void *)(*(_QWORD *)(v82 + 24) + 4 * v87), (const void *)(*(_QWORD *)(v128 + 24) + v86), 4 * v63);
                break;
              case 1:
                v91 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vadd(v91, 1, (const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v91, 1, v63);
                break;
              case 2:
                v89 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vsub((const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v89, 1, v89, 1, v63);
                break;
              case 3:
                v90 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vmul(v90, 1, (const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v90, 1, v63);
                break;
              case 4:
                v88 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vdiv((const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v88, 1, v88, 1, v63);
                break;
              case 5:
                v92 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vmax(v92, 1, (const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v92, 1, v63);
                break;
              case 6:
                v93 = (float *)(*(_QWORD *)(v82 + 24) + 4 * v87);
                vDSP_vmin(v93, 1, (const float *)(*(_QWORD *)(v128 + 24) + v86), 1, v93, 1, v63);
                break;
              default:
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
            }
            v84 += v63;
            v86 += 4 * v63;
            v83 += 4;
          }
          while (v81 != v83);
          v80 = v84;
          v18 = v82;
          v24 = v124;
          v56 = v123;
          v79 = v125;
        }
        ++v79;
      }
      while (v79 != v56);
    }
    goto LABEL_138;
  }
  if (v28 == 2)
  {
    v35 = (v14 & (*(int *)(a1 + 284) >> 31)) + *(_DWORD *)(a1 + 284);
    v36 = v138[v35];
    LODWORD(__x.__begin_) = 0;
    std::vector<int>::vector(&__n_4, __n, (const std::vector<int>::value_type *)&__x);
    v129 = 0;
    std::vector<int>::vector(&__x, v22, &v129);
    if (v24 < 1)
    {
      begin = __x.__begin_;
      if (!__x.__begin_)
        goto LABEL_136;
    }
    else
    {
      for (i = 0; i != v24; ++i)
      {
        v38 = (char *)__n_4.__begin_;
        v39 = i;
        v40 = v23 + 1;
        if ((int)v23 >= 2)
        {
          do
          {
            *(_DWORD *)&v38[4 * (v40 - 2)] = v39 % v133[(v40 - 2)];
            v39 /= (int)v133[(v40-- - 2)];
          }
          while (v40 > 2);
        }
        *(_DWORD *)v38 = v39;
        LODWORD(v22) = llroundf(*(float *)(*(_QWORD *)(v127 + 24) + 4 * i));
        if ((v22 & 0x80000000) != 0
          && (!*(_BYTE *)(a1 + 293) || (v22 = (v36 + v22), (v22 & 0x80000000) != 0))
          || (int)v22 >= (int)v36)
        {
          if (*(_BYTE *)(a1 + 292))
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid index %d into axis of size %d\n", v22, v36);
          v22 = 0;
        }
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__x, v38, (uint64_t)__n_4.__end_, ((char *)__n_4.__end_ - v38) >> 2);
        begin = __x.__begin_;
        __x.__begin_[v35] = v22;
        v42 = 0;
        if ((_DWORD)v23)
        {
          v43 = *(int **)(a1 + 296);
          v44 = begin;
          v45 = v23;
          do
          {
            v47 = *v44++;
            v46 = v47;
            v48 = *v43++;
            v42 += v48 * v46;
            --v45;
          }
          while (v45);
        }
        switch(*(_DWORD *)(a1 + 288))
        {
          case 0:
            v49 = *(float *)(*(_QWORD *)(v128 + 24) + 4 * i);
            v50 = *(_QWORD *)(v18 + 24);
            break;
          case 1:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = *(float *)(*(_QWORD *)(v128 + 24) + 4 * i) + *(float *)(v50 + 4 * v42);
            break;
          case 2:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = *(float *)(v50 + 4 * v42) - *(float *)(*(_QWORD *)(v128 + 24) + 4 * i);
            break;
          case 3:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = *(float *)(*(_QWORD *)(v128 + 24) + 4 * i) * *(float *)(v50 + 4 * v42);
            break;
          case 4:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = *(float *)(v50 + 4 * v42) / *(float *)(*(_QWORD *)(v128 + 24) + 4 * i);
            break;
          case 5:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = fmaxf(*(float *)(v50 + 4 * v42), *(float *)(*(_QWORD *)(v128 + 24) + 4 * i));
            break;
          case 6:
            v50 = *(_QWORD *)(v18 + 24);
            v49 = fminf(*(float *)(v50 + 4 * v42), *(float *)(*(_QWORD *)(v128 + 24) + 4 * i));
            break;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
        }
        *(float *)(v50 + 4 * v42) = v49;
      }
    }
    __x.__end_ = begin;
    operator delete(begin);
LABEL_136:
    if (__n_4.__begin_)
    {
      __n_4.__end_ = __n_4.__begin_;
      operator delete(__n_4.__begin_);
    }
    goto LABEL_138;
  }
  if (v28 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: Invalid MODE");
  v29 = (int)v133[__n - 1];
  v30 = v29 & ~((int)v29 >> 31);
  if (v30 >= (int)v139)
  {
    v33 = 1;
  }
  else
  {
    v31 = v139 - (unint64_t)v30;
    v32 = (int *)&v138[v30];
    LODWORD(v33) = 1;
    do
    {
      v34 = *v32++;
      v33 = v34 * (uint64_t)(int)v33;
      --v31;
    }
    while (v31);
  }
  if (v24 >= 1)
  {
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 4 * v133[__n - 1];
    while ((int)v29 < 1)
    {
      v100 = 0;
LABEL_120:
      switch(*(_DWORD *)(a1 + 288))
      {
        case 0:
          memcpy((void *)(*(_QWORD *)(v18 + 24) + 4 * v100), (const void *)(*(_QWORD *)(v128 + 24) + 4 * v95), 4 * v33);
          break;
        case 1:
          v106 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vadd(v106, 1, (const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v106, 1, v33);
          break;
        case 2:
          v104 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vsub((const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v104, 1, v104, 1, v33);
          break;
        case 3:
          v105 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vmul(v105, 1, (const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v105, 1, v33);
          break;
        case 4:
          v103 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vdiv((const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v103, 1, v103, 1, v33);
          break;
        case 5:
          v107 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vmax(v107, 1, (const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v107, 1, v33);
          break;
        case 6:
          v108 = (float *)(*(_QWORD *)(v18 + 24) + 4 * v100);
          vDSP_vmin(v108, 1, (const float *)(*(_QWORD *)(v128 + 24) + 4 * v95), 1, v108, 1, v33);
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
      }
      v95 += v33;
      v96 += v29;
      v94 += 4 * v29;
      if (v96 >= v24)
        goto LABEL_138;
    }
    v98 = 0;
    v99 = 0;
    v100 = 0;
    while (1)
    {
      LODWORD(v21) = llroundf(*(float *)(*(_QWORD *)(v127 + 24) + v94 + v98));
      if ((v21 & 0x80000000) != 0)
      {
        if (!*(_BYTE *)(a1 + 293))
        {
          v102 = &v138[v99];
LABEL_115:
          if (*(_BYTE *)(a1 + 292))
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TF_SCATTER_ND mode, Invalid index %d into axis of size %d\n", v21, *v102);
          v21 = 0;
          goto LABEL_117;
        }
        v101 = v138[v98 / 4];
        v21 = (v101 + v21);
      }
      else
      {
        v101 = v138[v98 / 4];
      }
      v102 = &v138[v98 / 4];
      if ((v21 & 0x80000000) != 0 || (int)v21 >= v101)
        goto LABEL_115;
LABEL_117:
      v100 += v21 * *(_DWORD *)(*(_QWORD *)(a1 + 296) + v98);
      ++v99;
      v98 += 4;
      if (v97 == v98)
        goto LABEL_120;
    }
  }
LABEL_138:
  if (v122)
  {
    v111 = (unint64_t *)&v122->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v113 = v141;
  if (v141)
  {
    v114 = (unint64_t *)&v141->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v143;
  if (v143)
  {
    v117 = (unint64_t *)&v143->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v145;
  if (v145)
  {
    v120 = (unint64_t *)&v145->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
}

void sub_1917F5648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;

  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 104);
  _Unwind_Resume(a1);
}

void Espresso::scatter_nd_kernel_cpu::on_resized(Espresso::scatter_nd_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  _QWORD *v4;
  void *v5;
  char v6[40];
  void *__p;
  void *v8;
  _BYTE v9[24];
  std::vector<int> v10;

  Espresso::abstract_blob_container::shape(v6, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v9, (const Espresso::layer_shape *)v6, 0);
  Espresso::layer_nd_shape::strides_vector(&v10, (uint64_t)v9);
  v4 = (_QWORD *)((char *)this + 296);
  v5 = (void *)*((_QWORD *)this + 37);
  if (v5)
  {
    *((_QWORD *)this + 38) = v5;
    operator delete(v5);
    *v4 = 0;
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 39) = 0;
  }
  *(_OWORD *)v4 = *(_OWORD *)&v10.__begin_;
  *((_QWORD *)this + 39) = v10.__end_cap_.__value_;
  memset(&v10, 0, sizeof(v10));
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1917F5790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::scatter_nd_kernel_cpu::check_input_shapes(Espresso::scatter_nd_kernel_cpu *this, uint64_t **a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  unint64_t v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t i;
  unint64_t v43;
  int v44;
  int v45;
  _DWORD v46[5];
  int v47;
  _DWORD v48[5];
  signed int v49;
  char v50[40];
  void *__p;
  void *v52;
  _DWORD v53[5];
  signed int v54;

  Espresso::abstract_blob_container::shape(v50, **a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v53, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape(v50, (*a2)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape(v50, (*a2)[4]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  v4 = *((_DWORD *)this + 70);
  switch(v4)
  {
    case 0:
      v20 = *((_DWORD *)this + 71);
      if ((v20 & 0x80000000) != 0 && (v20 += v54, (v20 & 0x80000000) != 0) || v54 <= (unint64_t)v20)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER mode, Invalid value of the argument 'axis'.");
      v21 = v49;
      v22 = v54 + (uint64_t)v49 - 1;
      if (v22 == v47)
      {
        if (v20)
        {
          v23 = v53;
          v24 = v46;
          v25 = v20;
          while (1)
          {
            v27 = *v24++;
            v26 = v27;
            v28 = *v23++;
            if (v26 != v28)
              break;
            if (!--v25)
              goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          v29 = v49 + (unint64_t)v20;
          if (v29 <= v20)
          {
LABEL_36:
            if (v29 >= v22)
              return;
            v35 = &v53[v20 + 1];
            v36 = ~(unint64_t)v20 + v54;
            v37 = &v46[v29];
            while (1)
            {
              v39 = *v37++;
              v38 = v39;
              v40 = *v35++;
              if (v38 != v40)
                break;
              if (!--v36)
                return;
            }
          }
          else
          {
            v30 = &v46[v20];
            v31 = v48;
            while (1)
            {
              v33 = *v30++;
              v32 = v33;
              v34 = *v31++;
              if (v32 != v34)
                break;
              if (!--v21)
                goto LABEL_36;
            }
          }
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER mode, invalid shape of UPDATES tensor.");
    case 2:
      v41 = *((_DWORD *)this + 71);
      if (v41 < 0 && (v41 += v54, v41 < 0) || v54 <= (unint64_t)v41)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid value of the argument 'axis'.");
      if (v54 != v47 || v49 != v54)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, inputs should have the same rank.");
      if (v54)
      {
        for (i = 0; i != v54; ++i)
        {
          if (v41 != i && v53[i] != v48[i])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid input shapes. For REF and INDICES tensor, shapes can only differ in axis dimension.");
        }
        if (v48[0] != v46[0])
          goto LABEL_65;
        v43 = 0;
        do
        {
          if (v54 - 1 == v43)
            return;
          v44 = v48[v43 + 1];
          v45 = v46[++v43];
        }
        while (v44 == v45);
        if (v43 < v54)
LABEL_65:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid input shapes. INDICES and UPDATES tensor should have the same shape.");
      }
      break;
    case 1:
      v5 = v49;
      v6 = v49 - 1;
      v7 = (int)v48[v6];
      if (v54 < v7)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, invalid indices. indices.shape[-1] <= params.rank");
      if (v49 <= 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, rank of indices tensor needs to be >= 2.");
      v8 = v6 - v7 + v54;
      if (v8 != v47)
        goto LABEL_23;
      if (v49 != 1)
      {
        v9 = v48;
        v10 = v46;
        v11 = v49 - 1;
        while (1)
        {
          v13 = *v10++;
          v12 = v13;
          v14 = *v9++;
          if (v12 != v14)
            break;
          if (!--v11)
            goto LABEL_17;
        }
LABEL_23:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, invalid shape of UPDATES tensor.");
      }
LABEL_17:
      if (v6 < v8)
      {
        if (v46[v6] != v53[v7])
          goto LABEL_23;
        v15 = ~v7 + v54;
        v16 = &v53[v7 + 1];
        do
        {
          if (!v15)
            return;
          v17 = v5;
          v18 = v46[v5];
          v19 = *v16++;
          ++v5;
          --v15;
        }
        while (v18 == v19);
        if (v17 < v8)
          goto LABEL_23;
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: Invalid MODE");
  }
}

void sub_1917F5B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::nonzero_kernel_cpu::~nonzero_kernel_cpu(Espresso::nonzero_kernel_cpu *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D83B00;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D83B00;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::nonzero_kernel_cpu::__launch(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  char *v55;
  std::__shared_weak_count *v56;
  void *__p;
  void *v58;
  _BYTE v59[4];
  _BYTE v60[20];
  int v61;
  _BYTE v62[24];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v48 = *(std::__shared_weak_count **)(*v7 + 168);
    v66 = v9;
    v67 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v66 = 0;
    v67 = 0;
  }
  v10 = 0;
  v11 = a1 + 36;
  v12 = *(int *)(v9 + 8);
  v13 = v12;
  do
  {
    v13 *= *(int *)(v9 + 12 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  if (v13 != (uint64_t)(a1[37] - a1[36]) >> 2)
  {
    for (i = 0; i != 12; i += 4)
      v12 *= *(int *)(v9 + 12 + i);
    *(_DWORD *)v62 = -1082130432;
    std::vector<float>::resize((char **)a1 + 36, v12, v62);
    v12 = *(int *)(v9 + 8);
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v18 = 0;
    v19 = v12;
    do
    {
      v19 *= *(int *)(v9 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    if (v19 <= v15)
      break;
    if (*(float *)(*(_QWORD *)(v9 + 24) + 4 * v15) != 0.0)
    {
      ++v16;
      *(float *)(*v11 + 4 * v17++) = (float)(int)v15;
    }
    ++v15;
  }
  v65 = 0;
  v64 = 0u;
  v63 = 0u;
  *(_OWORD *)v62 = xmmword_191A8AA80;
  *(_QWORD *)&v62[16] = 0xFFFFFFFF00000001;
  Espresso::abstract_blob_container::shape((char *)&v55, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v60, (const Espresso::layer_shape *)&v55, 0);
  v20 = v61;
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v55, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v60, (const Espresso::layer_shape *)&v55, 0);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  *(_DWORD *)v62 = v20;
  *(_DWORD *)&v62[4] = v16;
  *(_OWORD *)&v62[8] = xmmword_191A937F0;
  v21 = operator new(0x98uLL);
  v21[1] = 0;
  v22 = v21 + 1;
  v21[2] = 0;
  *v21 = &off_1E2DBE998;
  *((_OWORD *)v21 + 4) = 0u;
  *((_OWORD *)v21 + 5) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  *((_OWORD *)v21 + 6) = 0u;
  *((_OWORD *)v21 + 7) = 0u;
  *((_OWORD *)v21 + 8) = 0u;
  v21[17] = 0;
  v21[18] = 0;
  *((_DWORD *)v21 + 12) = 1065353216;
  v21[7] = 0x1FFFFFFFFLL;
  v21[12] = 0;
  v21[13] = 0;
  v21[8] = 0;
  v21[9] = 0;
  *((_BYTE *)v21 + 88) = 0;
  v21[10] = 0;
  v21[3] = &off_1E2DA0BF0;
  v21[15] = 0;
  v21[16] = 0;
  *((_BYTE *)v21 + 144) = 0;
  v55 = (char *)(v21 + 3);
  v56 = (std::__shared_weak_count *)v21;
  *((_BYTE *)v21 + 144) = *(_BYTE *)(a1[1] + 126);
  v23 = **a3;
  v53 = (char *)(v21 + 3);
  v54 = (std::__shared_weak_count *)v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  (*(void (**)(uint64_t, _BYTE *, char **))(*(_QWORD *)v23 + 16))(v23, v62, &v53);
  v25 = v54;
  if (v54)
  {
    v26 = (unint64_t *)&v54->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v29 = a3;
  v28 = *a3;
  if (v29[1] == v28 || !*v28 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v28 + 32))(*v28))
  {
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(*v28 + 160);
    v31 = *(std::__shared_weak_count **)(*v28 + 168);
    if (v31)
    {
      v51 = (unint64_t *)&v31->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
  }
  if (v16 >= 1)
  {
    v32 = 0;
    v33 = *v11;
    v34 = *(_QWORD *)(v30 + 24);
    v35 = v34 - 4;
    do
    {
      v36 = (int)*(float *)(v33 + 4 * v32);
      v37 = v20;
      if (v20 >= 2)
      {
        do
        {
          v38 = *(_DWORD *)&v59[4 * v37];
          *(float *)(v35 + 4 * v37) = (float)(v36 % v38);
          v36 /= v38;
        }
        while (v37-- > 2);
      }
      *(float *)(v34 + 4 * v32 * v20) = (float)v36;
      ++v32;
      v35 += 4 * v20;
    }
    while (v32 != v16);
  }
  if (v31)
  {
    v40 = (unint64_t *)&v31->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if ((_QWORD)v64)
  {
    *((_QWORD *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  v45 = v67;
  if (v67)
  {
    v46 = (unint64_t *)&v67->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1917F6064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

void Espresso::nonzero_kernel_cpu::on_resized(Espresso::nonzero_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int v4;
  char v5[40];
  void *__p;
  void *v7;

  Espresso::abstract_blob_container::shape(v5, **a3);
  v4 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v5);
  *((_DWORD *)this + 71) = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
    v4 = *((_DWORD *)this + 71);
  }
  *(_DWORD *)v5 = -1082130432;
  std::vector<float>::resize((char **)this + 36, v4, v5);
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void Espresso::precompiled_segment_kernel_cpu::~precompiled_segment_kernel_cpu(Espresso::precompiled_segment_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::one_hot_kernel_cpu::~one_hot_kernel_cpu(Espresso::one_hot_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::one_hot_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  __n128 v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int *v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  int v47;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  char *v69;
  std::__shared_weak_count *v70;
  char *v71;
  _QWORD v72[2];
  signed int v73;
  char *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  char **v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  unsigned int v81;
  int v82;
  void *__p;
  void *v84;
  __int128 v85;

  *(_QWORD *)&v85 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  v6 = a4[1];
  if ((char *)v6 - (char *)*a4 == 32)
  {
    if (!*(_QWORD *)(*(_QWORD *)a2 + 64))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic one_hot requires interpreter");
    v9 = v7[2];
    if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
    {
      v60 = v7[2];
      v61 = *(_QWORD *)(v60 + 160);
      v62 = *(std::__shared_weak_count **)(v60 + 168);
      v76 = v61;
      v77 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(p_shared_owners);
        while (__stxr(v64 + 1, p_shared_owners));
      }
      if (v61)
      {
        v65 = 0;
        v66 = *(int *)(v61 + 8);
        do
        {
          v66 *= *(int *)(v61 + 12 + v65);
          v65 += 4;
        }
        while (v65 != 12);
        if (v66 != 1)
        {
          Espresso::abstract_blob_container::shape((char *)&v80, (*a4)[2]);
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("one_hot_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v80, DWORD1(v80), DWORD2(v80), HIDWORD(v80), v81);
        }
        *(_DWORD *)(a1 + 280) = (int)**(float **)(v61 + 24);
      }
    }
    else
    {
      v76 = 0;
      v77 = 0;
    }
    v10 = operator new(0x98uLL);
    v10[1] = 0;
    v11 = v10 + 1;
    v10[2] = 0;
    *v10 = &off_1E2DBE998;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    v10[17] = 0;
    v10[18] = 0;
    *((_DWORD *)v10 + 12) = 1065353216;
    v10[7] = 0x1FFFFFFFFLL;
    v10[12] = 0;
    v10[13] = 0;
    v10[8] = 0;
    v10[9] = 0;
    *((_BYTE *)v10 + 88) = 0;
    v10[10] = 0;
    v10[3] = &off_1E2DA0BF0;
    v10[15] = 0;
    v10[16] = 0;
    *((_BYTE *)v10 + 144) = 0;
    v74 = (char *)(v10 + 3);
    v75 = (std::__shared_weak_count *)v10;
    *((_BYTE *)v10 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
    v12 = **a3;
    Espresso::abstract_blob_container::shape((char *)&v80, **a4);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v78 = &v69;
    LOBYTE(v79) = 0;
    v69 = (char *)operator new(0x40uLL);
    v70 = (std::__shared_weak_count *)v69;
    v71 = v69 + 64;
    v70 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v71, &v80, &v85, (uint64_t)v69);
    Espresso::generic_one_hot_kernel::top_shapes_for_bottom_shapes(a1, (uint64_t *)&v69, v72);
    v13 = v72[0];
    v67 = (char *)(v10 + 3);
    v68 = (std::__shared_weak_count *)v10;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v12 + 16))(v12, v13, &v67);
    v15 = v68;
    if (v68)
    {
      v16 = (unint64_t *)&v68->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v78 = (char **)v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
    v78 = &v69;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
    if (__p)
    {
      v84 = __p;
      operator delete(__p);
    }
    v18 = v75;
    if (v75)
    {
      v19 = (unint64_t *)&v75->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v77;
    if (v77)
    {
      v22 = (unint64_t *)&v77->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v7 = *a4;
    v6 = a4[1];
  }
  if (v6 == v7 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v24 = 0;
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v54 = *v7;
    v24 = *(char **)(*v7 + 160);
    v55 = *(unint64_t **)(v54 + 168);
    v69 = v24;
    v70 = (std::__shared_weak_count *)v55;
    if (v55)
    {
      v56 = v55 + 1;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
  v25 = *a3;
  if (a3[1] == *a3 || !*v25 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v25 + 32))(*v25))
  {
    v26 = 0;
    v27 = 0;
    v78 = 0;
    v79 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(*v25 + 160);
    v26 = *(std::__shared_weak_count **)(*v25 + 168);
    v78 = (char **)v27;
    v79 = v26;
    if (v26)
    {
      v58 = (unint64_t *)&v26->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
  }
  v28 = 0;
  v29 = *(_DWORD **)(v27 + 24);
  v30 = *(int *)(v27 + 8);
  do
  {
    v30 *= *(int *)(v27 + 12 + v28);
    v28 += 4;
  }
  while (v28 != 12);
  for (; v30; --v30)
    *v29++ = *(_DWORD *)(a1 + 288);
  v31 = *(_DWORD *)(a1 + 292);
  Espresso::abstract_blob_container::shape((char *)&v80, **a3);
  if (v81 == 1)
    v32 = 4;
  else
    v32 = 5;
  if (v82 == -1)
    v33 = v32;
  else
    v33 = v82;
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v80, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v72, (const Espresso::layer_shape *)&v80, 0);
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  if ((v33 & (v31 >> 31)) + v31 < 0)
    v35 = -1;
  else
    v35 = (v33 & (v31 >> 31)) + v31;
  v36 = v35 + 1;
  if ((int)v36 >= v73)
  {
    v39 = 1;
  }
  else
  {
    v37 = v73 - (unint64_t)v36;
    v38 = (int *)v72 + v36;
    v39 = 1;
    do
    {
      v40 = *v38++;
      v39 *= v40;
      --v37;
    }
    while (v37);
  }
  v41 = 0;
  v42 = *(_DWORD *)(a1 + 280);
  v43 = *((int *)v24 + 2);
  v34.n128_u64[0] = 0.5;
  while (1)
  {
    v44 = 0;
    v45 = v43;
    do
    {
      v45 *= *(int *)&v24[v44 + 12];
      v44 += 4;
    }
    while (v44 != 12);
    if (v45 <= v41)
      break;
    v46 = *(float *)(*((_QWORD *)v24 + 3) + 4 * v41);
    v47 = (int)(v46 + 0.5);
    if (v46 >= 0.0 && v42 > v47)
      *(_DWORD *)(*(_QWORD *)(v27 + 24) + 4 * ((int)v41 % v39 + (v47 + (int)v41 / v39 * v42) * v39)) = *(_DWORD *)(a1 + 284);
    ++v41;
  }
  if (v26)
  {
    v49 = (unint64_t *)&v26->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v34);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v51 = v70;
  if (v70)
  {
    v52 = (unint64_t *)&v70->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v34);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1917F6880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void Espresso::cumsum_kernel_cpu::~cumsum_kernel_cpu(Espresso::cumsum_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cumsum_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _DWORD v58[5];
  int v59;
  _DWORD v60[4];
  unsigned int v61;
  int v62;
  void *__p;
  void *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v7 = *a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v49 = *(std::__shared_weak_count **)(*v7 + 168);
    v69 = v8;
    v70 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
    }
  }
  v9 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11
    && (v10 = v9[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v54 = v9[2];
    v11 = *(_QWORD *)(v54 + 160);
    v55 = *(std::__shared_weak_count **)(v54 + 168);
    v67 = v11;
    v68 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
  else
  {
    v11 = 0;
    v67 = 0;
    v68 = 0;
  }
  v12 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v12
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
  {
    v13 = 0;
    v14 = 0;
    v65 = 0;
    v66 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(*v12 + 160);
    v13 = *(std::__shared_weak_count **)(*v12 + 168);
    v65 = v14;
    v66 = v13;
    if (v13)
    {
      v52 = (unint64_t *)&v13->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
  }
  if (!v11)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cumsum_kernel requires 2 input blobs.");
  v15 = 0;
  v16 = *(int *)(v11 + 8);
  do
  {
    v16 *= *(int *)(v11 + 12 + v15);
    v15 += 4;
  }
  while (v15 != 12);
  if (v16 != 1)
  {
    Espresso::abstract_blob_container::shape((char *)v60, (*a4)[2]);
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("cumsum_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v60[0], v60[1], v60[2], v60[3], v61);
  }
  v17 = (int)**(float **)(v11 + 24);
  if (v17 < 0)
  {
    Espresso::abstract_blob_container::shape((char *)v60, **(_QWORD **)a3);
    v18 = v62;
    if (v61 == 1)
      v19 = 4;
    else
      v19 = 5;
    if (v62 == -1)
      v18 = v19;
    v17 += v18;
    if (__p)
    {
      v64 = __p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)v60, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v58, (const Espresso::layer_shape *)v60, 0);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  v20 = 0;
  v21 = *(int *)(v8 + 8);
  do
  {
    v21 *= *(int *)(v8 + 12 + v20);
    v20 += 4;
  }
  while (v20 != 12);
  v22 = (int)v58[v17];
  if (v17 < 0)
    v23 = -1;
  else
    v23 = v17;
  v24 = v23 + 1;
  if (v23 + 1 >= v59)
  {
    v26 = 1;
  }
  else
  {
    v25 = v59 - (unint64_t)v24;
    v26 = 1;
    v27 = &v58[v24];
    do
    {
      v28 = *v27++;
      v26 *= v28;
      --v25;
    }
    while (v25);
  }
  v29 = *(unsigned __int8 *)(a1 + 281);
  if (*(_BYTE *)(a1 + 281))
    v30 = -v26;
  else
    v30 = v26;
  if (v21 >= v22)
  {
    v31 = 0;
    v32 = v21 / v22;
    if (v21 / v22 <= 1)
      v32 = 1;
    while ((int)v22 < 1)
    {
LABEL_55:
      if (++v31 == v32)
        goto LABEL_56;
    }
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v36 = -1;
    while (1)
    {
      if (v34)
      {
        v35 += v30;
        *(float *)(*(_QWORD *)(v14 + 24) + 4 * v33) = *(float *)(*(_QWORD *)(v14 + 24) + 4 * v36)
                                                      + *(float *)(*(_QWORD *)(v8 + 24) + 4 * v35);
        v36 = v33;
      }
      else
      {
        v37 = (int)v31 / v30;
        v38 = (int)v31 % v30;
        if (v29)
        {
          v37 = (int)v31 / v26;
          v38 += v26 * (v22 - 1);
        }
        v39 = v38 + v37 * v26 * v22;
        v34 = *(unsigned __int8 *)(a1 + 280);
        if (!*(_BYTE *)(a1 + 280))
        {
          *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v39) = *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v39);
          v36 = v39;
          goto LABEL_53;
        }
        v34 = 0;
        v40 = *(_QWORD *)(v14 + 24);
        *(_DWORD *)(v40 + 4 * v39) = 0;
        if ((int)v22 >= 2)
        {
          v36 = v39 + v30;
          *(_DWORD *)(v40 + 4 * (v39 + v30)) = *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v39);
          v34 = 1;
LABEL_53:
          v35 = v39;
        }
      }
      ++v34;
      v33 = v36 + v30;
      if (v34 >= (int)v22)
        goto LABEL_55;
    }
  }
LABEL_56:
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v43 = v68;
  if (v68)
  {
    v44 = (unint64_t *)&v68->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v70;
  if (v70)
  {
    v47 = (unint64_t *)&v70->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1917F6DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void Espresso::sparse_inner_product_kernel_cpu::~sparse_inner_product_kernel_cpu(Espresso::sparse_inner_product_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D9C700;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D9C700;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sparse_inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  float v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  float v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  int v49;
  void *__p;
  void *v51;
  int v52;
  int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(*v7 + 160);
    v43 = *(std::__shared_weak_count **)(*v7 + 168);
    v58 = v8;
    v59 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
  }
  v9 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v9
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v11 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*v9 + 160);
    v10 = *(std::__shared_weak_count **)(*v9 + 168);
    v56 = v11;
    v57 = v10;
    if (v10)
    {
      v46 = (unint64_t *)&v10->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v52, **(_QWORD **)a3);
  Espresso::abstract_blob_container::shape((char *)&v48, **(_QWORD **)a4);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 112))
  {
    v12 = 0;
    v13 = *(int *)(v8 + 8);
    do
    {
      v13 *= *(int *)(v8 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    bzero(*(void **)(v8 + 24), v13);
  }
  v14 = v48;
  v15 = *(unsigned int *)(a1 + 308);
  v16 = *(unsigned int *)(a1 + 304);
  v17 = v52;
  v18 = v53;
  v19 = *(_QWORD *)(v11 + 24);
  v20 = *(_QWORD *)(v8 + 24);
  v21 = *(_DWORD **)(*(_QWORD *)(a1 + 336) + 16);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
  if (*(_BYTE *)(a1 + 384))
  {
    if (v49 == v15)
    {
      if (v52)
      {
        v24 = 0;
        do
        {
          if ((_DWORD)v18)
          {
            v25 = 0;
            LODWORD(v26) = *v21;
            do
            {
              v27 = v25 + 1;
              v28 = v21[v25 + 1];
              if (v28 != (_DWORD)v26)
              {
                v29 = 0.0;
                if (v26 < v28)
                {
                  v26 = (int)v26;
                  do
                  {
                    v29 = v29
                        + (float)(*(float *)(v19 + 4 * (v24 + *(int *)(v22 + 4 * v26) * (uint64_t)(int)v14))
                                * *(float *)(v23 + 4 * v26));
                    ++v26;
                  }
                  while (v26 < (int)v28);
                }
                *(float *)(v20 + 4 * (v24 + v25 * v17)) = v29;
              }
              LODWORD(v26) = v28;
              ++v25;
            }
            while (v27 != v18);
          }
          ++v24;
        }
        while (v24 != v17);
      }
      goto LABEL_39;
    }
    v30 = *(_DWORD *)(a1 + 304);
    v31 = *(_DWORD *)(a1 + 308);
    LODWORD(v16) = v49;
    LODWORD(v15) = v48;
LABEL_63:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &>(v30, v31, v16, v15);
  }
  v30 = v49;
  v31 = v48;
  if (v48 != v16)
    goto LABEL_63;
  if (v53)
  {
    v32 = 0;
    do
    {
      if ((_DWORD)v17)
      {
        v33 = 0;
        LODWORD(v34) = *v21;
        do
        {
          v35 = v33 + 1;
          v36 = v21[v33 + 1];
          if (v36 != (_DWORD)v34)
          {
            v37 = 0.0;
            if (v34 < v36)
            {
              v34 = (int)v34;
              do
              {
                v37 = v37
                    + (float)(*(float *)(v19 + 4 * v32 * v14 + 4 * *(int *)(v22 + 4 * v34)) * *(float *)(v23 + 4 * v34));
                ++v34;
              }
              while (v34 < (int)v36);
            }
            *(float *)(v20 + 4 * (v33 + v32 * v17)) = v37;
          }
          LODWORD(v34) = v36;
          ++v33;
        }
        while (v35 != v17);
      }
      ++v32;
    }
    while (v32 != v18);
  }
LABEL_39:
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v10)
  {
    v38 = (unint64_t *)&v10->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v40 = v59;
  if (v59)
  {
    v41 = (unint64_t *)&v59->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1917F71D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void Espresso::sparse_inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  int v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  const char *v14;
  int v15;
  int v16;
  _BOOL4 v18;
  const char *v19;
  int v20;
  int v21;
  _BOOL4 v23;
  const char *v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  BOOL v51;
  int v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  __int128 v57;
  char *v58;
  std::__shared_weak_count *v59;

  v6 = a3;
  v8 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    if (*((_QWORD *)a3 + 1) != 3)
    {
LABEL_88:
      v6 = *(const char **)a3;
      goto LABEL_89;
    }
    v9 = *(const char **)a3;
  }
  else
  {
    v9 = a3;
    if (v8 != 3)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  v11 = *(unsigned __int16 *)v9;
  v12 = *((unsigned __int8 *)v9 + 2);
  if (v11 != 29539 || v12 != 114)
  {
    v10 = 0;
    if ((v8 & 0x80) == 0)
      goto LABEL_11;
LABEL_14:
    if (*((_QWORD *)a3 + 1) != 3)
    {
LABEL_34:
      if (v10)
        goto LABEL_47;
      goto LABEL_88;
    }
    v14 = *(const char **)a3;
LABEL_16:
    v15 = *(unsigned __int16 *)v14;
    v16 = *((unsigned __int8 *)v14 + 2);
    v18 = v15 == 29539 && v16 == 99 && a5 == 4 * (*(_DWORD *)(a1 + 308) + 2 * *(_DWORD *)(a1 + 312) + 1);
    v10 |= v18;
    if ((v8 & 0x80) == 0)
      goto LABEL_23;
    if (*((_QWORD *)a3 + 1) == 3)
    {
      v19 = *(const char **)a3;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  v10 = a5 == 4 * (*(_DWORD *)(a1 + 304) + 2 * *(_DWORD *)(a1 + 312) + 1);
  if ((v8 & 0x80) != 0)
    goto LABEL_14;
LABEL_11:
  v14 = a3;
  if (v8 == 3)
    goto LABEL_16;
LABEL_23:
  if (v8 != 3)
  {
    if (v10)
      goto LABEL_39;
LABEL_89:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*,unsigned int &,unsigned int &,unsigned int &,unsigned long &,unsigned long>(v6, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 312), a5, 4);
  }
  v19 = a3;
LABEL_29:
  v20 = *(unsigned __int16 *)v19;
  v21 = *((unsigned __int8 *)v19 + 2);
  v23 = v20 == 28515 && v21 == 111 && a5 == 4 * (3 * *(_DWORD *)(a1 + 312));
  if (!(v23 | v10))
  {
    if ((v8 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
  if ((v8 & 0x80) == 0)
  {
LABEL_39:
    v24 = a3;
    if (v8 != 3)
      goto LABEL_47;
    goto LABEL_43;
  }
  if (*((_QWORD *)a3 + 1) != 3)
    goto LABEL_47;
  v24 = *(const char **)a3;
LABEL_43:
  v25 = *(unsigned __int16 *)v24;
  v26 = *((unsigned __int8 *)v24 + 2);
  if (v25 != 28515 || v26 != 111)
  {
LABEL_47:
    v28 = *(unsigned int *)(a1 + 304);
    v29 = *(unsigned int *)(a1 + 312);
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v57, v28 + 1, 1, 1, 1);
    v30 = (uint64_t *)(a1 + 336);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 336, &v57);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = a4 + 4 * v28;
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v57, *(_DWORD *)(a1 + 312), 1, 1, 1);
    v35 = (uint64_t *)(a1 + 352);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 352, &v57);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v34 + 4;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v57, *(_DWORD *)(a1 + 312), 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 368, &v57);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *v30;
    v44 = *v35;
    v45 = *(_QWORD *)(*v35 + 16);
    if (*(_DWORD *)(*v30 + 8))
    {
      v46 = 0;
      v47 = *(_QWORD *)(v43 + 16);
      do
      {
        *(_DWORD *)(v47 + 4 * v46) = (int)*(float *)(a4 + 4 * v46);
        ++v46;
      }
      while (v46 < *(int *)(v43 + 8));
    }
    if (*(_DWORD *)(v44 + 8))
    {
      v48 = 0;
      do
      {
        *(_DWORD *)(v45 + 4 * v48) = (int)*(float *)(v39 + 4 * v48);
        ++v48;
      }
      while (v48 < *(int *)(v44 + 8));
    }
    memcpy(*(void **)(*(_QWORD *)(a1 + 368) + 16), (const void *)(v39 + 4 * v29), 4 * *(int *)(*(_QWORD *)(a1 + 368) + 8));
    v49 = v6[23];
    if (v49 < 0)
    {
      if (*((_QWORD *)v6 + 1) != 3)
      {
LABEL_79:
        v51 = 0;
LABEL_80:
        *(_BYTE *)(a1 + 384) = v51;
        return;
      }
      v6 = *(const char **)v6;
    }
    else if (v49 != 3)
    {
      goto LABEL_79;
    }
    v51 = *(_WORD *)v6 == 29539 && v6[2] == 114;
    goto LABEL_80;
  }
  v52 = 3 * *(_DWORD *)(a1 + 312);
  v53 = (char *)operator new(0x58uLL);
  *((_QWORD *)v53 + 1) = 0;
  *((_QWORD *)v53 + 2) = 0;
  *(_QWORD *)v53 = &off_1E2DBEC00;
  *(_OWORD *)(v53 + 56) = 0u;
  *(_OWORD *)(v53 + 72) = 0u;
  *((_DWORD *)v53 + 8) = v52;
  *((_QWORD *)v53 + 5) = a4;
  v53[48] = 0;
  v59 = (std::__shared_weak_count *)v53;
  *((_QWORD *)v53 + 3) = &off_1E2DA1190;
  v58 = v53 + 24;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 392))(a1, &v58);
  v54 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_1917F76A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::sparse_inner_product_kernel_cpu::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 3)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 3)
  {
    return 0;
  }
  if (*(_WORD *)a2 == 29539 && *((_BYTE *)a2 + 2) == 114)
    return 1;
  if (*(_WORD *)a2 == 29539 && *((_BYTE *)a2 + 2) == 99)
    return 1;
  return *(_WORD *)a2 == 28515 && *((_BYTE *)a2 + 2) == 111;
}

void Espresso::sparse_inner_product_kernel_cpu::set_coo_weights(uint64_t a1, uint64_t a2)
{
  float *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;

  v3 = *(float **)(*(_QWORD *)a2 + 16);
  v4 = *(unsigned int *)(a1 + 312);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v31, *(_DWORD *)(a1 + 304) + 1, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 336, &v31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v31, *(_DWORD *)(a1 + 312), 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 352, &v31);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v31, *(_DWORD *)(a1 + 312), 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 368, &v31);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(int **)(*(_QWORD *)(a1 + 336) + 16);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
  v17 = *(unsigned int *)(a1 + 304);
  v18 = *(unsigned int *)(a1 + 312);
  bzero(v14, v17 + 1);
  if ((_DWORD)v18)
  {
    v19 = v3;
    v20 = v18;
    do
    {
      v21 = *v19++;
      ++v14[v21];
      --v20;
    }
    while (v20);
  }
  if ((_DWORD)v17)
  {
    v22 = 0;
    v23 = v14;
    v24 = v17;
    do
    {
      v25 = *v23;
      *v23++ = v22;
      v22 += v25;
      --v24;
    }
    while (v24);
  }
  v14[v17] = v18;
  if ((_DWORD)v18)
  {
    do
    {
      v26 = (unint64_t)*v3;
      v27 = v14[v26];
      *(_DWORD *)(v15 + 4 * v27) = (int)v3[v4];
      *(float *)(v16 + 4 * v27) = v3[2 * v4];
      ++v14[v26];
      ++v3;
      --v18;
    }
    while (v18);
  }
  v28 = 0;
  v29 = v17 + 1;
  do
  {
    v30 = *v14;
    *v14++ = v28;
    v28 = v30;
    --v29;
  }
  while (v29);
  *(_BYTE *)(a1 + 384) = 1;
}

void *Espresso::sparse_inner_product_kernel_cpu::get_coo_weights@<X0>(Espresso::sparse_inner_product_kernel_cpu *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, 3 * *((_DWORD *)this + 78), 1, 1, 1);
  v4 = *((_QWORD *)this + 42);
  v5 = *a2;
  v6 = *(int *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_DWORD **)(v4 + 16);
    LODWORD(v10) = *v9;
    do
    {
      v11 = (float *)(v8 + 4 * (int)v10);
      v12 = v7 + 1;
      v10 = (int)v9[v7 + 1];
      v13 = v8 + 4 * v10 - (_QWORD)v11;
      if (v13 >= 1)
      {
        v14 = (float)v7;
        v15 = ((unint64_t)v13 >> 2) + 1;
        do
        {
          *v11++ = v14;
          --v15;
        }
        while (v15 > 1);
      }
      v7 = v12;
    }
    while (v12 != v6);
  }
  v16 = *((_QWORD *)this + 44);
  v17 = *(int *)(v16 + 8);
  if ((_DWORD)v17)
  {
    v18 = *(int **)(v16 + 16);
    v19 = *(_QWORD *)(v5 + 16);
    v20 = *((unsigned int *)this + 78);
    v21 = 4 * v20;
    do
    {
      v22 = *v18++;
      *(float *)(v19 + v21) = (float)v22;
      v21 += 4;
      --v17;
    }
    while (v17);
  }
  else
  {
    v19 = *(_QWORD *)(v5 + 16);
    v20 = *((unsigned int *)this + 78);
  }
  return memcpy((void *)(v19 + 4 * v20 + 4 * v20), *(const void **)(*((_QWORD *)this + 46) + 16), 4 * *(int *)(*((_QWORD *)this + 46) + 8));
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*,unsigned int &,unsigned int &,unsigned int &,unsigned long &,unsigned long>(const char *a1, int a2, int a3, int a4, int a5, int a6)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("Incorrect format size combination: format=%s, nB=%d, nC=%d, nnz=%d\n%d %d\n", a1, a2, a3, a4, a5, a6);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("Cannot multiply matrices with sizes [%d, %d] and [%d, %d]\n", a1, a2, a3, a4);
}

void Espresso::dev_op_kernel_cpu::__launch(Espresso::dev_op_kernel_cpu *this, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v5;
  BOOL v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char ***v24;
  char *v25;
  MIL::IRObject *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *p_shared_owners;
  unint64_t v34;
  unsigned __int8 *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t Attributes;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *v74;
  const void *Data;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  MIL::Fp16 *v84;
  unint64_t i;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  Espresso::dev_op_kernel_cpu *v96;
  _QWORD *v97;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  _OWORD v103[2];
  int v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void *__p;
  char *v108;
  char *v109;
  __int128 *v110;
  __int128 *v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 72))
    return;
  v5 = *((_DWORD *)this + 70);
  v6 = v5 == 100 || v5 == 0;
  if (!v6)
    return;
  if (!*((_QWORD *)this + 57))
  {
    Espresso::dev_op_kernel_cpu::load_mil_program_for_dev_op(this);
    if (!*((_QWORD *)this + 57))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load MIL program.");
  }
  v8 = *((_QWORD *)this + 58);
  if (!v8)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to get MIL function.");
  v96 = this;
  __p = 0;
  v108 = 0;
  v109 = 0;
  v97 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 128))(v8);
  v9 = v97 + 1;
  v10 = (_QWORD *)*v97;
  if ((_QWORD *)*v97 != v97 + 1)
  {
    v11 = 0;
    do
    {
      if (v11 >= v109)
      {
        v12 = (char *)__p;
        v13 = (v11 - (_BYTE *)__p) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v109 - (_BYTE *)__p;
        if ((v109 - (_BYTE *)__p) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = (char *)operator new(8 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v10[7];
        v19 = v18 + 8;
        if (v11 != v12)
        {
          do
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v18 - 1) = v20;
            v18 -= 8;
          }
          while (v11 != v12);
          v11 = (char *)__p;
        }
        __p = v18;
        v109 = &v17[8 * v16];
        if (v11)
          operator delete(v11);
        v11 = v19;
      }
      else
      {
        *(_QWORD *)v11 = v10[7];
        v11 += 8;
      }
      v108 = v11;
      v21 = (_QWORD *)v10[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v10[2];
          v6 = *v22 == (_QWORD)v10;
          v10 = v22;
        }
        while (!v6);
      }
      v10 = v22;
    }
    while (v22 != v9);
  }
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 58) + 48))(*((_QWORD *)this + 58));
  v24 = (char ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
  v25 = **v24;
  if ((*v24)[1] - v25 != 16)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: expected exactly one op for value inference.");
  v26 = *(MIL::IRObject **)v25;
  (*(void (**)(uint64_t *__return_ptr, _QWORD))(**(_QWORD **)v25 + 80))(&v105, *(_QWORD *)v25);
  if (!v105)
  {
    v95 = "dev_op value inference: failed to get op ptr";
    goto LABEL_156;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v105 + 224))(v105))
  {
    v95 = "dev_op value inference: operator has no value inference function";
    goto LABEL_156;
  }
  if (v97[2] != (uint64_t)(a4[1] - *a4) >> 4)
  {
    v95 = "dev_op value inference: unexpected number of input tensors";
    goto LABEL_156;
  }
  (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 58) + 160))(v103);
  v27 = (uint64_t)(*((_QWORD *)&v103[0] + 1) - *(_QWORD *)&v103[0]) >> 3;
  v28 = (uint64_t)(a3[1] - *a3) >> 4;
  if (*(_QWORD *)&v103[0])
  {
    *((_QWORD *)&v103[0] + 1) = *(_QWORD *)&v103[0];
    operator delete(*(void **)&v103[0]);
  }
  if (v27 != v28)
  {
    v95 = "dev_op value inference: unexpected number of output tensors";
LABEL_156:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v95);
  }
  memset(v103, 0, sizeof(v103));
  v104 = 1065353216;
  v29 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v26 + 160))(v26);
  v30 = v29 + 1;
  v31 = (_QWORD *)*v29;
  if ((_QWORD *)*v29 == v29 + 1)
    goto LABEL_90;
  v32 = 0;
  do
  {
    MIL::IROperation::TryGetParameterValueSharedPtr();
    if (v101)
    {
      v113 = (void **)&v101->__vftable;
      v114 = v102;
      if (v102)
      {
        p_shared_owners = &v102->__shared_owners_;
        do
          v34 = __ldxr((unint64_t *)p_shared_owners);
        while (__stxr(v34 + 1, (unint64_t *)p_shared_owners));
      }
      v111 = (__int128 *)(v31 + 4);
      v35 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v103, (unsigned __int8 *)v31 + 32, &v111);
      std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>((uint64_t)(v35 + 40), (uint64_t *)&v113, &v115);
      v36 = v114;
      if (v114)
      {
        v37 = (unint64_t *)&v114->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      goto LABEL_79;
    }
    v39 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *, _QWORD *, _QWORD))(*(_QWORD *)v26 + 120))(v26, v31 + 4, 0);
    v40 = (_QWORD *)*v9;
    if (v39)
      v41 = v40 == 0;
    else
      v41 = 1;
    if (v41)
LABEL_144:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: unknown input param");
    while (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39, v40 + 4))
    {
LABEL_61:
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_144;
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v40 + 4, v39))
    {
      ++v40;
      goto LABEL_61;
    }
    v42 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v97, &v113, v39);
    if (!v42)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    Espresso::dev_op_kernel_cpu::milTensorFromEspressoBlob(*(MIL::IRValueType **)(v42 + 56), a4, v32, (uint64_t)&v113);
    if (!v113)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: failed to get IRValue for input variable.");
    v111 = (__int128 *)v113;
    v112 = v114;
    if (v114)
    {
      v43 = (unint64_t *)&v114->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v110 = (__int128 *)(v31 + 4);
    v45 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v103, (unsigned __int8 *)v31 + 32, &v110);
    std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>((uint64_t)(v45 + 40), (uint64_t *)&v111, (uint64_t *)&v113);
    v46 = v112;
    if (v112)
    {
      v47 = (unint64_t *)&v112->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v114;
    if (v114)
    {
      v50 = (unint64_t *)&v114->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    ++v32;
LABEL_79:
    if (v102)
    {
      v52 = &v102->__shared_owners_;
      do
        v53 = __ldaxr((unint64_t *)v52);
      while (__stlxr(v53 - 1, (unint64_t *)v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v54 = (_QWORD *)v31[1];
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (_QWORD *)v31[2];
        v6 = *v55 == (_QWORD)v31;
        v31 = v55;
      }
      while (!v6);
    }
    v31 = v55;
  }
  while (v55 != v30);
LABEL_90:
  v56 = v105;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v26);
  v58 = (std::__shared_weak_count *)LocationPtr[1];
  v99 = *LocationPtr;
  v100 = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  Attributes = MIL::IRObject::GetAttributes(v26);
  v62 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v26 + 216))(v26);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 208))(&v101, v56, (uint64_t)v96 + 440, &v99, v103, Attributes, v62, 0xFFFFFFFFLL);
  v63 = v100;
  if (v100)
  {
    v64 = (unint64_t *)&v100->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v101;
  if (v102 != v101)
  {
    v67 = 0;
    while (1)
    {
      v68 = MIL::IRValue::AsTensor(*((MIL::IRValue **)&v66->__vftable + 2 * v67));
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 88))(v69);
      if (v70 != 4)
        break;
      if (v67 < (uint64_t)(a3[1] - *a3) >> 4)
      {
        v80 = (_QWORD *)(*a3 + 16 * v67);
        if (*v80)
        {
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v80 + 32))(*v80))
          {
            v81 = *(_QWORD *)(*v80 + 160);
            v72 = *(std::__shared_weak_count **)(*v80 + 168);
            v113 = (void **)v81;
            v114 = v72;
            if (v72)
            {
              v82 = (unint64_t *)&v72->__shared_owners_;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            if (v81)
            {
              v84 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              for (i = 0; ; ++i)
              {
                v86 = 0;
                v87 = *(int *)(v81 + 8);
                do
                {
                  v87 *= *(int *)(v81 + 12 + v86);
                  v86 += 4;
                }
                while (v86 != 12);
                if (i >= v87)
                  break;
                MIL::Fp16::GetFloat(v84);
                v84 = (MIL::Fp16 *)((char *)v84 + 2);
                *(_DWORD *)(*(_QWORD *)(v81 + 24) + 4 * i) = v88;
              }
            }
            if (!v72)
              goto LABEL_117;
            v91 = (unint64_t *)&v72->__shared_owners_;
            do
              v79 = __ldaxr(v91);
            while (__stlxr(v79 - 1, v91));
LABEL_111:
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
            goto LABEL_117;
          }
        }
      }
      v113 = 0;
      v114 = 0;
LABEL_117:
      ++v67;
      v66 = v101;
      if (v67 >= ((char *)v102 - (char *)v101) >> 4)
        goto LABEL_136;
    }
    if (v70 != 5)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("dev_op value inference: float32 / float16 supported for value inference");
    if (v67 < (uint64_t)(a3[1] - *a3) >> 4
      && (v71 = (_QWORD *)(*a3 + 16 * v67), *v71)
      && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v71 + 32))(*v71))
    {
      v73 = *(_QWORD *)(*v71 + 160);
      v72 = *(std::__shared_weak_count **)(*v71 + 168);
      v113 = (void **)v73;
      v114 = v72;
      if (v72)
      {
        v89 = (unint64_t *)&v72->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
    }
    else
    {
      v72 = 0;
      v73 = 0;
      v113 = 0;
      v114 = 0;
    }
    v74 = *(void **)(v73 + 24);
    Data = (const void *)MIL::IRTensorValue::GetDataView<float>();
    v76 = 0;
    v77 = *(int *)(v73 + 8);
    do
    {
      v77 *= *(int *)(v73 + 12 + v76);
      v76 += 4;
    }
    while (v76 != 12);
    memcpy(v74, Data, 4 * v77);
    if (!v72)
      goto LABEL_117;
    v78 = (unint64_t *)&v72->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    goto LABEL_111;
  }
LABEL_136:
  v113 = (void **)&v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v113);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table((uint64_t)v103);
  v92 = v106;
  if (v106)
  {
    v93 = (unint64_t *)&v106->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (__p)
    operator delete(__p);
}

void sub_1917F83D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 112);
  *(_QWORD *)(v28 - 128) = &a16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 128));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::dev_op_kernel_cpu::load_mil_program_for_dev_op(Espresso::dev_op_kernel_cpu *this)
{
  size_t v2;
  std::string *v3;
  char *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::__fs::filesystem::file_status v10;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::string v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  std::string v36;
  uint64_t v37;

  if (*((char *)this + 439) >= 0)
    v2 = *((unsigned __int8 *)this + 439);
  else
    v2 = *((_QWORD *)this + 53);
  v3 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v2 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v3 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v2)
  {
    if (*((char *)this + 439) >= 0)
      v4 = (char *)this + 416;
    else
      v4 = (char *)*((_QWORD *)this + 52);
    memmove(v3, v4, v2);
  }
  *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
  v5 = *((char *)this + 367);
  if (v5 >= 0)
    v6 = (char *)this + 344;
  else
    v6 = (const std::string::value_type *)*((_QWORD *)this + 43);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 367);
  else
    v7 = *((_QWORD *)this + 44);
  v8 = std::string::append(&v31, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v31, &v36);
  v10 = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v31, 0);
  v11 = v37;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v11 == 255 || !v11)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("mil program file not found at expected location");
  if (!*((_QWORD *)this + 55))
  {
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v31);
    std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>((_QWORD *)this + 55, (uint64_t *)&v31);
    v10 = (std::__fs::filesystem::file_status)v31.__r_.__value_.__r.__words[0];
    v31.__r_.__value_.__r.__words[0] = 0;
    if (v10)
      v10 = (std::__fs::filesystem::file_status)(*(uint64_t (**)(std::__fs::filesystem::file_status))(**(_QWORD **)&v10 + 8))(v10);
  }
  MIL::ParserOptions::Make(*(MIL::ParserOptions **)&v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 64))(v37, 1);
  v12 = v37;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v35 = v36;
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v12 + 32))(v12, &v35, 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
  v33 = *((_QWORD *)this + 55);
  v34 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  v16 = v31.__r_.__value_.__r.__words[0];
  v31.__r_.__value_.__r.__words[0] = 0;
  v17 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v31.__r_.__value_.__r.__words[0];
    v31.__r_.__value_.__r.__words[0] = 0;
    if (v18)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v34;
  if (v34)
  {
    v20 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 57) + 72))(*((_QWORD *)this + 57));
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&v31, v22);
  if (v32 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference requires exactly one function in the mil program");
  v24 = *(_QWORD *)(v31.__r_.__value_.__r.__words[2] + 40);
  v23 = *(_QWORD *)(v31.__r_.__value_.__r.__words[2] + 48);
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 58) = v24;
  *((_QWORD *)this + 59) = v23;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)&v31);
  v30 = v37;
  v37 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1917F87F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a10)
    (*(void (**)(void *))(*(_QWORD *)a10 + 8))(a10);
  if (*(char *)(v25 - 41) < 0)
    operator delete(*(void **)(v25 - 64));
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x40uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *v16 = 0;
  v16[1] = v8;
  v17 = (std::string *)(v16 + 2);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    v16[4] = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = 0;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1917F8D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v4 = a2;
  v6 = *(uint64_t **)(a1 + 16);
  v7 = *(uint64_t **)a1;
  if (v6 == *(uint64_t **)a1)
  {
    if (v6)
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = v6;
      if ((uint64_t *)v14 != v6)
      {
        do
          v14 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 16);
        while ((uint64_t *)v14 != v6);
        v15 = *(uint64_t **)a1;
      }
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v15);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    result = (uint64_t *)operator new(0x10uLL);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = result + 2;
    while (v4 != a3)
    {
      v16 = v4[1];
      *result = *v4;
      result[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v4 += 2;
      result += 2;
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    result = *(uint64_t **)(a1 + 8);
    if (result == v7)
    {
      while (v4 != a3)
      {
        v11 = v4[1];
        *v7 = *v4;
        v7[1] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v4 += 2;
        v7 += 2;
      }
    }
    else
    {
      if (a2 != a3)
      {
        do
        {
          v9 = *v4;
          v10 = v4[1];
          v4 += 2;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v7, v9, v10);
          v7 += 2;
        }
        while (v4 != a3);
        result = *(uint64_t **)(a1 + 8);
      }
      while (result != v7)
        result = (uint64_t *)std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(result - 2));
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  return result;
}

void Espresso::dev_op_kernel_cpu::milTensorFromEspressoBlob(MIL::IRValueType *this@<X3>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  MIL::Fp16 *v22;
  unint64_t i;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *__p[3];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v7 = MIL::IRValueType::AsTensorType(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  if (a3 < (uint64_t)(a2[1] - *a2) >> 4
    && (v9 = (_QWORD *)(*a2 + 16 * a3), *v9)
    && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v32 = *v9;
    v10 = *(_QWORD *)(*v9 + 160);
    v33 = *(std::__shared_weak_count **)(v32 + 168);
    v42 = v10;
    v43 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v42 = 0;
    v43 = 0;
  }
  if (v8 != 4)
  {
    if (v8 == 5)
    {
      v11 = 0;
      v12 = *(int *)(v10 + 8);
      do
      {
        v12 *= *(int *)(v10 + 12 + v11);
        v11 += 4;
      }
      while (v11 != 12);
      MIL::IRTensorValueType::MakeFloat32ValueWithUnownedMemory();
      v13 = __p[0];
      *(void **)a4 = __p[0];
      if (v13)
      {
        v14 = (_QWORD *)operator new();
        v15 = __p[0];
        *v14 = &unk_1E2DC2BE0;
        v14[1] = 0;
        v14[2] = 0;
        v14[3] = v15;
      }
      else
      {
        v14 = 0;
      }
      *(_QWORD *)(a4 + 8) = v14;
      goto LABEL_38;
    }
LABEL_33:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_38;
  }
  if (a3 < (uint64_t)(a2[1] - *a2) >> 4
    && (v16 = (_QWORD *)(*a2 + 16 * a3), *v16)
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16) == 1)
  {
    v17 = *(_QWORD *)(*v16 + 176);
    v18 = *(std::__shared_weak_count **)(*v16 + 184);
    v40 = v17;
    v41 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v40 = 0;
    v41 = 0;
  }
  if (!v10 || v17)
  {
    if (v18)
    {
      v26 = (unint64_t *)&v18->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    goto LABEL_33;
  }
  v21 = *(int *)(v10 + 8);
  do
  {
    v21 *= *(int *)(v10 + 12 + v17);
    v17 += 4;
  }
  while (v17 != 12);
  v22 = (MIL::Fp16 *)std::vector<MIL::Fp16>::vector(__p, v21);
  for (i = 0; ; ++i)
  {
    v24 = 0;
    v25 = *(int *)(v10 + 8);
    do
    {
      v25 *= *(int *)(v10 + 12 + v24);
      v24 += 4;
    }
    while (v24 != 12);
    if (i >= v25)
      break;
    v22 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v22, *(float *)(*(_QWORD *)(v10 + 24) + 4 * i));
    *((_WORD *)__p[0] + i) = (_WORD)v22;
  }
  MIL::IRTensorValueType::MakeFloat16Value();
  *(_QWORD *)a4 = v38;
  if (v38)
  {
    v28 = (_QWORD *)operator new();
    *v28 = &unk_1E2DC2BE0;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v38;
  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)(a4 + 8) = v28;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v18)
  {
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_38:
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1917F9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Espresso::grid_sampling_kernel_cpu::~grid_sampling_kernel_cpu(Espresso::grid_sampling_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::grid_sampling_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  int v44;
  int v45;
  float v46;
  uint64_t v47;
  int v48;
  int v49;
  float v50;
  uint64_t v51;
  int v52;
  int v53;
  float v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  v5 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v5
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
  {
    v84 = 0;
    v90 = 0;
  }
  else
  {
    v67 = *(std::__shared_weak_count **)(*v5 + 168);
    v84 = *(_QWORD *)(*v5 + 160);
    v90 = v67;
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(p_shared_owners);
      while (__stxr(v69 + 1, p_shared_owners));
    }
  }
  v6 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v6 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v89 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*v6 + 160);
    v70 = *(std::__shared_weak_count **)(*v6 + 168);
    v89 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
  }
  v8 = (_QWORD *)*a4;
  v9 = *(_QWORD *)(*a4 + 16);
  if (!v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v79 = 0;
LABEL_12:
    v73 = 0;
    goto LABEL_13;
  }
  v63 = v8[2];
  v64 = *(std::__shared_weak_count **)(v63 + 168);
  v79 = *(_QWORD *)(v63 + 160);
  if (!v64)
    goto LABEL_12;
  v65 = (unint64_t *)&v64->__shared_owners_;
  do
    v66 = __ldxr(v65);
  while (__stxr(v66 + 1, v65));
  v73 = v64;
LABEL_13:
  v76 = *(int *)(v84 + 20);
  if ((_DWORD)v76)
  {
    v10 = 0;
    v12 = *(int *)(v84 + 8);
    v11 = *(int *)(v84 + 12);
    v77 = 0;
    v78 = (int)v12 * (uint64_t)(int)v11;
    v13 = *(unsigned int *)(v84 + 16);
    v14 = (float)(unint64_t)(v12 - 1);
    v15 = (float)(unint64_t)(v11 - 1);
    v75 = *(_DWORD *)(v84 + 12);
    v81 = v12;
    v85 = *(unsigned int *)(v84 + 8);
    v74 = 4 * (int)v12 * (int)v11 * (int)v13;
    v80 = 4 * v12;
    v16 = 4 * (int)v12 * (int)v11;
    while (!v75)
    {
LABEL_70:
      ++v10;
      v77 += v74;
      if (v10 == v76)
        goto LABEL_71;
    }
    v82 = v77;
    v83 = 0;
    while (!(_DWORD)v81)
    {
LABEL_69:
      v82 += v80;
      if (++v83 == v75)
        goto LABEL_70;
    }
    v17 = 0;
    v18 = *(_QWORD *)(v79 + 24);
    v87 = v10 * 2 * v78 + v83 * v81;
    v86 = *(unsigned __int8 *)(a1 + 284);
    v19 = v82;
    while (1)
    {
      v20 = *(float *)(v18 + 4 * (v87 + v17));
      v21 = *(float *)(v18 + 4 * (v87 + v78 + v17));
      if (!v86)
      {
        v20 = v20 + (float)(int)v17;
        v21 = v21 + (float)(int)v83;
        if ((_DWORD)v13)
          break;
        goto LABEL_68;
      }
      if (*(_BYTE *)(a1 + 285))
      {
        v20 = (float)((float)(v20 + 1.0) * 0.5) * v14;
        v21 = (float)((float)(v21 + 1.0) * 0.5) * v15;
      }
      if ((_DWORD)v13)
        break;
LABEL_68:
      ++v17;
      v19 += 4;
      if (v17 == v85)
        goto LABEL_69;
    }
    v22 = 0;
    v23 = vcvtms_s32_f32(v20);
    v24 = vcvtms_s32_f32(v21);
    v25 = v20 - (float)(int)floorf(v20);
    v26 = v21 - (float)(int)floorf(v21);
    v27 = *(_DWORD *)(a1 + 280);
    v28 = v23 + 1;
    v29 = v24 & ~(v24 >> 31);
    v30 = v23 & ~(v23 >> 31);
    v31 = v24 + 1;
    v32 = v28 & ~(v28 >> 31);
    v33 = v31 & ~(v31 >> 31);
    v34 = (float *)(*(_QWORD *)(v84 + 24) + v19);
    while (1)
    {
      if (v27 == 1)
      {
        v35 = *(_DWORD *)(v7 + 8);
        v36 = *(_DWORD *)(v7 + 12);
        v37 = v36 - 1;
        if (v29 < v36)
          v37 = v24 & ~(v24 >> 31);
        if (v30 >= v35)
          v38 = v35 - 1;
        else
          v38 = v23 & ~(v23 >> 31);
      }
      else
      {
        v43 = 0.0;
        if ((v24 | v23) < 0)
          goto LABEL_42;
        v36 = *(_DWORD *)(v7 + 12);
        if (v36 <= v24)
          goto LABEL_42;
        v35 = *(_DWORD *)(v7 + 8);
        if (v35 <= v23)
          goto LABEL_42;
        v38 = v23;
        v37 = v24;
      }
      v39 = v36 * v35;
      v40 = *(_QWORD *)(v7 + 24);
      v41 = v10 * *(int *)(v7 + 16) * v39;
      v42 = v22 * v39;
      v43 = *(float *)(v40 + 4 * (v42 + v38 + v37 * v35 + v41));
      if (v27 == 1)
      {
        v44 = v36 - 1;
        if (v29 < v36)
          v44 = v24 & ~(v24 >> 31);
        v45 = v35 - 1;
        if (v32 < v35)
          v45 = v28 & ~(v28 >> 31);
        goto LABEL_46;
      }
LABEL_42:
      v46 = 0.0;
      if (((v23 + 1) | v24) < 0)
        goto LABEL_52;
      v36 = *(_DWORD *)(v7 + 12);
      if (v36 <= v24)
        goto LABEL_52;
      v35 = *(_DWORD *)(v7 + 8);
      if (v35 <= v28)
        goto LABEL_52;
      v40 = *(_QWORD *)(v7 + 24);
      v47 = v36 * v35;
      v41 = v10 * *(int *)(v7 + 16) * v47;
      v42 = v22 * v47;
      v45 = v23 + 1;
      v44 = v24;
LABEL_46:
      v46 = *(float *)(v40 + 4 * (v42 + v45 + v44 * v35 + v41));
      if (v27 == 1)
      {
        v48 = v36 - 1;
        if (v33 < v36)
          v48 = v31 & ~(v31 >> 31);
        v49 = v35 - 1;
        if (v30 < v35)
          v49 = v23 & ~(v23 >> 31);
        goto LABEL_56;
      }
LABEL_52:
      v50 = 0.0;
      if (((v24 + 1) | v23) < 0)
        goto LABEL_62;
      v36 = *(_DWORD *)(v7 + 12);
      if (v36 <= v31)
        goto LABEL_62;
      v35 = *(_DWORD *)(v7 + 8);
      if (v35 <= v23)
        goto LABEL_62;
      v40 = *(_QWORD *)(v7 + 24);
      v51 = v36 * v35;
      v41 = v10 * *(int *)(v7 + 16) * v51;
      v42 = v22 * v51;
      v49 = v23;
      v48 = v24 + 1;
LABEL_56:
      v50 = *(float *)(v40 + 4 * (v42 + v49 + v48 * v35 + v41));
      if (v27 == 1)
      {
        v52 = v36 - 1;
        if (v33 < v36)
          v52 = v31 & ~(v31 >> 31);
        v53 = v35 - 1;
        if (v32 < v35)
          v53 = v28 & ~(v28 >> 31);
        goto LABEL_66;
      }
LABEL_62:
      v54 = 0.0;
      if (((v24 + 1) | (v23 + 1)) < 0)
        goto LABEL_67;
      v55 = *(_DWORD *)(v7 + 12);
      if (v55 <= v31)
        goto LABEL_67;
      v35 = *(_DWORD *)(v7 + 8);
      if (v35 <= v28)
        goto LABEL_67;
      v40 = *(_QWORD *)(v7 + 24);
      v56 = v55 * v35;
      v41 = v10 * *(int *)(v7 + 16) * v56;
      v42 = v22 * v56;
      v53 = v23 + 1;
      v52 = v24 + 1;
LABEL_66:
      v54 = *(float *)(v40 + 4 * (v42 + v53 + v52 * v35 + v41));
LABEL_67:
      *v34 = (float)(v26 * (float)((float)(v25 * v54) + (float)(v50 * (float)(1.0 - v25))))
           + (float)((float)(1.0 - v26) * (float)((float)(v25 * v46) + (float)(v43 * (float)(1.0 - v25))));
      ++v22;
      v34 = (float *)((char *)v34 + v16);
      if (v13 == v22)
        goto LABEL_68;
    }
  }
LABEL_71:
  if (v73)
  {
    v57 = (unint64_t *)&v73->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v89)
  {
    v59 = (unint64_t *)&v89->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v90)
  {
    v61 = (unint64_t *)&v90->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_1917F9950(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::resample_kernel_cpu::~resample_kernel_cpu(Espresso::resample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::resample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  double v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v52;
  int v53;
  _BOOL4 v55;
  int v57;
  int v58;
  int v59;
  int v62;
  int v63;
  int v65;
  int v66;
  _BOOL4 v68;
  int v69;
  int v71;
  int v72;
  int v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  BOOL v83;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  float v88;
  char v89;
  int v90;
  _BOOL4 v91;
  _BOOL4 v92;
  int v93;
  int v94;
  _BOOL4 v95;
  uint64_t v96;
  BOOL v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i;
  char v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  float v115;
  float *v116;
  float v117;
  float *v118;
  float *v119;
  float *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;

  v5 = *(_DWORD *)(a1 + 296);
  if (*(_DWORD *)(a1 + 292) && (v5 == 1 || *(_DWORD *)(a1 + 300) == 1))
    goto LABEL_262;
  if (v5 == 1)
  {
    if (*(_DWORD *)(a1 + 300))
      goto LABEL_7;
LABEL_262:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported coordinates configurations.");
  }
  if (!v5 && *(_DWORD *)(a1 + 300) == 1)
    goto LABEL_262;
LABEL_7:
  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v162 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(std::__shared_weak_count **)(*v6 + 168);
    v162 = *(_QWORD *)(*v6 + 160);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v132 = __ldxr(p_shared_owners);
      while (__stxr(v132 + 1, p_shared_owners));
    }
  }
  v8 = (_QWORD *)*a4;
  v137 = v7;
  if (a4[1] == *a4 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v10 = *(std::__shared_weak_count **)(*v8 + 168);
    if (v10)
    {
      v133 = (unint64_t *)&v10->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
  }
  v11 = (_QWORD *)*a4;
  v12 = *(_QWORD *)(*a4 + 16);
  v136 = v10;
  if (!v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
    v149 = 0;
LABEL_18:
    v135 = 0;
    goto LABEL_19;
  }
  v127 = v11[2];
  v128 = *(std::__shared_weak_count **)(v127 + 168);
  v149 = *(_QWORD *)(v127 + 160);
  if (!v128)
    goto LABEL_18;
  v129 = (unint64_t *)&v128->__shared_owners_;
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v135 = v128;
LABEL_19:
  v143 = *(int *)(v162 + 20);
  if ((_DWORD)v143)
  {
    v163 = 0;
    v144 = 0;
    v145 = 0;
    v13 = *(_DWORD *)(v162 + 12);
    v14 = *(int *)(v162 + 16);
    v16 = *(int *)(v9 + 8);
    v15 = *(int *)(v9 + 12);
    v17 = *(int *)(v162 + 8);
    v139 = 2 * (int)v17 * (uint64_t)(int)v13;
    v18 = (int)v16 * (uint64_t)(int)v15;
    v138 = v18 * v14;
    v19 = (float)v15;
    v20 = (float)v15 + -1.0;
    v160 = v15 - 1;
    v147 = 2 * v15 - 2;
    v148 = 2 * v15;
    v146 = 2 * v15 - 1;
    v152 = v13;
    v164 = *(unsigned int *)(v162 + 8);
    v161 = *(unsigned int *)(v162 + 16);
    v142 = v13;
    v21 = (int)v17 * (uint64_t)(int)v13;
    v141 = 4 * v21 * v14;
    v153 = v17;
    v151 = 4 * v17;
    v22 = 4 * v21;
    v170 = *(_DWORD *)(v9 + 12);
    v165 = *(_DWORD *)(v162 + 16);
    v140 = 4 * v18 * v14;
    while (!v142)
    {
LABEL_247:
      v145 += v141;
      v163 += v140;
      if (++v144 == v143)
        goto LABEL_248;
    }
    v155 = 0;
    v154 = v145;
    while (!(_DWORD)v153)
    {
LABEL_246:
      v154 += v151;
      if (++v155 == v152)
        goto LABEL_247;
    }
    v23 = 0;
    v169 = *(_QWORD *)(v149 + 24);
    v168 = *(_DWORD *)(a1 + 296);
    v24 = (float)(int)v155;
    v167 = *(_DWORD *)(a1 + 300);
    if (v167 != 1)
      v24 = -0.0;
    if (*(_BYTE *)(a1 + 304))
      v25 = v20;
    else
      v25 = v19;
    if (*(_BYTE *)(a1 + 304))
      v26 = (float)v16 + -1.0;
    else
      v26 = (float)v16;
    if (*(_BYTE *)(a1 + 304))
      v27 = 0.0;
    else
      v27 = -0.5;
    v28 = *(_DWORD *)(a1 + 292);
    v29 = v27;
    v30 = *(_DWORD *)(a1 + 284);
    v31 = 2 * v16;
    if (v30 != 3)
      v31 = 2 * v16 - 2;
    v159 = v31;
    v32 = *(_DWORD *)(a1 + 280);
    v33 = v148;
    if (v30 != 3)
      v33 = v147;
    v158 = v33;
    v34 = v146;
    if (v30 != 3)
      v34 = v147;
    v157 = v34;
    v35 = 2 * v16 - 1;
    if (v30 != 3)
      v35 = 2 * v16 - 2;
    v156 = v35;
    v36 = v154;
    v166 = *(_DWORD *)(a1 + 292);
    while (1)
    {
      v37 = v139 * v144 + 2 * (v155 * v153 + v23);
      v38 = (4 * v37) | 4;
      v39 = *(float *)(v169 + v38);
      if (v168 == 1)
        v40 = *(float *)(v169 + 4 * v37);
      else
        v40 = *(float *)(v169 + v38);
      if (v168 != 1)
        v39 = *(float *)(v169 + 4 * v37);
      v41 = v40 + v24;
      v42 = v167 == 1 ? (float)(int)v23 : -0.0;
      v43 = v39 + v42;
      if (v28 == 2)
      {
        v41 = v27 + (float)(v41 * v25);
        v43 = v27 + (float)(v43 * v26);
      }
      else if (v28 == 1)
      {
        v41 = v29 + (float)(v41 + 1.0) * (v25 * 0.5);
        v43 = v29 + (float)(v43 + 1.0) * (v26 * 0.5);
      }
      v44 = vcvtms_s32_f32(v41);
      v45 = vcvtms_s32_f32(v43);
      v46 = v45 + 1;
      v47 = v44 + 1;
      v48 = llroundf(v41);
      v49 = llroundf(v43);
      if (!v32)
        break;
      if (!v30)
        goto LABEL_182;
      if (v30 == 1)
      {
        v44 &= ~(v44 >> 31);
        if (v44 >= v170)
          v44 = v160;
        v45 &= ~(v45 >> 31);
        if (v45 >= (int)v16)
          v45 = v16 - 1;
        if ((v46 & ~(v46 >> 31)) >= (int)v16)
          v46 = v16 - 1;
        else
          v46 &= ~(v46 >> 31);
        if ((v47 & ~(v47 >> 31)) >= v170)
          v47 = v160;
        else
          v47 &= ~(v47 >> 31);
        goto LABEL_76;
      }
      if (v45 < 0 && v30 == 3)
        v52 = v45 + 1;
      else
        v52 = v45;
      if (v52 < 0)
        v52 = -v52;
      v53 = v52 % v159;
      v55 = v44 < 0 || v170 <= v44;
      if (v44 < 0 && v30 == 3)
        v57 = v44 + 1;
      else
        v57 = v44;
      if (v57 < 0)
        v57 = -v57;
      v58 = v57 % v158;
      if (v157 - v58 < v58)
        v58 = v157 - v58;
      if (v55)
        v59 = v58;
      else
        v59 = v44;
      if (v156 - v53 < v53)
        v53 = v156 - v53;
      if ((int)v16 > v45 && v45 >= 0)
        v53 = v45;
      if (v45 < -1 && v30 == 3)
        v62 = v45 + 2;
      else
        v62 = v45 + 1;
      if (v62 < 0)
        v62 = -v62;
      v63 = v62 % v159;
      if (v44 < 0 && v30 == 3)
        v65 = v44 + 1;
      else
        v65 = v44;
      if (v65 < 0)
        v65 = -v65;
      v66 = v65 % v158;
      if (v157 - v66 < v66)
        v66 = v157 - v66;
      if (!v55)
        v66 = v44;
      v68 = v45 < -1 || v46 >= (int)v16;
      v69 = v156 - v63;
      if (v156 - v63 >= v63)
        v69 = v63;
      if (v44 < -1 && v30 == 3)
        v71 = v44 + 2;
      else
        v71 = v44 + 1;
      if (v71 < 0)
        v71 = -v71;
      v72 = v71 % v158;
      if (v157 - v72 < v72)
        v72 = v157 - v72;
      if (v44 >= -1 && v47 < v170)
        v47 = v44 + 1;
      else
        v47 = v72;
      if (v68)
        v46 = v69;
      v50 = v30;
      v45 = v53;
      v44 = v59;
LABEL_184:
      if (v165)
      {
        v78 = 0;
        v79 = 0;
        v80 = floorf(v43);
        v81 = v41 - (float)(int)floorf(v41);
        v83 = (v44 | v45) >= 0 && v170 > v44;
        v85 = (v66 | v46) >= 0 && v170 > v66;
        v86 = (v47 | v45) >= 0;
        v87 = (v47 | v46) >= 0;
        v88 = v43 - (float)(int)v80;
        if (v170 <= v47)
        {
          v86 = 0;
          v87 = 0;
        }
        v89 = (int)v16 > v45 && v83;
        v90 = v44 * v16;
        v91 = (int)v16 > v45 && v86;
        v92 = (int)v16 > v46 && v85;
        v93 = v66 * v16;
        v94 = v47 * v16;
        v95 = (int)v16 > v46 && v87;
        v96 = v144 * v138 + v46 + v94;
        v98 = (v48 | v49) < 0 || v170 <= v48 || (int)v16 <= v49;
        v99 = 4 * v45;
        v100 = v48 * v16;
        v101 = 4 * v46 + 4 * v93;
        v103 = !v98 || v50 != 0;
        v104 = (float *)(*(_QWORD *)(v162 + 24) + v36);
        v105 = v99 + 4 * v94;
        v106 = v99 + 4 * v90;
        v107 = 4 * v49 + 4 * v100;
        v108 = v163;
        for (i = v161; i; --i)
        {
          if (!v32)
          {
            v116 = (float *)(a1 + 288);
            if (v103)
              v116 = (float *)(*(_QWORD *)(v9 + 24) + v107 + v108);
            v117 = *v116;
            goto LABEL_244;
          }
          if (v50)
            v110 = 1;
          else
            v110 = v89;
          if ((v110 & 1) != 0)
          {
            v111 = *(_QWORD *)(v9 + 24);
            v112 = *(float *)(v111 + v106 + v108);
            if (v50)
            {
              v113 = v79 * v18;
              v114 = *(float *)(v111 + v101 + v108);
              v115 = *(float *)(v111 + v105 + v108);
              goto LABEL_241;
            }
          }
          else
          {
            v112 = *(float *)(a1 + 288);
          }
          v118 = (float *)(a1 + 288);
          if (v92)
            v118 = (float *)(*(_QWORD *)(v9 + 24) + v101 + v108);
          v119 = (float *)(a1 + 288);
          if (v91)
            v119 = (float *)(*(_QWORD *)(v9 + 24) + v105 + v108);
          v114 = *v118;
          v115 = *v119;
          if (!v95)
          {
            v120 = (float *)(a1 + 288);
            goto LABEL_243;
          }
          v111 = *(_QWORD *)(v9 + 24);
          v113 = v78;
LABEL_241:
          v120 = (float *)(v111 + 4 * (v96 + v113));
LABEL_243:
          v117 = (float)(v81 * (float)((float)(v88 * *v120) + (float)(v115 * (float)(1.0 - v88))))
               + (float)((float)(1.0 - v81) * (float)((float)(v88 * v114) + (float)(v112 * (float)(1.0 - v88))));
LABEL_244:
          ++v79;
          *v104 = v117;
          v104 = (float *)((char *)v104 + v22);
          v78 += v18;
          v108 += 4 * v18;
        }
      }
      ++v23;
      v36 += 4;
      v28 = v166;
      if (v23 == v164)
        goto LABEL_246;
    }
    if (v30)
    {
      if (v30 == 1)
      {
        v48 &= ~(v48 >> 31);
        if (v48 >= v170)
          v48 = v160;
        if ((v49 & ~(v49 >> 31)) >= (int)v16)
          v49 = v16 - 1;
        else
          v49 &= ~(v49 >> 31);
LABEL_76:
        v50 = 1;
LABEL_183:
        v66 = v44;
        goto LABEL_184;
      }
      if (v49 < 0 && v30 == 3)
        v75 = v49 + 1;
      else
        v75 = v49;
      if (v75 < 0)
        v75 = -v75;
      if (v48 < 0 || v170 <= v48)
      {
        if (v48 < 0 && v30 == 3)
          ++v48;
        if (v48 < 0)
          v48 = -v48;
        v48 %= v158;
        if (v157 - v48 < v48)
          v48 = v157 - v48;
      }
      if (v49 < 0 || (int)v16 <= v49)
      {
        v77 = v75 % v159;
        if (v156 - v77 >= v77)
          v49 = v77;
        else
          v49 = v156 - v77;
      }
    }
LABEL_182:
    v50 = v30;
    goto LABEL_183;
  }
  if (!v135)
    goto LABEL_252;
LABEL_248:
  v121 = (unint64_t *)&v135->__shared_owners_;
  do
    v122 = __ldaxr(v121);
  while (__stlxr(v122 - 1, v121));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
    if (!v136)
      goto LABEL_256;
  }
  else
  {
LABEL_252:
    if (!v136)
      goto LABEL_256;
  }
  v123 = (unint64_t *)&v136->__shared_owners_;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    if (!v137)
      return;
    goto LABEL_257;
  }
LABEL_256:
  if (!v137)
    return;
LABEL_257:
  v125 = (unint64_t *)&v137->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
  }
}

void sub_1917FA304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::argsort_kernel_cpu::~argsort_kernel_cpu(Espresso::argsort_kernel_cpu *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D82888;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D82888;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::argsort_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD **v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *__p;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  Espresso::abstract_blob_container::shape((char *)&v41, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v45, (const Espresso::layer_shape *)&v41, 0);
  Espresso::argsort_kernel_cpu::setup((Espresso::argsort_kernel_cpu *)a1, (const Espresso::layer_nd_shape *)&v45);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v8 = a4;
  v7 = *a4;
  if (v8[1] == v7 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v9 = 0;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v36 = *(std::__shared_weak_count **)(*v7 + 168);
    v41 = v9;
    v42 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
  }
  v11 = a3;
  v10 = *a3;
  if (v11[1] == v10 || !*v10 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v12 = 0;
    v13 = 0;
    v45 = 0;
    v46 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(*v10 + 160);
    v12 = *(std::__shared_weak_count **)(*v10 + 168);
    v45 = v13;
    v46 = v12;
    if (v12)
    {
      v39 = (unint64_t *)&v12->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
  }
  if (*(_BYTE *)(a1 + 284))
    v14 = 1;
  else
    v14 = -1;
  v15 = *(_QWORD *)(a1 + 352);
  if (v15)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 336);
    v18 = v17;
    do
    {
      if (v18)
      {
        v19 = 0;
        v20 = *(_QWORD *)(a1 + 288);
        do
        {
          v21 = *(_QWORD *)(a1 + 296);
          v22 = v21 - v20;
          if (v21 != v20)
          {
            v23 = 0;
            v24 = v22 >> 3;
            if (v24 <= 1)
              v24 = 1;
            do
            {
              *(_QWORD *)(v20 + 8 * v23) = v23;
              ++v23;
            }
            while (v24 != v23);
            v17 = *(_QWORD *)(a1 + 336);
          }
          v25 = *(_QWORD *)(a1 + 344);
          cblas_scopy((*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2, (const float *)(*(_QWORD *)(v9 + 24) + 4 * (v19 + v25 * v16)), v17, *(float **)(a1 + 312), 1);
          vDSP_vsorti(*(const float **)(a1 + 312), *(vDSP_Length **)(a1 + 288), 0, (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3, v14);
          v20 = *(_QWORD *)(a1 + 288);
          v17 = *(_QWORD *)(a1 + 336);
          v26 = *(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312);
          if (v26)
          {
            v27 = v26 >> 2;
            v28 = (float *)(*(_QWORD *)(v13 + 24) + 4 * (v19 + v16 * v25));
            v29 = *(unint64_t **)(a1 + 288);
            do
            {
              v30 = *v29++;
              *v28 = (float)v30;
              v28 += v17;
              --v27;
            }
            while (v27);
          }
          ++v19;
        }
        while (v19 < v17);
        v15 = *(_QWORD *)(a1 + 352);
        v18 = v17;
      }
      ++v16;
    }
    while (v16 < v15);
  }
  if (v12)
  {
    v31 = (unint64_t *)&v12->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1917FA6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::argsort_kernel_cpu::setup(Espresso::argsort_kernel_cpu *this, const Espresso::layer_nd_shape *a2)
{
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const Espresso::layer_nd_shape *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = (_OWORD *)((char *)this + 360);
  v5 = *((int *)this + 95);
  if (*((_DWORD *)a2 + 5) != (_DWORD)v5)
    goto LABEL_8;
  if (!(_DWORD)v5)
    return;
  if (*(_DWORD *)v4 == *(_DWORD *)a2)
  {
    v6 = 0;
    while (v5 - 1 != v6)
    {
      v7 = *((_DWORD *)this + v6 + 91);
      v8 = *((_DWORD *)a2 + ++v6);
      if (v7 != v8)
      {
        if (v6 >= v5)
          return;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = *(_OWORD *)a2;
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 2);
    *v4 = v9;
    v10 = *((unsigned int *)this + 70);
    if ((v10 & 0x80000000) != 0 || (v11 = *((int *)a2 + 5), v11 <= v10))
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("axis should be non-negative and smaller than rank of input");
    *((_QWORD *)this + 42) = 1;
    *((_QWORD *)this + 44) = 1;
    if ((_DWORD)v10)
    {
      v12 = 1;
      v13 = a2;
      v14 = v10;
      do
      {
        v15 = *(int *)v13;
        v13 = (const Espresso::layer_nd_shape *)((char *)v13 + 4);
        v12 *= v15;
        --v14;
      }
      while (v14);
      *((_QWORD *)this + 44) = v12;
    }
    v16 = v10 + 1;
    if (v11 <= (int)v10 + 1)
    {
      v18 = 1;
    }
    else
    {
      v17 = (int *)((char *)a2 + 4 * (int)v16);
      v18 = 1;
      do
      {
        v19 = *v17++;
        v18 *= v19;
        ++v16;
      }
      while (v11 > v16);
      *((_QWORD *)this + 42) = v18;
    }
    v20 = *((int *)a2 + v10);
    *((_QWORD *)this + 43) = v18 * v20;
    std::vector<unsigned long>::resize((_QWORD *)this + 36, v20);
    std::vector<float>::resize((_QWORD *)this + 39, *((int *)a2 + *((int *)this + 70)));
  }
}

void Espresso::local_correlation_kernel_cpu::~local_correlation_kernel_cpu(Espresso::local_correlation_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::local_correlation_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  int v28;
  float *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  float *v40;
  float v41;
  float *v42;
  int v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;

  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v77 = 0;
  }
  else
  {
    v55 = *v6;
    v7 = *(_QWORD *)(*v6 + 160);
    v56 = *(std::__shared_weak_count **)(v55 + 168);
    v77 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(p_shared_owners);
      while (__stxr(v58 + 1, p_shared_owners));
    }
  }
  v8 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v76 = 0;
  }
  else
  {
    v59 = *v8;
    v9 = *(_QWORD *)(*v8 + 160);
    v60 = *(std::__shared_weak_count **)(v59 + 168);
    v76 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
  }
  v10 = *(_QWORD **)a4;
  v11 = v10[2];
  if (!v11 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v12 = 0;
LABEL_12:
    v63 = 0;
    goto LABEL_13;
  }
  v51 = v10[2];
  v12 = *(_QWORD *)(v51 + 160);
  v52 = *(std::__shared_weak_count **)(v51 + 168);
  if (!v52)
    goto LABEL_12;
  v53 = (unint64_t *)&v52->__shared_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v63 = v52;
LABEL_13:
  v70 = *(int *)(v7 + 20);
  if ((_DWORD)v70)
  {
    v14 = *(_DWORD *)(v7 + 8);
    v13 = *(_DWORD *)(v7 + 12);
    v15 = (int)(v14 * v13);
    v65 = *(int *)(v7 + 16);
    v66 = *(_QWORD *)(v7 + 24);
    v64 = (int)v14 * (uint64_t)v13;
    v71 = *(float **)(v9 + 24);
    v72 = 0;
    v16 = *(int *)(v9 + 8);
    v17 = *(_DWORD *)(v9 + 12);
    v18 = *(int *)(v9 + 16);
    v19 = *(_QWORD *)(v12 + 24);
    v20 = *(_DWORD *)(v12 + 8);
    v21 = *(_DWORD *)(v12 + 12);
    v68 = 4 * v20 * (uint64_t)v21 * *(int *)(v12 + 16);
    v69 = v13;
    v67 = 4 * (int)v16 * (uint64_t)v17 * v18;
    v73 = v13;
    v74 = (int)v14;
    v22 = v14;
    v23 = 4 * v17 * (int)v16;
    do
    {
      if (v69 >= 1)
      {
        v24 = 0;
        v75 = v71;
        do
        {
          if ((int)v74 >= 1)
          {
            v25 = 0;
            v26 = v75;
            v27 = a1[71];
            if (v27 >= 0)
              v28 = a1[71];
            else
              v28 = -v27;
            do
            {
              if ((v27 & 0x80000000) == 0)
              {
                v29 = (float *)(v66 + 4 * v64 * v72 * v65 + 4 * v24 * v74 + 4 * v25);
                v30 = a1[70];
                if (v30 >= 0)
                  v31 = a1[70];
                else
                  v31 = -v30;
                v32 = -v27;
                do
                {
                  if ((v30 & 0x80000000) == 0)
                  {
                    v33 = a1[72];
                    v34 = a1[73] * v32 + v24;
                    v35 = v25 - v30 * v33;
                    v36 = -v30;
                    do
                    {
                      v37 = v25 + v33 * v36;
                      *v29 = 0.0;
                      if ((v37 & 0x80000000) == 0 && (v34 & 0x80000000) == 0)
                      {
                        v38 = v37 < v20 && v34 < v21;
                        if (v38 && (int)v18 >= 1)
                        {
                          v40 = (float *)(v19 + 4 * v20 * v34 + 4 * v35);
                          v41 = 0.0;
                          v42 = v26;
                          v43 = v18;
                          do
                          {
                            v41 = v41 + (float)(*v42 * *v40);
                            *v29 = v41;
                            v40 += v21 * v20;
                            v42 = (float *)((char *)v42 + v23);
                            --v43;
                          }
                          while (v43);
                        }
                      }
                      v29 += v15;
                      v35 += v33;
                      v44 = v36++ == v31;
                    }
                    while (!v44);
                  }
                  v44 = v32++ == v28;
                }
                while (!v44);
              }
              ++v25;
              ++v26;
            }
            while (v25 != v22);
          }
          ++v24;
          v75 += v16;
        }
        while (v24 != v73);
      }
      v19 += v68;
      v71 = (float *)((char *)v71 + v67);
      ++v72;
    }
    while (v72 != v70);
  }
  if (v63)
  {
    v45 = (unint64_t *)&v63->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v76)
  {
    v47 = (unint64_t *)&v76->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v77)
  {
    v49 = (unint64_t *)&v77->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_1917FAC80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::conv3d_kernel_cpu::~conv3d_kernel_cpu(Espresso::conv3d_kernel_cpu *this)
{
  *(_QWORD *)this = off_1E2D8CB98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  *(_QWORD *)this = off_1E2D8CB98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::conv3d_kernel_cpu::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  const float *__B;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  float *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  vDSP_Length v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_owners;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  char *v142;
  int *v143;
  uint64_t v144;
  _DWORD *v145;
  int __M;
  int __lda;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int __ldb;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  _DWORD *v183;
  std::__shared_weak_count *v184;
  __int128 v185;
  __int128 v186;
  char *v187;
  std::__shared_weak_count *v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v181 = 0;
    v182 = 0;
  }
  else
  {
    v132 = *(std::__shared_weak_count **)(*v6 + 168);
    v181 = *(_QWORD *)(*v6 + 160);
    v182 = v132;
    if (v132)
    {
      p_shared_owners = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldxr(p_shared_owners);
      while (__stxr(v134 + 1, p_shared_owners));
    }
  }
  v7 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v179 = 0;
    v180 = 0;
  }
  else
  {
    v135 = *v7;
    v8 = *(_QWORD *)(*v7 + 160);
    v136 = *(std::__shared_weak_count **)(v135 + 168);
    v179 = v8;
    v180 = v136;
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
  }
  v9 = *((_QWORD *)a1 + 55);
  (*(void (**)(uint64_t *__return_ptr, int *))(*(_QWORD *)a1 + 416))(&v177, a1);
  v139 = v9;
  (*(void (**)(uint64_t *__return_ptr, int *))(*(_QWORD *)a1 + 408))(&v175, a1);
  v185 = 0uLL;
  v10 = a1[96];
  if (v10 <= 1)
    v10 = 1;
  v148 = v10;
  v11 = *((__int16 *)a1 + 187);
  if (v11 <= 1)
    v11 = 1;
  v167 = v11;
  if (*((__int16 *)a1 + 188) <= 1)
    v12 = 1;
  else
    v12 = *((__int16 *)a1 + 188);
  v13 = *((__int16 *)a1 + 189);
  if (v13 <= 1)
    v13 = 1;
  v154 = v13;
  v155 = v12;
  v14 = *(_DWORD *)(v8 + 20);
  v15 = a1[79];
  if (v14 == v14 / v15 * v15)
    v16 = v14 / v15;
  else
    v16 = v14 / v15 + 1;
  v140 = v16;
  if (v16 >= 1)
  {
    v17 = 0;
    v143 = a1;
    while (1)
    {
      v18 = 0;
      v19 = a1[78];
      v187 = *(char **)(v181 + 8);
      LODWORD(v188) = *(_DWORD *)(v181 + 16);
      v20 = 1;
      do
      {
        v20 *= *(_DWORD *)(v181 + 8 + v18);
        v18 += 4;
      }
      while (v18 != 12);
      v21 = *(_QWORD *)(v181 + 24);
      v22 = (char *)operator new(0x60uLL);
      v23 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = &off_1E2DBEC70;
      *((_QWORD *)v22 + 3) = &off_1E2DA11D0;
      *((_OWORD *)v22 + 4) = 0u;
      *((_OWORD *)v22 + 5) = 0u;
      *((_QWORD *)v22 + 4) = v187;
      *((_DWORD *)v22 + 10) = (_DWORD)v188;
      *((_QWORD *)v22 + 6) = v21 + 4 * v19 * v17 * v20;
      v22[56] = 0;
      v183 = v22 + 24;
      v184 = (std::__shared_weak_count *)v22;
      v24 = a1[79];
      *(_QWORD *)&v186 = *(_QWORD *)(v179 + 8);
      DWORD2(v186) = *(_DWORD *)(v179 + 16);
      v25 = 1;
      do
      {
        v25 *= *(_DWORD *)(v179 + 8 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      v26 = *(_QWORD *)(v179 + 24);
      v27 = operator new(0x60uLL);
      v27[1] = 0;
      v27[2] = 0;
      v141 = v17;
      *v27 = &off_1E2DBEC70;
      v27[3] = &off_1E2DA11D0;
      *((_OWORD *)v27 + 4) = 0u;
      *((_OWORD *)v27 + 5) = 0u;
      v27[4] = v186;
      v28 = DWORD2(v186);
      *((_DWORD *)v27 + 10) = DWORD2(v186);
      v27[6] = v26 + 4 * v24 * v17 * v25;
      *((_BYTE *)v27 + 56) = 0;
      v187 = (char *)(v27 + 3);
      v188 = (std::__shared_weak_count *)v27;
      v29 = *((_DWORD *)v27 + 8);
      v161 = *((_DWORD *)v27 + 9);
      v157 = v28;
      v30 = *((unsigned int *)v22 + 8);
      v173 = *((unsigned int *)v22 + 9);
      v31 = a1[82];
      v32 = a1[81];
      v33 = a1[80];
      v34 = *((__int16 *)a1 + 184);
      v160 = *((__int16 *)a1 + 185);
      v159 = *((__int16 *)a1 + 186);
      v35 = *((__int16 *)a1 + 174);
      v172 = *((_DWORD *)v22 + 10);
      switch(v35)
      {
        case 4:
          goto LABEL_30;
        case 2:
          v50 = 0;
          v158 = 0;
          goto LABEL_42;
        case 1:
LABEL_30:
          v36 = *((unsigned __int16 *)a1 + 174);
          v37 = (v32 - 1) * v155 - v161 + (v173 - 1) * v160 + 1;
          v38 = (v33 - 1) * v167 - v29 + (v30 - 1) * v34 + 1;
          v39 = (v31 - 1) * v154 - v157 + (*((_DWORD *)v22 + 10) - 1) * v159 + 1;
          v40 = v37 & ~(v37 >> 31);
          v41 = v38 & ~(v38 >> 31);
          v42 = v39 & ~(v39 >> 31);
          v43 = v41 >> 1;
          v44 = v40 >> 1;
          v45 = v42 >> 1;
          v46 = v42 - (v42 >> 1);
          v47 = v40 - (v40 >> 1);
          v48 = v41 - (v41 >> 1);
          v49 = v36 == 1;
          if (v36 == 1)
            v50 = v43;
          else
            v50 = v48;
          if (v36 == 1)
            v51 = v44;
          else
            v51 = v47;
          HIDWORD(v158) = v51;
          if (v49)
            v52 = v45;
          else
            v52 = v46;
          break;
        default:
          v50 = *((__int16 *)a1 + 178);
          HIDWORD(v158) = *((__int16 *)a1 + 180);
          v52 = *((__int16 *)a1 + 182);
          break;
      }
      LODWORD(v158) = v52;
LABEL_42:
      v153 = (v24 - 1) / v148 + 1;
      __lda = v31 * v153 * v32 * v33;
      if (!(_QWORD)v185
        || (*(_DWORD *)(v185 + 20) == __lda ? (v53 = *(_DWORD *)(v185 + 16) == v172) : (v53 = 0),
            v53 ? (v54 = *(_DWORD *)(v185 + 12) == (_DWORD)v173) : (v54 = 0),
            v54 ? (v55 = *(_DWORD *)(v185 + 8) == (_DWORD)v30) : (v55 = 0),
            !v55))
      {
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
        v185 = 0uLL;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v186, v30, v173, v172, a1[82] * v153 * a1[80] * a1[81]);
        v59 = v186;
        v186 = 0uLL;
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
        v185 = v59;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
        if (*((_QWORD *)&v186 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      if (v177)
      {
        v66 = 0;
        __M = (v19 - 1) / v148 + 1;
        v174 = v173 * v30;
        __ldb = v173 * v30 * v172;
        v142 = v187;
        v67 = v183;
        v144 = v185;
        v168 = -v50;
        v171 = v161 * v29 * v159;
        v68 = v29 * v160;
        v156 = v29;
        v145 = v183;
        do
        {
          v151 = v67[2];
          v152 = v66;
          v149 = v67[4];
          v150 = v67[3];
          __B = *(const float **)(v144 + 24);
          v165 = a1[81];
          v166 = a1[80];
          v164 = a1[82];
          v162 = v165 * v166 * v153 * v164;
          v70 = v172;
          if (v162 >= 1)
          {
            v169 = 0;
            v170 = 0;
            v71 = *((_QWORD *)v142 + 3)
                + 4 * v66 * v153 * *((_DWORD *)v142 + 2) * *((_DWORD *)v142 + 3) * *((_DWORD *)v142 + 4);
            do
            {
              if (v70 >= 1)
              {
                v72 = 0;
                v73 = v170;
                do
                {
                  if ((int)v173 >= 1)
                  {
                    v74 = v173;
                    v75 = v73;
                    do
                    {
                      if ((int)v30 >= 1)
                        bzero((void *)&__B[v75], 4 * v30);
                      v75 += v30;
                      --v74;
                    }
                    while (v74);
                  }
                  ++v72;
                  v73 += v174;
                  v70 = v172;
                }
                while (v72 != v172);
              }
              v76 = 0;
              v77 = 0;
              v78 = SHIDWORD(v170) / v166 % v165 * v155;
              v79 = v78 - HIDWORD(v158);
              v80 = SHIDWORD(v170) / (v165 * v166) % v164 * v154;
              v81 = v80 - v158;
              while ((v172 & ~(v172 >> 31)) != v77)
              {
                v82 = v77 + 1;
                if (v81 < 0)
                  v76 = v77 + 1;
                v81 += v159;
                ++v77;
                if (v81 - v159 >= v157)
                {
                  v83 = v82 - 1;
                  goto LABEL_87;
                }
              }
              v83 = v70;
LABEL_87:
              v84 = 0;
              v85 = 0;
              while ((v173 & ~((int)v173 >> 31)) != v85)
              {
                v86 = v85 + 1;
                if (v79 < 0)
                  v84 = v85 + 1;
                v79 += v160;
                ++v85;
                if (v79 - v160 >= v161)
                {
                  v87 = v86 - 1;
                  goto LABEL_94;
                }
              }
              v87 = v173;
LABEL_94:
              v88 = 0;
              v89 = 0;
              v90 = v168 + v167 * (SHIDWORD(v170) % v166);
              while ((v30 & ~((int)v30 >> 31)) != v89)
              {
                v91 = v89 + 1;
                if (v90 < 0)
                  v88 = v89 + 1;
                v90 += v34;
                ++v89;
                if (v90 - v34 >= v156)
                {
                  v92 = v91 - 1;
                  goto LABEL_101;
                }
              }
              v92 = v30;
LABEL_101:
              if (v76 < v83)
              {
                v93 = v30 * (v84 + v173 * (v76 + v169));
                v94 = v168
                    + v156
                    * (v161 * (SHIDWORD(v170) / v164 / v165 / v166 * v157 - v158 + v159 * v76 + v80)
                     - HIDWORD(v158)
                     + v160 * v84
                     + v78)
                    + v34 * v88
                    + v167 * (SHIDWORD(v170) % v166);
                do
                {
                  v95 = v94;
                  v96 = v93;
                  v97 = v84;
                  if (v84 < v87)
                  {
                    do
                    {
                      if (v88 < v92)
                      {
                        v98 = (float *)&__B[v88 + (uint64_t)v96];
                        v99 = v95;
                        v100 = v92 - (uint64_t)v88;
                        do
                        {
                          *v98++ = *(float *)(v71 + 4 * v99);
                          v99 += v34;
                          --v100;
                        }
                        while (v100);
                      }
                      ++v97;
                      v96 += v30;
                      v95 += v68;
                    }
                    while (v97 != v87);
                  }
                  ++v76;
                  v93 += v174;
                  v94 += v171;
                }
                while (v76 != v83);
              }
              v169 += v70;
              LODWORD(v170) = v170 + __ldb;
              ++HIDWORD(v170);
            }
            while (HIDWORD(v170) != v162);
          }
          v67 = v145;
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, __M, __ldb, __lda, 1.0, (const float *)(*(_QWORD *)(v177 + 32) + 4 * v152 * __M * v153 * v166 * v165 * v164), __lda, __B, __ldb, 0.0, (float *)(*((_QWORD *)v145 + 3) + 4 * v151 * v152 * __M * v150 * v149), __ldb);
          v66 = v152 + 1;
          a1 = v143;
        }
        while (v152 + 1 != v148);
      }
      if (v175 && a1[78] >= 1)
      {
        v101 = 0;
        v102 = 0;
        v103 = v183;
        v104 = (int)v103[3] * (uint64_t)(int)v103[2] * (int)v183[4];
        do
        {
          LODWORD(v186) = 0;
          LODWORD(v186) = *(_DWORD *)(*(_QWORD *)(v175 + 16) + 4 * v102);
          vDSP_vsadd((const float *)(*((_QWORD *)v103 + 3) + v101), 1, (const float *)&v186, (float *)(*((_QWORD *)v103 + 3) + v101), 1, v104);
          ++v102;
          v101 += 4 * v104;
        }
        while (v102 < a1[78]);
      }
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
      v185 = 0uLL;
      if (v105)
      {
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = v188;
      if (v188)
      {
        v109 = (unint64_t *)&v188->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = v184;
      if (v184)
      {
        v112 = (unint64_t *)&v184->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v17 = v141 + 1;
      if (v141 + 1 == v140)
      {
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
        if (*((_QWORD *)&v185 + 1))
        {
          v115 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        break;
      }
    }
  }
  v117 = v176;
  if (v176)
  {
    v118 = (unint64_t *)&v176->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v178;
  if (v178)
  {
    v121 = (unint64_t *)&v178->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (!v139)
  {
    v185 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 110), &v185);
    v129 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
    if (*((_QWORD *)&v185 + 1))
    {
      v130 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
  }
  v123 = v180;
  if (v180)
  {
    v124 = (unint64_t *)&v180->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v182;
  if (v182)
  {
    v127 = (unint64_t *)&v182->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
}

void sub_1917FB984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void Espresso::conv3d_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int *v14;
  unsigned __int8 *v15;
  int v17;
  int v18;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *height;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *p_shared_owners;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  vImagePixelCount v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  vImagePixelCount v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::string v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105[2];
  void *data;
  vImagePixelCount v107;
  uint64_t v108[2];
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::string v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114[2];
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  uint64_t v120;
  vImage_Buffer dest;
  vImage_Buffer src;

  v119 = 0;
  v120 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v119, *a6, a6[1]);
  if (*(int *)(a1 + 384) <= 1)
    v10 = 1;
  else
    v10 = *(_DWORD *)(a1 + 384);
  v11 = *(_DWORD *)(a1 + 316) / v10;
  if (*((char *)a3 + 23) < 0)
  {
    v15 = a3[1];
    if (v15 != (unsigned __int8 *)1)
    {
      if (v15 != (unsigned __int8 *)5)
        goto LABEL_152;
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        v14 = (int *)*a3;
        goto LABEL_23;
      }
      goto LABEL_66;
    }
    v29 = **a3;
    if (v29 == 87)
      goto LABEL_79;
    if (v29 != 98)
      goto LABEL_152;
    goto LABEL_46;
  }
  v12 = *((unsigned __int8 *)a3 + 23);
  if (v12 == 1)
  {
    v28 = *(unsigned __int8 *)a3;
    if (v28 != 98)
    {
      if (v28 != 87)
        goto LABEL_152;
LABEL_79:
      v117 = v119;
      v118 = (std::__shared_weak_count *)v120;
      if (v120)
      {
        v51 = (unint64_t *)(v120 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v117, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v11, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 440, (__int128 *)&src);
      height = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v54 = (unint64_t *)(src.height + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      v40 = v118;
      if (!v118)
        goto LABEL_152;
      p_shared_owners = (unint64_t *)&v118->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      goto LABEL_150;
    }
LABEL_46:
    v30 = (std::__shared_weak_count *)v120;
    v108[0] = v119;
    v108[1] = v120;
    if (v120)
    {
      v31 = (unint64_t *)(v120 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v108, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v30)
    {
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    data = src.data;
    v107 = src.height;
    if (src.height)
    {
      v35 = (unint64_t *)(src.height + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 392))(a1, &data);
    v37 = (std::__shared_weak_count *)v107;
    if (v107)
    {
      v38 = (unint64_t *)(v107 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_152;
    v41 = (unint64_t *)(src.height + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
LABEL_150:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_152;
  }
  if (v12 != 5)
    goto LABEL_152;
  v13 = *(_DWORD *)a3 == 828792663 && *((_BYTE *)a3 + 4) == 54;
  v14 = (int *)a3;
  if (v13)
  {
LABEL_66:
    v43 = (std::__shared_weak_count *)v120;
    v114[0] = v119;
    v114[1] = v120;
    if (v120)
    {
      v44 = (unint64_t *)(v120 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v114, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v11, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v43)
    {
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v48 = *(std::__shared_weak_count **)(a1 + 16);
    v112 = *(_QWORD *)(a1 + 8);
    v113 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v111, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v111 = *(std::string *)a3;
    v109 = v115;
    v110 = v116;
    if (v116)
    {
      v57 = (unint64_t *)&v116->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,5>(a1, &v112, (__int128 *)&v111, &v109);
    v59 = v110;
    if (v110)
    {
      v60 = (unint64_t *)&v110->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v62 = v113;
    if (v113)
    {
      v63 = (unint64_t *)&v113->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&src, v115 + 8);
    v65 = a1 + 440;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v65, (__int128 *)&src);
    v66 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v67 = (unint64_t *)(src.height + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = 0;
    v70 = *(void **)(*(_QWORD *)v65 + 32);
    v71 = *(int *)(v115 + 8);
    do
    {
      v71 *= *(int *)(v115 + 12 + v69);
      v69 += 4;
    }
    while (v69 != 16);
    src.data = *(void **)(v115 + 32);
    src.height = 1;
    src.width = v71;
    src.rowBytes = 2 * v71;
    dest.data = v70;
    dest.height = 1;
    dest.width = v71;
    dest.rowBytes = 4 * v71;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v40 = v116;
    if (!v116)
      goto LABEL_152;
    v72 = (unint64_t *)&v116->__shared_owners_;
    do
      v42 = __ldaxr(v72);
    while (__stlxr(v42 - 1, v72));
    goto LABEL_150;
  }
LABEL_23:
  v17 = *v14;
  v18 = *((unsigned __int8 *)v14 + 4);
  if (v17 == 828792674 && v18 == 54)
  {
    v20 = (std::__shared_weak_count *)v120;
    v105[0] = v119;
    v105[1] = v120;
    if (v120)
    {
      v21 = (unint64_t *)(v120 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v105, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v25 = *(std::__shared_weak_count **)(a1 + 16);
    v103 = *(_QWORD *)(a1 + 8);
    v104 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v102 = *(std::string *)a3;
    v100 = v115;
    v101 = v116;
    if (v116)
    {
      v73 = (unint64_t *)&v116->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v103, (__int128 *)&v102, &v100);
    v75 = v101;
    if (v101)
    {
      v76 = (unint64_t *)&v101->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    v78 = v104;
    if (v104)
    {
      v79 = (unint64_t *)&v104->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v98, (int *)(v115 + 8));
    v81 = v98;
    v82 = *(void **)(v98 + 16);
    v83 = *(int *)(v115 + 8);
    src.data = *(void **)(v115 + 16);
    src.height = 1;
    src.width = v83;
    src.rowBytes = 2 * v83;
    dest.data = v82;
    dest.height = 1;
    dest.width = v83;
    dest.rowBytes = 4 * v83;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v96 = v81;
    v97 = v99;
    if (v99)
    {
      v84 = (unint64_t *)&v99->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v96);
    v86 = v97;
    if (v97)
    {
      v87 = (unint64_t *)&v97->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v89 = v99;
    if (v99)
    {
      v90 = (unint64_t *)&v99->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v40 = v116;
    if (v116)
    {
      v92 = (unint64_t *)&v116->__shared_owners_;
      do
        v42 = __ldaxr(v92);
      while (__stlxr(v42 - 1, v92));
      goto LABEL_150;
    }
  }
LABEL_152:
  v93 = (std::__shared_weak_count *)v120;
  if (v120)
  {
    v94 = (unint64_t *)(v120 + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1917FC238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

BOOL Espresso::conv3d_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((_QWORD *)a2 + 1) != 1)
    return 0;
  v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::slice_update_kernel_cpu::~slice_update_kernel_cpu(Espresso::slice_update_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::slice_update_kernel_cpu::__launch(unsigned int *a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD **v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  Espresso *v44;
  vDSP_Length v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  Espresso *v49;
  float *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  std::string::size_type v71;
  std::string *v72;
  std::string *v73;
  int v74;
  std::string::size_type v75;
  std::string *v76;
  std::string *v77;
  vDSP_Length __N;
  uint64_t v79;
  uint64_t v80;
  int v81;
  std::string v82;
  unsigned int v83[5];
  int v84;
  std::string v85;
  void *__p;
  void *v87;
  _DWORD v88[5];
  int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;

  v7 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v94 = 0;
    v95 = 0;
  }
  else
  {
    v60 = *(std::__shared_weak_count **)(*v7 + 168);
    v94 = *(_QWORD *)(*v7 + 160);
    v95 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(p_shared_owners);
      while (__stxr(v62 + 1, p_shared_owners));
    }
  }
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x11uLL
    && (v9 = v8[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v65 = v8[2];
    v67 = *(_QWORD *)(v65 + 160);
    v66 = *(std::__shared_weak_count **)(v65 + 168);
    v92 = v67;
    v93 = v66;
    if (v66)
    {
      v68 = (unint64_t *)&v66->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
  }
  else
  {
    v92 = 0;
    v93 = 0;
  }
  if (a1[74] == 1)
  {
    v10 = *(uint64_t **)a4;
    v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v11 != 48)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("slice_update_kernel_cpu expects 3 arguments when slice_param.mode == SLICE_STATIC_SIZE_DYNAMIC_START. Got %zu", v11 >> 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v10[4] + 32))(v10[4]);
    v12 = v10[4];
    v13 = *(_QWORD *)(v12 + 160);
    v14 = *(std::__shared_weak_count **)(v12 + 168);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v17 = (int)**(float **)(v13 + 24);
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      v17 = (int)**(float **)(v13 + 24);
    }
  }
  else
  {
    v17 = a1[71];
  }
  v21 = a3;
  v20 = *a3;
  if (v21[1] == v20 || !*v20 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20))
  {
    v22 = 0;
    v23 = 0;
    v90 = 0;
    v91 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(*v20 + 160);
    v22 = *(std::__shared_weak_count **)(*v20 + 168);
    v90 = v23;
    v91 = v22;
    if (v22)
    {
      v63 = (unint64_t *)&v22->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v85, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v88, (const Espresso::layer_shape *)&v85, 0);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v85, *(_QWORD *)(*(_QWORD *)a4 + 16));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v83, (const Espresso::layer_shape *)&v85, 0);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  if (v84 != v89)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inputs' ranks do not match");
  v24 = a1[73];
  if (v24 <= 0)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("stride = %d <= 0 is not allowed", a1[73]);
  v25 = a1[70];
  v26 = v84 - 1 - v25;
  v79 = v83[v26];
  v27 = a1;
  if (v84)
  {
    v28 = 0;
    v29 = v84 - 1;
    v30 = 1;
    v31 = 1;
    do
    {
      if (v25 == v28)
      {
        v32 = a1[74];
        if (v32 == 1)
        {
          v33 = a1[75];
        }
        else
        {
          v36 = a1[72];
          if (v36 <= 0)
            v37 = 0;
          else
            v37 = v88[v29];
          v33 = v88[v29] + v36 - (a1[71] + v37);
        }
        v38 = v83[v29] * v24 - v33;
        if (v24 <= v38 || v38 < 0)
        {
          if (v32 == 1)
          {
            Espresso::layer_nd_shape::repr(&v85, (uint64_t)v88);
            v74 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
            v75 = v85.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::repr(&v82, (uint64_t)v83);
            if (v74 >= 0)
              v76 = &v85;
            else
              v76 = (std::string *)v75;
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &v82;
            else
              v77 = (std::string *)v82.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>("invalide input shapes: %s, %s for mode = SLICE_STATIC_SIZE_DYNAMIC_START, stride = %d, start = %d, static_size = %d, axis = %d", (uint64_t)v76, (uint64_t)v77, a1[73], v17, a1[75], a1[70]);
          }
          if (!v32)
          {
            Espresso::layer_nd_shape::repr(&v85, (uint64_t)v88);
            v70 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
            v71 = v85.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::repr(&v82, (uint64_t)v83);
            if (v70 >= 0)
              v72 = &v85;
            else
              v72 = (std::string *)v71;
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = &v82;
            else
              v73 = (std::string *)v82.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>("invalide input shapes: %s, %s for mode = SLICE_STATIC, stride = %d, start = %d, end = %d, axis = %d", (uint64_t)v72, (uint64_t)v73, a1[73], a1[71], a1[72], a1[70]);
          }
        }
      }
      else
      {
        v34 = v83[v29];
        v35 = v88[v29];
        if (v34 != v35)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int const&,int const&>(v28, v25, v34, v35);
        if (v28 < (int)v25)
          v30 *= v34;
        else
          v31 *= v34;
      }
      ++v28;
      --v29;
    }
    while (v84 != v28);
  }
  else
  {
    v31 = 1;
    v30 = 1;
  }
  v39 = 0;
  v40 = v88[v26];
  v41 = *(int *)(v94 + 8);
  do
  {
    v41 *= *(int *)(v94 + 12 + v39);
    v39 += 4;
  }
  while (v39 != 12);
  memcpy(*(void **)(v23 + 24), *(const void **)(v94 + 24), 4 * v41);
  if (v31 >= 1)
  {
    v42 = 0;
    v43 = v30 * v24;
    v44 = (Espresso *)(*(_QWORD *)(v23 + 24) + 4 * (int)v17 * v30);
    v45 = v30;
    __N = v30 * (int)v79;
    v46 = 4 * v30;
    v47 = *(float **)(v92 + 24);
    v80 = 4 * v40 * v30;
    v48 = 4 * v43;
    v81 = v31;
    do
    {
      if (v27[73] == 1)
      {
        Espresso::update_slice_func(v44, v47, (float *)v27[76], __N);
      }
      else
      {
        v49 = v44;
        v50 = v47;
        v51 = v79;
        if ((int)v79 >= 1)
        {
          do
          {
            Espresso::update_slice_func(v49, v50, (float *)v27[76], v45);
            v50 = (float *)((char *)v50 + v46);
            v49 = (Espresso *)((char *)v49 + v48);
            --v51;
          }
          while (v51);
        }
      }
      v47 += __N;
      v44 = (Espresso *)((char *)v44 + v80);
      ++v42;
    }
    while (v42 != v81);
    v22 = v91;
  }
  if (v22)
  {
    v52 = (unint64_t *)&v22->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v54 = v93;
  if (v93)
  {
    v55 = (unint64_t *)&v93->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v95;
  if (v95)
  {
    v58 = (unint64_t *)&v95->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_1917FC9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 104);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, a2, a3, a4, a5, a6, a7);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int const&,int const&>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("input shapes at axis %d != p.axis = %d do not match %d vs %d", a1, a2, a3, a4);
}

void Espresso::update_slice_func(Espresso *this, float *__B, float *a3, vDSP_Length __N)
{
  switch((int)a3)
  {
    case 0:
      memcpy(this, __B, 4 * __N);
      break;
    case 1:
      vDSP_vadd((const float *)this, 1, __B, 1, (float *)this, 1, __N);
      break;
    case 2:
      vDSP_vsub(__B, 1, (const float *)this, 1, (float *)this, 1, __N);
      break;
    case 3:
      vDSP_vmul((const float *)this, 1, __B, 1, (float *)this, 1, __N);
      break;
    case 4:
      vDSP_vdiv(__B, 1, (const float *)this, 1, (float *)this, 1, __N);
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("unsupported update operation %d", (uint64_t)a3);
  }
}

void Espresso::static_quantize_kernel_cpu::~static_quantize_kernel_cpu(Espresso::static_quantize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::static_quantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD **a4)
{
  char v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  vDSP_Length v15;
  uint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  vDSP_Length v19;
  uint64_t v20;
  vDSP_Length v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  float __B;
  float __C;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  int32x4_t v44;
  int v45;
  void *__p;
  void *v47;

  Espresso::abstract_blob_container::shape((char *)&v43, **a3);
  v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v44)));
  if (v45 == -1)
    v8 = v44.i32[3] != 1;
  else
    v8 = v45 == 5;
  if (v44.i32[3])
    v8 = 0;
  if ((v7 & 1) == 0 && v43 >= 1 && !v8)
  {
    Espresso::get_cpu_blob_8((uint64_t)*a3, &v41);
    v9 = *a4;
    if (*v9 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
    {
      v31 = *v9;
      v10 = *(_QWORD *)(*v9 + 160);
      v32 = *(std::__shared_weak_count **)(v31 + 168);
      v39 = v10;
      v40 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v39 = 0;
      v40 = 0;
    }
    v11 = 0;
    __C = 127.1;
    __B = -127.1;
    v12 = *(_DWORD *)(v10 + 8);
    do
    {
      v12 *= *(_DWORD *)(v10 + 12 + v11);
      v11 += 4;
    }
    while (v11 != 12);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(&v35, v12);
    v13 = 0;
    v14 = v35;
    v15 = *(int *)(v10 + 8);
    do
    {
      v15 *= *(int *)(v10 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    vDSP_vsmul(*(const float **)(v10 + 24), 1, (const float *)(a1 + 284), *(float **)(v35 + 24), 1, v15);
    if (*(float *)(a1 + 288) != 0.0)
    {
      v16 = 0;
      v17 = *(int *)(v10 + 8);
      do
      {
        v17 *= *(int *)(v10 + 12 + v16);
        v16 += 4;
      }
      while (v16 != 12);
      vDSP_vsadd(*(const float **)(v14 + 24), 1, (const float *)(a1 + 288), *(float **)(v14 + 24), 1, v17);
    }
    v18 = 0;
    v19 = *(int *)(v10 + 8);
    do
    {
      v19 *= *(int *)(v10 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    vDSP_vclip(*(const float **)(v14 + 24), 1, &__B, &__C, *(float **)(v14 + 24), 1, v19);
    v20 = 0;
    v21 = *(int *)(v14 + 8);
    do
    {
      v21 *= *(int *)(v14 + 12 + v20);
      v20 += 4;
    }
    while (v20 != 12);
    vDSP_vfixr8(*(const float **)(v14 + 24), 1, *(char **)(v41 + 24), 1, v21);
    v22 = v36;
    if (v36)
    {
      v23 = (unint64_t *)&v36->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v40;
    if (v40)
    {
      v26 = (unint64_t *)&v40->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v42;
    if (v42)
    {
      v29 = (unint64_t *)&v42->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
}

void sub_1917FCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::static_quantize_kernel_cpu::blob_options(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;

  if (a2 || !a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBE228;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((_BYTE *)v5 + 88) = 0;
    v5[10] = 0;
    a3[1] = v5;
    *((_BYTE *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 2;
    v5[3] = &off_1E2D9B4D8;
    *a3 = v5 + 3;
  }
}

void Espresso::static_dequantize_kernel_cpu::~static_dequantize_kernel_cpu(Espresso::static_dequantize_kernel_cpu *this)
{
  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::static_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  char v7;
  BOOL v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  float *v21;
  vDSP_Length v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  uint64_t v26;
  vDSP_Length v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[5];
  void *__p;
  void *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  int v100;
  int32x4_t v101;
  int v102;
  void *v103;
  void *v104;

  Espresso::abstract_blob_container::shape((char *)&v100, **a3);
  v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v101)));
  if (v102 == -1)
    v8 = v101.i32[3] != 1;
  else
    v8 = v102 == 5;
  if (v101.i32[3])
    v8 = 0;
  if ((v7 & 1) == 0 && v100 >= 1 && !v8)
  {
    v9 = *(_QWORD **)a4;
    if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4
      && *v9
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9) == 3)
    {
      v11 = *(_QWORD *)(*v9 + 208);
      v10 = *(std::__shared_weak_count **)(*v9 + 216);
      v98 = v11;
      v99 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
    }
    else
    {
      v11 = 0;
      v98 = 0;
      v99 = 0;
    }
    v15 = a4;
    v14 = *(_QWORD **)a4;
    if (*(_QWORD **)(v15 + 8) == v14
      || !*v14
      || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14))
    {
      v16 = 0;
      v96 = 0;
      v97 = 0;
    }
    else
    {
      v33 = *v14;
      v16 = *(_QWORD *)(*v14 + 160);
      v34 = *(std::__shared_weak_count **)(v33 + 168);
      v96 = v16;
      v97 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
    }
    if (!(v11 | v16))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("static_dequantize_kernel_cpu: Atleast one bottom expected");
    v17 = *a3;
    v18 = **a3;
    if (v18 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18))
    {
      v30 = *v17;
      v20 = *(_QWORD *)(*v17 + 160);
      v19 = *(std::__shared_weak_count **)(v30 + 168);
      v94 = v20;
      v95 = v19;
      if (v19)
      {
        v31 = (unint64_t *)&v19->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v94 = 0;
      v95 = 0;
    }
    v21 = *(float **)(v20 + 24);
    v22 = *(int *)(v20 + 8);
    v23 = 0;
    if (v11)
    {
      do
      {
        v22 *= *(int *)(v20 + 12 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      vDSP_vflt32(*(const int **)(v11 + 24), 1, *(float **)(v20 + 24), 1, v22);
      v24 = 0;
      v25 = *(const float **)(v20 + 24);
      v22 = *(int *)(v20 + 8);
      do
      {
        v22 *= *(int *)(v20 + 12 + v24);
        v24 += 4;
      }
      while (v24 != 12);
      v21 = *(float **)(v20 + 24);
    }
    else
    {
      v25 = *(const float **)(v16 + 24);
      do
      {
        v22 *= *(int *)(v20 + 12 + v23);
        v23 += 4;
      }
      while (v23 != 12);
    }
    vDSP_vsmul(v25, 1, (const float *)(a1 + 308), v21, 1, v22);
    if (*(float *)(a1 + 312) != 0.0)
    {
      v26 = 0;
      v27 = *(int *)(v20 + 8);
      do
      {
        v27 *= *(int *)(v20 + 12 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      vDSP_vsadd(*(const float **)(v20 + 24), 1, (const float *)(a1 + 312), *(float **)(v20 + 24), 1, v27);
    }
    Espresso::abstract_blob_container::shape((char *)v85, **a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v88, (const Espresso::layer_shape *)v85, 0);
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    if (v93 > 3)
    {
      if (v93 == 4)
      {
        v28 = v88;
        v29 = v90 * (uint64_t)v91 * v89;
      }
      else
      {
        if (v93 != 5)
        {
          v29 = 0;
          v28 = 0;
LABEL_63:
          memset(&v85[1], 0, 24);
          v39 = *(_DWORD *)(a1 + 332);
          v71 = 0x100000001;
          v72 = 1;
          v40 = *(_QWORD *)(a1 + 324);
          v73 = *(_QWORD *)(a1 + 316);
          v74 = v40;
          v75 = v39;
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = -1;
          __asm { FMOV            V1.2S, #1.0 }
          v80 = _D1;
          v81 = 0;
          v83 = 0u;
          v82 = v85[0];
          v84 = 0;
          v69 = v20;
          v70 = v19;
          if (v19)
          {
            v46 = (unint64_t *)&v19->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = 0;
          v49 = *(_DWORD *)(v20 + 8);
          do
          {
            v49 *= *(_DWORD *)(v20 + 12 + v48);
            v48 += 4;
          }
          while (v48 != 12);
          v50 = *(_QWORD *)(a1 + 336);
          v51 = *(std::__shared_weak_count **)(a1 + 344);
          v68[0] = v50;
          v68[1] = v51;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v71, &v69, v49, (uint64_t)v68, v29, v28);
          if (v51)
          {
            v54 = (unint64_t *)&v51->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v56 = v70;
          if (v70)
          {
            v57 = (unint64_t *)&v70->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = v95;
          if (v95)
          {
            v60 = (unint64_t *)&v95->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v62 = v97;
          if (v97)
          {
            v63 = (unint64_t *)&v97->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v65 = v99;
          if (v99)
          {
            v66 = (unint64_t *)&v99->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          goto LABEL_96;
        }
        v28 = v89 * (uint64_t)v88;
        v29 = v91 * (uint64_t)v92 * v90;
      }
    }
    else
    {
      switch(v93)
      {
        case 1u:
          v28 = 1;
          if (v93)
            goto LABEL_56;
          goto LABEL_58;
        case 2u:
          v28 = v88;
          if (!v93)
            goto LABEL_58;
          goto LABEL_56;
        case 3u:
          v28 = v89 * (uint64_t)v88;
          if (!v93)
            goto LABEL_58;
          goto LABEL_56;
        case 4u:
          v28 = v89 * (uint64_t)v88 * v90;
          if (!v93)
            goto LABEL_58;
          goto LABEL_56;
        case 5u:
          v28 = v89 * (uint64_t)v88 * v90 * v91;
          if (v93)
            goto LABEL_56;
          goto LABEL_58;
        default:
          v28 = 0;
          if (v93)
LABEL_56:
            v29 = *(&v88 + (int)v93 - 1);
          else
LABEL_58:
            v29 = 0;
          break;
      }
    }
    if (*(_QWORD *)(a1 + 336) && v28)
    {
      v37 = 0;
      v38 = v28;
      do
      {
        vDSP_vadd((const float *)(*(_QWORD *)(v20 + 24) + v37), 1, *(const float **)(*(_QWORD *)(a1 + 336) + 16), 1, (float *)(*(_QWORD *)(v20 + 24) + v37), 1, v29);
        v37 += 4 * v29;
        --v38;
      }
      while (v38);
    }
    goto LABEL_63;
  }
LABEL_96:
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_1917FD56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 160);
  v38 = *(void **)(v36 - 104);
  if (v38)
  {
    *(_QWORD *)(v36 - 96) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

_BYTE *Espresso::static_dequantize_kernel_cpu::blob_options@<X0>(char a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _BYTE *result;
  _BYTE *v8;

  result = getenv("ESPRESSO_USE_I32_OUTPUT");
  if (a2 || (a1 & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v8 = result;
    result = operator new(0x70uLL);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = &off_1E2DBE228;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_QWORD *)result + 3) = &off_1E2D9B4D8;
    *((_DWORD *)result + 12) = 1065353216;
    *((_QWORD *)result + 7) = 0x1FFFFFFFFLL;
    *((_QWORD *)result + 12) = 0;
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 9) = 0;
    result[88] = 0;
    *((_QWORD *)result + 10) = 0;
    *a3 = result + 24;
    a3[1] = result;
    result[32] = 1;
    if (v8)
    {
      if (*v8 != 49)
        *((_DWORD *)result + 9) = 3;
    }
  }
  return result;
}

void Espresso::fused_convolution_grad_kernel_cpu::~fused_convolution_grad_kernel_cpu(Espresso::fused_convolution_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::fused_convolution_grad_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_convolution_grad: Layer supposed to be unpacked on CPU engine");
}

void Espresso::fused_inner_product_grad_kernel_cpu::~fused_inner_product_grad_kernel_cpu(Espresso::fused_inner_product_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::fused_inner_product_grad_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_inner_product_grad: Layer supposed to be unpacked on CPU engine");
}

void Espresso::deconv3d_kernel_cpu::~deconv3d_kernel_cpu(Espresso::deconv3d_kernel_cpu *this)
{
  *(_QWORD *)this = off_1E2D8CD78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  *(_QWORD *)this = off_1E2D8CD78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::deconv3d_kernel_cpu::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int32x2_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int32x2_t v32;
  int32x2_t v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  std::__shared_weak_count_vtbl *v51;
  unint64_t *v52;
  uint64_t v53;
  const float *__B;
  const float *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int shared_owners;
  int v61;
  int32x2_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  std::vector<int>::pointer v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  float v98;
  uint64_t v99;
  vDSP_Length v100;
  float *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *end;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  float *__A;
  int v134;
  int32x2_t *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int *v139;
  std::__shared_weak_count *v140;
  void *v141;
  _QWORD *v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  int32x2_t v146;
  uint64_t v147;
  int8x8_t v148;
  uint64_t v149;
  int __ldb;
  int v151;
  int v152;
  int __lda;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  std::vector<int>::value_type v167;
  std::vector<int> __x;
  int32x2_t v169;
  int v170;
  _DWORD v171[3];
  int32x2_t v172;
  unsigned int v173;
  int32x2_t v174;
  int v175;
  _BYTE v176[4];
  int v177;
  int32x2_t v178;
  int v179;
  int v180;
  int32x2_t v181;
  int v182;
  std::vector<int> v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v6
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
  {
    v7 = 0;
    v160 = 0;
    v161 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*v6 + 160);
    v124 = *(std::__shared_weak_count **)(*v6 + 168);
    v160 = v7;
    v161 = v124;
    if (v124)
    {
      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldxr(p_shared_owners);
      while (__stxr(v126 + 1, p_shared_owners));
    }
  }
  v8 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v158 = 0;
    v159 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v127 = *(std::__shared_weak_count **)(*v8 + 168);
    v158 = v9;
    v159 = v127;
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
  }
  v10 = *((_QWORD *)a1 + 55);
  (*(void (**)(uint64_t *__return_ptr, int *))(*(_QWORD *)a1 + 416))(&v156, a1);
  v130 = v10;
  (*(void (**)(uint64_t *__return_ptr, int *))(*(_QWORD *)a1 + 408))(&v154, a1);
  v11 = (int8x8_t *)(a1 + 81);
  v166 = 0uLL;
  v12 = a1[96];
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  v14 = *(_DWORD *)(v9 + 20);
  v15 = a1[79];
  if (v14 == v14 / v15 * v15)
    v16 = v14 / v15;
  else
    v16 = v14 / v15 + 1;
  v17 = a1[80];
  v18 = v17 * a1[78];
  v19 = *(_DWORD *)(v9 + 8);
  v20 = *((__int16 *)a1 + 187);
  if (v20 > 1)
    v17 = (v17 - 1) * v20 + 1;
  v151 = v17;
  v21 = *((__int16 *)a1 + 184);
  v22 = *(_DWORD *)(v7 + 8);
  v148 = *v11;
  v23 = v7;
  v24 = *(_QWORD *)(v9 + 12);
  v146 = *(int32x2_t *)(v9 + 12);
  v25 = *((__int16 *)a1 + 188);
  v139 = a1;
  v26 = *((__int16 *)a1 + 189);
  v27 = *((__int16 *)a1 + 185);
  v135 = (int32x2_t *)v11;
  v136 = v13;
  v144 = v11[6].i16[0];
  v28 = *(int32x2_t *)(v23 + 12);
  __lda = (int)(v18 * *(_QWORD *)v11 * HIDWORD(*(unint64_t *)v11)) / (int)v13;
  v134 = __lda * v13;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v183, v19, v146.i32[0], v146.i32[1], __lda * v13);
  v166 = *(_OWORD *)&v183.__begin_;
  if (v16 < 1)
  {
    end = (std::__shared_weak_count *)v183.__end_;
    v34 = v139;
  }
  else
  {
    v131 = v16;
    v29 = 0;
    v30 = (v151 + (v19 - 1) * v21 - v22) & ~((v151 + (v19 - 1) * v21 - v22) >> 31);
    v31 = v24 * v19 * v146.i32[1];
    __ldb = v31;
    v152 = v15 / (int)v136;
    v132 = v30 >> 1;
    v32 = (int32x2_t)vshr_n_u32((uint32x2_t)vmax_s32(vmla_s32(vsub_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v26, v25), (int32x2_t)0x100000001), (int8x8_t)vmla_s32((int32x2_t)0x100000001, vadd_s32((int32x2_t)v148, (int32x2_t)-1), (int32x2_t)__PAIR64__(v26, v25)), v148), v28), vadd_s32(v146, (int32x2_t)-1), (int32x2_t)__PAIR64__(v144, v27)), 0), 1uLL);
    v149 = 4 * v31 * __lda;
    __A = *(float **)(v156 + 32);
    v145 = 4 * __lda * (v15 / (int)v136);
    v147 = 4 * v31 * (v15 / (int)v136);
    v33 = vrev64_s32(v32);
    v34 = v139;
    do
    {
      v35 = 0;
      v36 = v34[78];
      v183.__begin_ = *(std::vector<int>::pointer *)(v160 + 8);
      LODWORD(v183.__end_) = *(_DWORD *)(v160 + 16);
      v37 = 1;
      do
      {
        v38 = v37;
        v39 = *(_DWORD *)(v160 + 8 + v35);
        v37 *= v39;
        v35 += 4;
      }
      while (v35 != 12);
      v40 = *(_QWORD *)(v160 + 24);
      v41 = operator new(0x60uLL);
      v42 = 0;
      v143 = v29;
      v137 = v36 * v29;
      v138 = v40;
      v41[1] = 0;
      v41[2] = 0;
      *v41 = &off_1E2DBEC70;
      v41[3] = &off_1E2DA11D0;
      *((_OWORD *)v41 + 4) = 0u;
      *((_OWORD *)v41 + 5) = 0u;
      v41[4] = v183.__begin_;
      *((_DWORD *)v41 + 10) = v183.__end_;
      v141 = (void *)(v40 + 4 * v36 * v29 * v37);
      v142 = v41;
      v41[6] = v141;
      *((_BYTE *)v41 + 56) = 0;
      v164 = (char *)(v41 + 3);
      v165 = (std::__shared_weak_count *)v41;
      v43 = v34[79];
      v183.__begin_ = *(std::vector<int>::pointer *)(v158 + 8);
      LODWORD(v183.__end_) = *(_DWORD *)(v158 + 16);
      v44 = 1;
      do
      {
        v45 = v44;
        v46 = *(_DWORD *)(v158 + 8 + v42);
        v44 *= v46;
        v42 += 4;
      }
      while (v42 != 12);
      v47 = *(_QWORD *)(v158 + 24);
      v48 = (std::__shared_weak_count *)operator new(0x60uLL);
      v49 = 0;
      v50 = v43 * v143;
      v51 = (std::__shared_weak_count_vtbl *)(v47 + 4 * v43 * v143 * v44);
      v48->__shared_owners_ = 0;
      v52 = (unint64_t *)&v48->__shared_owners_;
      v48->__shared_weak_owners_ = 0;
      v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
      v48[1].__shared_owners_ = (uint64_t)v183.__begin_;
      LODWORD(v48[1].__shared_weak_owners_) = v183.__end_;
      v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11D0;
      *(_OWORD *)&v48[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v48[3].__shared_owners_ = 0u;
      v48[2].__vftable = v51;
      LOBYTE(v48[2].__shared_owners_) = 0;
      v162 = v48 + 1;
      v163 = v48;
      v140 = v48;
      v53 = v166;
      __B = (const float *)(v47 + 4 * v50 * v45 * v46);
      v55 = __A;
      v56 = v136;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, __lda, __ldb, v152, 1.0, v55, __lda, __B, __ldb, 0.0, (float *)(*(_QWORD *)(v53 + 24) + v49), __ldb);
        v49 += v149;
        __B = (const float *)((char *)__B + v147);
        v55 = (const float *)((char *)v55 + v145);
        --v56;
      }
      while (v56);
      v57 = 0;
      v58 = v139[78];
      v181 = vrev64_s32(*(int32x2_t *)((char *)v142 + 36));
      v59 = *((_DWORD *)v142 + 8);
      v180 = v58;
      v182 = v59;
      v178 = vrev64_s32(*(int32x2_t *)((char *)&v140[1].__shared_owners_ + 4));
      shared_owners = v140[1].__shared_owners_;
      v177 = v134;
      v179 = shared_owners;
      v174 = vrev64_s32(*v135);
      v175 = v139[80];
      v172 = v33;
      v173 = v132;
      v61 = *((__int16 *)v139 + 185);
      v171[0] = *((__int16 *)v139 + 186);
      v171[1] = v61;
      v171[2] = *((__int16 *)v139 + 184);
      v62.i32[0] = *((__int16 *)v139 + 188);
      v62.i32[1] = *((__int16 *)v139 + 189);
      v169 = vrev64_s32(vmax_s32(v62, (int32x2_t)0x100000001));
      v63 = *((__int16 *)v139 + 187);
      if (v63 <= 1)
        v63 = 1;
      v170 = v63;
      v64 = *(_QWORD *)(v53 + 24);
      v65 = 1;
      do
      {
        v66 = *(int *)((char *)&v180 + v57);
        v65 *= v66;
        if (v65 >> 31)
LABEL_123:
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int const&>(v65, v66);
        v57 += 4;
      }
      while (v57 != 16);
      bzero(v141, 4 * v65);
      v67 = 0;
      v65 = 1;
      do
      {
        v66 = v174.i32[v67];
        v65 *= v66;
        if (v65 >> 31)
          goto LABEL_123;
        ++v67;
      }
      while (v67 != 3);
      LODWORD(__x.__begin_) = 0;
      std::vector<int>::vector(&v183, 3uLL, (const std::vector<int>::value_type *)&__x);
      v167 = 0;
      std::vector<int>::vector(&__x, 3uLL, &v167);
      if (v134 >= 1)
      {
        v68 = 0;
        v69 = v183.__begin_ + 2;
        do
        {
          v70 = 0;
          v71 = v68;
          do
          {
            if (v70 >= 0xFFFFFFFFFFFFFFFELL)
              v71 /= *(int *)&v176[4 * v70];
            v69[v70] = v71 % *((_DWORD *)&v174 + v70 + 2);
            --v70;
          }
          while (v70 != -3);
          v72 = 0;
          v73 = 0;
          begin = __x.__begin_;
          v75 = v183.__begin_;
LABEL_40:
          v76 = v68 / (int)v65;
          v77 = v68;
          do
          {
            v78 = begin[v72];
            v79 = v171[v72] * v78 - v172.i32[v72] + v169.i32[v72] * v75[v72];
            ++v72;
            v80 = *(&v180 + v72);
            v82 = v79 < 0 || v79 >= v80;
            v73 |= v82;
            v77 = v78 + *(&v177 + v72) * v77;
            v76 = v79 + v80 * v76;
          }
          while (v72 != 3);
          if ((v73 & 1) == 0)
            *((float *)v141 + v76) = *(float *)(v64 + 4 * v77) + *((float *)v141 + v76);
          v83 = 3;
          do
          {
            v84 = v83 - 1;
            v85 = begin[v84];
            if (v85 != *(&v177 + v83) - 1)
            {
              v72 = 0;
              v73 = 0;
              begin[v84] = v85 + 1;
              goto LABEL_40;
            }
            begin[v84] = 0;
            --v83;
          }
          while (v83);
          ++v68;
        }
        while (v68 != v134);
      }
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      v34 = v139;
      if (v183.__begin_)
      {
        v183.__end_ = v183.__begin_;
        operator delete(v183.__begin_);
      }
      if (v139[86])
      {
        v86 = v139[78];
        if ((int)v86 >= 1)
        {
          v87 = 0;
          v88 = 0;
          v89 = *((_DWORD *)v142 + 9) * *((_DWORD *)v142 + 8) * *((_DWORD *)v142 + 10);
          v90 = *(_QWORD *)(v154 + 16);
          do
          {
            if (v89 >= 1)
            {
              v91 = (float *)(v138 + 4 * v137 * v38 * v39 + 4 * v88);
              v92 = (float *)(v90 + 16 * v87);
              v93 = *v92;
              v94 = v92[1];
              v95 = v92[2];
              v96 = v92[3];
              v97 = v89;
              v98 = 1.0 / v96;
              do
              {
                *v91 = v94 + (float)((float)(v98 * (float)(*v91 - v95)) * v93);
                ++v91;
                --v97;
              }
              while (v97);
            }
            ++v87;
            v88 += v89;
          }
          while (v87 != v86);
        }
      }
      else if (v154 && v139[78] >= 1)
      {
        v99 = 0;
        v100 = *((int *)v142 + 9) * (uint64_t)*((int *)v142 + 8) * *((int *)v142 + 10);
        v101 = (float *)(v138 + 4 * v137 * v38 * v39);
        do
        {
          LODWORD(v183.__begin_) = 0;
          LODWORD(v183.__begin_) = *(_DWORD *)(*(_QWORD *)(v154 + 16) + 4 * v99);
          vDSP_vsadd(v101, 1, (const float *)&v183, v101, 1, v100);
          ++v99;
          v101 += v100;
        }
        while (v99 < v139[78]);
      }
      do
        v102 = __ldaxr(v52);
      while (__stlxr(v102 - 1, v52));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
      v103 = v165;
      if (v165)
      {
        v104 = (unint64_t *)&v165->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v29 = v143 + 1;
    }
    while (v143 + 1 != v131);
    end = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  }
  if (end)
  {
    v107 = (unint64_t *)&end->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
    }
  }
  v109 = v155;
  if (v155)
  {
    v110 = (unint64_t *)&v155->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v157;
  if (!v157)
    goto LABEL_97;
  v113 = (unint64_t *)&v157->__shared_owners_;
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    if (v130)
      goto LABEL_98;
  }
  else
  {
LABEL_97:
    if (v130)
      goto LABEL_98;
  }
  v183.__begin_ = 0;
  v183.__end_ = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v34 + 110), (__int128 *)&v183);
  v121 = (std::__shared_weak_count *)v183.__end_;
  if (v183.__end_)
  {
    v122 = (unint64_t *)(v183.__end_ + 2);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_98:
  v115 = v159;
  if (v159)
  {
    v116 = (unint64_t *)&v159->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v161;
  if (v161)
  {
    v119 = (unint64_t *)&v161->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
}

void sub_1917FE234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(a1 + 440));
}

void Espresso::deconv3d_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int *v15;
  unsigned __int8 *v16;
  int v18;
  int v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *height;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  vImagePixelCount v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  vImagePixelCount v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::string v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106[2];
  void *data;
  vImagePixelCount v108;
  uint64_t v109[2];
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::string v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115[2];
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  uint64_t v121;
  vImage_Buffer dest;
  vImage_Buffer src;

  v120 = 0;
  v121 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v120, *a6, a6[1]);
  v10 = *(_DWORD *)(a1 + 312);
  v11 = *(_DWORD *)(a1 + 384);
  if (v11 <= 1)
    v11 = 1;
  v12 = v10 / v11;
  if (*((char *)a3 + 23) < 0)
  {
    v16 = a3[1];
    if (v16 != (unsigned __int8 *)1)
    {
      if (v16 != (unsigned __int8 *)5)
        goto LABEL_153;
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        v15 = (int *)*a3;
        goto LABEL_22;
      }
      goto LABEL_67;
    }
    v30 = **a3;
    if (v30 == 87)
      goto LABEL_80;
    if (v30 != 98)
      goto LABEL_153;
    goto LABEL_46;
  }
  v13 = *((unsigned __int8 *)a3 + 23);
  if (v13 == 1)
  {
    v29 = *(unsigned __int8 *)a3;
    if (v29 != 98)
    {
      if (v29 != 87)
        goto LABEL_153;
LABEL_80:
      v118 = v120;
      v119 = (std::__shared_weak_count *)v121;
      if (v121)
      {
        v52 = (unint64_t *)(v121 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v118, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v12, *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 440, (__int128 *)&src);
      height = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v55 = (unint64_t *)(src.height + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      v41 = v119;
      if (!v119)
        goto LABEL_153;
      p_shared_owners = (unint64_t *)&v119->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      goto LABEL_151;
    }
LABEL_46:
    v31 = (std::__shared_weak_count *)v121;
    v109[0] = v120;
    v109[1] = v121;
    if (v121)
    {
      v32 = (unint64_t *)(v121 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v10 = *(_DWORD *)(a1 + 312);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v109, v10, (a4 & 0x3F) == 0);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    data = src.data;
    v108 = src.height;
    if (src.height)
    {
      v36 = (unint64_t *)(src.height + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 392))(a1, &data);
    v38 = (std::__shared_weak_count *)v108;
    if (v108)
    {
      v39 = (unint64_t *)(v108 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_153;
    v42 = (unint64_t *)(src.height + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
LABEL_151:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_153;
  }
  if (v13 != 5)
    goto LABEL_153;
  v14 = *(_DWORD *)a3 == 828792663 && *((_BYTE *)a3 + 4) == 54;
  v15 = (int *)a3;
  if (v14)
  {
LABEL_67:
    v44 = (std::__shared_weak_count *)v121;
    v115[0] = v120;
    v115[1] = v121;
    if (v121)
    {
      v45 = (unint64_t *)(v121 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v116, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v115, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v12, *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v49 = *(std::__shared_weak_count **)(a1 + 16);
    v113 = *(_QWORD *)(a1 + 8);
    v114 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v112, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v112 = *(std::string *)a3;
    v110 = v116;
    v111 = v117;
    if (v117)
    {
      v58 = (unint64_t *)&v117->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,5>(a1, &v113, (__int128 *)&v112, &v110);
    v60 = v111;
    if (v111)
    {
      v61 = (unint64_t *)&v111->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    v63 = v114;
    if (v114)
    {
      v64 = (unint64_t *)&v114->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&src, v116 + 8);
    v66 = a1 + 440;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v66, (__int128 *)&src);
    v67 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v68 = (unint64_t *)(src.height + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = 0;
    v71 = *(void **)(*(_QWORD *)v66 + 32);
    v72 = *(int *)(v116 + 8);
    do
    {
      v72 *= *(int *)(v116 + 12 + v70);
      v70 += 4;
    }
    while (v70 != 16);
    src.data = *(void **)(v116 + 32);
    src.height = 1;
    src.width = v72;
    src.rowBytes = 2 * v72;
    dest.data = v71;
    dest.height = 1;
    dest.width = v72;
    dest.rowBytes = 4 * v72;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v41 = v117;
    if (!v117)
      goto LABEL_153;
    v73 = (unint64_t *)&v117->__shared_owners_;
    do
      v43 = __ldaxr(v73);
    while (__stlxr(v43 - 1, v73));
    goto LABEL_151;
  }
LABEL_22:
  v18 = *v15;
  v19 = *((unsigned __int8 *)v15 + 4);
  if (v18 == 828792674 && v19 == 54)
  {
    v21 = (std::__shared_weak_count *)v121;
    v106[0] = v120;
    v106[1] = v121;
    if (v121)
    {
      v22 = (unint64_t *)(v121 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v10 = *(_DWORD *)(a1 + 312);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v116, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v106, v10, (a4 & 0x3F) == 0);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v26 = *(std::__shared_weak_count **)(a1 + 16);
    v104 = *(_QWORD *)(a1 + 8);
    v105 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v103, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v103 = *(std::string *)a3;
    v101 = v116;
    v102 = v117;
    if (v117)
    {
      v74 = (unint64_t *)&v117->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v104, (__int128 *)&v103, &v101);
    v76 = v102;
    if (v102)
    {
      v77 = (unint64_t *)&v102->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v79 = v105;
    if (v105)
    {
      v80 = (unint64_t *)&v105->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v99, (int *)(v116 + 8));
    v82 = v99;
    v83 = *(void **)(v99 + 16);
    v84 = *(int *)(v116 + 8);
    src.data = *(void **)(v116 + 16);
    src.height = 1;
    src.width = v84;
    src.rowBytes = 2 * v84;
    dest.data = v83;
    dest.height = 1;
    dest.width = v84;
    dest.rowBytes = 4 * v84;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v97 = v82;
    v98 = v100;
    if (v100)
    {
      v85 = (unint64_t *)&v100->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v97);
    v87 = v98;
    if (v98)
    {
      v88 = (unint64_t *)&v98->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = v100;
    if (v100)
    {
      v91 = (unint64_t *)&v100->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v41 = v117;
    if (v117)
    {
      v93 = (unint64_t *)&v117->__shared_owners_;
      do
        v43 = __ldaxr(v93);
      while (__stlxr(v43 - 1, v93));
      goto LABEL_151;
    }
  }
LABEL_153:
  v94 = (std::__shared_weak_count *)v121;
  if (v121)
  {
    v95 = (unint64_t *)(v121 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
}

void sub_1917FEB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

BOOL Espresso::deconv3d_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((_QWORD *)a2 + 1) != 1)
    return 0;
  v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_weights_blob(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;

  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 53);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>((uint64_t *)&v4, a1 + 1, a1 + 55);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 304))
    return 2;
  else
    return 1;
}

_QWORD *Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), *a2, a2[1]);
  *(_DWORD *)(a1 + 304) = *a2 != 0;
  return result;
}

_QWORD *Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 440), *a2, a2[1]);
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_biases@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 432);
  *a2 = *(_QWORD *)(result + 424);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 448);
  *a2 = *(_QWORD *)(result + 440);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void Espresso::general_slice_update_kernel_cpu::~general_slice_update_kernel_cpu(Espresso::general_slice_update_kernel_cpu *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2D9B800;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
  {
    *((_QWORD *)this + 49) = v7;
    operator delete(v7);
  }
  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2D9B800;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
  {
    *((_QWORD *)this + 49) = v7;
    operator delete(v7);
  }
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::general_slice_update_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  std::vector<int>::size_type v8;
  std::vector<int>::pointer begin;
  int64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t (**v35)();
  std::string *v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int *v60;
  int *v61;
  std::vector<int> __p;
  std::vector<int> v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  _QWORD v74[2];
  int v75;
  int v76;
  void *v77;
  void *v78;
  uint64_t v79;
  std::vector<int> v80;
  _DWORD v81[5];
  int v82;
  _BYTE v83[20];
  int v84;
  std::string v85;
  std::string *v86;
  void *v87;
  void *v88;
  std::string v89;
  std::string *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_update_kernel_cpu: at least 2 bottom blob required");
  Espresso::abstract_blob_container::shape((char *)&v85, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v83, (const Espresso::layer_shape *)&v85, 0);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  Espresso::abstract_blob_container::shape((char *)&v85, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v81, (const Espresso::layer_shape *)&v85, 0);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  v8 = v84;
  if (v84 != (uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 2)
    (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x21)
    Espresso::general_slice_get_params_from_inputs(a4, 2u, v8, (uint64_t *)(a1 + 384), (uint64_t *)(a1 + 408), (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504));
  std::vector<int>::vector(&v80, v8);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, (const void *)(a1 + 356), a1 + 356 + 4 * v8, v8);
  Espresso::layer_nd_shape::shape_vector((std::vector<int> *)&v85, (uint64_t)v83);
  NDLayers::slice_nd_shape_computation(*(const void **)(a1 + 384), *(_QWORD *)(a1 + 392), a1 + 408, (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), (uint64_t *)&v85, &v80, *(_BYTE *)(a1 + 355), (int **)&v77);
  if (v85.__r_.__value_.__r.__words[0])
  {
    v85.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  begin = v80.__begin_;
  v10 = (char *)v80.__end_ - (char *)v80.__begin_;
  if (v80.__end_ != v80.__begin_)
  {
    v11 = v10 >> 2;
    if ((unint64_t)(v10 >> 2) <= 1)
      v11 = 1;
    v12 = v74;
    do
    {
      v13 = *begin++;
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  v76 = (unint64_t)v10 >> 2;
  if (v82 != v76)
    goto LABEL_101;
  if (((unint64_t)v10 >> 2))
  {
    if (v81[0] != LODWORD(v74[0]))
      goto LABEL_101;
    v14 = 0;
    do
    {
      if (v82 - 1 == v14)
        goto LABEL_24;
      v15 = v81[v14 + 1];
      v16 = *((_DWORD *)v74 + ++v14);
    }
    while (v15 == v16);
    if (v14 < v82)
    {
LABEL_101:
      Espresso::layer_nd_shape::repr(&v85, (uint64_t)v74);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = (int *)&v85;
      else
        v60 = (int *)v85.__r_.__value_.__r.__words[0];
      v63.__begin_ = v60;
      Espresso::layer_nd_shape::repr(&v89, (uint64_t)v81);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = (int *)&v89;
      else
        v61 = (int *)v89.__r_.__value_.__r.__words[0];
      __p.__begin_ = v61;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Unexpected slice shape: Expected %s vs Actual %s", &v63, &__p);
    }
  }
LABEL_24:
  v17 = *a4;
  if (a4[1] == *a4 || !*v17 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v17 + 32))(*v17))
  {
    v72 = 0;
    v73 = 0;
  }
  else
  {
    v49 = *(std::__shared_weak_count **)(*v17 + 168);
    v72 = *(_QWORD *)(*v17 + 160);
    v73 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
    }
  }
  v18 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11
    && (v19 = v18[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19))
  {
    v55 = v18[2];
    v57 = *(_QWORD *)(v55 + 160);
    v56 = *(std::__shared_weak_count **)(v55 + 168);
    v70 = v57;
    v71 = v56;
    if (v56)
    {
      v58 = (unint64_t *)&v56->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
  }
  else
  {
    v70 = 0;
    v71 = 0;
  }
  v20 = *a3;
  if (a3[1] == *a3 || !*v20 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v20 + 32))(*v20))
  {
    v68 = 0;
    v69 = 0;
  }
  else
  {
    v52 = *(std::__shared_weak_count **)(*v20 + 168);
    v68 = *(_QWORD *)(*v20 + 160);
    v69 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
  }
  v21 = **a3;
  v22 = (std::__shared_weak_count *)(*a4)[1];
  v66 = **a4;
  v67 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v64 = 0;
  v65 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 144))(v21, a2, &v66, &v64);
  v25 = v65;
  if (v65)
  {
    v26 = (unint64_t *)&v65->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v67;
  if (v67)
  {
    v29 = (unint64_t *)&v67->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(v72 + 24);
  v32 = *(_QWORD *)(v68 + 24);
  Espresso::layer_nd_shape::shape_vector(&v63, (uint64_t)v83);
  v33 = *(_QWORD *)(v70 + 24);
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v81);
  v34 = *(_DWORD *)(a1 + 380);
  v90 = 0;
  switch(v34)
  {
    case 0:
      v35 = &off_1E2DB3448;
      break;
    case 1:
      v35 = &off_1E2DB34A0;
      break;
    case 2:
      v35 = &off_1E2DB34F8;
      break;
    case 3:
      v35 = &off_1E2DB3550;
      break;
    case 4:
      v35 = &off_1E2DB35A8;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int const&>(v34);
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v86 = &v85;
  std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::swap[abi:ne180100](&v85, &v89);
  v36 = v86;
  if (v86 == &v85)
  {
    v37 = 4;
    v36 = &v85;
  }
  else
  {
    if (!v86)
      goto LABEL_60;
    v37 = 5;
  }
  (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 8 * v37))();
LABEL_60:
  apply_func_on_nd_slice(*(const void **)(a1 + 384), *(_QWORD *)(a1 + 392), a1 + 408, (int **)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), v33, (uint64_t *)&__p, v31, v32, (uint64_t *)&v63, (uint64_t)&v89);
  v38 = v90;
  if (v90 == &v89)
  {
    v39 = 4;
    v38 = &v89;
  }
  else
  {
    if (!v90)
      goto LABEL_65;
    v39 = 5;
  }
  (*(void (**)(void))(v38->__r_.__value_.__r.__words[0] + 8 * v39))();
LABEL_65:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v63.__begin_)
  {
    v63.__end_ = v63.__begin_;
    operator delete(v63.__begin_);
  }
  v40 = v69;
  if (v69)
  {
    v41 = (unint64_t *)&v69->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v71;
  if (v71)
  {
    v44 = (unint64_t *)&v71->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
}

void sub_1917FF56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void Espresso::general_slice_update_kernel_cpu::on_resized(Espresso::general_slice_update_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int v4;
  int v5;
  char v6[16];
  int v7;
  int v8;
  void *__p;
  void *v10;

  Espresso::abstract_blob_container::shape(v6, **a3);
  if (v7 == 1)
    v4 = 4;
  else
    v4 = 5;
  if (v8 == -1)
    v5 = v4;
  else
    v5 = v8;
  Espresso::general_slice_on_resize(v5, (_BYTE *)this + 280, (uint64_t)this + 384, (uint64_t)this + 408, (uint64_t)this + 432, (uint64_t)this + 456, (uint64_t)this + 480, (uint64_t)this + 504);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1917FF730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::resize_nearest_neighbor_kernel_cpu::~resize_nearest_neighbor_kernel_cpu(Espresso::resize_nearest_neighbor_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::resize_nearest_neighbor_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  __int128 v59;
  float v60;
  signed int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float v70;
  unint64_t v71;
  signed int v72;
  uint64_t v73;
  float v74;
  signed int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  std::__shared_weak_count *v85;
  char *v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  void *__p;
  void *v92;

  if (*(_DWORD *)(a1 + 280) == 1 && *(_DWORD *)(a1 + 292) != 2)
    Espresso::throw_exception_selector<Espresso::generic_error>("resize currently only supports resized_dims = 2");
  v8 = *a4;
  v9 = **a4;
  if (!v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
    goto LABEL_96;
  v11 = *(_QWORD *)(*v8 + 160);
  v10 = *(std::__shared_weak_count **)(*v8 + 168);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v80 = v10;
  if (!v11)
LABEL_96:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type (bottom)");
  v14 = *(_DWORD *)(v11 + 16);
  v15 = *(int *)(v11 + 20);
  v16 = *(_DWORD *)(v11 + 8);
  v17 = *(_DWORD *)(v11 + 12);
  if (*(_DWORD *)(a1 + 280) != 1)
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_38;
  }
  if (!*(_QWORD *)(*(_QWORD *)a2 + 64) && (!*(_DWORD *)(a1 + 288) || !*(_DWORD *)(a1 + 284)))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic resize requires interpreter");
  v18 = *a4;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a4)[2] + 32))((*a4)[2]);
  v19 = v18[2];
  v20 = *(_QWORD *)(v19 + 160);
  v21 = *(_QWORD *)(v19 + 168);
  *(_QWORD *)&v81 = v20;
  *((_QWORD *)&v81 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_QWORD *)(v20 + 24);
  v25 = *(_DWORD *)(v20 + 8);
  v26 = *(float *)(v24 + 4 * (v25 - 2));
  v27 = *(float *)(v24 + 4 * (v25 - 1));
  Espresso::abstract_blob_container::shape((char *)&v88, **a4);
  v28 = (unint64_t)v26;
  v29 = (unint64_t)v27;
  LODWORD(v88) = (unint64_t)v27;
  DWORD1(v88) = (unint64_t)v26;
  if ((_DWORD)v88)
  {
    if ((_DWORD)v28)
      goto LABEL_18;
  }
  else
  {
    LODWORD(v88) = v16;
    if ((_DWORD)v28)
      goto LABEL_18;
  }
  DWORD1(v88) = v17;
LABEL_18:
  v30 = operator new(0x98uLL);
  v30[1] = 0;
  v31 = v30 + 1;
  v30[2] = 0;
  *v30 = &off_1E2DBE998;
  *((_OWORD *)v30 + 4) = 0u;
  *((_OWORD *)v30 + 5) = 0u;
  *((_OWORD *)v30 + 2) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 6) = 0u;
  *((_OWORD *)v30 + 7) = 0u;
  *((_OWORD *)v30 + 8) = 0u;
  v30[17] = 0;
  v30[18] = 0;
  *((_DWORD *)v30 + 12) = 1065353216;
  v30[7] = 0x1FFFFFFFFLL;
  v30[12] = 0;
  v30[13] = 0;
  v30[8] = 0;
  v30[9] = 0;
  *((_BYTE *)v30 + 88) = 0;
  v30[10] = 0;
  v30[3] = &off_1E2DA0BF0;
  v30[15] = 0;
  v30[16] = 0;
  *((_BYTE *)v30 + 144) = 0;
  v86 = (char *)(v30 + 3);
  v87 = (std::__shared_weak_count *)v30;
  *((_BYTE *)v30 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
  v32 = **a3;
  v84 = (char *)(v30 + 3);
  v85 = (std::__shared_weak_count *)v30;
  do
    v33 = __ldxr(v31);
  while (__stxr(v33 + 1, v31));
  (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v32 + 16))(v32, &v88, &v84);
  v34 = v85;
  if (v85)
  {
    v35 = (unint64_t *)&v85->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v87;
  if (v87)
  {
    v38 = (unint64_t *)&v87->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v92 = __p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v81 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v81 + 1) + 16))(*((_QWORD *)&v81 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v81 + 1));
    }
  }
LABEL_38:
  v43 = a3;
  v42 = *a3;
  if (v43[1] == v42 || !*v42 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v42 + 32))(*v42))
    goto LABEL_95;
  v44 = *(_QWORD *)(*v42 + 160);
  v45 = *(std::__shared_weak_count **)(*v42 + 168);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  if (!v44)
LABEL_95:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type (top)");
  v48 = 0;
  v49 = v16;
  v90 = 0;
  v88 = 0u;
  v89 = 0u;
  v50 = 1;
  do
  {
    *((_QWORD *)&v88 + v48) = (int)v50;
    v50 *= *(unsigned int *)(v11 + 8 + 4 * v48++);
  }
  while (v48 != 4);
  v51 = 0;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v52 = 1;
  do
  {
    *((_QWORD *)&v81 + v51) = (int)v52;
    v52 *= *(unsigned int *)(v44 + 8 + 4 * v51++);
  }
  while (v51 != 4);
  if (!*(_DWORD *)(a1 + 280))
  {
    v29 = *(int *)(v44 + 8);
    v28 = *(int *)(v44 + 12);
  }
  if (v29)
    v53 = v29;
  else
    v53 = v16;
  if (v28)
    v54 = v28;
  else
    v54 = v17;
  if ((_DWORD)v15)
  {
    v55 = 0;
    v56 = 0;
    v57 = (float)(unint64_t)v16 / (float)v53;
    v58 = (float)(unint64_t)(v17 - 1);
    v59 = v89;
    v60 = (float)(unint64_t)(v16 - 1);
    v61 = v16 - 1;
    if (v14 <= 1)
      v62 = 1;
    else
      v62 = v14;
    v63 = 4 * *((_QWORD *)&v82 + 1);
    v64 = 4 * v82;
    do
    {
      if (v14)
      {
        v65 = 0;
        v66 = *(_QWORD *)(v11 + 24) + 4 * *((_QWORD *)&v59 + 1) * v56;
        v67 = *(_QWORD *)(v44 + 24) + v55;
        do
        {
          if (v54)
          {
            v68 = 0;
            v69 = v67;
            do
            {
              v70 = v58 * 0.5;
              if (v54 != 1)
              {
                v70 = fmaxf((float)((float)((float)v68 + 0.5) * (float)((float)(unint64_t)v17 / (float)v54)) + -0.5, 0.0);
                if (v70 > v58)
                  v70 = (float)(unint64_t)(v17 - 1);
              }
              if (v53)
              {
                v71 = 0;
                v72 = llroundf(v70);
                if (v17 - 1 < v72)
                  v72 = v17 - 1;
                v73 = (int)v49 * (uint64_t)v72;
                do
                {
                  v74 = v60 * 0.5;
                  if (v53 != 1)
                  {
                    v74 = fmaxf((float)((float)((float)v71 + 0.5) * v57) + -0.5, 0.0);
                    if (v74 > v60)
                      v74 = (float)(unint64_t)(v49 - 1);
                  }
                  v75 = llroundf(v74);
                  if (v61 < v75)
                    v75 = v61;
                  *(_DWORD *)(v69 + 4 * v71++) = *(_DWORD *)(v66 + 4 * v59 * v65 + 4 * (v73 + v75));
                }
                while (v53 != v71);
              }
              ++v68;
              v69 += 4 * v53;
            }
            while (v68 != v54);
          }
          ++v65;
          v67 += v64;
        }
        while (v65 != v62);
      }
      ++v56;
      v55 += v63;
    }
    while (v56 != v15);
  }
  if (v45)
  {
    v76 = (unint64_t *)&v45->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v80)
  {
    v78 = (unint64_t *)&v80->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_1917FFD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::einsum_kernel_cpu::~einsum_kernel_cpu(Espresso::einsum_kernel_cpu *this)
{
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::einsum_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int __ldc;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  float *__C;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  float *v68;
  int v69;
  int __N;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  void *__p;
  void *v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  void *v84;
  void *v85;

  if ((char *)a4[1] - (char *)*a4 != 32)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("einsum kernel: Number of inputs must be 2");
  v5 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v5
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
  {
    v59 = 0;
    v6 = 0;
  }
  else
  {
    v6 = *(std::__shared_weak_count **)(*v5 + 168);
    v59 = *(_QWORD *)(*v5 + 160);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
  }
  v7 = *a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v58 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v58 = *(_QWORD *)(*v7 + 160);
    if (v8)
    {
      v46 = (unint64_t *)&v8->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  v9 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11
    && (v10 = v9[2]) != 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v48 = v9[2];
    v11 = *(std::__shared_weak_count **)(v48 + 168);
    v57 = *(_QWORD *)(v48 + 160);
    if (v11)
    {
      v49 = (unint64_t *)&v11->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
  }
  else
  {
    v57 = 0;
    v11 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v78, **a4);
  Espresso::abstract_blob_container::shape((char *)&__N, (*a4)[2]);
  v12 = v82;
  if (v82 == 1)
    v13 = 4;
  else
    v13 = 5;
  if (v83 != -1)
    v13 = v83;
  if (v74 == 1)
    v14 = 4;
  else
    v14 = 5;
  if (v75 != -1)
    v14 = v75;
  v53 = v8;
  v54 = v6;
  v52 = v11;
  if (v13 != v14)
  {
    v51 = "generic_einsum_kernel: inputs must be of same rank";
    goto LABEL_105;
  }
  if (v83 == -1)
  {
    v15 = v78;
    if (v78 == v72)
    {
      v16 = v81;
      v17 = v73;
      if (v81 <= v73)
        v19 = v73;
      else
        v19 = v81;
      v67 = v19;
      if (v82 == 1)
        goto LABEL_43;
      goto LABEL_39;
    }
    goto LABEL_103;
  }
  if (v83 < 3)
  {
    v51 = "generic_einsum_kernel: inputs must have rank at least 3";
LABEL_105:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v51);
  }
  v15 = v78;
  if (v78 != v72)
  {
LABEL_103:
    v51 = "generic_einsum_kernel: invalid input dims";
    goto LABEL_105;
  }
  if (v83 <= 3)
  {
    v16 = v81;
    v67 = 1;
    v17 = v73;
LABEL_42:
    v12 = 1;
    goto LABEL_43;
  }
  v16 = v81;
  v17 = v73;
  if (v81 <= v73)
    v18 = v73;
  else
    v18 = v81;
  v67 = v18;
  if (v83 == 4)
    goto LABEL_42;
LABEL_39:
  if (v82 <= v74)
    v12 = v74;
LABEL_43:
  if ((int)v79 <= (int)v71)
    v20 = v71;
  else
    v20 = v79;
  if (v12 >= 1)
  {
    v63 = 0;
    v21 = 0;
    v22 = v80;
    v23 = __N;
    __ldc = __N * v20;
    v65 = v71 * v15 * __N;
    v66 = v79 * v15 * v80;
    v56 = v66 * v16;
    v25 = __N * v20 * v80;
    v61 = v12;
    v60 = 4 * v25 * v67;
    v55 = v17 * v65;
    v64 = 4 * v25;
    v26 = 4 * __N;
    do
    {
      v62 = v21;
      if (v67 >= 1)
      {
        v27 = 0;
        v28 = v74 - 1;
        if (v74 - 1 >= (int)v21)
          v28 = v21;
        v29 = *(_QWORD *)(v57 + 24) + 4 * v55 * v28;
        v30 = v82 - 1;
        if (v82 - 1 >= (int)v21)
          v30 = v21;
        v31 = *(_QWORD *)(v58 + 24) + 4 * v56 * v30;
        __C = (float *)(*(_QWORD *)(v59 + 24) + v63);
        do
        {
          if ((int)v20 >= 1)
          {
            v69 = v27;
            v33 = 0;
            v68 = __C;
            do
            {
              v34 = v79 - 1;
              if ((int)(v79 - 1) >= (int)v33)
                v34 = v33;
              if ((int)(v71 - 1) >= (int)v33)
                v35 = v33;
              else
                v35 = v71 - 1;
              cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v22, v23, v15, 1.0, (const float *)(v31 + 4 * (int)(v34 * v15)), v79 * v15, (const float *)(v29 + 4 * (int)(v35 * v23)), v71 * v23, 0.0, __C, __ldc);
              ++v33;
              __C = (float *)((char *)__C + v26);
            }
            while (v20 != v33);
            v16 = v81;
            v17 = v73;
            v27 = v69;
            __C = v68;
          }
          v36 = v66;
          if (v16 <= 1)
            v36 = 0;
          v31 += 4 * v36;
          v37 = v65;
          if (v17 <= 1)
            v37 = 0;
          v29 += 4 * v37;
          ++v27;
          __C = (float *)((char *)__C + v64);
        }
        while (v27 != v67);
      }
      v21 = v62 + 1;
      v63 += v60;
    }
    while (v62 + 1 != v61);
  }
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v53)
  {
    v40 = (unint64_t *)&v53->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54)
  {
    v42 = (unint64_t *)&v54->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_191800350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;

  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v36)
  {
    v41 = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::~linear_quantize_kernel_cpu(Espresso::linear_quantize_kernel_cpu *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D94528;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D94528;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::linear_quantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const char *v25;
  int v26[10];
  void *__p;
  void *v28;
  int v29[10];
  void *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t (**v34)();
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (a3[1] == *a3)
  {
    v36 = 0;
    v37 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v36, *a3);
  }
  v7 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v22 = *(std::__shared_weak_count **)(*v7 + 168);
    v34 = *(uint64_t (***)())(*v7 + 160);
    v35 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4
    && *v8
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8) == 1)
  {
    v9 = *(_QWORD *)(*v8 + 176);
    v10 = *(std::__shared_weak_count **)(*v8 + 184);
    v32 = v9;
    v33 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v9 = 0;
    v32 = 0;
    v33 = 0;
  }
  if (!*(_QWORD *)(a1 + 288) || !*(_QWORD *)(a1 + 304))
  {
    v25 = "linear_quantize_kernel_cpu: scale and zero_point are required";
    goto LABEL_53;
  }
  if (!v34)
  {
    if (v9)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3) == 4)
      {
        Espresso::abstract_blob_container::shape((char *)v29, **a3);
        Espresso::abstract_blob_container::shape((char *)v26, **(_QWORD **)a4);
        Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(a1, (uint64_t)&v36, v29, (uint64_t)&v32, v26);
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3) != 2)
          goto LABEL_32;
        Espresso::abstract_blob_container::shape((char *)v29, **a3);
        Espresso::abstract_blob_container::shape((char *)v26, **(_QWORD **)a4);
        Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(a1, (uint64_t)&v36, v29, (uint64_t)&v32, v26);
      }
      goto LABEL_28;
    }
    v25 = "linear_quantize_kernel_cpu: Only Fp32 and Fp16 inputs supported";
LABEL_53:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v25);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3) == 4)
  {
    Espresso::abstract_blob_container::shape((char *)v29, **a3);
    Espresso::abstract_blob_container::shape((char *)v26, **(_QWORD **)a4);
    Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(a1, (uint64_t)&v36, v29, &v34, v26);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3) != 2)
      goto LABEL_32;
    Espresso::abstract_blob_container::shape((char *)v29, **a3);
    Espresso::abstract_blob_container::shape((char *)v26, **(_QWORD **)a4);
    Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(a1, (uint64_t)&v36, v29, &v34, v26);
  }
LABEL_28:
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
LABEL_32:
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v35;
  if (v35)
  {
    v17 = (unint64_t *)&v35->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v37;
  if (v37)
  {
    v20 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_191800854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

void Espresso::linear_quantize_kernel_cpu::on_resized(Espresso::linear_quantize_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  void *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD v43[3];
  _DWORD v44[5];
  int v45;
  char v46[20];
  int v47;
  void *v48;
  void *v49;

  Espresso::abstract_blob_container::shape(v46, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v44, (const Espresso::layer_shape *)v46, 0);
  memset(v43, 0, sizeof(v43));
  v4 = v45;
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v43, v45);
  memset(v42, 0, sizeof(v42));
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v42, v4);
  v5 = *((int *)this + 70);
  if ((int)v5 >= 0)
    v6 = 0;
  else
    v6 = v4;
  v7 = *((_QWORD *)this + 36);
  if (!v7)
  {
    v32 = "linear_quantize_kernel_cpu: scale is required";
    goto LABEL_33;
  }
  if (!*((_QWORD *)this + 38))
  {
    v32 = "linear_quantize_kernel_cpu: zero_point is required";
LABEL_33:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v32);
  }
  v8 = 0;
  v9 = (_QWORD *)((char *)this + 360);
  v10 = v6 + v5;
  v11 = *(int *)(v7 + 8);
  do
  {
    v11 *= *(int *)(v7 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1)
  {
    v12 = 0;
    v13 = (int)v44[v10];
    *((_DWORD *)v43 + v10) = v13;
    v14 = *(int *)(v7 + 8);
    v15 = v14;
    do
    {
      v15 *= *(int *)(v7 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    if (v15 != v13)
    {
      v33 = 0;
      v34 = v7 + 12;
      do
      {
        v14 *= *(int *)(v34 + v33);
        v33 += 4;
      }
      while (v33 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_quantize_kernel_cpu: Scale vector size %zu not equal to dimension %d at axis %d", v14, v13, v10);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v43, 0, (uint64_t)&v37);
  v16 = v38;
  *((_OWORD *)this + 20) = v37;
  *((_OWORD *)this + 21) = v16;
  *((_QWORD *)this + 44) = v39;
  v17 = (void *)*((_QWORD *)this + 45);
  if (v17)
  {
    *((_QWORD *)this + 46) = v17;
    operator delete(v17);
    *v9 = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
  }
  v18 = 0;
  *(_OWORD *)v9 = v40;
  *((_QWORD *)this + 47) = v41;
  *((_DWORD *)this + 85) = v47;
  v19 = *((_QWORD *)this + 38);
  v20 = *(int *)(v19 + 8);
  v21 = v20;
  do
  {
    v21 *= *(int *)(v19 + 12 + v18);
    v18 += 4;
  }
  while (v18 != 12);
  if (v21 != 1)
  {
    v22 = 0;
    v23 = (int)v44[v10];
    *((_DWORD *)v42 + v10) = v23;
    v24 = v20;
    do
    {
      v24 *= *(int *)(v19 + 12 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    if (v24 != v23)
    {
      v35 = 0;
      v36 = v19 + 12;
      do
      {
        v20 *= *(int *)(v36 + v35);
        v35 += 4;
      }
      while (v35 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_quantize_kernel_cpu: zero_point vector size %zu not equal to dimension %d at axis %d", v20, v23, v10);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v42, 0, (uint64_t)&v37);
  v25 = v38;
  *((_OWORD *)this + 24) = v37;
  *((_OWORD *)this + 25) = v25;
  *((_QWORD *)this + 52) = v39;
  v26 = (_QWORD *)((char *)this + 424);
  v27 = (void *)*((_QWORD *)this + 53);
  if (v27)
  {
    *((_QWORD *)this + 54) = v27;
    operator delete(v27);
    *v26 = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = 0;
  }
  *(_OWORD *)v26 = v40;
  *((_QWORD *)this + 55) = v41;
  *((_DWORD *)this + 101) = v47;
  if (Espresso::linear_quantize_kernel_cpu::needs_tmp_buffer(this))
  {
    v28 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v46);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v37, v28, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 448, &v37);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_191800BF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>(a1, a2, a3, a4);
}

BOOL Espresso::linear_quantize_kernel_cpu::needs_tmp_buffer(Espresso::linear_quantize_kernel_cpu *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = 0;
  v2 = *((_QWORD *)this + 36);
  v3 = *(int *)(v2 + 8);
  v4 = v2 + 12;
  do
  {
    v3 *= *(int *)(v4 + v1);
    v1 += 4;
  }
  while (v1 != 12);
  if (v3 != 1)
    return 0;
  v5 = 0;
  v6 = *((_QWORD *)this + 38);
  v7 = *(int *)(v6 + 8);
  v8 = v6 + 12;
  do
  {
    v7 *= *(int *)(v8 + v5);
    v5 += 4;
  }
  while (v5 != 12);
  return v7 == 1;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t (***a4)(), int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  int v18;
  uint64_t i;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  vDSP_Length v27;
  float *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  float v35;
  int v36;
  float __C;
  float __B;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t (**v41)();
  std::__shared_weak_count *v42;

  v8 = 0;
  v9 = a1 + 288;
  v10 = *(_QWORD *)(a1 + 288);
  v11 = *(int *)(v10 + 8);
  v12 = v10 + 12;
  do
  {
    v11 *= *(int *)(v12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1)
    goto LABEL_25;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 304);
  v15 = *(int *)(v14 + 8);
  v16 = v14 + 12;
  do
  {
    v15 *= *(int *)(v16 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  if (v15 == 1)
  {
    v17 = *a4;
    v18 = *((_DWORD *)*a4 + 2);
    for (i = 12; i != 24; i += 4)
      v18 *= *(_DWORD *)((char *)v17 + i);
    v20 = (std::__shared_weak_count *)a4[1];
    v41 = *a4;
    v42 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v24 = *(_QWORD *)(a1 + 448);
    v23 = *(std::__shared_weak_count **)(a1 + 456);
    v39 = v24;
    v40 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = v18;
    vDSP_vsdiv((const float *)v17[3], 1, *(const float **)(*(_QWORD *)v9 + 24), *(float **)(v24 + 24), 1, v18);
    __C = 2147500000.0;
    __B = -2147500000.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &__B, &__C, *(float **)(v24 + 24), 1, v27);
    v28 = *(float **)(v24 + 24);
    vDSP_vfixr32(v28, 1, (int *)v28, 1, v27);
    v36 = **(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v28, 1, &v36, (int *)v28, 1, v27);
    vDSP_vflt32((const int *)v28, 1, *(float **)(v24 + 24), 1, v27);
    v34 = 255.0;
    v35 = 0.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &v35, &v34, *(float **)(v24 + 24), 1, v27);
    vDSP_vfixru8(*(const float **)(v24 + 24), 1, *(unsigned __int8 **)(*(_QWORD *)a2 + 24), 1, v27);
    if (v23)
    {
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v31 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
LABEL_25:
    v41 = off_1E2DC3AF8;
    Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(a2, a3, (uint64_t)a4, a5, v9, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(_QWORD, unint64_t, unint64_t, unint64_t, uint64_t))&v41);
  }
}

{
  __ZN8Espresso26linear_quantize_kernel_cpu9__computeINS_4blobIhLi4EEEhNS2_IfLi4EEEEEvRKNT_3ptrERKNS_11layer_shapeERKNT1_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_191800F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t (***a4)(), int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  int v18;
  uint64_t i;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  vDSP_Length v27;
  float *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  float v35;
  int v36;
  float __C;
  float __B;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t (**v41)();
  std::__shared_weak_count *v42;

  v8 = 0;
  v9 = a1 + 288;
  v10 = *(_QWORD *)(a1 + 288);
  v11 = *(int *)(v10 + 8);
  v12 = v10 + 12;
  do
  {
    v11 *= *(int *)(v12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1)
    goto LABEL_25;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 304);
  v15 = *(int *)(v14 + 8);
  v16 = v14 + 12;
  do
  {
    v15 *= *(int *)(v16 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  if (v15 == 1)
  {
    v17 = *a4;
    v18 = *((_DWORD *)*a4 + 2);
    for (i = 12; i != 24; i += 4)
      v18 *= *(_DWORD *)((char *)v17 + i);
    v20 = (std::__shared_weak_count *)a4[1];
    v41 = *a4;
    v42 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v24 = *(_QWORD *)(a1 + 448);
    v23 = *(std::__shared_weak_count **)(a1 + 456);
    v39 = v24;
    v40 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = v18;
    vDSP_vsdiv((const float *)v17[3], 1, *(const float **)(*(_QWORD *)v9 + 24), *(float **)(v24 + 24), 1, v18);
    __C = 2147500000.0;
    __B = -2147500000.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &__B, &__C, *(float **)(v24 + 24), 1, v27);
    v28 = *(float **)(v24 + 24);
    vDSP_vfixr32(v28, 1, (int *)v28, 1, v27);
    v36 = **(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v28, 1, &v36, (int *)v28, 1, v27);
    vDSP_vflt32((const int *)v28, 1, *(float **)(v24 + 24), 1, v27);
    v34 = 127.0;
    v35 = -128.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &v35, &v34, *(float **)(v24 + 24), 1, v27);
    vDSP_vfixr8(*(const float **)(v24 + 24), 1, *(char **)(*(_QWORD *)a2 + 24), 1, v27);
    if (v23)
    {
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v31 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
LABEL_25:
    v41 = off_1E2DC3AA8;
    Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(a2, a3, (uint64_t)a4, a5, v9, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(_QWORD, unint64_t, unint64_t, unint64_t, uint64_t))&v41);
  }
}

{
  __ZN8Espresso26linear_quantize_kernel_cpu9__computeINS_4blobIhLi4EEEaNS2_IfLi4EEEEEvRKNT_3ptrERKNS_11layer_shapeERKNT1_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_1918011F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  vDSP_Length width;
  std::__shared_weak_count *v25;
  float **v26;
  unint64_t *v27;
  unint64_t v28;
  float *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  float v36;
  int __B;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD __C[2];
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = 0;
  v8 = a1 + 288;
  v9 = *(_QWORD *)(a1 + 288);
  v10 = *(int *)(v9 + 8);
  v11 = v9 + 12;
  do
  {
    v10 *= *(int *)(v11 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v10 != 1)
    goto LABEL_26;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 304);
  v14 = *(int *)(v13 + 8);
  v15 = v13 + 12;
  do
  {
    v14 *= *(int *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  if (v14 == 1)
  {
    v16 = *(_QWORD *)a4;
    v17 = *(unsigned int *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v17 *= *(unsigned int *)(v16 + i);
    v20 = *(_QWORD *)(a1 + 448);
    v19 = *(std::__shared_weak_count **)(a1 + 456);
    __C[0] = v20;
    __C[1] = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v16 = *(_QWORD *)a4;
    }
    v23 = *(void **)(v20 + 24);
    src.data = *(void **)(v16 + 24);
    src.height = 1;
    *(int64x2_t *)&src.width = vshlq_s64(vdupq_n_s64(v17 << 32), (int64x2_t)xmmword_191A93950);
    dest.data = v23;
    dest.height = 1;
    dest.width = src.width;
    width = src.width;
    dest.rowBytes = 4 * (int)v17;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v38 = v20;
    v39 = v19;
    v26 = *(float ***)(a1 + 448);
    v25 = *(std::__shared_weak_count **)(a1 + 456);
    src.data = v26;
    src.height = (vImagePixelCount)v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    vDSP_vsdiv(*(const float **)(v20 + 24), 1, *(const float **)(*(_QWORD *)v8 + 24), v26[3], 1, width);
    LODWORD(dest.data) = -822083584;
    LODWORD(__C[0]) = 1325400064;
    vDSP_vclip(v26[3], 1, (const float *)&dest, (const float *)__C, v26[3], 1, width);
    v29 = v26[3];
    vDSP_vfixr32(v29, 1, (int *)v29, 1, width);
    __B = **(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v29, 1, &__B, (int *)v29, 1, width);
    vDSP_vflt32((const int *)v29, 1, v26[3], 1, width);
    v35 = 255.0;
    v36 = 0.0;
    vDSP_vclip(v26[3], 1, &v36, &v35, v26[3], 1, width);
    vDSP_vfixru8(v26[3], 1, *(unsigned __int8 **)(*(_QWORD *)a2 + 24), 1, width);
    if (v25)
    {
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v32 = v39;
    if (v39)
    {
      v33 = (unint64_t *)&v39->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
LABEL_26:
    src.data = off_1E2DC3B20;
    Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(a2, a3, a4, a5, v8, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &src);
  }
}

{
  __ZN8Espresso26linear_quantize_kernel_cpu9__computeINS_4blobIhLi4EEEhNS2_ItLi4EEEEEvRKNT_3ptrERKNS_11layer_shapeERKNT1_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_191801508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  vDSP_Length width;
  std::__shared_weak_count *v25;
  float **v26;
  unint64_t *v27;
  unint64_t v28;
  float *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  float v36;
  int __B;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD __C[2];
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = 0;
  v8 = a1 + 288;
  v9 = *(_QWORD *)(a1 + 288);
  v10 = *(int *)(v9 + 8);
  v11 = v9 + 12;
  do
  {
    v10 *= *(int *)(v11 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v10 != 1)
    goto LABEL_26;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 304);
  v14 = *(int *)(v13 + 8);
  v15 = v13 + 12;
  do
  {
    v14 *= *(int *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  if (v14 == 1)
  {
    v16 = *(_QWORD *)a4;
    v17 = *(unsigned int *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v17 *= *(unsigned int *)(v16 + i);
    v20 = *(_QWORD *)(a1 + 448);
    v19 = *(std::__shared_weak_count **)(a1 + 456);
    __C[0] = v20;
    __C[1] = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v16 = *(_QWORD *)a4;
    }
    v23 = *(void **)(v20 + 24);
    src.data = *(void **)(v16 + 24);
    src.height = 1;
    *(int64x2_t *)&src.width = vshlq_s64(vdupq_n_s64(v17 << 32), (int64x2_t)xmmword_191A93950);
    dest.data = v23;
    dest.height = 1;
    dest.width = src.width;
    width = src.width;
    dest.rowBytes = 4 * (int)v17;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v38 = v20;
    v39 = v19;
    v26 = *(float ***)(a1 + 448);
    v25 = *(std::__shared_weak_count **)(a1 + 456);
    src.data = v26;
    src.height = (vImagePixelCount)v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    vDSP_vsdiv(*(const float **)(v20 + 24), 1, *(const float **)(*(_QWORD *)v8 + 24), v26[3], 1, width);
    LODWORD(dest.data) = -822083584;
    LODWORD(__C[0]) = 1325400064;
    vDSP_vclip(v26[3], 1, (const float *)&dest, (const float *)__C, v26[3], 1, width);
    v29 = v26[3];
    vDSP_vfixr32(v29, 1, (int *)v29, 1, width);
    __B = **(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v29, 1, &__B, (int *)v29, 1, width);
    vDSP_vflt32((const int *)v29, 1, v26[3], 1, width);
    v35 = 127.0;
    v36 = -128.0;
    vDSP_vclip(v26[3], 1, &v36, &v35, v26[3], 1, width);
    vDSP_vfixr8(v26[3], 1, *(char **)(*(_QWORD *)a2 + 24), 1, width);
    if (v25)
    {
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v32 = v39;
    if (v39)
    {
      v33 = (unint64_t *)&v39->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
LABEL_26:
    src.data = off_1E2DC3AD0;
    Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(a2, a3, a4, a5, v8, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &src);
  }
}

{
  __ZN8Espresso26linear_quantize_kernel_cpu9__computeINS_4blobIhLi4EEEaNS2_ItLi4EEEEEvRKNT_3ptrERKNS_11layer_shapeERKNT1_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_191801830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::call(uint64_t a1, _BYTE *a2, __int16 *a3, float *a4, int *a5)
{
  float v12;
  float result;

  _H1 = *a3;
  __asm { FCVT            S1, H1 }
  v12 = rintf(_S1 / *a4);
  _S0 = v12 + (float)*a5;
  __asm { FCVT            H0, S0 }
  LOWORD(v12) = 22512;
  __asm { FCVT            S2, H0 }
  if (_S2 > 127.0)
    _S0 = v12;
  LOWORD(v12) = -10240;
  if (_S2 < -128.0)
    _S0 = v12;
  __asm { FCVT            S0, H0 }
  *a2 = (int)result;
  return result;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
  JUMPOUT(0x19401CD90);
}

float Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::call(uint64_t a1, _BYTE *a2, __int16 *a3, float *a4, int *a5)
{
  float v12;
  float result;

  _H1 = *a3;
  __asm { FCVT            S1, H1 }
  v12 = rintf(_S1 / *a4);
  _S0 = v12 + (float)*a5;
  __asm { FCVT            H0, S0 }
  LOWORD(v12) = 23544;
  __asm { FCVT            S2, H0 }
  if (_S2 > 255.0)
    _S0 = v12;
  if (_S2 < 0.0)
    _S0 = 0.0;
  __asm { FCVT            S0, H0 }
  *a2 = (int)result;
  return result;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::call(uint64_t a1, _BYTE *a2, float *a3, float *a4, int *a5)
{
  float v5;
  float v6;
  float v7;

  v5 = rintf(*a3 / *a4) + (float)*a5;
  v6 = 127.0;
  if (v5 <= 127.0)
    v6 = v5;
  if (v5 >= -128.0)
    v7 = v6;
  else
    v7 = -128.0;
  *a2 = (int)v7;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::call(uint64_t a1, _BYTE *a2, float *a3, float *a4, int *a5)
{
  float v5;
  float v6;
  BOOL v7;
  float v8;

  v5 = rintf(*a3 / *a4) + (float)*a5;
  v6 = 255.0;
  if (v5 <= 255.0)
    v6 = v5;
  v7 = v5 < 0.0;
  v8 = 0.0;
  if (!v7)
    v8 = v6;
  *a2 = (int)v8;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::linear_dequantize_kernel_cpu::~linear_dequantize_kernel_cpu(Espresso::linear_dequantize_kernel_cpu *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D98A30;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D98A30;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::linear_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const char *v25;
  int v26[10];
  void *__p;
  void *v28;
  int v29[10];
  void *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (a4[1] == *a4)
  {
    v36 = 0;
    v37 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v36, *a4);
  }
  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v22 = *(std::__shared_weak_count **)(*v7 + 168);
    v34 = *(_QWORD *)(*v7 + 160);
    v35 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  v8 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v8
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8) == 1)
  {
    v9 = *(_QWORD *)(*v8 + 176);
    v10 = *(std::__shared_weak_count **)(*v8 + 184);
    v32 = v9;
    v33 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v9 = 0;
    v32 = 0;
    v33 = 0;
  }
  if (!*(_QWORD *)(a1 + 288) || !*(_QWORD *)(a1 + 304))
  {
    v25 = "linear_dequantize_kernel_cpu: scale and zero_point are required";
    goto LABEL_53;
  }
  if (!v34)
  {
    if (v9)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) == 4)
      {
        Espresso::abstract_blob_container::shape((char *)v29, **(_QWORD **)a3);
        Espresso::abstract_blob_container::shape((char *)v26, **a4);
        Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(a1, (uint64_t)&v32, v29, (uint64_t)&v36, v26);
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) != 2)
          goto LABEL_32;
        Espresso::abstract_blob_container::shape((char *)v29, **(_QWORD **)a3);
        Espresso::abstract_blob_container::shape((char *)v26, **a4);
        Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(a1, (uint64_t)&v32, v29, (uint64_t)&v36, v26);
      }
      goto LABEL_28;
    }
    v25 = "linear_dequantize_kernel_cpu: Only U8 and S8 inputs supported";
LABEL_53:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v25);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) == 4)
  {
    Espresso::abstract_blob_container::shape((char *)v29, **(_QWORD **)a3);
    Espresso::abstract_blob_container::shape((char *)v26, **a4);
    Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(a1, &v34, v29, (uint64_t)&v36, v26);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) != 2)
      goto LABEL_32;
    Espresso::abstract_blob_container::shape((char *)v29, **(_QWORD **)a3);
    Espresso::abstract_blob_container::shape((char *)v26, **a4);
    Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(a1, &v34, v29, (uint64_t)&v36, v26);
  }
LABEL_28:
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
LABEL_32:
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v35;
  if (v35)
  {
    v17 = (unint64_t *)&v35->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v37;
  if (v37)
  {
    v20 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_191801E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

void Espresso::linear_dequantize_kernel_cpu::on_resized(Espresso::linear_dequantize_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  void *v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[3];
  _DWORD v45[5];
  int v46;
  char v47[20];
  int v48;
  void *v49;
  void *v50;

  Espresso::abstract_blob_container::shape(v47, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v45, (const Espresso::layer_shape *)v47, 0);
  memset(v44, 0, sizeof(v44));
  v5 = v46;
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v44, v46);
  memset(v43, 0, sizeof(v43));
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v43, v5);
  v6 = *((int *)this + 70);
  if ((int)v6 >= 0)
    v7 = 0;
  else
    v7 = v5;
  v8 = *((_QWORD *)this + 36);
  if (!v8)
  {
    v33 = "linear_dequantize_kernel_cpu: scale is required";
    goto LABEL_33;
  }
  if (!*((_QWORD *)this + 38))
  {
    v33 = "linear_dequantize_kernel_cpu: zero_point is required";
LABEL_33:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v33);
  }
  v9 = 0;
  v10 = (_QWORD *)((char *)this + 360);
  v11 = v7 + v6;
  v12 = *(int *)(v8 + 8);
  do
  {
    v12 *= *(int *)(v8 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  if (v12 != 1)
  {
    v13 = 0;
    v14 = (int)v45[v11];
    *((_DWORD *)v44 + v11) = v14;
    v15 = *(int *)(v8 + 8);
    v16 = v15;
    do
    {
      v16 *= *(int *)(v8 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    if (v16 != v14)
    {
      v34 = 0;
      v35 = v8 + 12;
      do
      {
        v15 *= *(int *)(v35 + v34);
        v34 += 4;
      }
      while (v34 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_dequantize_kernel_cpu: Scale vector size %zu not equal to dimension %d at axis %d", v15, v14, v11);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v44, 0, (uint64_t)&v38);
  v17 = v39;
  *((_OWORD *)this + 20) = v38;
  *((_OWORD *)this + 21) = v17;
  *((_QWORD *)this + 44) = v40;
  v18 = (void *)*((_QWORD *)this + 45);
  if (v18)
  {
    *((_QWORD *)this + 46) = v18;
    operator delete(v18);
    *v10 = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
  }
  v19 = 0;
  *(_OWORD *)v10 = v41;
  *((_QWORD *)this + 47) = v42;
  *((_DWORD *)this + 85) = v48;
  v20 = *((_QWORD *)this + 38);
  v21 = *(int *)(v20 + 8);
  v22 = v21;
  do
  {
    v22 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  if (v22 != 1)
  {
    v23 = 0;
    v24 = (int)v45[v11];
    *((_DWORD *)v43 + v11) = v24;
    v25 = v21;
    do
    {
      v25 *= *(int *)(v20 + 12 + v23);
      v23 += 4;
    }
    while (v23 != 12);
    if (v25 != v24)
    {
      v36 = 0;
      v37 = v20 + 12;
      do
      {
        v21 *= *(int *)(v37 + v36);
        v36 += 4;
      }
      while (v36 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_dequantize_kernel_cpu: zero_point vector size %zu not equal to dimension %d at axis %d", v21, v24, v11);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v43, 0, (uint64_t)&v38);
  v26 = v39;
  *((_OWORD *)this + 24) = v38;
  *((_OWORD *)this + 25) = v26;
  *((_QWORD *)this + 52) = v40;
  v27 = (_QWORD *)((char *)this + 424);
  v28 = (void *)*((_QWORD *)this + 53);
  if (v28)
  {
    *((_QWORD *)this + 54) = v28;
    operator delete(v28);
    *v27 = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = 0;
  }
  *(_OWORD *)v27 = v41;
  *((_QWORD *)this + 55) = v42;
  *((_DWORD *)this + 101) = v48;
  if (Espresso::linear_dequantize_kernel_cpu::needs_tmp_buffer((uint64_t)this, (_QWORD **)a2))
  {
    v29 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v47);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v38, v29, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 448, &v38);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1918021CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::linear_dequantize_kernel_cpu::needs_tmp_buffer(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(int *)(v3 + 8);
  v5 = v3 + 12;
  do
  {
    v4 *= *(int *)(v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (v4 != 1)
    return 0;
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 304);
  v8 = *(int *)(v7 + 8);
  v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  return v8 == 1 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)**a2 + 32))(**a2) == 1;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(uint64_t a1, _QWORD *a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t i;
  void (**v17)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  void (**v18)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  unint64_t *v19;
  unint64_t v20;
  vDSP_Length v21;
  unint64_t *v22;
  unint64_t v23;
  float __C;
  float __B;
  void (**v26[2])(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);

  v6 = 0;
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(int *)(v7 + 8);
  v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  if (v8 != 1)
    goto LABEL_18;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(int *)(v11 + 8);
  v13 = v11 + 12;
  do
  {
    v12 *= *(int *)(v13 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  if (v12 == 1)
  {
    v14 = *(_QWORD *)a4;
    v15 = *(_DWORD *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v15 *= *(_DWORD *)(v14 + i);
    v18 = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))*a2;
    v17 = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))a2[1];
    v26[0] = *(void (***)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))a2;
    v26[1] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v14 = *(_QWORD *)a4;
    }
    v21 = v15;
    vDSP_vfltu8(*(const unsigned __int8 **)(v14 + 24), 1, (float *)v18[3], 1, v15);
    __B = **(float **)(*(_QWORD *)(a1 + 288) + 24);
    __C = __B * (float)-**(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsmsa((const float *)v18[3], 1, &__B, &__C, (float *)v18[3], 1, v21);
    if (v17)
    {
      v22 = (unint64_t *)(v17 + 1);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*((void (**)(void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t)))*v17 + 2))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
    }
  }
  else
  {
LABEL_18:
    v26[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))off_1E2DC3B70;
    Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>((uint64_t)a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), v26);
  }
}

{
  __ZN8Espresso28linear_dequantize_kernel_cpu9__computeINS_4blobIfLi4EEENS2_IhLi4EEEhEEvRKNT_3ptrERKNS_11layer_shapeERKNT0_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_191802430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(uint64_t a1, _QWORD *a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t i;
  void (**v17)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  void (**v18)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  unint64_t *v19;
  unint64_t v20;
  vDSP_Length v21;
  unint64_t *v22;
  unint64_t v23;
  float __C;
  float __B;
  void (**v26[2])(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);

  v6 = 0;
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(int *)(v7 + 8);
  v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  if (v8 != 1)
    goto LABEL_18;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(int *)(v11 + 8);
  v13 = v11 + 12;
  do
  {
    v12 *= *(int *)(v13 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  if (v12 == 1)
  {
    v14 = *(_QWORD *)a4;
    v15 = *(_DWORD *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v15 *= *(_DWORD *)(v14 + i);
    v18 = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))*a2;
    v17 = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))a2[1];
    v26[0] = *(void (***)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))a2;
    v26[1] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v14 = *(_QWORD *)a4;
    }
    v21 = v15;
    vDSP_vflt8(*(const char **)(v14 + 24), 1, (float *)v18[3], 1, v15);
    __B = **(float **)(*(_QWORD *)(a1 + 288) + 24);
    __C = __B * (float)-**(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsmsa((const float *)v18[3], 1, &__B, &__C, (float *)v18[3], 1, v21);
    if (v17)
    {
      v22 = (unint64_t *)(v17 + 1);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*((void (**)(void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t)))*v17 + 2))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
    }
  }
  else
  {
LABEL_18:
    v26[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))off_1E2DC3B48;
    Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>((uint64_t)a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), v26);
  }
}

{
  __ZN8Espresso28linear_dequantize_kernel_cpu9__computeINS_4blobIfLi4EEENS2_IhLi4EEEaEEvRKNT_3ptrERKNS_11layer_shapeERKNT0_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_1918025EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void (**v18)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  _WORD *v24;
  int v25;
  unint64_t *v31;
  unint64_t v32;
  float __C;
  float __B;
  void (**v35[2])(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);

  v7 = 0;
  v8 = *(_QWORD *)(a1 + 288);
  v9 = *(int *)(v8 + 8);
  v10 = v8 + 12;
  do
  {
    v9 *= *(int *)(v10 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v9 != 1)
    goto LABEL_21;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(int *)(v12 + 8);
  v14 = v12 + 12;
  do
  {
    v13 *= *(int *)(v14 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)a4;
    v16 = *(unsigned int *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v16 *= *(unsigned int *)(v15 + i);
    v19 = *(_QWORD *)(a1 + 448);
    v18 = *(void (***)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 456);
    v35[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))v19;
    v35[1] = v18;
    if (v18)
    {
      v20 = (unint64_t *)(v18 + 1);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v15 = *(_QWORD *)a4;
    }
    v22 = (int)v16;
    vDSP_vfltu8(*(const unsigned __int8 **)(v15 + 24), 1, *(float **)(v19 + 24), 1, (int)v16);
    __B = **(float **)(*(_QWORD *)(a1 + 288) + 24);
    __C = __B * (float)-**(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v19 + 24), 1, &__B, &__C, *(float **)(v19 + 24), 1, (int)v16);
    if (v16 << 32)
    {
      v23 = *(int **)(v19 + 24);
      v24 = *(_WORD **)(*(_QWORD *)a2 + 24);
      do
      {
        v25 = *v23++;
        _S0 = v25;
        __asm { FCVT            H0, S0 }
        *v24++ = _S0;
        --v22;
      }
      while (v22);
    }
    if (v18)
    {
      v31 = (unint64_t *)(v18 + 1);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*((void (**)(void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t)))*v18 + 2))(v18);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
      }
    }
  }
  else
  {
LABEL_21:
    v35[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))off_1E2DC3BC0;
    Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), v35);
  }
}

{
  __ZN8Espresso28linear_dequantize_kernel_cpu9__computeINS_4blobItLi4EEENS2_IhLi4EEEhEEvRKNT_3ptrERKNS_11layer_shapeERKNT0_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_1918027DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void (**v18)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  _WORD *v24;
  int v25;
  unint64_t *v31;
  unint64_t v32;
  float __C;
  float __B;
  void (**v35[2])(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t);

  v7 = 0;
  v8 = *(_QWORD *)(a1 + 288);
  v9 = *(int *)(v8 + 8);
  v10 = v8 + 12;
  do
  {
    v9 *= *(int *)(v10 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v9 != 1)
    goto LABEL_21;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(int *)(v12 + 8);
  v14 = v12 + 12;
  do
  {
    v13 *= *(int *)(v14 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)a4;
    v16 = *(unsigned int *)(*(_QWORD *)a4 + 8);
    for (i = 12; i != 24; i += 4)
      v16 *= *(unsigned int *)(v15 + i);
    v19 = *(_QWORD *)(a1 + 448);
    v18 = *(void (***)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 456);
    v35[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))v19;
    v35[1] = v18;
    if (v18)
    {
      v20 = (unint64_t *)(v18 + 1);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v15 = *(_QWORD *)a4;
    }
    v22 = (int)v16;
    vDSP_vflt8(*(const char **)(v15 + 24), 1, *(float **)(v19 + 24), 1, (int)v16);
    __B = **(float **)(*(_QWORD *)(a1 + 288) + 24);
    __C = __B * (float)-**(_DWORD **)(*(_QWORD *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v19 + 24), 1, &__B, &__C, *(float **)(v19 + 24), 1, (int)v16);
    if (v16 << 32)
    {
      v23 = *(int **)(v19 + 24);
      v24 = *(_WORD **)(*(_QWORD *)a2 + 24);
      do
      {
        v25 = *v23++;
        _S0 = v25;
        __asm { FCVT            H0, S0 }
        *v24++ = _S0;
        --v22;
      }
      while (v22);
    }
    if (v18)
    {
      v31 = (unint64_t *)(v18 + 1);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*((void (**)(void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t)))*v18 + 2))(v18);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
      }
    }
  }
  else
  {
LABEL_21:
    v35[0] = (void (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))off_1E2DC3B98;
    Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), v35);
  }
}

{
  __ZN8Espresso28linear_dequantize_kernel_cpu9__computeINS_4blobItLi4EEENS2_IhLi4EEEaEEvRKNT_3ptrERKNS_11layer_shapeERKNT0_3ptrESB_(a1, a2, a3, a4, a5);
}

void sub_1918029CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__int16 Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call@<H0>(uint64_t a1@<X0>, _WORD *a2@<X1>, char *a3@<X2>, float *a4@<X3>, int *a5@<X4>)
{
  __int16 result;

  _S0 = *a4 * (float)((float)*a3 - (float)*a5);
  __asm { FCVT            H0, S0 }
  *a2 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
  JUMPOUT(0x19401CD90);
}

__int16 Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call@<H0>(float a1@<S0>, uint64_t a2@<X0>, _WORD *a3@<X1>, _BYTE *a4@<X2>, float *a5@<X3>, int *a6@<X4>)
{
  __int16 result;

  LOBYTE(a1) = *a4;
  _S0 = *a5 * (float)((float)LODWORD(a1) - (float)*a6);
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
  JUMPOUT(0x19401CD90);
}

float Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call(uint64_t a1, float *a2, char *a3, float *a4, int *a5)
{
  float result;

  result = *a4 * (float)((float)*a3 - (float)*a5);
  *a2 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
  JUMPOUT(0x19401CD90);
}

float Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call(float a1, uint64_t a2, float *a3, _BYTE *a4, float *a5, int *a6)
{
  float result;

  LOBYTE(a1) = *a4;
  result = *a5 * (float)((float)LODWORD(a1) - (float)*a6);
  *a3 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::furthest_point_sampling_kernel_cpu::~furthest_point_sampling_kernel_cpu(Espresso::furthest_point_sampling_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::furthest_point_sampling_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  float (*v14)(float, float, float, float, float, float);
  uint64_t (**v15)();
  __n128 v16;
  uint64_t (***v17)();
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  float v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  float v46;
  _DWORD *v47;
  int v48;
  int v49;
  uint64_t (***v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  int v79[10];
  void *v80;
  void *v81;
  _DWORD v82[10];
  void *v83;
  void *v84;
  _DWORD v85[3];
  _QWORD v86[3];
  uint64_t (***v87)();
  uint64_t (**v88)();
  float (*v89)(float, float, float, float, float, float);
  uint64_t (***v90)();
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  Espresso::abstract_blob_container::shape((char *)v82, **(_QWORD **)a4);
  v72 = v82[0];
  Espresso::abstract_blob_container::shape((char *)v79, **(_QWORD **)a3);
  if (v82[2] != 3)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("FPS sampling requires 3 channels.");
  v70 = v79[0];
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v7 + 88);
  v8 = *(std::__shared_weak_count **)(v7 + 96);
  v77 = v9;
  v78 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v12
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12))
  {
    v75 = 0;
    v76 = 0;
  }
  else
  {
    v61 = *(std::__shared_weak_count **)(*v12 + 168);
    v75 = *(_QWORD *)(*v12 + 160);
    v76 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
  }
  v13 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v13
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v13 + 32))(*v13))
  {
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v64 = *(std::__shared_weak_count **)(*v13 + 168);
    v73 = *(_QWORD *)(*v13 + 160);
    v74 = v64;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
  }
  if (*(_DWORD *)(a1 + 280) > v82[0])
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("FPS sampling cannot request more output vertices than input vertices.");
  if (*(_DWORD *)(a1 + 284) == 1)
    v14 = Espresso::l1_distance;
  else
    v14 = Espresso::l2_distance;
  v15 = &off_1E2DAD1F8;
  v87 = 0;
  v88 = &off_1E2DAD1F8;
  v89 = v14;
  v90 = &v88;
  std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::__clone((uint64_t)&v88, v86);
  v17 = v87;
  v90 = v87;
  v87 = (uint64_t (***)())v86;
  if (v90 == &v88)
  {
    v18 = 4;
    v17 = &v88;
  }
  else
  {
    if (!v17)
      goto LABEL_22;
    v15 = *v17;
    v18 = 5;
  }
  ((void (*)(uint64_t (***)()))v15[v18])(v17);
LABEL_22:
  if (*(int *)(a1 + 288) < -1)
  {
    v20 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 280) - 1;
    LODWORD(v88) = 0;
    HIDWORD(v88) = v19;
    v20 = std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v9, &v88);
  }
  v67 = (uint64_t)&v67;
  v21 = v75;
  v22 = *(_QWORD *)(v75 + 24) + 4 * v20;
  v16.n128_u32[0] = *(_DWORD *)v22;
  v23 = *(_DWORD *)(v22 + 4 * v72);
  v24 = 2 * v72;
  v25 = *(_DWORD *)(v22 + 8 * (_DWORD)v72);
  v26 = *(_DWORD **)(v73 + 24);
  *v26 = *(_DWORD *)v22;
  LODWORD(v22) = v70;
  v26[v70] = v23;
  v27 = 2 * v22;
  v26[2 * (_DWORD)v22] = v25;
  MEMORY[0x1E0C80A78](v16);
  v29 = (char *)&v67 - ((v28 + 15) & 0x7FFFFFFF0);
  v30 = v82[0];
  bzero(v29, 4 * v82[0]);
  *(_DWORD *)&v29[4 * v20] = -1082130432;
  v68 = a1;
  v31 = *(_DWORD *)(a1 + 280);
  if (v31 >= 2)
  {
    v69 = v27;
    v71 = v24;
    v32 = v24;
    v33 = v72;
    for (i = 1; i < v31; ++i)
    {
      if (v30 >= 1)
      {
        v35 = 0;
        v36 = (unsigned int *)(*(_QWORD *)(v21 + 24) + 4 * v20);
        v37 = v36[v71];
        v38 = v36[v72];
        v39 = *v36;
        v40 = 0.0;
        do
        {
          v41 = *(float *)&v29[4 * v35];
          if (v41 >= 0.0)
          {
            v42 = (int *)(*(_QWORD *)(v21 + 24) + 4 * v35);
            v43 = *v42;
            v44 = v42[v33];
            v45 = v42[v32];
            v88 = (uint64_t (**)())__PAIR64__(v38, v39);
            LODWORD(v89) = v37;
            v85[0] = v43;
            v85[1] = v44;
            v85[2] = v45;
            if (!v87)
              std::__throw_bad_function_call[abi:ne180100]();
            v46 = v41
                + ((float (*)(uint64_t (***)(), uint64_t (***)(), _DWORD *))(*v87)[6])(v87, &v88, v85);
            *(float *)&v29[4 * v35] = v46;
            if (v46 > v40)
            {
              v40 = v46;
              v20 = v35;
            }
            v30 = v82[0];
          }
          ++v35;
        }
        while (v35 < v30);
        v31 = *(_DWORD *)(v68 + 280);
      }
      v47 = (_DWORD *)(*(_QWORD *)(v21 + 24) + 4 * v20);
      v48 = v47[v72];
      v49 = v47[v71];
      v26[1] = *v47;
      ++v26;
      v26[v70] = v48;
      v26[v69] = v49;
      *(_DWORD *)&v29[4 * v20] = -1082130432;
    }
  }
  v50 = v87;
  if (v87 == v86)
  {
    v51 = 4;
    v50 = (uint64_t (***)())v86;
    goto LABEL_41;
  }
  if (v87)
  {
    v51 = 5;
LABEL_41:
    (*v50)[v51]();
  }
  v52 = v74;
  if (v74)
  {
    v53 = (unint64_t *)&v74->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v76;
  if (v76)
  {
    v56 = (unint64_t *)&v76->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v78;
  if (v78)
  {
    v59 = (unint64_t *)&v78->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
}

void sub_191803018(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 8));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 10));
  v3 = (void *)v1[17];
  if (v3)
  {
    v1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[25];
  if (v4)
  {
    v1[26] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

float Espresso::l1_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return vabds_f32(a3, a6) + (float)(vabds_f32(a1, a4) + vabds_f32(a2, a5));
}

float Espresso::l2_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return sqrt((float)(a3 - a6) * (float)(a3 - a6)+ (float)(a1 - a4) * (float)(a1 - a4)+ (float)(a2 - a5) * (float)(a2 - a5));
}

void std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD1F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD1F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float, float, float, float, float))(a1 + 8))(*a2, a2[1], a2[2], *a3, a3[1], a3[2]);
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFfN8Espresso6vertexES0_E"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::target_type()
{
}

void Espresso::tunneled_ane_op_kernel_cpu::~tunneled_ane_op_kernel_cpu(Espresso::tunneled_ane_op_kernel_cpu *this)
{
  *(_QWORD *)this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_kernel_cpu *)((char *)this + 280));
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_kernel_cpu *)((char *)this + 280));
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::tunneled_ane_op_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Can't run tunneled_ane_op on cpu.");
}

uint64_t Espresso::tunneled_ane_op_kernel_cpu::is_valid_for_engine()
{
  return 0;
}

void Espresso::tunneled_ane_unit_kernel_cpu::~tunneled_ane_unit_kernel_cpu(void **this)
{
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::tunneled_ane_unit_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Can't run tunneled_ane_unit on cpu.");
}

uint64_t Espresso::tunneled_ane_unit_kernel_cpu::is_valid_for_engine()
{
  return 0;
}

void Espresso::plane_rw_cpu::~plane_rw_cpu(Espresso::plane_rw_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::plane_rw_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Can't run plane_rw on CPU.");
}

void Espresso::degamma_kernel_cpu::~degamma_kernel_cpu(Espresso::degamma_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::degamma_kernel_cpu::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const float *v14;
  float *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  float v25;
  int v26;
  char v27[40];
  void *__p;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v7 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v21 = *v7;
    v8 = *(_QWORD *)(*v7 + 160);
    v22 = *(std::__shared_weak_count **)(v21 + 168);
    v32 = v8;
    v33 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  v9 = *a3;
  (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  v10 = *(_QWORD *)(*v9 + 160);
  v11 = *(std::__shared_weak_count **)(*v9 + 168);
  v30 = v10;
  v31 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(const float **)(v8 + 24);
  v15 = *(float **)(v10 + 24);
  Espresso::abstract_blob_container::shape(v27, **(_QWORD **)a4);
  v26 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v27);
  if (*(_DWORD *)(a1 + 280))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unknown degamma mode.");
  v25 = 2.2;
  vvpowsf(v15, &v25, v14, &v26);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v18 = v33;
  if (v33)
  {
    v19 = (unint64_t *)&v33->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_191803508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_kernel_cpu::convolution_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v7 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v7[36] = 0;
  v7[37] = 0;
  v7[35] = v7 + 36;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v7 + 38));
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)a1 = off_1E2D95398;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v8 = *a4;
  v9 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v9;
  *(_OWORD *)(a1 + 304) = v8;
  v10 = a4[3];
  v11 = a4[4];
  v12 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v12;
  *(_OWORD *)(a1 + 352) = v10;
  *(_OWORD *)(a1 + 368) = v11;
  v13 = a4[7];
  v14 = a4[8];
  v15 = a4[9];
  *(_QWORD *)(v16 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v14;
  *(_OWORD *)(a1 + 448) = v15;
  *(_OWORD *)(a1 + 416) = v13;
  *(_QWORD *)a1 = &off_1E2D8CF58;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  v17 = *a4;
  v18 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v18;
  *(_OWORD *)(a1 + 304) = v17;
  v19 = a4[3];
  v20 = a4[4];
  v21 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v21;
  *(_OWORD *)(a1 + 352) = v19;
  *(_OWORD *)(a1 + 368) = v20;
  v22 = a4[7];
  v23 = a4[8];
  v24 = a4[9];
  *(_QWORD *)(v16 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 416) = v22;
  *(_BYTE *)(a1 + 468) = *(_BYTE *)(*a2 + 125);
  return a1;
}

__n128 Espresso::pool3d_kernel_cpu::pool3d_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A8AA80;
  *(_OWORD *)(v5 + 16) = xmmword_191A93320;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(_QWORD *)(v5 + 46) = 0;
  *(_QWORD *)(v5 + 38) = 0;
  *(_QWORD *)(v5 + 52) = 0;
  *(_QWORD *)v6 = &off_1E2D825D8;
  result = *(__n128 *)a4;
  v8 = *(_OWORD *)(a4 + 16);
  v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a4 + 44);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(__n128 *)v5 = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A8AA80;
  *(_OWORD *)(v5 + 16) = xmmword_191A93320;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(_QWORD *)(v5 + 46) = 0;
  *(_QWORD *)(v5 + 38) = 0;
  *(_QWORD *)(v5 + 52) = 0;
  *(_QWORD *)v6 = &off_1E2D825D8;
  result = *(__n128 *)a4;
  v8 = *(_OWORD *)(a4 + 16);
  v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a4 + 44);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(__n128 *)v5 = result;
  return result;
}

__n128 Espresso::lrn_kernel_cpu::lrn_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x3F40000038D1B717;
  *(_DWORD *)(v5 + 288) = 3;
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)v5 = &off_1E2D670F0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x3F40000038D1B717;
  *(_DWORD *)(v5 + 288) = 3;
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)v5 = &off_1E2D670F0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::softmax_kernel_cpu::softmax_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 304) = 256;
  *(_OWORD *)(v5 + 280) = xmmword_191A93370;
  *(_QWORD *)(v5 + 296) = 1;
  *(_DWORD *)(v5 + 308) = 0;
  *(_QWORD *)v5 = &off_1E2D84120;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 304) = 256;
  *(_OWORD *)(v5 + 280) = xmmword_191A93370;
  *(_QWORD *)(v5 + 296) = 1;
  *(_DWORD *)(v5 + 308) = 0;
  *(_QWORD *)v5 = &off_1E2D84120;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

void std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

__n128 Espresso::concat_kernel_cpu::concat_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  *(_QWORD *)v5 = &off_1E2D819C0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a4 + 45);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  *(_QWORD *)v5 = &off_1E2D819C0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a4 + 45);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::upsample_kernel_cpu::upsample_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93470;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 308) = 0x3F8000003F800000;
  *(_BYTE *)(v5 + 316) = 1;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 336) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 344) = _D0;
  *(_QWORD *)v5 = &off_1E2D859E0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v12 = *(_OWORD *)(a4 + 32);
  v13 = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(v5 + 344) = *(_QWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 312) = v12;
  *(_OWORD *)(v5 + 328) = v13;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93470;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 308) = 0x3F8000003F800000;
  *(_BYTE *)(v5 + 316) = 1;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 336) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 344) = _D0;
  *(_QWORD *)v5 = &off_1E2D859E0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v12 = *(_OWORD *)(a4 + 32);
  v13 = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(v5 + 344) = *(_QWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 312) = v12;
  *(_OWORD *)(v5 + 328) = v13;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::elementwise_kernel_cpu::elementwise_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 1065353216;
  *(_QWORD *)(v5 + 296) = 897988541;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 324) = 0;
  *(_QWORD *)v5 = &off_1E2D8D208;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 1065353216;
  *(_QWORD *)(v5 + 296) = 897988541;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 324) = 0;
  *(_QWORD *)v5 = &off_1E2D8D208;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::split_kernel_cpu::split_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D73700;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D73700;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::general_padding_kernel_cpu::general_padding_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D93538;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D93538;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::crop_kernel_cpu::crop_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  *v5 = &off_1E2D67CF8;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  *v5 = &off_1E2D67CF8;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

__n128 Espresso::batchnorm_kernel_cpu::batchnorm_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0;
  *(_QWORD *)v5 = &off_1E2D85C18;
  *(_QWORD *)(v5 + 400) = 0;
  *(_QWORD *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 352) = v8;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0;
  *(_QWORD *)v5 = &off_1E2D85C18;
  *(_QWORD *)(v5 + 400) = 0;
  *(_QWORD *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 352) = v8;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

uint64_t Espresso::activation_kernel_cpu::activation_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v6 + 288) = 0;
  *(_QWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 280) = v6 + 288;
  *(_DWORD *)(v6 + 304) = 0;
  *(_QWORD *)(v6 + 308) = 0x3F8000003F800000;
  *(_QWORD *)(v6 + 316) = 0;
  *(_QWORD *)(v6 + 332) = 0;
  *(_QWORD *)(v6 + 324) = 0;
  v6 += 344;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)a1 = &off_1E2D89298;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  v7 = *a4;
  v8 = a4[1];
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(a1 + 304) = v7;
  *(_OWORD *)(a1 + 320) = v8;
  v13 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v6, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

__n128 Espresso::axpby_kernel_cpu::axpby_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 280) = _D0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 316) = 0u;
  *(_QWORD *)v5 = &off_1E2D72F10;
  result = *(__n128 *)a4;
  v12 = *(_OWORD *)(a4 + 16);
  v13 = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v5 + 328) = *(_QWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 280) = _D0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 316) = 0u;
  *(_QWORD *)v5 = &off_1E2D72F10;
  result = *(__n128 *)a4;
  v12 = *(_OWORD *)(a4 + 16);
  v13 = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v5 + 328) = *(_QWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::context_transfer_kernel_cpu::context_transfer_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = off_1E2D9B958;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_DWORD *)(v5 + 343) = 0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  *(_QWORD *)v5 = &off_1E2D950E0;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = off_1E2D9B958;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_DWORD *)(v5 + 343) = 0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  *(_QWORD *)v5 = &off_1E2D950E0;
  return result;
}

__n128 Espresso::reshape_kernel_cpu::reshape_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 296) = xmmword_191A93460;
  *(_WORD *)(v5 + 312) = 1;
  *(_DWORD *)(v5 + 316) = 1;
  *(_QWORD *)v5 = &off_1E2D83E70;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v5 + 312) = *(_QWORD *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 296) = xmmword_191A93460;
  *(_WORD *)(v5 + 312) = 1;
  *(_DWORD *)(v5 + 316) = 1;
  *(_QWORD *)v5 = &off_1E2D83E70;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v5 + 312) = *(_QWORD *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::reshape_like_kernel_cpu::reshape_like_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D90448;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D90448;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::tile_kernel_cpu::tile_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = 1;
  *(_QWORD *)v5 = &off_1E2D681D0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = 1;
  *(_QWORD *)v5 = &off_1E2D681D0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

_QWORD *Espresso::flatten_kernel_cpu::flatten_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *result = &off_1E2D833D8;
  result[35] = *a4;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *result = &off_1E2D833D8;
  result[35] = *a4;
  return result;
}

__n128 Espresso::transpose_kernel_cpu::transpose_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A761E0;
  *(_DWORD *)(v5 + 296) = 4;
  *(_QWORD *)v5 = &off_1E2D87978;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A761E0;
  *(_DWORD *)(v5 + 296) = 4;
  *(_QWORD *)v5 = &off_1E2D87978;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::l2_normalize_kernel_cpu::l2_normalize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0x3358637BDLL;
  *(_DWORD *)(result + 288) = 2;
  *(_QWORD *)result = &off_1E2D90250;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0x3358637BDLL;
  *(_DWORD *)(result + 288) = 2;
  *(_QWORD *)result = &off_1E2D90250;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

uint64_t Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v7 + 288) = 0u;
  *(_QWORD *)(v7 + 280) = v7 + 288;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v7 + 304));
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)a1 = off_1E2D95618;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v8 = *a4;
  v9 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v9;
  *(_OWORD *)(a1 + 304) = v8;
  v10 = a4[3];
  v11 = a4[4];
  v12 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v12;
  *(_OWORD *)(a1 + 352) = v10;
  *(_OWORD *)(a1 + 368) = v11;
  v13 = a4[7];
  v14 = a4[8];
  v15 = a4[9];
  *(_QWORD *)(v16 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v14;
  *(_OWORD *)(a1 + 448) = v15;
  *(_OWORD *)(a1 + 416) = v13;
  *(_QWORD *)a1 = &off_1E2D90B50;
  *(_OWORD *)(a1 + 608) = 0u;
  v17 = *a4;
  v18 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v18;
  *(_OWORD *)(a1 + 304) = v17;
  v19 = a4[3];
  v20 = a4[4];
  v21 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v21;
  *(_OWORD *)(a1 + 352) = v19;
  *(_OWORD *)(a1 + 368) = v20;
  v22 = a4[7];
  v23 = a4[8];
  v24 = a4[9];
  *(_QWORD *)(v16 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 416) = v22;
  *(_BYTE *)(a1 + 468) = *(_BYTE *)(*a2 + 125);
  return a1;
}

_QWORD *Espresso::prediction_smoothing_kernel_cpu::prediction_smoothing_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D9C5A8;
  result[35] = 0x3F4CCCCD00000000;
  result[36] = 0;
  result[37] = 0;
  result[38] = 0;
  result[35] = *a4;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D9C5A8;
  result[35] = 0x3F4CCCCD00000000;
  result[36] = 0;
  result[37] = 0;
  result[38] = 0;
  result[35] = *a4;
  return result;
}

uint64_t Espresso::dropout_kernel_cpu::dropout_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  _QWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  __int128 v9;
  int v10;
  int *v11;
  uint64_t v12;
  unsigned int v13;

  v6 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v6[35] = 0x7C93F000000;
  v6[36] = 0;
  *v6 = &off_1E2D83280;
  v7 = v6 + 37;
  v6[37] = 0;
  v6[38] = 0;
  *(_OWORD *)(v6 + 35) = *a4;
  v8 = operator new(0x28uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBB978;
  v8[4] = 0;
  v8[3] = 0;
  *(_QWORD *)&v9 = v8 + 3;
  *((_QWORD *)&v9 + 1) = v8;
  *v7 = v9;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96));
  v10 = *(_DWORD *)(a1 + 284);
  v11 = **(int ***)(a1 + 296);
  if (v10 < 1)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_DWORD *)(v12 + 60);
    *(_DWORD *)(v12 + 60) = v13 + 1;
    v10 = v13 + ((v13 / 0x7FFFFFFF) | ((v13 / 0x7FFFFFFF) << 31));
    if (v10 <= 1)
      v10 = 1;
  }
  else if (v10 == 0x7FFFFFFF)
  {
    v10 = 1;
  }
  *v11 = v10;
  return a1;
}

void sub_1918047A8(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t Espresso::dropout_kernel_cpu::recreate_randomgen(uint64_t this)
{
  int v1;
  int *v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_DWORD *)(this + 284);
  v2 = **(int ***)(this + 296);
  if (v1 < 1)
  {
    v3 = *(_QWORD *)(this + 8);
    v4 = *(_DWORD *)(v3 + 60);
    *(_DWORD *)(v3 + 60) = v4 + 1;
    v1 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
    if (v1 <= 1)
      v1 = 1;
  }
  else if (v1 == 0x7FFFFFFF)
  {
    v1 = 1;
  }
  *v2 = v1;
  return this;
}

__n128 Espresso::space_to_batch_kernel_cpu::space_to_batch_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D930D0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v5 + 309) = *(_QWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D930D0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v5 + 309) = *(_QWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

double Espresso::space_to_depth_kernel_cpu::space_to_depth_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v5 + 280) = 2;
  *(_DWORD *)(v5 + 288) = 0;
  *(_QWORD *)v5 = &off_1E2D93228;
  v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v5 + 280) = 2;
  *(_DWORD *)(v5 + 288) = 0;
  *(_QWORD *)v5 = &off_1E2D93228;
  v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 280) = v7;
  return result;
}

__n128 Espresso::slice_kernel_cpu::slice_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93790;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_QWORD *)v5 = &off_1E2D735A8;
  result = *a4;
  *(_QWORD *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93790;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_QWORD *)v5 = &off_1E2D735A8;
  result = *a4;
  *(_QWORD *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::broadcast_kernel_cpu::broadcast_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  *(_QWORD *)(v5 + 288) = -1;
  *(_QWORD *)(v5 + 296) = 0xFFFFFFFF00000001;
  *(_BYTE *)(v5 + 304) = 0;
  *(_DWORD *)(v5 + 308) = 0;
  *(_BYTE *)(v5 + 312) = 0;
  *(_QWORD *)v5 = &off_1E2D860B0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_BYTE *)(v5 + 312) = *(_BYTE *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  *(_QWORD *)(v5 + 288) = -1;
  *(_QWORD *)(v5 + 296) = 0xFFFFFFFF00000001;
  *(_BYTE *)(v5 + 304) = 0;
  *(_DWORD *)(v5 + 308) = 0;
  *(_BYTE *)(v5 + 312) = 0;
  *(_QWORD *)v5 = &off_1E2D860B0;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_BYTE *)(v5 + 312) = *(_BYTE *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

_QWORD *Espresso::cast_kernel_cpu::cast_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *result = &off_1E2D67A48;
  result[35] = *a4;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *result = &off_1E2D67A48;
  result[35] = *a4;
  return result;
}

_QWORD *Espresso::compute_stats_kernel_cpu::compute_stats_kernel_cpu(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D908A0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D908A0;
  return result;
}

_QWORD *Espresso::lambda_kernel_cpu::lambda_kernel_cpu(uint64_t a1, uint64_t *a2, unsigned int a3, const std::string *a4)
{
  _QWORD *result;
  unsigned int v5;

  v5 = a3;
  result = (_QWORD *)Espresso::generic_lambda_kernel::generic_lambda_kernel(a1, a2, &v5, a4);
  *result = &off_1E2D82278;
  return result;
}

{
  _QWORD *result;
  unsigned int v5;

  v5 = a3;
  result = (_QWORD *)Espresso::generic_lambda_kernel::generic_lambda_kernel(a1, a2, &v5, a4);
  *result = &off_1E2D82278;
  return result;
}

__n128 Espresso::patch_extractor_kernel_cpu::patch_extractor_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93680;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_BYTE *)(v5 + 320) = 0;
  *(_QWORD *)v5 = &off_1E2D94740;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a4 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93680;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_BYTE *)(v5 + 320) = 0;
  *(_QWORD *)v5 = &off_1E2D94740;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a4 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::crop_and_resize_kernel_cpu::crop_and_resize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_BYTE *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_BYTE *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(_BYTE *)(v5 + 356) = 0;
  *(_QWORD *)v5 = &off_1E2D933E0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a4 + 61);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 300) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_BYTE *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_BYTE *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(_BYTE *)(v5 + 356) = 0;
  *(_QWORD *)v5 = &off_1E2D933E0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a4 + 61);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

uint64_t Espresso::topk_kernel_cpu::topk_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 5;
  *(_WORD *)(result + 284) = 0;
  *(_DWORD *)(result + 288) = -1;
  *(_WORD *)(result + 292) = 256;
  *(_BYTE *)(result + 294) = 1;
  *(_QWORD *)result = &off_1E2D68328;
  v6 = *a4;
  *(_QWORD *)(result + 287) = *(uint64_t *)((char *)a4 + 7);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 5;
  *(_WORD *)(result + 284) = 0;
  *(_DWORD *)(result + 288) = -1;
  *(_WORD *)(result + 292) = 256;
  *(_BYTE *)(result + 294) = 1;
  *(_QWORD *)result = &off_1E2D68328;
  v6 = *a4;
  *(_QWORD *)(result + 287) = *(uint64_t *)((char *)a4 + 7);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::gather_kernel_cpu::gather_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_QWORD *)v5 = &off_1E2D82100;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_QWORD *)v5 = &off_1E2D82100;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::dynamic_quantize_kernel_cpu::dynamic_quantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  double result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  v5[35] = 0xFFFFFFFFLL;
  *v5 = &off_1E2D958C0;
  v5[35] = *a4;
  return result;
}

{
  _QWORD *v5;
  double result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  v5[35] = 0xFFFFFFFFLL;
  *v5 = &off_1E2D958C0;
  v5[35] = *a4;
  return result;
}

__n128 Espresso::dynamic_dequantize_kernel_cpu::dynamic_dequantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0xFFFFFFFFLL;
  *(_DWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 292) = 1065353216;
  *(_QWORD *)(v5 + 300) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)v5 = &off_1E2D99508;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0xFFFFFFFFLL;
  *(_DWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 292) = 1065353216;
  *(_QWORD *)(v5 + 300) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)v5 = &off_1E2D99508;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::quantized_gather_kernel_cpu::quantized_gather_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_191A93840;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D96698;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  result = *a4;
  *(__n128 *)(v5 + 304) = *a4;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_191A93840;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D96698;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  result = *a4;
  *(__n128 *)(v5 + 304) = *a4;
  return result;
}

uint64_t Espresso::general_concat_kernel_cpu::general_concat_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4)
{
  uint64_t result;
  int v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 2;
  *(_WORD *)(result + 284) = 0;
  *(_QWORD *)result = &off_1E2D92490;
  v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 2;
  *(_WORD *)(result + 284) = 0;
  *(_QWORD *)result = &off_1E2D92490;
  v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::spatial_transformer_kernel_cpu::spatial_transformer_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93680;
  *(_BYTE *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(_QWORD *)v5 = &off_1E2D9B380;
  result = *a4;
  *(_QWORD *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93680;
  *(_BYTE *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(_QWORD *)v5 = &off_1E2D9B380;
  result = *a4;
  *(_QWORD *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::copy_kernel_cpu::copy_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D67BA0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D67BA0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

__n128 Espresso::scatter_kernel_cpu::scatter_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_WORD *)(v5 + 300) = 0;
  *(_BYTE *)(v5 + 302) = 0;
  *(_QWORD *)v5 = &off_1E2D83FC8;
  result = *(__n128 *)a4;
  *(_QWORD *)(v5 + 295) = *(_QWORD *)(a4 + 15);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_WORD *)(v5 + 300) = 0;
  *(_BYTE *)(v5 + 302) = 0;
  *(_QWORD *)v5 = &off_1E2D83FC8;
  result = *(__n128 *)a4;
  *(_QWORD *)(v5 + 295) = *(_QWORD *)(a4 + 15);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::load_random_kernel_cpu::load_random_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  NSObject *v11;
  _QWORD v13[5];
  int v14;

  v6 = (_OWORD *)(a1 + 292);
  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v7 + 280) = 0;
  *(_QWORD *)(v7 + 284) = 1065353216;
  *v6 = xmmword_191A935B0;
  v6[1] = xmmword_191A8D8A0;
  *(_WORD *)(v7 + 324) = 0;
  *(_QWORD *)v7 = &off_1E2D8EC50;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  v9 = *a4;
  v8 = a4[1];
  *(_OWORD *)(v7 + 310) = *(__int128 *)((char *)a4 + 30);
  *(_OWORD *)(v7 + 280) = v9;
  *(_OWORD *)(v7 + 296) = v8;
  v10 = *(_DWORD *)(v7 + 292);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 104);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN8Espresso22load_random_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20load_random_params_tE_block_invoke;
    v13[3] = &__block_descriptor_44_e5_v8__0l;
    v13[4] = a1;
    v14 = v10;
    dispatch_sync(v11, v13);
  }
  return a1;
}

uint64_t ___ZN8Espresso22load_random_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20load_random_params_tE_block_invoke(uint64_t result)
{
  unsigned int v1;

  v1 = *(_DWORD *)(result + 40)
     + ((*(_DWORD *)(result + 40) / 0x7FFFFFFFu) | ((*(_DWORD *)(result + 40) / 0x7FFFFFFFu) << 31));
  if (v1 <= 1)
    v1 = 1;
  **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 88) = v1;
  return result;
}

uint64_t Espresso::range_kernel_cpu::range_kernel_cpu(uint64_t a1, _QWORD *a2, float a3, float a4, float a5)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)result = &off_1E2D73450;
  *(float *)(result + 280) = a3;
  *(float *)(result + 284) = a4;
  *(float *)(result + 288) = a5;
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)result = &off_1E2D73450;
  *(float *)(result + 280) = a3;
  *(float *)(result + 284) = a4;
  *(float *)(result + 288) = a5;
  return result;
}

__n128 Espresso::matrix_band_part_kernel_cpu::matrix_band_part_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 285) = 0;
  *(_QWORD *)v5 = &off_1E2D964E0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 285) = 0;
  *(_QWORD *)v5 = &off_1E2D964E0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::fill_kernel_cpu::fill_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_QWORD *)(v5 + 304) = 0xFFFFFFFFLL;
  *(_BYTE *)(v5 + 312) = 1;
  *(_QWORD *)v5 = &off_1E2D67E50;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_BYTE *)(v5 + 312) = *(_BYTE *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_QWORD *)(v5 + 304) = 0xFFFFFFFFLL;
  *(_BYTE *)(v5 + 312) = 1;
  *(_QWORD *)v5 = &off_1E2D67E50;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_BYTE *)(v5 + 312) = *(_BYTE *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

uint64_t Espresso::batch_matmul_kernel_cpu::batch_matmul_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)result = &off_1E2D8F3A0;
  *(_WORD *)(result + 280) = a4;
  *(_BYTE *)(result + 282) = BYTE2(a4);
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)result = &off_1E2D8F3A0;
  *(_WORD *)(result + 280) = a4;
  *(_BYTE *)(result + 282) = BYTE2(a4);
  return result;
}

uint64_t Espresso::tensor_zero_pad_kernel_cpu::tensor_zero_pad_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, const void *a4)
{
  uint64_t v6;

  v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_QWORD *)(v6 + 257) = 0;
  *(_QWORD *)a1 = &off_1E2D94E00;
  memcpy((void *)v6, a4, 0x109uLL);
  return a1;
}

{
  uint64_t v6;

  v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_QWORD *)(v6 + 257) = 0;
  *(_QWORD *)a1 = &off_1E2D94E00;
  memcpy((void *)v6, a4, 0x109uLL);
  return a1;
}

__n128 Espresso::squeeze_kernel_cpu::squeeze_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  *(_QWORD *)v5 = &off_1E2D84278;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v5 + 408) = v11;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v10;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  *(_QWORD *)v5 = &off_1E2D84278;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v5 + 408) = v11;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v10;
  return result;
}

__n128 Espresso::expand_dims_kernel_cpu::expand_dims_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D8D360;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 112);
  *(_QWORD *)(v5 + 408) = *(_QWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = &off_1E2D8D360;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 112);
  *(_QWORD *)(v5 + 408) = *(_QWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

__n128 Espresso::array_gather_kernel_cpu::array_gather_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_QWORD *)(v5 + 296) = 4294967294;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)v5 = &off_1E2D8F248;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_QWORD *)(v5 + 296) = 4294967294;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)v5 = &off_1E2D8F248;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];

  v6 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v6[35] = 0xFFFFFFFF00000001;
  *v6 = &off_1E2D8EDA8;
  v7 = *a4;
  v6[35] = *a4;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso22multinomial_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20multinomial_params_tE_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_sync(v8, block);
  }
  return a1;
}

uint64_t ___ZN8Espresso22multinomial_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20multinomial_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(unsigned int **)(*(_QWORD *)(v1 + 8) + 88);
  v3 = *(_DWORD *)(v1 + 284) + ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1)
    v3 = 1;
  *v2 = v3;
  return result;
}

__n128 Espresso::instancenorm_1d_kernel_cpu::instancenorm_1d_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x358637BD00000000;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_QWORD *)v5 = &off_1E2D943D0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0x358637BD00000000;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_QWORD *)v5 = &off_1E2D943D0;
  result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  _QWORD block[5];

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v6 + 280) = 0xFFFFFFFF00000001;
  *(_WORD *)(v6 + 288) = 0;
  *(_OWORD *)(v6 + 292) = xmmword_191A93340;
  *(_BYTE *)(v6 + 308) = 0;
  *(_DWORD *)(v6 + 312) = 0;
  *(_QWORD *)v6 = &off_1E2D8A430;
  v7 = v6 + 320;
  *(_QWORD *)(v6 + 328) = 0;
  *(_QWORD *)(v6 + 336) = 0;
  *(_QWORD *)(v6 + 320) = 0;
  v9 = *a4;
  v8 = a4[1];
  *(_DWORD *)(v6 + 312) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v6 + 280) = v9;
  *(_OWORD *)(v6 + 296) = v8;
  if ((*(_DWORD *)(v6 + 284) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 308))
    {
      BNNSInitGumbel();
    }
    else
    {
      v10 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN8Espresso21gumbel_max_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_19gumbel_max_params_tE_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v10, block);
    }
  }
  v11 = *(_DWORD *)(a1 + 312);
  if (v11 >= 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v16, v11, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v7, &v16);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  return a1;
}

void sub_191805D6C(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso21gumbel_max_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_19gumbel_max_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(unsigned int **)(*(_QWORD *)(v1 + 8) + 88);
  v3 = *(_DWORD *)(v1 + 284) + ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1)
    v3 = 1;
  *v2 = v3;
  return result;
}

__n128 Espresso::transplant_kernel_cpu::transplant_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)v5 = &off_1E2D8C500;
  result = *a4;
  *(_DWORD *)(v5 + 320) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 304) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)v5 = &off_1E2D8C500;
  result = *a4;
  *(_DWORD *)(v5 + 320) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 304) = result;
  return result;
}

__n128 Espresso::general_slice_kernel_cpu::general_slice_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_191AD0DEC;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_191AD0DEC;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_QWORD *)(v5 + 372) = 0xFFFFFFFF00000000;
  *(_QWORD *)v5 = &off_1E2D90DD0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 376) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_191AD0DEC;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_191AD0DEC;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_QWORD *)(v5 + 372) = 0xFFFFFFFF00000000;
  *(_QWORD *)v5 = &off_1E2D90DD0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 376) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

double Espresso::stack_nd_kernel_cpu::stack_nd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  *(_QWORD *)v5 = &off_1E2D85830;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_QWORD *)(v5 + 352) = 0;
  *(_DWORD *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  *(_QWORD *)v5 = &off_1E2D85830;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_QWORD *)(v5 + 352) = 0;
  *(_DWORD *)(v5 + 280) = *a4;
  return result;
}

uint64_t Espresso::split_nd_kernel_cpu::split_nd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, const void *a4)
{
  uint64_t v6;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)a1 = &off_1E2D856D8;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  memcpy((void *)(v6 + 280), a4, 0x208uLL);
  return a1;
}

{
  uint64_t v6;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)a1 = &off_1E2D856D8;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  memcpy((void *)(v6 + 280), a4, 0x208uLL);
  return a1;
}

uint64_t Espresso::softmax_nd_kernel_cpu::softmax_nd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D8C3A8;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D8C3A8;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

double Espresso::sliding_windows_kernel_cpu::sliding_windows_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v5 + 280) = 0x100000000;
  *(_DWORD *)(v5 + 288) = 1;
  *(_QWORD *)v5 = &off_1E2D94B50;
  v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v5 + 280) = 0x100000000;
  *(_DWORD *)(v5 + 288) = 1;
  *(_QWORD *)v5 = &off_1E2D94B50;
  v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 280) = v7;
  return result;
}

double Espresso::reverse_seq_kernel_cpu::reverse_seq_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  double result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0x100000000;
  v5[35] = 0x100000000;
  *v5 = &off_1E2D8EF60;
  v5[35] = *a4;
  return result;
}

{
  _QWORD *v5;
  double result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 0x100000000;
  v5[35] = 0x100000000;
  *v5 = &off_1E2D8EF60;
  v5[35] = *a4;
  return result;
}

uint64_t Espresso::cross_entropy_kernel_cpu::cross_entropy_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(result + 280) = 0;
  *(_DWORD *)(result + 284) = 1;
  *(_BYTE *)(result + 288) = 1;
  *(_QWORD *)result = &off_1E2D909F8;
  v6 = *a4;
  *(_BYTE *)(result + 288) = *((_BYTE *)a4 + 8);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(result + 280) = 0;
  *(_DWORD *)(result + 284) = 1;
  *(_BYTE *)(result + 288) = 1;
  *(_QWORD *)result = &off_1E2D909F8;
  v6 = *a4;
  *(_BYTE *)(result + 288) = *((_BYTE *)a4 + 8);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

uint64_t Espresso::sgd_kernel_cpu::sgd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(result + 280) = 0;
  *(_QWORD *)(result + 284) = 0x100000000;
  *(_QWORD *)result = &off_1E2D67440;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(result + 280) = 0;
  *(_QWORD *)(result + 284) = 0x100000000;
  *(_QWORD *)result = &off_1E2D67440;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::adam_kernel_cpu::adam_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F7FBE773F666666;
  v5[36] = 0x1322BCC77;
  *v5 = &off_1E2D67728;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F7FBE773F666666;
  v5[36] = 0x1322BCC77;
  *v5 = &off_1E2D67728;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

uint64_t Espresso::gather_nd_kernel_cpu::gather_nd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(_QWORD *)result = &off_1E2D86598;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 296) = 0;
  v6 = *a4;
  *(_QWORD *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(_QWORD *)result = &off_1E2D86598;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 296) = 0;
  v6 = *a4;
  *(_QWORD *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

uint64_t Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  __int128 v7;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v6 + 280) = 0x3F00000000000001;
  *(_DWORD *)(v6 + 288) = 0;
  *(_BYTE *)(v6 + 292) = 0;
  *(_QWORD *)(v6 + 296) = 0x300000000;
  *(_QWORD *)(v6 + 320) = 0;
  *(_QWORD *)(v6 + 328) = 0;
  *(_QWORD *)(v6 + 312) = 0;
  *(_DWORD *)(v6 + 304) = 0;
  *(_QWORD *)v6 = &off_1E2D9E7B8;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  v7 = *a4;
  *(_OWORD *)(v6 + 292) = *(__int128 *)((char *)a4 + 12);
  *(_OWORD *)(v6 + 280) = v7;
  if ((__int128 *)(v6 + 280) != a4)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 312), *((char **)a4 + 4), *((_QWORD *)a4 + 5), (uint64_t)(*((_QWORD *)a4 + 5) - *((_QWORD *)a4 + 4)) >> 2);
  return a1;
}

void sub_191806680(_Unwind_Exception *a1)
{
  Espresso::generic_non_maximum_suppression_kernel *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = (void *)*((_QWORD *)v1 + 57);
  if (v4)
  {
    *((_QWORD *)v1 + 58) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)v1 + 54);
  if (v5)
  {
    *((_QWORD *)v1 + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 51);
  if (v6)
  {
    *((_QWORD *)v1 + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 48);
  if (v7)
  {
    *((_QWORD *)v1 + 49) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 45);
  if (v8)
  {
    *((_QWORD *)v1 + 46) = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 43) = v9;
    operator delete(v9);
  }
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::scatter_nd_kernel_cpu::scatter_nd_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(_QWORD *)result = &off_1E2D8C210;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 296) = 0;
  v6 = *a4;
  *(_QWORD *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(_QWORD *)result = &off_1E2D8C210;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 296) = 0;
  v6 = *a4;
  *(_QWORD *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

_QWORD *Espresso::nonzero_kernel_cpu::nonzero_kernel_cpu(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D83B00;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D83B00;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  return result;
}

_QWORD *Espresso::precompiled_segment_kernel_cpu::precompiled_segment_kernel_cpu(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D9B228;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  *result = &off_1E2D9B228;
  return result;
}

__n128 Espresso::one_hot_kernel_cpu::one_hot_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F80000000000000;
  v5[36] = 0xFFFFFFFF00000000;
  *v5 = &off_1E2D83C58;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F80000000000000;
  v5[36] = 0xFFFFFFFF00000000;
  *v5 = &off_1E2D83C58;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

uint64_t Espresso::cumsum_kernel_cpu::cumsum_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _WORD *a4)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D81CF8;
  *(_WORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D81CF8;
  *(_WORD *)(result + 280) = *a4;
  return result;
}

double Espresso::sparse_inner_product_kernel_cpu::sparse_inner_product_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_QWORD *)(v5 + 304) = 0x100000001;
  *(_DWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D9C700;
  result = 0.0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  v7 = *a4;
  *(_DWORD *)(v5 + 312) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 304) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_QWORD *)(v5 + 304) = 0x100000001;
  *(_DWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D9C700;
  result = 0.0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  v7 = *a4;
  *(_DWORD *)(v5 + 312) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v5 + 304) = v7;
  return result;
}

uint64_t Espresso::grid_sampling_kernel_cpu::grid_sampling_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4)
{
  uint64_t result;
  int v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_WORD *)(result + 284) = 0;
  *(_QWORD *)result = &off_1E2D91BA0;
  v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_WORD *)(result + 284) = 0;
  *(_QWORD *)result = &off_1E2D91BA0;
  v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::resample_kernel_cpu::resample_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(_BYTE *)(v5 + 304) = 1;
  *(_QWORD *)v5 = &off_1E2D85580;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(_QWORD *)(v5 + 292) = 0;
  *(_QWORD *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(_BYTE *)(v5 + 304) = 1;
  *(_QWORD *)v5 = &off_1E2D85580;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::argsort_kernel_cpu::argsort_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  double result;
  int v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 284) = 1;
  *(_QWORD *)v5 = &off_1E2D82888;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  v7 = *a4;
  *(_BYTE *)(v5 + 284) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  int v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 284) = 1;
  *(_QWORD *)v5 = &off_1E2D82888;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  v7 = *a4;
  *(_BYTE *)(v5 + 284) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(v5 + 280) = v7;
  return result;
}

uint64_t Espresso::argsort_kernel_cpu::fill_tmp_indices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(this + 288);
  v2 = *(_QWORD *)(this + 296);
  v3 = v2 - v1;
  if (v2 != v1)
  {
    v4 = 0;
    v5 = v3 >> 3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      *(_QWORD *)(v1 + 8 * v4) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

float Espresso::argsort_kernel_cpu::size_t_to_fp32(Espresso::argsort_kernel_cpu *this, unint64_t *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  float result;

  for (; a6; --a6)
  {
    result = (float)*a2;
    *a4 = result;
    a4 += a5;
    a2 += a3;
  }
  return result;
}

__n128 Espresso::local_correlation_kernel_cpu::local_correlation_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93830;
  *(_QWORD *)v5 = &off_1E2D98B88;
  result = *a4;
  *(__n128 *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93830;
  *(_QWORD *)v5 = &off_1E2D98B88;
  result = *a4;
  *(__n128 *)(v5 + 280) = *a4;
  return result;
}

__n128 Espresso::conv3d_kernel_cpu::conv3d_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)v5 = off_1E2D8CB98;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(_QWORD *)v5 = &off_1E2D81B18;
  v11 = *a4;
  v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  result = (__n128)a4[3];
  v14 = a4[4];
  v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)v5 = off_1E2D8CB98;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(_QWORD *)v5 = &off_1E2D81B18;
  v11 = *a4;
  v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  result = (__n128)a4[3];
  v14 = a4[4];
  v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::slice_update_kernel_cpu::slice_update_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93790;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_DWORD *)(v5 + 304) = 0;
  *(_QWORD *)v5 = &off_1E2D905F0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_191A93790;
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_DWORD *)(v5 + 304) = 0;
  *(_QWORD *)v5 = &off_1E2D905F0;
  result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::static_quantize_kernel_cpu::static_quantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = -1;
  *(_QWORD *)(result + 284) = 1065353216;
  *(_QWORD *)result = &off_1E2D94CA8;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = -1;
  *(_QWORD *)(result + 284) = 1065353216;
  *(_QWORD *)result = &off_1E2D94CA8;
  v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::static_dequantize_kernel_cpu::static_dequantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = -1;
  *(_QWORD *)(v5 + 308) = 1065353216;
  *(_QWORD *)(v5 + 316) = 0;
  *(_DWORD *)(v5 + 324) = 1065353216;
  *(_QWORD *)(v5 + 336) = 0;
  *(_QWORD *)(v5 + 344) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D98EC8;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 320) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = -1;
  *(_QWORD *)(v5 + 308) = 1065353216;
  *(_QWORD *)(v5 + 316) = 0;
  *(_DWORD *)(v5 + 324) = 1065353216;
  *(_QWORD *)(v5 + 336) = 0;
  *(_QWORD *)(v5 + 344) = 0;
  *(_QWORD *)(v5 + 328) = 0;
  *(_QWORD *)v5 = &off_1E2D98EC8;
  result = *(__n128 *)a4;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 320) = v7;
  return result;
}

uint64_t Espresso::fused_convolution_grad_kernel_cpu::fused_convolution_grad_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 280));
  *(_DWORD *)(a1 + 448) = 65793;
  *(_QWORD *)a1 = &off_1E2D9D340;
  v7 = *a4;
  v8 = a4[2];
  v9[1] = a4[1];
  v9[2] = v8;
  *v9 = v7;
  v10 = a4[3];
  v11 = a4[4];
  v12 = a4[6];
  v9[5] = a4[5];
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  v13 = a4[7];
  v14 = a4[8];
  v15 = a4[9];
  *(_OWORD *)((char *)v9 + 156) = *(__int128 *)((char *)a4 + 156);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  return a1;
}

{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 280));
  *(_DWORD *)(a1 + 448) = 65793;
  *(_QWORD *)a1 = &off_1E2D9D340;
  v7 = *a4;
  v8 = a4[2];
  v9[1] = a4[1];
  v9[2] = v8;
  *v9 = v7;
  v10 = a4[3];
  v11 = a4[4];
  v12 = a4[6];
  v9[5] = a4[5];
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  v13 = a4[7];
  v14 = a4[8];
  v15 = a4[9];
  *(_OWORD *)((char *)v9 + 156) = *(__int128 *)((char *)a4 + 156);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  return a1;
}

__n128 Espresso::fused_inner_product_grad_kernel_cpu::fused_inner_product_grad_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)v5 = &off_1E2D9ED88;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 112);
  *(_QWORD *)(v5 + 407) = *(_QWORD *)(a4 + 127);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)v5 = &off_1E2D9ED88;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  v7 = *(_OWORD *)(a4 + 32);
  v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  result = *(__n128 *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 96);
  v11 = *(_OWORD *)(a4 + 112);
  *(_QWORD *)(v5 + 407) = *(_QWORD *)(a4 + 127);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a1 + 280;
  v3 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)v3 = off_1E2D8BF30;
  *(_BYTE *)(v3 + 320) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v3 + 328) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v3 + 336) = _D1;
  *(_QWORD *)(v2 + 124) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)v2 = xmmword_191A93320;
  *(_QWORD *)(v3 + 296) = 0x3F80000000000000;
  *(_QWORD *)(v3 + 304) = 1065353216;
  *(_QWORD *)(v2 + 84) = 0;
  *(_DWORD *)(v3 + 324) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_QWORD *)(v2 + 100) = 0;
  *(_QWORD *)(v2 + 116) = 0;
  *(_QWORD *)(v2 + 108) = 0;
  *(_WORD *)(v3 + 412) = 257;
  *(_BYTE *)(v3 + 414) = 1;
  return result;
}

__n128 Espresso::deconv3d_kernel_cpu::deconv3d_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)v5 = off_1E2D8CD78;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(_QWORD *)v5 = &off_1E2D845E8;
  v11 = *a4;
  v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  result = (__n128)a4[3];
  v14 = a4[4];
  v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)v5 = off_1E2D8CD78;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(_QWORD *)v5 = &off_1E2D845E8;
  v11 = *a4;
  v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  result = (__n128)a4[3];
  v14 = a4[4];
  v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::general_slice_update_kernel_cpu::general_slice_update_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_191AD0DEC;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_191AD0DEC;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_DWORD *)(v5 + 372) = 0;
  *(_QWORD *)(v5 + 376) = 0xFFFFFFFFLL;
  *(_QWORD *)v5 = &off_1E2D9B800;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_QWORD *)(v5 + 376) = *((_QWORD *)a4 + 12);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_191AD0DEC;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_191AD0DEC;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_DWORD *)(v5 + 372) = 0;
  *(_QWORD *)(v5 + 376) = 0xFFFFFFFFLL;
  *(_QWORD *)v5 = &off_1E2D9B800;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[5];
  *(_QWORD *)(v5 + 376) = *((_QWORD *)a4 + 12);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

__n128 Espresso::resize_nearest_neighbor_kernel_cpu::resize_nearest_neighbor_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 *a4)
{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  *v5 = &off_1E2D9E940;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  *v5 = &off_1E2D9E940;
  result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

char *Espresso::einsum_kernel_cpu::einsum_kernel_cpu(char *a1, _QWORD *a2, uint64_t a3, const std::string *a4)
{
  uint64_t v6;
  const std::string *v7;

  v6 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  v7 = (const std::string *)(v6 + 280);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_QWORD *)v6 = &off_1E2D81FA8;
  std::string::operator=((std::string *)(v6 + 280), a4);
  if (v7 != a4)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 304, a4[1].__r_.__value_.__l.__data_, a4[1].__r_.__value_.__l.__size_, (uint64_t)(a4[1].__r_.__value_.__l.__size_ - a4[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 328, a4[2].__r_.__value_.__l.__data_, a4[2].__r_.__value_.__l.__size_, (uint64_t)(a4[2].__r_.__value_.__l.__size_ - a4[2].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 352, a4[3].__r_.__value_.__l.__data_, a4[3].__r_.__value_.__l.__size_, (uint64_t)(a4[3].__r_.__value_.__l.__size_ - a4[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  return a1;
}

void sub_191807600(_Unwind_Exception *a1)
{
  Espresso::generic_einsum_kernel *v1;

  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  _Unwind_Resume(a1);
}

double Espresso::linear_quantize_kernel_cpu::linear_quantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_QWORD *)v5 = &off_1E2D94528;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 440) = 0;
  *(_QWORD *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_QWORD *)v5 = &off_1E2D94528;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 440) = 0;
  *(_QWORD *)(v5 + 280) = *a4;
  return result;
}

double Espresso::linear_dequantize_kernel_cpu::linear_dequantize_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_QWORD *)v5 = &off_1E2D98A30;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 440) = 0;
  *(_QWORD *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = -1;
  result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_QWORD *)v5 = &off_1E2D98A30;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_191A8AA80;
  *(_QWORD *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 440) = 0;
  *(_QWORD *)(v5 + 280) = *a4;
  return result;
}

uint64_t Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu(uint64_t a1, _QWORD *a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _QWORD block[5];

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v7 + 280) = 2;
  *(_DWORD *)(v7 + 288) = -2;
  *(_QWORD *)v7 = &off_1E2D9E218;
  v8 = *a4;
  v9 = *((_DWORD *)a4 + 2);
  *(_DWORD *)(v7 + 288) = v9;
  *(_QWORD *)(v7 + 280) = v8;
  *(_DWORD *)(v7 + 292) = a3;
  if ((v9 & 0x80000000) == 0)
  {
    v10 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso34furthest_point_sampling_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_32furthest_point_sampling_params_tE_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_sync(v10, block);
  }
  return a1;
}

uint64_t ___ZN8Espresso34furthest_point_sampling_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_32furthest_point_sampling_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(unsigned int **)(*(_QWORD *)(v1 + 8) + 88);
  v3 = *(_DWORD *)(v1 + 288) + ((*(_DWORD *)(v1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 288) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1)
    v3 = 1;
  *v2 = v3;
  return result;
}

_QWORD *Espresso::tunneled_ane_op_kernel_cpu::tunneled_ane_op_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  *result = &off_1E2D94F58;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  *result = &off_1E2D94F58;
  return result;
}

_QWORD *Espresso::tunneled_ane_unit_kernel_cpu::tunneled_ane_unit_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  *result = &off_1E2D99060;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  *result = &off_1E2D99060;
  return result;
}

double Espresso::plane_rw_cpu::plane_rw_cpu(uint64_t a1, _QWORD *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  double result;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 875704422;
  *(_QWORD *)(v6 + 280) = 875704422;
  *(_QWORD *)v6 = &off_1E2D5FEB8;
  *(_QWORD *)(v6 + 280) = *a4;
  *(_DWORD *)(v6 + 288) = a3;
  return result;
}

{
  uint64_t v6;
  double result;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&result = 875704422;
  *(_QWORD *)(v6 + 280) = 875704422;
  *(_QWORD *)v6 = &off_1E2D5FEB8;
  *(_QWORD *)(v6 + 280) = *a4;
  *(_DWORD *)(v6 + 288) = a3;
  return result;
}

uint64_t Espresso::degamma_kernel_cpu::degamma_kernel_cpu(uint64_t a1, _QWORD *a2, int a3, _DWORD *a4)
{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D83128;
  *(_DWORD *)(result + 280) = *a4;
  *(_DWORD *)(result + 284) = a3;
  return result;
}

{
  uint64_t result;

  result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_QWORD *)result = &off_1E2D83128;
  *(_DWORD *)(result + 280) = *a4;
  *(_DWORD *)(result + 284) = a3;
  return result;
}

Espresso::multi_head_aot_helper_t *Espresso::multi_head_aot_helper_t::multi_head_aot_helper_t(Espresso::multi_head_aot_helper_t *this, Espresso::net *a2)
{
  const void **v3;
  const void **v4;
  std::string *v5;
  _QWORD *v6;
  char *v7;
  __int128 *v8;
  __int128 v9;
  char *v10;
  char *v11;
  std::string *v12;
  int v13;
  std::string *v14;
  int data;
  int v16;
  BOOL v17;
  uint64_t *v18;
  void **v19;
  char *v20;
  uint64_t **v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  std::string **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  int v32;
  std::string *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  unsigned __int8 *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  char *v50;
  std::string *v51;
  std::string *v52;
  uint64_t **v53;
  std::string **v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v58;
  uint64_t *v59;
  std::string **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  std::string *v63;
  std::string *v64;
  char *v65;
  char *v66[3];
  Espresso::net *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  char v72;
  __int128 v73;

  *(_QWORD *)&v73 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v50 = (char *)this + 8;
  *(_QWORD *)this = (char *)this + 8;
  v3 = (const void **)*((_QWORD *)a2 + 83);
  v4 = (const void **)*((_QWORD *)a2 + 84);
  *((_QWORD *)this + 4) = 0;
  v59 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 3) = (char *)this + 32;
  v53 = (uint64_t **)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  while (v3 != v4)
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v53, v59, v3, (uint64_t)v3);
    v3 += 3;
  }
  Espresso::reload_network_layers(a2, (uint64_t *)&v67);
  Espresso::multi_head_aot_helper_t::compute_outputs_per_layer(this, v67, v66);
  std::string::basic_string[abi:ne180100]<0>(&v70, "default");
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = &v63;
  LOBYTE(v61) = 0;
  v63 = (std::string *)operator new(0x18uLL);
  v64 = v63;
  v65 = (char *)&v63[1];
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, &v70, &v73, v63);
  v64 = v5;
  if (v72 < 0)
  {
    operator delete((void *)v70);
    v5 = v64;
  }
  v6 = (_QWORD *)*((_QWORD *)v67 + 97);
  v7 = (char *)v67 + 784;
  if (v6 != (_QWORD *)((char *)v67 + 784))
  {
    do
    {
      v8 = (__int128 *)(v6 + 4);
      if (v5 >= (std::string *)v65)
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v63, (uint64_t)v8);
      }
      else
      {
        if (*((char *)v6 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v6[4], v6[5]);
        }
        else
        {
          v9 = *v8;
          v5->__r_.__value_.__r.__words[2] = v6[6];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v9;
        }
        ++v5;
      }
      v64 = v5;
      v10 = (char *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)v6[2];
          v17 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v17);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  v12 = v63;
  if (v63 != v5)
  {
    v51 = v5;
    do
    {
      v61 = 0;
      v62 = 0;
      v60 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, *((_QWORD *)v67 + 83), *((_QWORD *)v67 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v67 + 84) - *((_QWORD *)v67 + 83)) >> 3));
      v13 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
      if (v13 < 0)
      {
        if (v12->__r_.__value_.__l.__size_ != 7)
          goto LABEL_30;
        v14 = (std::string *)v12->__r_.__value_.__r.__words[0];
      }
      else
      {
        v14 = v12;
        if (v13 != 7)
          goto LABEL_30;
      }
      data = (int)v14->__r_.__value_.__l.__data_;
      v16 = *(_DWORD *)((char *)v14->__r_.__value_.__r.__words + 3);
      v17 = data == 1634100580 && v16 == 1953264993;
      if (!v17)
      {
LABEL_30:
        *(_QWORD *)&v70 = v12;
        v18 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v67 + 97, v12, (__int128 **)&v70);
        if (&v60 != (std::string ***)(v18 + 7))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v60, (std::string *)v18[7], (std::string *)v18[8], 0xAAAAAAAAAAAAAAABLL * ((v18[8] - v18[7]) >> 3));
      }
      v19 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)this, &v69, v12);
      v20 = (char *)*v19;
      if (!*v19)
      {
        v21 = (uint64_t **)v19;
        v20 = (char *)operator new(0x68uLL);
        *(_QWORD *)&v70 = v20;
        *((_QWORD *)&v70 + 1) = v50;
        v71 = 0;
        v22 = (std::string *)(v20 + 32);
        if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v22, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
        }
        else
        {
          v23 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          *((_QWORD *)v20 + 6) = *((_QWORD *)&v12->__r_.__value_.__l + 2);
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        }
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        v71 = 1;
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this, v69, v21, (uint64_t *)v20);
        *(_QWORD *)&v70 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&v70);
      }
      std::string::operator=((std::string *)(v20 + 56), v12);
      v56 = v20 + 80;
      std::vector<BOOL>::resize((uint64_t)(v20 + 80), (uint64_t)(*((_QWORD *)v67 + 5) - *((_QWORD *)v67 + 4)) >> 4);
      v52 = v12;
      v24 = *((_QWORD *)v67 + 5) - *((_QWORD *)v67 + 4);
      if (v24)
      {
        v25 = v24 >> 4;
        v54 = v60;
        v58 = v61;
        do
        {
          v55 = v25 - 1;
          if (v54 != (std::string **)v58)
          {
            v26 = v54;
            v27 = v55 >> 6;
            v28 = 1 << v55;
            v29 = *v53;
            v30 = &v66[0][40 * v55];
            do
            {
              if (v29 == v59)
              {
                v31 = 0;
              }
              else
              {
                v31 = 0;
                v32 = *((char *)v26 + 23);
                if (v32 >= 0)
                  v33 = (std::string *)*((unsigned __int8 *)v26 + 23);
                else
                  v33 = v26[1];
                v34 = v29;
                do
                {
                  v35 = *((unsigned __int8 *)v34 + 55);
                  if ((v35 & 0x80u) == 0)
                    v36 = *((unsigned __int8 *)v34 + 55);
                  else
                    v36 = v34[5];
                  if ((std::string *)v36 == v33)
                  {
                    v37 = (const void **)(v34 + 4);
                    if (v32 >= 0)
                      v38 = (unsigned __int8 *)v26;
                    else
                      v38 = (unsigned __int8 *)*v26;
                    if ((v35 & 0x80) != 0)
                    {
                      if (!memcmp(*v37, v38, v34[5]))
                        break;
                    }
                    else
                    {
                      if (!*((_BYTE *)v34 + 55))
                        break;
                      while (*(unsigned __int8 *)v37 == *v38)
                      {
                        v37 = (const void **)((char *)v37 + 1);
                        ++v38;
                        if (!--v35)
                          goto LABEL_67;
                      }
                    }
                  }
                  v39 = (uint64_t *)v34[1];
                  if (v39)
                  {
                    do
                    {
                      v40 = v39;
                      v39 = (uint64_t *)*v39;
                    }
                    while (v39);
                  }
                  else
                  {
                    do
                    {
                      v40 = (uint64_t *)v34[2];
                      v17 = *v40 == (_QWORD)v34;
                      v34 = v40;
                    }
                    while (!v17);
                  }
                  ++v31;
                  v34 = v40;
                }
                while (v40 != v59);
              }
LABEL_67:
              if (v31 >= *((_QWORD *)this + 5))
              {
                if (*((char *)v26 + 23) < 0)
                  v26 = (std::string **)*v26;
                *(_QWORD *)&v70 = v26;
                Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("multi_head_aot_helper_t: Output %s not found", &v70);
              }
              v41 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v30, v31);
              v42 = *(_QWORD *)(*v56 + 8 * v27);
              v43 = v42 & v28 | v41;
              v44 = v42 & ~(1 << v55);
              v45 = v42 | v28;
              if (!v43)
                v45 = v44;
              *(_QWORD *)(*v56 + 8 * v27) = v45;
              v26 += 3;
            }
            while (v26 != (std::string **)v58);
          }
          v25 = v55;
        }
        while (v55);
      }
      *(_QWORD *)&v70 = &v60;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
      ++v12;
    }
    while (&v52[1] != v51);
  }
  *(_QWORD *)&v70 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  *(_QWORD *)&v70 = v66;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  v46 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return this;
}

void sub_19180808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char **a18, void **a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (*(char *)(v29 - 97) < 0)
    operator delete(*(void **)(v29 - 120));
  a22 = (void **)&a25;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](&a22);
  v31 = a29;
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__tree<std::string>::destroy(a12, *a18);
  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a16, *(_QWORD *)(a16 + 8));
  _Unwind_Resume(a1);
}

void Espresso::multi_head_aot_helper_t::compute_outputs_per_layer(Espresso::multi_head_aot_helper_t *this@<X0>, Espresso::net *a2@<X1>, char **a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  BOOL v15;
  void *v16;
  _QWORD v17[3];
  void *__p;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  void *v22[5];
  void **v23;

  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v22);
  std::vector<std::unordered_set<unsigned long>>::vector(a3, (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  v21 = 0;
  v6 = (char *)*((_QWORD *)this + 3);
  v7 = (char *)this + 32;
  if (v6 != (char *)this + 32)
  {
    do
    {
      v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v22, (uint64_t)(v6 + 32));
      if (!v8)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v9 = v8[5];
      v10 = operator new(8uLL);
      v17[2] = 0;
      __p = v10;
      *v10 = v9;
      v19 = v10 + 1;
      v20 = v10 + 1;
      v17[0] = 0;
      v17[1] = 0;
      Espresso::net::recurse_layer_producers((uint64_t)a2, v22, v9, (uint64_t)&__p, (uint64_t)v17, 0);
      v11 = __p;
      v12 = v19;
      while (v11 != v12)
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&(*a3)[40 * *v11++], &v21, &v21);
      ++v21;
      v23 = (void **)v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
      v13 = (char *)*((_QWORD *)v6 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v6 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v6;
          v6 = v14;
        }
        while (!v15);
      }
      v6 = v14;
    }
    while (v14 != v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v22[2]);
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
    operator delete(v16);
}

void sub_191808310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::multi_head_aot_helper_t::combination>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::multi_head_aot_helper_t::combination>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *Espresso::multi_head_aot_helper_t::remove_unused_layers(uint64_t a1, Espresso::net *a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)a2 + 20))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot run multi_head_aot_helper_t::remove_unused_layers on a shaped network");
  result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v9, a3);
  v5 = *result;
  if (!*result)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v6 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4);
  if (v6)
  {
    v7 = v6 >> 4;
    do
    {
      v8 = v7 - 1;
      if (((*(_QWORD *)(*(_QWORD *)(v5 + 80) + (((unint64_t)(v7 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 1)) & 1) == 0)
        result = (uint64_t *)Espresso::net::remove_layer(a2, (int)v7 - 1);
      v7 = v8;
    }
    while (v8);
  }
  return result;
}

void Espresso::multi_head_aot_helper_t::helper_for_segment(Espresso::multi_head_aot_helper_t *this@<X0>, const Espresso::net_compiler_segment_based::segment_t *a2@<X2>, uint64_t ***a3@<X8>)
{
  char *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  const void **v24;
  const void **v25;
  const void ***v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void **v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  Espresso::multi_head_aot_helper_t *v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t *v47;

  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &unk_1E2DBCEE8;
  *((_OWORD *)v6 + 2) = 0u;
  v7 = (uint64_t *)(v6 + 32);
  v43 = this;
  v44 = v6;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v8 = (uint64_t **)(v6 + 24);
  v11 = *(char **)this;
  v10 = (char *)this + 8;
  v9 = v11;
  if (v11 != v10)
  {
    do
    {
      v12 = *v7;
      v13 = v7;
      if (*v8 == v7)
        goto LABEL_8;
      v14 = (uint64_t *)*v7;
      v15 = v7;
      if (v12)
      {
        do
        {
          v13 = v14;
          v14 = (uint64_t *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v15[2];
          v16 = *v13 == (_QWORD)v15;
          v15 = v13;
        }
        while (v16);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, v9 + 4))
      {
LABEL_8:
        if (!v12)
        {
          v47 = v7;
          v17 = (uint64_t **)v7;
LABEL_14:
          v18 = (char *)operator new(0x68uLL);
          v19 = v18;
          v45 = v18;
          *(_QWORD *)&v46 = v7;
          BYTE8(v46) = 0;
          if (*((char *)v9 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v18 + 32), (const std::string::value_type *)v9[4], v9[5]);
          }
          else
          {
            v20 = *((_OWORD *)v9 + 2);
            *((_QWORD *)v18 + 6) = v9[6];
            *((_OWORD *)v18 + 2) = v20;
          }
          if (*((char *)v9 + 79) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v19 + 56), (const std::string::value_type *)v9[7], v9[8]);
          }
          else
          {
            v21 = *(_OWORD *)(v9 + 7);
            *((_QWORD *)v19 + 9) = v9[9];
            *(_OWORD *)(v19 + 56) = v21;
          }
          std::vector<BOOL>::vector((_QWORD *)v19 + 10, (uint64_t)(v9 + 10));
          BYTE8(v46) = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v8, (uint64_t)v47, v17, (uint64_t *)v19);
          v45 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&v45);
          goto LABEL_21;
        }
        v47 = v13;
        v17 = (uint64_t **)(v13 + 1);
      }
      else
      {
        v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v8, &v47, v9 + 4);
      }
      if (!*v17)
        goto LABEL_14;
LABEL_21:
      v22 = (char *)v9[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)v9[2];
          v16 = *(_QWORD *)v23 == (_QWORD)v9;
          v9 = v23;
        }
        while (!v16);
      }
      v9 = v23;
    }
    while (v23 != v10);
  }
  *((_QWORD *)v44 + 7) = 0;
  *((_QWORD *)v44 + 8) = 0;
  *((_QWORD *)v44 + 6) = v44 + 56;
  v24 = (const void **)*((_QWORD *)v43 + 3);
  if (v24 != (const void **)((char *)v43 + 32))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)v44 + 6, (uint64_t *)v44 + 7, v24 + 4, (uint64_t)(v24 + 4));
      v25 = (const void **)v24[1];
      if (v25)
      {
        do
        {
          v26 = (const void ***)v25;
          v25 = (const void **)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (const void ***)v24[2];
          v16 = *v26 == v24;
          v24 = (const void **)v26;
        }
        while (!v16);
      }
      v24 = (const void **)v26;
    }
    while (v26 != (const void ***)((char *)v43 + 32));
  }
  *a3 = v8;
  a3[1] = (uint64_t **)v44;
  v27 = (uint64_t *)*((_QWORD *)v44 + 3);
  if (v27 != v7)
  {
    do
    {
      v28 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
      {
        v30 = v28 - 63;
        if ((uint64_t)(v28 - 63) < 0)
          v30 = *(_QWORD *)a2;
        v29 = v30 >> 6;
      }
      else
      {
        v29 = v28 >> 6;
      }
      v31 = *((_QWORD *)a2 + 1);
      if ((v31 & 0x8000000000000000) != 0)
      {
        v33 = v31 - 63;
        if ((uint64_t)(v31 - 63) < 0)
          v33 = *((_QWORD *)a2 + 1);
        v32 = v33 >> 6;
      }
      else
      {
        v32 = v31 >> 6;
      }
      v35 = (void **)(v27 + 10);
      v34 = (char *)v27[10];
      v36 = &v34[8 * v29];
      v37 = &v34[8 * v32];
      v45 = 0;
      v46 = 0uLL;
      v38 = (v31 & 0x3F) - (v28 & 0x3F);
      v39 = v38 + 8 * (v37 - v36);
      if (v39)
      {
        std::vector<BOOL>::__vallocate[abi:ne180100](&v45, v38 + 8 * (v37 - v36));
        std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v45, v36, v28 & 0x3F, v37, v31 & 0x3F, v39);
        v34 = (char *)*v35;
      }
      if (v34)
      {
        operator delete(v34);
        *v35 = 0;
        v27[11] = 0;
        v27[12] = 0;
      }
      v27[10] = (uint64_t)v45;
      *(_OWORD *)(v27 + 11) = v46;
      v40 = (uint64_t *)v27[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (uint64_t *)v27[2];
          v16 = *v41 == (_QWORD)v27;
          v27 = v41;
        }
        while (!v16);
      }
      v27 = v41;
    }
    while (v41 != v7);
  }
}

void sub_191808810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p)
{
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v17;

  if (*(char *)(v14 + 55) < 0)
    operator delete(*v15);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(v13, a12[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a12);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBCEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBCEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::multi_head_aot_helper_t::is_needed_for (uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)a1;
  if (!*(_QWORD *)(*(_QWORD *)a1 + 792))
    return 0;
  v2 = (_QWORD *)v1[97];
  if (v2 == v1 + 98)
    return 0;
  while (1)
  {
    v3 = v2[7];
    v4 = v2[8];
    if (v3 != v4 && v4 - v3 != v1[84] - v1[83])
      break;
    v5 = (_QWORD *)v2[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v2[2];
        v7 = *v6 == (_QWORD)v2;
        v2 = v6;
      }
      while (!v7);
    }
    v2 = v6;
    if (v6 == v1 + 98)
      return 0;
  }
  return 1;
}

void Espresso::HXEngine::batch::~batch(Espresso::HXEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::HXEngine::batch::sync_point(Espresso::HXEngine::batch *this)
{
  return (*(uint64_t (**)(Espresso::HXEngine::batch *))(*(_QWORD *)this + 24))(this);
}

char *Espresso::HXEngine::context::begin_batch@<X0>(Espresso::HXEngine::context *this@<X0>, char **a2@<X8>)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DC1280;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = this;
  *((_QWORD *)v4 + 19) = 0;
  a2[1] = v4;
  *((_QWORD *)v4 + 3) = &off_1E2DA49E0;
  result = v4 + 24;
  *a2 = result;
  return result;
}

_QWORD *Espresso::HXEngine::context::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HX");
}

void Espresso::HXEngine::context::~context(Espresso::HXEngine::context *this)
{
  Espresso::HXEngine::context::~context(this);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;

  *(_QWORD *)this = &off_1E2DA4A90;
  v2 = *((_QWORD *)this + 18);
  if (v2 && *((_BYTE *)this + 156))
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2);
    if (*((_BYTE *)this + 156))
    {
      v4 = *((_QWORD *)this + 18);
      if (v4)
      {
        v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v5)
          v5(v4);
      }
    }
  }
  if (*((_BYTE *)this + 157))
  {
    v6 = *((_QWORD *)this + 20);
    if (v6)
    {
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
      v8 = (const void *)*((_QWORD *)this + 20);
      if (v8)
        CFRelease(v8);
    }
  }
  v9 = (const void *)*((_QWORD *)this + 18);
  if (v9)
    CFRelease(v9);
  Espresso::abstract_context::~abstract_context((id *)this);
}

void Espresso::HXEngine::context::network_transform_pre_allocation(Espresso::HXEngine::context *this, uint64_t **a2)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t **v16;
  int v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  char *v55;
  int v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  const void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::string::size_type v73;
  uint64_t **v74;
  int *v75;
  int *v76;
  __int16 v77;
  unint64_t v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 *v83;
  __int128 v84;
  int v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t **v98;
  int *v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  const void *v106;
  void *v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _DWORD *v117;
  int v118;
  int v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t **v138;
  int *v139;
  int *v140;
  unint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t v149;
  std::vector<std::string> *v150;
  std::vector<std::string> *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::runtime_error *exception;
  std::runtime_error *v158;
  int *v159;
  void *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  std::string v164;
  int v165;
  __int128 v166;
  std::string v167;
  __int128 v168;
  __int128 v169;
  void *__p;
  char *v171;
  unint64_t v172;
  char v173[8];
  std::__shared_weak_count *v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t *v177;
  _QWORD *v178;

  if (!*((_BYTE *)this + 158))
    return;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v173, (Espresso::net *)a2);
  __p = 0;
  v171 = 0;
  v172 = 0;
  LODWORD(v160) = 0;
  v3 = a2[4];
  if (a2[5] != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)&v3[2 * v5];
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(_QWORD *)(v6 + 64);
      if (v9 && *(void (***)(Espresso::HXEngine::convolution_kernel *__hidden))v9 == &off_1E2DA4608)
      {
        v13 = *(std::__shared_weak_count **)(v6 + 72);
        *(_QWORD *)&v169 = *(_QWORD *)(v6 + 64);
        *((_QWORD *)&v169 + 1) = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v16 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v175, v4, &v160);
        if ((char *)v16[6] - (char *)v16[5] == 4)
        {
          v17 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v175, v4, &v160)[5];
          v18 = a2[4][2 * v17];
          v19 = *(const void **)(v18 + 64);
          if (v19
          {
            v21 = v20;
            v22 = *(_QWORD *)(v18 + 72);
            *(_QWORD *)&v168 = v20;
            *((_QWORD *)&v168 + 1) = v22;
            if (v22)
            {
              v23 = (unint64_t *)(v22 + 8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
          }
          else
          {
            v21 = 0;
            v168 = 0uLL;
          }
          *(_QWORD *)&v166 = v4;
          v25 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v4, &v166)[3];
          if (*((char *)v25 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
          }
          else
          {
            v26 = *v25;
            v167.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
            *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v26;
          }
          if (v21 && *(int *)(v9 + 344) <= 64)
          {
            *(_DWORD *)(v9 + 760) = 1;
            v27 = (__int128 *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 384))(v21);
            v28 = *v27;
            v29 = v27[2];
            *(_OWORD *)(v9 + 640) = v27[1];
            *(_OWORD *)(v9 + 656) = v29;
            *(_OWORD *)(v9 + 624) = v28;
            v30 = v27[3];
            v31 = v27[4];
            v32 = v27[6];
            *(_OWORD *)(v9 + 704) = v27[5];
            *(_OWORD *)(v9 + 720) = v32;
            *(_OWORD *)(v9 + 672) = v30;
            *(_OWORD *)(v9 + 688) = v31;
            std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v166, 2, 1, 1, 1);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v9 + 736, &v166);
            v33 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
            if (*((_QWORD *)&v166 + 1))
            {
              v34 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v36 = v169;
            **(_QWORD **)(*(_QWORD *)(v169 + 736) + 16) = **(_QWORD **)(*(_QWORD *)(v168 + 432) + 16);
            *(_QWORD *)&v166 = &v167;
            *(_DWORD *)(v36 + 752) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 23, &v167, (__int128 **)&v166)+ 14);
            *(_QWORD *)&v166 = &v167;
            *(_DWORD *)(v36 + 756) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 23, &v167, (__int128 **)&v166)+ 15);
            v37 = v171;
            if ((unint64_t)v171 >= v172)
            {
              v39 = (char *)__p;
              v40 = (v171 - (_BYTE *)__p) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v42 = v172 - (_QWORD)__p;
              if ((uint64_t)(v172 - (_QWORD)__p) >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
                v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v43);
              else
                v44 = 0;
              v45 = (char *)(v43 + 4 * v40);
              *(_DWORD *)v45 = v17;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              __p = v45;
              v172 = v43 + 4 * v44;
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v171 = v17;
              v38 = v37 + 4;
            }
            v171 = v38;
            *(_QWORD *)&v166 = v17;
            v47 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v17, &v166);
            v162 = (void *)(int)v160;
            v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), (int)v160, &v162);
            if (v48 != v47)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v48 + 3), (std::string *)v47[3], (std::string *)v47[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47[4] - v47[3]) >> 3));
          }
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v167.__r_.__value_.__l.__data_);
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
          if (*((_QWORD *)&v168 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
        }
        if (v13)
        {
          v52 = (unint64_t *)&v13->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      size = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_)
      {
        v11 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v5 = (int)v160 + 1;
      LODWORD(v160) = (_DWORD)v160 + 1;
      v3 = a2[4];
      v4 = v5;
    }
    while (v5 < ((char *)a2[5] - (char *)v3) >> 4);
    v54 = __p;
    v55 = v171;
    if (__p != v171)
    {
      v56 = 0;
      v57 = (char *)__p;
      do
      {
        Espresso::net::remove_layer((Espresso::net *)a2, v56 + *(_DWORD *)v57);
        v57 += 4;
        --v56;
      }
      while (v57 != v55);
    }
    if (v54)
      operator delete(v54);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v178);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v176);
  v58 = v174;
  if (v174)
  {
    v59 = (unint64_t *)&v174->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v173, (Espresso::net *)a2);
  v165 = 0;
  v61 = a2[4];
  if (a2[5] == v61)
    goto LABEL_201;
  v62 = 0;
  do
  {
    v63 = *(_OWORD *)&v61[2 * v62];
    v169 = v63;
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67 = v63;
    v68 = *(const void **)(v63 + 64);
    if (!v68
    {
      goto LABEL_195;
    }
    v69 = *(std::__shared_weak_count **)(v67 + 72);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      do
        v72 = __ldaxr(v70);
      while (__stlxr(v72 - 1, v70));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    __p = 0;
    v171 = 0;
    v172 = 0;
    LODWORD(v73) = v165;
    v74 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v177, v165, &v165);
    v75 = (int *)v74[5];
    v76 = (int *)v74[6];
    if (v75 != v76)
    {
      v77 = 0;
      while (1)
      {
        v78 = *v75;
        v79 = *(_OWORD *)&a2[4][2 * v78];
        v168 = v79;
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v164.__r_.__value_.__r.__words[0] = v78;
        v83 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v78, &v164)[3];
        if (*((char *)v83 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v83, *((_QWORD *)v83 + 1));
        }
        else
        {
          v84 = *v83;
          v167.__r_.__value_.__r.__words[2] = *((_QWORD *)v83 + 2);
          *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v84;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[24], &v167))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v164);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
        v85 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 23, &v167, (__int128 **)&v164)+ 16);
        v86 = v171;
        if ((unint64_t)v171 >= v172)
        {
          v88 = (char *)__p;
          v89 = (v171 - (_BYTE *)__p) >> 2;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v91 = v172 - (_QWORD)__p;
          if ((uint64_t)(v172 - (_QWORD)__p) >> 1 > v90)
            v90 = v91 >> 1;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
            v92 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          if (v92)
            v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v92);
          else
            v93 = 0;
          v94 = (char *)(v92 + 4 * v89);
          *(_DWORD *)v94 = v85;
          v87 = v94 + 4;
          while (v86 != v88)
          {
            v95 = *((_DWORD *)v86 - 1);
            v86 -= 4;
            *((_DWORD *)v94 - 1) = v95;
            v94 -= 4;
          }
          __p = v94;
          v172 = v92 + 4 * v93;
          if (v88)
            operator delete(v88);
        }
        else
        {
          *(_DWORD *)v171 = v85;
          v87 = v86 + 4;
        }
        v171 = v87;
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v167.__r_.__value_.__l.__data_);
          if (v80)
          {
LABEL_120:
            v96 = (unint64_t *)&v80->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else if (v80)
        {
          goto LABEL_120;
        }
        v77 += v85;
        if (++v75 == v76)
        {
          LODWORD(v73) = v165;
          goto LABEL_127;
        }
      }
    }
    v77 = 0;
LABEL_127:
    v98 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v177, v73, &v165);
    v99 = (int *)v98[5];
    v159 = (int *)v98[6];
    if (v99 == v159)
      goto LABEL_179;
    v100 = 0;
    v101 = 0;
    do
    {
      v102 = *(_OWORD *)&a2[4][2 * *v99];
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v102;
      if (*((_QWORD *)&v102 + 1))
      {
        v103 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      v105 = v102;
      v106 = *(const void **)(v102 + 64);
      if (!v106)
      {
        v168 = 0uLL;
        v166 = 0uLL;
        v162 = 0;
        v163 = 0;
LABEL_209:
        v160 = 0;
        v161 = 0;
        v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v158, &v167);
        __cxa_throw(v158, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (!v107)
      {
        v168 = 0uLL;
        if (v112)
        {
          v113 = v112;
          v114 = *(std::__shared_weak_count **)(v105 + 72);
          *(_QWORD *)&v166 = v112;
          *((_QWORD *)&v166 + 1) = v114;
          if (v114)
          {
            v115 = (unint64_t *)&v114->__shared_owners_;
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
          }
          *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v112 + 384))(v112) + 66) = v77;
          *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v113 + 384))(v113) + 62) = v101;
          v117 = __p;
          v118 = *((_DWORD *)__p + v100);
          *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v113 + 384))(v113) + 68) = v118;
          v119 = v117[v100];
          *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v113 + 384))(v113) + 104) = v119;
          v101 += v117[v100];
          if (!v114)
          {
LABEL_167:
            v109 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
            if (!*((_QWORD *)&v168 + 1))
              goto LABEL_172;
LABEL_168:
            v133 = (unint64_t *)&v109->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
            goto LABEL_172;
          }
LABEL_163:
          v131 = (unint64_t *)&v114->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
          goto LABEL_167;
        }
        v166 = 0uLL;
        if (v120)
        {
          v121 = *(std::__shared_weak_count **)(v105 + 72);
          v162 = v120;
          v163 = v121;
          if (!v121)
            goto LABEL_162;
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        else
        {
          v162 = 0;
          v163 = 0;
          if (!v124)
            goto LABEL_209;
          v125 = *(std::__shared_weak_count **)(v105 + 72);
          v160 = v124;
          v161 = v125;
          if (v125)
          {
            v126 = (unint64_t *)&v125->__shared_owners_;
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
            do
              v128 = __ldaxr(v126);
            while (__stlxr(v128 - 1, v126));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v121 = v163;
          if (!v163)
          {
LABEL_162:
            v114 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
            if (!*((_QWORD *)&v166 + 1))
              goto LABEL_167;
            goto LABEL_163;
          }
        }
        v129 = (unint64_t *)&v121->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
        goto LABEL_162;
      }
      v108 = v107;
      v109 = *(std::__shared_weak_count **)(v105 + 72);
      *(_QWORD *)&v168 = v107;
      *((_QWORD *)&v168 + 1) = v109;
      if (v109)
      {
        v110 = (unint64_t *)&v109->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v107 + 384))(v107) + 130) = v77;
      *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v108 + 384))(v108) + 126) = v101;
      v101 += *((_DWORD *)__p + v100);
      if (v109)
        goto LABEL_168;
LABEL_172:
      v135 = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_)
      {
        v136 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      ++v100;
      ++v99;
    }
    while (v99 != v159);
    LODWORD(v73) = v165;
LABEL_179:
    v138 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v177, v73, &v165);
    v139 = (int *)v138[5];
    v140 = (int *)v138[6];
    if (v139 != v140)
    {
      do
      {
        v141 = *v139;
        v142 = *(_OWORD *)&a2[4][2 * v141];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v142;
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1))
        {
          v144 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }
        v164.__r_.__value_.__r.__words[0] = v165;
        v146 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v165, &v164);
        *(_QWORD *)&v168 = v141;
        v147 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v141, &v168);
        if (v147 != v146)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v147 + 3), (std::string *)v146[3], (std::string *)v146[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146[4] - v146[3]) >> 3));
        if (v143)
        {
          v148 = (unint64_t *)&v143->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        ++v139;
      }
      while (v139 != v140);
      LODWORD(v73) = v165;
    }
    v73 = (int)v73;
    v167.__r_.__value_.__r.__words[0] = v73;
    v150 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), (int)v73, &v167);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v150 + 1, 0, 0, 0);
    v167.__r_.__value_.__r.__words[0] = (int)v73;
    v151 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 7), (int)v73, &v167);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v151 + 1, 0, 0, 0);
    if (__p)
      operator delete(__p);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
LABEL_195:
    if (v64)
    {
      v152 = (unint64_t *)&v64->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v62 = ++v165;
    v61 = a2[4];
  }
  while (v62 < ((char *)a2[5] - (char *)v61) >> 4);
LABEL_201:
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v178);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v176);
  v154 = v174;
  if (v174)
  {
    v155 = (unint64_t *)&v174->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
}

void sub_1918097FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;

  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)(v38 - 152));
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::context::create_compiler_for_network(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  __int128 v5;
  _OWORD *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  __int128 v21;
  unsigned int v22;
  unsigned int *v23;

  v22 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = *a2;
  v4 = (char *)operator new(0x138uLL);
  v5 = 0uLL;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E2DC1130;
  *((_QWORD *)v4 + 3) = &off_1E2DA41E0;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 0;
  *((_QWORD *)v4 + 7) = 0;
  v6 = v4 + 56;
  *((_OWORD *)v4 + 4) = 0u;
  *((_DWORD *)v4 + 20) = 0;
  *(_QWORD *)(v4 + 84) = 1;
  *((_DWORD *)v4 + 23) = -1;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_DWORD *)v4 + 32) = 0;
  *((_QWORD *)v4 + 21) = 0;
  *((_QWORD *)v4 + 22) = v4 + 184;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *((_QWORD *)v4 + 9) = v3;
  v7 = *(const void **)(v3 + 16);
  if (v7
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 + 8);
    *(_OWORD *)(v4 + 56) = v5;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *v6 = v5;
  }
  if (!*(_QWORD *)v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)&v21 = v4 + 24;
  *((_QWORD *)&v21 + 1) = v4;
  v15 = *a2 + 528;
  v23 = &v22;
  v16 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v15, &v22, (uint64_t)&std::piecewise_construct, &v23);
  v17 = (std::__shared_weak_count *)v16[4];
  *(_OWORD *)(v16 + 3) = v21;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_191809BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v15;
  void *v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 + 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 + 224);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*(_QWORD **)(v12 + 184));
  a12 = (void **)(v12 + 152);
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v12 + 24) = off_1E2D5FD08;
  v15 = *(std::__shared_weak_count **)(v12 + 40);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v12);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::HXEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC11D8;
  Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191809E38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::HXEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0xC0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC12F0;
  result.n128_u64[0] = Espresso::HXEngine::context::context((uint64_t)(v4 + 3), a1, 0, 0);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191809EB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::engine::~engine(Espresso::HXEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1248;
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA4888;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191809FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC11A0;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((_BYTE *)v4 + 364) = 0;
  *((_WORD *)v4 + 172) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &off_1E2DA43D0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19180A0A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC11A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC11A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (char *)operator new(0x218uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1168;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA4238;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19180A1E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x358uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1210;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 312) = 0u;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2DA4608;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *((_DWORD *)v6 + 162) = 0;
  *(_OWORD *)(v6 + 652) = xmmword_191A93960;
  *(_OWORD *)(v6 + 668) = xmmword_191A93970;
  *((_WORD *)v6 + 342) = 1;
  *(_OWORD *)(v6 + 686) = 0u;
  *(_OWORD *)(v6 + 702) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((_QWORD *)v6 + 92) = 0x100000001;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 792) = 0u;
  *(_OWORD *)(v6 + 808) = 0u;
  *(_OWORD *)(v6 + 744) = 0u;
  *(_OWORD *)(v6 + 760) = 0u;
  *(_OWORD *)(v6 + 772) = 0u;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19180A358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::context::context(uint64_t a1, _QWORD *a2, CFTypeRef a3, const void *a4)
{
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t (*v10)(CFTypeRef, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, uint64_t, std::string *);
  int v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *);
  int v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t (*v21)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *);
  int v22;
  dispatch_semaphore_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t (*v26)(uint64_t, std::string *);
  int v27;
  char v28;
  uint64_t v29;
  mach_port_t v30;
  uint64_t v31;
  char v32;
  const __CFDictionary *v33;
  char **v34;
  const char *v35;
  void *v36;
  uint64_t (*v37)(uint64_t, _QWORD, CFTypeRef *);
  int v38;
  int v40;
  std::runtime_error *exception;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  std::string *p_theArray;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  int v49;
  std::runtime_error *v50;
  std::string *v51;
  __int128 v52;
  std::string v53;
  void *v54;
  NSObject *v55;
  uint64_t v56;
  CFTypeRef v57;
  CFTypeRef cf;
  std::string v59;
  std::string theArray;
  _QWORD v61[4];

  v61[3] = *MEMORY[0x1E0C80C00];
  v7 = Espresso::abstract_context::abstract_context(a1, a2);
  *(_QWORD *)v7 = &off_1E2DA4A90;
  *(_QWORD *)(v7 + 144) = 0;
  v8 = (CFTypeRef *)(v7 + 144);
  *(_QWORD *)(v7 + 150) = 0;
  *(_BYTE *)(v7 + 158) = 1;
  *(_QWORD *)(v7 + 160) = 0;
  *(_BYTE *)(v7 + 44) = 1;
  *(_BYTE *)(v7 + 124) = 1;
  if (a3)
  {
    CFRetain(a3);
    *(_BYTE *)(a1 + 157) = 0;
    if (!a4)
      goto LABEL_3;
LABEL_29:
    *(_BYTE *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 144) = a4;
    CFRetain(a4);
    return a1;
  }
  if (a4)
    goto LABEL_29;
  v28 = 0;
  v29 = 0;
  cf = 0;
  v30 = *MEMORY[0x1E0CBBAA8];
  v31 = *MEMORY[0x1E0C9AE00];
  do
  {
    v32 = v28;
    v33 = IOServiceMatching(off_1E2DD6338[4 * v29]);
    if (IOServiceGetMatchingService(v30, v33))
    {
      v34 = &off_1E2DD6338[4 * v29];
      v35 = v34[2];
      v36 = dlopen(v34[1], 4);
      if (v36)
      {
        v37 = (uint64_t (*)(uint64_t, _QWORD, CFTypeRef *))dlsym(v36, v35);
        if (v37)
        {
          v38 = v37(v31, 0, &cf);
          if (v38)
          {
            v40 = v38;
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            v42 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v61, "H9ISPCaptureDeviceCreate ");
            v43 = std::string::append(v42, v35);
            v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&theArray, v40);
            if ((theArray.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_theArray = &theArray;
            else
              p_theArray = (std::string *)theArray.__r_.__value_.__r.__words[0];
            if ((theArray.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(theArray.__r_.__value_.__r.__words[2]);
            else
              size = theArray.__r_.__value_.__l.__size_;
            v47 = std::string::append(&v59, (const std::string::value_type *)p_theArray, size);
            v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v53.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v53);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
        }
      }
    }
    v28 = 1;
    v29 = 1;
  }
  while ((v32 & 1) == 0);
  a3 = cf;
  if (!cf)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v59, 0);
    v51 = std::string::insert(&v59, 0, "LoadAndCreateVideoCaptureDevice returned ");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v50, &v53);
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(a1 + 157) = 1;
  *(_QWORD *)(a1 + 160) = a3;
LABEL_3:
  theArray.__r_.__value_.__r.__words[0] = getkFigCaptureISPProcessingSessionConfigurationKey_SessionType();
  v61[0] = &unk_1E2DEDC28;
  v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v61, &theArray, 1);
  v10 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
  if (!v10)
  {
    LODWORD(a3) = -12782;
    goto LABEL_39;
  }
  v11 = *MEMORY[0x1E0C9AE00];
  LODWORD(a3) = v10(a3, *MEMORY[0x1E0C9AE00], v9, v8);
  if ((_DWORD)a3 || (a3 = *v8) == 0)
  {
LABEL_39:
    std::string::basic_string[abi:ne180100]<0>(&v53, "error");
    std::string::basic_string[abi:ne180100]<0>(&v59, "CMGeneralProcessDPM failed:Couldn't create ISP processing session - err");
    Espresso::HXEngine::context::error((uint64_t)&v53, (int)a3, (uint64_t)&v59);
  }
  theArray.__r_.__value_.__r.__words[0] = 0;
  v12 = getkFigCaptureISPProcessingSessionProperty_SupportedOutputs();
  v13 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, std::string *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (!v13)
  {
    v14 = -12782;
    goto LABEL_42;
  }
  v14 = v13(a3, v12, v11, &theArray);
  if (v14 || !theArray.__r_.__value_.__r.__words[0])
  {
LABEL_42:
    std::string::basic_string[abi:ne180100]<0>(&v53, "error");
    std::string::basic_string[abi:ne180100]<0>(&v59, "CMGeneralProcessDPM failed:No supported outputs");
    Espresso::HXEngine::context::error((uint64_t)&v53, v14, (uint64_t)&v59);
  }
  if (!CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_))
  {
    v14 = 0;
    goto LABEL_42;
  }
  CFRelease(theArray.__r_.__value_.__l.__data_);
  theArray.__r_.__value_.__r.__words[0] = 0;
  cf = 0;
  v15 = *v8;
  v16 = getkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes();
  v17 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v17)
  {
    v18 = -12782;
    goto LABEL_44;
  }
  v18 = v17(v15, v16, v11, &cf);
  if (v18 || !cf)
  {
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&v53, "error");
    std::string::basic_string[abi:ne180100]<0>(&v59, "CMGeneralProcessDPM failed:Could not query input pixel buffer pool attributes");
    Espresso::HXEngine::context::error((uint64_t)&v53, v18, (uint64_t)&v59);
  }
  CFRelease(cf);
  v57 = 0;
  cf = 0;
  v19 = *v8;
  v20 = getkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes();
  v21 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v21)
  {
    v22 = -12782;
    goto LABEL_46;
  }
  v22 = v21(v19, v20, v11, &v57);
  if (v22 || !v57)
  {
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&v53, "error");
    std::string::basic_string[abi:ne180100]<0>(&v59, "CMGeneralProcessDPM failed:Could not query output pixel buffer pool attributes");
    Espresso::HXEngine::context::error((uint64_t)&v53, v22, (uint64_t)&v59);
  }
  CFRelease(v57);
  v57 = 0;
  v23 = dispatch_semaphore_create(0);
  v24 = *(_QWORD *)(a1 + 144);
  v53.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  v53.__r_.__value_.__l.__size_ = 3221225472;
  v53.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso8HXEngine7context12init_sessionEv_block_invoke;
  v54 = &unk_1E2DD6278;
  v56 = a1;
  v25 = v23;
  v55 = v25;
  v26 = *(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v26)
  {
    v27 = -12782;
LABEL_48:
    std::string::basic_string[abi:ne180100]<0>(&v59, "error");
    std::string::basic_string[abi:ne180100]<0>(v61, "CMGeneralProcess failed:ISP session prepare failed");
    Espresso::HXEngine::context::error((uint64_t)&v59, v27, (uint64_t)v61);
  }
  v27 = v26(v24, &v53);
  if (v27)
    goto LABEL_48;
  dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_DWORD *)(a1 + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(&v59, "error");
    v49 = *(_DWORD *)(a1 + 152);
    std::string::basic_string[abi:ne180100]<0>(v61, "CMGeneralProcess failed:ISP session prepare failed - err");
    Espresso::HXEngine::context::error((uint64_t)&v59, v49, (uint64_t)v61);
  }

  *(_BYTE *)(a1 + 156) = 1;
  return a1;
}

void sub_19180A98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  id *v31;
  void *v32;
  int v33;

  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      Espresso::abstract_context::~abstract_context(v31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_SupportedOutputs(void)
{
  uint64_t *v0;
  uint64_t result;

  if (CMCaptureLibrary(void)::sOnce != -1)
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_27_15369);
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_SupportedOutputs");
  if (v0)
  {
    result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs = result;
  }
  else
  {
    result = constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs;
  }
  getkFigCaptureISPProcessingSessionProperty_SupportedOutputs = kFigCaptureISPProcessingSessionProperty_SupportedOutputsFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_SupportedOutputsFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs;
}

void Espresso::HXEngine::context::error(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;

  std::operator+<char>();
  v5 = std::string::append(&v34, " ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v33, a2);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v33;
  else
    v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v35, (const std::string::value_type *)v7, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v36, " ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&v37, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
  NSLog(CFSTR("%s"), v18);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  v20 = std::string::append(&v34, " ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v33, a2);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v33;
  else
    v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v23 = v33.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v36, " ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = *(char *)(a3 + 23);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a3;
  else
    v29 = *(const std::string::value_type **)a3;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  v31 = std::string::append(&v37, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v38);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19180AE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  if (a35 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
LABEL_16:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v35);
  goto LABEL_16;
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes(void)
{
  uint64_t *v0;
  uint64_t result;

  if (CMCaptureLibrary(void)::sOnce != -1)
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_27_15369);
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes");
  if (v0)
  {
    result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes = result;
  }
  else
  {
    result = constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes;
  }
  getkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes = kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributesFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributesFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes;
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes(void)
{
  uint64_t *v0;
  uint64_t result;

  if (CMCaptureLibrary(void)::sOnce != -1)
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_27_15369);
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes");
  if (v0)
  {
    result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes = result;
  }
  else
  {
    result = constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes;
  }
  getkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes = kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributesFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributesFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes;
}

intptr_t ___ZN8Espresso8HXEngine7context12init_sessionEv_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 152) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t initValkFigCaptureISPProcessingSessionConfigurationKey_SessionType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (CMCaptureLibrary(void)::sOnce != -1)
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_27_15369);
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionConfigurationKey_SessionType");
  if (v0)
  {
    result = *v0;
    constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType = result;
  }
  else
  {
    result = constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType;
  }
  getkFigCaptureISPProcessingSessionConfigurationKey_SessionType = kFigCaptureISPProcessingSessionConfigurationKey_SessionTypeFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionConfigurationKey_SessionTypeFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType;
}

void sub_19180B1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19180B2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19180B3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19180B4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__3(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  if (result != a2)
  {
    v2 = (uint64_t)result;
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (result[2])
    {
      v5 = *result;
      v7 = (uint64_t **)(result + 1);
      v6 = result[1];
      *result = result + 1;
      *(_QWORD *)(v6 + 16) = 0;
      result[1] = 0;
      result[2] = 0;
      if (*(_QWORD *)(v5 + 8))
        v8 = *(uint64_t **)(v5 + 8);
      else
        v8 = (uint64_t *)v5;
      v22 = result;
      v23 = v8;
      v24 = v8;
      if (!v8
        || (v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8),
            v4 == v3))
      {
        v14 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          v9 = *(_OWORD *)(v4 + 7);
          v8[9] = v4[9];
          *(_OWORD *)(v8 + 7) = v9;
          v10 = *v7;
          v11 = (uint64_t **)(v2 + 8);
          v12 = (uint64_t **)(v2 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                v11 = (uint64_t **)v10;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v10 + 4))
                  break;
                v10 = *v11;
                v12 = v11;
                if (!*v11)
                  goto LABEL_14;
              }
              v10 = v11[1];
            }
            while (v10);
            v12 = v11 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v11, v12, v24);
          v8 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v13 = (_QWORD *)v4[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v4[2];
              v15 = *v14 == (_QWORD)v4;
              v4 = v14;
            }
            while (!v15);
          }
          if (!v8)
            break;
          v4 = v14;
        }
        while (v14 != v3);
      }
      result = (_QWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      v4 = v14;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>((uint64_t)&v22, v2, (uint64_t)(v4 + 4));
        v16 = v22;
        v17 = *(uint64_t **)(v2 + 8);
        v18 = (uint64_t **)(v2 + 8);
        v19 = (uint64_t **)(v2 + 8);
        if (v17)
        {
          do
          {
            while (1)
            {
              v18 = (uint64_t **)v17;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4))
                break;
              v17 = *v18;
              v19 = v18;
              if (!*v18)
                goto LABEL_33;
            }
            v17 = v18[1];
          }
          while (v17);
          v19 = v18 + 1;
        }
LABEL_33:
        result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v18, v19, v16);
        v20 = (_QWORD *)v4[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v4[2];
            v15 = *v21 == (_QWORD)v4;
            v4 = v21;
          }
          while (!v15);
        }
        v4 = v21;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_19180B788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19180B81C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_atomic_property__2(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;

  result[1] = 0;
  v2 = (uint64_t)(result + 1);
  result[2] = 0;
  *result = (uint64_t)(result + 1);
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = (uint64_t)result;
    do
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = (_QWORD *)v2;
      if (*(_QWORD *)v5 == v2)
        goto LABEL_9;
      v8 = *(_QWORD **)(v5 + 8);
      v9 = (_QWORD *)v2;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      result = (uint64_t *)std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v4 + 4);
      if ((_DWORD)result)
      {
LABEL_9:
        if (!v6)
        {
          v15 = (_QWORD *)v2;
          v11 = (uint64_t **)v2;
LABEL_15:
          std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>((uint64_t)&v14, v5, (uint64_t)(v4 + 4));
          result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v15, v11, v14);
          goto LABEL_16;
        }
        v15 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v5, &v15, v4 + 4);
        v11 = (uint64_t **)result;
      }
      if (!*v11)
        goto LABEL_15;
LABEL_16:
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v10 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v10);
      }
      v4 = v13;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_19180B97C(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__15423(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  if (result != a2)
  {
    v2 = (uint64_t)result;
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (result[2])
    {
      v5 = *result;
      v7 = (uint64_t **)(result + 1);
      v6 = result[1];
      *result = result + 1;
      *(_QWORD *)(v6 + 16) = 0;
      result[1] = 0;
      result[2] = 0;
      if (*(_QWORD *)(v5 + 8))
        v8 = *(uint64_t **)(v5 + 8);
      else
        v8 = (uint64_t *)v5;
      v22 = result;
      v23 = v8;
      v24 = v8;
      if (!v8
        || (v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8),
            v4 == v3))
      {
        v14 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          v9 = *(_OWORD *)(v4 + 7);
          *(_OWORD *)(v8 + 9) = *(_OWORD *)(v4 + 9);
          *(_OWORD *)(v8 + 7) = v9;
          v10 = *v7;
          v11 = (uint64_t **)(v2 + 8);
          v12 = (uint64_t **)(v2 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                v11 = (uint64_t **)v10;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v10 + 4))
                  break;
                v10 = *v11;
                v12 = v11;
                if (!*v11)
                  goto LABEL_14;
              }
              v10 = v11[1];
            }
            while (v10);
            v12 = v11 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v11, v12, v24);
          v8 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v13 = (_QWORD *)v4[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v4[2];
              v15 = *v14 == (_QWORD)v4;
              v4 = v14;
            }
            while (!v15);
          }
          if (!v8)
            break;
          v4 = v14;
        }
        while (v14 != v3);
      }
      result = (_QWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      v4 = v14;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>((uint64_t)&v22, v2, (uint64_t)(v4 + 4));
        v16 = v22;
        v17 = *(uint64_t **)(v2 + 8);
        v18 = (uint64_t **)(v2 + 8);
        v19 = (uint64_t **)(v2 + 8);
        if (v17)
        {
          do
          {
            while (1)
            {
              v18 = (uint64_t **)v17;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4))
                break;
              v17 = *v18;
              v19 = v18;
              if (!*v18)
                goto LABEL_33;
            }
            v17 = v18[1];
          }
          while (v17);
          v19 = v18 + 1;
        }
LABEL_33:
        result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v18, v19, v16);
        v20 = (_QWORD *)v4[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v4[2];
            v15 = *v21 == (_QWORD)v4;
            v4 = v21;
          }
          while (!v15);
        }
        v4 = v21;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_19180BBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 24);
  result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v6 + 72) = result;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19180BC48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_atomic_property__15424(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;

  result[1] = 0;
  v2 = (uint64_t)(result + 1);
  result[2] = 0;
  *result = (uint64_t)(result + 1);
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = (uint64_t)result;
    do
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = (_QWORD *)v2;
      if (*(_QWORD *)v5 == v2)
        goto LABEL_9;
      v8 = *(_QWORD **)(v5 + 8);
      v9 = (_QWORD *)v2;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      result = (uint64_t *)std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v4 + 4);
      if ((_DWORD)result)
      {
LABEL_9:
        if (!v6)
        {
          v15 = (_QWORD *)v2;
          v11 = (uint64_t **)v2;
LABEL_15:
          std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>((uint64_t)&v14, v5, (uint64_t)(v4 + 4));
          result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v15, v11, v14);
          goto LABEL_16;
        }
        v15 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v5, &v15, v4 + 4);
        v11 = (uint64_t **)result;
      }
      if (!*v11)
        goto LABEL_15;
LABEL_16:
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v10 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v10);
      }
      v4 = v13;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_19180BDA8(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void sub_19180BE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB11E8;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19180BF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB11E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB11E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v2;
  void *matched;
  int *v4;
  Espresso::zephyr::node_t *v5;
  _QWORD *constant;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int32x4_t *v10;
  uint64_t v11;
  int32x4_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = (Espresso::zephyr::node_t *)*a2;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    matched = Espresso::zephyr::match_simple_eltwise_binop((uint64_t)v2, 1u);
    if (!matched)
      return 0;
  }
  v4 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)matched + 320))(matched);
  v5 = *(Espresso::zephyr::node_t **)(**((_QWORD **)v2 + 15) + 80);
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v5);
  if (constant)
  {
    v7 = constant;
    v8 = 0;
  }
  else
  {
    v5 = *(Espresso::zephyr::node_t **)(*(_QWORD *)(*((_QWORD *)v2 + 15) + 8) + 80);
    v9 = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v5);
    if (!v9)
      return 0;
    v7 = v9;
    v8 = 1;
  }
  v10 = (int32x4_t *)(*(uint64_t (**)(_QWORD *))(*v7 + 384))(v7);
  v11 = 0;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v10, v12)))) & 1) == 0
    && v10[1].i32[0] == 1)
  {
    v13 = v7[43];
    if (!v13 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13))
      return 0;
    v15 = v7[43];
    v16 = *(_QWORD *)(v15 + 160);
    v17 = *(std::__shared_weak_count **)(v15 + 168);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (!v16)
      goto LABEL_24;
    v20 = 0;
    v21 = *(int *)(v16 + 8);
    do
    {
      v21 *= *(int *)(v16 + 12 + v20);
      v20 += 4;
    }
    while (v20 != 12);
    if (v21 == 1)
    {
      if (*v4)
        v22 = 3;
      else
        v22 = 2;
      *v4 = v22;
      v4[2] = **(_DWORD **)(v16 + 24);
      Espresso::zephyr::node_t::erase_input_at(v2, v8);
      Espresso::zephyr::node_t::remove_if_unused(v5);
      v11 = 1;
    }
    else
    {
LABEL_24:
      v11 = 0;
    }
    if (v17)
    {
      v23 = (unint64_t *)&v17->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  return v11;
}

void sub_19180C18C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes42strength_reduction_loadc_eltwise__eltwisecERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_19180C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0F28;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19180C378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0F28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0F28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  const void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  Espresso *v12;
  const char *v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  void *v18;
  Espresso *v19;
  const char *v20;
  Espresso *v21;
  const char *v22;
  Espresso *v23;
  const char *v24;
  Espresso::zephyr::node_t *v25;
  void *constant;
  const char *v27;
  _QWORD *v28;
  Espresso *v29;
  uint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  Espresso *v39;
  const char *v40;
  Espresso *v41;
  const char *v42;
  void **v43;
  uint64_t v44;
  Espresso *v45;
  const char *v46;
  uint64_t v47;
  int v48;
  Espresso::zephyr::value_t **v49;
  Espresso *v50;
  const char *v51;
  int v52;
  int v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  size_t v57;
  void **v58;
  const void *v59;
  char *v60;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  std::__shared_weak_count *v84;
  Espresso::zephyr::value_t **v85;
  Espresso *v86;
  const char *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  NSObject *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  NSObject *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *__p[2];
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint8_t v142[4];
  const char *v143;
  __int16 v144;
  int v145;
  uint8_t buf[32];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "array_gather_node->inputs().size() == 2";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_61;
    }
    return 0;
  }
  if (*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 83;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "array_gather_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_61;
    }
    return 0;
  }
  v4 = *(_QWORD *)(v2 + 8);
  if (!v4
    || (v5 = *(const void **)(v4 + 8)) == 0
  {
    v18 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(v2);
    if (!v18)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v17);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 101;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "gather_kernel != nullptr || gather_nd_kernel != nullptr";
          _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_61;
      }
      return 0;
    }
LABEL_27:
    v19 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18);
    if (*(_DWORD *)v19)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v19, v20);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 97;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "gather_nd_kernel->get_params().mode == TF_GATHER";
          _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_61;
      }
      return 0;
    }
    v21 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18);
    if (*((_DWORD *)v21 + 1))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v21, v22);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 98;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "gather_nd_kernel->get_params().axis == 0";
          _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_61;
      }
      return 0;
    }
    v23 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18);
    if (*((_DWORD *)v23 + 2))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v23, v24);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 99;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "gather_nd_kernel->get_params().batch_dims == 0";
          _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_61;
      }
      return 0;
    }
    goto LABEL_51;
  }
  v7 = v6;
  v8 = *(std::__shared_weak_count **)(v4 + 16);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v12 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 320))(v7);
  if (!*((_BYTE *)v12 + 24))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v12, v13);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 90;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "gather_kernel->get_params().simple_gather == true";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_61;
    }
    return 0;
  }
  v14 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 320))(v7);
  if (*((_DWORD *)v14 + 5))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v14, v15);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 91;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "gather_kernel->get_params().axis == 0";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_61:

      return 0;
    }
    return 0;
  }
  v18 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(v2);
  if (v18)
    goto LABEL_27;
LABEL_51:
  v25 = *(Espresso::zephyr::node_t **)(**(_QWORD **)(v2 + 120) + 80);
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v25);
  if (!constant)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v27);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 107;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "constant_kernel";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_61;
    }
    return 0;
  }
  v28 = constant;
  v29 = (Espresso *)*((_QWORD *)constant + 43);
  if (!v29)
    goto LABEL_54;
  v29 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v29 + 32))(v29);
  if ((_DWORD)v29)
    goto LABEL_54;
  v32 = v28[43];
  v34 = *(_QWORD *)(v32 + 160);
  v33 = *(std::__shared_weak_count **)(v32 + 168);
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    v37 = (unint64_t *)&v33->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (!v34)
  {
LABEL_54:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v29, v27);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 108;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "constant_kernel->get_constant_blob()";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_61;
    }
    return 0;
  }
  v39 = (Espresso *)(*(uint64_t (**)(_QWORD *))(*v28 + 384))(v28);
  if (*((_DWORD *)v39 + 5) != 2)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v39, v40);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "constant_kernel->get_params().nd_rank == 2";
      _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_61;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v140, **(Espresso::zephyr::value_t ***)(v2 + 120));
  v43 = (void **)v140;
  if (v140 && *(_DWORD *)(v140 + 20) == 2)
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v2 + 120) + 8);
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v138, (Espresso::zephyr::value_t *)v44);
    v47 = v138;
    if (!v138 || (v48 = *(_DWORD *)(v138 + 20), v48 == -1) || v48 >= 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v45, v46);
        v101 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 116;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "input_shape_ptr && input_shape_ptr->rank() <= 2";
          _os_log_impl(&dword_190DAF000, v101, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      v30 = 0;
    }
    else
    {
      v49 = *(Espresso::zephyr::value_t ***)(v2 + 96);
      if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v49)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      Espresso::zephyr::need_shape((Espresso::zephyr *)&v136, *v49);
      if (!v136)
        goto LABEL_172;
      v52 = *(_DWORD *)(v136 + 20);
      if (v52 == -1)
      {
        if (*(_DWORD *)(v136 + 16) == 1)
          v52 = 4;
        else
          v52 = 5;
      }
      v53 = *(_DWORD *)(v47 + 20);
      if (v53 == -1)
      {
        if (*(_DWORD *)(v47 + 16) == 1)
          v53 = 4;
        else
          v53 = 5;
      }
      if (v52 == v53 + 1)
      {
        Espresso::espresso_os_log_subsystem(v50, v51);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          v109 = (_QWORD *)(v2 + 144);
          if (*(char *)(v2 + 167) < 0)
            v109 = (_QWORD *)*v109;
          v110 = (_QWORD *)(v44 + 32);
          if (*(char *)(v44 + 55) < 0)
            v110 = (_QWORD *)*v110;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v109;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v110;
          _os_log_debug_impl(&dword_190DAF000, v54, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_gather_to_lookup: %s input_value=%s", buf, 0x16u);
        }

        v153 = 0;
        v151 = 0u;
        v152 = 0u;
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        memset(buf, 0, sizeof(buf));
        v55 = *(_DWORD *)(v47 + 20);
        if (v55 == -1)
        {
          if (*(_DWORD *)(v47 + 16) == 1)
            v55 = 4;
          else
            v55 = 5;
        }
        *(_DWORD *)buf = v55;
        Espresso::zephyr::make_kernel<Espresso::generic_expand_dims_kernel,Espresso::zephyr::node_t,Espresso::expand_dims_params_t>(&v134, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)buf);
        v111 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v2 + 24), v2 + 144);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v111 + 1) + 8), v134, (uint64_t)v135);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v111, (Espresso::zephyr::value_t *)v44);
        v56 = *(_QWORD *)(v44 + 24);
        if (*(char *)(v44 + 55) >= 0)
          v57 = *(unsigned __int8 *)(v44 + 55);
        else
          v57 = *(_QWORD *)(v44 + 40);
        v58 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v57 + 9);
        if ((v122 & 0x80000000) != 0)
          v58 = (void **)__p[0];
        if (v57)
        {
          if (*(char *)(v44 + 55) >= 0)
            v59 = (const void *)(v44 + 32);
          else
            v59 = *(const void **)(v44 + 32);
          memmove(v58, v59, v57);
        }
        strcpy((char *)v58 + v57, "_expanded");
        v60 = Espresso::zephyr::function_t::new_value(v56, (uint64_t)__p);
        if (SBYTE3(v122) < 0)
          operator delete(__p[0]);
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v111, (Espresso::zephyr::value_t *)v60);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v111, (Espresso::zephyr::node_t *)v2);
        v125 = 0;
        v127 = -1;
        __asm { FMOV            V0.2S, #1.0 }
        v128 = _D0;
        v133 = 0;
        v122 = _D0;
        v129 = 0;
        v126 = 0;
        v124 = 0;
        v130 = 0;
        v132 = 0;
        v131 = 0;
        __p[0] = *v43;
        v125 = 1;
        v123 = 0x100000000;
        LODWORD(v133) = 1;
        v121 = 0;
        __p[1] = (void *)1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v118, SHIDWORD(__p[0]), (int)__p[0], 1, 1);
        (*(void (**)(_QWORD))(*(_QWORD *)v28[43] + 32))(v28[43]);
        v66 = v28[43];
        v67 = *(_QWORD *)(v66 + 160);
        v68 = *(std::__shared_weak_count **)(v66 + 168);
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        vDSP_mtrans(*(const float **)(v67 + 24), 1, *(float **)(v118 + 16), 1, LODWORD(__p[0]), HIDWORD(__p[0]));
        if (v68)
        {
          v71 = (unint64_t *)&v68->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(&v116, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)__p);
        v73 = v116;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v114, (int)__p[0], 1, 1, 1);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v73 + 392))(v73, &v114);
        v74 = v115;
        if (v115)
        {
          v75 = (unint64_t *)&v115->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v116;
        v112 = v118;
        v113 = v119;
        if (v119)
        {
          v78 = (unint64_t *)&v119->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v77 + 400))(v77, &v112);
        v80 = v113;
        if (v113)
        {
          v81 = (unint64_t *)&v113->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v2 + 24), v2 + 144);
        v84 = v117;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v83 + 1) + 8), v116, (uint64_t)v117);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v83, (Espresso::zephyr::value_t *)v60);
        v85 = *(Espresso::zephyr::value_t ***)(v2 + 96);
        if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v85)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v83, *v85);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v83, (Espresso::zephyr::node_t *)v111);
        Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
        v86 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v25);
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v86, v87);
          v88 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v142 = 136315394;
            v143 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v144 = 1024;
            v145 = 173;
            _os_log_impl(&dword_190DAF000, v88, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v142, 0x12u);
          }

        }
        if (v84)
        {
          v89 = (unint64_t *)&v84->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v91 = v119;
        if (v119)
        {
          v92 = (unint64_t *)&v119->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = v135;
        if (v135)
        {
          v95 = (unint64_t *)&v135->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v30 = 1;
      }
      else
      {
LABEL_172:
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v50, v51);
          v105 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 120;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "output_shape_ptr && output_shape_ptr->rank() == input_shape_ptr->rank() + 1";
            _os_log_impl(&dword_190DAF000, v105, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }

        }
        v30 = 0;
      }
      v106 = v137;
      if (v137)
      {
        v107 = (unint64_t *)&v137->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
    }
    v102 = v139;
    if (v139)
    {
      v103 = (unint64_t *)&v139->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v41, v42);
      v97 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 112;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "shape_constant_ptr && shape_constant_ptr->rank() == 2";
        _os_log_impl(&dword_190DAF000, v97, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v30 = 0;
  }
  v98 = v141;
  if (v141)
  {
    v99 = (unint64_t *)&v141->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  return v30;
}

void sub_19180D4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,std::__shared_weak_count *a47)
{
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a17)
  {
    v50 = (unint64_t *)&a17->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a19)
  {
    v52 = (unint64_t *)&a19->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  if (a41)
  {
    v54 = (unint64_t *)&a41->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a41->__on_zero_shared)(a41);
      std::__shared_weak_count::__release_weak(a41);
    }
  }
  if (a43)
  {
    v56 = (unint64_t *)&a43->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))a43->__on_zero_shared)(a43);
      std::__shared_weak_count::__release_weak(a43);
    }
  }
  if (a45)
  {
    v58 = (unint64_t *)&a45->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }
  if (a47)
  {
    v60 = (unint64_t *)&a47->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))a47->__on_zero_shared)(a47);
      std::__shared_weak_count::__release_weak(a47);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35strength_reduction_gather_to_lookupERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void Espresso::zephyr::make_kernel<Espresso::generic_expand_dims_kernel,Espresso::zephyr::node_t,Espresso::expand_dims_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19180D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19180DAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19180DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB1298;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19180DC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1298;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  Espresso *v4;
  Espresso *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  Espresso *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  Espresso *v15;
  const char *v16;
  Espresso *v17;
  const char *v18;
  uint64_t v19;
  void *constant;
  const char *v21;
  _QWORD *v22;
  Espresso *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int *v31;
  const char *v32;
  uint64_t v33;
  Espresso *v34;
  Espresso *v35;
  const char *v36;
  std::__shared_weak_count *v37;
  Espresso *v38;
  const char *v39;
  int *v40;
  int v41;
  Espresso::zephyr::value_t *v42;
  Espresso *v43;
  const char *v44;
  int v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  Espresso::zephyr::value_t **v53;
  Espresso *v54;
  const char *v55;
  int v56;
  NSObject *v57;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  std::__shared_weak_count *v81;
  Espresso::zephyr::value_t **v82;
  Espresso *v83;
  const char *v84;
  NSObject *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  NSObject *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  NSObject *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  int v100;
  int v101;
  Espresso::zephyr::node_t *v102;
  unint64_t *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  int *v116;
  std::__shared_weak_count *v117;
  uint8_t v118[4];
  const char *v119;
  __int16 v120;
  int v121;
  uint8_t buf[4];
  __int128 v123;
  const char *v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  int v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 186;
        HIWORD(v123) = 2080;
        v124 = "bmm_node->inputs().size() == 2";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  if (*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 187;
        HIWORD(v123) = 2080;
        v124 = "bmm_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3
    || (v4 = a1, (a1 = *(Espresso **)(v3 + 8)) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 192;
        HIWORD(v123) = 2080;
        v124 = "bmm_kernel != nullptr";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  v5 = a1;
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v10 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v5 + 320))(v5);
  if (*(_BYTE *)v10)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 193;
        HIWORD(v123) = 2080;
        v124 = "bmm_kernel->get_params().channel_mode == false";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_28:

      return 0;
    }
    return 0;
  }
  v15 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v5 + 320))(v5);
  if (*((_BYTE *)v15 + 1))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v15, v16);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = 194;
      HIWORD(v123) = 2080;
      v124 = "bmm_kernel->get_params().transpose_x == false";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  v17 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v5 + 320))(v5);
  if (*((_BYTE *)v17 + 2))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v17, v18);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = 195;
      HIWORD(v123) = 2080;
      v124 = "bmm_kernel->get_params().transpose_y == false";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 120) + 8) + 80);
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v19);
  if (!constant)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v21);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = 200;
      HIWORD(v123) = 2080;
      v124 = "constant_kernel";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  v22 = constant;
  v23 = (Espresso *)*((_QWORD *)constant + 43);
  if (!v23)
    goto LABEL_44;
  v23 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v23 + 32))(v23);
  if ((_DWORD)v23)
    goto LABEL_44;
  v24 = v22[43];
  v26 = *(_QWORD *)(v24 + 160);
  v25 = *(std::__shared_weak_count **)(v24 + 168);
  if (v25)
  {
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v29 = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
  {
LABEL_44:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v23, v21);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = 201;
      HIWORD(v123) = 2080;
      v124 = "constant_kernel->get_constant_blob()";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  v31 = (int *)(*(uint64_t (**)(_QWORD *))(*v22 + 384))(v22);
  v33 = v31[5];
  if ((v33 & 0xFFFFFFFE) != 2)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = 203;
      HIWORD(v123) = 2080;
      v124 = "constant_rank == 2 || constant_rank == 3";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  v102 = (Espresso::zephyr::node_t *)v19;
  v34 = v4;
  if ((_DWORD)v33 == 3)
  {
    v35 = (Espresso *)(*(uint64_t (**)(_QWORD *))(*v22 + 384))(v22);
    if (*((_DWORD *)v35 + 2) != 1)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(v35, v36);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 205;
        HIWORD(v123) = 2080;
        v124 = "constant_kernel->get_params().k == 1";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
  }
  v37 = (std::__shared_weak_count *)operator new(0x20uLL);
  v37->__shared_owners_ = 0;
  v103 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1088;
  LODWORD(v37[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v116, *(Espresso::zephyr::value_t **)(*(_QWORD *)(v2 + 120) + 8));
  v40 = v116;
  if (!v116)
    goto LABEL_78;
  v41 = v116[5];
  if (v41 == -1)
  {
    if (v116[4] == 1)
      v41 = 4;
    else
      v41 = 5;
  }
  if (v41 != (_DWORD)v33)
  {
LABEL_78:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v38, v39);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 210;
        HIWORD(v123) = 2080;
        v124 = "shape_constant_ptr && shape_constant_ptr->rank() == constant_rank";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v13 = 0;
    goto LABEL_83;
  }
  v42 = **(Espresso::zephyr::value_t ***)(v2 + 120);
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v114, v42);
  if (!v114)
    goto LABEL_147;
  v45 = *(_DWORD *)(v114 + 20);
  if (v45 == -1)
  {
    v51 = *(_DWORD *)(v114 + 16);
    if (v51 == 1)
      v52 = 4;
    else
      v52 = 5;
    if (v33 + 1 == v52)
    {
      if (v51 == 1)
        v45 = 4;
      else
        v45 = 5;
      goto LABEL_102;
    }
LABEL_147:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v43, v44);
      v91 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 216;
        HIWORD(v123) = 2080;
        v124 = "input_shape_ptr && (input_shape_ptr->rank() == constant_rank + 1 || input_shape_ptr->rank() == constant_rank)";
        _os_log_impl(&dword_190DAF000, v91, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v13 = 0;
    goto LABEL_152;
  }
  if (v45 != (_DWORD)v33 && v33 + 1 != v45)
    goto LABEL_147;
LABEL_102:
  v53 = *(Espresso::zephyr::value_t ***)(v2 + 96);
  if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v53)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v112, *v53);
  if (!v112)
    goto LABEL_157;
  v56 = *(_DWORD *)(v112 + 20);
  if (v56 == -1)
  {
    if (*(_DWORD *)(v112 + 16) == 1)
      v56 = 4;
    else
      v56 = 5;
  }
  if (v56 == v45)
  {
    Espresso::espresso_os_log_subsystem(v54, v55);
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      v99 = (_QWORD *)(v2 + 144);
      if (*(char *)(v2 + 167) < 0)
        v99 = (_QWORD *)*v99;
      v101 = *v40;
      v100 = v40[1];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&v123 = v99;
      WORD4(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 10) = v101;
      HIWORD(v123) = 1024;
      LODWORD(v124) = v100;
      _os_log_debug_impl(&dword_190DAF000, v57, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_batch_matmul_to_inner_product: %s w=%d h=%d", buf, 0x18u);
    }

    v127 = 0;
    v129 = -1;
    __asm { FMOV            V0.2S, #1.0 }
    v130 = _D0;
    v135 = 0;
    v124 = _D0;
    v131 = 0;
    v128 = 0;
    v126 = 0;
    v132 = 0;
    v134 = 0;
    v133 = 0;
    LODWORD(v123) = v40[1];
    *(_DWORD *)buf = *v40;
    v127 = 1;
    v125 = 0;
    HIDWORD(v123) = 0;
    *(_QWORD *)((char *)&v123 + 4) = 1;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v110, v123, *(int *)buf, 1, 1);
    (*(void (**)(_QWORD))(*(_QWORD *)v22[43] + 32))(v22[43]);
    v63 = v22[43];
    v64 = *(_QWORD *)(v63 + 160);
    v65 = *(std::__shared_weak_count **)(v63 + 168);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    vDSP_mtrans(*(const float **)(v64 + 24), 1, *(float **)(v110 + 16), 1, *(unsigned int *)buf, v123);
    if (v65)
    {
      v68 = (unint64_t *)&v65->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(&v108, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)buf);
    v70 = v108;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v106, *(int *)buf, 1, 1, 1);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v70 + 392))(v70, &v106);
    v71 = v107;
    if (v107)
    {
      v72 = (unint64_t *)&v107->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = v108;
    v104 = v110;
    v105 = v111;
    if (v111)
    {
      v75 = (unint64_t *)&v111->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v74 + 400))(v74, &v104);
    v77 = v105;
    if (v105)
    {
      v78 = (unint64_t *)&v105->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v2 + 24), v2 + 144);
    v81 = v109;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v80 + 1) + 8), v108, (uint64_t)v109);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v80, v42);
    v82 = *(Espresso::zephyr::value_t ***)(v2 + 96);
    if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v82)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v80, *v82);
    Espresso::zephyr::ordered_block_t::insert_node_after(**((Espresso::zephyr::ordered_block_t ***)v34 + 1), (Espresso::zephyr::node_t *)v80, (Espresso::zephyr::node_t *)v2);
    Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
    v83 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v102);
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v83, v84);
      v85 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v118 = 136315394;
        v119 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v120 = 1024;
        v121 = 256;
        _os_log_impl(&dword_190DAF000, v85, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v118, 0x12u);
      }

    }
    if (v81)
    {
      v86 = (unint64_t *)&v81->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v88 = v111;
    if (v111)
    {
      v89 = (unint64_t *)&v111->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v13 = 1;
  }
  else
  {
LABEL_157:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v54, v55);
      v95 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&v123 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        WORD4(v123) = 1024;
        *(_DWORD *)((char *)&v123 + 10) = 220;
        HIWORD(v123) = 2080;
        v124 = "output_shape_ptr && output_shape_ptr->rank() == input_rank";
        _os_log_impl(&dword_190DAF000, v95, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v13 = 0;
  }
  v96 = v113;
  if (v113)
  {
    v97 = (unint64_t *)&v113->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
LABEL_152:
  v92 = v115;
  if (v115)
  {
    v93 = (unint64_t *)&v115->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_83:
  v47 = v117;
  if (v117)
  {
    v48 = (unint64_t *)&v117->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v103);
  while (__stlxr(v50 - 1, v103));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  return v13;
}

void sub_19180EC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a16)
  {
    v28 = (unint64_t *)&a16->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a18)
  {
    v30 = (unint64_t *)&a18->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a20)
  {
    v32 = (unint64_t *)&a20->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a22)
  {
    v34 = (unint64_t *)&a22->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a24)
  {
    v36 = (unint64_t *)&a24->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  do
    v38 = __ldaxr(a10);
  while (__stlxr(v38 - 1, a10));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes48strength_reduction_batch_matmul_to_inner_productERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::__on_zero_shared(uint64_t result)
{
  Espresso::zephyr::match_verbose = *(_DWORD *)(result + 24);
  return result;
}

void sub_19180EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char matched;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;

  *(_QWORD *)&v22 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v18[0] = &off_1E2DB1348;
      v18[1] = v3 + 16;
      v19 = v18;
      std::string::basic_string[abi:ne180100]<0>(&v20, "transpose");
      std::string::basic_string[abi:ne180100]<0>(v21, "reshape");
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = &v13;
      v17 = 0;
      v13 = (std::string *)operator new(0x30uLL);
      v14 = v13;
      v15 = v13 + 2;
      v6 = 0;
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, &v20, &v22, v13);
      do
      {
        if (SHIBYTE(v21[v6 + 2]) < 0)
          operator delete((void *)v21[v6]);
        v6 -= 3;
      }
      while (v6 != -6);
      *(_QWORD *)&v20 = &off_1E2DB2F78;
      *((_QWORD *)&v20 + 1) = v18;
      v21[0] = &v20;
      matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v13, &v20);
      v8 = (__int128 *)v21[0];
      if ((__int128 *)v21[0] == &v20)
      {
        v8 = &v20;
        v9 = 4;
      }
      else
      {
        if (!v21[0])
          goto LABEL_12;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_12:
      v16 = &v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      v10 = v19;
      if (v19 == v18)
      {
        v10 = v18;
        v11 = 4;
        goto LABEL_16;
      }
      if (v19)
      {
        v11 = 5;
LABEL_16:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19180F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void **a24)
{
  void **p_p;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  p_p = a24;
  if (a24 == &__p)
  {
    v26 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v26 = 5;
  }
  (*((void (**)(void))*p_p + v26))();
LABEL_6:
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2F78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2F78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_24generic_transpose_kernelENS_22generic_reshape_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1348;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  Espresso *v6;
  const char *v7;
  Espresso *v8;
  const char *v9;
  _DWORD *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint8_t *v30;
  const void *v31;
  char *v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  Espresso::zephyr::value_t **v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  Espresso::zephyr::value_t **v49;
  Espresso *v50;
  const char *v51;
  NSObject *v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _DWORD *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint8_t buf[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[25];
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (*(_QWORD *)(*a3 + 128) - *(_QWORD *)(*a3 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 275;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (*(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 276;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "transpose.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (*(_QWORD *)(v4 + 104) - *(_QWORD *)(v4 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 278;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "transpose.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  v6 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*(_QWORD *)a2);
  if (!v6
    || (v6 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v6 + 320))(v6),
        (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)v6, (int32x4_t)xmmword_191A93530)))) & 1) != 0)|| *((_DWORD *)v6 + 4) != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 281;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "zephyr::match_transpose_to_nhwc(transpose.node)";
        _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      return 0;
    }
    return 0;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v60, **(Espresso::zephyr::value_t ***)(v4 + 120));
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v58, **(Espresso::zephyr::value_t ***)(v4 + 96));
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v56, **(Espresso::zephyr::value_t ***)(v3 + 96));
  if (v60)
  {
    v10 = v58;
    if (v58)
    {
      if (v56)
      {
        v11 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v3);
        if (v11)
        {
          v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 320))(v11);
          if (*(_DWORD *)(v13 + 24))
          {
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 298;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "rp.mode == FLATTEN_NCHW";
                _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
LABEL_111:

            }
          }
          else if (*(_DWORD *)(v13 + 28))
          {
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 299;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "rp.nd_mode == false";
                _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_111;
            }
          }
          else if (*(_BYTE *)(v13 + 32))
          {
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 300;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "rp.dynamic_shape == false";
                _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_111;
            }
          }
          else if (*(_BYTE *)(v13 + 33))
          {
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 301;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "rp.rank_preserving_mode == false";
                _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_111;
            }
          }
          else if (*(_DWORD *)v13 == v10[1] * *v10 * v10[2])
          {
            v19 = v13;
            if (*(_DWORD *)(v13 + 4) == 1)
            {
              if (*(_DWORD *)(v13 + 8) == 1)
              {
                v20 = *(_DWORD *)(v13 + 12);
                if (v20 >= 2 && v20 != v10[3])
                {
                  if (!Espresso::zephyr::match_verbose)
                    goto LABEL_112;
                  Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  v15 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 310;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = "rp.dst_n == 1 || rp.dst_n == 0 || rp.dst_n == transposed_shape_ptr->n";
                    _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_111;
                }
                v21 = *(_DWORD *)(v13 + 16);
                if (v21 >= 2 && v21 != v10[4])
                {
                  if (!Espresso::zephyr::match_verbose)
                    goto LABEL_112;
                  Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  v15 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 312;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = "rp.dst_seq == 1 || rp.dst_seq == 0 || rp.dst_seq == transposed_shape_ptr->seq";
                    _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_111;
                }
                if ((*(_DWORD *)(v13 + 20) | 2) == 2)
                {
                  Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  v22 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                  {
                    v53 = v10[1] * *v10;
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v53;
                    _os_log_debug_impl(&dword_190DAF000, v22, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze dst_w=%d", buf, 8u);
                  }

                  v55 = 1;
                  v23 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v4 + 24), v4 + 144);
                  Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(buf, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), (uint64_t)&v55);
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)v23 + 1) + 8, (__int128 *)buf);
                  v24 = *(std::__shared_weak_count **)&buf[8];
                  if (*(_QWORD *)&buf[8])
                  {
                    v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                    do
                      v26 = __ldaxr(v25);
                    while (__stlxr(v26 - 1, v25));
                    if (!v26)
                    {
                      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                      std::__shared_weak_count::__release_weak(v24);
                    }
                  }
                  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v23, **(Espresso::zephyr::value_t ***)(v4 + 120));
                  Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v23, (Espresso::zephyr::node_t *)v3);
                  if (*(_DWORD *)(v19 + 20) == 2)
                  {
                    v27 = *(_QWORD *)(v4 + 24);
                    v28 = **(_QWORD **)(v4 + 120);
                    if (*(char *)(v28 + 55) >= 0)
                      v29 = *(unsigned __int8 *)(v28 + 55);
                    else
                      v29 = *(_QWORD *)(v28 + 40);
                    v30 = buf;
                    std::string::basic_string[abi:ne180100]((uint64_t)buf, v29 + 8);
                    if ((buf[23] & 0x80u) != 0)
                      v30 = *(uint8_t **)buf;
                    if (v29)
                    {
                      if (*(char *)(v28 + 55) >= 0)
                        v31 = (const void *)(v28 + 32);
                      else
                        v31 = *(const void **)(v28 + 32);
                      memmove(v30, v31, v29);
                    }
                    strcpy((char *)&v30[v29], "_flatten");
                    v32 = Espresso::zephyr::function_t::new_value(v27, (uint64_t)buf);
                    if ((char)buf[23] < 0)
                      operator delete(*(void **)buf);
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v23, (Espresso::zephyr::value_t *)v32);
                    v67 = 0u;
                    memset(v68, 0, sizeof(v68));
                    v65 = 0u;
                    v66 = 0u;
                    v63 = 0u;
                    v64 = 0u;
                    memset(buf, 0, sizeof(buf));
                    v69 = 2;
                    *(_DWORD *)&buf[4] = 2;
                    v33 = v58[5];
                    if (v33 == -1)
                    {
                      if (v58[4] == 1)
                        v34 = 3;
                      else
                        v34 = 4;
                      if (v58[4] == 1)
                        v33 = 4;
                      else
                        v33 = 5;
                    }
                    else
                    {
                      v34 = v33 - 1;
                    }
                    *(_DWORD *)&buf[8] = v34;
                    *(_DWORD *)&buf[12] = v33 - 2;
                    v45 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v4 + 24), v3 + 144);
                    Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v54, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), (uint64_t)buf);
                    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)v45 + 1) + 8, &v54);
                    v46 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
                    if (*((_QWORD *)&v54 + 1))
                    {
                      v47 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
                      do
                        v48 = __ldaxr(v47);
                      while (__stlxr(v48 - 1, v47));
                      if (!v48)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                    }
                    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v45, (Espresso::zephyr::value_t *)v32);
                    v49 = *(Espresso::zephyr::value_t ***)(v3 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v49)
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v45, *v49);
                    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v45, (Espresso::zephyr::node_t *)v23);
                  }
                  else
                  {
                    v44 = *(Espresso::zephyr::value_t ***)(v3 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v44)
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v23, *v44);
                  }
                  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
                  v50 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused((Espresso::zephyr::node_t *)v4);
                  if (Espresso::zephyr::match_verbose)
                  {
                    Espresso::espresso_os_log_subsystem(v50, v51);
                    v52 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passe"
                                           "s/passes_strength_reduction.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 355;
                      _os_log_impl(&dword_190DAF000, v52, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
                    }

                  }
                  v17 = 1;
                  goto LABEL_113;
                }
                if (Espresso::zephyr::match_verbose)
                {
                  Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  v15 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 313;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = "rp.dst_nd_rank == 2 || rp.dst_nd_rank == 0";
                    _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_111;
                }
              }
              else if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                v15 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 308;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = "rp.dst_k == 1";
                  _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
                goto LABEL_111;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 307;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "rp.dst_h == 1";
                _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_111;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 306;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "rp.dst_w == transposed_shape_ptr->w * transposed_shape_ptr->h * transposed_shape_ptr->k";
              _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_111;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(0, v12);
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 294;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "reshape_kernel != nullptr";
            _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_111;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v8, v9);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 289;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "reshape_shape_ptr != nullptr";
          _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_111;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v8, v9);
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 288;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "transposed_shape_ptr != nullptr";
        _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_111;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v8, v9);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 287;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "in_shape_ptr != nullptr";
      _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_111;
  }
LABEL_112:
  v17 = 0;
LABEL_113:
  v35 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v59;
  if (v59)
  {
    v39 = (unint64_t *)&v59->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v61;
  if (v61)
  {
    v42 = (unint64_t *)&v61->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v17;
}

void sub_191810418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v27 = (unint64_t *)&a16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a18)
  {
    v29 = (unint64_t *)&a18->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes55strength_reduction_transpose_reshape_to_flatten_squeezeERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

void Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1918106B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191810750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string **v15;
  char v16;
  _QWORD v17[3];
  _QWORD *v18;
  void *__p[2];
  char v20;
  __int128 v21;

  *((_QWORD *)&v21 + 1) = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v17[0] = &off_1E2DB1240;
      v17[1] = v3 + 16;
      v18 = v17;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = &v12;
      v16 = 0;
      v12 = (std::string *)operator new(0x18uLL);
      v13 = v12;
      v14 = v12 + 1;
      v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (__int128 *)__p, &v21, v12);
      if (v20 < 0)
        operator delete(__p[0]);
      __p[0] = &off_1E2DB2F20;
      __p[1] = v17;
      *(_QWORD *)&v21 = __p;
      matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v12, __p);
      v7 = (void **)v21;
      if ((void **)v21 == __p)
      {
        v7 = __p;
        v8 = 4;
      }
      else
      {
        if (!(_QWORD)v21)
          goto LABEL_10;
        v8 = 5;
      }
      (*((void (**)(void))*v7 + v8))();
LABEL_10:
      v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      v9 = v18;
      if (v18 == v17)
      {
        v9 = v17;
        v10 = 4;
        goto LABEL_14;
      }
      if (v18)
      {
        v10 = 5;
LABEL_14:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19181091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void **a24)
{
  void **p_p;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  p_p = a24;
  if (a24 == &__p)
  {
    v26 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v26 = 5;
  }
  (*((void (**)(void))*p_p + v26))();
LABEL_6:
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2F20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2F20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **a2;
  v6[0] = v3;
  v6[1] = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(v3);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v6);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_24generic_transpose_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISE_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1240;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::operator()(Espresso *a1, uint64_t a2)
{
  Espresso::zephyr::node_t *v2;
  Espresso *v3;
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  Espresso::zephyr::value_t **v7;
  Espresso::zephyr::value_t **v8;
  Espresso *v9;
  const char *v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) == 8)
  {
    if (*((_QWORD *)v2 + 13) - *((_QWORD *)v2 + 12) == 8)
    {
      v3 = (Espresso *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 320))(*(_QWORD *)(a2 + 8));
      if (*(_DWORD *)v3)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            v12 = 136315650;
            v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v14 = 1024;
            v15 = 375;
            v16 = 2080;
            v17 = "p.axis_w == 0";
LABEL_13:
            _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v12, 0x1Cu);
            goto LABEL_14;
          }
          goto LABEL_14;
        }
      }
      else if (*((_DWORD *)v3 + 1) == 1)
      {
        if (*((_DWORD *)v3 + 2) == 2)
        {
          if (*((_DWORD *)v3 + 3) == 3)
          {
            if (*((_DWORD *)v3 + 4) == 4)
            {
              v7 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 12);
              if (*((Espresso::zephyr::value_t ***)v2 + 13) == v7
                || (v8 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15),
                    *((Espresso::zephyr::value_t ***)v2 + 16) == v8))
              {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              Espresso::zephyr::value_t::replace_uses(*v7, *v8);
              v9 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
              if (!Espresso::zephyr::match_verbose)
                return 1;
              Espresso::espresso_os_log_subsystem(v9, v10);
              v5 = objc_claimAutoreleasedReturnValue();
              v6 = 1;
              if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
              {
                v12 = 136315394;
                v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                v14 = 1024;
                v15 = 385;
                _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v12, 0x12u);
              }
              goto LABEL_15;
            }
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v3, v4);
              v5 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
                goto LABEL_14;
              v12 = 136315650;
              v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              v14 = 1024;
              v15 = 379;
              v16 = 2080;
              v17 = "p.axis_seq == 4";
              goto LABEL_13;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v3, v4);
            v5 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
              goto LABEL_14;
            v12 = 136315650;
            v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v14 = 1024;
            v15 = 378;
            v16 = 2080;
            v17 = "p.axis_n == 3";
            goto LABEL_13;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 377;
          v16 = 2080;
          v17 = "p.axis_k == 2";
          goto LABEL_13;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v3, v4);
        v5 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          goto LABEL_14;
        v12 = 136315650;
        v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v14 = 1024;
        v15 = 376;
        v16 = 2080;
        v17 = "p.axis_h == 1";
        goto LABEL_13;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v12 = 136315650;
        v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v14 = 1024;
        v15 = 371;
        v16 = 2080;
        v17 = "t.node->outputs().size() == 1";
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v12 = 136315650;
    v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    v14 = 1024;
    v15 = 370;
    v16 = 2080;
    v17 = "t.node->inputs().size() == 1";
    goto LABEL_13;
  }
LABEL_14:
  v6 = 0;
LABEL_15:

  return v6;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes45strength_reduction_remove_identity_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::target_type()
{
}

void sub_1918110A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char matched;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;

  *(_QWORD *)&v22 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v18[0] = &off_1E2DB0A58;
      v18[1] = v3 + 16;
      v19 = v18;
      std::string::basic_string[abi:ne180100]<0>(&v20, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v21, "reshape");
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = &v13;
      v17 = 0;
      v13 = (std::string *)operator new(0x30uLL);
      v14 = v13;
      v15 = v13 + 2;
      v6 = 0;
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, &v20, &v22, v13);
      do
      {
        if (SHIBYTE(v21[v6 + 2]) < 0)
          operator delete((void *)v21[v6]);
        v6 -= 3;
      }
      while (v6 != -6);
      *(_QWORD *)&v20 = &off_1E2DB2E70;
      *((_QWORD *)&v20 + 1) = v18;
      v21[0] = &v20;
      matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v13, &v20);
      v8 = (__int128 *)v21[0];
      if ((__int128 *)v21[0] == &v20)
      {
        v8 = &v20;
        v9 = 4;
      }
      else
      {
        if (!v21[0])
          goto LABEL_12;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_12:
      v16 = &v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      v10 = v19;
      if (v19 == v18)
      {
        v10 = v18;
        v11 = 4;
        goto LABEL_16;
      }
      if (v19)
      {
        v11 = 5;
LABEL_16:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191811298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void **a26)
{
  void **p_p;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  p_p = a26;
  if (a26 == &__p)
  {
    v28 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v28 = 5;
  }
  (*((void (**)(void))*p_p + v28))();
LABEL_6:
  a14 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  v29 = a19;
  if (a19 == &a16)
  {
    v30 = 4;
    v29 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_11:
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2E70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2E70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS7_IT0_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISG_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0A58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  Espresso::zephyr::node_t *v6;
  uint64_t v7;
  Espresso::zephyr::node_t *v8;
  char v9;
  Espresso::zephyr::value_t **v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  _BYTE buf[24];
  uint64_t v23;
  uint64_t v24;

  v3 = 0;
  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(Espresso::zephyr::node_t **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)buf = *(_QWORD *)a2;
  *(_QWORD *)&buf[8] = v5;
  v8 = *(Espresso::zephyr::node_t **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&buf[16] = *(_QWORD *)a3;
  v23 = v7;
  do
  {
    v9 = v3;
    if (*(_QWORD *)(*(_QWORD *)&buf[16 * v4] + 128) - *(_QWORD *)(*(_QWORD *)&buf[16 * v4] + 120) != 8)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 435;
      v20 = 2080;
      v21 = "r.node->inputs().size() == 1";
LABEL_41:
      _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v16, 0x1Cu);
      goto LABEL_42;
    }
    a1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&buf[16 * v4 + 8] + 320))(*(_QWORD *)&buf[16 * v4 + 8]);
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 440;
      v20 = 2080;
      v21 = "p.dynamic_shape == false";
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 24))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 441;
      v20 = 2080;
      v21 = "p.mode == FLATTEN_NCHW";
      goto LABEL_41;
    }
    if (*(int *)a1 <= 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 442;
      v20 = 2080;
      v21 = "p.dst_w > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 4) <= 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 443;
      v20 = 2080;
      v21 = "p.dst_h > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 8) <= 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 444;
      v20 = 2080;
      v21 = "p.dst_k > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 12) <= 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      v16 = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v18 = 1024;
      v19 = 445;
      v20 = 2080;
      v21 = "p.dst_n > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 16) <= 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = 136315650;
          v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v18 = 1024;
          v19 = 446;
          v20 = 2080;
          v21 = "p.dst_seq > 0";
          goto LABEL_41;
        }
LABEL_42:

      }
      return 0;
    }
    v3 = 1;
    v4 = 1;
  }
  while ((v9 & 1) == 0);
  v10 = (Espresso::zephyr::value_t **)*((_QWORD *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v10)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_input_at(v8, 0, *v10);
  v11 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 452;
      _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes20remove_reshape_chainERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

void sub_191811B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char matched;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v6 = (uint64_t *)(v3 + 16);
      v5 = *((_QWORD *)v3 + 2);
      v23[0] = &off_1E2DB1030;
      v23[1] = v3 + 16;
      v24 = v23;
      v7 = Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(v5, (uint64_t)v23);
      v8 = v24;
      if (v24 == v23)
      {
        v8 = v23;
        v9 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_8;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
      v10 = *v6;
      v21[0] = &off_1E2DB1088;
      v21[1] = v3 + 16;
      v22 = v21;
      v11 = Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(v10, (uint64_t)v21);
      v12 = v22;
      if (v22 == v21)
      {
        v12 = v21;
        v13 = 4;
      }
      else
      {
        if (!v22)
          goto LABEL_13;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
      v14 = *v6;
      v19[0] = &off_1E2DB10E0;
      v19[1] = v3 + 16;
      v20 = v19;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v14, (uint64_t)v19);
      v16 = v20;
      if (v20 == v19)
      {
        v16 = v19;
        v17 = 4;
        goto LABEL_17;
      }
      if (v20)
      {
        v17 = 5;
LABEL_17:
        (*(void (**)(void))(*v16 + 8 * v17))();
      }
      v4 |= matched | v7 | v11;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191811CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t matched;
  _QWORD *v6;
  uint64_t v7;
  std::string *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;
  _QWORD v13[3];
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];
  _QWORD v17[3];
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v15, "reshape");
  std::string::basic_string[abi:ne180100]<0>(v16, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(v17, "reshape");
  v9 = 0;
  v10 = 0;
  v11[0] = 0;
  v11[1] = &v9;
  v12 = 0;
  v9 = (std::string *)operator new(0x48uLL);
  v10 = v9;
  v11[0] = v9 + 3;
  v4 = 0;
  v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v11, &v15, &v18, v9);
  do
  {
    if (SHIBYTE(v17[v4 + 2]) < 0)
      operator delete((void *)v17[v4]);
    v4 -= 3;
  }
  while (v4 != -9);
  v13[0] = &off_1E2DB2E18;
  v13[1] = a2;
  v14 = v13;
  matched = Espresso::zephyr::match_kernel_chain(a1, (uint64_t *)&v9, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v7 = 5;
LABEL_9:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *(_QWORD *)&v15 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return matched;
}

void sub_191811EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, void **a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == v19)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  a19 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB10E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB10E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v2;
  void *v3;
  const char *v4;
  void *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  Espresso *v9;
  const char *v10;
  char v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  NSObject *v18;
  Espresso::zephyr::node_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  Espresso::zephyr::node_t *v23;
  Espresso *v24;
  Espresso::zephyr::value_t **v25;
  Espresso::zephyr::value_t **v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  Espresso::zephyr::value_t **v34;
  Espresso::zephyr::value_t **v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  Espresso::zephyr::value_t **v43;
  Espresso::zephyr::value_t **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _BYTE buf[18];
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso::zephyr::node_t *)*a2;
  v3 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(*a2);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v4);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 561;
        v54 = 2080;
        v55 = "squeeze_k";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v5 = v3;
  v6 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 320))(v3);
  if (*(_DWORD *)v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 562;
        v54 = 2080;
        v55 = "squeeze_k->get_params().nd_axis == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_15:

      goto LABEL_16;
    }
    goto LABEL_16;
  }
  v9 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  if (!*((_DWORD *)v9 + 1))
  {
    v13 = (uint64_t *)*((_QWORD *)v2 + 12);
    if (*((uint64_t **)v2 + 13) == v13)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v14 = *v13;
    v16 = *(uint64_t **)(v14 + 56);
    v15 = *(uint64_t **)(v14 + 64);
    if (v15 == v16)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_16;
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 564;
        v54 = 2080;
        v55 = "squeeze_node->output()->uses().size() > 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_15;
    }
    v11 = 0;
    while (1)
    {
      if (v16[1])
      {
        v17 = Espresso::zephyr::match_verbose;
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 570;
            v54 = 2080;
            v55 = "use.index == 0";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
      }
      else
      {
        v19 = (Espresso::zephyr::node_t *)*v16;
        v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*v16);
        if (!v9)
        {
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(0, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 572;
            v54 = 2080;
            v55 = "zephyr::cast_kernel<generic_inner_product_kernel>(use.user_node)";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        v20 = (_QWORD *)*((_QWORD *)v19 + 12);
        if (*((_QWORD **)v19 + 13) == v20)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v22 = *v20 + 56;
        v21 = *(uint64_t **)v22;
        if (*(_QWORD *)(v22 + 8) - *(_QWORD *)v22 != 16)
        {
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 576;
            v54 = 2080;
            v55 = "inner_product_node->output()->has_one_use()";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        v23 = (Espresso::zephyr::node_t *)*v21;
        v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*v21);
        v24 = v9;
        if (!v9)
        {
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(0, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 581;
            v54 = 2080;
            v55 = "expand_dims_k";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        v9 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v9 + 320))(v9);
        if (*(_DWORD *)v9)
        {
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 582;
            v54 = 2080;
            v55 = "expand_dims_k->get_params().nd_axis == 0";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        v9 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v24 + 320))(v24);
        if (*((_DWORD *)v9 + 1))
        {
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 583;
            v54 = 2080;
            v55 = "expand_dims_k->get_params().size_of_axes == 0";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        v25 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v25)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v25);
        if (!*(_QWORD *)buf)
        {
          v45 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
LABEL_98:
          v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_26;
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 586;
            v54 = 2080;
            v55 = "need_shape(squeeze_node->input()) && need_shape(squeeze_node->input())->rank() == 3";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
LABEL_25:

          v17 = 0;
          goto LABEL_26;
        }
        v26 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v26)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v51, *v26);
        v27 = *(_DWORD *)(v51 + 20);
        if (v27 == -1)
        {
          if (*(_DWORD *)(v51 + 16) == 1)
            v27 = 4;
          else
            v27 = 5;
        }
        v28 = v52;
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v27 != 3)
          goto LABEL_98;
        v34 = (Espresso::zephyr::value_t **)*((_QWORD *)v23 + 12);
        if (*((Espresso::zephyr::value_t ***)v23 + 13) == v34)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v34);
        if (*(_QWORD *)buf)
        {
          v35 = (Espresso::zephyr::value_t **)*((_QWORD *)v23 + 12);
          if (*((Espresso::zephyr::value_t ***)v23 + 13) == v35)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          Espresso::zephyr::need_shape((Espresso::zephyr *)&v51, *v35);
          v36 = *(_DWORD *)(v51 + 20);
          if (v36 == -1)
          {
            if (*(_DWORD *)(v51 + 16) == 1)
              v36 = 4;
            else
              v36 = 5;
          }
          v37 = v52;
          if (v52)
          {
            v38 = (unint64_t *)&v52->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v40 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          if (v36 == 3)
          {
            v43 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
            if (*((Espresso::zephyr::value_t ***)v2 + 16) == v43)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::node_t::replace_input_at(v19, 0, *v43);
            v44 = (Espresso::zephyr::value_t **)*((_QWORD *)v23 + 12);
            if (*((Espresso::zephyr::value_t ***)v23 + 13) == v44)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::node_t::replace_output_at((uint64_t)v19, 0, *v44);
            v9 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v23);
            v17 = 1;
            goto LABEL_26;
          }
        }
        else
        {
          v48 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v49 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
        }
        v17 = Espresso::zephyr::match_verbose;
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v9, v10);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 588;
            v54 = 2080;
            v55 = "need_shape(expand_dims_node->output()) && need_shape(expand_dims_node->output())->rank() == 3";
            _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
      }
LABEL_26:
      v11 |= v17;
      v16 += 2;
      if (v16 == v15)
      {
        Espresso::zephyr::node_t::remove_if_unused(v2);
        return v11 & 1;
      }
    }
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v9, v10);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 563;
      v54 = 2080;
      v55 = "squeeze_k->get_params().size_of_axes == 0";
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_15;
  }
LABEL_16:
  v11 = 0;
  return v11 & 1;
}

void sub_1918129F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  Espresso::zephyr::node_t *v6;
  uint64_t v7;
  Espresso::zephyr::node_t *v8;
  uint64_t v9;
  Espresso::zephyr::node_t *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  Espresso::zephyr::value_t **v14;
  Espresso::zephyr::value_t **v15;
  Espresso *v16;
  const char *v17;
  _DWORD *v18;
  Espresso *v19;
  const char *v20;
  int v21;
  int v22;
  Espresso *v23;
  const char *v24;
  Espresso *v25;
  const char *v26;
  int v27;
  int v28;
  int v29;
  Espresso *v30;
  const char *v31;
  Espresso::zephyr::value_t **v32;
  Espresso::zephyr::value_t **v33;
  Espresso *v34;
  const char *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _DWORD *v46;
  std::__shared_weak_count *v47;
  _BYTE v48[18];
  __int16 v49;
  const char *v50;
  _OWORD buf[2];
  uint64_t v52;

  v4 = 0;
  v5 = 0;
  v52 = *MEMORY[0x1E0C80C00];
  v6 = *(Espresso::zephyr::node_t **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(Espresso::zephyr::node_t **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(Espresso::zephyr::node_t **)a4;
  v11 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&buf[0] = *(_QWORD *)a2;
  *((_QWORD *)&buf[0] + 1) = v7;
  *(_QWORD *)&buf[1] = v10;
  do
  {
    v12 = v4;
    v13 = *(_QWORD **)&buf[v5];
    if (v13[16] - v13[15] != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v48 = 136315650;
          *(_QWORD *)&v48[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v48[12] = 1024;
          *(_DWORD *)&v48[14] = 513;
          v49 = 2080;
          v50 = "r.node->inputs().size() == 1";
LABEL_31:
          _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v48, 0x1Cu);
        }
LABEL_32:

      }
      return 0;
    }
    if (v13[13] - v13[12] != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v48 = 136315650;
          *(_QWORD *)&v48[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v48[12] = 1024;
          *(_DWORD *)&v48[14] = 514;
          v49 = 2080;
          v50 = "r.node->outputs().size() == 1";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      return 0;
    }
    v4 = 1;
    v5 = 1;
  }
  while ((v12 & 1) == 0);
  v14 = (Espresso::zephyr::value_t **)*((_QWORD *)v10 + 12);
  if (*((Espresso::zephyr::value_t ***)v10 + 13) == v14)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)v48, *v14);
  v15 = (Espresso::zephyr::value_t **)*((_QWORD *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v15)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v46, *v15);
  if (!*(_QWORD *)v48)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 519;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "out_shape_ptr";
LABEL_74:
    _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)buf, 0x1Cu);
    goto LABEL_75;
  }
  v18 = v46;
  if (!v46)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 520;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "in_shape_ptr";
    goto LABEL_74;
  }
  if (v46[5] != 3)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 522;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "in_shape_ptr->rank() == 3";
    goto LABEL_74;
  }
  if (*(_DWORD *)(*(_QWORD *)v48 + 20) != 3)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 523;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "out_shape_ptr->rank() == 3";
    goto LABEL_74;
  }
  if (v46[2] != *(_DWORD *)(*(_QWORD *)v48 + 8))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 525;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "in_shape_ptr->k == out_shape_ptr->k";
    goto LABEL_74;
  }
  if (v46[1] != *(_DWORD *)(*(_QWORD *)v48 + 4))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 526;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "in_shape_ptr->h == out_shape_ptr->h";
    goto LABEL_74;
  }
  v19 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 320))(v7);
  if (*((_DWORD *)v19 + 5) != 2)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v19, v20);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 529;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_in.dst_nd_rank == 2";
    goto LABEL_74;
  }
  v22 = *(_DWORD *)v19;
  v21 = *((_DWORD *)v19 + 1);
  v23 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9);
  if (v22 != *((_DWORD *)v23 + 1))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v23, v24);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 530;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_in.dst_w == ip.kernel->get_params().nB";
    goto LABEL_74;
  }
  if (v21 != v18[2] * v18[1])
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v23, v24);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 531;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_in.dst_h == in_shape_ptr->h * in_shape_ptr->k";
    goto LABEL_74;
  }
  v25 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 320))(v11);
  if (*((_DWORD *)v25 + 5) != 3)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v25, v26);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 534;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_out.dst_nd_rank == 3";
    goto LABEL_74;
  }
  v28 = *(_DWORD *)v25;
  v27 = *((_DWORD *)v25 + 1);
  v29 = *((_DWORD *)v25 + 2);
  v30 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9);
  if (v28 != *(_DWORD *)v30)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v30, v31);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 535;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_out.dst_w == ip.kernel->get_params().nC";
    goto LABEL_74;
  }
  if (v27 != v18[1])
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_77;
    Espresso::espresso_os_log_subsystem(v30, v31);
    v36 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_75;
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 536;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = "p_out.dst_h == in_shape_ptr->h";
    goto LABEL_74;
  }
  if (v29 != v18[2])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v30, v31);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 136315650;
        *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 537;
        WORD1(buf[1]) = 2080;
        *(_QWORD *)((char *)&buf[1] + 4) = "p_out.dst_k == in_shape_ptr->k";
        goto LABEL_74;
      }
LABEL_75:
      v37 = 0;
      goto LABEL_76;
    }
LABEL_77:
    v37 = 0;
    goto LABEL_78;
  }
  v32 = (Espresso::zephyr::value_t **)*((_QWORD *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v32
    || (Espresso::zephyr::node_t::replace_input_at(v8, 0, *v32),
        v33 = (Espresso::zephyr::value_t **)*((_QWORD *)v10 + 12),
        *((Espresso::zephyr::value_t ***)v10 + 13) == v33))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v8, 0, *v33);
  Espresso::zephyr::node_t::remove_from_graphs(v10);
  v34 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v34, v35);
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 1;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 547;
      _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)buf, 0x12u);
    }
LABEL_76:

  }
  else
  {
    v37 = 1;
  }
LABEL_78:
  v40 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(std::__shared_weak_count **)&v48[8];
  if (*(_QWORD *)&v48[8])
  {
    v44 = (unint64_t *)(*(_QWORD *)&v48[8] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return v37;
}

void sub_191813548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2E18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2E18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  v6 = (*a2)[1];
  v7 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v6);
  v8 = (*a2)[2];
  v13[0] = v4;
  v13[1] = v5;
  v12[0] = v6;
  v12[1] = v7;
  v11[0] = v8;
  v11[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v8);
  v9 = *(_QWORD *)(v3 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v13, v12, v11);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_28generic_inner_product_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1030;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso *a1, uint64_t a2, Espresso::zephyr::node_t **a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  Espresso::zephyr::node_t *v6;
  uint64_t v7;
  Espresso::zephyr::node_t *v8;
  Espresso::zephyr::node_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  int v13;
  Espresso *v14;
  const char *v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  Espresso::zephyr::value_t **v20;
  Espresso::zephyr::value_t **v21;
  Espresso *v22;
  const char *v23;
  NSObject *v24;
  NSObject *v26;
  uint8_t *v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  _BYTE buf[32];
  uint64_t v35;

  v4 = 0;
  v5 = 0;
  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(Espresso::zephyr::node_t **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *a3;
  v9 = *(Espresso::zephyr::node_t **)a4;
  v10 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)buf = *(_QWORD *)a2;
  *(_QWORD *)&buf[8] = v7;
  *(_QWORD *)&buf[16] = v9;
  *(_QWORD *)&buf[24] = v10;
  do
  {
    v11 = v4;
    v12 = *(_QWORD **)&buf[16 * v5];
    if (v12[16] - v12[15] != 8)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 474;
      v32 = 2080;
      v33 = "r.node->inputs().size() == 1";
LABEL_41:
      v27 = (uint8_t *)&v28;
LABEL_42:
      _os_log_impl(&dword_190DAF000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v27, 0x1Cu);
      goto LABEL_43;
    }
    if (v12[13] - v12[12] != 8)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 475;
      v32 = 2080;
      v33 = "r.node->outputs().size() == 1";
      goto LABEL_41;
    }
    a1 = (Espresso *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&buf[16 * v5 + 8] + 320))(*(_QWORD *)&buf[16 * v5 + 8]);
    if (*(int *)a1 <= 0)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 481;
      v32 = 2080;
      v33 = "p.dst_w > 0";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 2) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 483;
      v32 = 2080;
      v33 = "p.dst_k == 0 || p.dst_k == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 3) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 484;
      v32 = 2080;
      v33 = "p.dst_n == 0 || p.dst_n == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 4) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v26 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_43;
      v28 = 136315650;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v30 = 1024;
      v31 = 485;
      v32 = 2080;
      v33 = "p.dst_seq == 0 || p.dst_seq == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 6))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          v28 = 136315650;
          v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v30 = 1024;
          v31 = 486;
          v32 = 2080;
          v33 = "p.mode == FLATTEN_NCHW";
          goto LABEL_41;
        }
LABEL_43:

      }
      return 0;
    }
    v4 = 1;
    v5 = 1;
  }
  while ((v11 & 1) == 0);
  v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 320))(v7) + 4);
  v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
  if (v13 != *((_DWORD *)v14 + 1))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v14, v15);
    v26 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      goto LABEL_43;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 490;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "r_in.kernel->get_params().dst_h == r_out.kernel->get_params().dst_h";
LABEL_55:
    v27 = buf;
    goto LABEL_42;
  }
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 320))(v7);
  if (*((_DWORD *)v16 + 5) != 2)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v16, v17);
    v26 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      goto LABEL_43;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 492;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "r_in.kernel->get_params().dst_nd_rank == 2";
    goto LABEL_55;
  }
  v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
  if (*((_DWORD *)v18 + 5) != 3)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v18, v19);
    v26 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      goto LABEL_43;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 493;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "r_out.kernel->get_params().dst_nd_rank == 3";
    goto LABEL_55;
  }
  v20 = (Espresso::zephyr::value_t **)*((_QWORD *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v20
    || (Espresso::zephyr::node_t::replace_input_at(v8, 0, *v20),
        v21 = (Espresso::zephyr::value_t **)*((_QWORD *)v9 + 12),
        *((Espresso::zephyr::value_t ***)v9 + 13) == v21))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v8, 0, *v21);
  Espresso::zephyr::node_t::remove_from_graphs(v9);
  v22 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v22, v23);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 501;
      _os_log_impl(&dword_190DAF000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

void sub_191813F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char matched;
  __int128 *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string **v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t (**v33)();
  uint64_t v34;
  _QWORD *v35;
  uint64_t (***v36)();
  __int128 v37;
  _QWORD v38[3];
  _QWORD v39[3];
  __int128 v40;

  *(_QWORD *)&v40 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*((_QWORD *)this + 9);
  v23 = (char *)this + 64;
  if (v2 != (char *)this + 64)
  {
    v3 = 0;
    while (1)
    {
      v4 = *((_QWORD *)v2 + 2);
      v31[0] = &off_1E2DB0E78;
      v32 = v31;
      v33 = &off_1E2DAEA60;
      v34 = v4;
      v35 = v31;
      v36 = &v33;
      std::string::basic_string[abi:ne180100]<0>(&v37, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v38, "softmax_nd");
      std::string::basic_string[abi:ne180100]<0>(v39, "reshape");
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = &v24;
      v28 = 0;
      v24 = (std::string *)operator new(0x48uLL);
      v25 = v24;
      v26 = v24 + 3;
      v5 = 0;
      v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, &v37, &v40, v24);
      do
      {
        if (SHIBYTE(v39[v5 + 2]) < 0)
          operator delete((void *)v39[v5]);
        v5 -= 3;
      }
      while (v5 != -9);
      *(_QWORD *)&v37 = &off_1E2DB2DC0;
      *((_QWORD *)&v37 + 1) = &v33;
      v38[0] = &v37;
      matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v24, &v37);
      v7 = (__int128 *)v38[0];
      if ((__int128 *)v38[0] == &v37)
      {
        v7 = &v37;
        v8 = 4;
      }
      else
      {
        if (!v38[0])
          goto LABEL_12;
        v8 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_12:
      v27 = &v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      v9 = v36;
      if (v36 == &v33)
      {
        v9 = &v33;
        v10 = 4;
      }
      else
      {
        if (!v36)
          goto LABEL_17;
        v10 = 5;
      }
      (*v9)[v10]();
LABEL_17:
      v11 = v32;
      if (v32 == v31)
      {
        v11 = v31;
        v12 = 4;
        goto LABEL_21;
      }
      if (v32)
      {
        v12 = 5;
LABEL_21:
        (*(void (**)(void))(*v11 + 8 * v12))();
      }
      v13 = *((_QWORD *)v2 + 2);
      v29[0] = &off_1E2DB0ED0;
      v30 = v29;
      v33 = &off_1E2DAEA08;
      v34 = v13;
      v35 = v29;
      v36 = &v33;
      std::string::basic_string[abi:ne180100]<0>(&v37, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v38, "softmax");
      std::string::basic_string[abi:ne180100]<0>(v39, "reshape");
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = &v24;
      v28 = 0;
      v24 = (std::string *)operator new(0x48uLL);
      v25 = v24;
      v26 = v24 + 3;
      v14 = 0;
      v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, &v37, &v40, v24);
      do
      {
        if (SHIBYTE(v39[v14 + 2]) < 0)
          operator delete((void *)v39[v14]);
        v14 -= 3;
      }
      while (v14 != -9);
      *(_QWORD *)&v37 = &off_1E2DB2D68;
      *((_QWORD *)&v37 + 1) = &v33;
      v38[0] = &v37;
      v15 = Espresso::zephyr::match_kernel_chain(v13, (uint64_t *)&v24, &v37);
      v16 = (__int128 *)v38[0];
      if ((__int128 *)v38[0] == &v37)
      {
        v16 = &v37;
        v17 = 4;
      }
      else
      {
        if (!v38[0])
          goto LABEL_31;
        v17 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_31:
      v27 = &v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      v18 = v36;
      if (v36 == &v33)
      {
        v18 = &v33;
        v19 = 4;
      }
      else
      {
        if (!v36)
          goto LABEL_36;
        v19 = 5;
      }
      (*v18)[v19]();
LABEL_36:
      v20 = v30;
      if (v30 == v29)
      {
        v20 = v29;
        v21 = 4;
        goto LABEL_40;
      }
      if (v30)
      {
        v21 = 5;
LABEL_40:
        (*(void (**)(void))(*v20 + 8 * v21))();
      }
      v3 |= matched | v15;
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (v2 == v23)
        return v3 & 1;
    }
  }
  v3 = 0;
  return v3 & 1;
}

void sub_19181433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v34 = a33;
  if (a33 == &a30)
  {
    v35 = 4;
    v34 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  a16 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  v36 = a29;
  if (a29 == &a26)
  {
    v37 = 4;
    v36 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_11;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_11:
  v38 = a21;
  if (a21 == &a18)
  {
    v39 = 4;
    v38 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_16:
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2D68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2D68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  v6 = (*a2)[1];
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(const void **)(v7 + 8)) != 0)
  {
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(v7 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v14 = (*a2)[2];
  v19[0] = v4;
  v19[1] = v5;
  v18[0] = v6;
  v18[1] = v9;
  v17[0] = v14;
  v17[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v14);
  v15 = *(_QWORD *)(v3 + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v19, v18, v17);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_22generic_softmax_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DAEA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DAEA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  Espresso::zephyr::node_t *v7;
  uint64_t v8;
  Espresso::zephyr::node_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  Espresso *v25;
  const char *v26;
  _DWORD *v27;
  int v28;
  Espresso *v29;
  const char *v30;
  NSObject *v31;
  Espresso::zephyr::value_t **v32;
  Espresso::zephyr::value_t **v33;
  Espresso *v34;
  const char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _DWORD *v39;
  std::__shared_weak_count *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  v7 = *(Espresso::zephyr::node_t **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(Espresso::zephyr::node_t **)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1088;
  LODWORD(v11[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 320))(v8);
  v15 = *(_QWORD *)(v13 + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v14);
  if ((v16 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 620;
        v45 = 2080;
        v46 = "check_p(softmax.kernel->get_params())";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((_QWORD *)v7 + 16) - *((_QWORD *)v7 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 621;
        v45 = 2080;
        v46 = "softmax.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((_QWORD *)v7 + 13) - *((_QWORD *)v7 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 622;
        v45 = 2080;
        v46 = "softmax.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(_QWORD *)(v5 + 128) - *(_QWORD *)(v5 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 625;
        v45 = 2080;
        v46 = "r_in.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(_QWORD *)(v5 + 104) - *(_QWORD *)(v5 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 626;
        v45 = 2080;
        v46 = "r_in.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v18 + 5) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 630;
        v45 = 2080;
        v46 = "p_in.dst_nd_rank == 2";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
LABEL_37:
    v21 = 0;
    goto LABEL_38;
  }
  if (*((_DWORD *)v18 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 631;
        v45 = 2080;
        v46 = "p_in.mode == FLATTEN_NCHW";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  v24 = *(_DWORD *)v18;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, **(Espresso::zephyr::value_t ***)(v5 + 120));
  v27 = v39;
  if (v39)
  {
    v28 = v39[5];
    if (v28 == 4 || v28 == -1 && v39[4] == 1)
    {
      if (v24 == *v39)
      {
        if (*((_QWORD *)v9 + 16) - *((_QWORD *)v9 + 15) == 8)
        {
          if (*((_QWORD *)v9 + 13) - *((_QWORD *)v9 + 12) == 8)
          {
            v29 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
            if (*((_DWORD *)v29 + 6))
            {
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(v29, v30);
                v31 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                  v43 = 1024;
                  v44 = 645;
                  v45 = 2080;
                  v46 = "p_out.mode == FLATTEN_NCHW";
LABEL_68:
                  _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  goto LABEL_69;
                }
                goto LABEL_69;
              }
            }
            else if (*((_DWORD *)v29 + 5) == 4)
            {
              if (*(_DWORD *)v29 == *v27)
              {
                v32 = *(Espresso::zephyr::value_t ***)(v5 + 120);
                if (*(Espresso::zephyr::value_t ***)(v5 + 128) == v32
                  || (Espresso::zephyr::node_t::replace_input_at(v7, 0, *v32),
                      v33 = (Espresso::zephyr::value_t **)*((_QWORD *)v9 + 12),
                      *((Espresso::zephyr::value_t ***)v9 + 13) == v33))
                {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                Espresso::zephyr::node_t::replace_output_at((uint64_t)v7, 0, *v33);
                Espresso::zephyr::node_t::remove_from_graphs(v9);
                v34 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
                if (!Espresso::zephyr::match_verbose)
                {
                  v21 = 1;
                  goto LABEL_85;
                }
                Espresso::espresso_os_log_subsystem(v34, v35);
                v31 = objc_claimAutoreleasedReturnValue();
                v21 = 1;
                if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315394;
                  v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                  v43 = 1024;
                  v44 = 658;
                  _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
                }
                goto LABEL_70;
              }
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(v29, v30);
                v31 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  goto LABEL_69;
                *(_DWORD *)buf = 136315650;
                v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                v43 = 1024;
                v44 = 648;
                v45 = 2080;
                v46 = "p_out.dst_w == input_shape_ptr->w";
                goto LABEL_68;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v29, v30);
              v31 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                goto LABEL_69;
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              v43 = 1024;
              v44 = 646;
              v45 = 2080;
              v46 = "p_out.dst_nd_rank == 4";
              goto LABEL_68;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v25, v26);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              v43 = 1024;
              v44 = 642;
              v45 = 2080;
              v46 = "r_out.node->outputs().size() == 1";
              goto LABEL_68;
            }
            goto LABEL_69;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v25, v26);
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v43 = 1024;
            v44 = 641;
            v45 = 2080;
            v46 = "r_out.node->inputs().size() == 1";
            goto LABEL_68;
          }
          goto LABEL_69;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v25, v26);
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v43 = 1024;
          v44 = 637;
          v45 = 2080;
          v46 = "p_in.dst_w == input_shape_ptr->w";
          goto LABEL_68;
        }
        goto LABEL_69;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v25, v26);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 635;
        v45 = 2080;
        v46 = "input_shape_ptr->rank() == 4";
        goto LABEL_68;
      }
      goto LABEL_69;
    }
LABEL_84:
    v21 = 0;
    goto LABEL_85;
  }
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_84;
  Espresso::espresso_os_log_subsystem(v25, v26);
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    v43 = 1024;
    v44 = 634;
    v45 = 2080;
    v46 = "input_shape_ptr";
    goto LABEL_68;
  }
LABEL_69:
  v21 = 0;
LABEL_70:

LABEL_85:
  v36 = v40;
  if (v40)
  {
    v37 = (unint64_t *)&v40->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  do
LABEL_38:
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v21;
}

void sub_191815218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"Z37remove_reshape_around_rank2_softmax_tIN8Espresso22generic_softmax_kernelEEbRNS0_6zephyr15ordered_block_tENSt3__18functionIFbRKNT_8params_tEEEEEUlNS2_19match_kernel_info_tINS0_22generic_reshape_kernelEEENSD_IS1_EESF_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0ED0;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0ED0;
}

BOOL std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 27) && *(_BYTE *)(a2 + 24) == 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35remove_reshape_around_rank2_softmaxERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2DC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2DC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  v6 = (*a2)[1];
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(const void **)(v7 + 8)) != 0)
  {
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(v7 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v14 = (*a2)[2];
  v19[0] = v4;
  v19[1] = v5;
  v18[0] = v6;
  v18[1] = v9;
  v17[0] = v14;
  v17[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v14);
  v15 = *(_QWORD *)(v3 + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v19, v18, v17);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_25generic_softmax_nd_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DAEA60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DAEA60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  Espresso::zephyr::node_t *v7;
  uint64_t v8;
  Espresso::zephyr::node_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  Espresso *v25;
  const char *v26;
  _DWORD *v27;
  int v28;
  Espresso *v29;
  const char *v30;
  NSObject *v31;
  Espresso::zephyr::value_t **v32;
  Espresso::zephyr::value_t **v33;
  Espresso *v34;
  const char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _DWORD *v39;
  std::__shared_weak_count *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  v7 = *(Espresso::zephyr::node_t **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(Espresso::zephyr::node_t **)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1088;
  LODWORD(v11[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 320))(v8);
  v15 = *(_QWORD *)(v13 + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v14);
  if ((v16 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 620;
        v45 = 2080;
        v46 = "check_p(softmax.kernel->get_params())";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((_QWORD *)v7 + 16) - *((_QWORD *)v7 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 621;
        v45 = 2080;
        v46 = "softmax.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((_QWORD *)v7 + 13) - *((_QWORD *)v7 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 622;
        v45 = 2080;
        v46 = "softmax.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(_QWORD *)(v5 + 128) - *(_QWORD *)(v5 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 625;
        v45 = 2080;
        v46 = "r_in.node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(_QWORD *)(v5 + 104) - *(_QWORD *)(v5 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 626;
        v45 = 2080;
        v46 = "r_in.node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v18 + 5) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 630;
        v45 = 2080;
        v46 = "p_in.dst_nd_rank == 2";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
LABEL_37:
    v21 = 0;
    goto LABEL_38;
  }
  if (*((_DWORD *)v18 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 631;
        v45 = 2080;
        v46 = "p_in.mode == FLATTEN_NCHW";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  v24 = *(_DWORD *)v18;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, **(Espresso::zephyr::value_t ***)(v5 + 120));
  v27 = v39;
  if (v39)
  {
    v28 = v39[5];
    if (v28 == 4 || v28 == -1 && v39[4] == 1)
    {
      if (v24 == *v39)
      {
        if (*((_QWORD *)v9 + 16) - *((_QWORD *)v9 + 15) == 8)
        {
          if (*((_QWORD *)v9 + 13) - *((_QWORD *)v9 + 12) == 8)
          {
            v29 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
            if (*((_DWORD *)v29 + 6))
            {
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(v29, v30);
                v31 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                  v43 = 1024;
                  v44 = 645;
                  v45 = 2080;
                  v46 = "p_out.mode == FLATTEN_NCHW";
LABEL_68:
                  _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  goto LABEL_69;
                }
                goto LABEL_69;
              }
            }
            else if (*((_DWORD *)v29 + 5) == 4)
            {
              if (*(_DWORD *)v29 == *v27)
              {
                v32 = *(Espresso::zephyr::value_t ***)(v5 + 120);
                if (*(Espresso::zephyr::value_t ***)(v5 + 128) == v32
                  || (Espresso::zephyr::node_t::replace_input_at(v7, 0, *v32),
                      v33 = (Espresso::zephyr::value_t **)*((_QWORD *)v9 + 12),
                      *((Espresso::zephyr::value_t ***)v9 + 13) == v33))
                {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                Espresso::zephyr::node_t::replace_output_at((uint64_t)v7, 0, *v33);
                Espresso::zephyr::node_t::remove_from_graphs(v9);
                v34 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
                if (!Espresso::zephyr::match_verbose)
                {
                  v21 = 1;
                  goto LABEL_85;
                }
                Espresso::espresso_os_log_subsystem(v34, v35);
                v31 = objc_claimAutoreleasedReturnValue();
                v21 = 1;
                if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315394;
                  v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                  v43 = 1024;
                  v44 = 658;
                  _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
                }
                goto LABEL_70;
              }
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(v29, v30);
                v31 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  goto LABEL_69;
                *(_DWORD *)buf = 136315650;
                v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                v43 = 1024;
                v44 = 648;
                v45 = 2080;
                v46 = "p_out.dst_w == input_shape_ptr->w";
                goto LABEL_68;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v29, v30);
              v31 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                goto LABEL_69;
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              v43 = 1024;
              v44 = 646;
              v45 = 2080;
              v46 = "p_out.dst_nd_rank == 4";
              goto LABEL_68;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v25, v26);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              v43 = 1024;
              v44 = 642;
              v45 = 2080;
              v46 = "r_out.node->outputs().size() == 1";
              goto LABEL_68;
            }
            goto LABEL_69;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v25, v26);
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v43 = 1024;
            v44 = 641;
            v45 = 2080;
            v46 = "r_out.node->inputs().size() == 1";
            goto LABEL_68;
          }
          goto LABEL_69;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v25, v26);
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v43 = 1024;
          v44 = 637;
          v45 = 2080;
          v46 = "p_in.dst_w == input_shape_ptr->w";
          goto LABEL_68;
        }
        goto LABEL_69;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v25, v26);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v43 = 1024;
        v44 = 635;
        v45 = 2080;
        v46 = "input_shape_ptr->rank() == 4";
        goto LABEL_68;
      }
      goto LABEL_69;
    }
LABEL_84:
    v21 = 0;
    goto LABEL_85;
  }
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_84;
  Espresso::espresso_os_log_subsystem(v25, v26);
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    v43 = 1024;
    v44 = 634;
    v45 = 2080;
    v46 = "input_shape_ptr";
    goto LABEL_68;
  }
LABEL_69:
  v21 = 0;
LABEL_70:

LABEL_85:
  v36 = v40;
  if (v40)
  {
    v37 = (unint64_t *)&v40->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  do
LABEL_38:
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v21;
}

void sub_191816050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"Z37remove_reshape_around_rank2_softmax_tIN8Espresso25generic_softmax_nd_kernelEEbRNS0_6zephyr15ordered_block_tENSt3__18functionIFbRKNT_8params_tEEEEEUlNS2_19match_kernel_info_tINS0_22generic_reshape_kernelEEENSD_IS1_EESF_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0E78;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0E78;
}

BOOL std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  return *a2 == -1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35remove_reshape_around_rank2_softmaxERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::target_type()
{
}

void sub_191816238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0FD8;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191816330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0FD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  Espresso::zephyr::value_t **v9;
  Espresso::zephyr::value_t *v10;
  Espresso *v11;
  const char *v12;
  const Espresso::layer_shape *v13;
  Espresso::zephyr::value_t **v14;
  Espresso *v15;
  const char *v16;
  const Espresso::layer_shape *v17;
  Espresso *v18;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  Espresso *v36;
  char *v37;
  NSObject *v38;
  int v39;
  Espresso *v40;
  Espresso *v41;
  int v42;
  unint64_t v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  Espresso *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  char *v51;
  std::__shared_weak_count *v52;
  Espresso::zephyr::value_t **v53;
  Espresso *v54;
  const char *v55;
  NSObject *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  const char *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  signed int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  const Espresso::layer_shape *v87;
  std::__shared_weak_count *v88;
  const Espresso::layer_shape *v89;
  std::__shared_weak_count *v90;
  uint8_t buf[4];
  const char *v92;
  __int16 v93;
  int v94;
  __int16 v95;
  _BYTE v96[10];
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 909;
        v95 = 2080;
        *(_QWORD *)v96 = "reshape_kernel != nullptr";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  v6 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  if (*((_DWORD *)v6 + 5) != -1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 910;
        v95 = 2080;
        *(_QWORD *)v96 = "reshape_kernel->get_params().dst_nd_rank == -1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_28:

      return 0;
    }
    return 0;
  }
  v9 = *(Espresso::zephyr::value_t ***)(v3 + 120);
  if (*(_QWORD *)(v3 + 128) - (_QWORD)v9 != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 912;
        v95 = 2080;
        *(_QWORD *)v96 = "reshape_node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  if (*(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 913;
        v95 = 2080;
        *(_QWORD *)v96 = "reshape_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  v10 = *v9;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v89, *v9);
  v13 = v89;
  if (!v89)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v11, v12);
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 917;
        v95 = 2080;
        *(_QWORD *)v96 = "input_shape_ptr";
        _os_log_impl(&dword_190DAF000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v22 = 0;
    goto LABEL_151;
  }
  v14 = *(Espresso::zephyr::value_t ***)(v3 + 96);
  if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v14)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v87, *v14);
  v17 = v87;
  if (!v87)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v15, v16);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 920;
        v95 = 2080;
        *(_QWORD *)v96 = "output_shape_ptr";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    goto LABEL_92;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v81, v13, 0);
  v18 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v75, v17, 0);
  v20 = v86;
  if (v86 > 3)
  {
    if (v86 == 5)
    {
LABEL_43:
      v21 = v82 * (uint64_t)v81;
      goto LABEL_46;
    }
    if (v86 == 4)
    {
LABEL_42:
      v21 = v81;
      goto LABEL_46;
    }
    v21 = 0;
  }
  else
  {
    v21 = (int)v86;
    if (!v86)
      goto LABEL_46;
    if (v86 != 1)
    {
      if (v86 != 2)
        goto LABEL_43;
      goto LABEL_42;
    }
    v21 = 1;
  }
LABEL_46:
  v26 = v80;
  if (v80 > 3)
  {
    if (v80 == 5)
    {
LABEL_54:
      v27 = v76 * (uint64_t)v75;
      goto LABEL_57;
    }
    if (v80 == 4)
    {
LABEL_53:
      v27 = v75;
      goto LABEL_57;
    }
    v27 = 0;
  }
  else
  {
    v27 = v80;
    if (!v80)
      goto LABEL_57;
    if (v80 != 1)
    {
      if (v80 != 2)
        goto LABEL_54;
      goto LABEL_53;
    }
    v27 = 1;
  }
LABEL_57:
  if (v86 > 3)
  {
    if (v86 == 5)
    {
      v30 = v84;
      v29 = v85;
      v31 = v83;
    }
    else
    {
      if (v86 != 4)
      {
        v28 = 0;
        goto LABEL_70;
      }
      v30 = v83;
      v29 = v84;
      v31 = v82;
    }
    v28 = v30 * (uint64_t)v29 * v31;
    goto LABEL_70;
  }
  v28 = (int)v86;
  if (v86)
  {
    if (v86 == 2)
    {
      v28 = v82;
    }
    else if (v86 == 1)
    {
      v28 = v81;
    }
    else
    {
      v28 = v83;
    }
  }
LABEL_70:
  if (v80 > 3)
  {
    if (v80 == 5)
    {
      v34 = v78;
      v33 = v79;
      v35 = v77;
    }
    else
    {
      if (v80 != 4)
      {
        v32 = 0;
        goto LABEL_83;
      }
      v34 = v77;
      v33 = v78;
      v35 = v76;
    }
    v32 = v34 * (uint64_t)v33 * v35;
  }
  else
  {
    v32 = v80;
    if (v80)
    {
      if (v80 == 2)
      {
        v32 = v76;
      }
      else if (v80 == 1)
      {
        v32 = v75;
      }
      else
      {
        v32 = v77;
      }
    }
  }
LABEL_83:
  if (v21 != v27 || v28 != v32)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 931;
        v95 = 2080;
        *(_QWORD *)v96 = "input_m == output_m && input_n == output_n";
        _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
LABEL_92:
    v22 = 0;
    goto LABEL_146;
  }
  if (v86 <= 3)
  {
    if (v86)
    {
      v18 = (Espresso *)operator new(4uLL);
      v36 = v18;
      *(_DWORD *)v18 = v20 - 1;
      v37 = (char *)v18 + 4;
      goto LABEL_99;
    }
    goto LABEL_96;
  }
  if (v86 == 5)
  {
    v18 = (Espresso *)operator new(0xCuLL);
    v36 = v18;
    v37 = (char *)v18 + 12;
    *(_QWORD *)v18 = 0x300000004;
    v39 = 2;
  }
  else
  {
    if (v86 != 4)
    {
LABEL_96:
      v36 = 0;
      v37 = 0;
      goto LABEL_99;
    }
    v18 = (Espresso *)operator new(0xCuLL);
    v36 = v18;
    v37 = (char *)v18 + 12;
    *(_QWORD *)v18 = 0x200000003;
    v39 = 1;
  }
  *((_DWORD *)v36 + 2) = v39;
LABEL_99:
  if (v26 > 3)
  {
    if (v26 == 5)
    {
      v18 = (Espresso *)operator new(0xCuLL);
      v40 = v18;
      v41 = (Espresso *)((char *)v18 + 12);
      *(_QWORD *)v18 = 0x300000004;
      v42 = 2;
    }
    else
    {
      if (v26 != 4)
        goto LABEL_105;
      v18 = (Espresso *)operator new(0xCuLL);
      v40 = v18;
      v41 = (Espresso *)((char *)v18 + 12);
      *(_QWORD *)v18 = 0x200000003;
      v42 = 1;
    }
    *((_DWORD *)v40 + 2) = v42;
    goto LABEL_108;
  }
  if (!(_DWORD)v26)
  {
LABEL_105:
    v40 = 0;
    v41 = 0;
    goto LABEL_108;
  }
  v18 = (Espresso *)operator new(4uLL);
  v40 = v18;
  *(_DWORD *)v18 = v26 - 1;
  v41 = (Espresso *)((char *)v18 + 4);
LABEL_108:
  v43 = (v41 - v40) >> 2;
  if (v43 > (v37 - (char *)v36) >> 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 936;
        v95 = 2080;
        *(_QWORD *)v96 = "input_col_dims.size() >= output_col_dims.size()";
        _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_140:

      goto LABEL_141;
    }
    goto LABEL_141;
  }
  if (v41 == v40)
  {
    v46 = -1;
LABEL_124:
    if (v28 == v46)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        v66 = (const char *)(v3 + 144);
        if (*(char *)(v3 + 167) < 0)
          v66 = *(const char **)v66;
        v67 = *(_DWORD *)v13;
        v68 = *((_DWORD *)v13 + 1);
        v69 = *((_DWORD *)v13 + 2);
        v70 = *((_DWORD *)v13 + 3);
        v71 = *((_DWORD *)v13 + 4);
        *(_DWORD *)buf = 136316418;
        v92 = v66;
        v93 = 1024;
        v94 = v67;
        v95 = 1024;
        *(_DWORD *)v96 = v68;
        *(_WORD *)&v96[4] = 1024;
        *(_DWORD *)&v96[6] = v69;
        v97 = 1024;
        v98 = v70;
        v99 = 1024;
        v100 = v71;
        _os_log_debug_impl(&dword_190DAF000, v50, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_reshape_to_flatten: %s w=%d h=%d k=%d n=%d seq=%d", buf, 0x2Au);
      }

      v74 = 0;
      Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(&v72, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), (uint64_t)&v74);
      v51 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v3 + 24), v3 + 144);
      v52 = v73;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v51 + 1) + 8), v72, (uint64_t)v73);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v51, v10);
      v53 = *(Espresso::zephyr::value_t ***)(v3 + 96);
      if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v53)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v51, *v53);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v51, (Espresso::zephyr::node_t *)v3);
      v54 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v54, v55);
        v56 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v93 = 1024;
          v94 = 973;
          _os_log_impl(&dword_190DAF000, v56, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
        }

      }
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v22 = 1;
LABEL_142:
      if (v40)
        goto LABEL_143;
      goto LABEL_144;
    }
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v93 = 1024;
        v94 = 946;
        v95 = 2080;
        *(_QWORD *)v96 = "non_one_col_dim == input_n";
        _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_140;
    }
LABEL_141:
    v22 = 0;
    goto LABEL_142;
  }
  if (v43 <= 1)
    v45 = 1;
  else
    v45 = (v41 - v40) >> 2;
  v46 = -1;
  v47 = v40;
  while (1)
  {
    v49 = *(int *)v47;
    v47 = (Espresso *)((char *)v47 + 4);
    v48 = v49;
    if ((_DWORD)v49 != 1)
      break;
LABEL_121:
    if (!--v45)
      goto LABEL_124;
  }
  if (v46 == -1)
  {
    v46 = *(&v75 + v48);
    goto LABEL_121;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v18, v19);
    v65 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v92 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v93 = 1024;
      v94 = 941;
      v95 = 2080;
      *(_QWORD *)v96 = "non_one_col_dim == -1";
      _os_log_impl(&dword_190DAF000, v65, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v22 = 0;
LABEL_143:
  operator delete(v40);
LABEL_144:
  if (v36)
    operator delete(v36);
LABEL_146:
  v59 = v88;
  if (v88)
  {
    v60 = (unint64_t *)&v88->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_151:
  v62 = v90;
  if (v90)
  {
    v63 = (unint64_t *)&v90->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  return v22;
}

void sub_191816FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  void *v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (v23)
    operator delete(v23);
  if (v22)
    operator delete(v22);
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a22)
  {
    v27 = (unint64_t *)&a22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes37strength_reduction_reshape_to_flattenERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_191817194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB09A8;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19181728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB09A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB09A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v3;
  Espresso *v4;
  const char *v5;
  Espresso *matched;
  const char *v7;
  Espresso *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD *v16;
  Espresso *v17;
  const char *v18;
  uint64_t *v20;
  Espresso::zephyr::value_t **v21;
  uint64_t v22;
  Espresso::zephyr::value_t *v23;
  uint64_t v24;
  const char *v25;
  Espresso::zephyr::value_t **v26;
  _QWORD *v27;
  const char *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  Espresso *v34;
  const char *v35;
  uint64_t *v36;
  unint64_t v37;
  const char *v38;
  _QWORD *v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  Espresso *v48;
  const char *v49;
  Espresso *v50;
  const char *v51;
  unint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  Espresso *v55;
  const char *v56;
  Espresso *v57;
  const char *v58;
  uint64_t *v59;
  unint64_t v60;
  Espresso *v61;
  const char *v62;
  float *v63;
  const char *v64;
  Espresso::zephyr::value_t **v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  float *v72;
  const char *v73;
  uint64_t v74;
  Espresso *v75;
  const char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  const char *v81;
  Espresso *v82;
  const char *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  Espresso *v91;
  const char *v92;
  Espresso::zephyr::value_t **v93;
  Espresso::zephyr::value_t **v94;
  uint64_t v99;
  size_t v100;
  _BYTE *v101;
  const void *v102;
  char *v103;
  std::__shared_weak_count *v104;
  Espresso *inserted;
  const char *v106;
  uint64_t **v107;
  NSObject *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  Espresso::zephyr::value_t *v111;
  Espresso::zephyr::value_t *v112;
  Espresso::zephyr::value_t *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _BYTE __p[12];
  __int16 v117;
  int v118;
  char v119;
  _BYTE buf[12];
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint8_t v124[4];
  const char *v125;
  __int16 v126;
  _DWORD v127[8];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso::zephyr::node_t *)*a2;
  v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v124 = 136315650;
        v125 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v126 = 1024;
        v127[0] = 989;
        LOWORD(v127[1]) = 2080;
        *(_QWORD *)((char *)&v127[1] + 2) = "input_i_split_k != nullptr";
        _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v124, 0x1Cu);
      }
      goto LABEL_38;
    }
    return 0;
  }
  if (*((_QWORD *)v3 + 13) - *((_QWORD *)v3 + 12) != 24)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v4, v5);
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v124 = 136315650;
        v125 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v126 = 1024;
        v127[0] = 990;
        LOWORD(v127[1]) = 2080;
        *(_QWORD *)((char *)&v127[1] + 2) = "input_i_split->outputs().size() == 3";
        _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v124, 0x1Cu);
      }
LABEL_38:

      return 0;
    }
    return 0;
  }
  *(_QWORD *)buf = v3;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v124, (unint64_t *)buf, 1);
  matched = (Espresso *)operator new(0x18uLL);
  v8 = matched;
  v9 = 0;
  *(_QWORD *)matched = 0;
  *((_QWORD *)matched + 1) = 0;
  *((_QWORD *)matched + 2) = 0;
  do
  {
    v10 = *(_QWORD *)(*((_QWORD *)v3 + 12) + v9);
    v11 = *(uint64_t **)(v10 + 56);
    if (*(_QWORD *)(v10 + 64) - (_QWORD)v11 != 16)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_64;
      Espresso::espresso_os_log_subsystem(matched, v7);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000003E40400;
        v122 = "input_i_split->outputs()[i]->has_one_use()";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_63:

      goto LABEL_64;
    }
    matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*v11, 0);
    if (!matched)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_64;
      Espresso::espresso_os_log_subsystem(0, v7);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000003E80400;
        v122 = "match_simple_eltwise_binop(input_i_split_use->user_node, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    *(_QWORD *)((char *)v8 + v9) = v11;
    v9 += 8;
  }
  while (v9 != 24);
  v12 = 0;
  v13 = 0;
  v14 = 1;
  do
  {
    v15 = v14;
    v16 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(**((_QWORD **)v8 + v13) + 120)
                                 + 8 * (*(_QWORD *)(*((_QWORD *)v8 + v13) + 8) == 0))
                     + 80);
    v17 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>((uint64_t)v16);
    if (!v17)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_64;
      Espresso::espresso_os_log_subsystem(0, v18);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000003F50400;
        v122 = "zephyr::cast_kernel<generic_split_kernel>(other_split)";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    if (v16[13] - v16[12] != 24)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_64;
      Espresso::espresso_os_log_subsystem(v17, v18);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000003F70400;
        v122 = "other_split->outputs().size() == 3";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    if (v12)
    {
      _ZF = v16 == v12;
      v16 = v12;
      if (!_ZF)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v17, v18);
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            v121 = 0x820000003FA0400;
            v122 = "other_split == input_r_split";
            _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_63;
        }
LABEL_64:
        v45 = 0;
        goto LABEL_65;
      }
    }
    v14 = 0;
    v12 = v16;
    v13 = 1;
  }
  while ((v15 & 1) != 0);
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, (unint64_t)v16, (uint64_t)v16);
  v20 = (uint64_t *)*((_QWORD *)v3 + 15);
  if (*((uint64_t **)v3 + 16) == v20)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v21 = (Espresso::zephyr::value_t **)v16[15];
  if ((Espresso::zephyr::value_t **)v16[16] == v21)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v22 = *v20;
  v23 = *v21;
  v24 = *((_QWORD *)*v21 + 10);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v24))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_64;
    Espresso::espresso_os_log_subsystem(0, v25);
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x820000004060400;
      v122 = "zephyr::cast_kernel<generic_inner_product_kernel>(input_r_ip_node)";
      _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_63;
  }
  v26 = *(Espresso::zephyr::value_t ***)(v24 + 120);
  if (*(Espresso::zephyr::value_t ***)(v24 + 128) == v26)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v113 = *v26;
  v27 = operator new(0x10uLL);
  v29 = v27;
  v30 = 0;
  *v27 = 0;
  v27[1] = 0;
  v31 = 1;
  do
  {
    v32 = v31;
    v33 = **((_QWORD **)v8 + v30);
    if (*(_QWORD *)(v33 + 104) - *(_QWORD *)(v33 + 96) != 8)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_83;
      Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
      v43 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        goto LABEL_82;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x8200000040C0400;
      v122 = "elementwise_node->outputs().size() == 1";
      goto LABEL_73;
    }
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, **((_QWORD **)v8 + v30), **((_QWORD **)v8 + v30));
    v36 = *(uint64_t **)(**(_QWORD **)(v33 + 96) + 56);
    if (*(_QWORD *)(**(_QWORD **)(v33 + 96) + 64) - (_QWORD)v36 != 16)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_83;
      Espresso::espresso_os_log_subsystem(v34, v35);
      v43 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        goto LABEL_82;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x820000004100400;
      v122 = "add_out->has_one_use()";
LABEL_73:
      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
LABEL_82:

      goto LABEL_83;
    }
    v37 = *v36;
    if (!Espresso::zephyr::match_simple_activation(*v36, 3))
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_83;
      Espresso::espresso_os_log_subsystem(0, v38);
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000004130400;
        v122 = "match_simple_activation(add_out_sigmoid, ACTIVATION_SIGMOID)";
        _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_82;
    }
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v37, v37);
    v39 = *(_QWORD **)(v37 + 96);
    if (*(_QWORD **)(v37 + 104) == v39)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v31 = 0;
    v29[v30] = *v39;
    v30 = 1;
  }
  while ((v32 & 1) != 0);
  v40 = *(unint64_t **)(*(_QWORD *)(v16[12] + 16) + 56);
  if (*(_QWORD *)(*(_QWORD *)(v16[12] + 16) + 64) - (_QWORD)v40 != 16
    || (v41 = *(_QWORD **)(*v29 + 56), *(_QWORD *)(*v29 + 64) - (_QWORD)v41 != 16))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_83;
    Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x8200000041C0400;
      v122 = "input_r_e->has_one_use() && r_gate->has_one_use()";
      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
  v42 = *v40;
  if (*v40 != *v41)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_83;
    Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x8200000041D0400;
      v122 = "input_r_e->uses()[0].user_node == r_gate->uses()[0].user_node";
      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
  v48 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v42, 1u);
  if (v48)
  {
    if (*(_QWORD *)(v42 + 104) - *(_QWORD *)(v42 + 96) == 8)
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v42, v42);
      v52 = *(unint64_t **)(**(_QWORD **)(v42 + 96) + 56);
      if (*(_QWORD *)(**(_QWORD **)(v42 + 96) + 64) - (_QWORD)v52 == 16
        && (v53 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v3 + 12) + 16) + 56),
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 12) + 16) + 64) - (_QWORD)v53 == 16))
      {
        v54 = *v52;
        if (*v52 == *v53)
        {
          v55 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v54, 0);
          if (v55)
          {
            if (*(_QWORD *)(v54 + 104) - *(_QWORD *)(v54 + 96) == 8)
            {
              std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v54, v54);
              v59 = *(uint64_t **)(**(_QWORD **)(v54 + 96) + 56);
              if (*(_QWORD *)(**(_QWORD **)(v54 + 96) + 64) - (_QWORD)v59 == 16)
              {
                v60 = *v59;
                v61 = (Espresso *)Espresso::zephyr::match_simple_activation(*v59, 1);
                if (v61)
                {
                  if (*(_QWORD *)(v60 + 104) - *(_QWORD *)(v60 + 96) == 8)
                  {
                    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v60, v60);
                    v65 = *(Espresso::zephyr::value_t ***)(v60 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v60 + 104) == v65)
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    v66 = v29[1];
                    v67 = *(uint64_t **)(v66 + 56);
                    v68 = *(uint64_t **)(v66 + 64);
                    if ((char *)v68 - (char *)v67 == 32)
                    {
                      if (v67 != v68)
                      {
                        v69 = 0;
                        v70 = 0;
                        v111 = *v65;
                        do
                        {
                          v71 = Espresso::zephyr::match_simple_eltwise_unaryop(*v67, 3);
                          if (v71)
                          {
                            v72 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v71 + 320))(v71);
                            if (v72[2] != -1.0)
                            {
                              if (!Espresso::zephyr::match_verbose)
                                goto LABEL_83;
                              Espresso::espresso_os_log_subsystem((Espresso *)v72, v73);
                              v43 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                v121 = 0x8200000044A0400;
                                v122 = "u_gate_use_kernel->get_params().alpha == -1";
                                _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                              goto LABEL_82;
                            }
                            std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, *v67, *v67);
                            v74 = *(_QWORD *)(*v67 + 96);
                            if (*(_QWORD *)(*v67 + 104) == v74)
                              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                            v70 = **(_QWORD **)(*(_QWORD *)v74 + 56);
                            v63 = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v70, 2);
                            if (!v63
                              || (v63 = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)v63 + 320))(v63),
                                  v63[2] != 1.0))
                            {
                              if (!Espresso::zephyr::match_verbose)
                                goto LABEL_83;
                              Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                              v43 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                v121 = 0x820000004530400;
                                v122 = "neg_u_gate_plus_one_k && neg_u_gate_plus_one_k->get_params().alpha == 1";
                                _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                              goto LABEL_82;
                            }
                          }
                          else
                          {
                            v63 = (float *)Espresso::zephyr::match_simple_eltwise_binop(*v67, 1u);
                            if (v63)
                            {
                              v69 = *v67;
                              if (*(Espresso::zephyr::value_t **)(*(_QWORD *)(*v67 + 120) + 8 * (v67[1] == 0)) != v113)
                              {
                                if (!Espresso::zephyr::match_verbose)
                                  goto LABEL_83;
                                Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                                v43 = objc_claimAutoreleasedReturnValue();
                                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/"
                                                       "Zephyr/passes/passes_strength_reduction.mm";
                                  v121 = 0x8200000045C0400;
                                  v122 = "input_h_mul_u_gate_node->inputs()[u_gate_use.index == 0 ? 1 : 0] == input_h";
                                  _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                }
                                goto LABEL_82;
                              }
                            }
                          }
                          v67 += 2;
                        }
                        while (v67 != v68);
                        if (!v69 || !v70)
                          goto LABEL_158;
                        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v69, v69);
                        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v70, v70);
                        v77 = *(uint64_t **)(v70 + 96);
                        if (*(uint64_t **)(v70 + 104) == v77)
                          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                        v78 = *v77;
                        v79 = *(uint64_t **)(*v77 + 56);
                        if (*(_QWORD *)(v78 + 64) - (_QWORD)v79 == 16)
                        {
                          v80 = (_QWORD *)*v79;
                          if (Espresso::zephyr::match_simple_eltwise_binop(*v79, 1u))
                          {
                            std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, (unint64_t)v80, (uint64_t)v80);
                            if (*(Espresso::zephyr::value_t **)(v80[15]
                                                               + 8 * (*(_QWORD *)(*(_QWORD *)(v78 + 56) + 8) == 0)) == v111)
                            {
                              v84 = *(_QWORD **)(v69 + 96);
                              if (*(_QWORD **)(v69 + 104) == v84)
                                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                              v85 = (_QWORD *)v80[12];
                              if ((_QWORD *)v80[13] == v85)
                                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                              v87 = *v84 + 56;
                              v86 = *(unint64_t **)v87;
                              if (*(_QWORD *)(v87 + 8) - *(_QWORD *)v87 == 16
                                && (v89 = *v85 + 56,
                                    v88 = *(_QWORD **)v89,
                                    *(_QWORD *)(v89 + 8) - *(_QWORD *)v89 == 16))
                              {
                                v90 = *v86;
                                if (*v86 == *v88)
                                {
                                  v91 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v90, 0);
                                  if (v91)
                                  {
                                    v93 = *(Espresso::zephyr::value_t ***)(v90 + 96);
                                    v94 = *(Espresso::zephyr::value_t ***)(v90 + 104);
                                    if ((char *)v94 - (char *)v93 == 8)
                                    {
                                      if (v94 == v93)
                                        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                                      v112 = *v93;
                                      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v124, v90, v90);
                                      __asm { FMOV            V0.2S, #1.0 }
                                      *(_QWORD *)&buf[4] = _D0;
                                      v121 = 0;
                                      v123 = 0;
                                      v122 = 0;
                                      *(_DWORD *)buf = 15;
                                      Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v114, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
                                      v99 = *((_QWORD *)v3 + 3);
                                      if (*(char *)(v22 + 55) >= 0)
                                        v100 = *(unsigned __int8 *)(v22 + 55);
                                      else
                                        v100 = *(_QWORD *)(v22 + 40);
                                      std::string::basic_string[abi:ne180100]((uint64_t)__p, v100 + 15);
                                      if (v119 >= 0)
                                        v101 = __p;
                                      else
                                        v101 = *(_BYTE **)__p;
                                      if (v100)
                                      {
                                        if (*(char *)(v22 + 55) >= 0)
                                          v102 = (const void *)(v22 + 32);
                                        else
                                          v102 = *(const void **)(v22 + 32);
                                        memmove(v101, v102, v100);
                                      }
                                      strcpy(&v101[v100], "_gru_activation");
                                      v103 = Espresso::zephyr::function_t::new_detached_node(v99, (uint64_t)__p);
                                      if (v119 < 0)
                                        operator delete(*(void **)__p);
                                      v104 = v115;
                                      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v103 + 1) + 8), v114, (uint64_t)v115);
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, v113);
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, v23);
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, (Espresso::zephyr::value_t *)v22);
                                      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v103, v112);
                                      inserted = (Espresso *)Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v103, v3);
                                      v107 = *(uint64_t ***)((char *)v127 + 2);
                                      if (*(_QWORD *)((char *)v127 + 2))
                                      {
                                        do
                                        {
                                          inserted = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v107[2]);
                                          v107 = (uint64_t **)*v107;
                                        }
                                        while (v107);
                                      }
                                      if (Espresso::zephyr::match_verbose)
                                      {
                                        Espresso::espresso_os_log_subsystem(inserted, v106);
                                        v108 = objc_claimAutoreleasedReturnValue();
                                        if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
                                        {
                                          *(_DWORD *)__p = 136315394;
                                          *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espre"
                                                               "ssoCore/Zephyr/passes/passes_strength_reduction.mm";
                                          v117 = 1024;
                                          v118 = 1177;
                                          _os_log_impl(&dword_190DAF000, v108, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", __p, 0x12u);
                                        }

                                      }
                                      if (v104)
                                      {
                                        p_shared_owners = (unint64_t *)&v104->__shared_owners_;
                                        do
                                          v110 = __ldaxr(p_shared_owners);
                                        while (__stlxr(v110 - 1, p_shared_owners));
                                        if (!v110)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                                          std::__shared_weak_count::__release_weak(v104);
                                        }
                                      }
                                      v45 = 1;
                                      goto LABEL_84;
                                    }
                                    if (!Espresso::zephyr::match_verbose)
                                      goto LABEL_83;
                                    Espresso::espresso_os_log_subsystem(v91, v92);
                                    v43 = objc_claimAutoreleasedReturnValue();
                                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                    {
                                      *(_DWORD *)buf = 136315650;
                                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoC"
                                                           "ore/Zephyr/passes/passes_strength_reduction.mm";
                                      v121 = 0x8200000047E0400;
                                      v122 = "output_new_hidden_node->outputs().size() == 1";
                                      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                    }
                                  }
                                  else
                                  {
                                    if (!Espresso::zephyr::match_verbose)
                                      goto LABEL_83;
                                    Espresso::espresso_os_log_subsystem(0, v92);
                                    v43 = objc_claimAutoreleasedReturnValue();
                                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                    {
                                      *(_DWORD *)buf = 136315650;
                                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoC"
                                                           "ore/Zephyr/passes/passes_strength_reduction.mm";
                                      v121 = 0x8200000047D0400;
                                      v122 = "match_simple_eltwise_binop(output_new_hidden_node, ELEMENTWISE_OPERATION_ADD)";
                                      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                    }
                                  }
                                }
                                else
                                {
                                  if (!Espresso::zephyr::match_verbose)
                                    goto LABEL_83;
                                  Espresso::espresso_os_log_subsystem(v82, v83);
                                  v43 = objc_claimAutoreleasedReturnValue();
                                  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                  {
                                    *(_DWORD *)buf = 136315650;
                                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCor"
                                                         "e/Zephyr/passes/passes_strength_reduction.mm";
                                    v121 = 0x820000004790400;
                                    v122 = "input_h_mul_u_gate->uses()[0].user_node == neg_u_gate_plus_one_plus_new_gate-"
                                           ">uses()[0].user_node";
                                    _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                  }
                                }
                              }
                              else
                              {
                                if (!Espresso::zephyr::match_verbose)
                                  goto LABEL_83;
                                Espresso::espresso_os_log_subsystem(v82, v83);
                                v43 = objc_claimAutoreleasedReturnValue();
                                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/"
                                                       "Zephyr/passes/passes_strength_reduction.mm";
                                  v121 = 0x820000004760400;
                                  v122 = "input_h_mul_u_gate->has_one_use() && neg_u_gate_plus_one_plus_new_gate->has_one_use()";
                                  _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                }
                              }
                            }
                            else
                            {
                              if (!Espresso::zephyr::match_verbose)
                                goto LABEL_83;
                              Espresso::espresso_os_log_subsystem(v82, v83);
                              v43 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                v121 = 0x820000004700400;
                                v122 = "neg_u_gate_plus_one_plus_new_gate_node ->inputs()[neg_u_gate_plus_one->uses()[0]."
                                       "index == 0 ? 1 : 0] == new_gate";
                                _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                            }
                          }
                          else
                          {
                            if (!Espresso::zephyr::match_verbose)
                              goto LABEL_83;
                            Espresso::espresso_os_log_subsystem(0, v81);
                            v43 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zeph"
                                                   "yr/passes/passes_strength_reduction.mm";
                              v121 = 0x8200000046B0400;
                              v122 = "match_simple_eltwise_binop(neg_u_gate_plus_one_plus_new_gate_node, ELEMENTWISE_OPERATION_MUL)";
                              _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                            }
                          }
                        }
                        else
                        {
                          if (!Espresso::zephyr::match_verbose)
                            goto LABEL_83;
                          Espresso::espresso_os_log_subsystem(v75, v76);
                          v43 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr"
                                                 "/passes/passes_strength_reduction.mm";
                            v121 = 0x820000004660400;
                            v122 = "neg_u_gate_plus_one->has_one_use()";
                            _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                          }
                        }
                        goto LABEL_82;
                      }
LABEL_158:
                      if (Espresso::zephyr::match_verbose)
                      {
                        Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                        v43 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/p"
                                               "asses/passes_strength_reduction.mm";
                          v121 = 0x820000004600400;
                          v122 = "input_h_mul_u_gate_node && neg_u_gate_plus_one_node";
                          _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                        }
                        goto LABEL_82;
                      }
                    }
                    else if (Espresso::zephyr::match_verbose)
                    {
                      Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                      v43 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/pas"
                                             "ses/passes_strength_reduction.mm";
                        v121 = 0x820000004450400;
                        v122 = "u_gate_uses.size() == 2";
                        _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                      }
                      goto LABEL_82;
                    }
                  }
                  else if (Espresso::zephyr::match_verbose)
                  {
                    Espresso::espresso_os_log_subsystem(v61, v62);
                    v43 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passe"
                                           "s/passes_strength_reduction.mm";
                      v121 = 0x8200000043A0400;
                      v122 = "new_gate_node->outputs().size() == 1";
                      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                    }
                    goto LABEL_82;
                  }
                }
                else if (Espresso::zephyr::match_verbose)
                {
                  Espresso::espresso_os_log_subsystem(0, v62);
                  v43 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    v121 = 0x820000004390400;
                    v122 = "match_simple_activation(new_gate_node, ACTIVATION_TANH)";
                    _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_82;
                }
              }
              else if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(v57, v58);
                v43 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
                  v121 = 0x820000004360400;
                  v122 = "input_r_e_mul_r_gate_plus_i_e->has_one_use()";
                  _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
                goto LABEL_82;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v55, v56);
              v43 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                v121 = 0x820000004300400;
                v122 = "input_r_e_mul_r_gate_plus_i_e_node->outputs().size() == 1";
                _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_82;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(0, v56);
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              v121 = 0x8200000042F0400;
              v122 = "match_simple_eltwise_binop(input_r_e_mul_r_gate_plus_i_e_node, ELEMENTWISE_OPERATION_ADD)";
              _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_82;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v50, v51);
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            v121 = 0x8200000042A0400;
            v122 = "input_r_e_mul_r_gate->uses()[0].user_node == input_e->uses()[0].user_node";
            _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_82;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v50, v51);
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v121 = 0x820000004280400;
          v122 = "input_r_e_mul_r_gate->has_one_use() && input_e->has_one_use()";
          _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_82;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v48, v49);
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v121 = 0x820000004220400;
        v122 = "input_r_e_mul_r_gate_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_82;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v49);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v121 = 0x820000004210400;
      v122 = "match_simple_eltwise_binop(input_r_e_mul_r_gate_node, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
LABEL_83:
  v45 = 0;
LABEL_84:
  operator delete(v29);
LABEL_65:
  operator delete(v8);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v124);
  return v45;
}

void sub_191818DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  operator delete(v27);
  operator delete(v26);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes19fuse_gru_activationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void sub_191819004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0C68;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_1918190FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0C68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0C68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  Espresso *v3;
  const char *v4;
  Espresso *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  BOOL v9;
  Espresso *v10;
  const char *v11;
  NSObject *v12;
  uint64_t *v13;
  _QWORD *v14;
  Espresso *v15;
  const char *v16;
  Espresso::zephyr::value_t **v17;
  Espresso::zephyr::value_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  Espresso *v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  Espresso::zephyr::value_t *v52;
  char *v53;
  Espresso *v54;
  const char *v55;
  Espresso::zephyr::value_t **v56;
  Espresso *v57;
  Espresso *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  NSObject *v62;
  _BOOL4 v63;
  Espresso *v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  Espresso *v68;
  const char *v69;
  uint64_t **i;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  Espresso::zephyr::value_t *v98;
  uint64_t v99;
  char *__p;
  unint64_t v101;
  unint64_t v102;
  int *v103;
  Espresso *v104;
  unint64_t v105;
  int *v106;
  std::__shared_weak_count *v107;
  _BYTE v108[16];
  uint64_t **v109;
  char *v110;
  std::__shared_weak_count *v111;
  _BYTE buf[12];
  __int16 v113;
  int v114;
  __int16 v115;
  _BYTE v116[10];
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(*a2);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v4);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1202;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_k != nullptr";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(_QWORD *)(v2 + 128) - *(_QWORD *)(v2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v3, v4);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1203;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_node->inputs().size() == 2";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v3, v4);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1204;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  v5 = v3;
  v6 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v3 + 320))(v3);
  v8 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != 1 && v8 != 33 && v8 != 102)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1208;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_p.operation == ELEMENTWISE_OPERATION_SUBTRACT || elementwise_p.operation == ELEMEN"
                          "TWISE_OPERATION_DIV || elementwise_p.operation == ELEMENTWISE_OPERATION_MUL";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(_DWORD *)(v6 + 4))
    v9 = 0;
  else
    v9 = *(float *)(v6 + 8) == 1.0;
  if (!v9 || *(float *)(v6 + 12) != 0.0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1209;
        v115 = 2080;
        *(_QWORD *)v116 = "is_simple(elementwise_p)";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  v10 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v5 + 320))(v5);
  if (*((_DWORD *)v10 + 5))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1211;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_k->get_params().no_broadcast == false";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_101:

      return 0;
    }
    return 0;
  }
  v13 = *(uint64_t **)(**(_QWORD **)(v2 + 96) + 56);
  if (*(_QWORD *)(**(_QWORD **)(v2 + 96) + 64) - (_QWORD)v13 != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1213;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_node->outputs()[0]->has_one_use()";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  v14 = (_QWORD *)*v13;
  v15 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*v13);
  if (!v15)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v16);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1218;
        v115 = 2080;
        *(_QWORD *)v116 = "zephyr::cast_kernel<generic_transpose_kernel>(top_transpose_node) != nullptr";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (v14[16] - v14[15] != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v15, v16);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1219;
        v115 = 2080;
        *(_QWORD *)v116 = "top_transpose_node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  v17 = (Espresso::zephyr::value_t **)v14[12];
  if (v14[13] - (_QWORD)v17 != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v15, v16);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1220;
        v115 = 2080;
        *(_QWORD *)v116 = "top_transpose_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  v18 = *v17;
  *(_QWORD *)buf = v14;
  v19 = std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v108, (unint64_t *)buf, 1);
  v21 = *(_QWORD *)(v2 + 120);
  v98 = v18;
  v99 = *(_QWORD *)(v2 + 128);
  if (v21 != v99)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v102 = 0;
    while (1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)v21 + 80);
      if ((unint64_t)v23 >= v24)
      {
        v28 = (v23 - v22) >> 3;
        v29 = v28 + 1;
        __p = v22;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v30 = v24 - (_QWORD)v22;
        v31 = (uint64_t)(v24 - (_QWORD)v22) >> 2;
        if (v31 > v29)
          v29 = v31;
        if (v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v29;
        if (v32)
        {
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v32);
          v34 = v25;
        }
        else
        {
          v34 = v25;
          v33 = 0;
        }
        v35 = (char *)(v32 + 8 * v28);
        *(_QWORD *)v35 = v27;
        v36 = v35 + 8;
        if (v23 == __p)
        {
          v37 = __p;
        }
        else
        {
          v37 = __p;
          do
          {
            v38 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *((_QWORD *)v35 - 1) = v38;
            v35 -= 8;
          }
          while (v23 != __p);
        }
        v101 = v32 + 8 * v33;
        if (v37)
          operator delete(v37);
        v39 = v35;
        v23 = v36;
        v25 = v34;
        v22 = v39;
      }
      else
      {
        v101 = v24;
        *(_QWORD *)v23 = v27;
        v23 += 8;
      }
      v40 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*((_QWORD *)v23 - 1));
      if (!v40)
      {
        if (!Espresso::zephyr::match_verbose)
          goto LABEL_152;
        Espresso::espresso_os_log_subsystem(0, v41);
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v113 = 1024;
          v114 = 1231;
          v115 = 2080;
          *(_QWORD *)v116 = "zephyr::cast_kernel<generic_transpose_kernel>( bottom_tranpose_nodes.back()) != nullptr";
          _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_151;
      }
      v42 = *((_QWORD *)v23 - 1);
      if (*(_QWORD *)(v42 + 128) - *(_QWORD *)(v42 + 120) != 8)
      {
        if (!Espresso::zephyr::match_verbose)
          goto LABEL_152;
        Espresso::espresso_os_log_subsystem(v40, (const char *)v42);
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v113 = 1024;
          v114 = 1232;
          v115 = 2080;
          *(_QWORD *)v116 = "bottom_tranpose_nodes.back()->inputs().size() == 1";
          _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_151;
      }
      v43 = *(_QWORD *)(v42 + 96);
      if (*(_QWORD *)(v42 + 104) - v43 != 8)
      {
        if (!Espresso::zephyr::match_verbose)
          goto LABEL_152;
        Espresso::espresso_os_log_subsystem(v40, (const char *)v42);
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v113 = 1024;
          v114 = 1233;
          v115 = 2080;
          *(_QWORD *)v116 = "bottom_tranpose_nodes.back()->outputs().size() == 1";
          _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_151;
      }
      if (*(_QWORD *)(*(_QWORD *)v43 + 64) - *(_QWORD *)(*(_QWORD *)v43 + 56) != 16)
        break;
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v108, v42, *((_QWORD *)v23 - 1));
      v44 = *(_QWORD **)(*((_QWORD *)v23 - 1) + 120);
      if ((unint64_t)v26 >= v102)
      {
        v46 = (v26 - v25) >> 3;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v102 - (_QWORD)v25) >> 2 > v47)
          v47 = (uint64_t)(v102 - (_QWORD)v25) >> 2;
        if (v102 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v47;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
        else
          v20 = 0;
        v48 = (char *)(v19 + 8 * v46);
        *(_QWORD *)v48 = *v44;
        v45 = v48 + 8;
        while (v26 != v25)
        {
          v49 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v48 - 1) = v49;
          v48 -= 8;
        }
        v102 = v19 + 8 * (_QWORD)v20;
        if (v25)
          operator delete(v25);
        v25 = v48;
      }
      else
      {
        *(_QWORD *)v26 = *v44;
        v45 = v26 + 8;
      }
      v24 = v101;
      v21 += 8;
      v26 = v45;
      if (v21 == v99)
        goto LABEL_105;
    }
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_152;
    Espresso::espresso_os_log_subsystem(v40, (const char *)v42);
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v113 = 1024;
      v114 = 1234;
      v115 = 2080;
      *(_QWORD *)v116 = "bottom_tranpose_nodes.back()->outputs()[0]->has_one_use()";
      _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_151;
  }
  v22 = 0;
  v25 = 0;
  v45 = 0;
  v23 = 0;
LABEL_105:
  if (v23 - v22 == 16)
  {
    v52 = v98;
    v53 = v25;
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v106, v98);
    if (!v106)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v54, v55);
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v113 = 1024;
          v114 = 1243;
          v115 = 2080;
          *(_QWORD *)v116 = "top_shape_ptr";
          _os_log_impl(&dword_190DAF000, v73, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      v50 = 0;
      goto LABEL_178;
    }
    v103 = 0;
    v104 = 0;
    v105 = 0;
    if (v25 == v45)
    {
LABEL_119:
      Espresso::espresso_os_log_subsystem(v54, v55);
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        v82 = (_QWORD *)(v2 + 144);
        if (*(char *)(v2 + 167) < 0)
          v82 = (_QWORD *)*v82;
        v83 = *v103;
        v84 = v103[1];
        v85 = v103[2];
        v86 = v103[3];
        v87 = v103[4];
        v88 = v103[16];
        v89 = v103[17];
        v91 = v103[18];
        v90 = v103[19];
        v92 = v103[20];
        v93 = *v106;
        v94 = v106[1];
        v95 = v106[2];
        v96 = v106[3];
        v97 = v106[4];
        *(_DWORD *)buf = 136318978;
        *(_QWORD *)&buf[4] = v82;
        v113 = 1024;
        v114 = v83;
        v115 = 1024;
        *(_DWORD *)v116 = v84;
        *(_WORD *)&v116[4] = 1024;
        *(_DWORD *)&v116[6] = v85;
        v117 = 1024;
        v118 = v86;
        v119 = 1024;
        v120 = v87;
        v121 = 1024;
        v122 = v88;
        v123 = 1024;
        v124 = v89;
        v125 = 1024;
        v126 = v91;
        v127 = 1024;
        v128 = v90;
        v129 = 1024;
        v130 = v92;
        v131 = 1024;
        v132 = v93;
        v133 = 1024;
        v134 = v94;
        v135 = 1024;
        v136 = v95;
        v137 = 1024;
        v138 = v96;
        v139 = 1024;
        v140 = v97;
        _os_log_debug_impl(&dword_190DAF000, v62, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_broadcastable_transposes: %s trying to broadcast [%d, %d, %d, %d, %d] [%d, %d, %d, %d, %d] -> [%d, %d, %d, %d, %d]", buf, 0x66u);
        v52 = v98;
      }

      (*(void (**)(_BYTE *__return_ptr, Espresso *, int **))(*(_QWORD *)v5 + 64))(buf, v5, &v103);
      v63 = Espresso::layer_shape::operator==(*(uint64_t *)buf, (uint64_t)v106);
      v110 = buf;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      if (v63)
      {
        if (v53 != v45)
        {
          v66 = 0;
          if ((unint64_t)((v45 - v53) >> 3) <= 1)
            v67 = 1;
          else
            v67 = (v45 - v53) >> 3;
          do
          {
            Espresso::zephyr::node_t::replace_input_at((Espresso::zephyr::node_t *)v2, v66, *(Espresso::zephyr::value_t **)&v53[8 * v66]);
            ++v66;
          }
          while (v67 != v66);
        }
        v68 = (Espresso *)Espresso::zephyr::node_t::replace_output_at(v2, 0, v52);
        for (i = v109; i; i = (uint64_t **)*i)
          v68 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v68, v69);
          v71 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            v113 = 1024;
            v114 = 1292;
            _os_log_impl(&dword_190DAF000, v71, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
          }

          v25 = v53;
          v50 = 1;
        }
        else
        {
          v50 = 1;
          v25 = v53;
        }
        goto LABEL_177;
      }
      if (!Espresso::zephyr::match_verbose)
      {
        v50 = 0;
        v25 = v53;
        goto LABEL_177;
      }
      Espresso::espresso_os_log_subsystem(v64, v65);
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        v113 = 1024;
        v114 = 1276;
        v115 = 2080;
        *(_QWORD *)v116 = "elementwise_k->top_shapes_for_bottom_shapes( bottom_shapes)[0] == *top_shape_ptr";
        _os_log_impl(&dword_190DAF000, v74, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

      v25 = v53;
    }
    else
    {
      v56 = (Espresso::zephyr::value_t **)v25;
      while (1)
      {
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v110, *v56);
        if (!v110)
          break;
        v58 = v104;
        if ((unint64_t)v104 >= v105)
        {
          v54 = (Espresso *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v103, (__int128 *)v110);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v103, (__int128 *)v110);
          v54 = (Espresso *)((char *)v58 + 64);
        }
        v25 = v53;
        v104 = v54;
        v59 = v111;
        if (v111)
        {
          p_shared_owners = (unint64_t *)&v111->__shared_owners_;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (++v56 == (Espresso::zephyr::value_t **)v45)
          goto LABEL_119;
      }
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v57, 0);
        v75 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          v113 = 1024;
          v114 = 1248;
          v115 = 2080;
          *(_QWORD *)v116 = "bottom_shape_ptr";
          _os_log_impl(&dword_190DAF000, v75, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

        v25 = v53;
      }
      v76 = v111;
      if (v111)
      {
        v77 = (unint64_t *)&v111->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        v25 = v53;
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    v50 = 0;
LABEL_177:
    *(_QWORD *)buf = &v103;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_178:
    v79 = v107;
    if (v107)
    {
      v80 = (unint64_t *)&v107->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    goto LABEL_153;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v19, v20);
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v113 = 1024;
      v114 = 1240;
      v115 = 2080;
      *(_QWORD *)v116 = "bottom_tranpose_nodes.size() == 2";
      _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_151:

  }
LABEL_152:
  v50 = 0;
LABEL_153:
  if (v25)
    operator delete(v25);
  if (v22)
    operator delete(v22);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v108);
  return v50;
}

void sub_19181A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t buf,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29)
{
  void *v29;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  a29.__vftable = (std::runtime_error_vtbl *)&a15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  v31 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v29)
    operator delete(v29);
  if (__p)
    operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes29fuse_broadcastable_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

Espresso::espresso_error_base *Espresso::espresso_error_base::espresso_error_base(Espresso::espresso_error_base *this, const Espresso::espresso_error_base *a2)
{
  std::runtime_error *v4;
  std::runtime_error v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)this, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_1E2D847C8;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v5 = (std::runtime_error)*((_OWORD *)a2 + 1);
    v4[2].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)a2 + 4);
    v4[1] = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v6;
  }
  v7 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_19181A5D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void sub_19181A688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB1138;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19181A780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1138;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso *a1, const char *a2)
{
  Espresso::zephyr::node_t *v2;
  uint64_t v3;
  Espresso *v4;
  Espresso *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Espresso::zephyr::value_t **v11;
  Espresso *v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  Espresso::zephyr::value_t **v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  Espresso *v24;
  const char *v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  _DWORD *v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  std::__shared_weak_count *v47;
  Espresso::zephyr::value_t **v48;
  Espresso::zephyr::value_t **v49;
  Espresso *v50;
  const char *v51;
  NSObject *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint8_t v57[24];
  uint8_t v58[4];
  const char *v59;
  __int16 v60;
  int v61;
  _BYTE buf[20];
  const char *v63;
  _BYTE v64[32];
  uint64_t v65;
  void *__p;
  void *v67;
  uint64_t v68;
  _DWORD v69[8];
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v69[0] = 136315650;
        *(_QWORD *)&v69[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v69[3]) = 1024;
        *(_DWORD *)((char *)&v69[3] + 2) = 1306;
        HIWORD(v69[4]) = 2080;
        *(_QWORD *)&v69[5] = "general_slice_node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v69, 0x1Cu);
      }
      goto LABEL_64;
    }
    return 0;
  }
  if (*((_QWORD *)v2 + 13) - *((_QWORD *)v2 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v69[0] = 136315650;
        *(_QWORD *)&v69[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v69[3]) = 1024;
        *(_DWORD *)((char *)&v69[3] + 2) = 1307;
        HIWORD(v69[4]) = 2080;
        *(_QWORD *)&v69[5] = "general_slice_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v69, 0x1Cu);
      }
      goto LABEL_64;
    }
    return 0;
  }
  v3 = *((_QWORD *)v2 + 1);
  if (!v3
    || (v4 = a1, (a1 = *(Espresso **)(v3 + 8)) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v69[0] = 136315650;
        *(_QWORD *)&v69[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v69[3]) = 1024;
        *(_DWORD *)((char *)&v69[3] + 2) = 1311;
        HIWORD(v69[4]) = 2080;
        *(_QWORD *)&v69[5] = "general_slice_kernel";
        _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v69, 0x1Cu);
      }
LABEL_64:

      return 0;
    }
    return 0;
  }
  v5 = a1;
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v10 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v5 + 320))(v5);
  v71 = *(_OWORD *)(v10 + 48);
  v72[0] = *(_OWORD *)(v10 + 64);
  v72[1] = *(_OWORD *)(v10 + 80);
  v73 = *(_DWORD *)(v10 + 96);
  *(_OWORD *)v69 = *(_OWORD *)v10;
  *(_OWORD *)&v69[4] = *(_OWORD *)(v10 + 16);
  v70 = *(_OWORD *)(v10 + 32);
  v11 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
  if (*((Espresso::zephyr::value_t ***)v2 + 16) == v11)
LABEL_126:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)v64, *v11);
  v15 = *(_QWORD *)v64;
  v14 = *(std::__shared_weak_count **)&v64[8];
  if (*(_QWORD *)&v64[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v15)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v12, v13);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v64 = 136315650;
        *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 1314;
        *(_WORD *)&v64[18] = 2080;
        *(_QWORD *)&v64[20] = "need_shape(general_slice_node->input())";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v64, 0x1Cu);
      }

    }
    return 0;
  }
  v18 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
  if (*((Espresso::zephyr::value_t ***)v2 + 16) == v18)
    goto LABEL_126;
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v18);
  v19 = *(_QWORD *)(*(_QWORD *)buf + 32);
  v20 = *(_OWORD *)(*(_QWORD *)buf + 16);
  *(_OWORD *)v64 = **(_OWORD **)buf;
  *(_OWORD *)&v64[16] = v20;
  v65 = v19;
  __p = 0;
  v67 = 0;
  v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(_QWORD *)buf + 40), *(_QWORD *)(*(_QWORD *)buf + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 48) - *(_QWORD *)(*(_QWORD *)buf + 40)) >> 2);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v57, (const Espresso::layer_shape *)v64, 0);
  if (*(_DWORD *)&v64[20] != -1 && *(_DWORD *)&v64[20] < 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v24, v25);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1318;
        *(_WORD *)&buf[18] = 2080;
        v63 = "b_shape.rank() >= 1";
        _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_74;
    }
  }
  else
  {
    if (*(_DWORD *)&v64[16] == 1)
      v27 = 4;
    else
      v27 = 5;
    if (*(_DWORD *)&v64[20] == -1)
      v28 = v27;
    else
      v28 = *(unsigned int *)&v64[20];
    v29 = (v28 - 1);
    if ((int)v28 > 1)
    {
      v30 = v57;
      v31 = v69;
      while (1)
      {
        if (*v31)
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_75;
          Espresso::espresso_os_log_subsystem(v24, v25);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1321;
            *(_WORD *)&buf[18] = 2080;
            v63 = "p0.begins[i] == 0";
            _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_74;
        }
        if (v31[5] != *(_DWORD *)v30)
          break;
        v30 += 4;
        ++v31;
        if (!--v29)
          goto LABEL_40;
      }
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_75;
      Espresso::espresso_os_log_subsystem(v24, v25);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1322;
        *(_WORD *)&buf[18] = 2080;
        v63 = "p0.ends[i] == b_shape_nd[i]";
        _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_74;
    }
LABEL_40:
    if ((int)v28 >= 1)
    {
      v32 = (char *)&v71 + 12;
      v33 = (_DWORD *)v72 + 3;
      v34 = (char *)&v71 + 12;
      while (1)
      {
        if (*v34++)
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_75;
          Espresso::espresso_os_log_subsystem(v24, v25);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1326;
            *(_WORD *)&buf[18] = 2080;
            v63 = "p0.begin_masks[i] == 0";
            _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_74;
        }
        if (!v32[5])
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_75;
          Espresso::espresso_os_log_subsystem(v24, v25);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1327;
            *(_WORD *)&buf[18] = 2080;
            v63 = "p0.end_masks[i] == 1";
            _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_74;
        }
        if (*v33)
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_75;
          Espresso::espresso_os_log_subsystem(v24, v25);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1328;
            *(_WORD *)&buf[18] = 2080;
            v63 = "p0.static_sizes[i] == 0";
            _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_74;
        }
        if (*(v33 - 9) != 1)
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_75;
          Espresso::espresso_os_log_subsystem(v24, v25);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1329;
            *(_WORD *)&buf[18] = 2080;
            v63 = "p0.strides[i] == 1";
            _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_74;
        }
        if (v32[10])
          break;
        ++v33;
        v32 = v34;
        if (!--v28)
          goto LABEL_48;
      }
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_75;
      Espresso::espresso_os_log_subsystem(v24, v25);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1330;
        *(_WORD *)&buf[18] = 2080;
        v63 = "p0.squeeze_masks[i] == 0";
        _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_74;
    }
LABEL_48:
    if (!BYTE11(v72[0]))
    {
      LODWORD(v63) = 1;
      v41 = 3;
      if (*(_DWORD *)&v64[16] != 1)
        v41 = 4;
      v42 = v27 - 1;
      if (*(_DWORD *)&v64[20] == -1)
        v43 = v42;
      else
        v43 = *(int *)&v64[20] - 1;
      if (*(_DWORD *)&v64[20] == -1)
        v44 = v41;
      else
        v44 = *(int *)&v64[20] - 1;
      v45 = v69[v44];
      *(_DWORD *)buf = 0;
      *(_DWORD *)&buf[4] = v45;
      *(_DWORD *)&buf[8] = v69[v43 + 5];
      *(_QWORD *)&buf[12] = 1;
      Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v55, *(_QWORD *)(*((_QWORD *)v2 + 1) + 8), (uint64_t)buf);
      v46 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v2 + 3), (uint64_t)v2 + 144);
      v47 = v56;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v46 + 1) + 8), v55, (uint64_t)v56);
      v48 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
      if (*((Espresso::zephyr::value_t ***)v2 + 16) == v48
        || (Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v46, *v48),
            v49 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 12),
            *((Espresso::zephyr::value_t ***)v2 + 13) == v49))
      {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v46, *v49);
      Espresso::zephyr::ordered_block_t::insert_node_after(**((Espresso::zephyr::ordered_block_t ***)v4 + 1), (Espresso::zephyr::node_t *)v46, v2);
      v50 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v50, v51);
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v58 = 136315394;
          v59 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v60 = 1024;
          v61 = 1353;
          _os_log_impl(&dword_190DAF000, v52, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v58, 0x12u);
        }

      }
      if (v47)
      {
        v53 = (unint64_t *)&v47->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v38 = 1;
      goto LABEL_76;
    }
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v24, v25);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1332;
        *(_WORD *)&buf[18] = 2080;
        v63 = "p0.use_static_sizes == false";
        _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_74:

    }
  }
LABEL_75:
  v38 = 0;
LABEL_76:
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  return v38;
}

void sub_19181B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41strength_reduction_general_slice_to_sliceERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19181B610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19181B6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0F80;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19181B7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0F80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0F80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, Espresso::zephyr::node_t **a2)
{
  Espresso::zephyr::node_t *v2;
  Espresso *matched;
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  Espresso::zephyr::node_t **v7;
  Espresso **v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  Espresso::zephyr::node_t *v13;
  Espresso *v14;
  Espresso **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  Espresso **v20;
  char *v21;
  Espresso *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Espresso::zephyr::node_t **v28;
  Espresso::zephyr::node_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  const void *v66;
  Espresso::zephyr::value_t **v67;
  Espresso::zephyr::value_t **v68;
  Espresso::zephyr::ordered_block_t *v69;
  Espresso::zephyr::node_t *use;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  int v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  const void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  std::__shared_weak_count *v90;
  Espresso::zephyr::value_t **v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  Espresso *v101;
  const char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  NSObject *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  std::__shared_weak_count *v116;
  Espresso::zephyr::node_t *v117;
  Espresso::zephyr::node_t **v119;
  char *v120;
  int v121;
  Espresso::zephyr::value_t *v122;
  char *__p;
  uint64_t v124;
  std::__shared_weak_count *v125;
  void *v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *lpsrc;
  uint64_t v131;
  _BYTE buf[32];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _BYTE v142[24];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  matched = (Espresso *)fuse_blizzard_final_1x1_convolutions_match_conv(*a2);
  if (matched)
  {
    v5 = (uint64_t *)*((_QWORD *)v2 + 15);
    v117 = v2;
    if (*((uint64_t **)v2 + 16) == v5)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v6 = *v5;
    v7 = *(Espresso::zephyr::node_t ***)(v6 + 56);
    v119 = *(Espresso::zephyr::node_t ***)(v6 + 64);
    if (v7 == v119)
    {
      __p = 0;
      v15 = 0;
      v10 = 0;
      v121 = 0;
    }
    else
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v121 = 0;
      do
      {
        v13 = *v7;
        matched = (Espresso *)fuse_blizzard_final_1x1_convolutions_match_conv(*v7);
        v14 = matched;
        if (matched)
        {
          if (v8 >= (Espresso **)v9)
          {
            v16 = ((char *)v8 - __p) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if ((v9 - __p) >> 2 > v17)
              v17 = (v9 - __p) >> 2;
            if ((unint64_t)(v9 - __p) >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              if (v18 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v19 = (char *)operator new(8 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = (Espresso **)&v19[8 * v16];
            *v20 = v14;
            v15 = v20 + 1;
            if (v8 == (Espresso **)__p)
            {
              v21 = __p;
            }
            else
            {
              v21 = __p;
              do
              {
                v22 = *--v8;
                *--v20 = v22;
              }
              while (v8 != (Espresso **)__p);
            }
            v9 = &v19[8 * v18];
            if (v21)
              operator delete(v21);
            __p = (char *)v20;
          }
          else
          {
            *v8 = matched;
            v15 = v8 + 1;
          }
          if ((unint64_t)v11 >= v12)
          {
            v24 = (v11 - v10) >> 3;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v12 - (_QWORD)v10) >> 2 > v25)
              v25 = (uint64_t)(v12 - (_QWORD)v10) >> 2;
            if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
              v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
            else
              v27 = 0;
            v28 = (Espresso::zephyr::node_t **)(v26 + 8 * v24);
            *v28 = v13;
            v23 = (char *)(v28 + 1);
            while (v11 != v10)
            {
              v29 = (Espresso::zephyr::node_t *)*((_QWORD *)v11 - 1);
              v11 -= 8;
              *--v28 = v29;
            }
            v12 = v26 + 8 * v27;
            if (v10)
              operator delete(v10);
            v10 = (char *)v28;
          }
          else
          {
            *(_QWORD *)v11 = v13;
            v23 = v11 + 8;
          }
          matched = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v14 + 384))(v14);
          v121 += *((_DWORD *)matched + 10);
          v8 = v15;
          v11 = v23;
        }
        else
        {
          v15 = v8;
        }
        v7 += 2;
      }
      while (v7 != v119);
    }
    v120 = (char *)v15;
    v32 = (char *)v15 - __p;
    if ((unint64_t)((char *)v15 - __p) <= 0x10)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_77;
      Espresso::espresso_os_log_subsystem(matched, v4);
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1423;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "all_convolutions.size() >= 3";
        _os_log_impl(&dword_190DAF000, v53, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    else
    {
      v33 = *((_QWORD *)v117 + 15);
      if (*((_QWORD *)v117 + 16) == v33)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v34 = v32 >> 3;
      if (v32 >> 3 == (uint64_t)(*(_QWORD *)(*(_QWORD *)v33 + 64) - *(_QWORD *)(*(_QWORD *)v33 + 56)) >> 4)
      {
        v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__p + 384))(*(_QWORD *)__p);
        v36 = *(_OWORD *)v35;
        v37 = *(_OWORD *)(v35 + 32);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v35 + 16);
        v133 = v37;
        *(_OWORD *)buf = v36;
        v38 = *(_OWORD *)(v35 + 48);
        v39 = *(_OWORD *)(v35 + 64);
        v40 = *(_OWORD *)(v35 + 96);
        v136 = *(_OWORD *)(v35 + 80);
        v137 = v40;
        v134 = v38;
        v135 = v39;
        v41 = *(_OWORD *)(v35 + 112);
        v42 = *(_OWORD *)(v35 + 128);
        v43 = *(_OWORD *)(v35 + 144);
        v141 = *(_QWORD *)(v35 + 160);
        v139 = v42;
        v140 = v43;
        v138 = v41;
        DWORD2(v133) = v121;
        v44 = *(_QWORD *)(*((_QWORD *)v117 + 1) + 8);
        Espresso::abstract_engine_factory::shared(&v128);
        v45 = v128;
        std::string::basic_string[abi:ne180100]<0>(v142, "convolution");
        LODWORD(v126) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v44 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v44 + 8) + 8));
        LODWORD(v124) = 0;
        Espresso::abstract_engine_factory::make_kernel_priv(v45, v44 + 8, (uint64_t)v142, (uint64_t)buf, (int *)&v126);
        if ((v142[23] & 0x80000000) != 0)
          operator delete(*(void **)v142);
        v46 = v129;
        if (v129)
        {
          p_shared_owners = (unint64_t *)&v129->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (lpsrc)
        {
          if (v49)
          {
            v50 = v131;
            if (v131)
            {
              v51 = (unint64_t *)(v131 + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
LABEL_84:
            v55 = (std::__shared_weak_count *)v131;
            if (v131)
            {
              v56 = (unint64_t *)(v131 + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v116 = (std::__shared_weak_count *)v50;
            v58 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v117 + 3), (uint64_t)v117 + 144);
            v59 = (uint64_t *)*((_QWORD *)v117 + 12);
            if (*((uint64_t **)v117 + 13) == v59)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            v60 = v58;
            v61 = *((_QWORD *)v117 + 3);
            v62 = *v59;
            v63 = *(unsigned __int8 *)(*v59 + 55);
            if ((v63 & 0x80u) == 0)
              v64 = v63;
            else
              v64 = *(_QWORD *)(v62 + 40);
            v65 = v142;
            std::string::basic_string[abi:ne180100]((uint64_t)v142, v64 + 8);
            if (v142[23] < 0)
              v65 = *(_BYTE **)v142;
            if (v64)
            {
              if (*(char *)(v62 + 55) >= 0)
                v66 = (const void *)(v62 + 32);
              else
                v66 = *(const void **)(v62 + 32);
              memmove(v65, v66, v64);
            }
            strcpy(&v65[v64], "__concat");
            v122 = (Espresso::zephyr::value_t *)Espresso::zephyr::function_t::new_value(v61, (uint64_t)v142);
            if ((v142[23] & 0x80000000) != 0)
              operator delete(*(void **)v142);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v60 + 1) + 8), (uint64_t)v49, v50);
            v67 = (Espresso::zephyr::value_t **)*((_QWORD *)v117 + 15);
            if (*((Espresso::zephyr::value_t ***)v117 + 16) == v67)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v60, *v67);
            Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v60, v122);
            v68 = (Espresso::zephyr::value_t **)*((_QWORD *)v117 + 15);
            if (*((Espresso::zephyr::value_t ***)v117 + 16) == v68)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            v69 = **(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
            use = (Espresso::zephyr::node_t *)Espresso::zephyr::ordered_block_t::first_use(v69, *v68);
            Espresso::zephyr::ordered_block_t::insert_node_before(v69, (Espresso::zephyr::node_t *)v60, use);
            v115 = v49;
            v71 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)__p + 384))(*(_QWORD *)__p) + 44);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&lpsrc, 1, 1, SHIDWORD(v133), SDWORD2(v133));
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v128, SDWORD2(v133), 1, 1, 1);
            if (v120 != __p)
            {
              v72 = 0;
              v73 = 0;
              if (v34 <= 1)
                v74 = 1;
              else
                v74 = v34;
              do
              {
                v75 = *(_QWORD *)&__p[8 * v72];
                v76 = *((_QWORD *)lpsrc + 3);
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v75 + 456))(v142, v75);
                v77 = *(const void **)(*(_QWORD *)v142 + 24);
                v78 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 40);
                v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75);
                memcpy((void *)(v76 + 4 * v73 * v71), v77, 4 * *(_DWORD *)(v79 + 44) * v78);
                v80 = *(std::__shared_weak_count **)&v142[8];
                if (*(_QWORD *)&v142[8])
                {
                  v81 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
                  do
                    v82 = __ldaxr(v81);
                  while (__stlxr(v82 - 1, v81));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
                v83 = *(_QWORD *)(v128 + 16);
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v75 + 448))(v142, v75);
                v84 = *(const void **)(*(_QWORD *)v142 + 16);
                v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75);
                memcpy((void *)(v83 + 4 * v73), v84, 4 * *(int *)(v85 + 40));
                v86 = *(std::__shared_weak_count **)&v142[8];
                if (*(_QWORD *)&v142[8])
                {
                  v87 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                *(_OWORD *)&v142[8] = xmmword_191A93740;
                *(_DWORD *)v142 = 2;
                *(_DWORD *)&v142[4] = v73;
                v73 += *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 40);
                *(_DWORD *)&v142[8] = v73;
                Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v126, *(_QWORD *)(*((_QWORD *)v117 + 1) + 8), (uint64_t)v142);
                v89 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v117 + 3), (uint64_t)v117 + 144);
                v90 = v127;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v89 + 1) + 8), (uint64_t)v126, (uint64_t)v127);
                Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v89, v122);
                v91 = *(Espresso::zephyr::value_t ***)(*(_QWORD *)&v10[8 * v72] + 96);
                if (*(Espresso::zephyr::value_t ***)(*(_QWORD *)&v10[8 * v72] + 104) == v91)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v89, *v91);
                Espresso::zephyr::ordered_block_t::insert_node_before(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v89, *(Espresso::zephyr::node_t **)&v10[8 * v72]);
                Espresso::zephyr::node_t::remove_from_graphs(*(Espresso::zephyr::node_t **)&v10[8 * v72]);
                if (v90)
                {
                  v92 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                ++v72;
              }
              while (v72 != v74);
            }
            v126 = lpsrc;
            v127 = (std::__shared_weak_count *)v131;
            if (v131)
            {
              v94 = (unint64_t *)(v131 + 8);
              do
                v95 = __ldxr(v94);
              while (__stxr(v95 + 1, v94));
            }
            (*(void (**)(void *, void **))(*(_QWORD *)v115 + 400))(v115, &v126);
            v96 = v127;
            if (v127)
            {
              v97 = (unint64_t *)&v127->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v124 = v128;
            v125 = v129;
            if (v129)
            {
              v99 = (unint64_t *)&v129->__shared_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            v101 = (Espresso *)(*(uint64_t (**)(void *, uint64_t *))(*(_QWORD *)v115 + 392))(v115, &v124);
            v103 = v125;
            if (v125)
            {
              v104 = (unint64_t *)&v125->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v101, v102);
              v106 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v142 = 136315394;
                *(_QWORD *)&v142[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pas"
                                      "ses_strength_reduction.mm";
                *(_WORD *)&v142[12] = 1024;
                *(_DWORD *)&v142[14] = 1473;
                _os_log_impl(&dword_190DAF000, v106, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v142, 0x12u);
              }

            }
            v107 = v129;
            if (v129)
            {
              v108 = (unint64_t *)&v129->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = (std::__shared_weak_count *)v131;
            if (v131)
            {
              v111 = (unint64_t *)(v131 + 8);
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            if (v116)
            {
              v113 = (unint64_t *)&v116->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v31 = 1;
            if (!v10)
              goto LABEL_79;
LABEL_78:
            operator delete(v10);
LABEL_79:
            if (__p)
              operator delete(__p);
            return v31;
          }
        }
        else
        {
          v49 = 0;
        }
        v50 = 0;
        goto LABEL_84;
      }
      if (!Espresso::zephyr::match_verbose)
      {
LABEL_77:
        v31 = 0;
        if (!v10)
          goto LABEL_79;
        goto LABEL_78;
      }
      Espresso::espresso_os_log_subsystem(matched, v4);
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1424;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "all_convolutions.size() == node->input()->uses().size()";
        _os_log_impl(&dword_190DAF000, v53, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }

    goto LABEL_77;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v4);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1408;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "fuse_blizzard_final_1x1_convolutions_match_conv(node)";
      _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  return 0;
}

void sub_19181C450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  void *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a24)
  {
    v30 = (unint64_t *)&a24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  if (a26)
  {
    v32 = (unint64_t *)&a26->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  if (a12)
  {
    v34 = (unint64_t *)&a12->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v26)
    operator delete(v26);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes36fuse_blizzard_final_1x1_convolutionsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *fuse_blizzard_final_1x1_convolutions_match_conv(Espresso::zephyr::node_t *a1)
{
  void *result;
  void *v3;
  int32x2_t *v4;
  int32x4_t v5;
  BOOL v6;
  Espresso::zephyr::value_t **v8;
  Espresso::zephyr::value_t **v9;
  Espresso::zephyr::value_t *v10;
  std::__shared_weak_count *v11;
  BOOL v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _DWORD *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>((uint64_t)a1);
  if (!result)
    return result;
  v3 = result;
  v4 = (int32x2_t *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 384))(result);
  result = 0;
  *(int32x2_t *)v5.i8 = vrev64_s32(v4[3]);
  v5.i32[2] = v4[7].i32[1];
  v5.i32[3] = v4[14].i32[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v5, (int32x4_t)xmmword_191A937A0)))) & 1) != 0)
    return result;
  v6 = v4[14].i32[1] == 1 && v4[6].i32[0] == 1;
  if (!v6 || v4[6].i32[1] != 1)
    return result;
  v8 = (Espresso::zephyr::value_t **)*((_QWORD *)a1 + 15);
  v9 = (Espresso::zephyr::value_t **)*((_QWORD *)a1 + 16);
  if ((char *)v9 - (char *)v8 != 8)
    return 0;
  if (v9 == v8)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v10 = *v8;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v35, *v8);
  if (v35)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v33, v10);
    v11 = v34;
    v12 = *v33 != 1;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v12 = 1;
  }
  v15 = v36;
  if (!v36)
    goto LABEL_24;
  v16 = (unint64_t *)&v36->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_24:
    if (!v12)
      goto LABEL_25;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (v12)
    return 0;
LABEL_25:
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v35, v10);
  if (v35)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v33, v10);
    v18 = v34;
    v19 = v33[1] != 1;
    if (v34)
    {
      v20 = (unint64_t *)&v34->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v19 = 1;
  }
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v19)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v3 + 456))(&v35, v3);
  v26 = v35;
  v25 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v3 + 448))(&v35, v3);
  v30 = v35;
  v29 = v36;
  if (v36)
  {
    v31 = (unint64_t *)&v36->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v30)
    return v3;
  else
    return 0;
}

void sub_19181C9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19181CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0E20;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19181CB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0E20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0E20;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  _BOOL8 v9;
  int v11;
  Espresso *v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  Espresso *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  Espresso *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v37;
  NSObject *v38;
  Espresso **constant;
  const char *v40;
  Espresso **v41;
  Espresso *v42;
  std::__shared_weak_count *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  Espresso *v47;
  uint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  const void *v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  Espresso::zephyr::value_t **v66;
  Espresso *v67;
  const char *v68;
  NSObject *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  _DWORD v80[3];
  uint64_t v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint8_t v95[4];
  const char *v96;
  __int16 v97;
  int v98;
  _BYTE buf[20];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[21];
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1486;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "gather_nd_node->inputs().size() == 2";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  if (*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1487;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "gather_nd_node->outputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(*(_QWORD *)a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1491;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "gather_nd_kernel";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  v6 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  if (*(_DWORD *)v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1494;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "p.mode == TF_GATHER";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_25:

      return 0;
    }
    return 0;
  }
  if (*((_DWORD *)v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1495;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "p.batch_dims == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  v11 = *((_DWORD *)v6 + 1);
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, **(Espresso::zephyr::value_t ***)(v2 + 120));
  v15 = *(_QWORD *)buf;
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v15)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v12, v13);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1497;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&v100 = "need_shape(gather_nd_node->inputs()[0])";
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_25;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, **(Espresso::zephyr::value_t ***)(v2 + 120));
  v18 = *(_QWORD *)(*(_QWORD *)buf + 32);
  v19 = *(_OWORD *)(*(_QWORD *)buf + 16);
  v89 = **(_OWORD **)buf;
  v90 = v19;
  v91 = v18;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, *(const void **)(*(_QWORD *)buf + 40), *(_QWORD *)(*(_QWORD *)buf + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 48) - *(_QWORD *)(*(_QWORD *)buf + 40)) >> 2);
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *(Espresso::zephyr::value_t **)(*(_QWORD *)(v2 + 120) + 8));
  v26 = *(_QWORD *)buf;
  v25 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v23, v24);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1500;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "need_shape(gather_nd_node->inputs()[1])";
        _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v9 = 0;
    goto LABEL_92;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *(Espresso::zephyr::value_t **)(*(_QWORD *)(v2 + 120) + 8));
  v29 = *(_QWORD *)(*(_QWORD *)buf + 32);
  v30 = *(_OWORD *)(*(_QWORD *)buf + 16);
  v83 = **(_OWORD **)buf;
  v84 = v30;
  v85 = v29;
  __p = 0;
  v87 = 0;
  v88 = 0;
  v31 = (Espresso *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(_QWORD *)buf + 40), *(_QWORD *)(*(_QWORD *)buf + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 48) - *(_QWORD *)(*(_QWORD *)buf + 40)) >> 2);
  v33 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (DWORD1(v84) == -1 || SDWORD1(v84) >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v31, v32);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1502;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "i_shape.rank() <= 1";
        _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_88:

      goto LABEL_89;
    }
    goto LABEL_89;
  }
  if ((_DWORD)v83 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v31, v32);
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1503;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "i_shape.w == 1";
        _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_88;
    }
    goto LABEL_89;
  }
  constant = (Espresso **)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 120) + 8) + 80));
  v41 = constant;
  if (constant)
  {
    v42 = constant[43];
    if (v42 && (v42 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v42 + 32))(v42), !(_DWORD)v42))
    {
      v47 = v41[43];
      v48 = *((_QWORD *)v47 + 20);
      v43 = (std::__shared_weak_count *)*((_QWORD *)v47 + 21);
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v50 = __ldxr(p_shared_owners);
        while (__stxr(v50 + 1, p_shared_owners));
      }
      v9 = v48 != 0;
      if (v48)
      {
        v51 = (int)**(float **)(v48 + 24);
        v82 = 1;
        v52 = DWORD1(v90);
        if ((_DWORD)v90 == 1)
          v53 = 4;
        else
          v53 = 5;
        if (DWORD1(v90) == -1)
          v52 = v53;
        v80[0] = v52 + ~v11;
        v80[1] = v51;
        v80[2] = v51 + 1;
        v81 = 1;
        Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v78, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)v80);
        v54 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v2 + 24), v2 + 144);
        v55 = *(uint64_t **)(v2 + 96);
        if (*(uint64_t **)(v2 + 104) == v55)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v56 = v54;
        v75 = *(_QWORD *)(v2 + 24);
        v57 = *v55;
        v58 = *(unsigned __int8 *)(*v55 + 55);
        if ((v58 & 0x80u) == 0)
          v59 = v58;
        else
          v59 = *(_QWORD *)(v57 + 40);
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v59 + 4);
        if ((SBYTE3(v100) & 0x80u) == 0)
          v60 = buf;
        else
          v60 = *(_BYTE **)buf;
        if (v59)
        {
          if (*(char *)(v57 + 55) >= 0)
            v61 = (const void *)(v57 + 32);
          else
            v61 = *(const void **)(v57 + 32);
          v62 = v60;
          memmove(v60, v61, v59);
          v60 = v62;
        }
        strcpy(&v60[v59], "_tmp");
        v63 = Espresso::zephyr::function_t::new_value(v75, (uint64_t)buf);
        if (SBYTE3(v100) < 0)
          operator delete(*(void **)buf);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v56 + 1) + 8), v78, (uint64_t)v79);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v56, **(Espresso::zephyr::value_t ***)(v2 + 120));
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v56, (Espresso::zephyr::value_t *)v63);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v56, (Espresso::zephyr::node_t *)v2);
        memset(v106, 0, sizeof(v106));
        v105 = 0u;
        v104 = 0u;
        v103 = 0u;
        v102 = 0u;
        v101 = 0u;
        v100 = 0u;
        *(_OWORD *)&buf[4] = 0u;
        v107 = 2;
        *(_DWORD *)buf = v11;
        Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v76, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)buf);
        v64 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v2 + 24), v2 + 144);
        v65 = v77;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v64 + 1) + 8), v76, (uint64_t)v77);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v64, (Espresso::zephyr::value_t *)v63);
        v66 = *(Espresso::zephyr::value_t ***)(v2 + 96);
        if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v66)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v64, *v66);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v64, (Espresso::zephyr::node_t *)v56);
        v67 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v67, v68);
          v69 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v95 = 136315394;
            v96 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v97 = 1024;
            v98 = 1546;
            _os_log_impl(&dword_190DAF000, v69, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v95, 0x12u);
          }

        }
        if (v65)
        {
          v70 = (unint64_t *)&v65->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v72 = v79;
        if (v79)
        {
          v73 = (unint64_t *)&v79->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      v9 = 0;
      v43 = 0;
    }
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v42, v40);
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1511;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&v100 = "constant_blob";
        _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
LABEL_76:
    if (v43)
    {
      v45 = (unint64_t *)&v43->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    goto LABEL_90;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v40);
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1508;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&v100 = "const_kernel";
      _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_88;
  }
LABEL_89:
  v9 = 0;
LABEL_90:
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
LABEL_92:
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  return v9;
}

void sub_19181D808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  if (v44)
  {
    v48 = (unint64_t *)&v44->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes34strength_reduction_gather_to_sliceERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB31E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB31E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **a2;
  v6[0] = v3;
  v6[1] = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v3);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v6);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISE_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB12F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB12F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::operator()(Espresso *a1, uint64_t a2)
{
  Espresso::zephyr::node_t *v2;
  Espresso *v3;
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  Espresso::zephyr::value_t **v8;
  Espresso::zephyr::value_t **v9;
  Espresso *v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) == 8)
  {
    if (*((_QWORD *)v2 + 13) - *((_QWORD *)v2 + 12) == 8)
    {
      v3 = (Espresso *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 320))(*(_QWORD *)(a2 + 8));
      if (*(_WORD *)v3)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            v12 = 136315650;
            v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v14 = 1024;
            v15 = 406;
            v16 = 2080;
            v17 = "p.pad.pad_mode == CUSTOM";
LABEL_13:
            _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v12, 0x1Cu);
            goto LABEL_14;
          }
          goto LABEL_14;
        }
      }
      else if (*((_WORD *)v3 + 4))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 407;
          v16 = 2080;
          v17 = "p.pad.l == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 5))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 408;
          v16 = 2080;
          v17 = "p.pad.r == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 6))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 409;
          v16 = 2080;
          v17 = "p.pad.t == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 7))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 410;
          v16 = 2080;
          v17 = "p.pad.b == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 8))
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 411;
          v16 = 2080;
          v17 = "p.pad.front == 0";
          goto LABEL_13;
        }
      }
      else
      {
        if (!*((_WORD *)v3 + 9))
        {
          v8 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 12);
          if (*((Espresso::zephyr::value_t ***)v2 + 13) == v8
            || (v9 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15), *((Espresso::zephyr::value_t ***)v2 + 16) == v9))
          {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::value_t::replace_uses(*v8, *v9);
          v10 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
          if (!Espresso::zephyr::match_verbose)
            return 1;
          Espresso::espresso_os_log_subsystem(v10, v11);
          v5 = objc_claimAutoreleasedReturnValue();
          v6 = 1;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            v12 = 136315394;
            v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v14 = 1024;
            v15 = 418;
            _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v12, 0x12u);
          }
          goto LABEL_15;
        }
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v3, v4);
          v5 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v12 = 136315650;
          v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v14 = 1024;
          v15 = 412;
          v16 = 2080;
          v17 = "p.pad.back == 0";
          goto LABEL_13;
        }
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v12 = 136315650;
        v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        v14 = 1024;
        v15 = 402;
        v16 = 2080;
        v17 = "t.node->outputs().size() == 1";
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v12 = 136315650;
    v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    v14 = 1024;
    v15 = 401;
    v16 = 2080;
    v17 = "t.node->inputs().size() == 1";
    goto LABEL_13;
  }
LABEL_14:
  v6 = 0;
LABEL_15:

  return v6;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes50strength_reduction_remove_identity_general_paddingERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0DC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  const char *v4;
  Espresso *v5;
  _QWORD *v6;
  Espresso::zephyr::node_t *v7;
  uint64_t v8;
  const char *v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  Espresso *v15;
  const char *v16;
  Espresso::zephyr::value_t **v17;
  Espresso::zephyr::value_t **v18;
  Espresso::zephyr::value_t **v19;
  Espresso::zephyr::value_t *v20;
  Espresso::zephyr::value_t *v21;
  Espresso::zephyr::value_t *v22;
  Espresso *v23;
  const char *v24;
  int v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  Espresso *v34;
  const char *v35;
  int v36;
  BOOL v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  Espresso *v44;
  const char *v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  Espresso *v54;
  const char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  Espresso::zephyr::node_t *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  _BYTE v64[18];
  __int16 v65;
  const char *v66;
  _BYTE buf[18];
  __int16 v68;
  _BYTE v69[12];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*a2;
  if (!Espresso::zephyr::match_simple_eltwise_binop(*a2, 0))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v4);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 686;
        v68 = 2080;
        *(_QWORD *)v69 = "match_simple_eltwise_binop(bias_add, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    return 0;
  }
  v63 = 0;
  *(_QWORD *)buf = &off_1E2DB3DE8;
  *(_QWORD *)&buf[8] = &v63;
  v5 = (Espresso *)buf;
  *(_QWORD *)&v69[4] = buf;
  v6 = (_QWORD *)v3[15];
  if (v3[16] - (_QWORD)v6 == 16)
  {
    v7 = *(Espresso::zephyr::node_t **)(*v6 + 80);
    v8 = *(_QWORD *)(v6[1] + 80);
    *(_QWORD *)v64 = v7;
    v61 = (Espresso::zephyr::node_t *)v8;
    v10 = std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)buf, (uint64_t *)v64, (uint64_t *)&v61);
    v5 = *(Espresso **)&v69[4];
    if ((v10 & 1) == 0)
    {
      *(_QWORD *)v64 = v8;
      v61 = v7;
      if (!*(_QWORD *)&v69[4])
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(void))(**(_QWORD **)&v69[4] + 48))())
        v7 = (Espresso::zephyr::node_t *)v8;
      else
        v7 = 0;
      v5 = *(Espresso **)&v69[4];
    }
    if (v5 == (Espresso *)buf)
    {
      v11 = 4;
      v5 = (Espresso *)buf;
    }
    else
    {
      if (!v5)
        goto LABEL_19;
      v11 = 5;
    }
  }
  else
  {
    v7 = 0;
    v11 = 4;
  }
  v5 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 8 * v11))();
LABEL_19:
  if (!v7)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v5, v9);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 709;
    v65 = 2080;
    v66 = "expand_dims";
LABEL_106:
    _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v64, 0x1Cu);
    goto LABEL_107;
  }
  v13 = *((_QWORD *)v7 + 15);
  if (*((_QWORD *)v7 + 16) == v13)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v14 = *(_QWORD **)(*(_QWORD *)v13 + 80);
  v15 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>((uint64_t)v14);
  if (v14[16] - v14[15] != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v15, v16);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 714;
    v65 = 2080;
    v66 = "inner_product->inputs().size() == 1";
    goto LABEL_106;
  }
  if (!v15)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v16);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 715;
    v65 = 2080;
    v66 = "ik != nullptr";
    goto LABEL_106;
  }
  v17 = (Espresso::zephyr::value_t **)v14[12];
  if ((Espresso::zephyr::value_t **)v14[13] == v17)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v18 = (Espresso::zephyr::value_t **)*((_QWORD *)v7 + 12);
  if (*((Espresso::zephyr::value_t ***)v7 + 13) == v18)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v19 = (Espresso::zephyr::value_t **)v3[12];
  if ((Espresso::zephyr::value_t **)v3[13] == v19)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v20 = *v18;
  if (*((_QWORD *)*v18 + 8) - *((_QWORD *)*v18 + 7) != 16)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v15, v16);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 721;
    v65 = 2080;
    v66 = "y->has_one_use()";
    goto LABEL_106;
  }
  v21 = *v17;
  v22 = *v19;
  Espresso::zephyr::need_shape((Espresso::zephyr *)v64, *v19);
  if (*(_QWORD *)v64)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v61, v22);
    v25 = *((_DWORD *)v61 + 5);
    if (v25 == -1)
    {
      if (*((_DWORD *)v61 + 4) == 1)
        v25 = 4;
      else
        v25 = 5;
    }
    v26 = v25 == 3;
    v27 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    v26 = 0;
  }
  v31 = *(std::__shared_weak_count **)&v64[8];
  if (*(_QWORD *)&v64[8])
  {
    v32 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (!v26)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v23, v24);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 722;
    v65 = 2080;
    v66 = "need_shape(z) && need_shape(z)->rank() == 3";
    goto LABEL_106;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)v64, v20);
  if (*(_QWORD *)v64)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v61, v20);
    v36 = *((_DWORD *)v61 + 5);
    if (v36 == -1)
    {
      if (*((_DWORD *)v61 + 4) == 1)
        v36 = 4;
      else
        v36 = 5;
    }
    v37 = v36 == 3;
    v38 = v62;
    if (v62)
    {
      v39 = (unint64_t *)&v62->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    v37 = 0;
  }
  v41 = *(std::__shared_weak_count **)&v64[8];
  if (*(_QWORD *)&v64[8])
  {
    v42 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (!v37)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v34, v35);
    v30 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      goto LABEL_107;
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 723;
    v65 = 2080;
    v66 = "need_shape(y) && need_shape(y)->rank() == 3";
    goto LABEL_106;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)v64, v21);
  if (*(_QWORD *)v64)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v61, v21);
    v46 = *((_DWORD *)v61 + 5);
    if (v46 == -1)
    {
      if (*((_DWORD *)v61 + 4) == 1)
        v46 = 4;
      else
        v46 = 5;
    }
    v47 = v62;
    if (v62)
    {
      v48 = (unint64_t *)&v62->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = *(std::__shared_weak_count **)&v64[8];
    if (*(_QWORD *)&v64[8])
    {
      v51 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v46 == 2)
    {
      v53 = Espresso::zephyr::function_t::new_value(v3[3], (uint64_t)v20 + 32);
      Espresso::zephyr::node_t::replace_output_at((uint64_t)v3, 0, (Espresso::zephyr::value_t *)v53);
      Espresso::zephyr::node_t::replace_input_with((Espresso::zephyr::node_t *)v3, v20, v21);
      Espresso::zephyr::node_t::remove_from_graphs(v7);
      Espresso::zephyr::node_t::add_input(v7, (Espresso::zephyr::value_t *)v53);
      Espresso::zephyr::node_t::add_output(v7, v22);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), v7, (Espresso::zephyr::node_t *)v3);
      v54 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 384))(v63);
      *((_DWORD *)v54 + 5) = 2;
      if (!Espresso::zephyr::match_verbose)
        return 1;
      Espresso::espresso_os_log_subsystem(v54, v55);
      v30 = objc_claimAutoreleasedReturnValue();
      v56 = 1;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v64 = 136315394;
        *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 749;
        _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v64, 0x12u);
      }
      goto LABEL_108;
    }
  }
  else
  {
    v57 = *(std::__shared_weak_count **)&v64[8];
    if (*(_QWORD *)&v64[8])
    {
      v58 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem(v44, v45);
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v64 = 136315650;
    *(_QWORD *)&v64[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 724;
    v65 = 2080;
    v66 = "need_shape(x) && need_shape(x)->rank() == 2";
    goto LABEL_106;
  }
LABEL_107:
  v56 = 0;
LABEL_108:

  return v56;
}

void sub_19181EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes33commute_inner_product_expand_dimsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3DE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3DE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  Espresso *v8;
  const char *v9;
  NSObject *v10;
  Espresso *v11;
  const char *v12;
  const char *v14;
  uint64_t v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  Espresso *v20;
  const char *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*a2);
  if (v5)
  {
    v7 = v5;
    v8 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
    if (*((_DWORD *)v8 + 1))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v8, v9);
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v22 = 136315650;
          v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v24 = 1024;
          v25 = 695;
          v26 = 2080;
          v27 = "ek->get_params().size_of_axes == 0";
LABEL_13:
          _os_log_impl(&dword_190DAF000, v10, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v22, 0x1Cu);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v11 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 320))(v7);
      if (*(_DWORD *)v11)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v11, v12);
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            v22 = 136315650;
            v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            v24 = 1024;
            v25 = 696;
            v26 = 2080;
            v27 = "ek->get_params().nd_axis == 0";
            goto LABEL_13;
          }
          goto LABEL_14;
        }
      }
      else
      {
        **(_QWORD **)(a1 + 8) = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
        v15 = **(_QWORD **)(a1 + 8);
        if (!v15)
        {
          if (!Espresso::zephyr::match_verbose)
            return 0;
          Espresso::espresso_os_log_subsystem(0, v14);
          v10 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v22 = 136315650;
          v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v24 = 1024;
          v25 = 700;
          v26 = 2080;
          v27 = "ck != nullptr";
          goto LABEL_13;
        }
        v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 384))(v15);
        if (*((_DWORD *)v16 + 5) != 3)
        {
          if (!Espresso::zephyr::match_verbose)
            return 0;
          Espresso::espresso_os_log_subsystem(v16, v17);
          v10 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v22 = 136315650;
          v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v24 = 1024;
          v25 = 702;
          v26 = 2080;
          v27 = "ck->get_params().nd_rank == 3";
          goto LABEL_13;
        }
        v18 = (Espresso *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 384))(**(_QWORD **)(a1 + 8));
        if (*((_DWORD *)v18 + 1) != 1)
        {
          if (!Espresso::zephyr::match_verbose)
            return 0;
          Espresso::espresso_os_log_subsystem(v18, v19);
          v10 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v22 = 136315650;
          v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v24 = 1024;
          v25 = 703;
          v26 = 2080;
          v27 = "ck->get_params().h == 1";
          goto LABEL_13;
        }
        v20 = (Espresso *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 384))(**(_QWORD **)(a1 + 8));
        if (*((_DWORD *)v20 + 2) == 1)
          return 1;
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v20, v21);
          v10 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            goto LABEL_14;
          v22 = 136315650;
          v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          v24 = 1024;
          v25 = 704;
          v26 = 2080;
          v27 = "ck->get_params().k == 1";
          goto LABEL_13;
        }
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v6);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v22 = 136315650;
      v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      v24 = 1024;
      v25 = 694;
      v26 = 2080;
      v27 = "ek != nullptr";
      goto LABEL_13;
    }
LABEL_14:

  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes33commute_inner_product_expand_dimsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1190;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1190;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v3;
  void *v4;
  const char *v5;
  void *v6;
  _BOOL4 v7;
  NSObject *v8;
  Espresso *v9;
  const char *v10;
  _BOOL4 v11;
  Espresso::zephyr::value_t **v12;
  Espresso::zephyr::value_t *v13;
  Espresso *v14;
  const char *v15;
  int v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  Espresso::zephyr::node_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  Espresso::zephyr::value_t **v32;
  Espresso::zephyr::value_t **v33;
  Espresso::zephyr::value_t *v34;
  Espresso::zephyr::value_t *v35;
  Espresso *v36;
  const char *v37;
  _DWORD *v38;
  void *v39;
  const char *v40;
  void *v41;
  uint64_t (*v42)(void *);
  Espresso *v43;
  const char *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  Espresso *v49;
  const char *v50;
  Espresso *v51;
  const char *v52;
  Espresso *v53;
  const char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  int v75;
  unint64_t *v76;
  Espresso *v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  _DWORD *v81;
  std::__shared_weak_count *v82;
  uint8_t buf[20];
  _BYTE v84[12];
  __int16 v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso::zephyr::node_t *)*a2;
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(*a2);
  if (!v4)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 771;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)v84 = "ck != nullptr";
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_31:

    return 0;
  }
  v6 = v4;
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4))
    v7 = 0;
  else
    v7 = *(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6) + 4) != 0;
  v9 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*(_DWORD *)v9 == 2)
  {
    v9 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
    v11 = *((_BYTE *)v9 + 4) != 0;
  }
  else
  {
    v11 = 0;
  }
  if (!v7 && !v11)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 774;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)v84 = "concat_on_first_axis || concat_on_last_axis";
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v12 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 776;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)v84 = "concat->inputs().size() > 0";
      _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  v13 = *v12;
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v12);
  if (*(_QWORD *)buf)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v81, v13);
    v16 = v81[5];
    if (v16 == -1)
    {
      if (v81[4] == 1)
        v16 = 4;
      else
        v16 = 5;
    }
    v17 = v16 == 3;
    v18 = v82;
    if (v82)
    {
      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_37;
  v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_37:
    if (v17)
      goto LABEL_38;
LABEL_61:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v14, v15);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 779;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)v84 = "need_shape(first_input) && need_shape(first_input)->rank() == 3";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_64;
    }
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v17)
    goto LABEL_61;
LABEL_38:
  v24 = (Espresso::zephyr::node_t *)*((_QWORD *)v13 + 10);
  v25 = *((_QWORD *)v3 + 15);
  v26 = *((_QWORD *)v3 + 16);
  v27 = v26 - v25;
  v28 = *((_QWORD *)v24 + 12);
  if (v26 - v25 != *((_QWORD *)v24 + 13) - v28)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v14, v15);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 782;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)v84 = "concat->inputs().size() == split->outputs().size()";
        _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_64:

      return 0;
    }
    return 0;
  }
  if (v26 != v25)
  {
    v29 = 0;
    v30 = v27 >> 3;
    while (1)
    {
      v31 = *(_QWORD **)(v25 + 8 * v29);
      if (*(_QWORD **)(v28 + 8 * v29) != v31)
      {
        if (!Espresso::zephyr::match_verbose)
          return 0;
        Espresso::espresso_os_log_subsystem(v14, v15);
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 787;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "split_output == concat_input";
          _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_64;
      }
      if ((Espresso::zephyr::node_t *)v31[10] != v24)
      {
        if (!Espresso::zephyr::match_verbose)
          return 0;
        Espresso::espresso_os_log_subsystem(v14, v15);
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 788;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "concat_input->defining_node() == split";
          _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_64;
      }
      if (v31[8] - v31[7] != 16)
        break;
      if (++v29 >= v30)
        goto LABEL_45;
    }
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v14, v15);
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)v84 = "concat_input->has_one_use()";
      _os_log_impl(&dword_190DAF000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_64;
  }
LABEL_45:
  v32 = (Espresso::zephyr::value_t **)*((_QWORD *)v24 + 15);
  if (*((Espresso::zephyr::value_t ***)v24 + 16) == v32
    || (v33 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 12), *((Espresso::zephyr::value_t ***)v3 + 13) == v33))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v34 = *v32;
  v35 = *v33;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v81, *v33);
  v38 = v81;
  if (v81)
  {
    if (v81[5] != 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v36, v37);
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 797;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "y_rank == 3";
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    v39 = Espresso::zephyr::cast_kernel<Espresso::generic_split_nd_kernel>((uint64_t)v24);
    v41 = v39;
    if (!v39)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v40);
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 800;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "sk != nullptr";
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    v42 = *(uint64_t (**)(void *))(*(_QWORD *)v39 + 320);
    if (v7)
    {
      if (*(_DWORD *)v42(v39) != -1)
      {
        v43 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 320))(v41);
        if (*(_DWORD *)v43 != 2)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v43, v44);
            v45 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 804;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)v84 = "sk->get_params().nd_axis == -1 || sk->get_params().nd_axis == y_rank - 1";
LABEL_101:
              _os_log_impl(&dword_190DAF000, v45, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              goto LABEL_102;
            }
            goto LABEL_102;
          }
LABEL_104:
          v47 = 0;
          goto LABEL_105;
        }
      }
    }
    else
    {
      v49 = (Espresso *)v42(v39);
      if (*(_DWORD *)v49)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v49, v50);
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 806;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v84 = "sk->get_params().nd_axis == 0";
            goto LABEL_101;
          }
          goto LABEL_102;
        }
        goto LABEL_104;
      }
    }
    v51 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 320))(v41);
    if (*((_DWORD *)v51 + 1) != (uint64_t)(*((_QWORD *)v3 + 16) - *((_QWORD *)v3 + 15)) >> 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v51, v52);
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 808;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "sk->get_params().num_splits == concat->inputs().size()";
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    v53 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 320))(v41);
    if (*((_DWORD *)v53 + 2)
      || (v53 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 320))(v41), *((_DWORD *)v53 + 3)))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v53, v54);
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 810;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v84 = "sk->get_params().size_splits[0] == 0 && sk->get_params().size_splits[1] == 0";
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    v58 = Espresso::zephyr::function_t::new_value(*((_QWORD *)v3 + 3), (uint64_t)v35 + 32);
    v59 = *((_QWORD *)v3 + 3);
    if (v7)
    {
      v60 = Espresso::zephyr::function_t::new_detached_node(v59, (uint64_t)v3 + 144);
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v84[4] = 0;
      v85 = 1;
      v86 = 1;
      v61 = v38[2];
      *(_DWORD *)buf = *v38;
      *(_DWORD *)&buf[4] = v61;
      *(_DWORD *)&buf[8] = -1;
      v62 = v38[5];
      if (v62 == -1)
      {
        if (v38[4] == 1)
          v62 = 4;
        else
          v62 = 5;
      }
      *(_DWORD *)v84 = v62;
      Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(&v79, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
      v63 = v80;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v60 + 1) + 8), v79, (uint64_t)v80);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v60, v34);
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v60, (Espresso::zephyr::value_t *)v58);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v60, v3);
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v3 + 3), (uint64_t)v3 + 144);
      *(_DWORD *)&buf[16] = 4;
      *(_OWORD *)buf = xmmword_191A93500;
      Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v79, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
      v67 = v80;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v66 + 1) + 8), v79, (uint64_t)v80);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v66, (Espresso::zephyr::value_t *)v58);
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v66, v35);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v66, (Espresso::zephyr::node_t *)v60);
      if (!v67)
        goto LABEL_138;
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
    }
    else
    {
      v70 = Espresso::zephyr::function_t::new_detached_node(v59, (uint64_t)v3 + 144);
      *(_DWORD *)&buf[16] = 4;
      *(_OWORD *)buf = xmmword_191A93500;
      Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v79, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
      v71 = v80;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v70 + 1) + 8), v79, (uint64_t)v80);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v70, v34);
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v70, (Espresso::zephyr::value_t *)v58);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v70, v3);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v3 + 3), (uint64_t)v3 + 144);
      *(_QWORD *)&v84[4] = 0;
      v85 = 1;
      v86 = 1;
      *(_DWORD *)buf = *v81;
      *(_DWORD *)&buf[4] = -1;
      *(_DWORD *)&buf[8] = v81[2];
      *(_QWORD *)&buf[12] = 0;
      v75 = v81[5];
      if (v75 == -1)
      {
        if (v81[4] == 1)
          v75 = 4;
        else
          v75 = 5;
      }
      *(_DWORD *)v84 = v75;
      Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(&v79, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
      v67 = v80;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v74 + 1) + 8), v79, (uint64_t)v80);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v74, (Espresso::zephyr::value_t *)v58);
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v74, v35);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v74, (Espresso::zephyr::node_t *)v70);
      if (!v67)
        goto LABEL_138;
      v76 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v76);
      while (__stlxr(v69 - 1, v76));
    }
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
LABEL_138:
    Espresso::zephyr::node_t::remove_from_graphs(v3);
    v77 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v24);
    if (!Espresso::zephyr::match_verbose)
    {
      v47 = 1;
      goto LABEL_105;
    }
    Espresso::espresso_os_log_subsystem(v77, v78);
    v45 = objc_claimAutoreleasedReturnValue();
    v47 = 1;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 895;
      _os_log_impl(&dword_190DAF000, v45, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_103;
  }
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_104;
  Espresso::espresso_os_log_subsystem(v36, v37);
  v45 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 795;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)v84 = "y_shape_ptr";
    goto LABEL_101;
  }
LABEL_102:
  v47 = 0;
LABEL_103:

LABEL_105:
  v55 = v82;
  if (v82)
  {
    v56 = (unint64_t *)&v82->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return v47;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes42strength_reduction_coreflow_attention_headERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_split_nd_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1918203AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::~compiler(Espresso::ANERuntimeEngine::compiler *this, const char *a2)
{
  Espresso::ANERuntimeEngine::compiler::~compiler(this, a2);
  JUMPOUT(0x19401CD90);
}

{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  int v8;
  int v9;
  void **v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2D70510;
  Espresso::espresso_os_log_subsystem(this, a2);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((unsigned __int8 *)this + 144);
    v9 = objc_msgSend(*((id *)this + 22), "count");
    LODWORD(v10) = 67109376;
    HIDWORD(v10) = v8;
    v11 = 1024;
    v12 = v9;
    _os_log_debug_impl(&dword_190DAF000, v3, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compiler::~compiler] Destroy loaded=%d loaded_keys_count=%d", (uint8_t *)&v10, 0xEu);
  }

  Espresso::ANERuntimeEngine::compiler::reset(this);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((_QWORD **)this + 73));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((_QWORD **)this + 70));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 528, *((char **)this + 67));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 504, *((char **)this + 64));
  std::__tree<std::string>::destroy((uint64_t)this + 480, *((char **)this + 61));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD *)this + 58));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 432, *((_QWORD *)this + 55));
  v4 = (void *)*((_QWORD *)this + 51);
  if (v4)
  {
    *((_QWORD *)this + 52) = v4;
    operator delete(v4);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 392);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table((uint64_t)this + 224);

  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E2D94680;
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v10 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v10);
  *(_QWORD *)this = off_1E2D5FD08;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void Espresso::ANERuntimeEngine::compiler::compile_network_to_cache_url_identifier(Espresso::ANERuntimeEngine::compiler *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  std::string *v15;
  const char *v16;
  NSObject *v17;
  id v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSError *v30;
  NSError *v31;
  Espresso *v32;
  const char *v33;
  Espresso *v34;
  NSObject *v35;
  Espresso *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::runtime_error *exception;
  const char *v44;
  void *v45;
  std::string *v46;
  __int128 v47;
  std::string::size_type v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  id v51;
  Espresso *v52;
  std::string v53;
  id v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::string buf;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*((_QWORD *)this + 13) + 127))
    Espresso::throw_exception_selector<Espresso::generic_error>("compile_model_to_hash: Only supported in the context of E5 Compiler.");
  v60 = 0;
  v61 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4
    || (v5 = std::__shared_weak_count::lock(v4), (v61 = v5) == 0)
    || (v6 = *((_QWORD *)this + 1), (v60 = v6) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v58 = v6;
  v59 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  (*(void (**)(Espresso::ANERuntimeEngine::compiler *, uint64_t *))(*(_QWORD *)this + 88))(this, &v58);
  v9 = v59;
  if (v59)
  {
    v10 = (unint64_t *)&v59->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*((_QWORD *)this + 5) - *((_QWORD *)this + 4) != 120)
    Espresso::throw_exception_selector<Espresso::generic_error>("compile_model_to_hash: Only expect a single segment");
  if (Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v60))
  {
    v44 = "compile_model_to_hash: Do not expect multihead multiproc to be true.";
    goto LABEL_48;
  }
  if (*((_BYTE *)this + 200))
  {
    v44 = "compile_model_to_hash: Do not expect is_in_memory_model to be true.";
LABEL_48:
    Espresso::throw_exception_selector<Espresso::generic_error>(v44);
  }
  v12 = (void *)objc_opt_new();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CFDFC8]);
  Espresso::ANERuntimeEngine::compiler::key_for_segment(this, 0, *((const Espresso::net_compiler_segment_based::segment_t **)this + 4));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 23), "setObject:forKeyedSubscript:", v12, v13);
  v14 = v60;
  if (*(char *)(v60 + 639) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v60 + 616), *(_QWORD *)(v60 + 624));
  else
    v57 = *(std::string *)(v60 + 616);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v57;
  else
    v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
  v51 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:");
  v52 = (Espresso *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_os_log_subsystem(v52, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v40 = objc_msgSend(objc_retainAutorelease(v51), "UTF8String");
    v41 = objc_msgSend(objc_retainAutorelease(v13), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
    _os_log_debug_impl(&dword_190DAF000, v17, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compile_network_to_cache_url_identifier] input net url=%s key=%s", (uint8_t *)&buf, 0x16u);
  }

  v18 = *((id *)this + 20);
  v55 = v14;
  v56 = v61;
  if (v61)
  {
    v19 = (unint64_t *)&v61->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  get_original_url_if_exists(&v55, v18);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  -[Espresso URLByDeletingLastPathComponent](v52, "URLByDeletingLastPathComponent");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURLWithSourceURL:sourceURL:key:cacheURLIdentifier:", v21, v25, v13, 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v27;

  v29 = (void *)*((_QWORD *)this + 17);
  v54 = 0;
  LOBYTE(v29) = objc_msgSend(v29, "compileModel:options:qos:error:", v26, v12, Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)this), &v54);
  v30 = (NSError *)v54;
  v31 = v30;
  if ((v29 & 1) == 0)
  {
    get_error_string(v30);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v53, (char *)objc_msgSend(objc_retainAutorelease(v45), "UTF8String"));
    v46 = std::string::insert(&v53, 0, "ANERuntimeCompiler error: failed to compile ANE model. Error=");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v50, &buf);
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v26, "getCacheURLIdentifier");
  v32 = (Espresso *)objc_claimAutoreleasedReturnValue();
  v34 = v32;
  if (!v32)
    Espresso::throw_exception_selector<Espresso::generic_error>("ANERuntimeCompiler: ANEF returned cacheURLIdentifier as nil.");
  Espresso::espresso_os_log_subsystem(v32, v33);
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v21, "path");
    v49 = (std::runtime_error *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v48 = -[std::runtime_error UTF8String](v49, "UTF8String");
    v42 = -[Espresso UTF8String](objc_retainAutorelease(v34), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v48;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v42;
    _os_log_debug_impl(&dword_190DAF000, v35, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compile_network_to_cache_url_identifier] input net url=%s cacheURLIdentifier=%s", (uint8_t *)&buf, 0x16u);

  }
  v36 = objc_retainAutorelease(v34);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)-[Espresso UTF8String](v36, "UTF8String"));

  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);

  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1918209C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_8:

      if (a27 < 0)
        operator delete(a22);

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(a10);
  goto LABEL_8;
}

uint64_t Espresso::ANERuntimeEngine::compiler::rebuild(Espresso::ANERuntimeEngine::compiler *this)
{
  std::__shared_weak_count *v2;
  const Espresso::net *v3;
  _QWORD *i;
  const void *v5;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  const Espresso::net *v16;
  std::__shared_weak_count *v17;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2
    || (v17 = std::__shared_weak_count::lock(v2)) == 0
    || (v3 = (const Espresso::net *)*((_QWORD *)this + 1), (v16 = v3) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  for (i = (_QWORD *)*((_QWORD *)v3 + 19); i; i = (_QWORD *)*i)
  {
    v5 = (const void *)i[5];
    if (v5)
    {
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v6, v16, v17);
        v9 = (unint64_t *)&v17->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  if (*((_BYTE *)this + 288) && *((_QWORD *)v16 + 99))
  {
    Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(this);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = (unint64_t *)&v17->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return v11;
}

void sub_191820CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANERuntimeEngine::compiler::compilation_cache_exists(Espresso::ANERuntimeEngine::compiler *this)
{
  void *v2;
  id v3;
  _BOOL8 each_segment;
  _QWORD v6[4];
  id v7;

  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN8Espresso16ANERuntimeEngine8compiler24compilation_cache_existsEv_block_invoke;
  v6[3] = &unk_1E2DD6380;
  v7 = v2;
  v3 = v2;
  each_segment = Espresso::ANERuntimeEngine::compiler::query_each_segment((uint64_t)this, v6);

  return each_segment;
}

void sub_191820D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::implements_compilation_cache_purge(Espresso::ANERuntimeEngine::compiler *this)
{
  return 1;
}

BOOL Espresso::ANERuntimeEngine::compiler::compilation_cache_purge(Espresso::ANERuntimeEngine::compiler *this)
{
  void *v2;
  id v3;
  _BOOL8 each_segment;
  _QWORD v6[4];
  id v7;

  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN8Espresso16ANERuntimeEngine8compiler23compilation_cache_purgeEv_block_invoke;
  v6[3] = &unk_1E2DD6380;
  v7 = v2;
  v3 = v2;
  each_segment = Espresso::ANERuntimeEngine::compiler::query_each_segment((uint64_t)this, v6);

  return each_segment;
}

void sub_191820E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso16ANERuntimeEngine8compiler23compilation_cache_purgeEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  std::runtime_error *exception;

  v4 = a3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  objc_msgSend(*(id *)(a1 + 32), "purgeCompiledModel:", v4);

  return 1;
}

void sub_191820ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

BOOL Espresso::ANERuntimeEngine::compiler::query_each_segment(uint64_t a1, void *a2)
{
  uint64_t (**v3)(id, uint64_t, void *);
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  char v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v3 = a2;
  v33 = 0;
  v34 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4
    || (v5 = std::__shared_weak_count::lock(v4), (v34 = v5) == 0)
    || (v6 = *(_QWORD *)(a1 + 8), (v33 = v6) == 0))
  {
    v28 = "inconsistent state";
    goto LABEL_39;
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v28 = "not yet supported in in-memory model flow";
LABEL_39:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v28);
  }
  v31 = v6;
  v32 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 88))(a1, &v31);
  v9 = v32;
  if (v32)
  {
    v10 = (unint64_t *)&v32->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
  {
LABEL_28:
    v23 = 2;
  }
  else
  {
    v12 = 0;
    while (1)
    {
      if (Espresso::use_multiple_procedure_for_segments(&v33))
      {
        Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(a1, (uint64_t)&v33);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          v23 = 2;
          goto LABEL_30;
        }
      }
      else
      {
        Espresso::ANERuntimeEngine::compiler::key_for_segment((Espresso::ANERuntimeEngine::compiler *)a1, v12, (const Espresso::net_compiler_segment_based::segment_t *)(*(_QWORD *)(a1 + 32) + 120 * v12));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v14 = *(id *)(a1 + 160);
      v29 = v33;
      v30 = v34;
      if (v34)
      {
        v15 = (unint64_t *)&v34->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      get_original_url_if_exists(&v29, v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v30;
      if (v30)
      {
        v19 = (unint64_t *)&v30->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURL:key:", v17, v13, v29);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v3[2](v3, v12, v21);

      if ((v22 & 1) == 0)
        break;

      if (++v12 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3))
        goto LABEL_28;
    }
    v23 = 1;
LABEL_30:

  }
  v24 = v34;
  if (v34)
  {
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  return v23 == 2;
}

void sub_191821188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

id Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  std::string *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  std::string *v34;
  uint64_t i;
  void *v36;
  void *v37;
  std::runtime_error *exception;
  void *v40;
  void *v41;
  void *v42;
  void *v44;
  id v45;
  void *v46;
  id v47;
  char v48;
  void **v49;
  void *v50;
  void *v51;
  void *v52;
  std::__shared_weak_count *v53;
  std::string v54;
  _QWORD v55[5];
  const __CFString *v56;
  void *v57;
  _BYTE buf[12];
  _OWORD v59[2];
  id v60;
  _BYTE v61[40];
  _QWORD v62[3];

  v62[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", &unk_1E2DEDC58);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
  }
  else
  {
    if (!*(_QWORD *)a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = 0x1E0C99000uLL;
    v40 = (void *)objc_opt_new();
    v42 = (void *)objc_opt_new();
    v41 = (void *)objc_opt_new();
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
    {
      v6 = 0;
      do
      {
        v46 = (void *)objc_opt_new();
        v44 = (void *)objc_opt_new();
        v7 = *(_QWORD *)(a1 + 32);
        std::unordered_set<std::string>::unordered_set((uint64_t)v59, v7 + 120 * (int)v6 + 16);
        v47 = v46;
        v60 = v47;
        std::unordered_set<std::string>::unordered_set((uint64_t)v61, v7 + 120 * (int)v6 + 56);
        v8 = v44;
        v9 = 0;
        v10 = 0;
        v45 = v8;
        v62[0] = v8;
        do
        {
          v48 = v9;
          v11 = *(uint64_t **)&v59[3 * v10 + 1];
          if (v11)
          {
            v49 = (void **)&v61[48 * v10 - 8];
            do
            {
              if (*((char *)v11 + 39) < 0)
                std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v11[2], v11[3]);
              else
                v54 = *(std::string *)(v11 + 2);
              if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)a2 + 136), (unsigned __int8 *)&v54))
              {
                v13 = *(_QWORD *)a2 + 136;
                *(_QWORD *)buf = &v54;
                v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)&v54, (__int128 **)buf);
                v15 = (const void *)*((_QWORD *)v14 + 5);
                if (v15)
                {
                  if (v16)
                  {
                    v17 = v16;
                    v53 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
                    if (v53)
                    {
                      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
                      do
                        v19 = __ldxr(p_shared_owners);
                      while (__stxr(v19 + 1, p_shared_owners));
                    }
                    v56 = CFSTR("shape");
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v16[44]);
                    v20 = objc_claimAutoreleasedReturnValue();
                    v55[0] = v20;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17[43]);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    v55[1] = v52;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17[42]);
                    v51 = (void *)objc_claimAutoreleasedReturnValue();
                    v55[2] = v51;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17[41]);
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    v55[3] = v21;
                    v50 = (void *)v20;
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17[40]);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    v55[4] = v22;
                    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 5);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v57 = v23;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                    v25 = v6;
                    v26 = v5;
                    v27 = a2;
                    v28 = *v49;
                    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v29 = &v54;
                    else
                      v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
                    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "setObject:forKeyedSubscript:", v24, v30);

                    a2 = v27;
                    v5 = v26;
                    v6 = v25;

                    if (v53)
                    {
                      v31 = (unint64_t *)&v53->__shared_owners_;
                      do
                        v32 = __ldaxr(v31);
                      while (__stlxr(v32 - 1, v31));
                      if (!v32)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                  }
                }
              }
              else
              {
                Espresso::espresso_os_log_subsystem(0, v12);
                v33 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  v34 = &v54;
                  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v34;
                  _os_log_error_impl(&dword_190DAF000, v33, OS_LOG_TYPE_ERROR, "[key_for_segment] blob not found: %s", buf, 0xCu);
                }

              }
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v54.__r_.__value_.__l.__data_);
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          v9 = 1;
          v10 = 1;
        }
        while ((v48 & 1) == 0);
        for (i = 0; i != -12; i -= 6)
        {

          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v61[i * 8]);
        }
        objc_msgSend(v42, "addObject:", v47);
        objc_msgSend(v41, "addObject:", v45);

        ++v6;
      }
      while (v6 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
    }
    objc_msgSend(v40, "setObject:forKeyedSubscript:", v42, CFSTR("all_inputs"));
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v40, 0, 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v36, 4);
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", v37, &unk_1E2DEDC58);
    v4 = v37;

  }
  return v4;
}

void sub_19182179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  __cxa_free_exception(v30);
  _Unwind_Resume(a1);
}

void sub_191821AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination(uint64_t **a1, uint64_t a2, _QWORD *a3, int **a4, int a5)
{
  void *v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned __int8 *i;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *j;
  unsigned __int8 *v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v60;
  std::string v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  std::string __p;

  v60 = (void *)objc_opt_new();
  v9 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration(&__p, *a4, a4[1], (uint64_t)(a1 + 33));
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v10 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 60, &__p, (__int128 **)&v61)+ 14);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v61);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v12 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v61);
  Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure((uint64_t)(a1 + 54), &__p);
  v56 = (uint64_t)a1;
  v55 = v10;
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure((uint64_t)(a1 + 54), &__p);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (unsigned __int8 *)v11[7];
  for (i = (unsigned __int8 *)v11[8]; v14 != i; v14 += 24)
  {
    v15 = *a3 + 136;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v14, (__int128 **)&v61);
    v17 = (const void *)*((_QWORD *)v16 + 5);
    if (!v17
    {
      v62 = 0;
      v63 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v61);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
    v62 = v18;
    v63 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v22 = v18[27];
    if (a5 >= (unint64_t)((v18[28] - v22) >> 3))
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v52, &v61);
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v23 = *(void **)(v22 + 8 * a5);
    if (!v23)
    {
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v51, &v61);
      __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v23, "ane_io_surfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "addObject:", v24);

    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v28 = (unsigned __int8 *)v12[7];
  for (j = (unsigned __int8 *)v12[8]; v28 != j; v28 += 24)
  {
    v29 = *a3 + 136;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, v28, (__int128 **)&v61);
    v31 = (const void *)*((_QWORD *)v30 + 5);
    if (!v31
    {
      v62 = 0;
      v63 = 0;
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v50, &v61);
      __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)v30 + 6);
    v62 = v32;
    v63 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = v32[27];
    v37 = *(void **)(v36 + 8 * a5);
    if (!v37)
    {
      v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v53, &v61);
      __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (a5 >= (unint64_t)((v32[28] - v36) >> 3))
    {
      v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v54, &v61);
      __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v37, "ane_io_surfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v38);

    if (v33)
    {
      v39 = (unint64_t *)&v33->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(v56, (uint64_t)a3);
  v41 = objc_claimAutoreleasedReturnValue();
  v42 = (void *)MEMORY[0x1E0CFDF90];
  v43 = (void *)objc_msgSend(v60, "copy");
  v44 = (void *)objc_msgSend(v58, "copy");
  v45 = (void *)objc_msgSend(v9, "copy");
  v46 = (void *)objc_msgSend(v57, "copy");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "requestWithInputs:inputIndices:outputs:outputIndices:procedureIndex:", v43, v44, v45, v46, v47);
  objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v41;
}

void sub_1918220A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (a30 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZN8Espresso16ANERuntimeEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  Espresso *v8;
  const char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  Espresso *v21;
  const char *v22;
  NSObject *v23;
  id WeakRetained;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  const __CFString *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  id v63;
  _BYTE buf[12];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  std::string __p;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v62 = *(_DWORD *)(a1 + 128);
  v63 = v5;
  std::mutex::lock((std::mutex *)(v6 + 200));
  v10 = *(_QWORD *)(v6 + 152);
  v11 = (unint64_t *)(v10 + 16 * v7);
  v12 = *v11;
  if (*(_BYTE *)(v6 + 328))
  {
    Espresso::espresso_os_log_subsystem(v8, v9);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v42 = CFSTR("NO");
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v12;
      if (a2)
        v42 = CFSTR("YES");
      v66 = 2048;
      v67 = v7;
      v68 = 2112;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "ANE Batch: Posting completion of async_request %zu, array index %zu: (success: %@)\n", buf, 0x20u);
    }

  }
  if ((a2 & 1) == 0)
  {
    v15 = (uint64_t **)(v6 + 184);
    v14 = *(uint64_t **)(v6 + 184);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v14;
          v17 = v14[4];
          if (v12 >= v17)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_13;
        }
        if (v17 >= v12)
          break;
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_13;
        }
      }
      v18 = v16;
    }
    else
    {
      v16 = (uint64_t **)(v6 + 184);
LABEL_13:
      v18 = operator new(0x40uLL);
      *((_QWORD *)v18 + 4) = v12;
      *((_QWORD *)v18 + 5) = 0;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = 0;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v16;
      *v15 = (uint64_t *)v18;
      v19 = **(_QWORD **)(v6 + 176);
      v20 = (uint64_t *)v18;
      if (v19)
      {
        *(_QWORD *)(v6 + 176) = v19;
        v20 = *v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 184), v20);
      ++*(_QWORD *)(v6 + 192);
    }
    *((_QWORD *)v18 + 5) = v12;
    *((_DWORD *)v18 + 12) = v62;
    objc_storeStrong((id *)v18 + 7, a3);
    if (*(_BYTE *)(v6 + 328))
    {
      Espresso::espresso_os_log_subsystem(v21, v22);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v59 = *v11;
        v60 = objc_msgSend(v63, "code");
        objc_msgSend(v63, "localizedDescription");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v59;
        v66 = 2048;
        v67 = v60;
        v68 = 2112;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        _os_log_error_impl(&dword_190DAF000, v23, OS_LOG_TYPE_ERROR, "ANE Batch: async_request %zu returned error %ld: %@", buf, 0x20u);

      }
    }
  }
  *(_BYTE *)(v10 + 16 * v7 + 12) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v6 + 264));
  std::mutex::unlock((std::mutex *)(v6 + 200));

  kdebug_trace();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "perfStats");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v25;
  if (v25)
  {
    if (a2)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 1240);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 1048);

        if (!v28)
          goto LABEL_45;
        v29 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 1240) + 1048);
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(WeakRetained, "perfStats");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v26, "hwExecutionTime");
        v31 = v30;
        v32 = (uint64_t *)v29[2];
        v33 = v29[3];
        if ((unint64_t)v32 >= v33)
        {
          v35 = (uint64_t *)v29[1];
          v36 = v32 - v35;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v37 = v33 - (_QWORD)v35;
          v38 = (uint64_t)(v33 - (_QWORD)v35) >> 2;
          if (v38 <= v36 + 1)
            v38 = v36 + 1;
          v39 = v37 >= 0x7FFFFFFFFFFFFFF8;
          v40 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v39)
            v40 = v38;
          if (v40)
          {
            v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
            v35 = (uint64_t *)v29[1];
            v32 = (uint64_t *)v29[2];
          }
          else
          {
            v41 = 0;
          }
          v43 = (uint64_t *)(v40 + 8 * v36);
          v44 = v40 + 8 * v41;
          *v43 = v31;
          v34 = v43 + 1;
          while (v32 != v35)
          {
            v45 = *--v32;
            *--v43 = v45;
          }
          v29[1] = v43;
          v29[2] = v34;
          v29[3] = v44;
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v32 = v30;
          v34 = v32 + 1;
        }
        v29[2] = v34;
      }
    }
  }

LABEL_45:
  v46 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v46)
  {
    v47 = v46;
    v48 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v48, "perfStatsArray");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (v49)
    {
      v50 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v50, "perfStatsArray");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v51, "count");

      if (v52)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 112) + 16) = a2;
        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 1240) + 1048);
        std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
        v54 = *(_QWORD *)(a1 + 112);
        if (*(char *)(v54 + 63) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v54 + 40), *(_QWORD *)(v54 + 48));
        else
          __p = *(std::string *)(v54 + 40);
        std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v53 + 32), (__int128 *)buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)buf);
        v55 = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(v55, "perfStatsArray");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "objectAtIndexedSubscript:", 0);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "stats");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = objc_msgSend(v58, "ioSurface");
        Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)buf, (uint64_t *)(*(_QWORD *)(a1 + 112) + 40));

      }
    }
    else
    {

    }
  }

}

void sub_191822738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = *a2;
    v15 = &v13[48 * v12];
    v16 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v16;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v8 = v14 + 48;
    v17 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v18 - 3);
        *((_QWORD *)v14 - 4) = *((_QWORD *)v18 - 4);
        *((_OWORD *)v14 - 3) = v19;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 6) = 0;
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 48;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *((_QWORD *)v18 - 3) = 0;
        v18 -= 48;
      }
      while (v18 != v17);
      v18 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      while ((char *)v21 != v18)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void Espresso::ANERuntimeEngine::compiler::write_iosurface(IOSurfaceRef *a1, uint64_t *a2)
{
  uint64_t v2;
  void *BaseAddress;
  size_t AllocSize;
  uint64_t *v7;
  void *v8;
  id v9;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v2)
  {
    IOSurfaceLock(*a1, 0, 0);
    BaseAddress = IOSurfaceGetBaseAddress(*a1);
    AllocSize = IOSurfaceGetAllocSize(*a1);
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", BaseAddress, AllocSize);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "writeToFile:atomically:", v9, 1);
    IOSurfaceUnlock(*a1, 0, 0);

  }
}

void sub_191822AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::analysis_ane_multi_head::runtime_segment_combination_t::~runtime_segment_combination_t(Espresso::analysis_ane_multi_head::runtime_segment_combination_t *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

_QWORD *__copy_helper_block_ea8_56c61_ZTSNSt3__110shared_ptrIN8Espresso16ANERuntimeEngine5batchEEE96c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE112c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[15];
  result[14] = a2[14];
  result[15] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c61_ZTSNSt3__110shared_ptrIN8Espresso16ANERuntimeEngine5batchEEE96c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE112c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 56;
  v2 = a1 + 96;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,void *>>>::operator()[abi:ne180100](char a1, char **a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

__CFString *get_error_string(NSError *a1)
{
  __CFString *v1;

  -[NSError localizedDescription](a1, "localizedDescription");
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v1)
    v1 = &stru_1E2DD80E0;
  return v1;
}

void Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("procedure_id out of range: %lu >= %lu", a1, a2);
}

void sub_191822EAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table(uint64_t a1)
{
  char **v2;
  char *v3;
  void *v4;

  v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v2[4]);
      operator delete(v2);
      v2 = (char **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

NSURL *swap_for_devop_override_if_exists_and_not_precompiled(char *a1, NSURL *a2)
{
  NSURL *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  unsigned __int8 v7;
  void **v8;
  unint64_t v9;
  void **v10;
  unsigned __int8 *v11;
  void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  int v21;
  NSURL *v22;
  NSURL *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44[2];
  char v45;
  uint64_t *v46;
  uint64_t v47[2];
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  __int128 *v52;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByDeletingLastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(v50, ".espresso.net");
  std::string::basic_string[abi:ne180100]<0>(v48, a1);
  v6 = v49;
  v7 = v49;
  v8 = (void **)v48[0];
  if ((v49 & 0x80u) != 0)
    v6 = (unint64_t)v48[1];
  else
    v8 = v48;
  v9 = v51;
  v10 = (void **)v50[0];
  if ((v51 & 0x80u) != 0)
    v9 = (unint64_t)v50[1];
  else
    v10 = v50;
  v11 = (unsigned __int8 *)v8 + v6;
  if (v6 && v9)
  {
    v12 = v8;
    v13 = (unsigned __int8 *)v8 + v6;
    do
    {
      if (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v10)
      {
        v14 = 1;
        while (v9 != v14)
        {
          if ((unsigned __int8 *)((char *)v12 + v14) == v11)
            goto LABEL_20;
          v15 = *((unsigned __int8 *)v12 + v14);
          v16 = *((unsigned __int8 *)v10 + v14++);
          if (v15 != v16)
            goto LABEL_11;
        }
        v13 = (unsigned __int8 *)v12;
      }
LABEL_11:
      v12 = (void **)((char *)v12 + 1);
    }
    while (v12 != (void **)v11);
  }
  else
  {
    v13 = (unsigned __int8 *)v8 + v6;
  }
LABEL_20:
  v17 = v13 - (unsigned __int8 *)v8;
  if (v13 == v11 && v9 != 0)
    v17 = -1;
  if (v17 != v6 - v9)
  {
    v22 = v3;
    if ((v7 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v47[0] = 0;
  v47[1] = 0;
  v46 = v47;
  std::string::basic_string[abi:ne180100]<0>(v44, "json");
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  Espresso::load_jsfile(&v42, (uint64_t)&__p, v44, 0);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  v19 = v42;
  if (v42)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "properties");
    v20 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, &__p);
    v21 = v20;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p);
      if (!v21)
      {
LABEL_50:
        resolve_url_from_net_properties_and_path((uint64_t)&v46, v3, v5);
        v24 = (NSURL *)objc_claimAutoreleasedReturnValue();
        goto LABEL_51;
      }
    }
    else if (!v20)
    {
      goto LABEL_50;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "properties");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v19 + 120))(&v37, v19, &__p);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
    __p = 0;
    v40 = 0;
    v41 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v37 + 32))(v37, &__p);
    v25 = (__int128 *)__p;
    v26 = v40;
    if (__p != v40)
    {
      do
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v37 + 112))(&v35, v37, v25);
        v52 = v25;
        v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, v25, (uint64_t)&std::piecewise_construct, &v52);
        v28 = v27 + 7;
        if (*((char *)v27 + 79) < 0)
          operator delete((void *)*v28);
        *(_OWORD *)v28 = v35;
        v28[2] = v36;
        v25 = (__int128 *)((char *)v25 + 24);
      }
      while (v25 != v26);
    }
    *(_QWORD *)&v35 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    v29 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    goto LABEL_50;
  }
  v24 = v3;
LABEL_51:
  v22 = v24;
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v46, v47[0]);
  if ((v49 & 0x80) != 0)
LABEL_33:
    operator delete(v48[0]);
LABEL_34:
  if ((char)v51 < 0)
    operator delete(v50[0]);

  return v22;
}

void sub_1918232C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  a9 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a30 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a31, a32);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v42 - 81) < 0)
    operator delete(*(void **)(v42 - 104));

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::standard_ane_cache_client::exists_in_cache(id *this, NSURL *a2, BOOL *a3)
{
  NSURL *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  Espresso *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v16;
  int v17;
  void *v18;
  __int16 v19;
  _BOOL4 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = objc_opt_respondsToSelector();
  if ((v6 & 1) != 0)
  {
    v8 = (void *)MEMORY[0x19401D4A4]();
    objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURL:key:", v5, *MEMORY[0x1E0CFE0B0]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (Espresso *)objc_msgSend(this[1], "compiledModelExistsFor:", v9);
    *a3 = (char)v10;
    Espresso::espresso_os_log_subsystem(v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v16 = *a3;
      v17 = 138412546;
      v18 = v9;
      v19 = 1024;
      v20 = v16;
      _os_log_debug_impl(&dword_190DAF000, v12, OS_LOG_TYPE_DEBUG, "compiledModelExistsFor:ane_model=%@ exists=%D", (uint8_t *)&v17, 0x12u);
    }

    objc_autoreleasePoolPop(v8);
    v13 = 0;
  }
  else
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v17) = 0;
      _os_log_error_impl(&dword_190DAF000, v14, OS_LOG_TYPE_ERROR, "ANE model purge selector is not available", (uint8_t *)&v17, 2u);
    }

    v13 = 0xFFFFFFFFLL;
  }

  return v13;
}

void sub_19182354C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::standard_ane_cache_client::purge_from_cache(id *this, NSURL *a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x19401D4A4]();
  objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURL:key:", a2, CFSTR("com.apple.appleneuralengine._ANEModel.AllSegments"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[1], "purgeCompiledModel:", v5);

  objc_autoreleasePoolPop(v4);
  return 0;
}

void sub_1918235E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::standard_ane_cache_client::~standard_ane_cache_client(id *this)
{

}

{

  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  std::__shared_weak_count *v7;
  std::string *v8;
  uint64_t v9;
  const Espresso::net_compiler_segment_based::segment_t *v10;
  uint64_t *v11;
  std::string *v12;
  char *v13;
  const void *v14;
  std::string *v15;
  std::string *v16;
  unint64_t *p_size;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t (***v33)(_QWORD);
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *end;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  int v46;
  unint64_t v47;
  std::string *v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void **p_begin;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::string *v74;
  id v75;
  uint64_t qos;
  uint64_t v77;
  void *v78;
  Espresso *v79;
  const char *v80;
  NSObject *v81;
  std::string *v82;
  int v83;
  void *v84;
  void *v85;
  void *v86;
  char v87;
  id v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void *v114;
  char v115;
  void *v116;
  uint64_t v117;
  std::runtime_error *exception;
  const char *v119;
  std::string *v120;
  dispatch_block_t v121;
  id v122;
  id v123;
  std::string *val;
  id v125;
  id v126;
  id v127;
  _QWORD v128[4];
  std::string *v129;
  id v130;
  id v131;
  id v132[2];
  void **v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  char *v137;
  std::__shared_weak_count *v138;
  id location;
  _QWORD *v140;
  std::__shared_weak_count *v141;
  _QWORD block[4];
  id v143;
  uint64_t v144;
  uint64_t v145;
  std::string *v146;
  uint64_t v147;
  void **v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t v152;
  std::vector<std::string> *v153;
  std::__shared_weak_count *v154;
  std::vector<std::string> __p[2];
  std::vector<std::string> v156;
  std::string *v157;
  std::string *v158;
  std::string *v159;
  std::__shared_weak_count *v160;
  char v161[4];
  int v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  std::vector<std::string> buf;
  std::vector<std::string> v168;
  std::vector<std::string> v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v122 = a3;
  v123 = a4;
  v161[0] = 1;
  v163 = 0u;
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  v162 = 723714936;
  kdebug_trace();
  v159 = 0;
  v160 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7 || (v160 = std::__shared_weak_count::lock(v7)) == 0 || (v8 = *(std::string **)(a1 + 8), (v159 = v8) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v9 = *(_QWORD *)(a1 + 392);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 24) == 1)
    {
      v10 = *(const Espresso::net_compiler_segment_based::segment_t **)(a1 + 32);
      goto LABEL_8;
    }
    v119 = "Only supported for one-segment multi-head networks";
LABEL_152:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v119);
  }
  v10 = *(const Espresso::net_compiler_segment_based::segment_t **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - (_QWORD)v10 != 120)
  {
    v119 = "Only supported for one-segment networks";
    goto LABEL_152;
  }
LABEL_8:
  v11 = (uint64_t *)*((_QWORD *)v10 + 4);
  if (v11)
  {
    do
    {
      v12 = (std::string *)(v11 + 2);
      buf.__begin_ = (std::vector<std::string>::pointer)(v11 + 2);
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v159[5].__r_.__value_.__r.__words[2], (unsigned __int8 *)v11 + 16, (__int128 **)&buf);
      v14 = (const void *)*((_QWORD *)v13 + 5);
      if (!v14
      {
        *(_OWORD *)&__p[0].__begin_ = 0uLL;
        if (*((char *)v11 + 39) < 0)
          v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        buf.__begin_ = v12;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Unexpected null blob for name %s", &buf);
      }
      v16 = (std::string *)*((_QWORD *)v13 + 6);
      __p[0].__begin_ = v15;
      __p[0].__end_ = v16;
      if (v16)
      {
        p_size = &v16->__r_.__value_.__l.__size_;
        do
          v18 = __ldxr(p_size);
        while (__stxr(v18 + 1, p_size));
        if (HIDWORD(v15[7].__r_.__value_.__r.__words[1]) != 1)
LABEL_147:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Only supported for batch=1");
        do
          v19 = __ldaxr(p_size);
        while (__stlxr(v19 - 1, p_size));
        if (!v19)
        {
          (*(void (**)(std::string *))(v16->__r_.__value_.__r.__words[0] + 16))(v16);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
        }
      }
      else if (HIDWORD(v15[7].__r_.__value_.__r.__words[1]) != 1)
      {
        goto LABEL_147;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
    v8 = v159;
  }
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v8[1].__r_.__value_.__l.__size_ + 16 * *(_QWORD *)v10) + 64);
    v21 = *(std::string **)(v20 + 8);
    v22 = *(std::string **)(v20 + 16);
    buf.__begin_ = v21;
    buf.__end_ = v22;
    if (v22)
    {
      v23 = &v22->__r_.__value_.__l.__size_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(std::string **__return_ptr))v21->__r_.__value_.__l.__data_)(&v157);
    v25 = v157;
    v26 = v158;
    v157[3].__r_.__value_.__l.__size_ = *(_QWORD *)(*a2 + 80);
    __p[0].__end_ = v8;
    __p[0].__end_cap_.__value_ = v25;
    __p[1].__begin_ = v26;
    if (v26)
    {
      v27 = &v26->__r_.__value_.__l.__size_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    LOBYTE(__p[1].__end_) = 0;
    if (*(_QWORD *)v10)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        v31 = (uint64_t)v159;
        if (v159[56].__r_.__value_.__s.__data_[8])
        {
          v32 = std::string::compare((const std::string *)(*(_QWORD *)(v159[1].__r_.__value_.__l.__size_ + v29) + 40), "context_transfer");
          v31 = (uint64_t)v159;
          if (v32)
          {
            v33 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v159[1].__r_.__value_.__l.__size_
                                                                                         + v29)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
            v34 = (**v33)(v33);
            JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)__p, v34);
            v31 = (uint64_t)v159;
          }
        }
        (*(void (**)(_QWORD, std::string **, unint64_t))(**(_QWORD **)(*(_QWORD *)(v31 + 32) + v29)
                                                                         + 8))(*(_QWORD *)(*(_QWORD *)(v31 + 32) + v29), &v157, v30++);
        v29 += 16;
      }
      while (v30 < *(_QWORD *)v10);
      v25 = v157;
    }
    (*(void (**)(std::string *))(v25->__r_.__value_.__r.__words[0] + 16))(v25);
    (*(void (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 24))(v157);
    JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)__p);
    v35 = (std::__shared_weak_count *)v158;
    if (v158)
    {
      v36 = &v158->__r_.__value_.__l.__size_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    end = (std::__shared_weak_count *)buf.__end_;
    if (buf.__end_)
    {
      v39 = &buf.__end_->__r_.__value_.__l.__size_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
        std::__shared_weak_count::__release_weak(end);
      }
    }
  }
  v41 = *((_QWORD *)v10 + 1);
  v157 = 0;
  v158 = 0;
  memset(&v156, 0, sizeof(v156));
  memset(__p, 0, sizeof(__p));
  v42 = *(_QWORD *)(a1 + 392);
  if (!v42)
  {
    v48 = (std::string *)Espresso::ANERuntimeEngine::compiler::create_ane_request((Espresso::ANERuntimeEngine::compiler *)a1, (uint64_t)a2, &v159, 0, v10, 0);
    goto LABEL_57;
  }
  Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs((Espresso *)&buf, v42, *a2, 0, (uint64_t)v159);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  __p[0] = buf;
  memset(&buf, 0, sizeof(buf));
  std::vector<std::string>::__vdeallocate(&__p[1]);
  __p[1] = v168;
  memset(&v168, 0, sizeof(v168));
  std::vector<std::string>::__vdeallocate(&v156);
  v156 = v169;
  memset(&v169, 0, sizeof(v169));
  v153 = &v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  v153 = &v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  if (buf.__begin_)
  {
    buf.__end_ = buf.__begin_;
    operator delete(buf.__begin_);
  }
  if (__p[0].__begin_ != __p[0].__end_)
  {
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8);
    v44 = *(int **)(v43 + 40);
    v45 = *(int **)(v43 + 48);
    while (v44 != v45)
    {
      v46 = *v44++;
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120 * v46 + 8);
      if (v41 <= v47)
        v41 = v47;
    }
    v48 = (std::string *)Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination((uint64_t **)a1, (uint64_t)a2, &v159, (int **)__p, 0);
LABEL_57:
    v50 = v48;
    v51 = v49;
    v157 = v48;
    v158 = v49;
    v52 = *(_QWORD *)(*a2 + 80);
    v53 = (char *)operator new(0x38uLL);
    v54 = (std::__shared_weak_count *)v53;
    *((_QWORD *)v53 + 1) = 0;
    v55 = (unint64_t *)(v53 + 8);
    *((_QWORD *)v53 + 2) = 0;
    *(_QWORD *)v53 = &off_1E2DB5858;
    *(_OWORD *)(v53 + 40) = 0u;
    *(_OWORD *)(v53 + 24) = 0u;
    v153 = (std::vector<std::string> *)(v53 + 24);
    v154 = (std::__shared_weak_count *)v53;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    v57 = (unint64_t *)(v53 + 16);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    *((_QWORD *)v53 + 3) = v53 + 24;
    *((_QWORD *)v53 + 4) = v53;
    do
      v59 = __ldaxr(v55);
    while (__stlxr(v59 - 1, v55));
    if (!v59)
    {
      (*(void (**)(char *))(*(_QWORD *)v53 + 16))(v53);
      std::__shared_weak_count::__release_weak(v54);
    }
    v60 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke;
    block[3] = &unk_1E2DC3C10;
    v144 = a1;
    v145 = a1;
    v146 = v8;
    v147 = v52;
    p_begin = (void **)&v153->__begin_;
    v61 = v154;
    v148 = (void **)&v153->__begin_;
    v149 = v154;
    if (v154)
    {
      p_shared_owners = (unint64_t *)&v154->__shared_owners_;
      do
        v64 = __ldxr(p_shared_owners);
      while (__stxr(v64 + 1, p_shared_owners));
    }
    v150 = (uint64_t)v159;
    v151 = v160;
    if (v160)
    {
      v65 = (unint64_t *)&v160->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v143 = v123;
    v152 = v41;
    v121 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    val = v51;
    ++*(_QWORD *)(a1 + 304);
    v67 = (char *)operator new(0x58uLL);
    *((_QWORD *)v67 + 1) = 0;
    v68 = (unint64_t *)(v67 + 8);
    *((_QWORD *)v67 + 2) = 0;
    *(_OWORD *)(v67 + 24) = 0u;
    *(_QWORD *)v67 = &off_1E2DB5900;
    *(_OWORD *)(v67 + 40) = 0u;
    *(_OWORD *)(v67 + 56) = 0u;
    *(_OWORD *)(v67 + 72) = 0u;
    v140 = v67 + 24;
    v141 = (std::__shared_weak_count *)v67;
    std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)&v140, v140, (uint64_t)v140);
    Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path((_QWORD *)a1, (uint64_t)(v67 + 64));
    v120 = v50;
    Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(a1, (id *)&v157);
    objc_initWeak(&location, val);
    v128[0] = v60;
    v128[1] = 3321888768;
    v128[2] = ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke_106;
    v128[3] = &unk_1E2DC3C80;
    v132[1] = (id)a1;
    v133 = p_begin;
    v134 = v61;
    if (v61)
    {
      v69 = (unint64_t *)&v61->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v135 = (uint64_t)v159;
    v136 = v160;
    if (v160)
    {
      v71 = (unint64_t *)&v160->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    objc_copyWeak(v132, &location);
    v137 = v67 + 24;
    v138 = (std::__shared_weak_count *)v67;
    do
      v73 = __ldxr(v68);
    while (__stxr(v73 + 1, v68));
    v74 = v120;
    v129 = v74;
    v130 = v122;
    v75 = v121;
    v131 = v75;
    unk_1EE2290A8(val, "setCompletionHandler:", v128, &v135, &v133, &v137);
    if (*(_BYTE *)(a1 + 289))
    {
      if (*(_DWORD *)(a1 + 292))
      {
LABEL_81:
        qos = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
        goto LABEL_84;
      }
    }
    else if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 139))
    {
      goto LABEL_81;
    }
    qos = objc_msgSend(MEMORY[0x1E0CFDF88], "aneRealTimeTaskQoS");
LABEL_84:
    v77 = qos;
    objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", v74);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = (Espresso *)kdebug_trace();
    if (*(_BYTE *)(a1 + 296))
    {
      Espresso::espresso_os_log_subsystem(v79, v80);
      v81 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        v82 = (std::string *)((char *)v159 + 592);
        if (v159[25].__r_.__value_.__s.__data_[15] < 0)
          v82 = (std::string *)v82->__r_.__value_.__r.__words[0];
        v83 = *(unsigned __int8 *)(a1 + 200);
        LODWORD(buf.__begin_) = 136315650;
        *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = v82;
        WORD2(buf.__end_) = 1024;
        *(_DWORD *)((char *)&buf.__end_ + 6) = v77;
        WORD1(buf.__end_cap_.__value_) = 1024;
        HIDWORD(buf.__end_cap_.__value_) = v83;
        _os_log_impl(&dword_190DAF000, v81, OS_LOG_TYPE_INFO, "[forward_single_ane_segment] ane_evaluate: net=%s qos=%d is_in_memory_model=%d", (uint8_t *)&buf, 0x18u);
      }

    }
    v84 = *(void **)(a1 + 192);
    if (*(_BYTE *)(a1 + 200))
    {
      objc_msgSend(v84, "objectForKeyedSubscript:", v74);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = v85;
      if (!v85)
      {
        buf.__begin_ = (std::vector<std::string>::pointer)unk_1EE2290B0(objc_retainAutorelease(v74), "UTF8String");
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", &buf);
      }
      v127 = 0;
      v87 = objc_msgSend(v85, "evaluateWithQoS:options:request:error:", v77, v78, val, &v127);
      v88 = v127;

      if ((v87 & 1) != 0)
        goto LABEL_93;
      goto LABEL_143;
    }
    objc_msgSend(v84, "objectForKeyedSubscript:", v74);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v113)
    {
      buf.__begin_ = (std::vector<std::string>::pointer)unk_1EE2290B8(objc_retainAutorelease(v74), "UTF8String");
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", &buf);
    }
    if (*(_BYTE *)(a1 + 289))
    {
      if (*(_DWORD *)(a1 + 292))
      {
LABEL_139:
        v114 = *(void **)(a1 + 136);
        v125 = 0;
        v115 = objc_msgSend(v114, "evaluateWithModel:options:request:qos:error:", v113, v78, val, Espresso::ANERuntimeEngine::compiler::get_qos(a1), &v125);
        v88 = v125;

        goto LABEL_142;
      }
    }
    else if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 139))
    {
      goto LABEL_139;
    }
    v116 = *(void **)(a1 + 136);
    v126 = 0;
    v115 = objc_msgSend(v116, "evaluateRealTimeWithModel:options:request:error:", v113, v78, val, &v126);
    v88 = v126;

LABEL_142:
    if ((v115 & 1) != 0)
    {
LABEL_93:

      v89 = v138;
      if (v138)
      {
        v90 = (unint64_t *)&v138->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      objc_destroyWeak(v132);
      v92 = v136;
      if (v136)
      {
        v93 = (unint64_t *)&v136->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = v134;
      if (v134)
      {
        v96 = (unint64_t *)&v134->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      objc_destroyWeak(&location);

      v98 = v141;
      if (v141)
      {
        v99 = (unint64_t *)&v141->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }

      v101 = v151;
      if (v151)
      {
        v102 = (unint64_t *)&v151->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = v149;
      if (v149)
      {
        v105 = (unint64_t *)&v149->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = v154;
      if (v154)
      {
        v108 = (unint64_t *)&v154->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      goto LABEL_128;
    }
LABEL_143:
    objc_msgSend(v88, "localizedDescription");
    v117 = objc_claimAutoreleasedReturnValue();
    Espresso::throw_exception_selector<Espresso::invalid_state_error,NSString * {__strong}>(v117);
  }
LABEL_128:
  buf.__begin_ = (std::vector<std::string>::pointer)&v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__begin_ = (std::vector<std::string>::pointer)&__p[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }

  v110 = v160;
  if (v160)
  {
    v111 = (unint64_t *)&v160->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v161);

}

void sub_191824318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  char a66;
  char a68;
  void *v68;
  id *v69;
  void *v70;
  void *v72;
  void *v73;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
  objc_destroyWeak(v69);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  v73 = (void *)a64;
  v72 = (void *)a65;
  objc_destroyWeak(&location);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  Espresso::analysis_ane_multi_head::runtime_segment_combination_t::~runtime_segment_combination_t((Espresso::analysis_ane_multi_head::runtime_segment_combination_t *)&a55);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a68);

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)(_QWORD);
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint8_t buf[4];
  _BYTE v29[12];
  _QWORD *v30;
  std::__shared_weak_count *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  kdebug_trace();
  v3 = a1[9];
  if (!*(_BYTE *)(v3 + 16))
  {
    if (objc_msgSend(*(id *)(v3 + 24), "code") != 5)
      return (*(uint64_t (**)(void))(a1[4] + 16))();
    Espresso::espresso_os_log_subsystem((Espresso *)5, v22);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = a1[11];
      v25 = (_QWORD *)(v24 + 592);
      if (*(char *)(v24 + 615) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v29 = v25;
      _os_log_error_impl(&dword_190DAF000, v23, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s", buf, 0xCu);
    }

    if (*(_BYTE *)(*(_QWORD *)(v2 + 104) + 140))
      return (*(uint64_t (**)(void))(a1[4] + 16))();
  }
  v4 = a1[11];
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40) - v5;
  v7 = a1[13];
  if (v7 < v6 >> 4)
  {
    (***(void (****)(_QWORD **__return_ptr))(*(_QWORD *)(*(_QWORD *)(v5 + 16 * v7) + 64) + 8))(&v26);
    v8 = v6 >> 4;
    v9 = v26;
    v10 = v27;
    v26[10] = a1[8];
    *(_QWORD *)&v29[4] = a1[7];
    v30 = v9;
    v31 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v32 = 0;
    v13 = a1[13];
    if (v13 < v8)
    {
      v14 = 16 * v13;
      do
      {
        v15 = a1[11];
        if (*(_BYTE *)(v15 + 1352)
          && std::string::compare((const std::string *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + v14) + 40), "context_transfer"))
        {
          v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + v14)
                                                                           + 64)
                                                               + 8)
                                                   + 8);
          v17 = (**v16)(v16);
          JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)buf, v17);
        }
        (*(void (**)(_QWORD, _QWORD **, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 32) + v14) + 8))(*(_QWORD *)(*(_QWORD *)(v4 + 32) + v14), &v26, v13++);
        v14 += 16;
      }
      while (v8 != v13);
      v9 = v26;
    }
    (*(void (**)(_QWORD *))(*v9 + 16))(v9);
    (*(void (**)(_QWORD *))(*v26 + 24))(v26);
    JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)buf);
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void sub_1918247CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(*(_QWORD *)(v11 + 32) + 16))();
    __cxa_end_catch();
    JUMPOUT(0x19182474CLL);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke_106(uint64_t a1, int a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  void *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40[2];
  char v41;
  std::string __p;

  v6 = a3;
  v7 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(v7 + 16) = a2;
  objc_storeStrong((id *)(v7 + 24), a3);
  if (a2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 1240);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 1048))
      {
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
        objc_msgSend(WeakRetained, "perfStats");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          v11 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1240) + 1048);
          v12 = objc_loadWeakRetained((id *)(a1 + 56));
          objc_msgSend(v12, "perfStats");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "hwExecutionTime");
          v15 = v14;
          v16 = (uint64_t *)v11[2];
          v17 = v11[3];
          if ((unint64_t)v16 >= v17)
          {
            v19 = (uint64_t *)v11[1];
            v20 = v16 - v19;
            if ((unint64_t)(v20 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v21 = v17 - (_QWORD)v19;
            v22 = (uint64_t)(v17 - (_QWORD)v19) >> 2;
            if (v22 <= v20 + 1)
              v22 = v20 + 1;
            v23 = v21 >= 0x7FFFFFFFFFFFFFF8;
            v24 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v23)
              v24 = v22;
            if (v24)
            {
              v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
              v19 = (uint64_t *)v11[1];
              v16 = (uint64_t *)v11[2];
            }
            else
            {
              v25 = 0;
            }
            v26 = (uint64_t *)(v24 + 8 * v20);
            v27 = v24 + 8 * v25;
            *v26 = v15;
            v18 = v26 + 1;
            while (v16 != v19)
            {
              v28 = *--v16;
              *--v26 = v28;
            }
            v11[1] = v26;
            v11[2] = v18;
            v11[3] = v27;
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v16 = v14;
            v18 = v16 + 1;
          }
          v11[2] = v18;

        }
        v29 = objc_loadWeakRetained((id *)(a1 + 56));
        objc_msgSend(v29, "perfStatsArray");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          v31 = objc_loadWeakRetained((id *)(a1 + 56));
          objc_msgSend(v31, "perfStatsArray");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v32, "count");

          if (v33)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 104) + 16) = a2;
            v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1240) + 1048);
            std::string::basic_string[abi:ne180100]<0>(v40, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
            v35 = *(_QWORD *)(a1 + 104);
            if (*(char *)(v35 + 63) < 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v35 + 40), *(_QWORD *)(v35 + 48));
            else
              __p = *(std::string *)(v35 + 40);
            std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v34 + 32), (__int128 *)v40);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v41 < 0)
              operator delete(v40[0]);
            v36 = objc_loadWeakRetained((id *)(a1 + 56));
            objc_msgSend(v36, "perfStatsArray");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "objectAtIndexedSubscript:", 0);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "stats");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40[0] = (void *)objc_msgSend(v39, "ioSurface");
            Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)v40, (uint64_t *)(*(_QWORD *)(a1 + 104) + 40));

          }
        }
        else
        {

        }
      }
    }
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 40), *(dispatch_block_t *)(a1 + 48));

}

void sub_191824B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,NSString * {__strong}>(uint64_t a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("ANE request failed: %@", a1);
}

_QWORD *__copy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE104c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[14];
  result[13] = a2[13];
  result[14] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE104c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 72;
  v2 = a1 + 88;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

_QWORD *__copy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 88);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_191824E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_191824FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *Espresso::ANERuntimeEngine::context::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ANE");
}

void Espresso::ANERuntimeEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANERuntimeEngine::context::set_platform_specific_option(Espresso::ANERuntimeEngine::context *this, const char *__s1, int a3)
{
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!strncmp(__s1, "enable_overflow_error", 0x100uLL))
  {
    *((_BYTE *)this + 140) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "compiler_nocache", 0x100uLL))
  {
    *((_BYTE *)this + 138) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "is_direct_path", 0x100uLL))
  {
    *((_BYTE *)this + 139) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "force_use_iofences", 0x100uLL))
  {
    *((_BYTE *)this + 141) = a3 != 0;
    return 1;
  }
  v6 = (Espresso *)strncmp(__s1, "ane_surface_alias", 0x100uLL);
  if (!(_DWORD)v6)
  {
    *((_DWORD *)this + 36) = a3;
    return 1;
  }
  Espresso::espresso_os_log_subsystem(v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315138;
    v11 = __s1;
    _os_log_debug_impl(&dword_190DAF000, v8, OS_LOG_TYPE_DEBUG, "option %s does not exist in ANERuntime Engine", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t Espresso::ANERuntimeEngine::context::is_valid_for_submit(Espresso *a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  Espresso *v20;
  const char *v21;
  BOOL v22;
  _QWORD *v23;
  Espresso *v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  _QWORD *v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  unsigned __int8 *v33;
  const char *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char *v38;
  int v39;
  BOOL v40;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  NSObject *v44;
  uint32_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v53;
  uint64_t v54;
  char *v55;
  int v56;
  void *__p[2];
  char v58;
  void *v59;
  std::__shared_weak_count *v60;
  char v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  std::string buf;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 == 16)
  {
    v4 = (***((uint64_t (****)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 1));
    v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*v2 + 528), v4);
    if (v5)
    {
      v6 = v5;
      v7 = (const void *)v5[3];
      v8 = (std::__shared_weak_count *)v6[4];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v7
      {
        v62 = v11;
        v63 = v8;
        if (!v8)
          goto LABEL_21;
        v12 = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      else
      {
        v62 = 0;
        v63 = 0;
        if (!v8)
          goto LABEL_21;
      }
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
LABEL_21:
    v18 = (***((uint64_t (****)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 1));
    v19 = *v2;
    std::string::basic_string[abi:ne180100]<0>(&v59, "override_valid_for_submit");
    std::string::basic_string[abi:ne180100]<0>(__p, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v19 + 472, (uint64_t)&v59, (uint64_t)__p, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = buf.__r_.__value_.__l.__size_ == 1 && *buf.__r_.__value_.__l.__data_ == 49;
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1 && buf.__r_.__value_.__s.__data_[0] == 49;
    }
    if (v58 < 0)
      operator delete(__p[0]);
    if (v61 < 0)
    {
      operator delete(v59);
      if (v22)
        goto LABEL_33;
    }
    else if (v22)
    {
LABEL_33:
      v15 = 1;
LABEL_80:
      v49 = v63;
      if (v63)
      {
        v50 = (unint64_t *)&v63->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      return v15;
    }
    v23 = v62;
    if (!v62)
    {
      Espresso::espresso_os_log_subsystem(v20, v21);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_190DAF000, v28, OS_LOG_TYPE_INFO, "is_valid_for_submit: Can't use submit, only one segment supported", (uint8_t *)&buf, 2u);
      }

      v15 = 0;
      goto LABEL_80;
    }
    Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&v59, *v2);
    if (v59)
    {
      if (*((_QWORD *)v59 + 3) != 1)
      {
        Espresso::espresso_os_log_subsystem(v24, v25);
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v27 = "is_valid_for_submit: Can't use submit, only one multi-head segment supported";
LABEL_71:
          v44 = v26;
          v45 = 2;
LABEL_72:
          _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, v27, (uint8_t *)&buf, v45);
          goto LABEL_73;
        }
        goto LABEL_73;
      }
    }
    else if (v23[5] - v23[4] != 120)
    {
      Espresso::espresso_os_log_subsystem(v24, v25);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v27 = "is_valid_for_submit: Can't use submit, only one segment supported";
        goto LABEL_71;
      }
LABEL_73:

      goto LABEL_74;
    }
    v29 = (_QWORD *)*v2;
    v30 = *(_QWORD *)(*v2 + 32);
    if (*(_QWORD *)(*v2 + 40) == v30 || *(_DWORD *)(*(_QWORD *)v30 + 8) == v18)
    {
      v31 = v29[80];
      v32 = v29[81];
      if (v31 == v32)
      {
LABEL_51:
        v35 = (unsigned __int8 *)v29[32];
        v36 = (unsigned __int8 *)(v29 + 33);
        if (v35 == (unsigned __int8 *)(v29 + 33))
        {
          v15 = 1;
          goto LABEL_75;
        }
        v15 = 1;
        while (1)
        {
          v37 = *v2 + 136;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v35 + 32);
          v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, v35 + 32, (__int128 **)&buf);
          v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v38 + 5) + 24))(*((_QWORD *)v38 + 5));
          v40 = (v39 - 50000) < 4 || v39 == 20000;
          if (v40 || v39 == 90000)
            break;
          v42 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = *(unsigned __int8 **)v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (unsigned __int8 *)*((_QWORD *)v35 + 2);
              v40 = *(_QWORD *)v43 == (_QWORD)v35;
              v35 = v43;
            }
            while (!v40);
          }
          v35 = v43;
          if (v43 == v36)
            goto LABEL_75;
        }
LABEL_74:
        v15 = 0;
LABEL_75:
        v46 = v60;
        if (v60)
        {
          v47 = (unint64_t *)&v60->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        goto LABEL_80;
      }
      while (1)
      {
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*v2 + 136), (unsigned __int8 *)v31);
        if (v33)
        {
          if (*(Espresso **)(*((_QWORD *)v33 + 5) + 72) != a1)
            break;
        }
        v31 += 24;
        if (v31 == v32)
        {
          v29 = (_QWORD *)*v2;
          goto LABEL_51;
        }
      }
      Espresso::espresso_os_log_subsystem((Espresso *)v33, v34);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        v53 = v31;
        if (*(char *)(v31 + 23) < 0)
          v53 = *(_QWORD *)v31;
        v54 = *v2 + 136;
        __p[0] = (void *)v31;
        v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, (unsigned __int8 *)v31, (__int128 **)__p);
        v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v55 + 5) + 24))(*((_QWORD *)v55 + 5));
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v18;
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v56;
        v27 = "is_valid_for_submit: Can't use ANE submit, input '%s' not on %d, but %d";
        v44 = v26;
        v45 = 24;
        goto LABEL_72;
      }
    }
    else
    {
      Espresso::espresso_os_log_subsystem(v24, v25);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v27 = "is_valid_for_submit: Can't use ANE submit, network should start on ANE";
        goto LABEL_71;
      }
    }
    goto LABEL_73;
  }
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "is_valid_for_submit: Can't use ANE submit, only one network supported", (uint8_t *)&buf, 2u);
  }

  return 0;
}

void sub_1918257FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::ANERuntimeEngine::batch::sync_point(Espresso::ANERuntimeEngine::batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  if (*((_BYTE *)this + 96))
    return (*(uint64_t (**)(Espresso::ANERuntimeEngine::batch *))(*(_QWORD *)this + 24))(this);
  return result;
}

void std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 > (a1[2] - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = a1[1] - *a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
    v5 = &v4[v3];
    v7 = &v4[16 * v6];
    v9 = *a1;
    v8 = a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 2);
        v8 -= 16;
        v12 = *(_QWORD *)(v8 + 5);
        *((_QWORD *)v10 - 2) = v11;
        v10 -= 16;
        *(_QWORD *)(v10 + 5) = v12;
      }
      while (v8 != v9);
      v8 = *a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void ___ZN8Espresso16ANERuntimeEngine5batch17setup_for_networkERNS_3netE_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v3 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("espresso.use_iofences"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::override_use_iofence = 1;
    Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults = objc_msgSend(v1, "BOOLValue");
  }

}

void sub_191825A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB92C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB92C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::engine::~engine(Espresso::ANERuntimeEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB91A8;
  Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6F998;
  v6[39] = &unk_1E2D6FAF8;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191825BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB91A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB91A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9218;
  v7 = Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6FD98;
  v6[45] = &unk_1E2D6FEF8;
  *((_BYTE *)v6 + 569) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191825D80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel((Espresso::generic_non_maximum_suppression_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel((Espresso::generic_non_maximum_suppression_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 544) || *(_BYTE *)(a1 + 545))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(void **this)
{
  Espresso::generic_non_maximum_suppression_kernel *v1;

  v1 = (Espresso::generic_non_maximum_suppression_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
}

{
  Espresso::generic_non_maximum_suppression_kernel *v1;

  v1 = (Espresso::generic_non_maximum_suppression_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8808;
  v9 = Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D69C38;
  v8[41] = &unk_1E2D69D98;
  *((_BYTE *)v8 + 560) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_191825F60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANERuntimeEngine::mix_tile_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D75E80;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D75E80;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 536))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANERuntimeEngine::mix_tile_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D75E80;
  *(_QWORD *)this = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D75E80;
  *(_QWORD *)this = &unk_1E2D75FE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB90C8;
  Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel((uint64_t)(v6 + 3), a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &off_1E2D6F198;
  v6[40] = &unk_1E2D6F2F8;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918261B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB90C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB90C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8840;
  Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D69E38;
  v6[39] = &unk_1E2D69F98;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191826384(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::plane_rw_kernel::~plane_rw_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::plane_rw_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::plane_rw_kernel::~plane_rw_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8C30;
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6C4D0;
  v6[39] = &unk_1E2D6C630;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191826554(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_stack_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB91E0;
  Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel((uint64_t)(v6 + 3), a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &off_1E2D6FB98;
  v6[40] = &unk_1E2D6FCF8;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191826728(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB91E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB91E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_squeeze_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 632) || *(_BYTE *)(a1 + 633))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 424), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_squeeze_kernel::~mix_squeeze_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 53);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 53);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_expand_dims_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 624) || *(_BYTE *)(a1 + 625))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 416), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 52);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 52);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(_QWORD *a1@<X1>, __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8FB0;
  Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6E6C8;
  v6[39] = &unk_1E2D6E828;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191826AF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*(_BYTE *)(a1 + 752) || *(_BYTE *)(a1 + 842))
    Espresso::ANECompilerEngine::inner_product_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANERuntimeEngine::mix_inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANERuntimeEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANERuntimeEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x2B0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8BF8;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6C248;
  v6[56] = &unk_1E2D6C430;
  *((_BYTE *)v6 + 680) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191826E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANERuntimeEngine::mix_deconv3d_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D78CF8;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D78CF8;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_deconv3d_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 632) || *((_BYTE *)a1 + 656))
    Espresso::ANECompilerEngine::mix_deconv3d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANERuntimeEngine::mix_deconv3d_kernel *this)
{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D78CF8;
  *(_QWORD *)this = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D78CF8;
  *(_QWORD *)this = &unk_1E2D78EE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8FE8;
  Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6E8C8;
  v6[40] = &unk_1E2D6EA28;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918270D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8AE0;
  Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6B848;
  v6[39] = &unk_1E2D6B9A8;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918272A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_flatten_kernel::~mix_flatten_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_flatten_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_flatten_kernel::~mix_flatten_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8798;
  Espresso::ANECompilerEngine::crop_kernel::crop_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D697F8;
  v6[40] = &unk_1E2D69958;
  *((_BYTE *)v6 + 552) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191827478(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANERuntimeEngine::mix_crop_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_crop_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 528))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANERuntimeEngine::mix_crop_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x2B0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8990;
  Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6AA90;
  v6[56] = &unk_1E2D6AC78;
  *((_BYTE *)v6 + 680) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918276C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANERuntimeEngine::mix_conv3d_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D77330;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D77330;
  v2 = (void **)((char *)this + 424);
  *((_QWORD *)this + 53) = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_conv3d_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 632) || *((_BYTE *)a1 + 656))
    Espresso::ANECompilerEngine::mix_conv3d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANERuntimeEngine::mix_conv3d_kernel *this)
{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D77330;
  *(_QWORD *)this = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

{
  Espresso::generic_conv3d_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((_QWORD *)this - 53) = &off_1E2D77330;
  *(_QWORD *)this = &unk_1E2D77518;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8A00;
  Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6AF18;
  v6[46] = &unk_1E2D6B078;
  *((_BYTE *)v6 + 577) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191827908(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_pool3d_kernel::~mix_pool3d_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_pool3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 552) || *(_BYTE *)(a1 + 553))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 344), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_pool3d_kernel::~mix_pool3d_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8DB8;
  Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6D4B0;
  v6[39] = &unk_1E2D6D610;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191827AD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_softmax_kernel::~mix_softmax_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_softmax_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 520) || *(_BYTE *)(a1 + 528))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 312), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_softmax_kernel::~mix_softmax_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_pool_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 640) || *((_BYTE *)a1 + 641))
    Espresso::ANECompilerEngine::pool_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_pool_kernel::~mix_pool_kernel(void **this)
{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB87D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB87D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_elementwise_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 544) || *(_BYTE *)(a1 + 632))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANERuntimeEngine::mix_elementwise_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9020;
  Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6EAC8;
  v6[44] = &unk_1E2D6EC28;
  *((_BYTE *)v6 + 561) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191828030(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_reshape_like_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 536) || *(_BYTE *)(a1 + 537))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 328), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8B18;
  Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6BA48;
  v6[43] = &unk_1E2D6BBA8;
  *((_BYTE *)v6 + 554) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191828200(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_reshape_kernel::~mix_reshape_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_reshape_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 528) || *(_BYTE *)(a1 + 530))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reshape_kernel::~mix_reshape_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_reduce_kernel::~mix_reduce_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_reduce_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 536) || *(_BYTE *)(a1 + 537))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 328), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reduce_kernel::~mix_reduce_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  __n128 result;

  v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8CD8;
  Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v9;
  *((_BYTE *)v8 + 336) = *(_BYTE *)(a2 + 32);
  v8[3] = &off_1E2D6CC48;
  v8[43] = &unk_1E2D6CDA8;
  *((_BYTE *)v8 + 564) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_191828528(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_broadcast_kernel::~mix_broadcast_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_broadcast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 528) || *(_BYTE *)(a1 + 540))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_broadcast_kernel::~mix_broadcast_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::mix_activation_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  if (*((_BYTE *)a1 + 600) || *((_BYTE *)a1 + 640))
    Espresso::ANECompilerEngine::activation_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANERuntimeEngine::mix_activation_kernel *this)
{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D7A1C8;
  *(_QWORD *)this = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)v2 = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D7A1C8;
  *(_QWORD *)this = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)v2 = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9170;
  Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6F798;
  v6[45] = &unk_1E2D6F8F8;
  *((_BYTE *)v6 + 569) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182889C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  if (*(_BYTE *)(a1 + 544) || *(_BYTE *)(a1 + 545))
  {
    Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob((void *)a1, a2, a3, a4, a5);
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
  }
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(void **this)
{
  Espresso::generic_instancenorm_1d_kernel *v1;

  v1 = (Espresso::generic_instancenorm_1d_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
}

{
  Espresso::generic_instancenorm_1d_kernel *v1;

  v1 = (Espresso::generic_instancenorm_1d_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8E28;
  Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6D8B0;
  v6[40] = &unk_1E2D6DA10;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191828AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::stir_gather_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8D10;
  Espresso::ANECompilerEngine::stir_resample_kernel::stir_resample_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6CE48;
  v6[42] = &unk_1E2D6CFA8;
  *((_BYTE *)v6 + 545) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191828C88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::stir_resample_kernel::~stir_resample_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::stir_resample_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 520) || *(_BYTE *)(a1 + 521))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 312), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_resample_kernel::~stir_resample_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9250;
  Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6FF98;
  v6[40] = &unk_1E2D700F8;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191828E58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9288;
  Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D70198;
  v6[41] = &unk_1E2D702F8;
  *((_BYTE *)v6 + 537) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 513))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8F78;
  Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6E4C8;
  v6[42] = &unk_1E2D6E628;
  *((_BYTE *)v6 + 545) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918291F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_array_gather_kernel::~mix_array_gather_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_array_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 520) || *(_BYTE *)(a1 + 521))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 312), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_array_gather_kernel::~mix_array_gather_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB89C8;
  Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6AD18;
  v6[41] = &unk_1E2D6AE78;
  *((_BYTE *)v6 + 537) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918293C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_gather_kernel::~mix_gather_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 513))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_gather_kernel::~mix_gather_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB89C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB89C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x278uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9100;
  Espresso::ANECompilerEngine::general_slice_kernel::general_slice_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6F398;
  v8[51] = &unk_1E2D6F4F8;
  *((_BYTE *)v8 + 624) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1918295A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::stir_general_slice_kernel::~stir_general_slice_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::stir_general_slice_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 592) || *(_BYTE *)(a1 + 600))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 384), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_general_slice_kernel::~stir_general_slice_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::stir_slice_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 513))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::stir_slice_kernel::~stir_slice_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x258uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9138;
  Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::mix_crop_and_resize_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6F598;
  v6[48] = &unk_1E2D6F6F8;
  *((_BYTE *)v6 + 593) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829878(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 45);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 45);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 568) || *(_BYTE *)(a1 + 569))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 360), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 45);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 45);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8920;
  Espresso::ANECompilerEngine::mix_topk_kernel::mix_topk_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6A690;
  v6[40] = &unk_1E2D6A7F0;
  *((_BYTE *)v6 + 529) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829A48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::chop_topk_kernel::~chop_topk_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::chop_topk_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::chop_topk_kernel::~chop_topk_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_topk_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8BC0;
  Espresso::ANECompilerEngine::chop_argsort_kernel::chop_argsort_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6C048;
  v6[39] = &unk_1E2D6C1A8;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::chop_argsort_kernel::~chop_argsort_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::chop_argsort_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::chop_argsort_kernel::~chop_argsort_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::chop_argsort_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  unint64_t v8;
  __n128 result;
  _OWORD v10[2];
  uint64_t v11;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8DF0;
  v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  v11 = *(_QWORD *)(a2 + 32);
  Espresso::ANECompilerEngine::space_to_batch_kernel::space_to_batch_kernel((uint64_t)(v6 + 3), a1, (uint64_t)v10);
  v6[3] = &off_1E2D6D6B0;
  v6[43] = &unk_1E2D6D810;
  *((_BYTE *)v6 + 553) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::space_to_batch_kernel::~space_to_batch_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::space_to_batch_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 528) || *(_BYTE *)(a1 + 529))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::space_to_batch_kernel::~space_to_batch_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::space_to_batch_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8958;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6A890;
  v6[41] = &unk_1E2D6A9F0;
  *((_BYTE *)v6 + 560) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191829FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::transpose_kernel::~transpose_kernel(Espresso::ANERuntimeEngine::transpose_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76ED8;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76ED8;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::transpose_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 536))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::transpose_kernel::~transpose_kernel(Espresso::ANERuntimeEngine::transpose_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::transpose_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D76ED8;
  *(_QWORD *)this = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::transpose_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D76ED8;
  *(_QWORD *)this = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8760;
  Espresso::ANECompilerEngine::degamma_kernel::degamma_kernel((uint64_t)(v6 + 3), a1, *a2);
  v6[3] = &off_1E2D695F8;
  v6[39] = &unk_1E2D69758;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182A220(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::degamma_kernel::~degamma_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::degamma_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::degamma_kernel::~degamma_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::degamma_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x2B8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9090;
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::tunneled_ane_unit_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6EF98;
  v8[60] = &unk_1E2D6F0F8;
  *((_BYTE *)v8 + 689) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19182A400(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 57);
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 57);
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 664) || *(_BYTE *)(a1 + 665))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 456), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(void **this)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 57);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 57);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_unit_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x320uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8F40;
  Espresso::ANECompilerEngine::tunneled_ane_op_kernel::tunneled_ane_op_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6E2C8;
  v8[73] = &unk_1E2D6E428;
  *((_BYTE *)v8 + 793) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19182A630(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 70);
  *this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(this + 35));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 70);
  *this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(this + 35));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::tunneled_ane_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 769))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 560), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(void **this)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 70);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 70);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tunneled_ane_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB85A0;
  Espresso::ANECompilerEngine::fill_kernel::fill_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68880;
  v6[43] = &unk_1E2D689E0;
  *((_BYTE *)v6 + 553) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182A850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::fill_kernel::~fill_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::fill_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 528) || *(_BYTE *)(a1 + 529))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::fill_kernel::~fill_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB85A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB85A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  char *v7;
  __n128 result;

  v6 = operator new(0x268uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB86F0;
  v7 = Espresso::ANECompilerEngine::einsum_kernel::einsum_kernel((char *)v6 + 24, a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D69318;
  *((_QWORD *)v6 + 50) = &unk_1E2D69478;
  *((_BYTE *)v6 + 609) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182AA20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::einsum_kernel::~einsum_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 47);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel((Espresso::generic_einsum_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 47);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel((Espresso::generic_einsum_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::einsum_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 584) || *(_BYTE *)(a1 + 585))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 376), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::einsum_kernel::~einsum_kernel(void **this)
{
  Espresso::generic_einsum_kernel *v1;

  v1 = (Espresso::generic_einsum_kernel *)(this - 47);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
}

{
  Espresso::generic_einsum_kernel *v1;

  v1 = (Espresso::generic_einsum_kernel *)(this - 47);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB86F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB86F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::einsum_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x318uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8F08;
  v7 = Espresso::ANECompilerEngine::tensor_zero_pad_kernel::tensor_zero_pad_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6E0C8;
  v6[72] = &unk_1E2D6E228;
  *((_BYTE *)v6 + 785) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182ABF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 69);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 69);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::tensor_zero_pad_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 760) || *(_BYTE *)(a1 + 761))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 552), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 69);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 69);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::tensor_zero_pad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  __n128 result;

  v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8E60;
  Espresso::ANECompilerEngine::general_padding_kernel::general_padding_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6DAB0;
  v8[48] = &unk_1E2D6DC18;
  *((_BYTE *)v8 + 620) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19182ADD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANERuntimeEngine::general_padding_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D7AC30;
  v2 = (void **)((char *)this + 360);
  *((_QWORD *)this + 45) = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D7AC30;
  v2 = (void **)((char *)this + 360);
  *((_QWORD *)this + 45) = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::general_padding_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 568) || *(_BYTE *)(a1 + 596))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 360), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANERuntimeEngine::general_padding_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::general_padding_kernel *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_1E2D7AC30;
  *(_QWORD *)this = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::general_padding_kernel *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_1E2D7AC30;
  *(_QWORD *)this = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::general_concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::general_concat_kernel::~general_concat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8530;
  Espresso::ANECompilerEngine::cast_kernel::cast_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68480;
  v6[39] = &unk_1E2D685E0;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182B120(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::cast_kernel::~cast_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::cast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::cast_kernel::~cast_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::cast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x2A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB85D8;
  Espresso::ANECompilerEngine::pool_kernel::pool_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D68A80;
  v6[57] = &unk_1E2D68C20;
  *((_BYTE *)v6 + 665) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19182B2F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::pool_kernel::~pool_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::pool_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 640) || *((_BYTE *)a1 + 641))
    Espresso::ANECompilerEngine::pool_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::pool_kernel::~pool_kernel(void **this)
{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB85D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB85D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::dev_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 624) || *(_BYTE *)(a1 + 625))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 416), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  void **v1;

  v1 = this - 52;
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
}

{
  void **v1;

  v1 = this - 52;
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::split_nd_kernel::~split_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 100);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 100);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::split_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 1008) || *(_BYTE *)(a1 + 1016))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 800), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::split_nd_kernel::~split_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 100);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 100);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::split_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 544) || *(_BYTE *)(a1 + 576))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::split_kernel::~split_kernel(Espresso::ANERuntimeEngine::split_kernel *this)
{
  Espresso::base_kernel *v2;
  void *v3;

  v2 = (Espresso::ANERuntimeEngine::split_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D74760;
  *(_QWORD *)this = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;
  void *v3;

  v2 = (Espresso::ANERuntimeEngine::split_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D74760;
  *(_QWORD *)this = &unk_1E2D748C0;
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void Espresso::ANERuntimeEngine::copy_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::copy_kernel::~copy_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::load_constant_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 592) || *((_BYTE *)a1 + 600))
    Espresso::ANECompilerEngine::load_constant_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::load_constant_kernel::~load_constant_kernel(void **this)
{
  Espresso::generic_load_constant_kernel *v1;

  v1 = (Espresso::generic_load_constant_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);
}

{
  Espresso::generic_load_constant_kernel *v1;

  v1 = (Espresso::generic_load_constant_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::upsample_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 560) || *(_BYTE *)(a1 + 588))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 352), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::upsample_kernel::~upsample_kernel(Espresso::ANERuntimeEngine::upsample_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::upsample_kernel *)((char *)this - 352);
  *((_QWORD *)this - 44) = &off_1E2D76680;
  *(_QWORD *)this = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::upsample_kernel *)((char *)this - 352);
  *((_QWORD *)this - 44) = &off_1E2D76680;
  *(_QWORD *)this = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB88B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB88B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANERuntimeEngine::batchnorm_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76880;
  v2 = (void **)((char *)this + 400);
  *((_QWORD *)this + 50) = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76880;
  v2 = (void **)((char *)this + 400);
  *((_QWORD *)this + 50) = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::batchnorm_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 608) || *((_BYTE *)a1 + 632))
    Espresso::ANECompilerEngine::batchnorm_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void Espresso::ANERuntimeEngine::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 608) || *(_BYTE *)(a1 + 632))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 616), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 616), v3, 0);
    }
  }
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANERuntimeEngine::batchnorm_kernel *this)
{
  Espresso::generic_batchnorm_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::batchnorm_kernel *)((char *)this - 400);
  *((_QWORD *)this - 50) = &off_1E2D76880;
  *(_QWORD *)this = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);
}

{
  Espresso::generic_batchnorm_kernel *v2;

  v2 = (Espresso::ANERuntimeEngine::batchnorm_kernel *)((char *)this - 400);
  *((_QWORD *)this - 50) = &off_1E2D76880;
  *(_QWORD *)this = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB88E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB88E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((_BYTE *)a1 + 768) || *((_BYTE *)a1 + 810))
    Espresso::ANECompilerEngine::deconvolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), v3, 0);
    }
  }
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), v3, 0);
    }
  }
}

uint64_t Espresso::ANERuntimeEngine::deconvolution_kernel::set_weights(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (*(_BYTE *)(result + 768) || *(_BYTE *)(result + 810))
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    Espresso::ANECompilerEngine::deconvolution_kernel::set_weights();
  }
  return result;
}

void sub_19182BFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), v3, 0);
    }
  }
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANERuntimeEngine::deconvolution_kernel *this)
{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D79180;
  *(_QWORD *)this = &unk_1E2D79418;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D79180;
  *(_QWORD *)this = &unk_1E2D79418;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(_BYTE *)(a1 + 552) || *(_BYTE *)(a1 + 553))
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 344), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::concat_kernel::~concat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), v3, 0);
    }
  }
}

uint64_t Espresso::ANERuntimeEngine::convolution_kernel::set_weights(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (*(_BYTE *)(result + 768) || *(_BYTE *)(result + 810))
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    Espresso::ANECompilerEngine::convolution_kernel::set_weights();
  }
  return result;
}

void sub_19182C3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::convolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 768) || *(_BYTE *)(a1 + 810))
  {
    v3 = *a2;
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), v3, (uint64_t)v4);
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), v3, 0);
    }
  }
}

void `non-virtual thunk to'Espresso::ANERuntimeEngine::convolution_kernel::~convolution_kernel(Espresso::ANERuntimeEngine::convolution_kernel *this)
{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D77DB8;
  *(_QWORD *)this = &unk_1E2D78048;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D77DB8;
  *(_QWORD *)this = &unk_1E2D78048;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD block[5];

  v4 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB9330;
  Espresso::abstract_context::abstract_context((uint64_t)(v4 + 24), a2);
  *((_QWORD *)v4 + 3) = &off_1E2D70448;
  *(_DWORD *)(v4 + 162) = 0;
  *((_DWORD *)v4 + 42) = 3;
  v4[96] = 1;
  v4[80] = 1;
  v4[148] = 1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN8Espresso16ANERuntimeEngine7contextC2ERKNSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v4 + 24;
  if (Espresso::ANERuntimeEngine::context::context(std::shared_ptr<Espresso::abstract_engine> const&)::onceToken != -1)
    dispatch_once(&Espresso::ANERuntimeEngine::context::context(std::shared_ptr<Espresso::abstract_engine> const&)::onceToken, block);
  v4[68] = *((_DWORD *)v4 + 42) != 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("espresso.use_iofences"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    v4[165] = objc_msgSend(v7, "BOOLValue");

  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_19182C6F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  id *v2;
  void *v3;
  void *v4;
  void *v6;

  Espresso::abstract_context::~abstract_context(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANERuntimeEngine::direct_engine::~direct_engine(Espresso::ANERuntimeEngine::direct_engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void Espresso::wisdom_trainer2::get_tune(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  void *__p[2];
  char v14;

  if (*(_BYTE *)(a1 + 12))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a5, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(__p, a2, a3, a4);
      v9 = *(_QWORD **)(a1 + 96);
      v7 = (_QWORD *)(a1 + 96);
      v8 = v9;
      if (!v9)
        goto LABEL_12;
      v10 = v7;
      do
      {
        v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, __p);
        v12 = v8 + 1;
        if (!v11)
        {
          v12 = v8;
          v10 = v8;
        }
        v8 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v10 + 4))
      {
LABEL_12:
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      else
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a5, (const void *)v10[7], v10[8], (uint64_t)(v10[8] - v10[7]) >> 2);
      }
      if (v14 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_19182C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::wisdom_trainer2::tune_network(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  const char **v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  void ****v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  char v30;
  void *__p;
  void *v32;
  _QWORD v33[3];
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void **v38;

  v3 = *(uint64_t **)(*(_QWORD *)a2 + 32);
  v4 = *(uint64_t **)(*(_QWORD *)a2 + 40);
  if (v3 != v4)
  {
    v5 = (const char **)(a1 + 32);
    do
    {
      v7 = *v3;
      v6 = (std::__shared_weak_count *)v3[1];
      v36 = *v3;
      v37 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = (void *)MEMORY[0x19401D4A4]();
      v11 = *(_QWORD *)(v7 + 64);
      v12 = *(std::__shared_weak_count **)(v7 + 72);
      v34 = v11;
      v35 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (*(_DWORD *)(a1 + 8))
      {
        v15 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v15 = *(const char **)v15;
        v16 = (const char *)(v7 + 40);
        if (*(char *)(v7 + 63) < 0)
          v16 = *(const char **)v16;
        printf("[wisdom_trainer2] Tuning %s (%s)\n", v15, v16);
        v11 = v34;
      }
      v17 = (void ****)(v7 + 104);
      v18 = (uint64_t **)(v7 + 80);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, void ****, uint64_t **))(*(_QWORD *)v11 + 152))(v33, v11, v17, v18);
      v20 = v33[0];
      v19 = v33[1];
      v38 = (void **)v33;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v38);
      if (v19 != v20)
      {
        Espresso::wisdom_trainer2::tune(a1, &v34, v17, v18, (uint64_t)&v29);
        if (__p)
        {
          v32 = __p;
          operator delete(__p);
        }
        if (v30 < 0)
          operator delete(v29);
      }
      if (*(char *)(a1 + 55) < 0)
      {
        if (!*(_QWORD *)(a1 + 40))
          goto LABEL_30;
        if (!*(_DWORD *)(a1 + 8))
        {
LABEL_28:
          v22 = *v5;
          goto LABEL_29;
        }
        v21 = *v5;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 55))
          goto LABEL_30;
        v21 = (const char *)(a1 + 32);
        v22 = (const char *)(a1 + 32);
        if (!*(_DWORD *)(a1 + 8))
          goto LABEL_29;
      }
      printf("\tsaving %s (tuned=%.2f untuned=%.2f x=%.4f)\n", v21, *(float *)(a1 + 20), *(float *)(a1 + 24), (float)(*(float *)(a1 + 24) / *(float *)(a1 + 20)));
      v22 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        goto LABEL_28;
LABEL_29:
      Espresso::wisdom_trainer2::save((Espresso::wisdom_trainer2 *)a1, v22);
LABEL_30:
      v23 = v35;
      if (v35)
      {
        v24 = (unint64_t *)&v35->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      objc_autoreleasePoolPop(v10);
      v26 = v37;
      if (v37)
      {
        v27 = (unint64_t *)&v37->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
  if (*(_DWORD *)(a1 + 8))
  {
    printf("tuned= %.2f\n", *(float *)(a1 + 20));
    printf("untuned= %.2f\n", *(float *)(a1 + 24));
    printf("speedup= %.4fx\n", (float)(*(float *)(a1 + 24) / *(float *)(a1 + 20)));
  }
}

void sub_19182CC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::wisdom_trainer2::tune(uint64_t a1@<X0>, _QWORD *a2@<X1>, void ****a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  const char *v10;
  _QWORD *i;
  uint64_t v12;
  std::chrono::steady_clock::time_point v13;
  char *v14;
  float v15;
  char **v16;
  uint64_t v17;
  std::string::size_type size;
  std::string::size_type v19;
  BOOL v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void ***v36;
  void ***v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void (***v50)(uint64_t *__return_ptr, _QWORD);
  void ***v51;
  void ***v52;
  void **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::string::size_type v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  __int128 v70;
  int64x2_t v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  float v83;
  uint64_t *v84;
  std::string::size_type v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  float v110;
  std::string::size_type v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float *v122;
  float v123;
  float v124;
  uint64_t j;
  uint64_t v126;
  unint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;
  float v133;
  float v134;
  uint64_t v135;
  float *v136;
  uint64_t v137;
  float v138;
  float v139;
  double v140;
  unint64_t v141;
  uint64_t k;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  const void *v146;
  void **v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int v151;
  int v152;
  float v153;
  void (***v154)(uint64_t *__return_ptr, _QWORD);
  double v155;
  double v156;
  double v157;
  double v158;
  std::chrono::steady_clock::time_point v159;
  uint64_t v160;
  int v161;
  void (***v162)(uint64_t *__return_ptr, _QWORD);
  double v163;
  float v164;
  float v165;
  FILE *v166;
  const char *v167;
  FILE *v168;
  std::string *v169;
  int v171;
  unint64_t v172;
  int *v173;
  int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int *v181;
  int v182;
  int v183;
  _DWORD *v184;
  int *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int *v191;
  int v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  float v196;
  float v197;
  std::string *v198;
  FILE *v199;
  const char *v200;
  FILE *v201;
  std::string *v202;
  uint64_t *v203;
  uint64_t *v204;
  std::string *v205;
  uint64_t **v206;
  float v207;
  char *v208;
  uint64_t v209;
  int v210;
  float v211;
  char *v212;
  void *context;
  unsigned int v214;
  void *v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  uint64_t v220;
  void *v221;
  void *v222;
  uint64_t v223;
  _QWORD v224[8];
  _QWORD v225[9];
  void *v226;
  char v227;
  void **v228;
  std::__shared_weak_count *v229;
  __int128 v230;
  _QWORD v231[7];
  void **v232;
  std::__shared_weak_count *v233;
  std::string *v234;
  std::__shared_weak_count *v235;
  std::string::size_type v236;
  std::string::size_type v237;
  void *__p;
  void *v239;
  uint64_t v240;
  std::string __str;
  void *__src;
  _BYTE *v243;
  uint64_t v244;
  void *v245;
  uint64_t *v246;
  char *v247;
  void *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::string v253;
  char v254;
  __int128 *v255;
  int64x2_t v256;
  std::string::size_type v257;
  std::string::value_type *v258;
  std::string v259;
  uint64_t (*v260)(uint64_t, uint64_t);
  void (*v261)(uint64_t);
  void *v262;
  void *v263;
  __int128 v264;

  *((_QWORD *)&v264 + 1) = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 12) = 1;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void ****, uint64_t **))(*(_QWORD *)*a2 + 152))(&v251, *a2, a3, a4);
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  v209 = a5;
  (*(void (**)(std::string *__return_ptr, _QWORD, void ****, uint64_t **))(*(_QWORD *)*a2 + 144))(&v259, *a2, a3, a4);
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(std::string *)a5 = v259;
  if (*(int *)(a1 + 8) >= 2)
  {
    if (*(char *)(a5 + 23) >= 0)
      v10 = (const char *)a5;
    else
      v10 = *(const char **)a5;
    printf("\tkey = %s\n", v10);
  }
  v206 = (uint64_t **)(a1 + 88);
  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, i + 4))
    {
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(i + 4, (_QWORD *)a5))
      {
        v255 = (__int128 *)a5;
        v204 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v206, (_QWORD *)a5, &v255);
        if ((uint64_t *)a5 != v204 + 4)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a5 + 24), (char *)v204[7], v204[8], (v204[8] - v204[7]) >> 2);
        if (*(int *)(a1 + 8) >= 2)
        {
          v250 = 0;
          v248 = 0;
          v249 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v248, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
          Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&v248, &v259);
          if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v205 = &v259;
          else
            v205 = (std::string *)v259.__r_.__value_.__r.__words[0];
          printf("\tCached %s\n", (const char *)v205);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          if (v248)
          {
            v249 = v248;
            operator delete(v248);
          }
        }
        goto LABEL_327;
      }
      ++i;
    }
  }
  *(_BYTE *)(a1 + 80) = 1;
  v12 = *a2;
  Espresso::abstract_blob_container::shape((char *)&v259, **a4);
  v256 = 0uLL;
  v255 = 0;
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
  v253.__r_.__value_.__s.__data_[8] = 0;
  v255 = (__int128 *)operator new(0x40uLL);
  v256.i64[0] = (uint64_t)v255;
  v256.i64[1] = (uint64_t)(v255 + 4);
  v256.i64[0] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v256.i64[1], (__int128 *)&v259, &v264, (uint64_t)v255);
  v211 = (*(float (**)(uint64_t, __int128 **))(*(_QWORD *)v12 + 136))(v12, &v255);
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  v246 = 0;
  v245 = 0;
  v247 = 0;
  if (Espresso::time_seconds(void)::onceToken != -1)
    dispatch_once(&Espresso::time_seconds(void)::onceToken, &__block_literal_global_71_16339);
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v14 = "EEFbRKNS4_11IROperationEEEE";
  if (((-1431655765 * ((unint64_t)(v252 - v251) >> 3)) & 0x80000000) == 0)
  {
    v212 = (char *)(a1 + 112);
    v208 = (char *)(a5 + 24);
    v15 = 0.0;
    v207 = 0.0;
    v214 = -1;
    v210 = -1;
    while (1)
    {
      context = (void *)MEMORY[0x19401D4A4](v13.__d_.__rep_);
      v243 = 0;
      __src = 0;
      v244 = 0;
      if ((v214 & 0x80000000) == 0)
      {
        v16 = (char **)(v251 + 24 * v214);
        if (&__src != (void **)v16)
        {
          v17 = *(_QWORD *)(v251 + 24 * v214 + 8);
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__src, *v16, v17, (v17 - (uint64_t)*v16) >> 2);
        }
      }
      if (v212 != (char *)&__src)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v212, (char *)__src, (uint64_t)v243, (v243 - (_BYTE *)__src) >> 2);
      if (*(int *)(a1 + 8) >= 2)
      {
        v240 = 0;
        __p = 0;
        v239 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
        Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&__p, &__str);
        std::string::basic_string(&v253, &__str, 0, 0x18uLL, (std::allocator<char> *)&v254);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v253;
        size = HIBYTE(v253.__r_.__value_.__r.__words[2]);
        if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v253.__r_.__value_.__l.__size_;
        v19 = size - 24;
        if (size != 24)
        {
          do
          {
            std::string::append(&__str, " ");
            v20 = __CFADD__(v19++, 1);
          }
          while (!v20);
        }
        v259 = __str;
        memset(&__str, 0, sizeof(__str));
        if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v259;
        else
          v21 = (std::string *)v259.__r_.__value_.__r.__words[0];
        printf("\t%d:%s", v214, (const char *)v21);
        if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v259.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (__p)
        {
          v239 = __p;
          operator delete(__p);
        }
      }
      if (!*(_DWORD *)(a1 + 144))
        break;
      v22 = *a4;
      v23 = a4[1];
      while (v22 != v23)
      {
        v24 = *v22;
        v25 = v22[1];
        v259.__r_.__value_.__r.__words[0] = *v22;
        v259.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v236 = v24;
          v237 = v259.__r_.__value_.__l.__size_;
          if (v259.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(v259.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
        }
        else
        {
          v236 = v24;
          v237 = 0;
        }
        Espresso::sync_copy_from_host(&v236, &__block_literal_global_16344);
        v30 = (std::__shared_weak_count *)v237;
        if (v237)
        {
          v31 = (unint64_t *)(v237 + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (std::__shared_weak_count *)v259.__r_.__value_.__l.__size_;
        if (v259.__r_.__value_.__l.__size_)
        {
          v34 = (unint64_t *)(v259.__r_.__value_.__l.__size_ + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v22 += 2;
      }
      memset(&v259, 0, sizeof(v259));
      v36 = *a3;
      v37 = a3[1];
      while (v36 != v37)
      {
        v38 = *v36;
        v39 = (std::__shared_weak_count *)v36[1];
        v234 = (std::string *)*v36;
        v235 = v39;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          v232 = v38;
          v233 = v235;
          if (v235)
          {
            v42 = (unint64_t *)&v235->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
        }
        else
        {
          v232 = v38;
          v233 = 0;
        }
        Espresso::sync_copy_from_host(&v232, &__block_literal_global_29_16345);
        v44 = v233;
        if (v233)
        {
          v45 = (unint64_t *)&v233->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v235;
        if (v235)
        {
          v48 = (unint64_t *)&v235->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v36 += 2;
      }
      v50 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a2 + 8);
      v231[0] = MEMORY[0x1E0C809B0];
      v231[1] = 3221225472;
      v231[2] = ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_3;
      v231[3] = &__block_descriptor_56_e10_v16__0r_v8l;
      v231[4] = a2;
      v231[5] = a3;
      v231[6] = a4;
      Espresso::abstract_context::compute_batch_sync(v50, v231);
      v51 = *a3;
      v52 = a3[1];
      while (v51 != v52)
      {
        v53 = *v51;
        v54 = (std::__shared_weak_count *)v51[1];
        v234 = (std::string *)*v51;
        v235 = v54;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          v228 = v53;
          v229 = v235;
          if (v235)
          {
            v57 = (unint64_t *)&v235->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
        }
        else
        {
          v228 = v53;
          v229 = 0;
        }
        Espresso::sync_copy_to_host(&v230, &v228);
        v59 = v259.__r_.__value_.__l.__size_;
        if (v259.__r_.__value_.__l.__size_ >= v259.__r_.__value_.__r.__words[2])
        {
          v60 = (uint64_t)(v259.__r_.__value_.__l.__size_ - v259.__r_.__value_.__r.__words[0]) >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v62 = v259.__r_.__value_.__r.__words[2] - v259.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v259.__r_.__value_.__r.__words[2] - v259.__r_.__value_.__r.__words[0]) >> 3 > v61)
            v61 = v62 >> 3;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
            v63 = 0xFFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          v258 = &v259.__r_.__value_.__s.__data_[16];
          v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v63);
          v66 = &v64[16 * v60];
          *(_OWORD *)v66 = v230;
          v230 = 0uLL;
          v67 = (_QWORD *)v259.__r_.__value_.__l.__size_;
          v68 = v259.__r_.__value_.__r.__words[0];
          if (v259.__r_.__value_.__l.__size_ == v259.__r_.__value_.__r.__words[0])
          {
            v71 = vdupq_n_s64(v259.__r_.__value_.__l.__size_);
            v69 = (std::string::size_type)&v64[16 * v60];
          }
          else
          {
            v69 = (std::string::size_type)&v64[16 * v60];
            do
            {
              v70 = *((_OWORD *)v67 - 1);
              v67 -= 2;
              *(_OWORD *)(v69 - 16) = v70;
              v69 -= 16;
              *v67 = 0;
              v67[1] = 0;
            }
            while (v67 != (_QWORD *)v68);
            v71 = *(int64x2_t *)&v259.__r_.__value_.__l.__data_;
          }
          v72 = (std::string::size_type)(v66 + 16);
          v259.__r_.__value_.__r.__words[0] = v69;
          v259.__r_.__value_.__l.__size_ = (std::string::size_type)(v66 + 16);
          v256 = v71;
          v73 = v259.__r_.__value_.__r.__words[2];
          v259.__r_.__value_.__r.__words[2] = (std::string::size_type)&v64[16 * v65];
          v257 = v73;
          v255 = (__int128 *)v71.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v255);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          v259.__r_.__value_.__l.__size_ = v72;
          if (*((_QWORD *)&v230 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
        else
        {
          *(_OWORD *)v259.__r_.__value_.__l.__size_ = v230;
          v230 = 0uLL;
          v259.__r_.__value_.__l.__size_ = v59 + 16;
        }
        v77 = v229;
        if (v229)
        {
          v78 = (unint64_t *)&v229->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = v235;
        if (v235)
        {
          v81 = (unint64_t *)&v235->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v51 += 2;
      }
      if (v214 == -1)
      {
        v85 = v259.__r_.__value_.__l.__size_;
        v86 = (uint64_t *)v259.__r_.__value_.__r.__words[0];
        v87 = (uint64_t)(v259.__r_.__value_.__l.__size_ - v259.__r_.__value_.__r.__words[0]) >> 4;
        v88 = (uint64_t)v247;
        v84 = (uint64_t *)v245;
        if (v87 <= (v247 - (_BYTE *)v245) >> 4)
        {
          v97 = (uint64_t)v246;
          v98 = ((char *)v246 - (_BYTE *)v245) >> 4;
          if (v98 >= v87)
          {
            if (v259.__r_.__value_.__r.__words[0] != v259.__r_.__value_.__l.__size_)
            {
              do
              {
                v106 = *v86;
                v107 = v86[1];
                v86 += 2;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v84, v106, v107);
                v84 += 2;
              }
              while (v86 != (uint64_t *)v85);
              v97 = (uint64_t)v246;
            }
            while ((uint64_t *)v97 != v84)
              v97 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v97 - 16);
          }
          else
          {
            v99 = (uint64_t *)(v259.__r_.__value_.__r.__words[0] + 16 * v98);
            if (v246 != v245)
            {
              do
              {
                v100 = *v86;
                v101 = v86[1];
                v86 += 2;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v84, v100, v101);
                v84 += 2;
              }
              while (v86 != v99);
              v84 = v246;
            }
            v102 = v84;
            if (v99 != (uint64_t *)v85)
            {
              v102 = v84;
              do
              {
                *v102 = *v99;
                v103 = v99[1];
                v102[1] = v103;
                if (v103)
                {
                  v104 = (unint64_t *)(v103 + 8);
                  do
                    v105 = __ldxr(v104);
                  while (__stxr(v105 + 1, v104));
                }
                v99 += 2;
                v102 += 2;
              }
              while (v99 != (uint64_t *)v85);
            }
            v84 = v102;
          }
        }
        else
        {
          if (v245)
          {
            v89 = (uint64_t)v246;
            v90 = v245;
            if (v246 != v245)
            {
              do
                v89 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v89 - 16);
              while ((uint64_t *)v89 != v84);
              v90 = v245;
            }
            v246 = v84;
            operator delete(v90);
            v88 = 0;
            v246 = 0;
            v245 = 0;
            v247 = 0;
          }
          if (((v85 - (_QWORD)v86) & 0x8000000000000000) != 0)
            goto LABEL_300;
          v91 = v88 >> 3;
          if (v88 >> 3 <= v87)
            v91 = (uint64_t)(v85 - (_QWORD)v86) >> 4;
          v92 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v91;
          if (v92 >> 60)
LABEL_300:
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v84 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v92);
          v245 = v84;
          v246 = v84;
          v247 = (char *)&v84[2 * v93];
          while (v86 != (uint64_t *)v85)
          {
            *v84 = *v86;
            v94 = v86[1];
            v84[1] = v94;
            if (v94)
            {
              v95 = (unint64_t *)(v94 + 8);
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v86 += 2;
            v84 += 2;
          }
        }
        v246 = v84;
      }
      else
      {
        v84 = v246;
      }
      v108 = v245;
      if (v84 != v245)
      {
        v109 = 0;
        v110 = 0.0;
        v111 = v259.__r_.__value_.__r.__words[0];
        v83 = 0.0;
        while (v109 >= (uint64_t)(v259.__r_.__value_.__l.__size_ - v111) >> 4)
        {
          v83 = 1.0e10;
LABEL_210:
          if (++v109 >= ((char *)v84 - v108) >> 4)
            goto LABEL_213;
        }
        std::string::basic_string[abi:ne180100]<0>(&v226, "diff");
        v112 = 0;
        v113 = *(_QWORD *)(v111 + 16 * v109);
        v114 = *(int *)(v113 + 8);
        v115 = *(_QWORD *)&v108[16 * v109];
        v116 = v113 + 12;
        v117 = v114;
        do
        {
          v117 *= *(int *)(v116 + v112);
          v112 += 4;
        }
        while (v112 != 12);
        v118 = 0;
        v119 = v115 + 12;
        v120 = *(int *)(v115 + 8);
        do
        {
          v120 *= *(int *)(v119 + v118);
          v118 += 4;
        }
        while (v118 != 12);
        if (v120 < v117)
          v117 = v120;
        if (v117)
        {
          v121 = *(float **)(v113 + 24);
          v122 = *(float **)(v115 + 24);
          v123 = 0.0;
          do
          {
            v124 = vabds_f32(*v121, *v122);
            if (v124 > v123)
              v123 = v124;
            ++v122;
            ++v121;
            --v117;
          }
          while (v117);
        }
        else
        {
          v123 = 0.0;
        }
        for (j = 0; j != 12; j += 4)
          v114 *= *(int *)(v116 + j);
        v126 = 0;
        v127 = *(int *)(v115 + 8);
        do
        {
          v127 *= *(int *)(v119 + v126);
          v126 += 4;
        }
        while (v126 != 12);
        if (v127 < v114)
          v114 = v127;
        v128 = v114;
        v129 = v114;
        if (!v114)
        {
          v130 = 0;
          v129 = *(_DWORD *)(v113 + 8);
          do
          {
            v129 *= *(_DWORD *)(v116 + v130);
            v130 += 4;
          }
          while (v130 != 12);
        }
        if (v129 < 1)
        {
          if (!v114)
            goto LABEL_195;
        }
        else
        {
          v131 = *(float **)(v113 + 24);
          v132 = v129;
          v133 = 0.0;
          do
          {
            v134 = *v131++;
            v133 = v133 + (float)(v134 * v134);
            --v132;
          }
          while (v132);
          if (!v114)
          {
LABEL_195:
            v135 = 0;
            v128 = *(_DWORD *)(v115 + 8);
            do
            {
              v128 *= *(_DWORD *)(v119 + v135);
              v135 += 4;
            }
            while (v135 != 12);
          }
        }
        if (v128 < 1)
        {
          v138 = 0.0;
        }
        else
        {
          v136 = *(float **)(v115 + 24);
          v137 = v128;
          v138 = 0.0;
          do
          {
            v139 = *v136++;
            v138 = v138 + (float)(v139 * v139);
            --v137;
          }
          while (v137);
        }
        v140 = (float)(v123 / (float)(sqrtf(v138 / (float)v114) + 0.00001));
        if (v227 < 0)
          operator delete(v226);
        v141 = 0;
        v83 = v140 + v83;
        v111 = v259.__r_.__value_.__r.__words[0];
        for (k = *(_QWORD *)(v259.__r_.__value_.__r.__words[0] + 16 * v109);
              ;
              v110 = v110 + *(float *)(*(_QWORD *)(k + 24) + 4 * v141++))
        {
          v143 = 0;
          v144 = *(int *)(k + 8);
          do
          {
            v144 *= *(int *)(k + 12 + v143);
            v143 += 4;
          }
          while (v143 != 12);
          if (v144 <= v141)
            break;
        }
        v84 = v246;
        v108 = v245;
        goto LABEL_210;
      }
      v83 = 0.0;
      v110 = 0.0;
LABEL_213:
      a5 = v209;
      v14 = "NSt3__110__function6__funcIZN8Espresso13MILTransforms12CollectNamesERKN3MIL7IRBlockEE3$_0NS_9allocatorIS8_EE"
            "FbRKNS4_11IROperationEEEE"
          + 106;
      if (v83 < *(float *)(a1 + 16))
        goto LABEL_218;
      if (*(int *)(a1 + 8) >= 2)
        printf("\t\te=%.4e\tsum=%.4f\tnans=%.2f (E)\n", v83, v110, (float)0);
      if ((v214 & 0x80000000) != 0)
      {
LABEL_218:
        v234 = &v259;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_219:
        v145 = *a2;
        v146 = *(const void **)(*a2 + 8);
        if (v146
        {
          v148 = *(std::__shared_weak_count **)(v145 + 16);
          v234 = (std::string *)v147;
          v235 = v148;
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          v151 = *(_DWORD *)a1;
          if (*(int *)a1 < 1)
          {
            v153 = 0.0;
          }
          else
          {
            v152 = 0;
            v153 = 0.0;
            do
            {
              v259.__r_.__value_.__r.__words[0] = 0;
              v259.__r_.__value_.__l.__size_ = (std::string::size_type)&v259;
              v259.__r_.__value_.__r.__words[2] = 0x3032000000;
              v260 = __Block_byref_object_copy__16349;
              v261 = __Block_byref_object_dispose__16350;
              v262 = 0;
              v154 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a2 + 8);
              v225[0] = MEMORY[0x1E0C809B0];
              v225[1] = 3221225472;
              v225[2] = ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_34;
              v225[3] = &unk_1E2DD6C28;
              v225[6] = a2;
              v225[7] = a3;
              v225[8] = a4;
              v225[4] = &v259;
              v225[5] = a1;
              Espresso::abstract_context::compute_batch_sync(v154, v225);
              objc_msgSend(*(id *)(v259.__r_.__value_.__l.__size_ + 40), "GPUEndTime");
              v156 = v155;
              objc_msgSend(*(id *)(v259.__r_.__value_.__l.__size_ + 40), "GPUStartTime");
              v158 = v157;
              _Block_object_dispose(&v259, 8);

              v153 = v156 - v158 + v153;
              ++v152;
              v151 = *(_DWORD *)a1;
            }
            while (v152 < *(_DWORD *)a1);
          }
          v163 = v153;
        }
        else
        {
          v234 = 0;
          v235 = 0;
          if (Espresso::time_seconds(void)::onceToken != -1)
            dispatch_once(&Espresso::time_seconds(void)::onceToken, &__block_literal_global_71_16339);
          v159.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v160 = Espresso::time_seconds(void)::t0;
          if (*(int *)a1 >= 1)
          {
            v161 = 0;
            do
            {
              v162 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a2 + 8);
              v224[0] = MEMORY[0x1E0C809B0];
              v224[1] = 3221225472;
              v224[2] = ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_2_35;
              v224[3] = &__block_descriptor_64_e10_v16__0r_v8l;
              v224[4] = a1;
              v224[5] = a2;
              v224[6] = a3;
              v224[7] = a4;
              Espresso::abstract_context::compute_batch_sync(v162, v224);
              ++v161;
            }
            while (v161 < *(_DWORD *)a1);
          }
          if (Espresso::time_seconds(void)::onceToken != -1)
            dispatch_once(&Espresso::time_seconds(void)::onceToken, &__block_literal_global_71_16339);
          v163 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - Espresso::time_seconds(void)::t0) * 0.000000001
               - (double)(v159.__d_.__rep_ - v160) * 0.000000001;
          v151 = *(_DWORD *)a1;
        }
        v14 = "NSt3__110__function6__funcIZN8Espresso13MILTransforms12CollectNamesERKN3MIL7IRBlockEE3$_0NS_9allocatorIS8_"
              "EEFbRKNS4_11IROperationEEEE"
            + 106;
        v164 = v163 * 1000.0 / (double)(*(_DWORD *)(a1 + 4) * v151);
        v165 = v211 / (float)(v164 * 0.001);
        v166 = *(FILE **)(a1 + 136);
        if (v166)
        {
          if (*(char *)(a5 + 23) >= 0)
            v167 = (const char *)a5;
          else
            v167 = *(const char **)a5;
          fputs(v167, v166);
          v168 = *(FILE **)(a1 + 136);
          v222 = 0;
          v223 = 0;
          v221 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v221, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
          Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&v221, &v259);
          if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v169 = &v259;
          else
            v169 = (std::string *)v259.__r_.__value_.__r.__words[0];
          fprintf(v168, "%d,%s,%.2f,%.2f\n", v214, (const char *)v169, v164, v165);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          if (v221)
          {
            v222 = v221;
            operator delete(v221);
          }
        }
        if ((v214 & 0x80000000) != 0)
        {
          v207 = v164;
        }
        else if (v15 > v164 || v210 == -1)
        {
          if (v208 != (char *)&__src)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v208, (char *)__src, (uint64_t)v243, (v243 - (_BYTE *)__src) >> 2);
          v171 = (int)(float)(v164 * 1000.0);
          v173 = *(int **)(a5 + 32);
          v172 = *(_QWORD *)(a5 + 40);
          if ((unint64_t)v173 >= v172)
          {
            v175 = *(int **)v208;
            v176 = ((uint64_t)v173 - *(_QWORD *)v208) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v178 = v172 - (_QWORD)v175;
            if (v178 >> 1 > v177)
              v177 = v178 >> 1;
            v20 = (unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL;
            v179 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v20)
              v179 = v177;
            if (v179)
            {
              v179 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v179);
              v175 = *(int **)(a5 + 24);
              v173 = *(int **)(a5 + 32);
            }
            else
            {
              v180 = 0;
            }
            v181 = (int *)(v179 + 4 * v176);
            *v181 = v171;
            v174 = v181 + 1;
            while (v173 != v175)
            {
              v182 = *--v173;
              *--v181 = v182;
            }
            v172 = v179 + 4 * v180;
            *(_QWORD *)(a5 + 24) = v181;
            *(_QWORD *)(a5 + 32) = v174;
            *(_QWORD *)(a5 + 40) = v172;
            if (v175)
            {
              operator delete(v175);
              v172 = *(_QWORD *)(a5 + 40);
            }
          }
          else
          {
            *v173 = v171;
            v174 = v173 + 1;
          }
          *(_QWORD *)(a5 + 32) = v174;
          v183 = (int)(float)(v165 * 1000.0);
          if ((unint64_t)v174 >= v172)
          {
            v185 = *(int **)v208;
            v186 = ((uint64_t)v174 - *(_QWORD *)v208) >> 2;
            v187 = v186 + 1;
            if ((unint64_t)(v186 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v188 = v172 - (_QWORD)v185;
            if (v188 >> 1 > v187)
              v187 = v188 >> 1;
            v20 = (unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL;
            v189 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v20)
              v189 = v187;
            if (v189)
            {
              v189 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v189);
              v185 = *(int **)(a5 + 24);
              v174 = *(int **)(a5 + 32);
            }
            else
            {
              v190 = 0;
            }
            v191 = (int *)(v189 + 4 * v186);
            *v191 = v183;
            v184 = v191 + 1;
            v14 = "NSt3__110__function6__funcIZN8Espresso13MILTransforms12CollectNamesERKN3MIL7IRBlockEE3$_0NS_9allocator"
                  "IS8_EEFbRKNS4_11IROperationEEEE"
                + 106;
            while (v174 != v185)
            {
              v192 = *--v174;
              *--v191 = v192;
            }
            *(_QWORD *)(a5 + 24) = v191;
            *(_QWORD *)(a5 + 32) = v184;
            *(_QWORD *)(a5 + 40) = v189 + 4 * v190;
            if (v185)
              operator delete(v185);
          }
          else
          {
            *v174 = v183;
            v184 = v174 + 1;
            v14 = "NSt3__110__function6__funcIZN8Espresso13MILTransforms12CollectNamesERKN3MIL7IRBlockEE3$_0NS_9allocator"
                  "IS8_EEFbRKNS4_11IROperationEEEE"
                + 106;
          }
          *(_QWORD *)(a5 + 32) = v184;
          v210 = v214;
          v15 = v164;
        }
        if (*(int *)(a1 + 8) >= 2)
          printf("\t\te=%.2f\t%.4f\t%.2f\n", v83, v164, v165);
        v193 = v235;
        if (v235)
        {
          v194 = (unint64_t *)&v235->__shared_owners_;
          do
            v195 = __ldaxr(v194);
          while (__stlxr(v195 - 1, v194));
          if (!v195)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        goto LABEL_296;
      }
      v234 = &v259;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_296:
      if (__src)
      {
        v243 = __src;
        operator delete(__src);
      }
      objc_autoreleasePoolPop(context);
      if ((int)++v214 >= (int)(-1431655765 * ((unint64_t)(v252 - v251) >> 3)))
        goto LABEL_304;
    }
    v83 = -1.0;
    goto LABEL_219;
  }
  v207 = 0.0;
  v210 = -1;
  v15 = 0.0;
LABEL_304:
  v196 = v207 + *(float *)(a1 + 24);
  *(float *)(a1 + 20) = v15 + *(float *)(a1 + 20);
  *(float *)(a1 + 24) = v196;
  v197 = v211 / (float)(v15 * *((float *)v14 + 716));
  if (*(int *)(a1 + 8) > 1)
  {
    v219 = 0;
    v220 = 0;
    v218 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v218, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
    Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&v218, &v259);
    if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v198 = &v259;
    else
      v198 = (std::string *)v259.__r_.__value_.__r.__words[0];
    printf("\t%d:%s\t%.4f\t%.2f *\n", v210, (const char *)v198, v15, v197);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    if (v218)
    {
      v219 = v218;
      operator delete(v218);
    }
  }
  v199 = *(FILE **)(a1 + 136);
  if (v199)
  {
    if (*(char *)(a5 + 23) >= 0)
      v200 = (const char *)a5;
    else
      v200 = *(const char **)a5;
    fprintf(v199, "#%s", v200);
    v201 = *(FILE **)(a1 + 136);
    v216 = 0;
    v217 = 0;
    v215 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v215, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
    Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&v215, &v259);
    if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = &v259;
    else
      v202 = (std::string *)v259.__r_.__value_.__r.__words[0];
    fprintf(v201, "%d,%s,%.2f,%.2f\n", v210, (const char *)v202, v15, v197);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    if (v215)
    {
      v216 = v215;
      operator delete(v215);
    }
    fflush(*(FILE **)(a1 + 136));
  }
  __src = (void *)a5;
  v203 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v206, (_QWORD *)a5, (__int128 **)&__src);
  if (v203 + 4 != (uint64_t *)a5)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v203 + 56, *(char **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
  *(_BYTE *)(a1 + 80) = 0;
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
LABEL_327:
  v259.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
}

void sub_19182E3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 - 240) = &v2;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 240));
  std::pair<std::string const,std::vector<int>>::~pair(v1);
  *(_QWORD *)(v0 - 240) = &v3;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 240));
  JUMPOUT(0x19182E478);
}

void Espresso::wisdom_trainer2::save(Espresso::wisdom_trainer2 *this, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  Espresso::wisdom_trainer2::to_dict(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathExtension");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "lowercaseString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("json"));

  if (v7)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 1, &v12);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v12;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "writeToFile:atomically:", v10, 1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "writeToFile:atomically:", v11, 1);

  }
}

void sub_19182E5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id Espresso::wisdom_trainer2::to_dict(Espresso::wisdom_trainer2 *this)
{
  void *v2;
  __int128 *v3;
  char *v4;
  std::string *v5;
  void *v6;
  std::string *v7;
  void *v8;
  __int128 *v9;
  __int128 *v10;
  BOOL v11;
  void *__p;
  void *v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  void *v18;
  _BYTE *v19;

  v2 = (void *)objc_opt_new();
  v3 = (__int128 *)*((_QWORD *)this + 11);
  v4 = (char *)this + 96;
  if (v3 != (__int128 *)((char *)this + 96))
  {
    do
    {
      std::pair<std::string const,std::vector<int>>::pair[abi:ne180100](&v17, v3 + 2);
      v14 = 0;
      v15 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v18, (uint64_t)v19, (v19 - (_BYTE *)v18) >> 2);
      Espresso::wisdom_trainer2::tune_t_to_string((uint64_t *)&__p, &v16);
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v16;
      else
        v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, v8);

      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v9 = (__int128 *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(__int128 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (__int128 *)*((_QWORD *)v3 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != (__int128 *)v4);
  }
  return v2;
}

void sub_19182E770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  std::pair<std::string const,std::vector<int>>::~pair((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void Espresso::wisdom_trainer2::tune_t_to_string(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  std::string *v6;
  std::string::size_type size;
  unint64_t v8;
  std::string v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    do
    {
      std::to_string(&v9, *(_DWORD *)(v3 + 4 * v5));
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v9;
      else
        v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      else
        size = v9.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      v3 = *a1;
      v8 = (a1[1] - *a1) >> 2;
      if (v8 - 1 > v5)
      {
        std::string::append(a2, ",");
        v3 = *a1;
        v8 = (a1[1] - *a1) >> 2;
      }
      ++v5;
    }
    while (v8 > v5);
  }
}

void sub_19182E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__16349(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16350(uint64_t a1)
{

}

void ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  id *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(int *)(v4 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 48) + 16))(**(_QWORD **)(a1 + 48), a2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      ++v5;
    }
    while (v5 < *(_DWORD *)(v4 + 4));
  }
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v6[18]);
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v6[18]);
  }
}

uint64_t ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_2_35(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(result + 32);
  if (*(int *)(v2 + 4) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(***(_QWORD ***)(v4 + 40) + 16))(**(_QWORD **)(v4 + 40), a2, *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
      ++v5;
    }
    while (v5 < *(_DWORD *)(v2 + 4));
  }
  return result;
}

void ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = *(int *)(*(_QWORD *)a2 + 8);
  do
  {
    v3 *= *(int *)(*(_QWORD *)a2 + 12 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (v3)
    memset_pattern16(*(void **)(*(_QWORD *)a2 + 24), &unk_191A93A50, 4 * v3);
}

void ___ZN8Espresso15wisdom_trainer24tuneERKNSt3__110shared_ptrINS_11base_kernelEEERNS_10layer_dataES8__block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;

  srand(0x7C9u);
  v3 = 0;
  v4 = *a2;
  v5 = *(float **)(*a2 + 24);
  v6 = *(int *)(v4 + 8);
  v7 = v4 + 12;
  do
  {
    v6 *= *(int *)(v7 + v3);
    v3 += 4;
  }
  while (v3 != 12);
  for (; v6; --v6)
    *v5++ = (float)((float)((float)rand() * 4.6566e-10) * 0.5) + 0.0;
}

std::chrono::steady_clock::time_point ___ZN8Espresso12time_secondsEv_block_invoke_16358()
{
  std::chrono::steady_clock::time_point result;

  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Espresso::time_seconds(void)::t0 = result.__d_.__rep_;
  return result;
}

void Espresso::wisdom_trainer2::from_dict(Espresso::wisdom_trainer2 *this, NSDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  void **v23;
  char *v24;
  uint64_t **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  NSDictionary *obj;
  void *v32;
  void *v33[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p;
  _DWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = a2;
  v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
  if (v3)
  {
    v30 = (uint64_t **)((char *)this + 88);
    v27 = (char *)this + 96;
    v28 = *(_QWORD *)v43;
    do
    {
      v4 = 0;
      v29 = v3;
      do
      {
        if (*(_QWORD *)v43 != v28)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v4);
        -[NSDictionary objectForKeyedSubscript:](obj, "objectForKeyedSubscript:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        __p = 0;
        v40 = 0;
        v41 = 0;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v32 = v6;
        objc_msgSend(v6, "componentsSeparatedByString:", CFSTR(","));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v36;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v36 != v9)
                objc_enumerationMutation(v7);
              v11 = objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * i), "intValue");
              v12 = v11;
              v13 = v40;
              if ((unint64_t)v40 >= v41)
              {
                v15 = __p;
                v16 = ((char *)v40 - (_BYTE *)__p) >> 2;
                v17 = v16 + 1;
                if ((unint64_t)(v16 + 1) >> 62)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v18 = v41 - (_QWORD)__p;
                if ((uint64_t)(v41 - (_QWORD)__p) >> 1 > v17)
                  v17 = v18 >> 1;
                if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
                  v19 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v19 = v17;
                if (v19)
                {
                  v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
                  v15 = __p;
                  v13 = v40;
                }
                else
                {
                  v20 = 0;
                }
                v21 = (_DWORD *)(v19 + 4 * v16);
                *v21 = v12;
                v14 = v21 + 1;
                while (v13 != v15)
                {
                  v22 = *--v13;
                  *--v21 = v22;
                }
                __p = v21;
                v40 = v14;
                v41 = v19 + 4 * v20;
                if (v15)
                  operator delete(v15);
              }
              else
              {
                *v40 = v11;
                v14 = v13 + 1;
              }
              v40 = v14;
            }
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
          }
          while (v8);
        }

        std::string::basic_string[abi:ne180100]<0>(v33, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
        v23 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v30, &v48, v33);
        v24 = (char *)*v23;
        if (!*v23)
        {
          v25 = (uint64_t **)v23;
          v24 = (char *)operator new(0x50uLL);
          v46[1] = v27;
          *((_OWORD *)v24 + 2) = *(_OWORD *)v33;
          v26 = v34;
          v33[0] = 0;
          v33[1] = 0;
          v34 = 0;
          *((_QWORD *)v24 + 6) = v26;
          *((_QWORD *)v24 + 7) = 0;
          *((_QWORD *)v24 + 8) = 0;
          *((_QWORD *)v24 + 9) = 0;
          v47 = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v30, v48, v25, (uint64_t *)v24);
          v46[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v46);
        }
        if (v24 + 56 != (char *)&__p)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 56, (char *)__p, (uint64_t)v40, ((char *)v40 - (_BYTE *)__p) >> 2);
        if (SHIBYTE(v34) < 0)
          operator delete(v33[0]);
        if (__p)
        {
          v40 = __p;
          operator delete(__p);
        }

        ++v4;
      }
      while (v4 != v29);
      v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
    }
    while (v3);
  }

}

void sub_19182EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{

  _Unwind_Resume(a1);
}

void Espresso::wisdom_trainer2::load(Espresso::wisdom_trainer2 *this, const char *a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSDictionary *v13;
  std::runtime_error *v14;
  std::runtime_error *exception;
  uint64_t v16;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathExtension");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "lowercaseString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("json"));

  if (v7)
  {
    v8 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dataWithContentsOfFile:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot load wisdom");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v16 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v10, 0, &v16);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "dictionaryWithContentsOfFile:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (NSDictionary *)v11;

  if (!v13)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Cannot load wisdom");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::wisdom_trainer2::from_dict(this, v13);

}

void sub_19182F104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::wisdom_manager::get_parameters(Espresso::wisdom_manager *this@<X0>, const Espresso::wisdom_kernel_key *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  __int128 v7;
  Espresso::wisdom *v8;

  v6 = (char *)this + 248;
  std::string::operator=((std::string *)((char *)this + 248), (const std::string *)a2);
  std::string::operator=((std::string *)((char *)this + 272), (const std::string *)a2 + 1);
  v7 = *((_OWORD *)a2 + 4);
  *((_OWORD *)v6 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)v6 + 4) = v7;
  std::string::operator=((std::string *)((char *)this + 328), (const std::string *)((char *)a2 + 80));
  if (*((_DWORD *)this + 39))
  {
    std::map<std::string,int>::map[abi:ne180100]((uint64_t)a3, (_QWORD *)this + 21);
  }
  else
  {
    v8 = (Espresso::wisdom_manager *)((char *)this + 192);
    if (*((_BYTE *)this + 165))
      Espresso::wisdom::get_optimal_parameters_for_kernel_exact(v8, a2, a3);
    else
      Espresso::wisdom::get_optimal_parameters_for_kernel(v8, (int32x2_t *)a2, (uint64_t)a3);
  }
}

void Espresso::wisdom::get_optimal_parameters_for_kernel_exact(Espresso::wisdom *this@<X0>, const Espresso::wisdom_kernel_key *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  _BOOL4 v11;
  _QWORD *v12;
  std::string v13;
  std::string v14;
  __int128 v15;
  __int128 v16;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v13 = *(std::string *)a2;
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    v14 = *(std::string *)((_BYTE *)a2 + 1);
  v6 = *((_OWORD *)a2 + 4);
  v15 = *((_OWORD *)a2 + 3);
  v16 = v6;
  if (*((char *)a2 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  else
    __p = *(std::string *)((char *)a2 + 80);
  Espresso::wisdom_kernel_key::cache_string((Espresso::wisdom_kernel_key *)&v13);
  v9 = (_QWORD *)*((_QWORD *)this + 5);
  v7 = (char *)this + 40;
  v8 = v9;
  if (!v9)
    goto LABEL_17;
  v10 = v7;
  do
  {
    v11 = Espresso::wisdom_kernel_key::operator<((uint64_t)(v8 + 4), (uint64_t)&v13);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = (char *)v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || Espresso::wisdom_kernel_key::operator<((uint64_t)&v13, (uint64_t)(v10 + 32)))
  {
LABEL_17:
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
  else
  {
    std::map<std::string,int>::map[abi:ne180100]((uint64_t)a3, (_QWORD *)v10 + 17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19182F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void Espresso::wisdom::get_optimal_parameters_for_kernel(Espresso::wisdom *this@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  char *v6;
  int v8;
  float32x2_t v9;
  int v10;
  float v11;
  __int128 v12;
  uint64_t v13;
  std::string::size_type size;
  int32x2_t v15;
  int v16;
  int32x2_t *v17;
  std::string *p_str;
  int v19;
  int8x8_t v20;
  float v21;
  int8x8_t v22;
  float32x2_t v23;
  float v24;
  int v25;
  float v26;
  int v27;
  float v28;
  int v29;
  float v30;
  int v31;
  float v32;
  int v33;
  float v34;
  int v35;
  float v36;
  int v37;
  float v38;
  int v39;
  float v40;
  char *v41;
  char *v42;
  BOOL v43;
  uint64_t *v44;
  std::string __str;
  std::string v47;
  __int128 v48;
  __int128 v49;
  std::string __p;
  _BYTE v51[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  std::string v55;

  v3 = (_QWORD *)a3;
  v54 = 0u;
  memset(&v55, 0, sizeof(v55));
  v52 = 0u;
  v53 = 0u;
  memset(v51, 0, sizeof(v51));
  v5 = (uint64_t **)((char *)this + 32);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v6 = (char *)this + 40;
  if (v4 == (_QWORD *)((char *)this + 40))
    goto LABEL_63;
  v8 = 0;
  v9 = (float32x2_t)vdup_n_s32(0x3B800000u);
  v10 = -1;
  v11 = 0.0;
  do
  {
    if (*((char *)v4 + 55) < 0)
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v4[4], v4[5]);
    else
      __str = *(std::string *)(v4 + 4);
    if (*((char *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)v4[7], v4[8]);
    else
      v47 = *(std::string *)(v4 + 7);
    v12 = *((_OWORD *)v4 + 6);
    v48 = *((_OWORD *)v4 + 5);
    v49 = v12;
    if (*((char *)v4 + 135) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[14], v4[15]);
    else
      __p = *(std::string *)(v4 + 14);
    v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v15 = (int32x2_t)a2[2].u8[7];
    v16 = v15.i8[0];
    if (v15.i8[0] < 0)
      v15 = a2[1];
    if (size == *(_QWORD *)&v15)
    {
      if (v16 >= 0)
        v17 = a2;
      else
        v17 = (int32x2_t *)*a2;
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__str.__r_.__value_.__l.__data_, v17, __str.__r_.__value_.__l.__size_))
          goto LABEL_49;
LABEL_28:
        v19 = DWORD1(v48) - a2[6].i32[1];
        if (v19 < 0)
          v19 = a2[6].i32[1] - DWORD1(v48);
        v20 = (int8x8_t)vcvt_f32_s32(vabd_s32(*(int32x2_t *)((char *)&v48 + 8), a2[7]));
        v21 = (float)((float)((float)v19 / 800.0) + 0.0) + (float)(*(float *)v20.i32 / 800.0);
        v22 = (int8x8_t)vcvt_f32_s32(vabd_s32(*(int32x2_t *)&v49, a2[8]));
        v23 = vmul_f32((float32x2_t)vext_s8(v20, v22, 4uLL), v9);
        v24 = (float)((float)(v21 + v23.f32[0]) + v23.f32[1]) + (float)(*(float *)&v22.i32[1] / 10.0);
        v25 = SBYTE8(v49) - a2[9].i8[0];
        if (v25 < 0)
          v25 = a2[9].i8[0] - SBYTE8(v49);
        v26 = v24 + (float)((float)v25 / 255.0);
        v27 = SBYTE9(v49) - a2[9].i8[1];
        if (v27 < 0)
          v27 = a2[9].i8[1] - SBYTE9(v49);
        v28 = v26 + (float)((float)v27 / 255.0);
        v29 = SBYTE10(v49) - a2[9].i8[2];
        if (v29 < 0)
          v29 = a2[9].i8[2] - SBYTE10(v49);
        v30 = (float)v29 / 255.0;
        v31 = SBYTE11(v49) - a2[9].i8[3];
        if (v31 < 0)
          v31 = a2[9].i8[3] - SBYTE11(v49);
        v32 = (float)(v28 + v30) + (float)((float)v31 / 255.0);
        v33 = SBYTE12(v49) - a2[9].i8[4];
        if (v33 < 0)
          v33 = a2[9].i8[4] - SBYTE12(v49);
        v34 = v32 + (float)((float)v33 / 255.0);
        v35 = SBYTE13(v49) - a2[9].i8[5];
        if (v35 < 0)
          v35 = a2[9].i8[5] - SBYTE13(v49);
        v36 = (float)v35 / 255.0;
        v37 = SBYTE14(v49) - a2[9].i8[6];
        if (v37 < 0)
          v37 = a2[9].i8[6] - SBYTE14(v49);
        v38 = (float)(v34 + v36) + (float)((float)v37 / 255.0);
        v39 = SHIBYTE(v49) - a2[9].i8[7];
        if (v39 < 0)
          v39 = a2[9].i8[7] - SHIBYTE(v49);
        v40 = v38 + (float)((float)v39 / 255.0);
        if (v40 < v11 || v10 == -1)
        {
          std::string::operator=((std::string *)v51, &__str);
          std::string::operator=((std::string *)&v51[24], &v47);
          v53 = v48;
          v54 = v49;
          std::string::operator=(&v55, &__p);
          v10 = v8;
          v11 = v40;
        }
        goto LABEL_49;
      }
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_28;
      p_str = &__str;
      while (p_str->__r_.__value_.__s.__data_[0] == v17->u8[0])
      {
        p_str = (std::string *)((char *)p_str + 1);
        v17 = (int32x2_t *)((char *)v17 + 1);
        if (!--v13)
          goto LABEL_28;
      }
    }
LABEL_49:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v41 = (char *)v4[1];
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = *(char **)v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (char *)v4[2];
        v43 = *(_QWORD *)v42 == (_QWORD)v4;
        v4 = v42;
      }
      while (!v43);
    }
    ++v8;
    v4 = v42;
  }
  while (v42 != v6);
  v3 = (_QWORD *)a3;
  if ((v10 & 0x80000000) == 0)
  {
    Espresso::wisdom_kernel_key::cache_string((Espresso::wisdom_kernel_key *)v51);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v44 = std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::__emplace_unique_key_args<Espresso::wisdom_kernel_key,std::piecewise_construct_t const&,std::tuple<Espresso::wisdom_kernel_key const&>,std::tuple<>>(v5, (uint64_t)v51, (__int128 **)&__str);
    std::map<std::string,int>::map[abi:ne180100](a3, v44 + 17);
    goto LABEL_64;
  }
LABEL_63:
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
LABEL_64:
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    operator delete(*(void **)&v51[24]);
  if ((v51[23] & 0x80000000) != 0)
    operator delete(*(void **)v51);
}

void sub_19182F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  Espresso::wisdom_kernel_key::~wisdom_kernel_key(&a33);
  _Unwind_Resume(a1);
}

double Espresso::wisdom_kernel_key::cache_string(Espresso::wisdom_kernel_key *this)
{
  void **v2;
  double result;
  std::string v4;

  Espresso::wisdom_kernel_key::to_string(&v4, (uint64_t)this);
  v2 = (void **)((char *)this + 80);
  if (*((char *)this + 103) < 0)
    operator delete(*v2);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *(_OWORD *)v2 = *(_OWORD *)&v4.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 12) = *((_QWORD *)&v4.__r_.__value_.__l + 2);
  return result;
}

uint64_t *std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::__emplace_unique_key_args<Espresso::wisdom_kernel_key,std::piecewise_construct_t const&,std::tuple<Espresso::wisdom_kernel_key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD v22[2];
  char v23;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (uint64_t)(v5 + 4);
      if (!Espresso::wisdom_kernel_key::operator<(a2, (uint64_t)(v5 + 4)))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!Espresso::wisdom_kernel_key::operator<(v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = (char *)operator new(0xA0uLL);
    v11 = (uint64_t *)v12;
    v22[0] = v12;
    v22[1] = v6;
    v23 = 0;
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 2);
      *((_OWORD *)v12 + 2) = v14;
    }
    if (*((char *)v13 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v11 + 7), *((const std::string::value_type **)v13 + 3), *((_QWORD *)v13 + 4));
    }
    else
    {
      v15 = *(__int128 *)((char *)v13 + 24);
      v11[9] = *((_QWORD *)v13 + 5);
      *(_OWORD *)(v11 + 7) = v15;
    }
    v16 = v13[4];
    *((_OWORD *)v11 + 5) = v13[3];
    *((_OWORD *)v11 + 6) = v16;
    v17 = (std::string *)(v11 + 14);
    if (*((char *)v13 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)v13 + 10), *((_QWORD *)v13 + 11));
    }
    else
    {
      v18 = v13[5];
      v11[16] = *((_QWORD *)v13 + 12);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    }
    v11[19] = 0;
    v11[18] = 0;
    v11[17] = (uint64_t)(v11 + 18);
    v23 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v19 = (uint64_t *)**a1;
    v20 = v11;
    if (v19)
    {
      *a1 = v19;
      v20 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v22[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
  }
  return v11;
}

void sub_19182FA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Espresso::wisdom_kernel_key const,std::map<std::string,int>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

BOOL Espresso::wisdom_kernel_key::operator<(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  char v5;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v8;
  std::string *v9;
  size_t v10;
  int v11;
  std::string v13;
  std::string __p;

  Espresso::wisdom_kernel_key::to_string(&__p, a1);
  Espresso::wisdom_kernel_key::to_string(&v13, a2);
  v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  v4 = (void *)v13.__r_.__value_.__r.__words[0];
  v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v13;
  else
    v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v8 >= size)
    v10 = size;
  else
    v10 = v8;
  v11 = memcmp(p_p, v9, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v11)
    return v11 < 0;
  else
    return size < v8;
}

void sub_19182FBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::wisdom_kernel_key::to_string(std::string *this, uint64_t a2)
{
  const std::string::value_type **v3;
  std::string::size_type v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  v3 = (const std::string::value_type **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    v4 = *(_QWORD *)(a2 + 88);
    if (v4)
    {
      std::string::__init_copy_ctor_external(this, *v3, v4);
      return;
    }
  }
  else if (*(_BYTE *)(a2 + 103))
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 96);
    return;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  v5 = *(char *)(a2 + 47);
  if (v5 >= 0)
    v6 = a2 + 24;
  else
    v6 = *(_QWORD *)(a2 + 24);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 47);
  else
    v7 = *(_QWORD *)(a2 + 32);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)";", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)";", 1);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)";", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)";", 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)";", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)";", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)";", 1);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)";", 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)";", 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)";", 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)";", 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)";", 1);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)";", 1);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)";", 1);
  std::stringbuf::str();
  v28[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v29[0] = v27;
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v31);
}

void sub_19182FEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::wisdom_parameterset_to_string(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  std::string __p;
  int v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v3[4], v3[5]);
      else
        __p = *(std::string *)(v3 + 4);
      v15 = *((_DWORD *)v3 + 14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=", 1);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v2);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v12;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v19);
}

void sub_19183007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::wisdom_trainer::wisdom_trainer(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[6] = 0;
  a1[5] = 0;
  a1[4] = a1 + 5;
  return a1;
}

void Espresso::wisdom_trainer::record(uint64_t a1, uint64_t a2, _QWORD *a3, float a4)
{
  uint64_t *v8;
  char *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char ***v31;
  char *v32;
  char **v33;
  char **v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char ***v39;
  char *v40;
  char **v41;
  uint64_t v42;
  char **v43;
  char ***v44;
  char *v45;
  uint64_t v46;
  BOOL v47;
  char **v48;
  char *v49;
  char **v50;
  float v51;

  v9 = (char *)(a1 + 40);
  v8 = *(uint64_t **)(a1 + 40);
  v10 = (uint64_t **)(a1 + 40);
  v11 = (uint64_t **)(a1 + 40);
  if (!v8)
    goto LABEL_10;
  v10 = (uint64_t **)(a1 + 40);
  while (1)
  {
    while (1)
    {
      v11 = (uint64_t **)v8;
      v12 = (uint64_t)(v8 + 4);
      if (!Espresso::wisdom_kernel_key::operator<(a2, (uint64_t)(v8 + 4)))
        break;
      v8 = *v11;
      v10 = v11;
      if (!*v11)
        goto LABEL_10;
    }
    if (!Espresso::wisdom_kernel_key::operator<(v12, a2))
      break;
    v10 = v11 + 1;
    v8 = v11[1];
    if (!v8)
      goto LABEL_10;
  }
  v13 = *v10;
  if (!*v10)
  {
LABEL_10:
    v14 = (char *)operator new(0xA0uLL);
    v13 = (uint64_t *)v14;
    v48 = (char **)v14;
    v49 = v9;
    LOBYTE(v50) = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v14 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_OWORD *)v14 + 2) = *(_OWORD *)a2;
      *((_QWORD *)v14 + 6) = *(_QWORD *)(a2 + 16);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v13 + 7), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      *(_OWORD *)(v13 + 7) = *(_OWORD *)(a2 + 24);
      v13[9] = *(_QWORD *)(a2 + 40);
    }
    v15 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v13 + 5) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v13 + 6) = v15;
    v16 = (std::string *)(v13 + 14);
    if (*(char *)(a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 80);
      v13[16] = *(_QWORD *)(a2 + 96);
    }
    v13[18] = 0;
    v13[19] = 0;
    v13[17] = 0;
    LOBYTE(v50) = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v10 = v13;
    v17 = **(_QWORD **)(a1 + 32);
    v18 = v13;
    if (v17)
    {
      *(_QWORD *)(a1 + 32) = v17;
      v18 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v18);
    ++*(_QWORD *)(a1 + 48);
    v48 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v48);
  }
  std::map<std::string,int>::map[abi:ne180100]((uint64_t)&v48, a3);
  v51 = a4;
  v19 = v13[18];
  v20 = v13[19];
  if (v19 < v20)
  {
    *(_QWORD *)v19 = v48;
    v21 = v49;
    *(_QWORD *)(v19 + 8) = v49;
    v22 = v19 + 8;
    v23 = v50;
    *(_QWORD *)(v19 + 16) = v50;
    if (v23)
    {
      *((_QWORD *)v21 + 2) = v22;
      v48 = &v49;
      v49 = 0;
      v50 = 0;
    }
    else
    {
      *(_QWORD *)v19 = v22;
    }
    *(float *)(v19 + 24) = v51;
    v30 = (_QWORD *)(v19 + 32);
    goto LABEL_51;
  }
  v24 = v13[17];
  v25 = (uint64_t)(v19 - v24) >> 5;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v27 = v20 - v24;
  if (v27 >> 4 > v26)
    v26 = v27 >> 4;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
    v28 = 0x7FFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (v28)
    v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v28);
  else
    v29 = 0;
  v31 = (char ***)(v28 + 32 * v25);
  *v31 = v48;
  v32 = v49;
  v31[1] = (char **)v49;
  v33 = (char **)(v31 + 1);
  v34 = v50;
  v31[2] = v50;
  if (v34)
  {
    *((_QWORD *)v32 + 2) = v33;
    v48 = &v49;
    v49 = 0;
    v50 = 0;
  }
  else
  {
    *v31 = v33;
  }
  v35 = v28 + 32 * v29;
  *(float *)(v28 + 32 * v25 + 24) = v51;
  v30 = v31 + 4;
  v36 = (char *)v13[17];
  v37 = (char *)v13[18];
  if (v37 == v36)
  {
    v13[17] = (uint64_t)v31;
    v13[18] = (uint64_t)v30;
    v13[19] = v35;
    if (!v37)
      goto LABEL_51;
    goto LABEL_50;
  }
  v38 = 0;
  do
  {
    v39 = &v31[v38 / 8];
    *(v39 - 4) = *(char ***)&v37[v38 - 32];
    v40 = &v37[v38 - 24];
    v41 = *(char ***)v40;
    v31[v38 / 8 - 3] = *(char ***)v40;
    v42 = (uint64_t)&v31[v38 / 8 - 3];
    v43 = *(char ***)&v37[v38 - 16];
    *(v39 - 2) = v43;
    if (v43)
    {
      v41[2] = (char *)v42;
      *(_QWORD *)&v37[v38 - 32] = v40;
      *(_QWORD *)v40 = 0;
      *(_QWORD *)&v37[v38 - 16] = 0;
    }
    else
    {
      *(v39 - 4) = (char **)v42;
    }
    LODWORD(v31[v38 / 8 - 1]) = *(_DWORD *)&v37[v38 - 8];
    v38 -= 32;
  }
  while (&v37[v38] != v36);
  v44 = &v31[v38 / 8];
  v37 = (char *)v13[17];
  v45 = (char *)v13[18];
  v13[17] = (uint64_t)v44;
  v13[18] = (uint64_t)v30;
  v13[19] = v35;
  if (v45 != v37)
  {
    v46 = (uint64_t)(v45 - 32);
    do
    {
      std::__tree<std::string>::destroy(v46, *(char **)(v46 + 8));
      v47 = v46 == (_QWORD)v37;
      v46 -= 32;
    }
    while (!v47);
  }
  if (v37)
LABEL_50:
    operator delete(v37);
LABEL_51:
  v13[18] = (uint64_t)v30;
  std::__tree<std::string>::destroy((uint64_t)&v48, v49);
}

void sub_1918304A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void **v11;

  if (*(char *)(v9 + 79) < 0)
    operator delete(*v11);
  if (*(char *)(v9 + 55) < 0)
    operator delete(*v10);
  std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>>>>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Espresso::wisdom_kernel_key,std::vector<std::pair<std::map<std::string,int>,float>>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  void **v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = (void **)(v1 + 136);
      std::vector<std::pair<std::map<std::string,int>,float>>::__destroy_vector::operator()[abi:ne180100](&v2);
      if (*(char *)(v1 + 135) < 0)
        operator delete(*(void **)(v1 + 112));
      if (*(char *)(v1 + 79) < 0)
        operator delete(*(void **)(v1 + 56));
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

void std::vector<std::pair<std::map<std::string,int>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 32;
      do
      {
        std::__tree<std::string>::destroy(v6, *(char **)(v6 + 8));
        v7 = v6 == (_QWORD)v2;
        v6 -= 32;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::wisdom_trainer::train(Espresso::wisdom_trainer *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  float v13;
  int v14;
  float v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t **v21;
  std::string __p;
  std::string v23;
  __int128 v24;
  __int128 v25;
  std::string v26;
  char *v27[3];
  __int128 **v28;
  char *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  std::string v37;
  __int128 *v38;
  __int128 *v39[2];

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v21 = (uint64_t **)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v20 = a2;
  *(_QWORD *)a2 = *(_QWORD *)this;
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)((char *)this + 8));
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v3 != (_QWORD *)((char *)this + 40))
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v3[4], v3[5]);
      else
        v33 = *(std::string *)(v3 + 4);
      if (*((char *)v3 + 79) < 0)
        std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v3[7], v3[8]);
      else
        v34 = *(std::string *)(v3 + 7);
      v5 = *((_OWORD *)v3 + 6);
      v35 = *((_OWORD *)v3 + 5);
      v36 = v5;
      if (*((char *)v3 + 135) < 0)
        std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v3[14], v3[15]);
      else
        v37 = *(std::string *)(v3 + 14);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v6 = v3[17];
      v7 = v3[18];
      v28 = &v30;
      LOBYTE(v29) = 0;
      v8 = v7 - v6;
      if (v7 == v6)
        goto LABEL_27;
      if (v8 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v30 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v8 >> 5);
      v31 = v30;
      v32 = &v30[2 * v9];
      v38 = v30;
      v39[0] = v30;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
      v10 = v30;
      v23.__r_.__value_.__s.__data_[0] = 0;
      do
      {
        std::map<std::string,int>::map[abi:ne180100]((uint64_t)v10, (_QWORD *)v6);
        *((_DWORD *)v10 + 6) = *(_DWORD *)(v6 + 24);
        v10 = v39[0] + 2;
        v39[0] += 2;
        v6 += 32;
      }
      while (v6 != v7);
      v23.__r_.__value_.__s.__data_[0] = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::map<std::string,int>,float>>,std::pair<std::map<std::string,int>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
      v31 = v10;
      v11 = v30;
      if (v30 == v10)
      {
LABEL_27:
        NSLog(CFSTR("[wisdom_trainer::train] error!"), v20);
      }
      else
      {
        v12 = 0;
        v13 = 0.0;
        v14 = -1;
        do
        {
          std::map<std::string,int>::map[abi:ne180100]((uint64_t)&__p, v11);
          v15 = *((float *)v11 + 6);
          *(float *)&v23.__r_.__value_.__l.__data_ = v15;
          v16 = v15 < v13 || v14 == -1;
          if (v16)
          {
            v13 = v15;
            v14 = v12;
          }
          ++v12;
          std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
          v11 += 2;
        }
        while (v11 != v10);
        std::map<std::string,int>::map[abi:ne180100]((uint64_t)&v28, &v30[2 * v14]);
        std::string::basic_string[abi:ne180100]<0>(&__p, "cost");
        v39[0] = (__int128 *)&__p;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v28, &__p, v39)+ 14) = (int)(float)(v13 * 1000.0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
        else
          __p = v33;
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v23, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
        else
          v23 = v34;
        v24 = v35;
        v25 = v36;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v26, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        else
          v26 = v37;
        std::map<std::string,int>::map[abi:ne180100]((uint64_t)v27, &v28);
        Espresso::wisdom_kernel_key::cache_string((Espresso::wisdom_kernel_key *)&v33);
        v39[0] = (__int128 *)&v33;
        v17 = std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::__emplace_unique_key_args<Espresso::wisdom_kernel_key,std::piecewise_construct_t const&,std::tuple<Espresso::wisdom_kernel_key const&>,std::tuple<>>(v21, (uint64_t)&v33, v39)+ 17;
        if (v17 != (uint64_t *)&v28)
          std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v17, v28, &v29);
        std::__tree<std::string>::destroy((uint64_t)v27, v27[1]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__tree<std::string>::destroy((uint64_t)&v28, v29);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      std::vector<std::pair<std::map<std::string,int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v18 = (char *)v3[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)v3[2];
          v16 = *(_QWORD *)v19 == (_QWORD)v3;
          v3 = v19;
        }
        while (!v16);
      }
      v3 = v19;
    }
    while (v19 != v4);
  }
}

void sub_191830A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Espresso::wisdom *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43)
{
  Espresso::wisdom::~wisdom(a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v5 = (uint64_t)result;
  if (result[2])
  {
    v6 = *result;
    v8 = (uint64_t **)(result + 1);
    v7 = result[1];
    *result = result + 1;
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(uint64_t **)(v6 + 8);
    else
      v9 = (uint64_t *)v6;
    v22 = result;
    v23 = v9;
    v24 = v9;
    if (v9)
    {
      v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          *((_DWORD *)v9 + 14) = *((_DWORD *)v10 + 14);
          v11 = *v8;
          v12 = (uint64_t **)(v5 + 8);
          v13 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v12, v13, v24);
          v9 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (_QWORD *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)&v22, v5, (uint64_t)(a2 + 4));
      v16 = v22;
      v17 = *(uint64_t **)(v5 + 8);
      v18 = (uint64_t **)(v5 + 8);
      v19 = (uint64_t **)(v5 + 8);
      if (v17)
      {
        do
        {
          while (1)
          {
            v18 = (uint64_t **)v17;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4))
              break;
            v17 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_31;
          }
          v17 = v18[1];
        }
        while (v17);
        v19 = v18 + 1;
      }
LABEL_31:
      result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v18, v19, v16);
      v20 = (_QWORD *)a2[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)a2[2];
          v15 = *v21 == (_QWORD)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void sub_191830D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<Espresso::wisdom_kernel_key,std::map<std::string,int>>::~pair(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 104, *(char **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::wisdom::~wisdom(Espresso::wisdom *this)
{
  std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(*((_QWORD **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::map<std::string,int>,float>>,std::pair<std::map<std::string,int>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 32;
      do
      {
        std::__tree<std::string>::destroy(v4, *(char **)(v4 + 8));
        v5 = v4 == v3;
        v4 -= 32;
      }
      while (!v5);
    }
  }
  return a1;
}

void Espresso::log_parameterset(_QWORD *a1)
{
  void *p_p;
  void *__p;
  char v3;

  Espresso::wisdom_parameterset_to_string(a1);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  NSLog(CFSTR("[wisdom::log_parameterset] %s"), p_p);
  if (v3 < 0)
    operator delete(__p);
}

void sub_191830ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::wisdom::load_dict(Espresso::wisdom *this, NSDictionary *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  float v26;
  void *v27;
  float v28;
  void *v29;
  float v30;
  void *v31;
  float v32;
  void *v33;
  float v34;
  void *v35;
  float v36;
  void *v37;
  float v38;
  void *v39;
  float v40;
  void *v41;
  float v42;
  void *v43;
  float v44;
  void *v45;
  float v46;
  void *v47;
  float v48;
  void *v49;
  float v50;
  uint64_t *v51;
  void *v52;
  id obj;
  uint64_t **v54;
  uint64_t v55;
  NSDictionary *v56;
  uint64_t v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char **v69;
  char *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void **v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  -[NSDictionary objectForKeyedSubscript:](v56, "objectForKeyedSubscript:", CFSTR("device_key"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsSeparatedByString:", CFSTR(";"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v52 = v4;
  objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)this = objc_msgSend(v5, "intValue");

  objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *((_DWORD *)this + 1) = objc_msgSend(v6, "intValue");

  objc_msgSend(v4, "objectAtIndexedSubscript:", 2);
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  MEMORY[0x19401C808]((char *)this + 8, objc_msgSend(v7, "UTF8String"));

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  -[NSDictionary objectForKeyedSubscript:](v56, "objectForKeyedSubscript:", CFSTR("optimal_parameters"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  obj = v8;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v71, v77, 16);
  if (v9)
  {
    v55 = *(_QWORD *)v72;
    v54 = (uint64_t **)((char *)this + 32);
    do
    {
      v57 = v9;
      for (i = 0; i != v57; ++i)
      {
        if (*(_QWORD *)v72 != v55)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
        -[NSDictionary objectForKeyedSubscript:](v56, "objectForKeyedSubscript:", CFSTR("optimal_parameters"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectForKeyedSubscript:", v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        v70[0] = 0;
        v70[1] = 0;
        v69 = v70;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v14 = v13;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v66;
          do
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v66 != v16)
                objc_enumerationMutation(v14);
              v18 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * j);
              objc_msgSend(v14, "objectForKeyedSubscript:", v18);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = objc_msgSend(v19, "intValue");
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v18), "UTF8String"));
              v75 = __p;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v69, __p, (_OWORD **)&v75)+ 14) = v20;
              if (SBYTE7(v59) < 0)
                operator delete(__p[0]);

            }
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
          }
          while (v15);
        }

        v64 = 0;
        v62 = 0u;
        *(_OWORD *)v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        *(_OWORD *)__p = 0u;
        v59 = 0u;
        objc_msgSend(v11, "componentsSeparatedByString:", CFSTR(";"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "objectAtIndexedSubscript:", 0);
        v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        MEMORY[0x19401C808]((char *)&v59 + 8, objc_msgSend(v22, "UTF8String"));

        objc_msgSend(v21, "objectAtIndexedSubscript:", 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v61) = objc_msgSend(v23, "intValue");

        objc_msgSend(v21, "objectAtIndexedSubscript:", 2);
        v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        MEMORY[0x19401C808](__p, objc_msgSend(v24, "UTF8String"));

        objc_msgSend(v21, "objectAtIndexedSubscript:", 3);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "floatValue");
        DWORD1(v61) = (int)v26;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 4);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "floatValue");
        DWORD2(v61) = (int)v28;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 5);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "floatValue");
        LODWORD(v62) = (int)v30;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 6);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "floatValue");
        HIDWORD(v61) = (int)v32;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 7);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "floatValue");
        DWORD1(v62) = (int)v34;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 8);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "floatValue");
        BYTE8(v62) = (int)v36;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 9);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "floatValue");
        BYTE9(v62) = (int)v38;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 10);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "floatValue");
        BYTE10(v62) = (int)v40;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 11);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "floatValue");
        BYTE11(v62) = (int)v42;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 12);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "floatValue");
        BYTE12(v62) = (int)v44;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 13);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "floatValue");
        BYTE13(v62) = (int)v46;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 14);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "floatValue");
        BYTE14(v62) = (int)v48;

        objc_msgSend(v21, "objectAtIndexedSubscript:", 15);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "floatValue");
        HIBYTE(v62) = (int)v50;

        Espresso::wisdom_kernel_key::cache_string((Espresso::wisdom_kernel_key *)__p);
        v75 = __p;
        v51 = std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::__emplace_unique_key_args<Espresso::wisdom_kernel_key,std::piecewise_construct_t const&,std::tuple<Espresso::wisdom_kernel_key const&>,std::tuple<>>(v54, (uint64_t)__p, (__int128 **)&v75)+ 17;
        if (v51 != (uint64_t *)&v69)
          std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v51, v69, v70);

        if (SHIBYTE(v64) < 0)
          operator delete(v63[0]);
        if (SHIBYTE(v60) < 0)
          operator delete(*((void **)&v59 + 1));
        if (SBYTE7(v59) < 0)
          operator delete(__p[0]);
        std::__tree<std::string>::destroy((uint64_t)&v69, v70[0]);

      }
      v8 = obj;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v77, 16);
    }
    while (v9);
  }

}

void sub_1918314DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44)
{

  _Unwind_Resume(a1);
}

void Espresso::wisdom::load(Espresso::wisdom *this, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  NSDictionary *v6;
  id v7;
  std::runtime_error *exception;
  const char *v9;
  id v10;

  v3 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dataWithContentsOfFile:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v5, 0, &v10);
  v6 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  v7 = v10;
  if (v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    objc_msgSend(v7, "localizedDescription");
    v9 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    std::runtime_error::runtime_error(exception, v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::wisdom::load_dict(this, v6);

}

void sub_19183177C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void Espresso::wisdom::save(Espresso::wisdom *this, const char *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  wisdom_to_dict(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 1, &v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v7;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "writeToFile:atomically:", v6, 1);

}

void sub_191831870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

id wisdom_to_dict(Espresso::wisdom *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  std::string *p_p;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  Espresso::wisdom_device_key *v27;
  void *v28;
  std::string __p;
  _QWORD v30[5];
  _QWORD v31[6];

  v31[5] = *MEMORY[0x1E0C80C00];
  v27 = a1;
  v28 = (void *)objc_opt_new();
  v1 = (_QWORD *)*((_QWORD *)v27 + 4);
  v2 = (_QWORD *)((char *)v27 + 40);
  if (v1 != (_QWORD *)((char *)v27 + 40))
  {
    do
    {
      v3 = (void *)objc_opt_new();
      v4 = (_QWORD *)v1[17];
      if (v4 != v1 + 18)
      {
        do
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v4 + 14), v27);
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = v4 + 4;
          if (*((char *)v4 + 55) < 0)
            v6 = (_QWORD *)*v6;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, v7);

          v8 = (_QWORD *)v4[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (_QWORD *)v4[2];
              v10 = *v9 == (_QWORD)v4;
              v4 = v9;
            }
            while (!v10);
          }
          v4 = v9;
        }
        while (v9 != v1 + 18);
      }
      v11 = v1 + 7;
      if (*((char *)v1 + 79) < 0)
        v11 = (_QWORD *)*v11;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11, v27);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("network_name"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v1 + 20));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("layer_id"));

      v14 = (void *)MEMORY[0x1E0CB3940];
      Espresso::wisdom_kernel_key::to_string(&__p, (uint64_t)(v1 + 4));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v14, "stringWithUTF8String:", p_p);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      objc_msgSend(v28, "setObject:forKeyedSubscript:", v3, v16);

      v17 = (_QWORD *)v1[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v1[2];
          v10 = *v18 == (_QWORD)v1;
          v1 = v18;
        }
        while (!v10);
      }
      v1 = v18;
    }
    while (v18 != v2);
  }
  Espresso::wisdom_device_key::to_string(v27, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19, v27);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", 0.0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)objc_opt_new();
  objc_msgSend(v22, "setDateStyle:", 1);
  objc_msgSend(v22, "setTimeStyle:", 1);
  objc_msgSend(v22, "stringFromDate:", v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = CFSTR("optimal_parameters");
  v30[1] = CFSTR("device_key");
  v31[0] = v28;
  v31[1] = v20;
  v30[2] = CFSTR("device_id");
  v30[3] = CFSTR("date");
  v31[2] = &stru_1E2DD80E0;
  v31[3] = v23;
  v30[4] = CFSTR("version");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "3400.58.3.11.1");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[4] = v24;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 5);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v25;
}

void sub_191831C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::wisdom_device_key::to_string(Espresso::wisdom_device_key *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  id v4;

  v3 = (_QWORD *)((char *)this + 8);
  if (*((char *)this + 31) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d;%d;%s"),
    *(unsigned int *)this,
    *((unsigned int *)this + 1),
    v3);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v4, "UTF8String"));

}

void sub_191831D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void Espresso::wisdom::upload(Espresso::wisdom *this, const char *a2)
{
  void *v3;
  NSData *v4;
  id v5;
  id v6;

  wisdom_to_dict(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 1, &v6);
  v4 = (NSData *)objc_claimAutoreleasedReturnValue();
  v5 = v6;
  upload_jsdata(a2, v4);

}

void sub_191831DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void upload_jsdata(const char *a1, NSData *a2)
{
  NSData *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  dispatch_semaphore_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  intptr_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v16;
  NSObject *v17;
  const char *v18;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CB37A8];
  v5 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "requestWithURL:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "setHTTPMethod:", CFSTR("POST"));
  objc_msgSend(v8, "setValue:forHTTPHeaderField:", CFSTR("application/json; charset=utf-8"), CFSTR("Content-Type"));
  objc_msgSend(v8, "setHTTPBody:", v3);
  v9 = dispatch_semaphore_create(0);
  objc_msgSend(MEMORY[0x1E0CB39F0], "sharedSession");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("uploading!"));
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = ___ZL13upload_jsdataPKcP6NSData_block_invoke;
  v16 = &unk_1E2DD6C90;
  v18 = a1;
  v11 = v9;
  v17 = v11;
  objc_msgSend(v10, "dataTaskWithRequest:completionHandler:", v8, &v13);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "resume", v13, v14, v15, v16);
  dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_191831F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

intptr_t ___ZL13upload_jsdataPKcP6NSData_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSLog(CFSTR("[upload_jsdata] %s resp=%@ err=%@"), *(_QWORD *)(a1 + 40), a3, a4);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void Espresso::perf_benchmark_result::upload(const entry **this, const char *a2)
{
  void *v3;
  NSData *v4;
  id v5;
  id v6;

  perf_benchmark_result_to_dictionary(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 1, &v6);
  v4 = (NSData *)objc_claimAutoreleasedReturnValue();
  v5 = v6;
  -[NSData writeToFile:atomically:](v4, "writeToFile:atomically:", CFSTR("bench.txt"), 1);
  upload_jsdata(a2, v4);

}

void sub_1918320CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id perf_benchmark_result_to_dictionary(const entry **a1)
{
  uint64_t v2;
  const entry *v3;
  std::string *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  void **p_p;
  const entry *v24;
  void *v25;
  void *v26;
  std::string v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  const __CFString *v40;
  void *v41;
  _QWORD v42[9];
  _QWORD v43[11];

  v43[9] = *MEMORY[0x1E0C80C00];
  v2 = objc_opt_new();
  v3 = *a1;
  v24 = a1[1];
  v25 = (void *)v2;
  if (*a1 != v24)
  {
    p_p = &__p;
    do
    {
      Espresso::perf_benchmark_result::entry::entry(&v27, v3);
      v42[0] = CFSTR("device");
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v4 = &v27;
      else
        v4 = (std::string *)v27.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4, p_p);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v43[0] = v26;
      v42[1] = CFSTR("device_id");
      if (v29 >= 0)
        v5 = &v28;
      else
        v5 = v28;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v43[1] = v6;
      v42[2] = CFSTR("name");
      if (v31 >= 0)
        v7 = &v30;
      else
        v7 = v30;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v43[2] = v8;
      v42[3] = CFSTR("netname");
      if (v33 >= 0)
        v9 = &v32;
      else
        v9 = v32;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v43[3] = v10;
      v42[4] = CFSTR("wisdom_string");
      if (v35 >= 0)
        v11 = p_p;
      else
        v11 = __p;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v43[4] = v12;
      v42[5] = CFSTR("wisdom_level");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v36);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v43[5] = v13;
      v42[6] = CFSTR("time_ms");
      LODWORD(v14) = v37;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v43[6] = v15;
      v42[7] = CFSTR("gflops");
      LODWORD(v16) = v38;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v43[7] = v17;
      v42[8] = CFSTR("error");
      LODWORD(v18) = v39;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v43[8] = v19;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, v42, 9);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "addObject:", v20);

      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
      if (v29 < 0)
        operator delete(v28);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v3 = (const entry *)((char *)v3 + 136);
    }
    while (v3 != v24);
  }
  v40 = CFSTR("entries");
  v41 = v25;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_19183242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

std::string *Espresso::perf_benchmark_result::entry::entry(std::string *this, const entry *a2)
{
  __int128 v4;
  __int128 v5;
  entry v6;
  __int128 v7;
  std::string *v8;
  entry v9;

  if (SHIBYTE(a2[1].key) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->key, (std::string::size_type)a2->data);
  }
  else
  {
    v4 = (__int128)*a2;
    this->__r_.__value_.__r.__words[2] = (std::string::size_type)a2[1].key;
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(a2[2].data) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, (const std::string::value_type *)a2[1].data, (std::string::size_type)a2[2].key);
  }
  else
  {
    v5 = *(_OWORD *)&a2[1].data;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[2].data;
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (SHIBYTE(a2[4].key) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, a2[3].key, (std::string::size_type)a2[3].data);
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[4].key;
    *(entry *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (SHIBYTE(a2[5].data) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, (const std::string::value_type *)a2[4].data, (std::string::size_type)a2[5].key);
  }
  else
  {
    v7 = *(_OWORD *)&a2[4].data;
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[5].data;
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 4;
  if (SHIBYTE(a2[7].key) < 0)
  {
    std::string::__init_copy_ctor_external(v8, a2[6].key, (std::string::size_type)a2[6].data);
  }
  else
  {
    v9 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[7].key;
    *(entry *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(entry *)&this[5].__r_.__value_.__l.__data_ = *(const entry *)((char *)a2 + 120);
  return this;
}

void sub_1918325F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::perf_benchmark_result::save(const entry **this, const char *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  perf_benchmark_result_to_dictionary(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 1, &v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v7;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "writeToFile:atomically:", v6, 1);

}

void sub_1918326FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void Espresso::perf_benchmark_result::add_entry(int64x2_t *a1, const std::string *a2, const std::string *a3, const std::string *a4, int a5, const std::string *a6, float a7, float a8, float a9)
{
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64x2_t v34;
  char *v35;
  void *v36[2];
  void *v37[2];
  __int128 v38;
  void *v39[2];
  void *v40[2];
  __int128 v41;
  std::string __p;
  int v43;
  float v44;
  float v45;
  float v46;
  char *v47;
  int64x2_t v48;
  char *v49;
  int64x2_t *v50;

  v41 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v36 = 0u;
  MEMORY[0x19401C808](&v37[1], objc_msgSend(&stru_1E2DD80E0, "UTF8String"));
  std::string::operator=((std::string *)v36, a2);
  std::string::operator=((std::string *)v39, a4);
  v43 = a5;
  std::string::operator=(&__p, a6);
  v44 = a7;
  v45 = a8;
  std::string::operator=((std::string *)&v40[1], a3);
  v46 = a9;
  v18 = a1[1].u64[0];
  v19 = a1->u64[1];
  if (v19 >= v18)
  {
    v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v19 - a1->i64[0]) >> 3);
    if (v21 + 1 > 0x1E1E1E1E1E1E1E1)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v22 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v18 - a1->i64[0]) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= v21 + 1)
      v23 = v21 + 1;
    if (v22 >= 0xF0F0F0F0F0F0F0)
      v24 = 0x1E1E1E1E1E1E1E1;
    else
      v24 = v23;
    v50 = a1 + 1;
    if (v24)
    {
      if (v24 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = (char *)operator new(136 * v24);
    }
    else
    {
      v25 = 0;
    }
    v47 = v25;
    v48.i64[0] = (uint64_t)&v25[136 * v21];
    v48.i64[1] = v48.i64[0];
    v49 = &v25[136 * v24];
    Espresso::perf_benchmark_result::entry::entry((std::string *)v48.i64[0], (const entry *)v36);
    v26 = v48.i64[0];
    v20 = v48.i64[1] + 136;
    v48.i64[1] += 136;
    v28 = a1->i64[0];
    v27 = a1->u64[1];
    if (v27 == a1->i64[0])
    {
      v34 = vdupq_n_s64(v27);
    }
    else
    {
      do
      {
        v29 = *(_OWORD *)(v27 - 136);
        *(_QWORD *)(v26 - 120) = *(_QWORD *)(v27 - 120);
        *(_OWORD *)(v26 - 136) = v29;
        *(_QWORD *)(v27 - 128) = 0;
        *(_QWORD *)(v27 - 120) = 0;
        *(_QWORD *)(v27 - 136) = 0;
        v30 = *(_OWORD *)(v27 - 112);
        *(_QWORD *)(v26 - 96) = *(_QWORD *)(v27 - 96);
        *(_OWORD *)(v26 - 112) = v30;
        *(_QWORD *)(v27 - 104) = 0;
        *(_QWORD *)(v27 - 96) = 0;
        *(_QWORD *)(v27 - 112) = 0;
        v31 = *(_OWORD *)(v27 - 88);
        *(_QWORD *)(v26 - 72) = *(_QWORD *)(v27 - 72);
        *(_OWORD *)(v26 - 88) = v31;
        *(_QWORD *)(v27 - 80) = 0;
        *(_QWORD *)(v27 - 72) = 0;
        *(_QWORD *)(v27 - 88) = 0;
        v32 = *(_OWORD *)(v27 - 64);
        *(_QWORD *)(v26 - 48) = *(_QWORD *)(v27 - 48);
        *(_OWORD *)(v26 - 64) = v32;
        *(_QWORD *)(v27 - 64) = 0;
        *(_QWORD *)(v27 - 56) = 0;
        *(_QWORD *)(v27 - 48) = 0;
        v33 = *(_OWORD *)(v27 - 40);
        *(_QWORD *)(v26 - 24) = *(_QWORD *)(v27 - 24);
        *(_OWORD *)(v26 - 40) = v33;
        *(_QWORD *)(v27 - 40) = 0;
        *(_QWORD *)(v27 - 32) = 0;
        *(_QWORD *)(v27 - 24) = 0;
        *(_OWORD *)(v26 - 16) = *(_OWORD *)(v27 - 16);
        v26 -= 136;
        v27 -= 136;
      }
      while (v27 != v28);
      v34 = *a1;
      v20 = v48.i64[1];
    }
    a1->i64[0] = v26;
    a1->i64[1] = v20;
    v48 = v34;
    v35 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v49;
    v49 = v35;
    v47 = (char *)v34.i64[0];
    std::__split_buffer<Espresso::perf_benchmark_result::entry>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    Espresso::perf_benchmark_result::entry::entry((std::string *)a1->i64[1], (const entry *)v36);
    v20 = v19 + 136;
    a1->i64[1] = v19 + 136;
  }
  a1->i64[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[1]);
  if (SHIBYTE(v40[0]) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  if (SHIBYTE(v37[0]) < 0)
    operator delete(v36[0]);
}

void sub_191832A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__split_buffer<Espresso::perf_benchmark_result::entry>::~__split_buffer((uint64_t)&a26);
  Espresso::builtin_params_t::~builtin_params_t(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::perf_benchmark_result::entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::allocator<Espresso::perf_benchmark_result::entry>::destroy[abi:ne180100](i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<Espresso::perf_benchmark_result::entry>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

double Espresso::wisdom_device_key::key_for_platform@<D0>(uint64_t (****a1)(_QWORD)@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = (**a1[1])(a1[1]);
  *(_DWORD *)(a3 + 4) = a2;
  ((void (*)(__int128 *__return_ptr, uint64_t (****)(_QWORD)))(*a1)[3])(&v7, a1);
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

double Espresso::wisdom_device_key::key_for_platform@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a1 + 8))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  *(_DWORD *)(a3 + 4) = a2;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 24))(&v7);
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

void Espresso::pass_re_lower_to_network::~pass_re_lower_to_network(Espresso::pass_re_lower_to_network *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_re_lower_to_network::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_re_lower_to_network::run_on_network(int64x2_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  Espresso::net *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void **p_p;
  void *__p;
  int64x2_t v60;
  uint64_t v61;
  int64x2_t *v62;

  Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(&v56, (uint64_t)a1);
  v5 = v56;
  if (v56)
  {
    v49 = a2;
    v7 = a1[2].i64[0];
    for (i = a1[2].i64[1]; i != v7; i = std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16))
      ;
    a1[2].i64[1] = v7;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)a1[6].i64);
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)&a1[3].i64[1]);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear(&a1[55].i64[1]);
    v9 = *(_QWORD **)(v5 + 8);
    v51 = *(_QWORD **)(v5 + 16);
    if (v9 != v51)
    {
      v50 = (float *)&a1[55].i32[2];
      do
      {
        v52 = v9;
        v53 = (a1[2].i64[1] - a1[2].i64[0]) >> 4;
        v55 = v53;
        v10 = *v9;
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 != v10)
        {
          v12 = 0;
          do
          {
            v14 = a1[2].i64[0];
            v13 = (_QWORD *)a1[2].i64[1];
            v15 = ((uint64_t)v13 - v14) >> 4;
            v54 = v15;
            v16 = *(__int128 **)(v11 + 16);
            v17 = a1[3].u64[0];
            if ((unint64_t)v13 >= v17)
            {
              v22 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v23 = v17 - v14;
              if (v23 >> 3 > v22)
                v22 = v23 >> 3;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                v24 = 0xFFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              v62 = a1 + 3;
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v24);
              v27 = &v25[16 * v15];
              v28 = *v16;
              *(_OWORD *)v27 = *v16;
              if (*((_QWORD *)&v28 + 1))
              {
                v29 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v32 = (_QWORD *)a1[2].i64[0];
              v31 = (_QWORD *)a1[2].i64[1];
              if (v31 == v32)
              {
                v35 = vdupq_n_s64((unint64_t)v31);
                v33 = &v25[16 * v15];
              }
              else
              {
                v33 = &v25[16 * v15];
                do
                {
                  v34 = *((_OWORD *)v31 - 1);
                  v31 -= 2;
                  *((_OWORD *)v33 - 1) = v34;
                  v33 -= 16;
                  *v31 = 0;
                  v31[1] = 0;
                }
                while (v31 != v32);
                v35 = a1[2];
              }
              v21 = v27 + 16;
              a1[2].i64[0] = (uint64_t)v33;
              a1[2].i64[1] = (uint64_t)(v27 + 16);
              v60 = v35;
              v36 = a1[3].i64[0];
              a1[3].i64[0] = (uint64_t)&v25[16 * v26];
              v61 = v36;
              __p = (void *)v35.i64[0];
              std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              *v13 = *(_QWORD *)v16;
              v18 = *((_QWORD *)v16 + 1);
              v13[1] = v18;
              if (v18)
              {
                v19 = (unint64_t *)(v18 + 8);
                do
                  v20 = __ldxr(v19);
                while (__stxr(v20 + 1, v19));
              }
              v21 = v13 + 2;
            }
            a1[2].i64[1] = (uint64_t)v21;
            v37 = *(_QWORD *)(v11 + 16);
            __p = &v54;
            v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1[6].i64, (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)+ 3;
            if (v38 != (_QWORD *)(v37 + 16))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v38, *(std::string **)(v37 + 16), *(std::string **)(v37 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 24) - *(_QWORD *)(v37 + 16)) >> 3));
            v39 = *(_QWORD *)(v11 + 16);
            __p = &v54;
            v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&a1[3].i64[1], (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)+ 3;
            if (v40 != (_QWORD *)(v39 + 40))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v40, *(std::string **)(v39 + 40), *(std::string **)(v39 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v39 + 48) - *(_QWORD *)(v39 + 40)) >> 3));
            v41 = *(_QWORD *)(**(_QWORD **)(v11 + 16) + 64);
            std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
            if (v12)
            {
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v41 + 240), (unsigned __int8 *)&__p);
            }
            else
            {
              p_p = &__p;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 240, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 10) = 1;
            }
            if (v60.i8[15] < 0)
              operator delete(__p);
            ++v12;
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
        }
        v42 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v50, v53, &v55);
        v42[3] = 0;
        v42[4] = 0;
        *((_BYTE *)v42 + 40) = 0;
        std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v50, v53, &v55)[3] = v53;
        v44 = a1[2].i64[0];
        v43 = a1[2].i64[1];
        std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v50, v53, &v55)[4] = (v43 - v44) >> 4;
        v9 = v52 + 2;
      }
      while (v52 + 2 != v51);
    }
    Espresso::correct_jump_labels_after_ordering_change((Espresso *)a1, v8);
    v45 = 1;
    a2 = v49;
  }
  else
  {
    v45 = 0;
  }
  *(_BYTE *)a2 = v45;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v46 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_191833968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Espresso::correct_jump_labels_after_ordering_change(Espresso *this, Espresso::net *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  char *v15;
  char *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  const void *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  uint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  __int128 *v58[2];
  char *v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  void *__p[3];
  __int128 *v63;

  v3 = (_QWORD *)((char *)this + 928);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)this + 928);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4);
  v4 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      *(_QWORD *)&v61 = *(_QWORD *)(v4 + v5) + 16;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, v61, (uint64_t)&std::piecewise_construct, (__int128 **)&v61)[5] = v6;
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)this + 111, v6))
      {
        v7 = v6;
      }
      *((_QWORD *)__p[0] + v6++) = v7;
      v4 = *((_QWORD *)this + 4);
      v8 = *((_QWORD *)this + 5);
      v5 += 16;
    }
    while (v6 < (v8 - v4) >> 4);
    if (v8 != v4)
    {
      v9 = 0;
      do
      {
        v10 = *(_OWORD *)(v4 + 16 * v9);
        v61 = v10;
        if (*((_QWORD *)&v10 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = v10;
        v14 = *(const void **)(v10 + 64);
        if (v14)
        {
          if (v15)
          {
            v16 = v15;
            v17 = *(__int128 **)(v13 + 72);
            v59 = v15;
            v60 = (std::__shared_weak_count *)v17;
            if (v17)
            {
              v18 = (unint64_t *)v17 + 1;
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
            if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v3, (uint64_t)(v15 + 8)))
            {
              if (v16[31] >= 0)
                v52 = v16 + 8;
              else
                v52 = (const char *)*((_QWORD *)v16 + 1);
              v53 = (const char *)(v13 + 40);
              if (*(char *)(v13 + 63) < 0)
                v53 = *(const char **)v53;
              v54 = (const char *)(v13 + 16);
              if (*(char *)(v13 + 39) < 0)
                v54 = *(const char **)v54;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*,char const*>(v52, v53, v54);
            }
            v58[0] = (__int128 *)(v16 + 8);
            v20 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v16 + 8), (uint64_t)&std::piecewise_construct, v58);
            std::string::operator=((std::string *)(v16 + 8), (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)__p[0] + v20[5])) + 16));
            if (v21)
            {
              v22 = v21;
              v58[0] = v21;
              v58[1] = v17;
              if (v17)
              {
                v23 = (unint64_t *)v17 + 1;
                do
                  v24 = __ldxr(v23);
                while (__stxr(v24 + 1, v23));
              }
              if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v3, (uint64_t)v21 + 328))
              {
                if (*((char *)v22 + 351) >= 0)
                  v55 = (char *)v22 + 328;
                else
                  v55 = (const char *)*((_QWORD *)v22 + 41);
                v56 = (const char *)(v13 + 40);
                if (*(char *)(v13 + 63) < 0)
                  v56 = *(const char **)v56;
                v57 = (const char *)(v13 + 16);
                if (*(char *)(v13 + 39) < 0)
                  v57 = *(const char **)v57;
                Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*,char const*>(v55, v56, v57);
              }
              v63 = (__int128 *)((char *)v22 + 328);
              v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)v22 + 328, (uint64_t)&std::piecewise_construct, &v63);
              std::string::operator=((std::string *)((char *)v22 + 328), (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)__p[0] + v25[5])) + 16));
              if (v17)
              {
                v26 = (unint64_t *)v17 + 1;
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  (*(void (**)(__int128 *))(*(_QWORD *)v17 + 16))(v17);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
                }
              }
            }
            v28 = v60;
            if (v60)
            {
              p_shared_owners = (unint64_t *)&v60->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        if (*((_QWORD *)&v61 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        ++v9;
        v4 = *((_QWORD *)this + 4);
        v34 = *((_QWORD *)this + 5);
      }
      while (v9 < (v34 - v4) >> 4);
      if (v34 != v4)
      {
        v35 = 0;
        do
        {
          v36 = *(_OWORD *)(v4 + 16 * v35);
          v61 = v36;
          if (*((_QWORD *)&v36 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v39 = v36;
          v40 = *(const void **)(v36 + 64);
          if (v40)
          {
            if (v41)
            {
              v42 = *(std::__shared_weak_count **)(v39 + 72);
              v59 = v41;
              v60 = v42;
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
              }
              v45 = (std::string *)(v41 + 296);
              v58[0] = (__int128 *)(v41 + 296);
              v46 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v41 + 296), (uint64_t)&std::piecewise_construct, v58);
              std::string::operator=(v45, (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)__p[0] + v46[5])) + 16));
              if (v42)
              {
                v47 = (unint64_t *)&v42->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
            }
          }
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          ++v35;
          v4 = *((_QWORD *)this + 4);
        }
        while (v35 < (*((_QWORD *)this + 5) - v4) >> 4);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191833E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*,char const*>(const char *a1, const char *a2, const char *a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Layer name \"%s\" used as label in %s layer \"%s\" not found", a1, a2, a3);
}

uint64_t Espresso::__launch_spmv_inner_product(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 *a20)
{
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float16x4_t *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  float32x4_t *v49;
  float16x4_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t *v79;
  unsigned __int16 *v80;
  unsigned int v81;
  float32x4_t *v82;
  float32x4_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 *v93;
  float32x4_t *v94;
  float16x8_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  __int128 v118;
  __int128 v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 block;
  __int128 v124;
  __int128 v125;
  __int128 vars0;

  v24 = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1);
  v25 = v24[27];
  v26 = v24[28];
  if (v25 == 16 && v26 == 1)
  {
    v30 = a1[106];
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v33 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v34 = *(unsigned __int16 **)(a1[108] + 16);
      v35 = *(_QWORD *)(a1[110] + 16);
      v36 = *v24;
      if (a4)
      {
        if ((_DWORD)v36)
        {
          v37 = 0;
          do
          {
            v38 = v34[v37];
            v39 = v37 + 1;
            v40 = v34[v37 + 1];
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            if (v38 < v40)
            {
              v45 = v40 - v38;
              v46 = (float16x4_t *)(v31 + 32 * v38);
              v47 = (unsigned __int16 *)(v35 + 2 * v38);
              do
              {
                v48 = *v47++;
                v49 = (float32x4_t *)(v32 + ((unint64_t)v48 << 6));
                v50 = v46;
                v46 += 4;
                v44 = vmlaq_f32(v44, vcvtq_f32_f16(*v50), *v49);
                v43 = vmlaq_f32(v43, vcvtq_f32_f16(v50[1]), v49[1]);
                v42 = vmlaq_f32(v42, vcvtq_f32_f16(v50[2]), v49[2]);
                v41 = vmlaq_f32(v41, vcvtq_f32_f16(v50[3]), v49[3]);
                --v45;
              }
              while (v45);
            }
            *(_DWORD *)(v33 + 4 * v37++) = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)))), vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)))), vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)))),
                                                 vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))))))).u32[0];
          }
          while (v39 != v36);
        }
      }
      else if ((_DWORD)v36)
      {
        v84 = 0;
        LODWORD(v85) = *v34;
        do
        {
          v86 = v84 + 1;
          v87 = v34[v84 + 1];
          v88 = 0.0;
          if (v85 < v87)
          {
            v85 = v85;
            v89 = (__int128 *)(v31 + 32 * v85);
            do
            {
              v90 = 0;
              v91 = *(unsigned __int16 *)(v35 + 2 * v85);
              v92 = v89[1];
              block = *v89;
              v124 = v92;
              v93 = (__int128 *)(v32 + (v91 << 6));
              a9 = *v93;
              a10 = v93[1];
              a11 = v93[2];
              a12 = v93[3];
              v94 = (float32x4_t *)&a9;
              do
              {
                v95 = *(float16x8_t *)((char *)&block + v90);
                v96 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
                v97 = *v94;
                v98 = v94[1];
                v94 += 2;
                v99 = vmulq_f32(v98, vcvt_hight_f32_f16(v95));
                v100 = vmulq_f32(v97, v96);
                v88 = (float)((float)((float)((float)((float)((float)((float)(v88 + v100.f32[0]) + v100.f32[1])
                                                            + v100.f32[2])
                                                    + v100.f32[3])
                                            + v99.f32[0])
                                    + v99.f32[1])
                            + v99.f32[2])
                    + v99.f32[3];
                v90 += 16;
              }
              while (v90 != 32);
              v89 += 2;
              ++v85;
            }
            while (v85 != v87);
          }
          *(float *)(v33 + 4 * v84) = v88;
          LODWORD(v85) = v87;
          ++v84;
        }
        while (v86 != v36);
      }
      return 1;
    }
    v63 = a1[104];
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 16);
      v65 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v66 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v67 = *(unsigned __int16 **)(a1[108] + 16);
      v68 = *(_QWORD *)(a1[110] + 16);
      v69 = *v24;
      if (a4)
      {
        if ((_DWORD)v69)
        {
          v70 = 0;
          do
          {
            v71 = v67[v70];
            v72 = v70 + 1;
            v73 = v67[v70 + 1];
            v74 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            if (v71 < v73)
            {
              v78 = v73 - v71;
              v79 = (float32x4_t *)(v64 + (v71 << 6));
              v80 = (unsigned __int16 *)(v68 + 2 * v71);
              do
              {
                v81 = *v80++;
                v82 = (float32x4_t *)(v65 + ((unint64_t)v81 << 6));
                v83 = v79;
                v79 += 4;
                v77 = vmlaq_f32(v77, *v83, *v82);
                v76 = vmlaq_f32(v76, v83[1], v82[1]);
                v75 = vmlaq_f32(v75, v83[2], v82[2]);
                v74 = vmlaq_f32(v74, v83[3], v82[3]);
                --v78;
              }
              while (v78);
            }
            *(_DWORD *)(v66 + 4 * v70++) = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1)))), vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)))), vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)))),
                                                 vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))))))).u32[0];
          }
          while (v72 != v69);
        }
      }
      else if ((_DWORD)v69)
      {
        v109 = 0;
        LODWORD(v110) = *v67;
        do
        {
          v111 = v109 + 1;
          v112 = v67[v109 + 1];
          v113 = 0.0;
          if (v110 < v112)
          {
            v110 = v110;
            v114 = (__int128 *)(v64 + ((unint64_t)v110 << 6));
            do
            {
              v115 = 0;
              v116 = *(unsigned __int16 *)(v68 + 2 * v110);
              a9 = *v114;
              a10 = v114[1];
              a11 = v114[2];
              a12 = v114[3];
              v117 = (__int128 *)(v65 + (v116 << 6));
              v118 = v117[1];
              block = *v117;
              v124 = v118;
              v119 = v117[3];
              v125 = v117[2];
              vars0 = v119;
              do
              {
                v120 = vmulq_f32(*(float32x4_t *)((char *)&a9 + v115), *(float32x4_t *)((char *)&block + v115));
                v113 = (float)((float)((float)(v113 + v120.f32[0]) + v120.f32[1]) + v120.f32[2]) + v120.f32[3];
                v115 += 16;
              }
              while (v115 != 64);
              v114 += 4;
              ++v110;
            }
            while (v110 != v112);
          }
          *(float *)(v66 + 4 * v109) = v113;
          LODWORD(v110) = v112;
          ++v109;
        }
        while (v111 != v69);
      }
      return 1;
    }
    goto LABEL_88;
  }
  if (v25 != 4 || v26 != 4)
    return 0;
  v51 = a1[106];
  if (!v51)
  {
    v101 = a1[104];
    if (v101)
    {
      v102 = *(_QWORD *)(v101 + 16);
      v103 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v104 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v105 = *(_QWORD *)(a1[108] + 16);
      v106 = *(_QWORD *)(a1[110] + 16);
      v107 = *v24;
      v58 = v107 >> 2;
      if (a4)
      {
        v59 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&a9 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&a9 + 1) = 3221225472;
        *(_QWORD *)&a10 = ___ZN8Espresso19spmv_sparseblock4x4IffLi1EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke;
        *((_QWORD *)&a10 + 1) = &__block_descriptor_72_e8_v16__0Q8l;
        *(_QWORD *)&a11 = v105;
        *((_QWORD *)&a11 + 1) = v102;
        *(_QWORD *)&a12 = v106;
        *((_QWORD *)&a12 + 1) = v103;
        a13 = v104;
        a20 = &a9;
        if (Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken != -1)
          dispatch_once(&Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken, &__block_literal_global_16514);
        v60 = Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size;
        if (!Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size)
          v60 = 4096;
        v61 = (v58 - 1) / v60 + 1;
        if (v61 <= 1)
        {
          if (v107 >= 4)
          {
            v108 = 0;
            do
              ((void (*)(__int128 *, uint64_t))a10)(&a9, v108++);
            while (v58 != v108);
          }
          return 1;
        }
      }
      else
      {
        v59 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&a9 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&a9 + 1) = 3221225472;
        *(_QWORD *)&a10 = ___ZN8Espresso19spmv_sparseblock4x4IffLi0EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke;
        *((_QWORD *)&a10 + 1) = &__block_descriptor_72_e8_v16__0Q8l;
        *(_QWORD *)&a11 = v105;
        *((_QWORD *)&a11 + 1) = v102;
        *(_QWORD *)&a12 = v106;
        *((_QWORD *)&a12 + 1) = v103;
        a13 = v104;
        a20 = &a9;
        if (Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken != -1)
          dispatch_once(&Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken, &__block_literal_global_16514);
        v60 = Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size;
        if (!Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size)
          v60 = 4096;
        v61 = (v58 - 1) / v60 + 1;
        if (v61 <= 1)
        {
          if (v107 >= 4)
          {
            v122 = 0;
            do
              ((void (*)(__int128 *, uint64_t))a10)(&a9, v122++);
            while (v58 != v122);
          }
          return 1;
        }
      }
      goto LABEL_86;
    }
LABEL_88:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing weights");
  }
  v52 = *(_QWORD *)(v51 + 16);
  v53 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v54 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v55 = *(_QWORD *)(a1[108] + 16);
  v56 = *(_QWORD *)(a1[110] + 16);
  v57 = *v24;
  v58 = v57 >> 2;
  if (a4)
  {
    v59 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&a9 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&a9 + 1) = 3221225472;
    *(_QWORD *)&a10 = ___ZN8Espresso19spmv_sparseblock4x4IDF16_fLi1EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke;
    *((_QWORD *)&a10 + 1) = &__block_descriptor_72_e8_v16__0Q8l;
    *(_QWORD *)&a11 = v55;
    *((_QWORD *)&a11 + 1) = v52;
    *(_QWORD *)&a12 = v56;
    *((_QWORD *)&a12 + 1) = v53;
    a13 = v54;
    a20 = &a9;
    if (Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken != -1)
      dispatch_once(&Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken, &__block_literal_global_16514);
    v60 = Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size;
    if (!Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size)
      v60 = 4096;
    v61 = (v58 - 1) / v60 + 1;
    if (v61 <= 1)
    {
      if (v57 >= 4)
      {
        v62 = 0;
        do
          ((void (*)(__int128 *, uint64_t))a10)(&a9, v62++);
        while (v58 != v62);
      }
      return 1;
    }
  }
  else
  {
    v59 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&a9 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&a9 + 1) = 3221225472;
    *(_QWORD *)&a10 = ___ZN8Espresso19spmv_sparseblock4x4IDF16_fLi0EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke;
    *((_QWORD *)&a10 + 1) = &__block_descriptor_72_e8_v16__0Q8l;
    *(_QWORD *)&a11 = v55;
    *((_QWORD *)&a11 + 1) = v52;
    *(_QWORD *)&a12 = v56;
    *((_QWORD *)&a12 + 1) = v53;
    a13 = v54;
    a20 = &a9;
    if (Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken != -1)
      dispatch_once(&Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::onceToken, &__block_literal_global_16514);
    v60 = Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size;
    if (!Espresso::launch_chunks(unsigned long,unsigned long,void({block_pointer} const {__autoreleasing}&)(unsigned long))::force_chunk_size)
      v60 = 4096;
    v61 = (v58 - 1) / v60 + 1;
    if (v61 <= 1)
    {
      if (v57 >= 4)
      {
        v121 = 0;
        do
          ((void (*)(__int128 *, uint64_t))a10)(&a9, v121++);
        while (v58 != v121);
      }
      return 1;
    }
  }
LABEL_86:
  *(_QWORD *)&block = v59;
  *((_QWORD *)&block + 1) = 3221225472;
  *(_QWORD *)&v124 = ___ZN8Espresso13launch_chunksEmmRU15__autoreleasingKU13block_pointerFvmE_block_invoke_2;
  *((_QWORD *)&v124 + 1) = &__block_descriptor_56_e8_v16__0Q8l;
  *(_QWORD *)&v125 = v60;
  *((_QWORD *)&v125 + 1) = v58;
  *(_QWORD *)&vars0 = &a20;
  dispatch_apply(v61, 0, &block);
  return 1;
}

uint64_t ___ZN8Espresso13launch_chunksEmmRU15__autoreleasingKU13block_pointerFvmE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 32);
  v3 = v2 * a2;
  v4 = v2 + v2 * a2;
  if (*(_QWORD *)(result + 40) >= v4)
    v5 = v4;
  else
    v5 = *(_QWORD *)(result + 40);
  if (v3 < v5)
  {
    v6 = result;
    do
    {
      result = (*(uint64_t (**)(void))(**(_QWORD **)(v6 + 48) + 16))();
      ++v3;
    }
    while (v5 != v3);
  }
  return result;
}

float32x4_t ___ZN8Espresso19spmv_sparseblock4x4IffLi1EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke(_QWORD *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t result;

  v2 = (unsigned __int16 *)(a1[4] + 2 * a2);
  v3 = *v2;
  v4 = v2[1];
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  if (v3 < v4)
  {
    v9 = v3 << 6;
    do
    {
      v10 = (float32x4_t *)(a1[7] + 16 * *(unsigned __int16 *)(a1[6] + 2 * v3));
      v11 = (float32x4_t *)(a1[5] + v9);
      ++v3;
      v9 += 64;
      v8 = vmlaq_f32(v8, *v11, *v10);
      v7 = vmlaq_f32(v7, v11[1], *v10);
      v6 = vmlaq_f32(v6, v11[2], *v10);
      v5 = vmlaq_f32(v5, v11[3], *v10);
    }
    while (v4 != v3);
  }
  v12.i64[0] = vzip1q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v12.i64[1] = __PAIR64__(v5.u32[0], v6.u32[0]);
  v13.i64[0] = vtrn2q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v13.i64[1] = __PAIR64__(v5.u32[1], v6.u32[1]);
  v14 = vaddq_f32(v12, v13);
  v13.i64[0] = vzip2q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v13.i64[1] = __PAIR64__(v5.u32[2], v6.u32[2]);
  v15.i64[0] = vuzp2q_s32(vuzp2q_s32((int32x4_t)v8, (int32x4_t)v7), (int32x4_t)v8).u64[0];
  v15.i64[1] = __PAIR64__(v5.u32[3], v6.u32[3]);
  result = vaddq_f32(v15, vaddq_f32(v13, v14));
  *(float32x4_t *)(a1[8] + 16 * a2) = result;
  return result;
}

float32x4_t ___ZN8Espresso19spmv_sparseblock4x4IDF16_fLi1EEEvPKNS_5vec16IT_EEPKNS_4vec4IT0_EEPS8_PKtSD_mm_block_invoke(_QWORD *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float16x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t result;

  v2 = (unsigned __int16 *)(a1[4] + 2 * a2);
  v3 = *v2;
  v4 = v2[1];
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  if (v3 < v4)
  {
    v9 = 32 * v3;
    do
    {
      v10 = (float32x4_t *)(a1[7] + 16 * *(unsigned __int16 *)(a1[6] + 2 * v3));
      v11 = (float16x4_t *)(a1[5] + v9);
      ++v3;
      v9 += 32;
      v8 = vmlaq_f32(v8, vcvtq_f32_f16(*v11), *v10);
      v7 = vmlaq_f32(v7, vcvtq_f32_f16(v11[1]), *v10);
      v6 = vmlaq_f32(v6, vcvtq_f32_f16(v11[2]), *v10);
      v5 = vmlaq_f32(v5, vcvtq_f32_f16(v11[3]), *v10);
    }
    while (v4 != v3);
  }
  v12.i64[0] = vzip1q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v12.i64[1] = __PAIR64__(v5.u32[0], v6.u32[0]);
  v13.i64[0] = vtrn2q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v13.i64[1] = __PAIR64__(v5.u32[1], v6.u32[1]);
  v14 = vaddq_f32(v12, v13);
  v13.i64[0] = vzip2q_s32((int32x4_t)v8, (int32x4_t)v7).u64[0];
  v13.i64[1] = __PAIR64__(v5.u32[2], v6.u32[2]);
  v15.i64[0] = vuzp2q_s32(vuzp2q_s32((int32x4_t)v8, (int32x4_t)v7), (int32x4_t)v8).u64[0];
  v15.i64[1] = __PAIR64__(v5.u32[3], v6.u32[3]);
  result = vaddq_f32(v15, vaddq_f32(v13, v14));
  *(float32x4_t *)(a1[8] + 16 * a2) = result;
  return result;
}

void sub_191834D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191834DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191834F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__int16 *Espresso::padding_params_t::simplify_legacy(__int16 *this, int a2, int a3)
{
  __int16 v3;

  if (!*this)
  {
    if (this[4] || this[6] || this[5] || this[7] || this[8] || this[9])
    {
      if (this[4] - a2 + 1 + this[5] || this[6] - a3 + 1 + this[7] || this[8] + this[9])
        return this;
      v3 = 4;
    }
    else
    {
      v3 = 3;
    }
    *this = v3;
  }
  return this;
}

void sub_1918350F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191835370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191835434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191835630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191835718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918359A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191835A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191835C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::lrn_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 216))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 216))(v23, __p, a2 + 4);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "local_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 8);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v23 + 96))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v23 + 96))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "local_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_191836068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191836170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191836390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191836454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191836650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191836738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191836A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191836C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191836D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191836FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191837088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191837284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19183736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[3];
  void **v10;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(v9, *a1, v4);
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100](a2);
    std::vector<Espresso::layer_shape>::resize(a2, (uint64_t)(v9[1] - v9[0]) >> 4);
    v5 = *a2;
    if (a2[1] != *a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::layer_shape>(*(_QWORD *)(v9[0] + v6), v5 + v7, 0);
        ++v8;
        v5 = *a2;
        v7 += 64;
        v6 += 16;
      }
      while (v8 < (a2[1] - *a2) >> 6);
    }
    v10 = (void **)v9;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v27, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v28 - v27) >> 4;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v6] >> 4);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v22 = v5;
      goto LABEL_30;
    }
    v22 = (char *)(v6 + 48 * v7);
    while (v5 != v22)
    {
      v5 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v5) >> 4) < v9)
    {
      if ((unint64_t)(v28 - v27) >= 0x5555555555555551)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 4);
      v12 = 0x5555555555555556 * ((v10 - v6) >> 4);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x2AAAAAAAAAAAAAALL)
        v13 = 0x555555555555555;
      else
        v13 = v7;
      if (v13 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(48 * v13);
      v15 = &v14[16 * ((uint64_t)&v5[-v6] >> 4)];
      v16 = &v14[48 * v13];
      v17 = 48 * ((48 * v9 - 48) / 0x30) + 48;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == (char *)v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v19 = *((_OWORD *)v5 - 3);
          *((_QWORD *)v15 - 4) = *((_QWORD *)v5 - 4);
          *((_OWORD *)v15 - 3) = v19;
          *((_QWORD *)v5 - 5) = 0;
          *((_QWORD *)v5 - 4) = 0;
          *((_QWORD *)v5 - 6) = 0;
          v20 = *(_OWORD *)(v5 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v5 - 1);
          *(_OWORD *)(v15 - 24) = v20;
          v15 -= 48;
          *((_QWORD *)v5 - 2) = 0;
          *((_QWORD *)v5 - 1) = 0;
          *((_QWORD *)v5 - 3) = 0;
          v5 -= 48;
        }
        while (v5 != (char *)v6);
        v21 = (char *)*a2;
        v5 = (char *)a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v21)
        {
          do
          {
            v5 -= 48;
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v5);
          }
          while (v5 != v21);
          v5 = v21;
        }
      }
      if (v5)
        operator delete(v5);
      v22 = (char *)a2[1];
      goto LABEL_30;
    }
    bzero(v5, 48 * ((48 * v9 - 48) / 0x30) + 48);
    v22 = &v5[48 * ((48 * v9 - 48) / 0x30) + 48];
  }
  a2[1] = (uint64_t)v22;
LABEL_30:
  v23 = *a2;
  if (v22 != (char *)*a2)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::lambda_params_t>(*(_QWORD *)(v27 + v24), v23 + v25, 0);
      ++v26;
      v23 = *a2;
      v25 += 48;
      v24 += 16;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v27, *a1, v4);
  v5 = (_OWORD *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 56;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v6);
    }
    while ((_OWORD *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v28 - v27) >> 4;
  v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - v6) >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v22 = v5;
      goto LABEL_33;
    }
    v22 = (_OWORD *)(v6 + 56 * v7);
    while (v5 != v22)
    {
      v5 = (_OWORD *)((char *)v5 - 56);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v28 - v27) >= 0x4924924924924921)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xDB6DB6DB6DB6DB6ELL * ((v10 - v6) >> 3);
      if (v11 <= v7)
        v11 = (v28 - v27) >> 4;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v10 - v6) >> 3)) >= 0x249249249249249)
        v12 = 0x492492492492492;
      else
        v12 = v11;
      if (v12 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(56 * v12);
      v14 = &v13[56 * v8];
      v15 = &v13[56 * v7];
      v16 = v14;
      do
      {
        *((_QWORD *)v16 + 6) = 0;
        *((_OWORD *)v16 + 1) = 0uLL;
        *((_OWORD *)v16 + 2) = 0uLL;
        *(_OWORD *)v16 = 0uLL;
        *((_DWORD *)v16 + 12) = -1;
        v16 += 56;
      }
      while (v16 != v15);
      v17 = &v13[56 * v12];
      v18 = (_OWORD *)*a2;
      if (v5 != (_OWORD *)*a2)
      {
        do
        {
          v19 = *(_OWORD *)((char *)v5 - 56);
          *((_QWORD *)v14 - 5) = *((_QWORD *)v5 - 5);
          *(_OWORD *)(v14 - 56) = v19;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          *((_QWORD *)v5 - 7) = 0;
          v20 = *(v5 - 2);
          *((_QWORD *)v14 - 2) = *((_QWORD *)v5 - 2);
          *((_OWORD *)v14 - 2) = v20;
          *((_QWORD *)v5 - 3) = 0;
          *((_QWORD *)v5 - 2) = 0;
          *((_QWORD *)v5 - 4) = 0;
          *((_DWORD *)v14 - 2) = *((_DWORD *)v5 - 2);
          v14 -= 56;
          v5 = (_OWORD *)((char *)v5 - 56);
        }
        while (v5 != v18);
        v5 = (_OWORD *)*a2;
      }
      v21 = a2[1];
      *a2 = (uint64_t)v14;
      a2[1] = (uint64_t)v15;
      a2[2] = (uint64_t)v17;
      while ((_OWORD *)v21 != v5)
      {
        v21 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
      if (v5)
        operator delete(v5);
      v22 = (_OWORD *)a2[1];
      goto LABEL_33;
    }
    v22 = (_OWORD *)((char *)v5 + 56 * v9);
    do
    {
      *((_QWORD *)v5 + 6) = 0;
      v5[1] = 0uLL;
      v5[2] = 0uLL;
      *v5 = 0uLL;
      *((_DWORD *)v5 + 12) = -1;
      v5 = (_OWORD *)((char *)v5 + 56);
    }
    while (v5 != v22);
  }
  a2[1] = (uint64_t)v22;
LABEL_33:
  v23 = *a2;
  if (v22 != (_OWORD *)*a2)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(*(_QWORD *)(v27 + v24), v23 + v25, 0);
      ++v26;
      v23 = *a2;
      v25 += 56;
      v24 += 16;
    }
    while (v26 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  }
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v31, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 152;
      std::allocator<Espresso::perf_benchmark_result::entry>::destroy[abi:ne180100](v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v32 - v31) >> 4;
  v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&v5[-v6] >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v26 = v5;
      goto LABEL_30;
    }
    v26 = (char *)(v6 + 152 * v7);
    while (v5 != v26)
    {
      v5 -= 152;
      std::allocator<Espresso::perf_benchmark_result::entry>::destroy[abi:ne180100]((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0x86BCA1AF286BCA1BLL * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v32 - v31) >= 0x1AF286BCA1AF2861)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0x86BCA1AF286BCA1BLL * ((v10 - v6) >> 3);
      v12 = 0xD79435E50D79436 * ((v10 - v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0xD79435E50D7943)
        v13 = 0x1AF286BCA1AF286;
      else
        v13 = v7;
      if (v13 > 0x1AF286BCA1AF286)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(152 * v13);
      v15 = &v14[8 * ((uint64_t)&v5[-v6] >> 3)];
      v16 = &v14[152 * v13];
      v17 = 152 * ((152 * v9 - 152) / 0x98) + 152;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == (char *)v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v19 = *(_OWORD *)(v5 - 152);
          *((_QWORD *)v15 - 17) = *((_QWORD *)v5 - 17);
          *(_OWORD *)(v15 - 152) = v19;
          *((_QWORD *)v5 - 18) = 0;
          *((_QWORD *)v5 - 17) = 0;
          *((_QWORD *)v5 - 19) = 0;
          v20 = *((_OWORD *)v5 - 8);
          *((_QWORD *)v15 - 14) = *((_QWORD *)v5 - 14);
          *((_OWORD *)v15 - 8) = v20;
          *((_QWORD *)v5 - 15) = 0;
          *((_QWORD *)v5 - 14) = 0;
          *((_QWORD *)v5 - 16) = 0;
          v21 = *(_OWORD *)(v5 - 104);
          *((_QWORD *)v15 - 11) = *((_QWORD *)v5 - 11);
          *(_OWORD *)(v15 - 104) = v21;
          *((_QWORD *)v5 - 12) = 0;
          *((_QWORD *)v5 - 11) = 0;
          *((_QWORD *)v5 - 13) = 0;
          v22 = *((_OWORD *)v5 - 5);
          *((_QWORD *)v15 - 8) = *((_QWORD *)v5 - 8);
          *((_OWORD *)v15 - 5) = v22;
          *((_QWORD *)v5 - 10) = 0;
          *((_QWORD *)v5 - 9) = 0;
          *((_QWORD *)v5 - 8) = 0;
          v23 = *(_OWORD *)(v5 - 56);
          *((_QWORD *)v15 - 5) = *((_QWORD *)v5 - 5);
          *(_OWORD *)(v15 - 56) = v23;
          *((_QWORD *)v5 - 7) = 0;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          v24 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v15 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v15 - 1) = v24;
          v15 -= 152;
          v5 -= 152;
        }
        while (v5 != (char *)v6);
        v25 = (char *)*a2;
        v5 = (char *)a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v25)
        {
          do
          {
            v5 -= 152;
            std::allocator<Espresso::perf_benchmark_result::entry>::destroy[abi:ne180100]((uint64_t)v5);
          }
          while (v5 != v25);
          v5 = v25;
        }
      }
      if (v5)
        operator delete(v5);
      v26 = (char *)a2[1];
      goto LABEL_30;
    }
    bzero(v5, 152 * ((152 * v9 - 152) / 0x98) + 152);
    v26 = &v5[152 * ((152 * v9 - 152) / 0x98) + 152];
  }
  a2[1] = (uint64_t)v26;
LABEL_30:
  v27 = *a2;
  if (v26 != (char *)*a2)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::builtin_params_t>(*(_QWORD *)(v31 + v28), v27 + v29, 0);
      ++v30;
      v27 = *a2;
      v29 += 152;
      v28 += 16;
    }
    while (v30 < 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3));
  }
  v33 = (void **)&v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v31, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 136;
      std::allocator<Espresso::dev_op_params_t>::destroy[abi:ne180100](v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v32 - v31) >> 4;
  v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v5[-v6] >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v26 = v5;
      goto LABEL_31;
    }
    v26 = (char *)(v6 + 136 * v7);
    while (v5 != v26)
    {
      v5 -= 136;
      std::allocator<Espresso::dev_op_params_t>::destroy[abi:ne180100]((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0xF0F0F0F0F0F0F0F1 * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v32 - v31) >= 0x1E1E1E1E1E1E1E11)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xF0F0F0F0F0F0F0F1 * ((v10 - v6) >> 3);
      v12 = 0xE1E1E1E1E1E1E1E2 * ((v10 - v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0xF0F0F0F0F0F0F0)
        v13 = 0x1E1E1E1E1E1E1E1;
      else
        v13 = v7;
      if (v13 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(136 * v13);
      v15 = &v14[8 * ((uint64_t)&v5[-v6] >> 3)];
      v16 = &v14[136 * v13];
      v17 = 136 * ((136 * v9 - 136) / 0x88) + 136;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == (char *)v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = &v15[v19];
          v21 = &v5[v19];
          v22 = *(_QWORD *)&v5[v19 - 136];
          *((_DWORD *)v20 - 32) = *(_DWORD *)&v5[v19 - 128];
          *((_QWORD *)v20 - 17) = v22;
          *((_QWORD *)v20 - 13) = 0;
          *(_OWORD *)(v20 - 120) = *(_OWORD *)&v5[v19 - 120];
          *((_QWORD *)v20 - 13) = *(_QWORD *)&v5[v19 - 104];
          *((_QWORD *)v21 - 15) = 0;
          *((_QWORD *)v21 - 14) = 0;
          *((_QWORD *)v21 - 13) = 0;
          *((_QWORD *)v20 - 10) = 0;
          *((_OWORD *)v20 - 6) = *(_OWORD *)&v5[v19 - 96];
          *((_QWORD *)v20 - 10) = *(_QWORD *)&v5[v19 - 80];
          *((_QWORD *)v21 - 12) = 0;
          *((_QWORD *)v21 - 11) = 0;
          v23 = *(_OWORD *)&v5[v19 - 72];
          v24 = *(_QWORD *)&v5[v19 - 56];
          *((_QWORD *)v21 - 10) = 0;
          *((_QWORD *)v20 - 7) = v24;
          *(_OWORD *)(v20 - 72) = v23;
          *((_QWORD *)v21 - 8) = 0;
          *((_QWORD *)v21 - 7) = 0;
          *((_QWORD *)v21 - 9) = 0;
          *((_QWORD *)v20 - 4) = 0;
          *((_OWORD *)v20 - 3) = *(_OWORD *)&v5[v19 - 48];
          *((_QWORD *)v20 - 4) = *(_QWORD *)&v5[v19 - 32];
          *((_QWORD *)v21 - 6) = 0;
          *((_QWORD *)v21 - 5) = 0;
          *((_QWORD *)v21 - 4) = 0;
          *((_QWORD *)v20 - 1) = 0;
          *(_OWORD *)(v20 - 24) = *(_OWORD *)&v5[v19 - 24];
          *((_QWORD *)v20 - 1) = *(_QWORD *)&v5[v19 - 8];
          *((_QWORD *)v21 - 3) = 0;
          *((_QWORD *)v21 - 2) = 0;
          *((_QWORD *)v21 - 1) = 0;
          v19 -= 136;
        }
        while (&v5[v19] != (char *)v6);
        v25 = (char *)*a2;
        v5 = (char *)a2[1];
        *a2 = (uint64_t)&v15[v19];
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v25)
        {
          do
          {
            v5 -= 136;
            std::allocator<Espresso::dev_op_params_t>::destroy[abi:ne180100]((uint64_t)v5);
          }
          while (v5 != v25);
          v5 = v25;
        }
      }
      if (v5)
        operator delete(v5);
      v26 = (char *)a2[1];
      goto LABEL_31;
    }
    bzero(v5, 136 * ((136 * v9 - 136) / 0x88) + 136);
    v26 = &v5[136 * ((136 * v9 - 136) / 0x88) + 136];
  }
  a2[1] = (uint64_t)v26;
LABEL_31:
  v27 = *a2;
  if (v26 != (char *)*a2)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::dev_op_params_t>(*(void **)(v31 + v28), v27 + v29, 0);
      ++v30;
      v27 = *a2;
      v29 += 136;
      v28 += 16;
    }
    while (v30 < 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
  }
  v33 = (void **)&v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v32, *a1, v4);
  v5 = (_OWORD *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 128;
      std::allocator<Espresso::loopkit_params_t>::destroy[abi:ne180100](v6);
    }
    while ((_OWORD *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v33 - v32) >> 4;
  v8 = ((uint64_t)v5 - v6) >> 7;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v27 = v5;
      goto LABEL_34;
    }
    v27 = (_OWORD *)(v6 + (v7 << 7));
    while (v5 != v27)
    {
      v5 -= 8;
      std::allocator<Espresso::loopkit_params_t>::destroy[abi:ne180100]((uint64_t)v5);
    }
  }
  else
  {
    v9 = a2[2];
    if (v7 - v8 > (v9 - (uint64_t)v5) >> 7)
    {
      if ((unint64_t)(v33 - v32) >= 0x1FFFFFFFFFFFFFF1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 6;
      if (v11 <= v7)
        v11 = (v33 - v32) >> 4;
      if (v10 >= 0x7FFFFFFFFFFFFF80)
        v12 = 0x1FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12 >> 57)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(v12 << 7);
      v14 = &v13[128 * v8];
      v15 = &v13[128 * v7];
      v16 = v14;
      do
      {
        *((_OWORD *)v16 + 6) = 0uLL;
        *((_OWORD *)v16 + 7) = 0uLL;
        *((_OWORD *)v16 + 4) = 0uLL;
        *((_OWORD *)v16 + 5) = 0uLL;
        *((_OWORD *)v16 + 2) = 0uLL;
        *((_OWORD *)v16 + 3) = 0uLL;
        *(_OWORD *)v16 = 0uLL;
        *((_OWORD *)v16 + 1) = 0uLL;
        *((_DWORD *)v16 + 30) = 1;
        v16 += 128;
      }
      while (v16 != v15);
      v17 = &v13[128 * v12];
      v18 = (_OWORD *)*a2;
      if (v5 != (_OWORD *)*a2)
      {
        v19 = 0;
        do
        {
          v20 = &v5[v19];
          v21 = &v14[v19 * 16];
          v22 = v5[v19 - 8];
          *((_QWORD *)v21 - 14) = *(_QWORD *)&v5[v19 - 7];
          *((_OWORD *)v21 - 8) = v22;
          *((_QWORD *)v20 - 15) = 0;
          *((_QWORD *)v20 - 14) = 0;
          *((_QWORD *)v20 - 16) = 0;
          *((_QWORD *)v21 - 11) = 0;
          *(_OWORD *)(v21 - 104) = *(_OWORD *)((char *)&v5[v19 - 6] - 8);
          *((_QWORD *)v21 - 11) = *((_QWORD *)&v5[v19 - 5] - 1);
          *((_QWORD *)v20 - 13) = 0;
          *((_QWORD *)v20 - 12) = 0;
          *((_QWORD *)v20 - 11) = 0;
          v23 = v5[v19 - 5];
          *((_QWORD *)v21 - 8) = *(_QWORD *)&v5[v19 - 4];
          *((_OWORD *)v21 - 5) = v23;
          *((_QWORD *)v20 - 9) = 0;
          *((_QWORD *)v20 - 8) = 0;
          v24 = *(_OWORD *)((char *)&v5[v19 - 3] - 8);
          v25 = *((_QWORD *)&v5[v19 - 2] - 1);
          *((_QWORD *)v20 - 10) = 0;
          *((_QWORD *)v21 - 5) = v25;
          *(_OWORD *)(v21 - 56) = v24;
          *((_QWORD *)v20 - 6) = 0;
          *((_QWORD *)v20 - 5) = 0;
          *((_QWORD *)v20 - 7) = 0;
          *((_QWORD *)v21 - 2) = 0;
          *((_OWORD *)v21 - 2) = v5[v19 - 2];
          *((_QWORD *)v21 - 2) = *(_QWORD *)&v5[v19 - 1];
          *((_QWORD *)v20 - 4) = 0;
          *((_QWORD *)v20 - 3) = 0;
          *((_QWORD *)v20 - 2) = 0;
          *((_DWORD *)v21 - 2) = DWORD2(v5[v19 - 1]);
          v19 -= 8;
        }
        while (&v5[v19] != v18);
        v14 += v19 * 16;
        v5 = (_OWORD *)*a2;
      }
      v26 = a2[1];
      *a2 = (uint64_t)v14;
      a2[1] = (uint64_t)v15;
      a2[2] = (uint64_t)v17;
      while ((_OWORD *)v26 != v5)
      {
        v26 -= 128;
        std::allocator<Espresso::loopkit_params_t>::destroy[abi:ne180100](v26);
      }
      if (v5)
        operator delete(v5);
      v27 = (_OWORD *)a2[1];
      goto LABEL_34;
    }
    v27 = &v5[8 * (v7 - v8)];
    do
    {
      v5[6] = 0uLL;
      v5[7] = 0uLL;
      v5[4] = 0uLL;
      v5[5] = 0uLL;
      v5[2] = 0uLL;
      v5[3] = 0uLL;
      *v5 = 0uLL;
      v5[1] = 0uLL;
      *((_DWORD *)v5 + 30) = 1;
      v5 += 8;
    }
    while (v5 != v27);
  }
  a2[1] = (uint64_t)v27;
LABEL_34:
  v28 = *a2;
  if (v27 != (_OWORD *)*a2)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::loopkit_params_t>(*(_QWORD *)(v32 + v29), v28 + v30, 0);
      ++v31;
      v28 = *a2;
      v30 += 128;
      v29 += 16;
    }
    while (v31 < (a2[1] - *a2) >> 7);
  }
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v29, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 96;
      std::allocator<Espresso::einsum_params_t>::destroy[abi:ne180100](v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v30 - v29) >> 4;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v6] >> 5);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v24 = v5;
      goto LABEL_31;
    }
    v24 = (char *)(v6 + 96 * v7);
    while (v5 != v24)
    {
      v5 -= 96;
      std::allocator<Espresso::einsum_params_t>::destroy[abi:ne180100]((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v5) >> 5) < v9)
    {
      if ((unint64_t)(v30 - v29) >= 0x2AAAAAAAAAAAAAA1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 5);
      v12 = 0x5555555555555556 * ((v10 - v6) >> 5);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x155555555555555)
        v13 = 0x2AAAAAAAAAAAAAALL;
      else
        v13 = v7;
      if (v13 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(96 * v13);
      v15 = &v14[32 * ((uint64_t)&v5[-v6] >> 5)];
      v16 = &v14[96 * v13];
      v17 = 96 * ((96 * v9 - 96) / 0x60) + 96;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == (char *)v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = &v15[v19];
          v21 = &v5[v19];
          v22 = *(_OWORD *)&v5[v19 - 96];
          *((_QWORD *)v20 - 10) = *(_QWORD *)&v5[v19 - 80];
          *((_OWORD *)v20 - 6) = v22;
          *((_QWORD *)v21 - 11) = 0;
          *((_QWORD *)v21 - 10) = 0;
          *((_QWORD *)v21 - 12) = 0;
          *((_QWORD *)v20 - 7) = 0;
          *(_OWORD *)(v20 - 72) = *(_OWORD *)&v5[v19 - 72];
          *((_QWORD *)v20 - 7) = *(_QWORD *)&v5[v19 - 56];
          *((_QWORD *)v21 - 9) = 0;
          *((_QWORD *)v21 - 8) = 0;
          *((_QWORD *)v21 - 7) = 0;
          *((_QWORD *)v20 - 4) = 0;
          *((_OWORD *)v20 - 3) = *(_OWORD *)&v5[v19 - 48];
          *((_QWORD *)v20 - 4) = *(_QWORD *)&v5[v19 - 32];
          *((_QWORD *)v21 - 6) = 0;
          *((_QWORD *)v21 - 5) = 0;
          *((_QWORD *)v21 - 4) = 0;
          *((_QWORD *)v20 - 1) = 0;
          *(_OWORD *)(v20 - 24) = *(_OWORD *)&v5[v19 - 24];
          *((_QWORD *)v20 - 1) = *(_QWORD *)&v5[v19 - 8];
          *((_QWORD *)v21 - 3) = 0;
          *((_QWORD *)v21 - 2) = 0;
          *((_QWORD *)v21 - 1) = 0;
          v19 -= 96;
        }
        while (&v5[v19] != (char *)v6);
        v23 = (char *)*a2;
        v5 = (char *)a2[1];
        *a2 = (uint64_t)&v15[v19];
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v23)
        {
          do
          {
            v5 -= 96;
            std::allocator<Espresso::einsum_params_t>::destroy[abi:ne180100]((uint64_t)v5);
          }
          while (v5 != v23);
          v5 = v23;
        }
      }
      if (v5)
        operator delete(v5);
      v24 = (char *)a2[1];
      goto LABEL_31;
    }
    bzero(v5, 96 * ((96 * v9 - 96) / 0x60) + 96);
    v24 = &v5[96 * ((96 * v9 - 96) / 0x60) + 96];
  }
  a2[1] = (uint64_t)v24;
LABEL_31:
  v25 = *a2;
  if (v24 != (char *)*a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::einsum_params_t>(*(_QWORD *)(v29 + v26), v25 + v27, 0);
      ++v28;
      v25 = *a2;
      v27 += 96;
      v26 += 16;
    }
    while (v28 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  }
  v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v29, *a1, v4);
  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 80;
      std::allocator<Espresso::foreign_network_storage_blob_t>::destroy[abi:ne180100](v6);
    }
    while (v6 != v5);
    v6 = *a2;
  }
  a2[1] = v5;
  v7 = (v30 - v29) >> 4;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v24 = v5;
      goto LABEL_30;
    }
    v24 = v6 + 80 * v7;
    while (v5 != v24)
    {
      v5 -= 80;
      std::allocator<Espresso::foreign_network_storage_blob_t>::destroy[abi:ne180100](v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v10 - v5) >> 4) < v9)
    {
      if ((unint64_t)(v30 - v29) >= 0x3333333333333331)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v6) >> 4);
      v12 = 0x999999999999999ALL * ((v10 - v6) >> 4);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x199999999999999)
        v13 = 0x333333333333333;
      else
        v13 = v7;
      if (v13 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(80 * v13);
      v15 = &v14[16 * ((v5 - v6) >> 4)];
      v16 = &v14[80 * v13];
      v17 = 80 * ((80 * v9 - 80) / 0x50) + 80;
      bzero(v15, v17);
      v18 = (uint64_t)&v15[v17];
      if (v5 == v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v19 = *(_DWORD *)(v5 - 80);
          v5 -= 80;
          *((_DWORD *)v15 - 20) = v19;
          v15 -= 80;
          v20 = *(_OWORD *)(v5 + 8);
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v5 + 24);
          *(_OWORD *)(v15 + 8) = v20;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
          *(_QWORD *)(v5 + 8) = 0;
          v21 = *(_OWORD *)(v5 + 32);
          *((_QWORD *)v15 + 6) = *(_QWORD *)(v5 + 48);
          *((_OWORD *)v15 + 2) = v21;
          *(_QWORD *)(v5 + 40) = 0;
          *(_QWORD *)(v5 + 48) = 0;
          *(_QWORD *)(v5 + 32) = 0;
          v22 = *(_OWORD *)(v5 + 56);
          *((_QWORD *)v15 + 9) = *(_QWORD *)(v5 + 72);
          *(_OWORD *)(v15 + 56) = v22;
          *(_QWORD *)(v5 + 64) = 0;
          *(_QWORD *)(v5 + 72) = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        while (v5 != v6);
        v23 = *a2;
        v5 = a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v23)
        {
          do
          {
            v5 -= 80;
            std::allocator<Espresso::foreign_network_storage_blob_t>::destroy[abi:ne180100](v5);
          }
          while (v5 != v23);
          v5 = v23;
        }
      }
      if (v5)
        operator delete((void *)v5);
      v24 = a2[1];
      goto LABEL_30;
    }
    bzero((void *)v5, 80 * ((80 * v9 - 80) / 0x50) + 80);
    v24 = v5 + 80 * ((80 * v9 - 80) / 0x50) + 80;
  }
  a2[1] = v24;
LABEL_30:
  v25 = *a2;
  if (v24 != *a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(*(_QWORD *)(v29 + v26), v25 + v27, 0);
      ++v28;
      v25 = *a2;
      v27 += 80;
      v26 += 16;
    }
    while (v28 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  }
  v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v29, *a1, v4);
  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 88;
      std::allocator<Espresso::foreign_network_rep_blob_t>::destroy[abi:ne180100](v6);
    }
    while (v6 != v5);
    v6 = *a2;
  }
  a2[1] = v5;
  v7 = (v30 - v29) >> 4;
  v8 = 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v24 = v5;
      goto LABEL_30;
    }
    v24 = v6 + 88 * v7;
    while (v5 != v24)
    {
      v5 -= 88;
      std::allocator<Espresso::foreign_network_rep_blob_t>::destroy[abi:ne180100](v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((v10 - v5) >> 3) < v9)
    {
      if ((unint64_t)(v30 - v29) >= 0x2E8BA2E8BA2E8BA1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v6) >> 3);
      v12 = 0x5D1745D1745D1746 * ((v10 - v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x1745D1745D1745DLL)
        v13 = 0x2E8BA2E8BA2E8BALL;
      else
        v13 = v7;
      if (v13 > 0x2E8BA2E8BA2E8BALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(88 * v13);
      v15 = &v14[8 * ((v5 - v6) >> 3)];
      v16 = &v14[88 * v13];
      v17 = 88 * ((88 * v9 - 88) / 0x58) + 88;
      bzero(v15, v17);
      v18 = (uint64_t)&v15[v17];
      if (v5 == v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v19 = *(_DWORD *)(v5 - 88);
          v5 -= 88;
          *((_DWORD *)v15 - 22) = v19;
          v15 -= 88;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v5 + 8);
          v20 = *(_OWORD *)(v5 + 16);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v5 + 32);
          *((_OWORD *)v15 + 1) = v20;
          *(_QWORD *)(v5 + 24) = 0;
          *(_QWORD *)(v5 + 32) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          v21 = *(_OWORD *)(v5 + 40);
          *((_QWORD *)v15 + 7) = *(_QWORD *)(v5 + 56);
          *(_OWORD *)(v15 + 40) = v21;
          *(_QWORD *)(v5 + 48) = 0;
          *(_QWORD *)(v5 + 56) = 0;
          *(_QWORD *)(v5 + 40) = 0;
          v22 = *(_OWORD *)(v5 + 64);
          *((_QWORD *)v15 + 10) = *(_QWORD *)(v5 + 80);
          *((_OWORD *)v15 + 4) = v22;
          *(_QWORD *)(v5 + 72) = 0;
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 64) = 0;
        }
        while (v5 != v6);
        v23 = *a2;
        v5 = a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v23)
        {
          do
          {
            v5 -= 88;
            std::allocator<Espresso::foreign_network_rep_blob_t>::destroy[abi:ne180100](v5);
          }
          while (v5 != v23);
          v5 = v23;
        }
      }
      if (v5)
        operator delete((void *)v5);
      v24 = a2[1];
      goto LABEL_30;
    }
    bzero((void *)v5, 88 * ((88 * v9 - 88) / 0x58) + 88);
    v24 = v5 + 88 * ((88 * v9 - 88) / 0x58) + 88;
  }
  a2[1] = v24;
LABEL_30:
  v25 = *a2;
  if (v24 != *a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(*(_QWORD *)(v29 + v26), (_DWORD *)(v25 + v27), 0);
      ++v28;
      v25 = *a2;
      v27 += 88;
      v26 += 16;
    }
    while (v28 < 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
  v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v31, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 104;
      std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v32 - v31) >> 4;
  v8 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v5[-v6] >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v26 = v5;
      goto LABEL_29;
    }
    v26 = (char *)(v6 + 104 * v7);
    while (v5 != v26)
    {
      v5 -= 104;
      std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100]((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0x4EC4EC4EC4EC4EC5 * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v32 - v31) >= 0x2762762762762761)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v6) >> 3);
      v12 = 0x9D89D89D89D89D8ALL * ((v10 - v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x13B13B13B13B13BLL)
        v13 = 0x276276276276276;
      else
        v13 = v7;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v13);
      v15 = &v14[8 * ((uint64_t)&v5[-v6] >> 3)];
      v17 = &v14[104 * v16];
      bzero(v15, 104 * ((104 * v9 - 104) / 0x68) + 104);
      v18 = &v15[104 * ((104 * v9 - 104) / 0x68) + 104];
      v19 = (char *)*a2;
      v20 = (char *)a2[1];
      if (v20 == (char *)*a2)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v17;
      }
      else
      {
        do
        {
          v21 = *(_OWORD *)(v20 - 104);
          *((_QWORD *)v15 - 11) = *((_QWORD *)v20 - 11);
          *(_OWORD *)(v15 - 104) = v21;
          *((_QWORD *)v20 - 12) = 0;
          *((_QWORD *)v20 - 11) = 0;
          *((_QWORD *)v20 - 13) = 0;
          *((_DWORD *)v15 - 20) = *((_DWORD *)v20 - 20);
          v22 = *(_OWORD *)(v20 - 72);
          *((_QWORD *)v15 - 7) = *((_QWORD *)v20 - 7);
          *(_OWORD *)(v15 - 72) = v22;
          *((_QWORD *)v20 - 8) = 0;
          *((_QWORD *)v20 - 7) = 0;
          *((_QWORD *)v20 - 9) = 0;
          v23 = *((_OWORD *)v20 - 3);
          *((_QWORD *)v15 - 4) = *((_QWORD *)v20 - 4);
          *((_OWORD *)v15 - 3) = v23;
          *((_QWORD *)v20 - 5) = 0;
          *((_QWORD *)v20 - 4) = 0;
          *((_QWORD *)v20 - 6) = 0;
          v24 = *(_OWORD *)(v20 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
          *(_OWORD *)(v15 - 24) = v24;
          v15 -= 104;
          *((_QWORD *)v20 - 2) = 0;
          *((_QWORD *)v20 - 1) = 0;
          *((_QWORD *)v20 - 3) = 0;
          v20 -= 104;
        }
        while (v20 != v19);
        v25 = (char *)*a2;
        v20 = (char *)a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v17;
        if (v20 != v25)
        {
          do
          {
            v20 -= 104;
            std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100]((uint64_t)v20);
          }
          while (v20 != v25);
          v20 = v25;
        }
      }
      if (v20)
        operator delete(v20);
      v26 = (char *)a2[1];
      goto LABEL_29;
    }
    bzero(v5, 104 * ((104 * v9 - 104) / 0x68) + 104);
    v26 = &v5[104 * ((104 * v9 - 104) / 0x68) + 104];
  }
  a2[1] = (uint64_t)v26;
LABEL_29:
  v27 = *a2;
  if (v26 != (char *)*a2)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(*(_QWORD *)(v31 + v28), v27 + v29, 0);
      ++v30;
      v27 = *a2;
      v29 += 104;
      v28 += 16;
    }
    while (v30 < 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  }
  v33 = (void **)&v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v28, *a1, v4);
  std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100](a2);
  v5 = (v29 - v28) >> 4;
  v6 = *a2;
  v7 = a2[1];
  v8 = (v7 - *a2) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8)
    {
      v23 = a2[1];
      goto LABEL_30;
    }
    v23 = v6 + 32 * v5;
    while (v7 != v23)
    {
      if (*(char *)(v7 - 1) < 0)
        operator delete(*(void **)(v7 - 24));
      v7 -= 32;
    }
  }
  else
  {
    v9 = v5 - v8;
    v10 = a2[2];
    if (v5 - v8 > (v10 - v7) >> 5)
    {
      if ((unint64_t)(v29 - v28) >= 0x7FFFFFFFFFFFFFF1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = v10 - v6;
      if (v11 >> 4 > v5)
        v5 = v11 >> 4;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v5;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
      v14 = &v13[32 * v8];
      v16 = &v13[32 * v15];
      bzero(v14, 32 * v9);
      v17 = &v14[32 * v9];
      v18 = *a2;
      v19 = a2[1];
      if (v19 == *a2)
      {
        *a2 = (uint64_t)v14;
        a2[1] = (uint64_t)v17;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v20 = *(_BYTE *)(v19 - 32);
          v19 -= 32;
          *(v14 - 32) = v20;
          v14 -= 32;
          v21 = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v14 + 3) = *(_QWORD *)(v19 + 24);
          *(_OWORD *)(v14 + 8) = v21;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 8) = 0;
        }
        while (v19 != v18);
        v22 = *a2;
        v19 = a2[1];
        *a2 = (uint64_t)v14;
        a2[1] = (uint64_t)v17;
        a2[2] = (uint64_t)v16;
        if (v19 != v22)
        {
          do
          {
            if (*(char *)(v19 - 1) < 0)
              operator delete(*(void **)(v19 - 24));
            v19 -= 32;
          }
          while (v19 != v22);
          v19 = v22;
        }
      }
      if (v19)
        operator delete((void *)v19);
      v23 = a2[1];
      goto LABEL_30;
    }
    bzero((void *)a2[1], 32 * v9);
    v23 = v7 + 32 * v9;
  }
  a2[1] = v23;
LABEL_30:
  v24 = *a2;
  if (v23 != *a2)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(*(_QWORD *)(v28 + v25), v24 + v26, 0);
      ++v27;
      v24 = *a2;
      v26 += 32;
      v25 += 16;
    }
    while (v27 < (a2[1] - *a2) >> 5);
  }
  v30 = (void **)&v28;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v30);
}

{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v29, *a1, v4);
  std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100](a2);
  v5 = (v30 - v29) >> 4;
  v6 = *a2;
  v7 = (_QWORD *)a2[1];
  v8 = ((uint64_t)v7 - *a2) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8)
    {
      v24 = (_QWORD *)a2[1];
      goto LABEL_33;
    }
    v24 = (_QWORD *)(v6 + 32 * v5);
    while (v7 != v24)
    {
      if (*((char *)v7 - 1) < 0)
        operator delete((void *)*(v7 - 3));
      v7 -= 4;
    }
  }
  else
  {
    v9 = a2[2];
    if (v5 - v8 > (v9 - (uint64_t)v7) >> 5)
    {
      if ((unint64_t)(v30 - v29) >= 0x7FFFFFFFFFFFFFF1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = v10 >> 4;
      if (v10 >> 4 <= v5)
        v11 = (v30 - v29) >> 4;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
      v15 = &v13[32 * v8];
      v16 = &v13[32 * v5];
      v17 = v15;
      do
      {
        *(_QWORD *)v17 = 0xFFFFFFFFLL;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        v17 += 32;
      }
      while (v17 != v16);
      v18 = &v13[32 * v14];
      v19 = *a2;
      v20 = a2[1];
      if (v20 == *a2)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v16;
        a2[2] = (uint64_t)v18;
      }
      else
      {
        do
        {
          v21 = *(_DWORD *)(v20 - 32);
          v20 -= 32;
          *((_DWORD *)v15 - 8) = v21;
          v15 -= 32;
          v22 = *(_OWORD *)(v20 + 8);
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v20 + 24);
          *(_OWORD *)(v15 + 8) = v22;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 8) = 0;
        }
        while (v20 != v19);
        v23 = *a2;
        v20 = a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v16;
        a2[2] = (uint64_t)v18;
        if (v20 != v23)
        {
          do
          {
            if (*(char *)(v20 - 1) < 0)
              operator delete(*(void **)(v20 - 24));
            v20 -= 32;
          }
          while (v20 != v23);
          v20 = v23;
        }
      }
      if (v20)
        operator delete((void *)v20);
      v24 = (_QWORD *)a2[1];
      goto LABEL_33;
    }
    v24 = &v7[4 * (v5 - v8)];
    do
    {
      *v7 = 0xFFFFFFFFLL;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = 0;
      v7 += 4;
    }
    while (v7 != v24);
  }
  a2[1] = (uint64_t)v24;
LABEL_33:
  v25 = *a2;
  if (v24 != (_QWORD *)*a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(*(_QWORD *)(v29 + v26), v25 + v27, 0);
      ++v28;
      v25 = *a2;
      v27 += 32;
      v26 += 16;
    }
    while (v28 < (a2[1] - *a2) >> 5);
  }
  v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v27, *a1, v4);
  v5 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 56;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v6);
    }
    while ((char *)v6 != v5);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v5;
  v7 = (v28 - v27) >> 4;
  v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v5[-v6] >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v22 = v5;
      goto LABEL_30;
    }
    v22 = (char *)(v6 + 56 * v7);
    while (v5 != v22)
    {
      v5 -= 56;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v5);
    }
  }
  else
  {
    v10 = a2[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v28 - v27) >= 0x4924924924924921)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v6) >> 3);
      v12 = 0xDB6DB6DB6DB6DB6ELL * ((v10 - v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x249249249249249)
        v13 = 0x492492492492492;
      else
        v13 = v7;
      if (v13 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(56 * v13);
      v15 = &v14[8 * ((uint64_t)&v5[-v6] >> 3)];
      v16 = &v14[56 * v13];
      v17 = 56 * ((56 * v9 - 56) / 0x38) + 56;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == (char *)v6)
      {
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
      }
      else
      {
        do
        {
          v19 = *(_OWORD *)(v5 - 56);
          *((_QWORD *)v15 - 5) = *((_QWORD *)v5 - 5);
          *(_OWORD *)(v15 - 56) = v19;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          *((_QWORD *)v5 - 7) = 0;
          v20 = *((_OWORD *)v5 - 2);
          *((_QWORD *)v15 - 2) = *((_QWORD *)v5 - 2);
          *((_OWORD *)v15 - 2) = v20;
          *((_QWORD *)v5 - 3) = 0;
          *((_QWORD *)v5 - 2) = 0;
          *((_QWORD *)v5 - 4) = 0;
          *((_DWORD *)v15 - 2) = *((_DWORD *)v5 - 2);
          v15 -= 56;
          v5 -= 56;
        }
        while (v5 != (char *)v6);
        v21 = (char *)*a2;
        v5 = (char *)a2[1];
        *a2 = (uint64_t)v15;
        a2[1] = (uint64_t)v18;
        a2[2] = (uint64_t)v16;
        if (v5 != v21)
        {
          do
          {
            v5 -= 56;
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v5);
          }
          while (v5 != v21);
          v5 = v21;
        }
      }
      if (v5)
        operator delete(v5);
      v22 = (char *)a2[1];
      goto LABEL_30;
    }
    bzero(v5, 56 * ((56 * v9 - 56) / 0x38) + 56);
    v22 = &v5[56 * ((56 * v9 - 56) / 0x38) + 56];
  }
  a2[1] = (uint64_t)v22;
LABEL_30:
  v23 = *a2;
  if (v22 != (char *)*a2)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::brick_params>(*(_QWORD *)(v27 + v24), v23 + v25, 0);
      ++v26;
      v23 = *a2;
      v25 += 56;
      v24 += 16;
    }
    while (v26 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  }
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

void sub_191837458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191837704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1918377EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918379AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191837A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191837C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191837D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191837F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183803C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191838238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191838320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918385A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191838868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191838950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191838B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191838C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191838E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191838F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191839168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191839428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::axpby_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "ignore_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_58;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_56;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 216))(v25, __p, a2);
  if (v28 < 0)
    operator delete(__p[0]);
  v5 = v26;
  if (v26)
  {
    v6 = (unint64_t *)&v26->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  std::string::basic_string[abi:ne180100]<0>(v23, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 216))(v25, __p, a2 + 4);
  if (v28 < 0)
    operator delete(__p[0]);
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  v12 = *(_DWORD *)(a2 + 8);
  v11 = a2 + 8;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "ignore_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_58;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_56:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_58:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_191839830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191839938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191839BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191839C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191839E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2 + 1);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2 + 2);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2 + 3);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "start_fuse_z_3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_19183A3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19183A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183A708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::l2_norm_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 216))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "normalization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 4);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 8);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v23 + 96))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "normalization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_19183ACF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19183ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183AFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::bias_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 160))(v19, __p, a2);
  if (v22 < 0)
    operator delete(__p[0]);
  v5 = v20;
  if (v20)
  {
    v6 = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
  v9 = *(unsigned __int8 *)(a2 + 4);
  v8 = a2 + 4;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 208))(v19, __p, v8);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_38:
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_19183B56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19183B664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183B8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183BA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19183BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183BE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183C034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19183C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183C380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dropout_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "p_reject");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v29 + 216))(v29, __p, a2);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 4);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "reseed_each_launch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 8);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "do_scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 12);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "p_reject");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v29 + 96))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "reseed_each_launch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "do_scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_19183CB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19183CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183CE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183CF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::context_transfer_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "dst_platform_id");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 5);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "src_platform_id");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 4);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "src_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 6);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "dst_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 7);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "dst_platform_id");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[5] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "src_platform_id");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "src_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[6] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "dst_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[7] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_19183D63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19183D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19183DC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183E154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::reshape_like_params>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  std::string v29;

  for (i = 0; i != 5; ++i)
  {
    std::to_string(&v29, i);
    if (a3)
    {
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 4 * i);
      if (v28 < 0)
        operator delete(__p[0]);
      v7 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 4 * i + 20);
      if (v28 < 0)
        operator delete(__p[0]);
      v10 = v26;
      if (v26)
      {
        v11 = (unint64_t *)&v26->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, a2 + i + 40);
      if (v28 < 0)
        operator delete(__p[0]);
      v13 = v26;
      if (v26)
      {
        v14 = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        goto LABEL_56;
      }
    }
    else
    {
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(_DWORD *)(a2 + 4 * i) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v16 = v26;
      if (v26)
      {
        v17 = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(_DWORD *)(a2 + 4 * i + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v19 = v26;
      if (v26)
      {
        v20 = (unint64_t *)&v26->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::operator+<char>();
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(_BYTE *)(a2 + i + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v13 = v26;
      if (v26)
      {
        v22 = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldaxr(v22);
        while (__stlxr(v15 - 1, v22));
LABEL_56:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_19183E5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_19183E6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183E8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183EBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tile_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2);
    if (v38 < 0)
      operator delete(__p[0]);
    v5 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 1);
    if (v38 < 0)
      operator delete(__p[0]);
    v8 = v36;
    if (v36)
    {
      v9 = (unint64_t *)&v36->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 2);
    if (v38 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 3);
    if (v38 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_95;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
LABEL_95:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
}

void sub_19183F22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19183F354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19183F8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19183FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19183FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convert_supported_4cc_uint_to_string(Espresso *this, int a2)
{
  char *v2;

  if (a2 <= 875704421)
  {
    if (a2 <= 759318336)
    {
      if (a2 > 642527335)
      {
        if (a2 > 706956391)
        {
          if (a2 == 706956392)
          {
            v2 = "MultiSlice_UncompressedTiled_OneComponent16Half";
            return std::string::basic_string[abi:ne180100]<0>(this, v2);
          }
          if (a2 == 707153000)
          {
            v2 = "MultiSlice_Lossless_OneComponent16Half";
            return std::string::basic_string[abi:ne180100]<0>(this, v2);
          }
        }
        else
        {
          if (a2 == 642527336)
          {
            v2 = "AGX_OneComponent16Half";
            return std::string::basic_string[abi:ne180100]<0>(this, v2);
          }
          if (a2 == 642934849)
          {
            v2 = "AGX_64RGBAHalf";
            return std::string::basic_string[abi:ne180100]<0>(this, v2);
          }
        }
      }
      else if (a2 > 641877824)
      {
        if (a2 == 641877825)
        {
          v2 = "AGX_32BGRA";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 642527288)
        {
          v2 = "AGX_OneComponent8";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
      else
      {
        if (a2 == 641230384)
        {
          v2 = "Lossless_420YpCbCr8BiPlanarFullRange";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 641234480)
        {
          v2 = "Lossless_420YpCbCr8BiPlanarVideoRange";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
    }
    else if (a2 <= 793522279)
    {
      if (a2 > 760375360)
      {
        if (a2 == 760375361)
        {
          v2 = "Lossy75_64RGBAHalf";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 792872769)
        {
          v2 = "Lossy62_32BGRA";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
      else
      {
        if (a2 == 759318337)
        {
          v2 = "Lossy75_32BGRA";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 759967848)
        {
          v2 = "Lossy75_OneComponent16Half";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
    }
    else if (a2 <= 843264055)
    {
      if (a2 == 793522280)
      {
        v2 = "Lossy62_OneComponent16Half";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
      if (a2 == 793929793)
      {
        v2 = "Lossy62_64RGBAHalf";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
    else
    {
      switch(a2)
      {
        case 843264056:
          v2 = "TwoComponent8";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        case 843264102:
          v2 = "TwoComponent32Float";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        case 843264104:
          v2 = "TwoComponent16Half";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
LABEL_87:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned int &>(a2);
  }
  if (a2 > 1751411058)
  {
    if (a2 <= 2016686639)
    {
      if (a2 > 1885745711)
      {
        if (a2 == 1885745712)
        {
          v2 = "420YpCbCr10PackedBiPlanarFullRange";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 1886859824)
        {
          v2 = "420YpCbCr10PackedBiPlanarWideRange";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
      else
      {
        if (a2 == 1751411059)
        {
          v2 = "DisparityFloat16";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
        if (a2 == 1882468912)
        {
          v2 = "420YpCbCr10PackedBiPlanarVideoRange";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        }
      }
    }
    else if (a2 <= 2084718400)
    {
      if (a2 == 2016686640)
      {
        v2 = "420YpCbCr10BiPlanarVideoRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
      if (a2 == 2019963440)
      {
        v2 = "420YpCbCr10BiPlanarFullRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
    else
    {
      switch(a2)
      {
        case 2084718401:
          v2 = "Lossy50_32BGRA";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        case 2085367912:
          v2 = "Lossy50_OneComponent16Half";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
        case 2085775425:
          v2 = "Lossy50_64RGBAHalf";
          return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
    goto LABEL_87;
  }
  if (a2 <= 1111970368)
  {
    if (a2 > 875836517)
    {
      if (a2 == 875836518)
      {
        v2 = "444YpCbCr8BiPlanarFullRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
      if (a2 == 875836534)
      {
        v2 = "444YpCbCr8BiPlanarVideoRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
    else
    {
      if (a2 == 875704422)
      {
        v2 = "420YpCbCr8BiPlanarFullRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
      if (a2 == 875704438)
      {
        v2 = "420YpCbCr8BiPlanarVideoRange";
        return std::string::basic_string[abi:ne180100]<0>(this, v2);
      }
    }
    goto LABEL_87;
  }
  if (a2 <= 1278226533)
  {
    if (a2 == 1111970369)
    {
      v2 = "32BGRA";
      return std::string::basic_string[abi:ne180100]<0>(this, v2);
    }
    if (a2 == 1278226488)
    {
      v2 = "OneComponent8";
      return std::string::basic_string[abi:ne180100]<0>(this, v2);
    }
    goto LABEL_87;
  }
  if (a2 == 1278226534)
  {
    v2 = "OneComponent32Float";
    return std::string::basic_string[abi:ne180100]<0>(this, v2);
  }
  if (a2 == 1278226536)
  {
    v2 = "OneComponent16Half";
    return std::string::basic_string[abi:ne180100]<0>(this, v2);
  }
  if (a2 != 1380411457)
    goto LABEL_87;
  v2 = "64RGBAHalf";
  return std::string::basic_string[abi:ne180100]<0>(this, v2);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned int &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("Unsupported pixel format %d", a1);
}

void sub_1918403C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191840628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_1918406EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918408E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::rnn_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  void *v101[2];
  char v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *__p[2];
  char v106;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v101, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v55 = v104;
    if (v104)
    {
      p_shared_owners = (unint64_t *)&v104->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "rnn_nonlinearity");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v58 = v104;
    if (v104)
    {
      v59 = (unint64_t *)&v104->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v61 = v104;
    if (v104)
    {
      v62 = (unint64_t *)&v104->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "seq2seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v64 = v104;
    if (v104)
    {
      v65 = (unint64_t *)&v104->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_embedding_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[5] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v67 = v104;
    if (v104)
    {
      v68 = (unint64_t *)&v104->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_embedding_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[6] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v70 = v104;
    if (v104)
    {
      v71 = (unint64_t *)&v104->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_onehot");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[8] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v73 = v104;
    if (v104)
    {
      v74 = (unint64_t *)&v104->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[8] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v76 = v104;
    if (v104)
    {
      v77 = (unint64_t *)&v104->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_symbol_onehot");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[8] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v79 = v104;
    if (v104)
    {
      v80 = (unint64_t *)&v104->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_max_len");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[9] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v82 = v104;
    if (v104)
    {
      v83 = (unint64_t *)&v104->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_max_len");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[10] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v85 = v104;
    if (v104)
    {
      v86 = (unint64_t *)&v104->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_stop_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[11] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v88 = v104;
    if (v104)
    {
      v89 = (unint64_t *)&v104->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_start_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[13] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v91 = v104;
    if (v104)
    {
      v92 = (unint64_t *)&v104->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_stop_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[12] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v94 = v104;
    if (v104)
    {
      v95 = (unint64_t *)&v104->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "beamsearch_width");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[14] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v97 = v104;
    if (v104)
    {
      v98 = (unint64_t *)&v104->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_embedding_tree");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v103 + 24))(v103, __p))
      a2[7] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v103 + 40))(v103, __p);
    if (v106 < 0)
      operator delete(__p[0]);
    v52 = v104;
    if (!v104)
      goto LABEL_319;
    v100 = (unint64_t *)&v104->__shared_owners_;
    do
      v54 = __ldaxr(v100);
    while (__stlxr(v54 - 1, v100));
    goto LABEL_317;
  }
  std::string::basic_string[abi:ne180100]<0>(v101, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2);
  if (v106 < 0)
    operator delete(__p[0]);
  v5 = v104;
  if (v104)
  {
    v6 = (unint64_t *)&v104->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v102 < 0)
    operator delete(v101[0]);
  std::string::basic_string[abi:ne180100]<0>(v101, "rnn_nonlinearity");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 1);
  if (v106 < 0)
    operator delete(__p[0]);
  v8 = v104;
  if (v104)
  {
    v9 = (unint64_t *)&v104->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v102 < 0)
    operator delete(v101[0]);
  std::string::basic_string[abi:ne180100]<0>(v101, "hidden_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 2);
  if (v106 < 0)
    operator delete(__p[0]);
  v11 = v104;
  if (v104)
  {
    v12 = (unint64_t *)&v104->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v102 < 0)
    operator delete(v101[0]);
  std::string::basic_string[abi:ne180100]<0>(v101, "seq2seq");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 4);
  if (v106 < 0)
    operator delete(__p[0]);
  v14 = v104;
  if (v104)
  {
    v15 = (unint64_t *)&v104->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v102 < 0)
    operator delete(v101[0]);
  if (a2[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v101, "input_embedding_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 5);
    if (v106 < 0)
      operator delete(__p[0]);
    v17 = v104;
    if (v104)
    {
      v18 = (unint64_t *)&v104->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_embedding_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 6);
    if (v106 < 0)
      operator delete(__p[0]);
    v20 = v104;
    if (v104)
    {
      v21 = (unint64_t *)&v104->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_onehot");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 8);
    if (v106 < 0)
      operator delete(__p[0]);
    v23 = v104;
    if (v104)
    {
      v24 = (unint64_t *)&v104->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 8);
    if (v106 < 0)
      operator delete(__p[0]);
    v26 = v104;
    if (v104)
    {
      v27 = (unint64_t *)&v104->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_read_symbol_onehot");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 8);
    if (v106 < 0)
      operator delete(__p[0]);
    v29 = v104;
    if (v104)
    {
      v30 = (unint64_t *)&v104->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_max_len");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 9);
    if (v106 < 0)
      operator delete(__p[0]);
    v32 = v104;
    if (v104)
    {
      v33 = (unint64_t *)&v104->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_max_len");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 10);
    if (v106 < 0)
      operator delete(__p[0]);
    v35 = v104;
    if (v104)
    {
      v36 = (unint64_t *)&v104->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "input_stop_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 11);
    if (v106 < 0)
      operator delete(__p[0]);
    v38 = v104;
    if (v104)
    {
      v39 = (unint64_t *)&v104->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_start_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 13);
    if (v106 < 0)
      operator delete(__p[0]);
    v41 = v104;
    if (v104)
    {
      v42 = (unint64_t *)&v104->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "output_stop_symbol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 12);
    if (v106 < 0)
      operator delete(__p[0]);
    v44 = v104;
    if (v104)
    {
      v45 = (unint64_t *)&v104->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "beamsearch_width");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, a2 + 14);
    if (v106 < 0)
      operator delete(__p[0]);
    v47 = v104;
    if (v104)
    {
      v48 = (unint64_t *)&v104->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v102 < 0)
      operator delete(v101[0]);
    v51 = a2[7];
    v50 = a2 + 7;
    if (v51)
    {
      std::string::basic_string[abi:ne180100]<0>(v101, "output_embedding_tree");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v101, &v103);
      (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v103 + 160))(v103, __p, v50);
      if (v106 < 0)
        operator delete(__p[0]);
      v52 = v104;
      if (!v104)
        goto LABEL_319;
      v53 = (unint64_t *)&v104->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
LABEL_317:
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
LABEL_319:
      if (v102 < 0)
        operator delete(v101[0]);
    }
  }
}

void sub_191841D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191841F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191842138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918421FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918423E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1918424CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191842728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918427EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918429E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::general_padding_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _DWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _DWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void *__p[2];
  char v133;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v52 = v131;
    if (v131)
    {
      p_shared_owners = (unint64_t *)&v131->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 10) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v55 = v131;
    if (v131)
    {
      v56 = (unint64_t *)&v131->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v58 = v131;
    if (v131)
    {
      v59 = (unint64_t *)&v131->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 14) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v61 = v131;
    if (v131)
    {
      v62 = (unint64_t *)&v131->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v64 = v131;
    if (v131)
    {
      v65 = (unint64_t *)&v131->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 10) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v67 = v131;
    if (v131)
    {
      v68 = (unint64_t *)&v131->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v70 = v131;
    if (v131)
    {
      v71 = (unint64_t *)&v131->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 14) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v73 = v131;
    if (v131)
    {
      v74 = (unint64_t *)&v131->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v130 + 96))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v76 = v131;
    if (v131)
    {
      v77 = (unint64_t *)&v131->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v79 = v131;
    if (v131)
    {
      v80 = (unint64_t *)&v131->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 2) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v82 = v131;
    if (v131)
    {
      v83 = (unint64_t *)&v131->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v85 = v131;
    if (v131)
    {
      v86 = (unint64_t *)&v131->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 10) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v88 = v131;
    if (v131)
    {
      v89 = (unint64_t *)&v131->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v91 = v131;
    if (v131)
    {
      v92 = (unint64_t *)&v131->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 14) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v94 = v131;
    if (v131)
    {
      v95 = (unint64_t *)&v131->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v130 + 96))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v97 = v131;
    if (v131)
    {
      v98 = (unint64_t *)&v131->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v100 = v131;
    if (v131)
    {
      v101 = (unint64_t *)&v131->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "pad.fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_WORD *)(a2 + 2) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v103 = v131;
    if (v131)
    {
      v104 = (unint64_t *)&v131->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v106 = v131;
    if (v131)
    {
      v107 = (unint64_t *)&v131->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v109 = v131;
    if (v131)
    {
      v110 = (unint64_t *)&v131->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "dst_offset_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v112 = v131;
    if (v131)
    {
      v113 = (unint64_t *)&v131->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "dst_offset_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v115 = v131;
    if (v131)
    {
      v116 = (unint64_t *)&v131->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "src_crop_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v118 = v131;
    if (v131)
    {
      v119 = (unint64_t *)&v131->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "src_crop_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v121 = v131;
    if (v131)
    {
      v122 = (unint64_t *)&v131->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "src_offset_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v124 = v131;
    if (v131)
    {
      v125 = (unint64_t *)&v131->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "src_offset_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v130 + 24))(v130, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v130 + 40))(v130, __p);
    if (v133 < 0)
      operator delete(__p[0]);
    v49 = v131;
    if (!v131)
      goto LABEL_426;
    v127 = (unint64_t *)&v131->__shared_owners_;
    do
      v51 = __ldaxr(v127);
    while (__stlxr(v51 - 1, v127));
    goto LABEL_424;
  }
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2 + 8);
  if (v133 < 0)
    operator delete(__p[0]);
  v5 = v131;
  if (v131)
  {
    v6 = (unint64_t *)&v131->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2 + 10);
  if (v133 < 0)
    operator delete(__p[0]);
  v8 = v131;
  if (v131)
  {
    v9 = (unint64_t *)&v131->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2 + 12);
  if (v133 < 0)
    operator delete(__p[0]);
  v11 = v131;
  if (v131)
  {
    v12 = (unint64_t *)&v131->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2 + 14);
  if (v133 < 0)
    operator delete(__p[0]);
  v14 = v131;
  if (v131)
  {
    v15 = (unint64_t *)&v131->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 216))(v130, __p, a2 + 4);
  if (v133 < 0)
    operator delete(__p[0]);
  v17 = v131;
  if (v131)
  {
    v18 = (unint64_t *)&v131->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_pad_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2);
  if (v133 < 0)
    operator delete(__p[0]);
  v20 = v131;
  if (v131)
  {
    v21 = (unint64_t *)&v131->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 176))(v130, __p, a2 + 2);
  if (v133 < 0)
    operator delete(__p[0]);
  v23 = v131;
  if (v131)
  {
    v24 = (unint64_t *)&v131->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v129 < 0)
    operator delete(v128[0]);
  v26 = (_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v128, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 28);
    if (v133 < 0)
      operator delete(__p[0]);
    v27 = v131;
    if (v131)
    {
      v28 = (unint64_t *)&v131->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    if (*v26)
    {
      std::string::basic_string[abi:ne180100]<0>(v128, "dst_h");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 32);
      if (v133 < 0)
        operator delete(__p[0]);
      v30 = v131;
      if (v131)
      {
        v31 = (unint64_t *)&v131->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v129 < 0)
        operator delete(v128[0]);
      if (*v26)
      {
        std::string::basic_string[abi:ne180100]<0>(v128, "dst_offset_x");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 20);
        if (v133 < 0)
          operator delete(__p[0]);
        v33 = v131;
        if (v131)
        {
          v34 = (unint64_t *)&v131->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v129 < 0)
          operator delete(v128[0]);
        if (*v26)
        {
          std::string::basic_string[abi:ne180100]<0>(v128, "dst_offset_y");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 24);
          if (v133 < 0)
            operator delete(__p[0]);
          v36 = v131;
          if (v131)
          {
            v37 = (unint64_t *)&v131->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v129 < 0)
            operator delete(v128[0]);
        }
      }
    }
  }
  v39 = (_DWORD *)(a2 + 44);
  if (*(_DWORD *)(a2 + 44))
  {
    std::string::basic_string[abi:ne180100]<0>(v128, "src_crop_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 44);
    if (v133 < 0)
      operator delete(__p[0]);
    v40 = v131;
    if (v131)
    {
      v41 = (unint64_t *)&v131->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v129 < 0)
      operator delete(v128[0]);
    if (*v39)
    {
      std::string::basic_string[abi:ne180100]<0>(v128, "src_crop_h");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 48);
      if (v133 < 0)
        operator delete(__p[0]);
      v43 = v131;
      if (v131)
      {
        v44 = (unint64_t *)&v131->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v129 < 0)
        operator delete(v128[0]);
      if (*v39)
      {
        std::string::basic_string[abi:ne180100]<0>(v128, "src_offset_x");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 36);
        if (v133 < 0)
          operator delete(__p[0]);
        v46 = v131;
        if (v131)
        {
          v47 = (unint64_t *)&v131->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (v129 < 0)
          operator delete(v128[0]);
        if (*v39)
        {
          std::string::basic_string[abi:ne180100]<0>(v128, "src_offset_y");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v128, &v130);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v130 + 160))(v130, __p, a2 + 40);
          if (v133 < 0)
            operator delete(__p[0]);
          v49 = v131;
          if (!v131)
            goto LABEL_426;
          v50 = (unint64_t *)&v131->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
LABEL_424:
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
LABEL_426:
          if (v129 < 0)
            operator delete(v128[0]);
        }
      }
    }
  }
}

void sub_1918444F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191844710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191844954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191844A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191844C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191844CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191844EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191844FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918451A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::flatten_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2 + 1);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
LABEL_35:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_191845460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191845558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918456E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918457A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191845990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::crop_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 1);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 3);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 2);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_191845ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191845FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191846170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191846234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v17 + 216))(v17, __p, a2 + 4);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v17 + 96))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
LABEL_35:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_1918466D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918467D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191846978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191846A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191846C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "block_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 1);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "pixel_shuffle");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 2);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "block_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "pixel_shuffle");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_191847024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19184712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191847314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918473D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918475CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  uint64_t i;
  std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  unint64_t *v32;
  std::string v33;
  std::string v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 208))(v35, __p, a2 + 36);
    if (v38 < 0)
      operator delete(__p[0]);
    v6 = v36;
    if (!v36)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_BYTE *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 88))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v6 = v36;
    if (!v36)
      goto LABEL_17;
    v9 = (unint64_t *)&v36->__shared_owners_;
    do
      v8 = __ldaxr(v9);
    while (__stlxr(v8 - 1, v9));
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_17:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  for (i = 0; i != 3; ++i)
  {
    if (a3)
    {
      std::to_string(&v33, i);
      v11 = std::string::insert(&v33, 0, "padding_crop_start_");
      v34 = *v11;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4 * i + 12);
      if (v38 < 0)
        operator delete(__p[0]);
      v12 = v36;
      if (v36)
      {
        v13 = (unint64_t *)&v36->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::to_string(&v33, i);
      v15 = std::string::insert(&v33, 0, "padding_crop_end_");
      v34 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4 * i + 24);
      if (v38 < 0)
        operator delete(__p[0]);
      v16 = v36;
      if (v36)
      {
        v17 = (unint64_t *)&v36->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::to_string(&v33, i);
      v19 = std::string::insert(&v33, 0, "block_shape_");
      v34 = *v19;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4 * i);
      if (v38 < 0)
        operator delete(__p[0]);
      v20 = v36;
      if (v36)
      {
        v21 = (unint64_t *)&v36->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        goto LABEL_82;
      }
    }
    else
    {
      std::to_string(&v33, i);
      v23 = std::string::insert(&v33, 0, "padding_crop_start_");
      v34 = *v23;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
        *(_DWORD *)(a2 + 4 * i + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
      if (v38 < 0)
        operator delete(__p[0]);
      v24 = v36;
      if (v36)
      {
        v25 = (unint64_t *)&v36->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::to_string(&v33, i);
      v27 = std::string::insert(&v33, 0, "padding_crop_end_");
      v34 = *v27;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
        *(_DWORD *)(a2 + 4 * i + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
      if (v38 < 0)
        operator delete(__p[0]);
      v28 = v36;
      if (v36)
      {
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::to_string(&v33, i);
      v31 = std::string::insert(&v33, 0, "block_shape_");
      v34 = *v31;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v34, &v35);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
        *(_DWORD *)(a2 + 4 * i) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
      if (v38 < 0)
        operator delete(__p[0]);
      v20 = v36;
      if (v36)
      {
        v32 = (unint64_t *)&v36->__shared_owners_;
        do
          v22 = __ldaxr(v32);
        while (__stlxr(v22 - 1, v32));
LABEL_82:
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_191847C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191847DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191847FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191848260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191848348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191848540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191848604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918487F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::broadcast_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  char v64;

  if (!a3 || *(_DWORD *)a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_w");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v34 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_h");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v37 = v62;
      if (v62)
      {
        v38 = (unint64_t *)&v62->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_k");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v40 = v62;
      if (v62)
      {
        v41 = (unint64_t *)&v62->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_n");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v43 = v62;
      if (v62)
      {
        v44 = (unint64_t *)&v62->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_seq");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v46 = v62;
      if (v62)
      {
        v47 = (unint64_t *)&v62->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dst_nd_rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v49 = v62;
      if (v62)
      {
        v50 = (unint64_t *)&v62->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "nd_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v52 = v62;
      if (v62)
      {
        v53 = (unint64_t *)&v62->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "dynamic_shape");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_BYTE *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 88))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v55 = v62;
      if (v62)
      {
        v56 = (unint64_t *)&v62->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v60 < 0)
        operator delete(v59[0]);
      std::string::basic_string[abi:ne180100]<0>(v59, "ndlayers_impl");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
        *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 88))(v61, __p);
      if (v64 < 0)
        operator delete(__p[0]);
      v31 = v62;
      if (!v62)
        goto LABEL_187;
      v58 = (unint64_t *)&v62->__shared_owners_;
      do
        v33 = __ldaxr(v58);
      while (__stlxr(v33 - 1, v58));
      goto LABEL_185;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2);
    if (v64 < 0)
      operator delete(__p[0]);
    v5 = v62;
    if (v62)
    {
      v6 = (unint64_t *)&v62->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 4) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 4);
    if (v64 < 0)
      operator delete(__p[0]);
    v8 = v62;
    if (v62)
    {
      v9 = (unint64_t *)&v62->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 8) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 8);
    if (v64 < 0)
      operator delete(__p[0]);
    v11 = v62;
    if (v62)
    {
      v12 = (unint64_t *)&v62->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 12);
    if (v64 < 0)
      operator delete(__p[0]);
    v14 = v62;
    if (v62)
    {
      v15 = (unint64_t *)&v62->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 16) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 16);
    if (v64 < 0)
      operator delete(__p[0]);
    v17 = v62;
    if (v62)
    {
      v18 = (unint64_t *)&v62->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 20) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 20);
    if (v64 < 0)
      operator delete(__p[0]);
    v20 = v62;
    if (v62)
    {
      v21 = (unint64_t *)&v62->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 28);
    if (v64 < 0)
      operator delete(__p[0]);
    v23 = v62;
    if (v62)
    {
      v24 = (unint64_t *)&v62->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_BYTE *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 208))(v61, __p, a2 + 32);
    if (v64 < 0)
      operator delete(__p[0]);
    v26 = v62;
    if (v62)
    {
      v27 = (unint64_t *)&v62->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  v30 = *(unsigned __int8 *)(a2 + 24);
  v29 = a2 + 24;
  if (v30)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "ndlayers_impl");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 208))(v61, __p, v29);
    if (v64 < 0)
      operator delete(__p[0]);
    v31 = v62;
    if (!v62)
      goto LABEL_187;
    v32 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
LABEL_185:
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_187:
    if (v60 < 0)
      operator delete(v59[0]);
  }
}

