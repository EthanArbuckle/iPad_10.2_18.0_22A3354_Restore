void sub_1914B381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;

  *(_QWORD *)(v47 - 256) = &STACK[0x318];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 256));
  if (SLOBYTE(STACK[0xBB7]) < 0)
    operator delete((void *)STACK[0xBA0]);
  if (SLOBYTE(STACK[0xC07]) < 0)
    operator delete((void *)STACK[0xBF0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xCB0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xB40]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x550]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x620]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x740]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xB10]);
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  if (SLOBYTE(STACK[0x8D7]) < 0)
    operator delete((void *)STACK[0x8C0]);
  if (SLOBYTE(STACK[0x8F7]) < 0)
    operator delete((void *)STACK[0x8E0]);
  if (SLOBYTE(STACK[0x90F]) < 0)
    operator delete((void *)STACK[0x8F8]);
  if (SLOBYTE(STACK[0x927]) < 0)
    operator delete((void *)STACK[0x910]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (STACK[0x268])
  {
    v49 = (unint64_t *)(STACK[0x268] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      v51 = (std::__shared_weak_count *)STACK[0x268];
      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x268] + 16))(STACK[0x268]);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (STACK[0x260])
  {
    v52 = (unint64_t *)(STACK[0x260] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      v54 = (std::__shared_weak_count *)STACK[0x260];
      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x260] + 16))(STACK[0x260]);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v55 = (std::__shared_weak_count *)STACK[0x958];
  if (STACK[0x958])
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)STACK[0x218];
  if (STACK[0x218])
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x960], (char *)STACK[0x968]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a47, (char *)STACK[0x998]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x978], (char *)STACK[0x980]);
  std::__tree<int>::destroy((_QWORD *)STACK[0x9B0]);
  std::__list_imp<int>::clear(&STACK[0x9C0]);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&STACK[0xA90]);
  v61 = (std::__shared_weak_count *)STACK[0xA80];
  if (STACK[0xA80])
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)STACK[0xA70];
  if (STACK[0xA70])
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)STACK[0xA60];
  if (STACK[0xA60])
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xA18], (_QWORD *)STACK[0xA20]);
  v70 = (std::__shared_weak_count *)STACK[0xA10];
  if (STACK[0xA10])
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(uint64_t **a1, int a2, int a3, _QWORD *a4)
{
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t **v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v6;
        v8 = *((_DWORD *)v6 + 7);
        if (v8 <= a2)
          break;
LABEL_3:
        v6 = (uint64_t *)*v7;
        v9 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a2)
      {
        v10 = *((_DWORD *)v7 + 8);
        if (v10 > a3)
          goto LABEL_3;
        if (v10 >= a3)
          return v7;
      }
      v9 = (uint64_t **)(v7 + 1);
      v6 = (uint64_t *)v7[1];
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = a1 + 1;
LABEL_11:
  v11 = v7;
  v7 = operator new(0x28uLL);
  *(_QWORD *)((char *)v7 + 28) = *a4;
  *((_BYTE *)v7 + 36) = 0;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = v11;
  *v9 = v7;
  v12 = (uint64_t *)**a1;
  v13 = v7;
  if (v12)
  {
    *a1 = v12;
    v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

void add_with_context_transfers_t<Espresso::activation_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  std::string *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string *v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 **v62;
  std::string::size_type v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  size_t v78;
  std::string *v79;
  const void *p_p;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  void *v86;
  unsigned __int8 v87;
  _QWORD *v88;
  _QWORD **v89;
  BOOL v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *lpsrc;
  std::string::size_type v134;
  _BYTE __str[32];
  std::string v136;
  void *__p;
  _BYTE v138[15];
  unsigned __int8 v139;
  std::string *v140;
  std::string *v141;
  unint64_t v142;
  char *v143;
  std::string *v144;
  unint64_t v145;
  std::string v146;
  _QWORD *v147[3];
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  _QWORD *v153[2];
  void **v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v151 = 0;
  v8 = *a6;
  v122 = a6[1];
  if (*a6 == v122)
  {
    v36 = *a6;
    goto LABEL_51;
  }
  v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(v11 + 32);
    if (*(_QWORD *)(v11 + 40) != v12)
    {
      v123 = v8;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v13) + 64);
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        v148 = v16;
        v149 = (std::__shared_weak_count *)v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v11 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v13;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        v21 = (__int128 *)v19[3];
        v20 = (__int128 *)v19[4];
        if (v21 != v20)
          break;
LABEL_39:
        v33 = v149;
        if (v149)
        {
          p_shared_owners = (unint64_t *)&v149->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v13;
        v11 = *(_QWORD *)(a2 + 80);
        v12 = *(_QWORD *)(v11 + 32);
        if (v13 >= (*(_QWORD *)(v11 + 40) - v12) >> 4)
        {
          v9 = v151;
          v8 = v123;
          goto LABEL_46;
        }
      }
      v22 = v148;
      v23 = v151;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v24 = *v21;
          *(_QWORD *)&__str[16] = *((_QWORD *)v21 + 2);
          *(_OWORD *)__str = v24;
        }
        v25 = __str[23];
        v26 = __str[23];
        if (__str[23] >= 0)
          v27 = __str[23];
        else
          v27 = *(_QWORD *)&__str[8];
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v146.__r_.__value_.__l.__size_;
        if (v27 == size)
        {
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v146;
          else
            v29 = (std::string *)v146.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v22 != *(_QWORD *)(a2 + 112))
            {
              v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v152, v22, &v148);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v151)+ 8) = 1;
              v26 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v29 = (std::string *)((char *)v29 + 1);
            if (!--v25)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v26 < 0)
        {
          v31 = *(void **)__str;
LABEL_37:
          operator delete(v31);
        }
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 == v20)
          goto LABEL_39;
      }
    }
LABEL_46:
    v151 = ++v9;
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v8 += 24;
  }
  while (v8 != v122);
  v36 = *a6;
  v8 = a6[1];
LABEL_51:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v148, v36, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v36) >> 3));
  v37 = v152;
  if (v152 == (uint64_t *)v153)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v146, v37 + 4);
    v38 = v146.__r_.__value_.__l.__size_;
    v120 = v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v121 = (std::__shared_weak_count *)v38;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v41 = (_QWORD **)v146.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v146.__r_.__value_.__r.__words[2] == v147)
      goto LABEL_156;
    while (2)
    {
      v42 = *((_DWORD *)v41 + 7);
      v43 = *a6 + 24 * v42;
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v44 = *(_OWORD *)v43;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)__str = v44;
      }
      if (__str[23] >= 0)
        v45 = __str[23];
      else
        v45 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v46 = __str;
      else
        v46 = *(char **)__str;
      if (v45 >= 4)
      {
        v47 = &v46[v45];
        v48 = v45;
        v49 = v46;
        do
        {
          v50 = (char *)memchr(v49, 99, v48 - 3);
          if (!v50)
            break;
          if (*(_DWORD *)v50 == 1601532003)
          {
            if (v50 != v47 && v50 == v46)
            {
              std::string::basic_string(&v136, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v155);
              goto LABEL_83;
            }
            break;
          }
          v49 = v50 + 1;
          v48 = v47 - v49;
        }
        while (v47 - v49 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v45 + 3);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v136;
      else
        v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (__str[23] >= 0)
          v52 = __str;
        else
          v52 = *(_BYTE **)__str;
        memmove(v51, v52, v45);
      }
      *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v45) = 7894111;
LABEL_83:
      v53 = v148 + 24 * v42;
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      v54 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)&v136.__r_.__value_.__l + 2);
      *(_OWORD *)v53 = v54;
      v55 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v55 + 40) == *(_QWORD *)(v55 + 32))
      {
LABEL_115:
        v70 = *a6 + 24 * v42;
        v71 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v143, v70);
        }
        else
        {
          if (*(char *)(v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v70;
            v144->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          v73 = v71 + 1;
        }
        v144 = v73;
        v74 = v148 + 24 * v42;
        v75 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v140, v74);
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v76 = *(_OWORD *)v74;
            v141->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          }
          v77 = v75 + 1;
        }
        v141 = v77;
        if ((v139 & 0x80u) == 0)
          v78 = v139;
        else
          v78 = *(_QWORD *)v138;
        std::string::basic_string[abi:ne180100]((uint64_t)&v136, v78 + 1);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v136;
        else
          v79 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if ((v139 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v79, p_p, v78);
        }
        *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 95;
        v81 = *a6 + 24 * v42;
        v82 = *(char *)(v81 + 23);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(*a6 + 24 * v42);
        else
          v83 = *(const std::string::value_type **)v81;
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v81 + 23);
        else
          v84 = *(_QWORD *)(v81 + 8);
        v85 = std::string::append(&v136, v83, v84);
        v86 = (void *)v85->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v155 = v85->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
        v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if ((char)v139 < 0)
          operator delete(__p);
        __p = v86;
        *(_QWORD *)v138 = v155;
        *(_QWORD *)&v138[7] = *(_QWORD *)((char *)&v155 + 7);
        v139 = v87;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v56 = 0;
      v57 = 0;
      while (2)
      {
        v136.__r_.__value_.__r.__words[0] = v56;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 96, v56, &v136);
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (2)
        {
          if (v60 != v59)
          {
            if (*((char *)v60 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              v136.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
            }
            v62 = (unsigned __int8 **)(v148 + 24 * v42);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v63 = v136.__r_.__value_.__l.__size_;
            v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
            v65 = (char)v64;
            if ((char)v64 < 0)
              v64 = v62[1];
            if ((unsigned __int8 *)v63 != v64)
              goto LABEL_107;
            if (v65 >= 0)
              v66 = (unsigned __int8 *)(v148 + 24 * v42);
            else
              v66 = *v62;
            if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v69 = (void *)v136.__r_.__value_.__r.__words[0];
              v57 |= memcmp(v136.__r_.__value_.__l.__data_, v66, v136.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v69);
            }
            else if (*((_BYTE *)&v136.__r_.__value_.__s + 23))
            {
              v67 = &v136;
              v68 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
              while (v67->__r_.__value_.__s.__data_[0] == *v66)
              {
                v67 = (std::string *)((char *)v67 + 1);
                ++v66;
                if (!--v68)
                {
                  v57 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v69 = (void *)v136.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v57 = 1;
            }
            v60 = (__int128 *)((char *)v60 + 24);
            continue;
          }
          break;
        }
        ++v56;
        v55 = *(_QWORD *)(a2 + 80);
        if (v56 < (uint64_t)(*(_QWORD *)(v55 + 40) - *(_QWORD *)(v55 + 32)) >> 4)
          continue;
        break;
      }
      if ((v57 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v88 = v41[1];
      if (v88)
      {
        do
        {
          v89 = (_QWORD **)v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD **)v41[2];
          v90 = *v89 == v41;
          v41 = v89;
        }
        while (!v90);
      }
      v41 = v89;
      if (v89 != v147)
        continue;
      break;
    }
LABEL_156:
    if (v141 != v140)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v136, "context_transfer");
      if ((v139 & 0x80u) == 0)
        v91 = v139;
      else
        v91 = *(_QWORD *)v138;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v91 + 3);
      if (v156 >= 0)
        v92 = &v155;
      else
        v92 = (__int128 *)v155;
      if (v91)
      {
        if ((v139 & 0x80u) == 0)
          v93 = &__p;
        else
          v93 = __p;
        memmove(v92, v93, v91);
      }
      *(_DWORD *)((char *)v92 + v91) = 7894111;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - v143) >> 3));
      memset(v129, 0, sizeof(v129));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v136, (uint64_t)&v155, (uint64_t)__str, v130, v131, v129);
      v154 = (void **)v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      v154 = (void **)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      if (v156 < 0)
        operator delete((void *)v155);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v95 = v94;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v136.__r_.__value_.__l.__size_ = v134;
        if (v134)
        {
          v96 = (unint64_t *)(v134 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
      }
      else
      {
        v95 = 0;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v154) = 0;
      Espresso::create_context((int *)&v154, &v155);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v95 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v98 = v136.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v136.__r_.__value_.__r.__words[0] + 328), v120, (uint64_t)v121);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v98 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v98 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 312) + 8));
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)v134;
      if (v134)
      {
        v106 = (unint64_t *)(v134 + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }
    if ((char)v139 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v143;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v121)
    {
      v108 = (unint64_t *)&v121->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    std::__tree<int>::destroy(v147[0]);
    v110 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
    if (v146.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = (uint64_t *)v37[1];
    if (v113)
    {
      do
      {
        v114 = v113;
        v113 = (uint64_t *)*v113;
      }
      while (v113);
    }
    else
    {
      do
      {
        v114 = (uint64_t *)v37[2];
        v90 = *v114 == (_QWORD)v37;
        v37 = v114;
      }
      while (!v90);
    }
    v37 = v114;
    if (v114 != (uint64_t *)v153)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v148, (uint64_t)v149, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - v148) >> 3));
  memset(v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v125, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(a1, (uint64_t *)a2, a3, a4, a5, v126, v127, v125);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v153[0]);
}

void sub_1914B6C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(_QWORD **)(v59 - 152));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 *v25;
  __int128 *v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  std::string::size_type size;
  std::string *v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD **v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  int64_t v50;
  char *v51;
  char *v52;
  int64_t v53;
  char *v54;
  char *v55;
  std::string *v56;
  _BYTE *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  _QWORD *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  unsigned __int8 **v67;
  std::string::size_type v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  std::string *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  size_t v83;
  std::string *v84;
  const void *p_p;
  uint64_t v86;
  int v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  std::string *v90;
  void *v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD **v94;
  BOOL v95;
  size_t v96;
  __int128 *v97;
  const void *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::runtime_error *exception;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144[3];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *lpsrc;
  std::string::size_type v149;
  _BYTE __str[32];
  std::string v151;
  void *__p;
  _BYTE v153[15];
  unsigned __int8 v154;
  std::string *v155;
  std::string *v156;
  unint64_t v157;
  std::string *v158;
  std::string *v159;
  unint64_t v160;
  std::string v161;
  _QWORD *v162[3];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t *v167;
  _QWORD *v168[2];
  void **v169;
  __int128 v170;
  char v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v140 = 0;
  v141 = 0;
  v139 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v139, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v136 = 0;
  v137 = 0;
  v138 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v128 = a4;
  v129 = a5;
  v130 = a3;
  v168[0] = 0;
  v168[1] = 0;
  v167 = (uint64_t *)v168;
  v166 = 0;
  v13 = v139;
  v134 = v140;
  if (v139 == v140)
  {
    v41 = v139;
    goto LABEL_51;
  }
  v14 = 0;
  do
  {
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v13;
      v161.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v15;
    }
    v16 = *(_QWORD *)(a2 + 80);
    v17 = *(_QWORD *)(v16 + 32);
    if (*(_QWORD *)(v16 + 40) != v17)
    {
      v135 = v13;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 16 * v18) + 64);
        v21 = *(_QWORD *)(v19 + 8);
        v20 = *(_QWORD *)(v19 + 16);
        v163 = v21;
        v164 = (std::__shared_weak_count *)v20;
        if (v20)
        {
          v22 = (unint64_t *)(v20 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v16 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v18;
        v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 96, v18, __str);
        v26 = (__int128 *)v24[3];
        v25 = (__int128 *)v24[4];
        if (v26 != v25)
          break;
LABEL_39:
        v38 = v164;
        if (v164)
        {
          p_shared_owners = (unint64_t *)&v164->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++v18;
        v16 = *(_QWORD *)(a2 + 80);
        v17 = *(_QWORD *)(v16 + 32);
        if (v18 >= (*(_QWORD *)(v16 + 40) - v17) >> 4)
        {
          v14 = v166;
          v13 = v135;
          goto LABEL_46;
        }
      }
      v27 = v163;
      v28 = v166;
      while (1)
      {
        if (*((char *)v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v29 = *v26;
          *(_QWORD *)&__str[16] = *((_QWORD *)v26 + 2);
          *(_OWORD *)__str = v29;
        }
        v30 = __str[23];
        v31 = __str[23];
        if (__str[23] >= 0)
          v32 = __str[23];
        else
          v32 = *(_QWORD *)&__str[8];
        size = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v161.__r_.__value_.__l.__size_;
        if (v32 == size)
        {
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v161;
          else
            v34 = (std::string *)v161.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v36 = *(void **)__str;
            if (memcmp(*(const void **)__str, v34, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v27 != *(_QWORD *)(a2 + 112))
            {
              v37 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v167, v27, &v163);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v37 + 6, v28, &v166)+ 8) = 1;
              v31 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v35 = __str;
          while (*v35 == v34->__r_.__value_.__s.__data_[0])
          {
            ++v35;
            v34 = (std::string *)((char *)v34 + 1);
            if (!--v30)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v31 < 0)
        {
          v36 = *(void **)__str;
LABEL_37:
          operator delete(v36);
        }
        v26 = (__int128 *)((char *)v26 + 24);
        if (v26 == v25)
          goto LABEL_39;
      }
    }
LABEL_46:
    v166 = ++v14;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    v13 += 24;
  }
  while (v13 != v134);
  v41 = v139;
  v13 = v140;
LABEL_51:
  v163 = 0;
  v164 = 0;
  v165 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v163, v41, v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - v41) >> 3));
  v42 = v167;
  if (v167 == (uint64_t *)v168)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v161, v42 + 4);
    v43 = v161.__r_.__value_.__l.__size_;
    v132 = v161.__r_.__value_.__r.__words[0];
    if (v161.__r_.__value_.__l.__size_)
    {
      v44 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v133 = (std::__shared_weak_count *)v43;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v46 = (_QWORD **)v161.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v161.__r_.__value_.__r.__words[2] == v162)
      goto LABEL_156;
    while (2)
    {
      v47 = *((_DWORD *)v46 + 7);
      v48 = v139 + 24 * v47;
      if (*(char *)(v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
      }
      else
      {
        v49 = *(_OWORD *)v48;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v48 + 16);
        *(_OWORD *)__str = v49;
      }
      if (__str[23] >= 0)
        v50 = __str[23];
      else
        v50 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v51 = __str;
      else
        v51 = *(char **)__str;
      if (v50 >= 4)
      {
        v52 = &v51[v50];
        v53 = v50;
        v54 = v51;
        do
        {
          v55 = (char *)memchr(v54, 99, v53 - 3);
          if (!v55)
            break;
          if (*(_DWORD *)v55 == 1601532003)
          {
            if (v55 != v52 && v55 == v51)
            {
              std::string::basic_string(&v151, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v170);
              goto LABEL_83;
            }
            break;
          }
          v54 = v55 + 1;
          v53 = v52 - v54;
        }
        while (v52 - v54 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v151, v50 + 3);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v151;
      else
        v56 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if (v50)
      {
        if (__str[23] >= 0)
          v57 = __str;
        else
          v57 = *(_BYTE **)__str;
        memmove(v56, v57, v50);
      }
      *(_DWORD *)((char *)&v56->__r_.__value_.__l.__data_ + v50) = 7894111;
LABEL_83:
      v58 = v163 + 24 * v47;
      if (*(char *)(v58 + 23) < 0)
        operator delete(*(void **)v58);
      v59 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      *(_QWORD *)(v58 + 16) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
      *(_OWORD *)v58 = v59;
      v60 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v60 + 40) == *(_QWORD *)(v60 + 32))
      {
LABEL_115:
        v75 = v139 + 24 * v47;
        v76 = v159;
        if ((unint64_t)v159 >= v160)
        {
          v78 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v158, v75);
        }
        else
        {
          if (*(char *)(v75 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v159, *(const std::string::value_type **)v75, *(_QWORD *)(v75 + 8));
          }
          else
          {
            v77 = *(_OWORD *)v75;
            v159->__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 16);
            *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
          }
          v78 = v76 + 1;
        }
        v159 = v78;
        v79 = v163 + 24 * v47;
        v80 = v156;
        if ((unint64_t)v156 >= v157)
        {
          v82 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v155, v79);
        }
        else
        {
          if (*(char *)(v79 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v156, *(const std::string::value_type **)v79, *(_QWORD *)(v79 + 8));
          }
          else
          {
            v81 = *(_OWORD *)v79;
            v156->__r_.__value_.__r.__words[2] = *(_QWORD *)(v79 + 16);
            *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
          }
          v82 = v80 + 1;
        }
        v156 = v82;
        if ((v154 & 0x80u) == 0)
          v83 = v154;
        else
          v83 = *(_QWORD *)v153;
        std::string::basic_string[abi:ne180100]((uint64_t)&v151, v83 + 1);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v151;
        else
          v84 = (std::string *)v151.__r_.__value_.__r.__words[0];
        if (v83)
        {
          if ((v154 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v84, p_p, v83);
        }
        *(_WORD *)((char *)&v84->__r_.__value_.__l.__data_ + v83) = 95;
        v86 = v139 + 24 * v47;
        v87 = *(char *)(v86 + 23);
        if (v87 >= 0)
          v88 = (const std::string::value_type *)(v139 + 24 * v47);
        else
          v88 = *(const std::string::value_type **)v86;
        if (v87 >= 0)
          v89 = *(unsigned __int8 *)(v86 + 23);
        else
          v89 = *(_QWORD *)(v86 + 8);
        v90 = std::string::append(&v151, v88, v89);
        v91 = (void *)v90->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v170 = v90->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v170 + 7) = *(std::string::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7);
        v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if ((char)v154 < 0)
          operator delete(__p);
        __p = v91;
        *(_QWORD *)v153 = v170;
        *(_QWORD *)&v153[7] = *(_QWORD *)((char *)&v170 + 7);
        v154 = v92;
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v61 = 0;
      v62 = 0;
      while (2)
      {
        v151.__r_.__value_.__r.__words[0] = v61;
        v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v60 + 96, v61, &v151);
        v64 = (__int128 *)v63[3];
        v65 = (__int128 *)v63[4];
        while (2)
        {
          if (v64 != v65)
          {
            if (*((char *)v64 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
            }
            else
            {
              v66 = *v64;
              v151.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
              *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v66;
            }
            v67 = (unsigned __int8 **)(v163 + 24 * v47);
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
            else
              v68 = v151.__r_.__value_.__l.__size_;
            v69 = (unsigned __int8 *)*((unsigned __int8 *)v67 + 23);
            v70 = (char)v69;
            if ((char)v69 < 0)
              v69 = v67[1];
            if ((unsigned __int8 *)v68 != v69)
              goto LABEL_107;
            if (v70 >= 0)
              v71 = (unsigned __int8 *)(v163 + 24 * v47);
            else
              v71 = *v67;
            if ((*((_BYTE *)&v151.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v74 = (void *)v151.__r_.__value_.__r.__words[0];
              v62 |= memcmp(v151.__r_.__value_.__l.__data_, v71, v151.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v74);
            }
            else if (*((_BYTE *)&v151.__r_.__value_.__s + 23))
            {
              v72 = &v151;
              v73 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
              while (v72->__r_.__value_.__s.__data_[0] == *v71)
              {
                v72 = (std::string *)((char *)v72 + 1);
                ++v71;
                if (!--v73)
                {
                  v62 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v151.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v74 = (void *)v151.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v62 = 1;
            }
            v64 = (__int128 *)((char *)v64 + 24);
            continue;
          }
          break;
        }
        ++v61;
        v60 = *(_QWORD *)(a2 + 80);
        if (v61 < (uint64_t)(*(_QWORD *)(v60 + 40) - *(_QWORD *)(v60 + 32)) >> 4)
          continue;
        break;
      }
      if ((v62 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v93 = v46[1];
      if (v93)
      {
        do
        {
          v94 = (_QWORD **)v93;
          v93 = (_QWORD *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (_QWORD **)v46[2];
          v95 = *v94 == v46;
          v46 = v94;
        }
        while (!v95);
      }
      v46 = v94;
      if (v94 != v162)
        continue;
      break;
    }
LABEL_156:
    if (v156 != v155)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v151, "context_transfer");
      if ((v154 & 0x80u) == 0)
        v96 = v154;
      else
        v96 = *(_QWORD *)v153;
      std::string::basic_string[abi:ne180100]((uint64_t)&v170, v96 + 3);
      if (v171 >= 0)
        v97 = &v170;
      else
        v97 = (__int128 *)v170;
      if (v96)
      {
        if ((v154 & 0x80u) == 0)
          v98 = &__p;
        else
          v98 = __p;
        memmove(v97, v98, v96);
      }
      *(_DWORD *)((char *)v97 + v96) = 7894111;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v145, (uint64_t)v158, (uint64_t)v159, 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (char *)v158) >> 3));
      memset(v144, 0, sizeof(v144));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v144, (uint64_t)v155, (uint64_t)v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v151, (uint64_t)&v170, (uint64_t)__str, v145, v146, v144);
      v169 = (void **)v144;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v169);
      v169 = (void **)&v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v169);
      if (v171 < 0)
        operator delete((void *)v170);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v100 = v99;
        v151.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
        v151.__r_.__value_.__l.__size_ = v149;
        if (v149)
        {
          v101 = (unint64_t *)(v149 + 8);
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
        }
      }
      else
      {
        v100 = 0;
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v169) = 0;
      Espresso::create_context((int *)&v169, &v170);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v100 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v103 = v151.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v151.__r_.__value_.__r.__words[0] + 328), v132, (uint64_t)v133);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v103 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v103 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v103 + 312) + 8));
      v104 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v105 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
      if (v151.__r_.__value_.__l.__size_)
      {
        v108 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = (std::__shared_weak_count *)v149;
      if (v149)
      {
        v111 = (unint64_t *)(v149 + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
    if ((char)v154 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v155;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v133)
    {
      v113 = (unint64_t *)&v133->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    std::__tree<int>::destroy(v162[0]);
    v115 = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
    if (v161.__r_.__value_.__l.__size_)
    {
      v116 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = (uint64_t *)v42[1];
    if (v118)
    {
      do
      {
        v119 = v118;
        v118 = (uint64_t *)*v118;
      }
      while (v118);
    }
    else
    {
      do
      {
        v119 = (uint64_t *)v42[2];
        v95 = *v119 == (_QWORD)v42;
        v42 = v119;
      }
      while (!v95);
    }
    v42 = v119;
    if (v119 != (uint64_t *)v168)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  memset(&v161, 0, sizeof(v161));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v161, v163, (uint64_t)v164, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v164 - v163) >> 3));
  memset(__str, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v136, v137, 0xAAAAAAAAAAAAAAABLL * ((v137 - v136) >> 3));
  Espresso::sequential_builder::add<Espresso::batchnorm_params>((uint64_t *)&v142, (uint64_t *)a2, v130, v128, v129, (uint64_t)v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_, (uint64_t *)__str);
  v158 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158 = &v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158 = (std::string *)&v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v168[0]);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if (!v142
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v161);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v121 = v143;
  *a1 = v120;
  a1[1] = v121;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
    v124 = v143;
    if (v143)
    {
      v125 = (unint64_t *)&v143->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
  }
}

void sub_1914B7BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  void *v59;
  uint64_t v60;

  if (*(char *)(v60 - 217) < 0)
  {
    operator delete(*(void **)(v60 - 240));
    if ((v58 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a13);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v58)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v59);
  goto LABEL_6;
}

uint64_t std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)a1);
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_23:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      do
      {
        v19 = *v6;
        v20 = v6[1];
        v6 += 2;
        result = (uint64_t)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v19, v20);
        v8 += 2;
      }
      while (v6 != v18);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v21 = v18[1];
        *v13 = *v18;
        v13[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_23;
  }
  if (a2 != a3)
  {
    do
    {
      v24 = *v6;
      v25 = v6[1];
      v6 += 2;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v24, v25);
      v8 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v8)
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

void add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 *v25;
  __int128 *v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  std::string::size_type size;
  std::string *v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD **v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  int64_t v50;
  char *v51;
  char *v52;
  int64_t v53;
  char *v54;
  char *v55;
  std::string *v56;
  _BYTE *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  _QWORD *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  unsigned __int8 **v67;
  std::string::size_type v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  std::string *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  size_t v83;
  std::string *v84;
  const void *p_p;
  uint64_t v86;
  int v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  std::string *v90;
  void *v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD **v94;
  BOOL v95;
  size_t v96;
  __int128 *v97;
  const void *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::runtime_error *exception;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144[3];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *lpsrc;
  std::string::size_type v149;
  _BYTE __str[32];
  std::string v151;
  void *__p;
  _BYTE v153[15];
  unsigned __int8 v154;
  std::string *v155;
  std::string *v156;
  unint64_t v157;
  std::string *v158;
  std::string *v159;
  unint64_t v160;
  std::string v161;
  _QWORD *v162[3];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t *v167;
  _QWORD *v168[2];
  void **v169;
  __int128 v170;
  char v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v140 = 0;
  v141 = 0;
  v139 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v139, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v136 = 0;
  v137 = 0;
  v138 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v128 = a4;
  v129 = a5;
  v130 = a3;
  v168[0] = 0;
  v168[1] = 0;
  v167 = (uint64_t *)v168;
  v166 = 0;
  v13 = v139;
  v134 = v140;
  if (v139 == v140)
  {
    v41 = v139;
    goto LABEL_51;
  }
  v14 = 0;
  do
  {
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v13;
      v161.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v15;
    }
    v16 = *(_QWORD *)(a2 + 80);
    v17 = *(_QWORD *)(v16 + 32);
    if (*(_QWORD *)(v16 + 40) != v17)
    {
      v135 = v13;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 16 * v18) + 64);
        v21 = *(_QWORD *)(v19 + 8);
        v20 = *(_QWORD *)(v19 + 16);
        v163 = v21;
        v164 = (std::__shared_weak_count *)v20;
        if (v20)
        {
          v22 = (unint64_t *)(v20 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v16 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v18;
        v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 96, v18, __str);
        v26 = (__int128 *)v24[3];
        v25 = (__int128 *)v24[4];
        if (v26 != v25)
          break;
LABEL_39:
        v38 = v164;
        if (v164)
        {
          p_shared_owners = (unint64_t *)&v164->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++v18;
        v16 = *(_QWORD *)(a2 + 80);
        v17 = *(_QWORD *)(v16 + 32);
        if (v18 >= (*(_QWORD *)(v16 + 40) - v17) >> 4)
        {
          v14 = v166;
          v13 = v135;
          goto LABEL_46;
        }
      }
      v27 = v163;
      v28 = v166;
      while (1)
      {
        if (*((char *)v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v29 = *v26;
          *(_QWORD *)&__str[16] = *((_QWORD *)v26 + 2);
          *(_OWORD *)__str = v29;
        }
        v30 = __str[23];
        v31 = __str[23];
        if (__str[23] >= 0)
          v32 = __str[23];
        else
          v32 = *(_QWORD *)&__str[8];
        size = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v161.__r_.__value_.__l.__size_;
        if (v32 == size)
        {
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v161;
          else
            v34 = (std::string *)v161.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v36 = *(void **)__str;
            if (memcmp(*(const void **)__str, v34, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v27 != *(_QWORD *)(a2 + 112))
            {
              v37 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v167, v27, &v163);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v37 + 6, v28, &v166)+ 8) = 1;
              v31 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v35 = __str;
          while (*v35 == v34->__r_.__value_.__s.__data_[0])
          {
            ++v35;
            v34 = (std::string *)((char *)v34 + 1);
            if (!--v30)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v31 < 0)
        {
          v36 = *(void **)__str;
LABEL_37:
          operator delete(v36);
        }
        v26 = (__int128 *)((char *)v26 + 24);
        if (v26 == v25)
          goto LABEL_39;
      }
    }
LABEL_46:
    v166 = ++v14;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    v13 += 24;
  }
  while (v13 != v134);
  v41 = v139;
  v13 = v140;
LABEL_51:
  v163 = 0;
  v164 = 0;
  v165 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v163, v41, v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - v41) >> 3));
  v42 = v167;
  if (v167 == (uint64_t *)v168)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v161, v42 + 4);
    v43 = v161.__r_.__value_.__l.__size_;
    v132 = v161.__r_.__value_.__r.__words[0];
    if (v161.__r_.__value_.__l.__size_)
    {
      v44 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v133 = (std::__shared_weak_count *)v43;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v46 = (_QWORD **)v161.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v161.__r_.__value_.__r.__words[2] == v162)
      goto LABEL_156;
    while (2)
    {
      v47 = *((_DWORD *)v46 + 7);
      v48 = v139 + 24 * v47;
      if (*(char *)(v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
      }
      else
      {
        v49 = *(_OWORD *)v48;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v48 + 16);
        *(_OWORD *)__str = v49;
      }
      if (__str[23] >= 0)
        v50 = __str[23];
      else
        v50 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v51 = __str;
      else
        v51 = *(char **)__str;
      if (v50 >= 4)
      {
        v52 = &v51[v50];
        v53 = v50;
        v54 = v51;
        do
        {
          v55 = (char *)memchr(v54, 99, v53 - 3);
          if (!v55)
            break;
          if (*(_DWORD *)v55 == 1601532003)
          {
            if (v55 != v52 && v55 == v51)
            {
              std::string::basic_string(&v151, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v170);
              goto LABEL_83;
            }
            break;
          }
          v54 = v55 + 1;
          v53 = v52 - v54;
        }
        while (v52 - v54 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v151, v50 + 3);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v151;
      else
        v56 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if (v50)
      {
        if (__str[23] >= 0)
          v57 = __str;
        else
          v57 = *(_BYTE **)__str;
        memmove(v56, v57, v50);
      }
      *(_DWORD *)((char *)&v56->__r_.__value_.__l.__data_ + v50) = 7894111;
LABEL_83:
      v58 = v163 + 24 * v47;
      if (*(char *)(v58 + 23) < 0)
        operator delete(*(void **)v58);
      v59 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      *(_QWORD *)(v58 + 16) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
      *(_OWORD *)v58 = v59;
      v60 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v60 + 40) == *(_QWORD *)(v60 + 32))
      {
LABEL_115:
        v75 = v139 + 24 * v47;
        v76 = v159;
        if ((unint64_t)v159 >= v160)
        {
          v78 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v158, v75);
        }
        else
        {
          if (*(char *)(v75 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v159, *(const std::string::value_type **)v75, *(_QWORD *)(v75 + 8));
          }
          else
          {
            v77 = *(_OWORD *)v75;
            v159->__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 16);
            *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
          }
          v78 = v76 + 1;
        }
        v159 = v78;
        v79 = v163 + 24 * v47;
        v80 = v156;
        if ((unint64_t)v156 >= v157)
        {
          v82 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v155, v79);
        }
        else
        {
          if (*(char *)(v79 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v156, *(const std::string::value_type **)v79, *(_QWORD *)(v79 + 8));
          }
          else
          {
            v81 = *(_OWORD *)v79;
            v156->__r_.__value_.__r.__words[2] = *(_QWORD *)(v79 + 16);
            *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
          }
          v82 = v80 + 1;
        }
        v156 = v82;
        if ((v154 & 0x80u) == 0)
          v83 = v154;
        else
          v83 = *(_QWORD *)v153;
        std::string::basic_string[abi:ne180100]((uint64_t)&v151, v83 + 1);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v151;
        else
          v84 = (std::string *)v151.__r_.__value_.__r.__words[0];
        if (v83)
        {
          if ((v154 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v84, p_p, v83);
        }
        *(_WORD *)((char *)&v84->__r_.__value_.__l.__data_ + v83) = 95;
        v86 = v139 + 24 * v47;
        v87 = *(char *)(v86 + 23);
        if (v87 >= 0)
          v88 = (const std::string::value_type *)(v139 + 24 * v47);
        else
          v88 = *(const std::string::value_type **)v86;
        if (v87 >= 0)
          v89 = *(unsigned __int8 *)(v86 + 23);
        else
          v89 = *(_QWORD *)(v86 + 8);
        v90 = std::string::append(&v151, v88, v89);
        v91 = (void *)v90->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v170 = v90->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v170 + 7) = *(std::string::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7);
        v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if ((char)v154 < 0)
          operator delete(__p);
        __p = v91;
        *(_QWORD *)v153 = v170;
        *(_QWORD *)&v153[7] = *(_QWORD *)((char *)&v170 + 7);
        v154 = v92;
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v61 = 0;
      v62 = 0;
      while (2)
      {
        v151.__r_.__value_.__r.__words[0] = v61;
        v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v60 + 96, v61, &v151);
        v64 = (__int128 *)v63[3];
        v65 = (__int128 *)v63[4];
        while (2)
        {
          if (v64 != v65)
          {
            if (*((char *)v64 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
            }
            else
            {
              v66 = *v64;
              v151.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
              *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v66;
            }
            v67 = (unsigned __int8 **)(v163 + 24 * v47);
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
            else
              v68 = v151.__r_.__value_.__l.__size_;
            v69 = (unsigned __int8 *)*((unsigned __int8 *)v67 + 23);
            v70 = (char)v69;
            if ((char)v69 < 0)
              v69 = v67[1];
            if ((unsigned __int8 *)v68 != v69)
              goto LABEL_107;
            if (v70 >= 0)
              v71 = (unsigned __int8 *)(v163 + 24 * v47);
            else
              v71 = *v67;
            if ((*((_BYTE *)&v151.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v74 = (void *)v151.__r_.__value_.__r.__words[0];
              v62 |= memcmp(v151.__r_.__value_.__l.__data_, v71, v151.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v74);
            }
            else if (*((_BYTE *)&v151.__r_.__value_.__s + 23))
            {
              v72 = &v151;
              v73 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
              while (v72->__r_.__value_.__s.__data_[0] == *v71)
              {
                v72 = (std::string *)((char *)v72 + 1);
                ++v71;
                if (!--v73)
                {
                  v62 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v151.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v74 = (void *)v151.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v62 = 1;
            }
            v64 = (__int128 *)((char *)v64 + 24);
            continue;
          }
          break;
        }
        ++v61;
        v60 = *(_QWORD *)(a2 + 80);
        if (v61 < (uint64_t)(*(_QWORD *)(v60 + 40) - *(_QWORD *)(v60 + 32)) >> 4)
          continue;
        break;
      }
      if ((v62 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v93 = v46[1];
      if (v93)
      {
        do
        {
          v94 = (_QWORD **)v93;
          v93 = (_QWORD *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (_QWORD **)v46[2];
          v95 = *v94 == v46;
          v46 = v94;
        }
        while (!v95);
      }
      v46 = v94;
      if (v94 != v162)
        continue;
      break;
    }
LABEL_156:
    if (v156 != v155)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v151, "context_transfer");
      if ((v154 & 0x80u) == 0)
        v96 = v154;
      else
        v96 = *(_QWORD *)v153;
      std::string::basic_string[abi:ne180100]((uint64_t)&v170, v96 + 3);
      if (v171 >= 0)
        v97 = &v170;
      else
        v97 = (__int128 *)v170;
      if (v96)
      {
        if ((v154 & 0x80u) == 0)
          v98 = &__p;
        else
          v98 = __p;
        memmove(v97, v98, v96);
      }
      *(_DWORD *)((char *)v97 + v96) = 7894111;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v145, (uint64_t)v158, (uint64_t)v159, 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (char *)v158) >> 3));
      memset(v144, 0, sizeof(v144));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v144, (uint64_t)v155, (uint64_t)v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v151, (uint64_t)&v170, (uint64_t)__str, v145, v146, v144);
      v169 = (void **)v144;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v169);
      v169 = (void **)&v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v169);
      if (v171 < 0)
        operator delete((void *)v170);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v100 = v99;
        v151.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
        v151.__r_.__value_.__l.__size_ = v149;
        if (v149)
        {
          v101 = (unint64_t *)(v149 + 8);
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
        }
      }
      else
      {
        v100 = 0;
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v169) = 0;
      Espresso::create_context((int *)&v169, &v170);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v100 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v103 = v151.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v151.__r_.__value_.__r.__words[0] + 328), v132, (uint64_t)v133);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v103 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v103 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v103 + 312) + 8));
      v104 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v105 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
      if (v151.__r_.__value_.__l.__size_)
      {
        v108 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = (std::__shared_weak_count *)v149;
      if (v149)
      {
        v111 = (unint64_t *)(v149 + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
    if ((char)v154 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v155;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v133)
    {
      v113 = (unint64_t *)&v133->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    std::__tree<int>::destroy(v162[0]);
    v115 = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
    if (v161.__r_.__value_.__l.__size_)
    {
      v116 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = (uint64_t *)v42[1];
    if (v118)
    {
      do
      {
        v119 = v118;
        v118 = (uint64_t *)*v118;
      }
      while (v118);
    }
    else
    {
      do
      {
        v119 = (uint64_t *)v42[2];
        v95 = *v119 == (_QWORD)v42;
        v42 = v119;
      }
      while (!v95);
    }
    v42 = v119;
    if (v119 != (uint64_t *)v168)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  memset(&v161, 0, sizeof(v161));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v161, v163, (uint64_t)v164, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v164 - v163) >> 3));
  memset(__str, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v136, v137, 0xAAAAAAAAAAAAAAABLL * ((v137 - v136) >> 3));
  Espresso::sequential_builder::add<Espresso::bias_params>((uint64_t *)&v142, (uint64_t *)a2, v130, v128, v129, (uint64_t)v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_, (uint64_t *)__str);
  v158 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158 = &v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158 = (std::string *)&v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v168[0]);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if (!v142
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v161);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v121 = v143;
  *a1 = v120;
  a1[1] = v121;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
    v124 = v143;
    if (v143)
    {
      v125 = (unint64_t *)&v143->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
  }
}

void sub_1914B8D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  void *v59;
  uint64_t v60;

  if (*(char *)(v60 - 217) < 0)
  {
    operator delete(*(void **)(v60 - 240));
    if ((v58 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a13);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v58)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v59);
  goto LABEL_6;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,int &,unsigned long>(uint64_t a1, int a2, uint64_t a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("forward pass with %zu inputs: inner product at layer %d has %zu inputs, needs two or more for gradient computation.", a1, a2, a3);
}

void add_with_context_transfers_t<Espresso::pool_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  std::string *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string *v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 **v62;
  std::string::size_type v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  size_t v78;
  std::string *v79;
  const void *p_p;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  void *v86;
  unsigned __int8 v87;
  _QWORD *v88;
  _QWORD **v89;
  BOOL v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *lpsrc;
  std::string::size_type v134;
  _BYTE __str[32];
  std::string v136;
  void *__p;
  _BYTE v138[15];
  unsigned __int8 v139;
  std::string *v140;
  std::string *v141;
  unint64_t v142;
  char *v143;
  std::string *v144;
  unint64_t v145;
  std::string v146;
  _QWORD *v147[3];
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  _QWORD *v153[2];
  void **v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v151 = 0;
  v8 = *a6;
  v122 = a6[1];
  if (*a6 == v122)
  {
    v36 = *a6;
    goto LABEL_51;
  }
  v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(v11 + 32);
    if (*(_QWORD *)(v11 + 40) != v12)
    {
      v123 = v8;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v13) + 64);
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        v148 = v16;
        v149 = (std::__shared_weak_count *)v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v11 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v13;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        v21 = (__int128 *)v19[3];
        v20 = (__int128 *)v19[4];
        if (v21 != v20)
          break;
LABEL_39:
        v33 = v149;
        if (v149)
        {
          p_shared_owners = (unint64_t *)&v149->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v13;
        v11 = *(_QWORD *)(a2 + 80);
        v12 = *(_QWORD *)(v11 + 32);
        if (v13 >= (*(_QWORD *)(v11 + 40) - v12) >> 4)
        {
          v9 = v151;
          v8 = v123;
          goto LABEL_46;
        }
      }
      v22 = v148;
      v23 = v151;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v24 = *v21;
          *(_QWORD *)&__str[16] = *((_QWORD *)v21 + 2);
          *(_OWORD *)__str = v24;
        }
        v25 = __str[23];
        v26 = __str[23];
        if (__str[23] >= 0)
          v27 = __str[23];
        else
          v27 = *(_QWORD *)&__str[8];
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v146.__r_.__value_.__l.__size_;
        if (v27 == size)
        {
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v146;
          else
            v29 = (std::string *)v146.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v22 != *(_QWORD *)(a2 + 112))
            {
              v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v152, v22, &v148);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v151)+ 8) = 1;
              v26 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v29 = (std::string *)((char *)v29 + 1);
            if (!--v25)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v26 < 0)
        {
          v31 = *(void **)__str;
LABEL_37:
          operator delete(v31);
        }
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 == v20)
          goto LABEL_39;
      }
    }
LABEL_46:
    v151 = ++v9;
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v8 += 24;
  }
  while (v8 != v122);
  v36 = *a6;
  v8 = a6[1];
LABEL_51:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v148, v36, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v36) >> 3));
  v37 = v152;
  if (v152 == (uint64_t *)v153)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v146, v37 + 4);
    v38 = v146.__r_.__value_.__l.__size_;
    v120 = v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v121 = (std::__shared_weak_count *)v38;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v41 = (_QWORD **)v146.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v146.__r_.__value_.__r.__words[2] == v147)
      goto LABEL_156;
    while (2)
    {
      v42 = *((_DWORD *)v41 + 7);
      v43 = *a6 + 24 * v42;
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v44 = *(_OWORD *)v43;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)__str = v44;
      }
      if (__str[23] >= 0)
        v45 = __str[23];
      else
        v45 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v46 = __str;
      else
        v46 = *(char **)__str;
      if (v45 >= 4)
      {
        v47 = &v46[v45];
        v48 = v45;
        v49 = v46;
        do
        {
          v50 = (char *)memchr(v49, 99, v48 - 3);
          if (!v50)
            break;
          if (*(_DWORD *)v50 == 1601532003)
          {
            if (v50 != v47 && v50 == v46)
            {
              std::string::basic_string(&v136, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v155);
              goto LABEL_83;
            }
            break;
          }
          v49 = v50 + 1;
          v48 = v47 - v49;
        }
        while (v47 - v49 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v45 + 3);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v136;
      else
        v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (__str[23] >= 0)
          v52 = __str;
        else
          v52 = *(_BYTE **)__str;
        memmove(v51, v52, v45);
      }
      *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v45) = 7894111;
LABEL_83:
      v53 = v148 + 24 * v42;
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      v54 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)&v136.__r_.__value_.__l + 2);
      *(_OWORD *)v53 = v54;
      v55 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v55 + 40) == *(_QWORD *)(v55 + 32))
      {
LABEL_115:
        v70 = *a6 + 24 * v42;
        v71 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v143, v70);
        }
        else
        {
          if (*(char *)(v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v70;
            v144->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          v73 = v71 + 1;
        }
        v144 = v73;
        v74 = v148 + 24 * v42;
        v75 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v140, v74);
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v76 = *(_OWORD *)v74;
            v141->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          }
          v77 = v75 + 1;
        }
        v141 = v77;
        if ((v139 & 0x80u) == 0)
          v78 = v139;
        else
          v78 = *(_QWORD *)v138;
        std::string::basic_string[abi:ne180100]((uint64_t)&v136, v78 + 1);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v136;
        else
          v79 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if ((v139 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v79, p_p, v78);
        }
        *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 95;
        v81 = *a6 + 24 * v42;
        v82 = *(char *)(v81 + 23);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(*a6 + 24 * v42);
        else
          v83 = *(const std::string::value_type **)v81;
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v81 + 23);
        else
          v84 = *(_QWORD *)(v81 + 8);
        v85 = std::string::append(&v136, v83, v84);
        v86 = (void *)v85->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v155 = v85->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
        v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if ((char)v139 < 0)
          operator delete(__p);
        __p = v86;
        *(_QWORD *)v138 = v155;
        *(_QWORD *)&v138[7] = *(_QWORD *)((char *)&v155 + 7);
        v139 = v87;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v56 = 0;
      v57 = 0;
      while (2)
      {
        v136.__r_.__value_.__r.__words[0] = v56;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 96, v56, &v136);
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (2)
        {
          if (v60 != v59)
          {
            if (*((char *)v60 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              v136.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
            }
            v62 = (unsigned __int8 **)(v148 + 24 * v42);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v63 = v136.__r_.__value_.__l.__size_;
            v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
            v65 = (char)v64;
            if ((char)v64 < 0)
              v64 = v62[1];
            if ((unsigned __int8 *)v63 != v64)
              goto LABEL_107;
            if (v65 >= 0)
              v66 = (unsigned __int8 *)(v148 + 24 * v42);
            else
              v66 = *v62;
            if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v69 = (void *)v136.__r_.__value_.__r.__words[0];
              v57 |= memcmp(v136.__r_.__value_.__l.__data_, v66, v136.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v69);
            }
            else if (*((_BYTE *)&v136.__r_.__value_.__s + 23))
            {
              v67 = &v136;
              v68 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
              while (v67->__r_.__value_.__s.__data_[0] == *v66)
              {
                v67 = (std::string *)((char *)v67 + 1);
                ++v66;
                if (!--v68)
                {
                  v57 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v69 = (void *)v136.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v57 = 1;
            }
            v60 = (__int128 *)((char *)v60 + 24);
            continue;
          }
          break;
        }
        ++v56;
        v55 = *(_QWORD *)(a2 + 80);
        if (v56 < (uint64_t)(*(_QWORD *)(v55 + 40) - *(_QWORD *)(v55 + 32)) >> 4)
          continue;
        break;
      }
      if ((v57 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v88 = v41[1];
      if (v88)
      {
        do
        {
          v89 = (_QWORD **)v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD **)v41[2];
          v90 = *v89 == v41;
          v41 = v89;
        }
        while (!v90);
      }
      v41 = v89;
      if (v89 != v147)
        continue;
      break;
    }
LABEL_156:
    if (v141 != v140)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v136, "context_transfer");
      if ((v139 & 0x80u) == 0)
        v91 = v139;
      else
        v91 = *(_QWORD *)v138;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v91 + 3);
      if (v156 >= 0)
        v92 = &v155;
      else
        v92 = (__int128 *)v155;
      if (v91)
      {
        if ((v139 & 0x80u) == 0)
          v93 = &__p;
        else
          v93 = __p;
        memmove(v92, v93, v91);
      }
      *(_DWORD *)((char *)v92 + v91) = 7894111;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - v143) >> 3));
      memset(v129, 0, sizeof(v129));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v136, (uint64_t)&v155, (uint64_t)__str, v130, v131, v129);
      v154 = (void **)v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      v154 = (void **)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      if (v156 < 0)
        operator delete((void *)v155);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v95 = v94;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v136.__r_.__value_.__l.__size_ = v134;
        if (v134)
        {
          v96 = (unint64_t *)(v134 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
      }
      else
      {
        v95 = 0;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v154) = 0;
      Espresso::create_context((int *)&v154, &v155);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v95 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v98 = v136.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v136.__r_.__value_.__r.__words[0] + 328), v120, (uint64_t)v121);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v98 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v98 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 312) + 8));
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)v134;
      if (v134)
      {
        v106 = (unint64_t *)(v134 + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }
    if ((char)v139 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v143;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v121)
    {
      v108 = (unint64_t *)&v121->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    std::__tree<int>::destroy(v147[0]);
    v110 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
    if (v146.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = (uint64_t *)v37[1];
    if (v113)
    {
      do
      {
        v114 = v113;
        v113 = (uint64_t *)*v113;
      }
      while (v113);
    }
    else
    {
      do
      {
        v114 = (uint64_t *)v37[2];
        v90 = *v114 == (_QWORD)v37;
        v37 = v114;
      }
      while (!v90);
    }
    v37 = v114;
    if (v114 != (uint64_t *)v153)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v148, (uint64_t)v149, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - v148) >> 3));
  memset(v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v125, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::pool_params>(a1, (uint64_t *)a2, a3, a4, a5, v126, v127, v125);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v153[0]);
}

void sub_1914B9C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(_QWORD **)(v59 - 152));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return (uint64_t *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x48uLL);
    v10 = v9;
    v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v9[8] = 0;
    v9[7] = 0;
    v9[6] = (uint64_t)(v9 + 7);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v14 = (uint64_t *)**a1;
    v15 = v9;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

_QWORD *std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t ***v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[3] = 0;
  v6 = (uint64_t **)(a1 + 3);
  a1[2] = a1 + 3;
  v7 = (uint64_t ***)(a1 + 2);
  a1[4] = 0;
  v8 = (_QWORD *)a2[2];
  v9 = a2 + 3;
  if (v8 != a2 + 3)
  {
    do
    {
      v10 = *v6;
      v11 = a1 + 3;
      if (*v7 == v6)
        goto LABEL_11;
      v12 = *v6;
      v13 = a1 + 3;
      if (v10)
      {
        do
        {
          v11 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v13[2];
          v14 = *v11 == (_QWORD)v13;
          v13 = v11;
        }
        while (v14);
      }
      v15 = *((_DWORD *)v8 + 7);
      if (*((_DWORD *)v11 + 7) < v15)
      {
LABEL_11:
        if (v10)
          v16 = (uint64_t **)v11;
        else
          v16 = (uint64_t **)(a1 + 3);
        if (v10)
          v17 = (uint64_t **)(v11 + 1);
        else
          v17 = (uint64_t **)(a1 + 3);
      }
      else
      {
        v16 = (uint64_t **)(a1 + 3);
        v17 = (uint64_t **)(a1 + 3);
        if (v10)
        {
          v17 = (uint64_t **)(a1 + 3);
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v10;
              v21 = *((_DWORD *)v10 + 7);
              if (v15 >= v21)
                break;
              v10 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_18;
            }
            if (v21 >= v15)
              break;
            v17 = v16 + 1;
            v10 = v16[1];
            if (!v10)
              goto LABEL_18;
          }
        }
      }
      if (!*v17)
      {
LABEL_18:
        v18 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v18 + 28) = *(_QWORD *)((char *)v8 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1 + 2, (uint64_t)v16, v17, v18);
      }
      v19 = (_QWORD *)v8[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v8[2];
          v14 = *v20 == (_QWORD)v8;
          v8 = v20;
        }
        while (!v14);
      }
      v8 = v20;
    }
    while (v20 != v9);
  }
  return a1;
}

void sub_1914BA140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(*(_QWORD **)(v1 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(a1[1]);
    std::__tree<int>::destroy((_QWORD *)a1[7]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void add_with_context_transfers_t<Espresso::l2_norm_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  std::string *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string *v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 **v62;
  std::string::size_type v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  size_t v78;
  std::string *v79;
  const void *p_p;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  void *v86;
  unsigned __int8 v87;
  _QWORD *v88;
  _QWORD **v89;
  BOOL v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *lpsrc;
  std::string::size_type v134;
  _BYTE __str[32];
  std::string v136;
  void *__p;
  _BYTE v138[15];
  unsigned __int8 v139;
  std::string *v140;
  std::string *v141;
  unint64_t v142;
  char *v143;
  std::string *v144;
  unint64_t v145;
  std::string v146;
  _QWORD *v147[3];
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  _QWORD *v153[2];
  void **v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v151 = 0;
  v8 = *a6;
  v122 = a6[1];
  if (*a6 == v122)
  {
    v36 = *a6;
    goto LABEL_51;
  }
  v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(v11 + 32);
    if (*(_QWORD *)(v11 + 40) != v12)
    {
      v123 = v8;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v13) + 64);
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        v148 = v16;
        v149 = (std::__shared_weak_count *)v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v11 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v13;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        v21 = (__int128 *)v19[3];
        v20 = (__int128 *)v19[4];
        if (v21 != v20)
          break;
LABEL_39:
        v33 = v149;
        if (v149)
        {
          p_shared_owners = (unint64_t *)&v149->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v13;
        v11 = *(_QWORD *)(a2 + 80);
        v12 = *(_QWORD *)(v11 + 32);
        if (v13 >= (*(_QWORD *)(v11 + 40) - v12) >> 4)
        {
          v9 = v151;
          v8 = v123;
          goto LABEL_46;
        }
      }
      v22 = v148;
      v23 = v151;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v24 = *v21;
          *(_QWORD *)&__str[16] = *((_QWORD *)v21 + 2);
          *(_OWORD *)__str = v24;
        }
        v25 = __str[23];
        v26 = __str[23];
        if (__str[23] >= 0)
          v27 = __str[23];
        else
          v27 = *(_QWORD *)&__str[8];
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v146.__r_.__value_.__l.__size_;
        if (v27 == size)
        {
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v146;
          else
            v29 = (std::string *)v146.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v22 != *(_QWORD *)(a2 + 112))
            {
              v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v152, v22, &v148);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v151)+ 8) = 1;
              v26 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v29 = (std::string *)((char *)v29 + 1);
            if (!--v25)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v26 < 0)
        {
          v31 = *(void **)__str;
LABEL_37:
          operator delete(v31);
        }
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 == v20)
          goto LABEL_39;
      }
    }
LABEL_46:
    v151 = ++v9;
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v8 += 24;
  }
  while (v8 != v122);
  v36 = *a6;
  v8 = a6[1];
LABEL_51:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v148, v36, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v36) >> 3));
  v37 = v152;
  if (v152 == (uint64_t *)v153)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v146, v37 + 4);
    v38 = v146.__r_.__value_.__l.__size_;
    v120 = v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v121 = (std::__shared_weak_count *)v38;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v41 = (_QWORD **)v146.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v146.__r_.__value_.__r.__words[2] == v147)
      goto LABEL_156;
    while (2)
    {
      v42 = *((_DWORD *)v41 + 7);
      v43 = *a6 + 24 * v42;
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v44 = *(_OWORD *)v43;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)__str = v44;
      }
      if (__str[23] >= 0)
        v45 = __str[23];
      else
        v45 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v46 = __str;
      else
        v46 = *(char **)__str;
      if (v45 >= 4)
      {
        v47 = &v46[v45];
        v48 = v45;
        v49 = v46;
        do
        {
          v50 = (char *)memchr(v49, 99, v48 - 3);
          if (!v50)
            break;
          if (*(_DWORD *)v50 == 1601532003)
          {
            if (v50 != v47 && v50 == v46)
            {
              std::string::basic_string(&v136, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v155);
              goto LABEL_83;
            }
            break;
          }
          v49 = v50 + 1;
          v48 = v47 - v49;
        }
        while (v47 - v49 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v45 + 3);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v136;
      else
        v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (__str[23] >= 0)
          v52 = __str;
        else
          v52 = *(_BYTE **)__str;
        memmove(v51, v52, v45);
      }
      *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v45) = 7894111;
LABEL_83:
      v53 = v148 + 24 * v42;
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      v54 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)&v136.__r_.__value_.__l + 2);
      *(_OWORD *)v53 = v54;
      v55 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v55 + 40) == *(_QWORD *)(v55 + 32))
      {
LABEL_115:
        v70 = *a6 + 24 * v42;
        v71 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v143, v70);
        }
        else
        {
          if (*(char *)(v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v70;
            v144->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          v73 = v71 + 1;
        }
        v144 = v73;
        v74 = v148 + 24 * v42;
        v75 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v140, v74);
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v76 = *(_OWORD *)v74;
            v141->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          }
          v77 = v75 + 1;
        }
        v141 = v77;
        if ((v139 & 0x80u) == 0)
          v78 = v139;
        else
          v78 = *(_QWORD *)v138;
        std::string::basic_string[abi:ne180100]((uint64_t)&v136, v78 + 1);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v136;
        else
          v79 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if ((v139 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v79, p_p, v78);
        }
        *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 95;
        v81 = *a6 + 24 * v42;
        v82 = *(char *)(v81 + 23);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(*a6 + 24 * v42);
        else
          v83 = *(const std::string::value_type **)v81;
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v81 + 23);
        else
          v84 = *(_QWORD *)(v81 + 8);
        v85 = std::string::append(&v136, v83, v84);
        v86 = (void *)v85->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v155 = v85->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
        v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if ((char)v139 < 0)
          operator delete(__p);
        __p = v86;
        *(_QWORD *)v138 = v155;
        *(_QWORD *)&v138[7] = *(_QWORD *)((char *)&v155 + 7);
        v139 = v87;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v56 = 0;
      v57 = 0;
      while (2)
      {
        v136.__r_.__value_.__r.__words[0] = v56;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 96, v56, &v136);
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (2)
        {
          if (v60 != v59)
          {
            if (*((char *)v60 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              v136.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
            }
            v62 = (unsigned __int8 **)(v148 + 24 * v42);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v63 = v136.__r_.__value_.__l.__size_;
            v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
            v65 = (char)v64;
            if ((char)v64 < 0)
              v64 = v62[1];
            if ((unsigned __int8 *)v63 != v64)
              goto LABEL_107;
            if (v65 >= 0)
              v66 = (unsigned __int8 *)(v148 + 24 * v42);
            else
              v66 = *v62;
            if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v69 = (void *)v136.__r_.__value_.__r.__words[0];
              v57 |= memcmp(v136.__r_.__value_.__l.__data_, v66, v136.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v69);
            }
            else if (*((_BYTE *)&v136.__r_.__value_.__s + 23))
            {
              v67 = &v136;
              v68 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
              while (v67->__r_.__value_.__s.__data_[0] == *v66)
              {
                v67 = (std::string *)((char *)v67 + 1);
                ++v66;
                if (!--v68)
                {
                  v57 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v69 = (void *)v136.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v57 = 1;
            }
            v60 = (__int128 *)((char *)v60 + 24);
            continue;
          }
          break;
        }
        ++v56;
        v55 = *(_QWORD *)(a2 + 80);
        if (v56 < (uint64_t)(*(_QWORD *)(v55 + 40) - *(_QWORD *)(v55 + 32)) >> 4)
          continue;
        break;
      }
      if ((v57 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v88 = v41[1];
      if (v88)
      {
        do
        {
          v89 = (_QWORD **)v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD **)v41[2];
          v90 = *v89 == v41;
          v41 = v89;
        }
        while (!v90);
      }
      v41 = v89;
      if (v89 != v147)
        continue;
      break;
    }
LABEL_156:
    if (v141 != v140)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v136, "context_transfer");
      if ((v139 & 0x80u) == 0)
        v91 = v139;
      else
        v91 = *(_QWORD *)v138;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v91 + 3);
      if (v156 >= 0)
        v92 = &v155;
      else
        v92 = (__int128 *)v155;
      if (v91)
      {
        if ((v139 & 0x80u) == 0)
          v93 = &__p;
        else
          v93 = __p;
        memmove(v92, v93, v91);
      }
      *(_DWORD *)((char *)v92 + v91) = 7894111;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - v143) >> 3));
      memset(v129, 0, sizeof(v129));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v136, (uint64_t)&v155, (uint64_t)__str, v130, v131, v129);
      v154 = (void **)v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      v154 = (void **)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      if (v156 < 0)
        operator delete((void *)v155);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v95 = v94;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v136.__r_.__value_.__l.__size_ = v134;
        if (v134)
        {
          v96 = (unint64_t *)(v134 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
      }
      else
      {
        v95 = 0;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v154) = 0;
      Espresso::create_context((int *)&v154, &v155);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v95 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v98 = v136.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v136.__r_.__value_.__r.__words[0] + 328), v120, (uint64_t)v121);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v98 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v98 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 312) + 8));
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)v134;
      if (v134)
      {
        v106 = (unint64_t *)(v134 + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }
    if ((char)v139 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v143;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v121)
    {
      v108 = (unint64_t *)&v121->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    std::__tree<int>::destroy(v147[0]);
    v110 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
    if (v146.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = (uint64_t *)v37[1];
    if (v113)
    {
      do
      {
        v114 = v113;
        v113 = (uint64_t *)*v113;
      }
      while (v113);
    }
    else
    {
      do
      {
        v114 = (uint64_t *)v37[2];
        v90 = *v114 == (_QWORD)v37;
        v37 = v114;
      }
      while (!v90);
    }
    v37 = v114;
    if (v114 != (uint64_t *)v153)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v148, (uint64_t)v149, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - v148) >> 3));
  memset(v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v125, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(a1, (uint64_t *)a2, a3, a4, a5, v126, v127, v125);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v153[0]);
}

void sub_1914BAD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(_QWORD **)(v59 - 152));
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<int>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void Espresso::sequential_builder::add<Espresso::l2_norm_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914BB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::pool_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914BB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  std::string *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string *v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 **v62;
  std::string::size_type v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  size_t v78;
  std::string *v79;
  const void *p_p;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  void *v86;
  unsigned __int8 v87;
  _QWORD *v88;
  _QWORD **v89;
  BOOL v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *lpsrc;
  std::string::size_type v134;
  _BYTE __str[32];
  std::string v136;
  void *__p;
  _BYTE v138[15];
  unsigned __int8 v139;
  std::string *v140;
  std::string *v141;
  unint64_t v142;
  char *v143;
  std::string *v144;
  unint64_t v145;
  std::string v146;
  _QWORD *v147[3];
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  _QWORD *v153[2];
  void **v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v151 = 0;
  v8 = *a6;
  v122 = a6[1];
  if (*a6 == v122)
  {
    v36 = *a6;
    goto LABEL_51;
  }
  v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(v11 + 32);
    if (*(_QWORD *)(v11 + 40) != v12)
    {
      v123 = v8;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v13) + 64);
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        v148 = v16;
        v149 = (std::__shared_weak_count *)v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v11 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v13;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        v21 = (__int128 *)v19[3];
        v20 = (__int128 *)v19[4];
        if (v21 != v20)
          break;
LABEL_39:
        v33 = v149;
        if (v149)
        {
          p_shared_owners = (unint64_t *)&v149->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v13;
        v11 = *(_QWORD *)(a2 + 80);
        v12 = *(_QWORD *)(v11 + 32);
        if (v13 >= (*(_QWORD *)(v11 + 40) - v12) >> 4)
        {
          v9 = v151;
          v8 = v123;
          goto LABEL_46;
        }
      }
      v22 = v148;
      v23 = v151;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v24 = *v21;
          *(_QWORD *)&__str[16] = *((_QWORD *)v21 + 2);
          *(_OWORD *)__str = v24;
        }
        v25 = __str[23];
        v26 = __str[23];
        if (__str[23] >= 0)
          v27 = __str[23];
        else
          v27 = *(_QWORD *)&__str[8];
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v146.__r_.__value_.__l.__size_;
        if (v27 == size)
        {
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v146;
          else
            v29 = (std::string *)v146.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v22 != *(_QWORD *)(a2 + 112))
            {
              v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v152, v22, &v148);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v151)+ 8) = 1;
              v26 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v29 = (std::string *)((char *)v29 + 1);
            if (!--v25)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v26 < 0)
        {
          v31 = *(void **)__str;
LABEL_37:
          operator delete(v31);
        }
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 == v20)
          goto LABEL_39;
      }
    }
LABEL_46:
    v151 = ++v9;
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v8 += 24;
  }
  while (v8 != v122);
  v36 = *a6;
  v8 = a6[1];
LABEL_51:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v148, v36, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v36) >> 3));
  v37 = v152;
  if (v152 == (uint64_t *)v153)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v146, v37 + 4);
    v38 = v146.__r_.__value_.__l.__size_;
    v120 = v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v121 = (std::__shared_weak_count *)v38;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v41 = (_QWORD **)v146.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v146.__r_.__value_.__r.__words[2] == v147)
      goto LABEL_156;
    while (2)
    {
      v42 = *((_DWORD *)v41 + 7);
      v43 = *a6 + 24 * v42;
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v44 = *(_OWORD *)v43;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)__str = v44;
      }
      if (__str[23] >= 0)
        v45 = __str[23];
      else
        v45 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v46 = __str;
      else
        v46 = *(char **)__str;
      if (v45 >= 4)
      {
        v47 = &v46[v45];
        v48 = v45;
        v49 = v46;
        do
        {
          v50 = (char *)memchr(v49, 99, v48 - 3);
          if (!v50)
            break;
          if (*(_DWORD *)v50 == 1601532003)
          {
            if (v50 != v47 && v50 == v46)
            {
              std::string::basic_string(&v136, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v155);
              goto LABEL_83;
            }
            break;
          }
          v49 = v50 + 1;
          v48 = v47 - v49;
        }
        while (v47 - v49 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v45 + 3);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v136;
      else
        v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (__str[23] >= 0)
          v52 = __str;
        else
          v52 = *(_BYTE **)__str;
        memmove(v51, v52, v45);
      }
      *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v45) = 7894111;
LABEL_83:
      v53 = v148 + 24 * v42;
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      v54 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)&v136.__r_.__value_.__l + 2);
      *(_OWORD *)v53 = v54;
      v55 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v55 + 40) == *(_QWORD *)(v55 + 32))
      {
LABEL_115:
        v70 = *a6 + 24 * v42;
        v71 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v143, v70);
        }
        else
        {
          if (*(char *)(v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v70;
            v144->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          v73 = v71 + 1;
        }
        v144 = v73;
        v74 = v148 + 24 * v42;
        v75 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v140, v74);
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v76 = *(_OWORD *)v74;
            v141->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          }
          v77 = v75 + 1;
        }
        v141 = v77;
        if ((v139 & 0x80u) == 0)
          v78 = v139;
        else
          v78 = *(_QWORD *)v138;
        std::string::basic_string[abi:ne180100]((uint64_t)&v136, v78 + 1);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v136;
        else
          v79 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if ((v139 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v79, p_p, v78);
        }
        *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 95;
        v81 = *a6 + 24 * v42;
        v82 = *(char *)(v81 + 23);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(*a6 + 24 * v42);
        else
          v83 = *(const std::string::value_type **)v81;
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v81 + 23);
        else
          v84 = *(_QWORD *)(v81 + 8);
        v85 = std::string::append(&v136, v83, v84);
        v86 = (void *)v85->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v155 = v85->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
        v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if ((char)v139 < 0)
          operator delete(__p);
        __p = v86;
        *(_QWORD *)v138 = v155;
        *(_QWORD *)&v138[7] = *(_QWORD *)((char *)&v155 + 7);
        v139 = v87;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v56 = 0;
      v57 = 0;
      while (2)
      {
        v136.__r_.__value_.__r.__words[0] = v56;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 96, v56, &v136);
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (2)
        {
          if (v60 != v59)
          {
            if (*((char *)v60 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              v136.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
            }
            v62 = (unsigned __int8 **)(v148 + 24 * v42);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v63 = v136.__r_.__value_.__l.__size_;
            v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
            v65 = (char)v64;
            if ((char)v64 < 0)
              v64 = v62[1];
            if ((unsigned __int8 *)v63 != v64)
              goto LABEL_107;
            if (v65 >= 0)
              v66 = (unsigned __int8 *)(v148 + 24 * v42);
            else
              v66 = *v62;
            if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v69 = (void *)v136.__r_.__value_.__r.__words[0];
              v57 |= memcmp(v136.__r_.__value_.__l.__data_, v66, v136.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v69);
            }
            else if (*((_BYTE *)&v136.__r_.__value_.__s + 23))
            {
              v67 = &v136;
              v68 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
              while (v67->__r_.__value_.__s.__data_[0] == *v66)
              {
                v67 = (std::string *)((char *)v67 + 1);
                ++v66;
                if (!--v68)
                {
                  v57 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v69 = (void *)v136.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v57 = 1;
            }
            v60 = (__int128 *)((char *)v60 + 24);
            continue;
          }
          break;
        }
        ++v56;
        v55 = *(_QWORD *)(a2 + 80);
        if (v56 < (uint64_t)(*(_QWORD *)(v55 + 40) - *(_QWORD *)(v55 + 32)) >> 4)
          continue;
        break;
      }
      if ((v57 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v88 = v41[1];
      if (v88)
      {
        do
        {
          v89 = (_QWORD **)v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD **)v41[2];
          v90 = *v89 == v41;
          v41 = v89;
        }
        while (!v90);
      }
      v41 = v89;
      if (v89 != v147)
        continue;
      break;
    }
LABEL_156:
    if (v141 != v140)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v136, "context_transfer");
      if ((v139 & 0x80u) == 0)
        v91 = v139;
      else
        v91 = *(_QWORD *)v138;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v91 + 3);
      if (v156 >= 0)
        v92 = &v155;
      else
        v92 = (__int128 *)v155;
      if (v91)
      {
        if ((v139 & 0x80u) == 0)
          v93 = &__p;
        else
          v93 = __p;
        memmove(v92, v93, v91);
      }
      *(_DWORD *)((char *)v92 + v91) = 7894111;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - v143) >> 3));
      memset(v129, 0, sizeof(v129));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v136, (uint64_t)&v155, (uint64_t)__str, v130, v131, v129);
      v154 = (void **)v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      v154 = (void **)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      if (v156 < 0)
        operator delete((void *)v155);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v95 = v94;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v136.__r_.__value_.__l.__size_ = v134;
        if (v134)
        {
          v96 = (unint64_t *)(v134 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
      }
      else
      {
        v95 = 0;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v154) = 0;
      Espresso::create_context((int *)&v154, &v155);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v95 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v98 = v136.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v136.__r_.__value_.__r.__words[0] + 328), v120, (uint64_t)v121);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v98 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v98 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 312) + 8));
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)v134;
      if (v134)
      {
        v106 = (unint64_t *)(v134 + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }
    if ((char)v139 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v143;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v121)
    {
      v108 = (unint64_t *)&v121->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    std::__tree<int>::destroy(v147[0]);
    v110 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
    if (v146.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = (uint64_t *)v37[1];
    if (v113)
    {
      do
      {
        v114 = v113;
        v113 = (uint64_t *)*v113;
      }
      while (v113);
    }
    else
    {
      do
      {
        v114 = (uint64_t *)v37[2];
        v90 = *v114 == (_QWORD)v37;
        v37 = v114;
      }
      while (!v90);
    }
    v37 = v114;
    if (v114 != (uint64_t *)v153)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v148, (uint64_t)v149, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - v148) >> 3));
  memset(v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v125, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(a1, (uint64_t *)a2, a3, a4, a5, v126, v127, v125);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v153[0]);
}

void sub_1914BC130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(_QWORD **)(v59 - 152));
  _Unwind_Resume(a1);
}

void add_with_context_transfers_t<Espresso::convolution_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::string::size_type size;
  std::string *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string *v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 **v62;
  std::string::size_type v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  std::string *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  size_t v78;
  std::string *v79;
  const void *p_p;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  void *v86;
  unsigned __int8 v87;
  _QWORD *v88;
  _QWORD **v89;
  BOOL v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *lpsrc;
  std::string::size_type v134;
  _BYTE __str[32];
  std::string v136;
  void *__p;
  _BYTE v138[15];
  unsigned __int8 v139;
  std::string *v140;
  std::string *v141;
  unint64_t v142;
  char *v143;
  std::string *v144;
  unint64_t v145;
  std::string v146;
  _QWORD *v147[3];
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  _QWORD *v153[2];
  void **v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v151 = 0;
  v8 = *a6;
  v122 = a6[1];
  if (*a6 == v122)
  {
    v36 = *a6;
    goto LABEL_51;
  }
  v9 = 0;
  do
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(v11 + 32);
    if (*(_QWORD *)(v11 + 40) != v12)
    {
      v123 = v8;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v13) + 64);
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        v148 = v16;
        v149 = (std::__shared_weak_count *)v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v11 = *(_QWORD *)(a2 + 80);
        }
        *(_QWORD *)__str = v13;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 96, v13, __str);
        v21 = (__int128 *)v19[3];
        v20 = (__int128 *)v19[4];
        if (v21 != v20)
          break;
LABEL_39:
        v33 = v149;
        if (v149)
        {
          p_shared_owners = (unint64_t *)&v149->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v13;
        v11 = *(_QWORD *)(a2 + 80);
        v12 = *(_QWORD *)(v11 + 32);
        if (v13 >= (*(_QWORD *)(v11 + 40) - v12) >> 4)
        {
          v9 = v151;
          v8 = v123;
          goto LABEL_46;
        }
      }
      v22 = v148;
      v23 = v151;
      while (1)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v24 = *v21;
          *(_QWORD *)&__str[16] = *((_QWORD *)v21 + 2);
          *(_OWORD *)__str = v24;
        }
        v25 = __str[23];
        v26 = __str[23];
        if (__str[23] >= 0)
          v27 = __str[23];
        else
          v27 = *(_QWORD *)&__str[8];
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v146.__r_.__value_.__l.__size_;
        if (v27 == size)
        {
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v146;
          else
            v29 = (std::string *)v146.__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80000000) != 0)
          {
            v31 = *(void **)__str;
            if (memcmp(*(const void **)__str, v29, *(size_t *)&__str[8]))
              goto LABEL_37;
LABEL_33:
            if (v22 != *(_QWORD *)(a2 + 112))
            {
              v32 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>(&v152, v22, &v148);
              *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v32 + 6, v23, &v151)+ 8) = 1;
              v26 = __str[23];
            }
            goto LABEL_35;
          }
          if (!__str[23])
            goto LABEL_33;
          v30 = __str;
          while (*v30 == v29->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v29 = (std::string *)((char *)v29 + 1);
            if (!--v25)
              goto LABEL_33;
          }
        }
LABEL_35:
        if (v26 < 0)
        {
          v31 = *(void **)__str;
LABEL_37:
          operator delete(v31);
        }
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 == v20)
          goto LABEL_39;
      }
    }
LABEL_46:
    v151 = ++v9;
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v8 += 24;
  }
  while (v8 != v122);
  v36 = *a6;
  v8 = a6[1];
LABEL_51:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v148, v36, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v36) >> 3));
  v37 = v152;
  if (v152 == (uint64_t *)v153)
    goto LABEL_212;
  while (2)
  {
    std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](&v146, v37 + 4);
    v38 = v146.__r_.__value_.__l.__size_;
    v120 = v146.__r_.__value_.__r.__words[0];
    if (v146.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v121 = (std::__shared_weak_count *)v38;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v41 = (_QWORD **)v146.__r_.__value_.__r.__words[2];
    if ((_QWORD **)v146.__r_.__value_.__r.__words[2] == v147)
      goto LABEL_156;
    while (2)
    {
      v42 = *((_DWORD *)v41 + 7);
      v43 = *a6 + 24 * v42;
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v44 = *(_OWORD *)v43;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v43 + 16);
        *(_OWORD *)__str = v44;
      }
      if (__str[23] >= 0)
        v45 = __str[23];
      else
        v45 = *(_QWORD *)&__str[8];
      if (__str[23] >= 0)
        v46 = __str;
      else
        v46 = *(char **)__str;
      if (v45 >= 4)
      {
        v47 = &v46[v45];
        v48 = v45;
        v49 = v46;
        do
        {
          v50 = (char *)memchr(v49, 99, v48 - 3);
          if (!v50)
            break;
          if (*(_DWORD *)v50 == 1601532003)
          {
            if (v50 != v47 && v50 == v46)
            {
              std::string::basic_string(&v136, (const std::string *)__str, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v155);
              goto LABEL_83;
            }
            break;
          }
          v49 = v50 + 1;
          v48 = v47 - v49;
        }
        while (v47 - v49 >= 4);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v45 + 3);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v136;
      else
        v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (__str[23] >= 0)
          v52 = __str;
        else
          v52 = *(_BYTE **)__str;
        memmove(v51, v52, v45);
      }
      *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v45) = 7894111;
LABEL_83:
      v53 = v148 + 24 * v42;
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      v54 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)&v136.__r_.__value_.__l + 2);
      *(_OWORD *)v53 = v54;
      v55 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(v55 + 40) == *(_QWORD *)(v55 + 32))
      {
LABEL_115:
        v70 = *a6 + 24 * v42;
        v71 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v143, v70);
        }
        else
        {
          if (*(char *)(v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
          }
          else
          {
            v72 = *(_OWORD *)v70;
            v144->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          v73 = v71 + 1;
        }
        v144 = v73;
        v74 = v148 + 24 * v42;
        v75 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v140, v74);
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v76 = *(_OWORD *)v74;
            v141->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          }
          v77 = v75 + 1;
        }
        v141 = v77;
        if ((v139 & 0x80u) == 0)
          v78 = v139;
        else
          v78 = *(_QWORD *)v138;
        std::string::basic_string[abi:ne180100]((uint64_t)&v136, v78 + 1);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v136;
        else
          v79 = (std::string *)v136.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if ((v139 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v79, p_p, v78);
        }
        *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 95;
        v81 = *a6 + 24 * v42;
        v82 = *(char *)(v81 + 23);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(*a6 + 24 * v42);
        else
          v83 = *(const std::string::value_type **)v81;
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v81 + 23);
        else
          v84 = *(_QWORD *)(v81 + 8);
        v85 = std::string::append(&v136, v83, v84);
        v86 = (void *)v85->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v155 = v85->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
        v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if ((char)v139 < 0)
          operator delete(__p);
        __p = v86;
        *(_QWORD *)v138 = v155;
        *(_QWORD *)&v138[7] = *(_QWORD *)((char *)&v155 + 7);
        v139 = v87;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      v56 = 0;
      v57 = 0;
      while (2)
      {
        v136.__r_.__value_.__r.__words[0] = v56;
        v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55 + 96, v56, &v136);
        v60 = (__int128 *)v58[3];
        v59 = (__int128 *)v58[4];
        while (2)
        {
          if (v60 != v59)
          {
            if (*((char *)v60 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              v136.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
            }
            v62 = (unsigned __int8 **)(v148 + 24 * v42);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v63 = v136.__r_.__value_.__l.__size_;
            v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
            v65 = (char)v64;
            if ((char)v64 < 0)
              v64 = v62[1];
            if ((unsigned __int8 *)v63 != v64)
              goto LABEL_107;
            if (v65 >= 0)
              v66 = (unsigned __int8 *)(v148 + 24 * v42);
            else
              v66 = *v62;
            if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v69 = (void *)v136.__r_.__value_.__r.__words[0];
              v57 |= memcmp(v136.__r_.__value_.__l.__data_, v66, v136.__r_.__value_.__l.__size_) == 0;
LABEL_110:
              operator delete(v69);
            }
            else if (*((_BYTE *)&v136.__r_.__value_.__s + 23))
            {
              v67 = &v136;
              v68 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
              while (v67->__r_.__value_.__s.__data_[0] == *v66)
              {
                v67 = (std::string *)((char *)v67 + 1);
                ++v66;
                if (!--v68)
                {
                  v57 = 1;
                  break;
                }
              }
LABEL_107:
              if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v69 = (void *)v136.__r_.__value_.__r.__words[0];
                goto LABEL_110;
              }
            }
            else
            {
              v57 = 1;
            }
            v60 = (__int128 *)((char *)v60 + 24);
            continue;
          }
          break;
        }
        ++v56;
        v55 = *(_QWORD *)(a2 + 80);
        if (v56 < (uint64_t)(*(_QWORD *)(v55 + 40) - *(_QWORD *)(v55 + 32)) >> 4)
          continue;
        break;
      }
      if ((v57 & 1) == 0)
        goto LABEL_115;
LABEL_148:
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v88 = v41[1];
      if (v88)
      {
        do
        {
          v89 = (_QWORD **)v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD **)v41[2];
          v90 = *v89 == v41;
          v41 = v89;
        }
        while (!v90);
      }
      v41 = v89;
      if (v89 != v147)
        continue;
      break;
    }
LABEL_156:
    if (v141 != v140)
    {
      memset(__str, 0, sizeof(__str));
      std::string::basic_string[abi:ne180100]<0>(&v136, "context_transfer");
      if ((v139 & 0x80u) == 0)
        v91 = v139;
      else
        v91 = *(_QWORD *)v138;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v91 + 3);
      if (v156 >= 0)
        v92 = &v155;
      else
        v92 = (__int128 *)v155;
      if (v91)
      {
        if ((v139 & 0x80u) == 0)
          v93 = &__p;
        else
          v93 = __p;
        memmove(v92, v93, v91);
      }
      *(_DWORD *)((char *)v92 + v91) = 7894111;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - v143) >> 3));
      memset(v129, 0, sizeof(v129));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&lpsrc, (uint64_t *)a2, (uint64_t)&v136, (uint64_t)&v155, (uint64_t)__str, v130, v131, v129);
      v154 = (void **)v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      v154 = (void **)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      if (v156 < 0)
        operator delete((void *)v155);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (lpsrc
      {
        v95 = v94;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v136.__r_.__value_.__l.__size_ = v134;
        if (v134)
        {
          v96 = (unint64_t *)(v134 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
      }
      else
      {
        v95 = 0;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0uLL;
      }
      LODWORD(v154) = 0;
      Espresso::create_context((int *)&v154, &v155);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v95 + 39, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      v98 = v136.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v136.__r_.__value_.__r.__words[0] + 328), v120, (uint64_t)v121);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v98 + 8), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) - 16) + 8) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v98 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 312) + 8));
      v99 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v103 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)v134;
      if (v134)
      {
        v106 = (unint64_t *)(v134 + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }
    if ((char)v139 < 0)
      operator delete(__p);
    *(_QWORD *)__str = &v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    *(_QWORD *)__str = &v143;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v121)
    {
      v108 = (unint64_t *)&v121->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    std::__tree<int>::destroy(v147[0]);
    v110 = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
    if (v146.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v113 = (uint64_t *)v37[1];
    if (v113)
    {
      do
      {
        v114 = v113;
        v113 = (uint64_t *)*v113;
      }
      while (v113);
    }
    else
    {
      do
      {
        v114 = (uint64_t *)v37[2];
        v90 = *v114 == (_QWORD)v37;
        v37 = v114;
      }
      while (!v90);
    }
    v37 = v114;
    if (v114 != (uint64_t *)v153)
      continue;
    break;
  }
LABEL_212:
  *(_BYTE *)(a2 + 184) = 1;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, v148, (uint64_t)v149, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v149 - v148) >> 3));
  memset(v125, 0, sizeof(v125));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v125, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>(a1, (uint64_t *)a2, a3, a4, a5, v126, v127, v125);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(v153[0]);
}

void sub_1914BCF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v59 - 240) = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  *(_QWORD *)(v59 - 240) = v59 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 240));
  std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy(*(_QWORD **)(v59 - 152));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::bias_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914BD3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::batchnorm_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914BD654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::build_gradient(uint64_t *a1@<X0>, __int128 *a2@<X1>, std::string::size_type *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _OWORD v34[2];
  int v35;
  void *v36[2];
  char v37;
  void *__p;
  char v39;
  std::string __str;
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD *v47[7];
  char v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  __int128 *v53;

  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v43 = *a1;
  v44 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v8 = *a1;
  }
  v12 = *(std::__shared_weak_count **)(v8 + 24);
  v42[0] = *(_QWORD *)(v8 + 16);
  v42[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v8 = *a1;
  }
  v15 = *(_DWORD *)(**(_QWORD **)(v8 + 32) + 12);
  v41[0] = 0;
  v41[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v45, &v43, v42, v15, v41);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = v44;
  if (v44)
  {
    v19 = (unint64_t *)&v44->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "gradient_start");
  std::string::basic_string[abi:ne180100]<0>(v36, "gradient_start");
  Espresso::sequential_builder::constant_like((Espresso::sequential_builder *)&v45, a2, (uint64_t)v36, (uint64_t)&__p, 1.0);
  if (v39 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(v36[0]);
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  v53 = a2;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v34, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v53);
  std::string::operator=((std::string *)(v21 + 5), &__str);
  Espresso::gradient_builder::build_gradient(a1, (uint64_t)v34, a3, &v45, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v34);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v52);
  v22 = v51;
  if (v51)
  {
    v23 = (unint64_t *)&v51->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v50;
  if (v50)
  {
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v49;
  if (v49)
  {
    v29 = (unint64_t *)&v49->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v48 < 0)
    operator delete(v47[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v47, v47[1]);
  v31 = v46;
  if (v46)
  {
    v32 = (unint64_t *)&v46->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1914BD9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36)
{
  if (a20 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  Espresso::sequential_builder::~sequential_builder(&a36);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::build_gradient(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t *i;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t **v15;
  Espresso::net *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *j;
  uint64_t **v36;
  std::string::size_type v37;
  std::string::size_type v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t *v41;
  void **v42;
  Espresso::net *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  Espresso::net *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 *v76;
  __int128 *v77;
  uint64_t **v78;
  __int128 *v79;
  std::string *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  char v114[16];
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  char v118[8];
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  void (**v123)(Espresso::net_pass *__hidden);
  uint64_t v124;
  std::__shared_weak_count *v125;
  Espresso::net *v126;
  std::__shared_weak_count *v127;
  _QWORD *v128;
  std::__shared_weak_count *v129;
  __int128 *v130;
  void *lpsrc;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  void (**v135)(Espresso::net_pass *__hidden);
  uint64_t v136;
  std::__shared_weak_count *v137;
  char *v138;
  std::string *v139;
  unint64_t v140;
  char **v141;
  char *v142[2];
  __int128 *v143;
  std::string *p_str;
  std::string __str;
  __int128 v146[2];
  int v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  v9 = a3[1];
  while (v10 != v9)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*a1 + 136), (unsigned __int8 *)v10))
    {
      if (*(char *)(v10 + 23) < 0)
        v10 = *(_QWORD *)v10;
      __str.__r_.__value_.__r.__words[0] = v10;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("input name %s doesn't exist in the network", &__str);
    }
    v10 += 24;
  }
  if (*(_QWORD *)(*a1 + 32) == *(_QWORD *)(*a1 + 40))
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    v142[0] = 0;
    v142[1] = 0;
    v141 = v142;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    {
      v12 = v139;
      if ((unint64_t)v139 >= v140)
      {
        v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v138, (uint64_t)(i + 2));
      }
      else
      {
        if (*((char *)i + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v139, (const std::string::value_type *)i[2], i[3]);
        }
        else
        {
          v13 = *((_OWORD *)i + 1);
          v139->__r_.__value_.__r.__words[2] = i[4];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        v14 = v12 + 1;
      }
      v139 = v14;
      if (*((char *)i + 63) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)i[5], i[6]);
      else
        __str = *(std::string *)(i + 5);
      v130 = (__int128 *)(i + 2);
      v15 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v141, (const void **)i + 2, (uint64_t)&std::piecewise_construct, &v130);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v15 + 7), &__str, v146, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v16 = (Espresso::net *)a4[10];
    v136 = 0;
    v137 = 0;
    v135 = (void (**)(Espresso::net_pass *__hidden))&off_1E2D9A060;
    v17 = (std::__shared_weak_count *)operator new(0x38uLL);
    v17->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE768;
    v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D9F4E8;
    v19 = *((_BYTE *)a1 + 16);
    v17[1].__shared_owners_ = a2;
    v17[1].__shared_weak_owners_ = (uint64_t)a3;
    LOBYTE(v17[2].__vftable) = v19;
    v133 = v17 + 1;
    v134 = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v136, (uint64_t)&v17[1], (uint64_t)v17);
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    Espresso::pass_prepare_gradient_builder::run_on_network((const void **)&v135, v16, (unint64_t)&v130);
    if (!lpsrc
    {
      v128 = 0;
      v129 = 0;
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("pass_prepare_gradient_builder failed");
    }
    v23 = v22;
    v24 = v132;
    v128 = v22;
    v129 = v132;
    if (v132)
    {
      v25 = (unint64_t *)&v132->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v123 = *(void (***)(Espresso::net_pass *__hidden))(*v22 - 8);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    v27 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>((uint64_t)v16 + 1120, (uint64_t)&v123, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (std::__shared_weak_count *)v27[4];
    v27[3] = v23;
    v27[4] = v24;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v34 = *((_QWORD *)v16 + 4);
    v33 = *((_QWORD *)v16 + 5);
    for (j = *(uint64_t **)(a2 + 16); j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 63) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)j[5], j[6]);
      else
        __str = *(std::string *)(j + 5);
      v123 = (void (**)(Espresso::net_pass *__hidden))(j + 2);
      v36 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v141, (const void **)j + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v36 + 7), &__str, v146, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    Espresso::gradient_builder::build_gradient_segment((uint64_t)a1, v128[31], v128[32], (uint64_t **)&v141, a4);
    v38 = *a3;
    v37 = a3[1];
    if (*a3 != v37)
    {
      do
      {
        if (a1 + 6 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(a1 + 5), (_QWORD *)v38))
        {
          if (v142 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v141, (_QWORD *)v38)|| (__str.__r_.__value_.__r.__words[0] = v38, v39 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v141, (const void **)v38, (uint64_t)&std::piecewise_construct, (__int128 **)&__str), v39[8] == v39[7]))
          {
            if (*(char *)(v38 + 23) < 0)
              v38 = *(_QWORD *)v38;
            __str.__r_.__value_.__r.__words[0] = v38;
            Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Gradient for variable %s is not generated", &__str);
          }
          v123 = (void (**)(Espresso::net_pass *__hidden))v38;
          v40 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v141, (const void **)v38, (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
          sum_grad_contribs(&__str, a4, v40 + 7, (const void **)v38);
          v123 = (void (**)(Espresso::net_pass *__hidden))v38;
          v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 5, (_QWORD *)v38, (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
          v42 = (void **)(v41 + 7);
          if (*((char *)v41 + 79) < 0)
            operator delete(*v42);
          *(std::string *)v42 = __str;
        }
        v38 += 24;
      }
      while (v38 != v37);
    }
    Espresso::sequential_builder::build_from_shapes((uint64_t)a4, *a4, 1, &v126);
    v43 = v126;
    Espresso::net::_allocate_temporary_buffer(v126);
    Espresso::net::_tag_inputs_and_outputs(v43);
    Espresso::net::_assign_streams(v43);
    v124 = 0;
    v125 = 0;
    v123 = (void (**)(Espresso::net_pass *__hidden))&off_1E2D83DE0;
    v44 = (std::__shared_weak_count *)operator new(0x28uLL);
    v44->__shared_owners_ = 0;
    v45 = (unint64_t *)&v44->__shared_owners_;
    v44->__shared_weak_owners_ = 0;
    v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D92F18;
    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD658;
    v112 = (v33 - v34) >> 4;
    v44[1].__shared_owners_ = v112;
    v121 = v44 + 1;
    v122 = v44;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v124, (uint64_t)&v44[1], (uint64_t)v44);
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    Espresso::pass_rename_phi_io::run_on_network((Espresso::pass_rename_phi_io *)&v123, v126, (uint64_t)v118);
    if (v119)
    {
      if (v48)
      {
        v49 = v120;
        v116 = v48;
        v117 = v120;
        if (v120)
        {
          v50 = (unint64_t *)&v120->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        v53 = (__int128 *)*a3;
        v52 = (__int128 *)a3[1];
        if ((__int128 *)*a3 != v52)
        {
          v54 = &v48->__shared_owners_;
          do
          {
            p_str = (std::string *)v53;
            v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 5, v53, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
            if (*((char *)v55 + 79) < 0)
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v55[7], v55[8]);
            else
              __str = *(std::string *)(v55 + 7);
            if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v54, (uint64_t)&__str))
            {
              p_str = &__str;
              v56 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v54, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
              p_str = (std::string *)v53;
              v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 5, v53, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
              std::string::operator=((std::string *)(v57 + 7), (const std::string *)(v56 + 5));
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v53 = (__int128 *)((char *)v53 + 24);
          }
          while (v53 != v52);
        }
        if (v49)
        {
          v58 = (unint64_t *)&v49->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D73298;
    memset(v146, 0, sizeof(v146));
    v147 = 1065353216;
    v61 = *((_QWORD *)v126 + 4);
    v60 = *((_QWORD *)v126 + 5);
    v62 = v128;
    v63 = (std::__shared_weak_count *)operator new(0x58uLL);
    v63->__shared_owners_ = 0;
    v64 = (unint64_t *)&v63->__shared_owners_;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCFC8;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D90428;
    std::unordered_set<int>::unordered_set((uint64_t)&v63[1].__shared_owners_, (uint64_t)(v62 + 1));
    v63[3].__vftable = (std::__shared_weak_count_vtbl *)v112;
    v63[3].__shared_owners_ = (v60 - v61) >> 4;
    v116 = v63 + 1;
    v117 = v63;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&__str.__r_.__value_.__l.__size_, (uint64_t)&v63[1], (uint64_t)v63);
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    Espresso::pass_stack_blobs::run_on_network((Espresso::pass_stack_blobs *)&__str, v126, (uint64_t)v114);
    v67 = v115;
    if (v115)
    {
      v68 = (unint64_t *)&v115->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v126;
    v71 = v127;
    if (v127)
    {
      v72 = (unint64_t *)&v127->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    Espresso::shape_network_recursive(v70, (Espresso::net *)((char *)v70 + 184), 0, 1);
    if (v71)
    {
      v74 = (unint64_t *)&v71->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, (uint64_t)v126, (uint64_t)v127);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v76 = (__int128 *)*a3;
    v77 = (__int128 *)a3[1];
    if ((__int128 *)*a3 != v77)
    {
      v78 = (uint64_t **)(a1 + 5);
      do
      {
        v143 = v76;
        v79 = (__int128 *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, v76, (uint64_t)&std::piecewise_construct, &v143)+ 7);
        v80 = *(std::string **)(a5 + 8);
        if ((unint64_t)v80 >= *(_QWORD *)(a5 + 16))
        {
          v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)v79);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v79);
          v81 = v80 + 1;
        }
        *(_QWORD *)(a5 + 8) = v81;
        v76 = (__int128 *)((char *)v76 + 24);
      }
      while (v76 != v77);
    }
    v82 = v117;
    if (v117)
    {
      v83 = (unint64_t *)&v117->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D73298;
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v146);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E2DA6C90;
    v85 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      v86 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v120;
    if (v120)
    {
      v89 = (unint64_t *)&v120->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v122;
    if (v122)
    {
      v92 = (unint64_t *)&v122->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v123 = off_1E2DA6C90;
    v94 = v125;
    if (v125)
    {
      v95 = (unint64_t *)&v125->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = v127;
    if (v127)
    {
      v98 = (unint64_t *)&v127->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = v129;
    if (v129)
    {
      v101 = (unint64_t *)&v129->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = v132;
    if (v132)
    {
      v104 = (unint64_t *)&v132->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = v134;
    if (v134)
    {
      v107 = (unint64_t *)&v134->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v135 = off_1E2DA6C90;
    v109 = v137;
    if (v137)
    {
      v110 = (unint64_t *)&v137->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v141, v142[0]);
  }
}

void sub_1914BE618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  *(_QWORD *)(v42 - 176) = v41;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v40);
  Espresso::net_pass::~net_pass((Espresso::net_pass *)(v42 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  Espresso::net_pass::~net_pass((Espresso::net_pass *)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  Espresso::net_pass::~net_pass((Espresso::net_pass *)&a37);
  a37 = (void **)&a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a37);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v42 - 224, *(char **)(v42 - 216));
  _Unwind_Resume(a1);
}

void sub_1914BE798()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1914BE774);
}

void Espresso::gradient_builder::build_gradient_segment(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  uint64_t *v5;
  unint64_t v7;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *i;
  unint64_t v25;
  unint64_t v26;
  BOOL v28;
  BOOL v29;
  _QWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  const void **v62;
  const void **v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t *v66;
  void **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  std::string::size_type v73;
  uint64_t *v74;
  uint64_t *v75;
  void **v76;
  uint64_t k;
  __int128 v78;
  std::string *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  BOOL v86;
  _QWORD *v87;
  BOOL v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 *v95;
  __int128 *v96;
  __int128 v97;
  uint64_t **v98;
  uint64_t **v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  Espresso *layer_grad_name;
  const char *v105;
  int8x8_t v106;
  unint64_t v107;
  uint8x8_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  NSObject *v113;
  int *v115;
  int *v116;
  int data;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  std::string *v121;
  const void *v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  int8x8_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint8x8_t v131;
  unint64_t v132;
  const std::string **v133;
  const std::string *v134;
  std::string::size_type v135;
  size_t v136;
  std::string *p_s;
  const void *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t ii;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  size_t v149;
  std::string *v150;
  const void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  size_t v155;
  _BYTE *v156;
  const void *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  int *v161;
  int *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  const void **v169;
  std::string::size_type v170;
  __int128 *v171;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t **v175;
  uint64_t *v176;
  __int128 v177;
  _QWORD *v178;
  uint64_t *v179;
  __int128 v180;
  uint64_t kk;
  uint64_t **v182;
  __int128 v183;
  uint64_t jj;
  uint64_t *v185;
  int *v186;
  int *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  const void **v191;
  _OWORD *v192;
  uint64_t *v193;
  uint64_t **v194;
  uint64_t *v195;
  __int128 v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t **v203;
  size_t v204;
  std::string *v205;
  const void *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  size_t v210;
  std::string *v211;
  const void *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  size_t v216;
  std::string *v217;
  const void *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  int *v222;
  int *v223;
  unint64_t v224;
  uint64_t v225;
  const void **v226;
  _QWORD *v227;
  uint64_t *v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  const void **v238;
  const void **v239;
  uint64_t **v240;
  uint64_t **v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  const void **v254;
  uint64_t **v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t *v264;
  uint64_t **v265;
  uint64_t *v266;
  __int128 v267;
  uint64_t m;
  uint64_t **v269;
  __int128 *v270;
  __int128 v271;
  __int128 v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t **v281;
  uint64_t *v282;
  __int128 v283;
  uint64_t n;
  uint64_t **v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t j;
  uint64_t v293;
  uint64_t *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::runtime_error *v298;
  std::runtime_error *v299;
  std::runtime_error *v300;
  std::runtime_error *v301;
  std::runtime_error *v302;
  std::runtime_error *exception;
  std::string *v304;
  __int128 v305;
  std::runtime_error *v306;
  std::string *v307;
  __int128 v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  std::string::size_type v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t **v318;
  uint64_t *v319;
  _QWORD *v320;
  _QWORD *v321;
  std::string v322;
  uint64_t v323[3];
  _QWORD v324[3];
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327[3];
  _QWORD v328[3];
  uint64_t v329;
  std::__shared_weak_count *v330;
  uint64_t v331[3];
  _QWORD v332[3];
  uint64_t v333;
  std::__shared_weak_count *v334;
  std::string *v335;
  std::string *v336;
  std::string *v337;
  std::string *v338;
  std::string *v339;
  std::string *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  std::string *v343;
  std::string *v344;
  std::string *v345;
  std::string *v346;
  std::string *v347;
  std::string *v348;
  int v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  uint64_t v352[3];
  std::string *v353;
  std::string *v354;
  std::string *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  std::string *v358;
  std::string *v359;
  std::string *v360;
  std::string *v361;
  std::string *v362;
  std::string *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  std::string v366;
  char v367;
  int v368;
  int v369;
  std::string v370;
  std::string *v371;
  std::string *v372;
  std::string *v373;
  std::string *v374;
  std::string *v375;
  std::string *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379[3];
  _QWORD v380[3];
  uint64_t v381;
  std::__shared_weak_count *v382;
  std::string *v383;
  std::string *v384;
  std::string *v385;
  std::string *v386;
  std::string *v387;
  std::string *v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  std::string v391;
  std::string v392;
  std::string __s;
  _QWORD v394[5];
  void *__p;
  int *v396;
  std::string v397;
  void *v398;
  std::__shared_weak_count *v399;
  unsigned __int8 v400;
  uint64_t v401[3];
  _QWORD v402[3];
  std::string v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  uint64_t v406[3];
  _QWORD v407[3];
  std::string v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  uint64_t v411[3];
  std::string *v412;
  std::string *v413;
  std::string *v414;
  std::string v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  _QWORD v418[5];
  uint64_t v419[3];
  _QWORD v420[3];
  std::string v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  uint64_t v424[3];
  std::string *v425;
  std::string *v426;
  std::string *v427;
  std::string v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  _QWORD v431[5];
  __int128 v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435[5];
  std::string **v436;
  char v437;
  std::string __str;
  __int128 v439;
  __int128 v440;
  std::string v441;
  std::string v442;
  std::string v443;
  uint64_t v444;
  _BYTE v445[32];
  int v446;
  std::string v447;
  uint64_t v448;
  _BYTE v449[32];
  int v450;
  std::string v451;
  __int128 v452;
  uint64_t v453;

  v5 = a5;
  v7 = a3;
  v453 = *MEMORY[0x1E0C80C00];
  v435[0] = a2;
  v434 = a3;
  v10 = (_QWORD *)(a5[10] + 1120);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v11 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>(v10, (uint64_t)&v366);
  v12 = v11;
  if (!v11)
  {
    *(_OWORD *)&v441.__r_.__value_.__l.__data_ = 0uLL;
    goto LABEL_676;
  }
  v13 = (const void *)v11[3];
  v14 = (std::__shared_weak_count *)v12[4];
  v441.__r_.__value_.__r.__words[0] = v12[3];
  v441.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v13)
  {
LABEL_676:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "Analysis missing: ");
    v304 = std::string::append(&v366, (const std::string::value_type *)((unint64_t)"N8Espresso33analysis_prepare_gradient_builderE" & 0x7FFFFFFFFFFFFFFFLL));
    v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v305;
    v304->__r_.__value_.__l.__size_ = 0;
    v304->__r_.__value_.__r.__words[2] = 0;
    v304->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v17)
  {
    *(_OWORD *)&v451.__r_.__value_.__l.__data_ = 0uLL;
    v306 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v366, "Analysis mismatch: ");
    v307 = std::string::append(&v366, (const std::string::value_type *)((unint64_t)"N8Espresso33analysis_prepare_gradient_builderE" & 0x7FFFFFFFFFFFFFFFLL));
    v308 = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v307->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v308;
    v307->__r_.__value_.__l.__size_ = 0;
    v307->__r_.__value_.__r.__words[2] = 0;
    v307->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v306, &__str);
    __cxa_throw(v306, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v310 = v17;
  v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  v451.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  size = (std::__shared_weak_count *)v441.__r_.__value_.__l.__size_;
  if (v441.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(v441.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (a2 > v7)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&>("start_layer_idx > end_layer_idx: %lu vs %lu", v435, &v434);
  if (a2 == v7)
    return;
  for (i = (_QWORD *)v310[18]; i; i = (_QWORD *)*i)
  {
    v25 = i[4];
    v26 = i[2] + 1;
    if (v25 > a2 || v26 < v7)
    {
      v28 = v25 < a2 || v26 > v7;
      v29 = !v28 || v25 >= v7;
      if (!v29 && v26 > a2)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&,unsigned long const&,unsigned long>(v435[0], v434, v25, v26);
    }
  }
  v31 = (_QWORD *)v310[33];
  v309 = v310[19];
  v321 = (_QWORD *)(a1 + 64);
  v317 = v310 + 6;
  v320 = a4 + 1;
  v318 = (uint64_t **)(a1 + 40);
  v319 = v5;
  do
  {
    v32 = v7 - 1;
    v433 = v32;
    v33 = *(_OWORD *)(*(_QWORD *)(v5[10] + 32) + 16 * v32);
    v432 = v33;
    v314 = v33;
    if (*((_QWORD *)&v33 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v310 + 16, v32);
    if (!v36)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v32);
      if (*(char *)(v58 + 39) < 0)
        std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(v58 + 16), *(_QWORD *)(v58 + 24));
      else
        v322 = *(std::string *)(v58 + 16);
      get_layer_grad_name((uint64_t)&v366, (const void **)&v322.__r_.__value_.__l.__data_);
      if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v322.__r_.__value_.__l.__data_);
      memset(&v441, 0, sizeof(v441));
      v60 = *(_QWORD *)a1 + 96;
      v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
      v61 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v60, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
      v63 = (const void **)v61[3];
      v62 = (const void **)v61[4];
      while (1)
      {
        if (v63 == v62)
        {
          v80 = *(_QWORD *)a1 + 56;
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
          v81 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v80, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
          v83 = v81[3];
          v82 = v81[4];
          v84 = v310 + 6;
          if (v83 == v82)
          {
            v86 = 0;
          }
          else
          {
            do
            {
              v85 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v84, v83);
              v86 = v85 != 0;
              if (v85)
                break;
              v83 += 24;
              v84 = v310 + 6;
            }
            while (v83 != v82);
          }
          v87 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v310 + 11, v433);
          v88 = v441.__r_.__value_.__r.__words[0] != v441.__r_.__value_.__l.__size_ && v86;
          v5 = v319;
          if (v88 || v87)
          {
            v89 = *(_QWORD *)a1 + 56;
            v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
            v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v89, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
            v91 = *(_QWORD *)a1 + 96;
            v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
            v92 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v91, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v366;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v441;
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v90 + 3);
            *(_QWORD *)&v439 = v92 + 3;
            *((_QWORD *)&v439 + 1) = a4;
            *(_QWORD *)&v440 = v310 + 6;
            *((_QWORD *)&v440 + 1) = v433;
            v93 = *(_QWORD *)a1 + 56;
            v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
            v94 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v93, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
            v95 = (__int128 *)v94[3];
            v96 = (__int128 *)v94[4];
            while (v95 != v96)
            {
              if (*((char *)v95 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v451, *(const std::string::value_type **)v95, *((_QWORD *)v95 + 1));
              }
              else
              {
                v97 = *v95;
                v451.__r_.__value_.__r.__words[2] = *((_QWORD *)v95 + 2);
                *(_OWORD *)&v451.__r_.__value_.__l.__data_ = v97;
              }
              if (v320 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, &v451))
              {
                *(_QWORD *)v445 = &v451;
                v98 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)&v451.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
                sum_grad_contribs((std::string *)v449, v319, v98 + 7, (const void **)&v451.__r_.__value_.__l.__data_);
                *(_QWORD *)v445 = &v451;
                v99 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)&v451.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v99 + 7), (std::string *)v449, (__int128 *)&v449[24], 1uLL);
                if ((v449[23] & 0x80000000) != 0)
                  operator delete(*(void **)v449);
              }
              if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v451.__r_.__value_.__l.__data_);
              v95 = (__int128 *)((char *)v95 + 24);
            }
            v100 = v319[10];
            v101 = *(_QWORD *)(*(_QWORD *)(v100 + 32) + 16 * v433);
            v102 = (_QWORD *)(v101 + 40);
            v103 = *(char *)(v101 + 63);
            if (v103 < 0)
            {
              if (*(_QWORD *)(v101 + 48) == 11)
              {
                v102 = (_QWORD *)*v102;
                goto LABEL_488;
              }
LABEL_492:
              v235 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v433) + 64);
              (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v235 + 256))(v235, v319, &__str);
              if (v309)
              {
                v236 = *(_QWORD *)a1 + 56;
                v451.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
                v237 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v236, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)&v451);
                v239 = (const void **)v237[3];
                v238 = (const void **)v237[4];
                while (v239 != v238)
                {
                  if (v320 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v239))
                  {
                    v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
                    v240 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v239, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
                    if (0xAAAAAAAAAAAAAAABLL * (v240[8] - v240[7]) >= 2)
                    {
                      sum_grad_contribs(&v451, v319, v240 + 7, v239);
                      *(_QWORD *)v449 = v239;
                      v241 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v239, (uint64_t)&std::piecewise_construct, (__int128 **)v449);
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v241 + 7), &v451, &v452, 1uLL);
                      if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v451.__r_.__value_.__l.__data_);
                    }
                  }
                  v239 += 3;
                }
              }
            }
            else
            {
              if (v103 != 11)
                goto LABEL_492;
LABEL_488:
              v232 = (_QWORD *)*v102;
              v233 = *(_QWORD *)((char *)v102 + 3);
              if (v232 != (_QWORD *)0x747269765F696870 || v233 != 0x6C6175747269765FLL)
                goto LABEL_492;
              *(_QWORD *)v449 = &v433;
              v270 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v100 + 96, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)v449)[3];
              if (*((char *)v270 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v451, *(const std::string::value_type **)v270, *((_QWORD *)v270 + 1));
              }
              else
              {
                v271 = *v270;
                v451.__r_.__value_.__r.__words[2] = *((_QWORD *)v270 + 2);
                *(_OWORD *)&v451.__r_.__value_.__l.__data_ = v271;
              }
              *(_QWORD *)v445 = &v451;
              v289 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, &v451, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
              if (*((char *)v289 + 79) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v449, (const std::string::value_type *)v289[7], v289[8]);
              }
              else
              {
                *(_OWORD *)v449 = *(_OWORD *)(v289 + 7);
                *(_QWORD *)&v449[16] = v289[9];
              }
              v290 = v319[10] + 56;
              *(_QWORD *)v445 = &v433;
              v291 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v290, &v433, (uint64_t)&std::piecewise_construct, (uint64_t **)v445);
              v293 = v291[3];
              for (j = v291[4]; v293 != j; v5 = v319)
              {
                if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v321, v293))
                {
                  if (*(char *)(v293 + 23) < 0)
                    v293 = *(_QWORD *)v293;
                  *(_QWORD *)v445 = v293;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob %s is consumed by multiple phi_virtuals", v445);
                }
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v317, v293))
                {
                  *(_QWORD *)v445 = v293;
                  v294 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, v293, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
                  std::string::operator=((std::string *)(v294 + 5), (const std::string *)v449);
                }
                v293 += 24;
              }
              if ((v449[23] & 0x80000000) != 0)
                operator delete(*(void **)v449);
              if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v451.__r_.__value_.__l.__data_);
            }
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v441;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v366.__r_.__value_.__l.__data_);
          goto LABEL_650;
        }
        if (v320 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v63)|| (v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63, v64 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451), v64[7] == v64[8]))
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v321, (uint64_t)v63))goto LABEL_101;
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v69 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          std::string::operator=((std::string *)(v70 + 7), (const std::string *)(v69 + 5));
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v321, (uint64_t)v63);
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          v72 = (uint64_t)(v71 + 7);
          v73 = v441.__r_.__value_.__l.__size_;
          if (v441.__r_.__value_.__l.__size_ < v441.__r_.__value_.__r.__words[2])
          {
            if (*((char *)v71 + 79) < 0)
            {
LABEL_98:
              std::string::__init_copy_ctor_external((std::string *)v441.__r_.__value_.__l.__size_, (const std::string::value_type *)v71[7], v71[8]);
              goto LABEL_99;
            }
LABEL_96:
            v78 = *(_OWORD *)v72;
            *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 16);
            *(_OWORD *)v73 = v78;
LABEL_99:
            v79 = (std::string *)(v73 + 24);
            goto LABEL_100;
          }
        }
        else
        {
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v65 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          sum_grad_contribs(&__str, v5, v65 + 7, v63);
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          v67 = (void **)(v66 + 7);
          if (*((char *)v66 + 79) < 0)
            operator delete(*v67);
          *(std::string *)v67 = __str;
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v321, (uint64_t)v63))
          {
            *(_QWORD *)v445 = v63;
            v68 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v63, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
            if (*((char *)v68 + 63) < 0)
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v68[5], v68[6]);
            else
              __str = *(std::string *)(v68 + 5);
            *(_QWORD *)v445 = v63;
            v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)v445);
            if (*((char *)v74 + 79) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v439, (const std::string::value_type *)v74[7], v74[8]);
            }
            else
            {
              v439 = *(_OWORD *)(v74 + 7);
              *(_QWORD *)&v440 = v74[9];
            }
            memset(v449, 0, 24);
            *(_QWORD *)v445 = v449;
            v445[8] = 0;
            *(_QWORD *)v449 = operator new(0x30uLL);
            *(_QWORD *)&v449[8] = *(_QWORD *)v449;
            *(_QWORD *)&v449[16] = *(_QWORD *)v449 + 48;
            *(_QWORD *)&v449[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v449[16], (__int128 *)&__str, (__int128 *)((char *)&v440 + 8), *(std::string **)v449);
            merge_grads_with_phi((uint64_t)&v451, v5, (uint64_t *)v449, v63, 0);
            v398 = v63;
            v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v398);
            v76 = (void **)(v75 + 7);
            if (*((char *)v75 + 79) < 0)
              operator delete(*v76);
            *(std::string *)v76 = v451;
            *((_BYTE *)&v451.__r_.__value_.__s + 23) = 0;
            v451.__r_.__value_.__s.__data_[0] = 0;
            *(_QWORD *)v445 = v449;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
            for (k = 0; k != -48; k -= 24)
            {
              if (*((char *)&v440 + k + 7) < 0)
                operator delete(*(void **)((char *)&__str + k + 24));
            }
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v321, (uint64_t)v63);
          }
          v451.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v318, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v451);
          v72 = (uint64_t)(v71 + 7);
          v73 = v441.__r_.__value_.__l.__size_;
          if (v441.__r_.__value_.__l.__size_ < v441.__r_.__value_.__r.__words[2])
          {
            if (*((char *)v71 + 79) < 0)
              goto LABEL_98;
            goto LABEL_96;
          }
        }
        v79 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v441.__r_.__value_.__l.__data_, v72);
LABEL_100:
        v441.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
LABEL_101:
        v63 += 3;
      }
    }
    v37 = v36;
    v38 = *((_DWORD *)v36 + 6);
    if (v38 != 1)
    {
      if (v38)
        goto LABEL_634;
      v39 = v5[10];
      v311 = v36;
      v41 = v36 + 4;
      v40 = v36[4];
      v42 = *(_QWORD *)(v39 + 32);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v36 + 4);
      v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v39 + 56, v36 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
      v44 = (uint64_t *)(v42 + 16 * v40);
      v45 = *v44;
      if (!*(_QWORD *)(*v44 + 64)
        || (v46 = (__int128 *)v43[3],
      {
        v399 = 0;
        v398 = 0;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expecting a cf_if kernel");
      }
      v48 = *(std::__shared_weak_count **)(v45 + 72);
      v398 = v47;
      v399 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v51 = (const void **)(v47 + 296);
      v52 = v47[319];
      if ((v52 & 0x80u) == 0)
        v53 = v47[319];
      else
        v53 = *((_QWORD *)v47 + 38);
      v54 = *(unsigned __int8 *)(v314 + 39);
      v55 = (char)v54;
      if ((v54 & 0x80u) != 0)
        v54 = *(_QWORD *)(v314 + 24);
      if (v53 != v54)
        goto LABEL_501;
      if (v55 >= 0)
        v56 = (unsigned __int8 *)(v314 + 16);
      else
        v56 = *(unsigned __int8 **)(v314 + 16);
      if ((v52 & 0x80) != 0)
      {
        if (memcmp(*v51, v56, *((_QWORD *)v47 + 38)))
        {
LABEL_501:
          v242 = v319[10] + 928;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
          v316 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v242, (uint64_t)v51, (uint64_t)&std::piecewise_construct, (__int128 **)&__str)[5];
          v243 = *(_QWORD *)(*(_QWORD *)(v319[10] + 32) + 16 * (v316 - 1));
          segment_input_blob_indices(&v441.__r_.__value_.__l.__data_, v31, v317, *v41 + 1, v433);
          std::unordered_set<std::string>::unordered_set((uint64_t)v418, (uint64_t)v317);
          fill_and_extract_grads_for_inputs((uint64_t)&v366, (uint64_t)v31, (int *)v441.__r_.__value_.__l.__data_, (int *)v441.__r_.__value_.__l.__size_, v319, a4, v321, v418);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v418);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_if");
          v244 = *v44;
          if (*(char *)(*v44 + 39) < 0)
            std::string::__init_copy_ctor_external(&v415, *(const std::string::value_type **)(v244 + 16), *(_QWORD *)(v244 + 24));
          else
            v415 = *(std::string *)(v244 + 16);
          get_layer_grad_name((uint64_t)&v451, (const void **)&v415.__r_.__value_.__l.__data_);
          if (*((char *)v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
          }
          else
          {
            v246 = *v46;
            *(_QWORD *)&v449[16] = *((_QWORD *)v46 + 2);
            *(_OWORD *)v449 = v246;
          }
          v413 = 0;
          v412 = 0;
          v414 = 0;
          *(_QWORD *)v445 = &v412;
          v445[8] = 0;
          v412 = (std::string *)operator new(0x18uLL);
          v413 = v412;
          v414 = v412 + 1;
          v413 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v414, (__int128 *)v449, (__int128 *)&v449[24], v412);
          memset(v411, 0, sizeof(v411));
          Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v416, v319, (uint64_t)&__str, (uint64_t)&v451, (uint64_t)&__p, (uint64_t)v412, (uint64_t)v413, v411);
          v247 = v417;
          if (v417)
          {
            v248 = (unint64_t *)&v417->__shared_owners_;
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 - 1, v248));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
          *(_QWORD *)v445 = v411;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
          *(_QWORD *)v445 = &v412;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
          if ((v449[23] & 0x80000000) != 0)
            operator delete(*(void **)v449);
          if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v451.__r_.__value_.__l.__data_);
          if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v415.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v250 = *v41 + 1;
          v5 = v319;
          Espresso::gradient_builder::build_gradient_segment(a1, v250, v316 - 1, a4, v319);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_else");
          if (*(char *)(v243 + 39) < 0)
            std::string::__init_copy_ctor_external(&v408, *(const std::string::value_type **)(v243 + 16), *(_QWORD *)(v243 + 24));
          else
            v408 = *(std::string *)(v243 + 16);
          get_layer_grad_name((uint64_t)&v451, (const void **)&v408.__r_.__value_.__l.__data_);
          memset(v407, 0, sizeof(v407));
          memset(v406, 0, sizeof(v406));
          Espresso::sequential_builder::add<Espresso::cf_else_params_t>(&v409, v319, (uint64_t)&__str, (uint64_t)&v451, (uint64_t)v445, 0, 0, v406);
          v251 = v410;
          if (v410)
          {
            v252 = (unint64_t *)&v410->__shared_owners_;
            do
              v253 = __ldaxr(v252);
            while (__stlxr(v253 - 1, v252));
            if (!v253)
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
            }
          }
          *(_QWORD *)v449 = v406;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          *(_QWORD *)v449 = v407;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v451.__r_.__value_.__l.__data_);
          if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v408.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v254 = (const void **)v366.__r_.__value_.__r.__words[2];
          if (v366.__r_.__value_.__r.__words[2])
          {
            do
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v254 + 2);
              v255 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v254 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
              if ((char *)v255[8] - (char *)v255[7] != 24)
              {
                v299 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
                Espresso::invalid_state_error::invalid_state_error(v299);
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v254 + 2);
              v256 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v366, (uint64_t)(v254 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v254 + 2);
              v257 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v254 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&__str)[7];
              v258 = v256[7];
              v259 = *(_OWORD *)(v256 + 5);
              v260 = v257[2];
              *(_OWORD *)(v256 + 5) = *(_OWORD *)v257;
              v256[7] = v260;
              *(_OWORD *)v257 = v259;
              v257[2] = v258;
              v254 = (const void **)*v254;
            }
            while (v254);
          }
          Espresso::gradient_builder::build_gradient_segment(a1, v316, v433, a4, v319);
          std::string::basic_string[abi:ne180100]<0>(&__str, "cf_end");
          if (*(char *)(v432 + 39) < 0)
            std::string::__init_copy_ctor_external(&v403, *(const std::string::value_type **)(v432 + 16), *(_QWORD *)(v432 + 24));
          else
            v403 = *(std::string *)(v432 + 16);
          get_layer_grad_name((uint64_t)&v451, (const void **)&v403.__r_.__value_.__l.__data_);
          memset(v402, 0, sizeof(v402));
          memset(v401, 0, sizeof(v401));
          Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v404, v319, (uint64_t)&__str, (uint64_t)&v451, (uint64_t)v445, 0, 0, v401);
          v261 = v405;
          if (v405)
          {
            v262 = (unint64_t *)&v405->__shared_owners_;
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
              std::__shared_weak_count::__release_weak(v261);
            }
          }
          *(_QWORD *)v449 = v401;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          *(_QWORD *)v449 = v402;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v451.__r_.__value_.__l.__data_);
          if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v403.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v264 = (uint64_t *)v366.__r_.__value_.__r.__words[2];
          if (v366.__r_.__value_.__r.__words[2])
          {
            do
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v264 + 2);
              v265 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v264 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
              if ((char *)v265[8] - (char *)v265[7] != 24)
              {
                v300 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
                Espresso::invalid_state_error::invalid_state_error(v300);
              }
              if (*((char *)v264 + 63) < 0)
                std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v264[5], v264[6]);
              else
                __str = *(std::string *)(v264 + 5);
              *(_QWORD *)v445 = v264 + 2;
              v266 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v264 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)v445)[7];
              if (*((char *)v266 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v439, (const std::string::value_type *)*v266, v266[1]);
              }
              else
              {
                v267 = *(_OWORD *)v266;
                *(_QWORD *)&v440 = v266[2];
                v439 = v267;
              }
              memset(v449, 0, 24);
              *(_QWORD *)v445 = v449;
              v445[8] = 0;
              *(_QWORD *)v449 = operator new(0x30uLL);
              *(_QWORD *)&v449[8] = *(_QWORD *)v449;
              *(_QWORD *)&v449[16] = *(_QWORD *)v449 + 48;
              *(_QWORD *)&v449[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v449[16], (__int128 *)&__str, (__int128 *)((char *)&v440 + 8), *(std::string **)v449);
              merge_grads_with_phi((uint64_t)&v451, v319, (uint64_t *)v449, (const void **)v264 + 2, 1);
              *(_QWORD *)v445 = v449;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
              for (m = 0; m != -48; m -= 24)
              {
                if (*((char *)&v440 + m + 7) < 0)
                  operator delete(*(void **)((char *)&__str + m + 24));
              }
              if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__str, v451.__r_.__value_.__l.__data_, v451.__r_.__value_.__l.__size_);
              else
                __str = v451;
              *(_QWORD *)v449 = v264 + 2;
              v269 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v264 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)v449);
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v269 + 7), &__str, &v439, 1uLL);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v451.__r_.__value_.__l.__data_);
              v264 = (uint64_t *)*v264;
            }
            while (v264);
          }
          goto LABEL_627;
        }
      }
      else if (v47[319])
      {
        v57 = (unsigned __int8 *)(v47 + 296);
        while (*v57 == *v56)
        {
          ++v57;
          ++v56;
          if (!--v52)
            goto LABEL_503;
        }
        goto LABEL_501;
      }
LABEL_503:
      segment_input_blob_indices(&v441.__r_.__value_.__l.__data_, v31, v317, *v41 + 1, v433);
      std::unordered_set<std::string>::unordered_set((uint64_t)v431, (uint64_t)v317);
      fill_and_extract_grads_for_inputs((uint64_t)&v366, (uint64_t)v31, (int *)v441.__r_.__value_.__l.__data_, (int *)v441.__r_.__value_.__l.__size_, v319, a4, v321, v431);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v431);
      std::string::basic_string[abi:ne180100]<0>(&__str, "cf_if");
      v245 = *v44;
      if (*(char *)(*v44 + 39) < 0)
        std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(v245 + 16), *(_QWORD *)(v245 + 24));
      else
        v428 = *(std::string *)(v245 + 16);
      get_layer_grad_name((uint64_t)&v451, (const void **)&v428.__r_.__value_.__l.__data_);
      if (*((char *)v46 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
      }
      else
      {
        v272 = *v46;
        *(_QWORD *)&v449[16] = *((_QWORD *)v46 + 2);
        *(_OWORD *)v449 = v272;
      }
      v426 = 0;
      v425 = 0;
      v427 = 0;
      *(_QWORD *)v445 = &v425;
      v445[8] = 0;
      v425 = (std::string *)operator new(0x18uLL);
      v426 = v425;
      v427 = v425 + 1;
      v426 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v427, (__int128 *)v449, (__int128 *)&v449[24], v425);
      memset(v424, 0, sizeof(v424));
      Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v429, v319, (uint64_t)&__str, (uint64_t)&v451, (uint64_t)&__p, (uint64_t)v425, (uint64_t)v426, v424);
      v273 = v430;
      if (v430)
      {
        v274 = (unint64_t *)&v430->__shared_owners_;
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      *(_QWORD *)v445 = v424;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
      *(_QWORD *)v445 = &v425;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
      if ((v449[23] & 0x80000000) != 0)
        operator delete(*(void **)v449);
      if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v451.__r_.__value_.__l.__data_);
      if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v428.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v276 = *v41 + 1;
      v5 = v319;
      Espresso::gradient_builder::build_gradient_segment(a1, v276, v433, a4, v319);
      std::string::basic_string[abi:ne180100]<0>(&__str, "cf_end");
      if (*(char *)(v432 + 39) < 0)
        std::string::__init_copy_ctor_external(&v421, *(const std::string::value_type **)(v432 + 16), *(_QWORD *)(v432 + 24));
      else
        v421 = *(std::string *)(v432 + 16);
      get_layer_grad_name((uint64_t)&v451, (const void **)&v421.__r_.__value_.__l.__data_);
      memset(v420, 0, sizeof(v420));
      memset(v419, 0, sizeof(v419));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v422, v319, (uint64_t)&__str, (uint64_t)&v451, (uint64_t)v445, 0, 0, v419);
      v277 = v423;
      if (v423)
      {
        v278 = (unint64_t *)&v423->__shared_owners_;
        do
          v279 = __ldaxr(v278);
        while (__stlxr(v279 - 1, v278));
        if (!v279)
        {
          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
          std::__shared_weak_count::__release_weak(v277);
        }
      }
      *(_QWORD *)v449 = v419;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
      *(_QWORD *)v449 = v420;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
      if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v451.__r_.__value_.__l.__data_);
      if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v421.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v280 = (uint64_t *)v366.__r_.__value_.__r.__words[2];
      if (v366.__r_.__value_.__r.__words[2])
      {
        do
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v280 + 2);
          v281 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v280 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          if ((char *)v281[8] - (char *)v281[7] != 24)
          {
            v302 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v302);
          }
          if (*((char *)v280 + 63) < 0)
            std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v280[5], v280[6]);
          else
            __str = *(std::string *)(v280 + 5);
          *(_QWORD *)v445 = v280 + 2;
          v282 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v280 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)v445)[7];
          if (*((char *)v282 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v439, (const std::string::value_type *)*v282, v282[1]);
          }
          else
          {
            v283 = *(_OWORD *)v282;
            *(_QWORD *)&v440 = v282[2];
            v439 = v283;
          }
          memset(v449, 0, 24);
          *(_QWORD *)v445 = v449;
          v445[8] = 0;
          *(_QWORD *)v449 = operator new(0x30uLL);
          *(_QWORD *)&v449[8] = *(_QWORD *)v449;
          *(_QWORD *)&v449[16] = *(_QWORD *)v449 + 48;
          *(_QWORD *)&v449[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v449[16], (__int128 *)&__str, (__int128 *)((char *)&v440 + 8), *(std::string **)v449);
          merge_grads_with_phi((uint64_t)&v451, v319, (uint64_t *)v449, (const void **)v280 + 2, 1);
          *(_QWORD *)v445 = v449;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
          for (n = 0; n != -48; n -= 24)
          {
            if (*((char *)&v440 + n + 7) < 0)
              operator delete(*(void **)((char *)&__str + n + 24));
          }
          if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, v451.__r_.__value_.__l.__data_, v451.__r_.__value_.__l.__size_);
          else
            __str = v451;
          *(_QWORD *)v449 = v280 + 2;
          v285 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)v280 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)v449);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v285 + 7), &__str, &v439, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v451.__r_.__value_.__l.__data_);
          v280 = (uint64_t *)*v280;
        }
        while (v280);
      }
LABEL_627:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v366);
      if (v441.__r_.__value_.__r.__words[0])
      {
        v441.__r_.__value_.__l.__size_ = v441.__r_.__value_.__r.__words[0];
        operator delete(v441.__r_.__value_.__l.__data_);
      }
      v37 = v311;
      v286 = v399;
      if (v399)
      {
        v287 = (unint64_t *)&v399->__shared_owners_;
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      goto LABEL_634;
    }
    v312 = v36;
    v59 = *(_QWORD *)(*(_QWORD *)(v5[10] + 32) + 16 * v36[4]);
    if (*(char *)(v59 + 39) < 0)
      std::string::__init_copy_ctor_external(&v397, *(const std::string::value_type **)(v59 + 16), *(_QWORD *)(v59 + 24));
    else
      v397 = *(std::string *)(v59 + 16);
    layer_grad_name = (Espresso *)get_layer_grad_name((uint64_t)&v398, (const void **)&v397.__r_.__value_.__l.__data_);
    if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v397.__r_.__value_.__l.__data_);
    v106 = (int8x8_t)v310[22];
    if (!*(_QWORD *)&v106)
      goto LABEL_657;
    v107 = v312[4];
    v108 = (uint8x8_t)vcnt_s8(v106);
    v108.i16[0] = vaddlv_u8(v108);
    if (v108.u32[0] > 1uLL)
    {
      v109 = v312[4];
      if (v107 >= *(_QWORD *)&v106)
        v109 = v107 % *(_QWORD *)&v106;
    }
    else
    {
      v109 = (*(_QWORD *)&v106 - 1) & v107;
    }
    v110 = *(_QWORD **)(v310[21] + 8 * v109);
    if (!v110 || (v111 = (_QWORD *)*v110) == 0)
LABEL_657:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      v112 = v111[1];
      if (v107 == v112)
        break;
      if (v108.u32[0] > 1uLL)
      {
        if (v112 >= *(_QWORD *)&v106)
          v112 %= *(_QWORD *)&v106;
      }
      else
      {
        v112 &= *(_QWORD *)&v106 - 1;
      }
      if (v112 != v109)
        goto LABEL_657;
LABEL_144:
      v111 = (_QWORD *)*v111;
      if (!v111)
        goto LABEL_657;
    }
    if (v111[2] != v107)
      goto LABEL_144;
    v313 = v111[3];
    v315 = v111[4];
    Espresso::espresso_os_log_subsystem(layer_grad_name, v105);
    v113 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
    {
      LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v313;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v315;
      _os_log_impl(&dword_190DAF000, v113, OS_LOG_TYPE_INFO, "loop body boundary: [%lu, %lu]\n", (uint8_t *)&__str, 0x16u);
    }

    segment_input_blob_indices((char **)&__p, v31, v317, v313 + 1, v315);
    std::unordered_set<std::string>::unordered_set((uint64_t)v394, (uint64_t)v317);
    fill_and_extract_grads_for_inputs((uint64_t)&v451, (uint64_t)v31, (int *)__p, v396, v319, a4, v321, v394);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v394);
    memset(v449, 0, sizeof(v449));
    v450 = 1065353216;
    v115 = (int *)__p;
    v116 = v396;
    while (v115 != v116)
    {
      LODWORD(v441.__r_.__value_.__l.__data_) = *v115;
      data = (int)v441.__r_.__value_.__l.__data_;
      v118 = v31[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v31[8] - v118) >> 3) <= SLODWORD(v441.__r_.__value_.__l.__data_))
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v119 = v118 + 24 * SLODWORD(v441.__r_.__value_.__l.__data_);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v317, v119))
      {
        if (*(char *)(v119 + 23) >= 0)
          v120 = *(unsigned __int8 *)(v119 + 23);
        else
          v120 = *(_QWORD *)(v119 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v366, v120 + 6);
        if ((v366.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v121 = &v366;
        else
          v121 = (std::string *)v366.__r_.__value_.__r.__words[0];
        if (v120)
        {
          if (*(char *)(v119 + 23) >= 0)
            v122 = (const void *)v119;
          else
            v122 = *(const void **)v119;
          memmove(v121, v122, v120);
        }
        strcpy((char *)v121 + v120, "_grad_");
        if ((v400 & 0x80u) == 0)
          v123 = (const std::string::value_type *)&v398;
        else
          v123 = (const std::string::value_type *)v398;
        if ((v400 & 0x80u) == 0)
          v124 = v400;
        else
          v124 = (std::string::size_type)v399;
        v125 = std::string::append(&v366, v123, v124);
        v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v366.__r_.__value_.__l.__data_);
        v127 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v449, data, &v441);
        std::string::operator=(v127 + 1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v115;
    }
    v128 = (int8x8_t)v310[27];
    v129 = v319;
    if (!*(_QWORD *)&v128)
      goto LABEL_658;
    v130 = v312[4];
    v131 = (uint8x8_t)vcnt_s8(v128);
    v131.i16[0] = vaddlv_u8(v131);
    if (v131.u32[0] > 1uLL)
    {
      v132 = v312[4];
      if (v130 >= *(_QWORD *)&v128)
        v132 = v130 % *(_QWORD *)&v128;
    }
    else
    {
      v132 = (*(_QWORD *)&v128 - 1) & v130;
    }
    v133 = *(const std::string ***)(v310[26] + 8 * v132);
    if (!v133 || (v134 = *v133) == 0)
LABEL_658:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (2)
    {
      v135 = v134->__r_.__value_.__l.__size_;
      if (v130 != v135)
      {
        if (v131.u32[0] > 1uLL)
        {
          if (v135 >= *(_QWORD *)&v128)
            v135 %= *(_QWORD *)&v128;
        }
        else
        {
          v135 &= *(_QWORD *)&v128 - 1;
        }
        if (v135 != v132)
          goto LABEL_658;
LABEL_189:
        v134 = (const std::string *)v134->__r_.__value_.__r.__words[0];
        if (!v134)
          goto LABEL_658;
        continue;
      }
      break;
    }
    if (v134->__r_.__value_.__r.__words[2] != v130)
      goto LABEL_189;
    if ((v400 & 0x80u) == 0)
      v136 = v400;
    else
      v136 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v136 + 6);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v136)
    {
      if ((v400 & 0x80u) == 0)
        v138 = &v398;
      else
        v138 = v398;
      memmove(p_s, v138, v136);
    }
    strcpy((char *)p_s + v136, "_count");
    __str.__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(_QWORD *)&v439 = *((_QWORD *)&__s.__r_.__value_.__l + 2);
    }
    *((_QWORD *)&v439 + 1) = 1;
    Espresso::ssa_blob_name::repr(&v392, (uint64_t)&__str);
    if (SBYTE7(v439) < 0)
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    __str.__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(_QWORD *)&v439 = *((_QWORD *)&__s.__r_.__value_.__l + 2);
    }
    *((_QWORD *)&v439 + 1) = 2;
    Espresso::ssa_blob_name::repr(&v391, (uint64_t)&__str);
    if (SBYTE7(v439) < 0)
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    Espresso::pop_stack(v319, v134 + 1, (uint64_t)&__s, 0);
    std::string::basic_string[abi:ne180100]<0>(&v366, "phi_virtual");
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      __str = __s;
    if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v439, v391.__r_.__value_.__l.__data_, v391.__r_.__value_.__l.__size_);
    }
    else
    {
      v439 = *(_OWORD *)&v391.__r_.__value_.__l.__data_;
      *(_QWORD *)&v440 = *((_QWORD *)&v391.__r_.__value_.__l + 2);
    }
    v387 = 0;
    v386 = 0;
    v388 = 0;
    v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v386;
    v441.__r_.__value_.__s.__data_[8] = 0;
    v386 = (std::string *)operator new(0x30uLL);
    v387 = v386;
    v388 = v386 + 2;
    v387 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v388, (__int128 *)&__str, (__int128 *)((char *)&v440 + 8), v386);
    if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v441, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
    else
      v441 = v392;
    v384 = 0;
    v383 = 0;
    v385 = 0;
    *(_QWORD *)v445 = &v383;
    v445[8] = 0;
    v383 = (std::string *)operator new(0x18uLL);
    v384 = v383;
    v385 = v383 + 1;
    v384 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v385, (__int128 *)&v441, (__int128 *)&v442, v383);
    Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v389, v319, (uint64_t)&v366, (uint64_t)&v392, (uint64_t)&v370, (uint64_t)v386, (uint64_t)v387, (uint64_t *)&v383);
    v139 = v390;
    if (v390)
    {
      v140 = (unint64_t *)&v390->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    *(_QWORD *)v445 = &v383;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v386;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v441);
    for (ii = 0; ii != -48; ii -= 24)
    {
      if (*((char *)&v440 + ii + 7) < 0)
        operator delete(*(void **)((char *)&__str + ii + 24));
    }
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "cf_loop");
    LODWORD(v441.__r_.__value_.__l.__data_) = 0;
    memset(v380, 0, sizeof(v380));
    memset(v379, 0, sizeof(v379));
    Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v381, v319, (uint64_t)&__str, (uint64_t)&v398, (uint64_t)&v441, 0, 0, v379);
    v143 = v382;
    if (v382)
    {
      v144 = (unint64_t *)&v382->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v366.__r_.__value_.__r.__words[0] = (std::string::size_type)v379;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v366);
    v366.__r_.__value_.__r.__words[0] = (std::string::size_type)v380;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v366);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v439) = 0;
    *(_QWORD *)((char *)&v440 + 4) = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    __str.__r_.__value_.__l.__size_ = 3212836864;
    std::string::basic_string[abi:ne180100]<0>(&v366, "elementwise");
    if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v441, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
    else
      v441 = v392;
    v375 = 0;
    v374 = 0;
    v376 = 0;
    *(_QWORD *)v445 = &v374;
    v445[8] = 0;
    v374 = (std::string *)operator new(0x18uLL);
    v375 = v374;
    v376 = v374 + 1;
    v375 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v376, (__int128 *)&v441, (__int128 *)&v442, v374);
    if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v445, v391.__r_.__value_.__l.__data_, v391.__r_.__value_.__l.__size_);
    else
      *(std::string *)v445 = v391;
    v372 = 0;
    v371 = 0;
    v373 = 0;
    v370.__r_.__value_.__r.__words[0] = (std::string::size_type)&v371;
    v370.__r_.__value_.__s.__data_[8] = 0;
    v371 = (std::string *)operator new(0x18uLL);
    v372 = v371;
    v373 = v371 + 1;
    v372 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v373, (__int128 *)v445, (__int128 *)&v445[24], v371);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v377, v319, (uint64_t)&v366, (uint64_t)&v392, (uint64_t)&__str, (uint64_t)v374, (uint64_t)v375, (uint64_t *)&v371);
    v146 = v378;
    if (v378)
    {
      v147 = (unint64_t *)&v378->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v370.__r_.__value_.__r.__words[0] = (std::string::size_type)&v371;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
    if ((v445[23] & 0x80000000) != 0)
      operator delete(*(void **)v445);
    *(_QWORD *)v445 = &v374;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v445);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
    if ((v400 & 0x80u) == 0)
      v149 = v400;
    else
      v149 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)&v370, v149 + 5);
    if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v150 = &v370;
    else
      v150 = (std::string *)v370.__r_.__value_.__r.__words[0];
    if (v149)
    {
      if ((v400 & 0x80u) == 0)
        v151 = &v398;
      else
        v151 = v398;
      memmove(v150, v151, v149);
    }
    strcpy((char *)v150 + v149, "_cond");
    v366.__r_.__value_.__r.__words[2] = 897988541;
    v367 = 0;
    v369 = 0;
    v368 = 0;
    *(_OWORD *)&v366.__r_.__value_.__l.__data_ = 0x6AuLL;
    std::string::basic_string[abi:ne180100]<0>(&v441, "elementwise");
    if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v445, v391.__r_.__value_.__l.__data_, v391.__r_.__value_.__l.__size_);
    else
      *(std::string *)v445 = v391;
    v362 = 0;
    v361 = 0;
    v363 = 0;
    v447.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
    v447.__r_.__value_.__s.__data_[8] = 0;
    v361 = (std::string *)operator new(0x18uLL);
    v362 = v361;
    v363 = v361 + 1;
    v362 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v363, (__int128 *)v445, (__int128 *)&v445[24], v361);
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v447, v370.__r_.__value_.__l.__data_, v370.__r_.__value_.__l.__size_);
    else
      v447 = v370;
    v359 = 0;
    v358 = 0;
    v360 = 0;
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
    v443.__r_.__value_.__s.__data_[8] = 0;
    v358 = (std::string *)operator new(0x18uLL);
    v359 = v358;
    v360 = v358 + 1;
    v359 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360, (__int128 *)&v447, (__int128 *)&v448, v358);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v364, v319, (uint64_t)&v441, (uint64_t)&v370, (uint64_t)&v366, (uint64_t)v361, (uint64_t)v362, (uint64_t *)&v358);
    v152 = v365;
    if (v365)
    {
      v153 = (unint64_t *)&v365->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    v447.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v447);
    if ((v445[23] & 0x80000000) != 0)
      operator delete(*(void **)v445);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v441, "cf_if");
    if ((v400 & 0x80u) == 0)
      v155 = v400;
    else
      v155 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)v445, v155 + 8);
    if (v445[23] >= 0)
      v156 = v445;
    else
      v156 = *(_BYTE **)v445;
    if (v155)
    {
      if ((v400 & 0x80u) == 0)
        v157 = &v398;
      else
        v157 = v398;
      memmove(v156, v157, v155);
    }
    strcpy(&v156[v155], "_body_if");
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v447, v370.__r_.__value_.__l.__data_, v370.__r_.__value_.__l.__size_);
    else
      v447 = v370;
    v354 = 0;
    v353 = 0;
    v355 = 0;
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
    v443.__r_.__value_.__s.__data_[8] = 0;
    v353 = (std::string *)operator new(0x18uLL);
    v354 = v353;
    v355 = v353 + 1;
    v354 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v355, (__int128 *)&v447, (__int128 *)&v448, v353);
    memset(v352, 0, sizeof(v352));
    Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v356, v319, (uint64_t)&v441, (uint64_t)v445, (uint64_t)&v436, (uint64_t)v353, (uint64_t)v354, v352);
    v158 = v357;
    if (v357)
    {
      v159 = (unint64_t *)&v357->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    if ((v445[23] & 0x80000000) != 0)
      operator delete(*(void **)v445);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    memset(v445, 0, sizeof(v445));
    v446 = 1065353216;
    v161 = (int *)__p;
    v162 = v396;
    while (2)
    {
      if (v161 != v162)
      {
        v163 = *v161;
        v164 = v31[7];
        if (0xAAAAAAAAAAAAAAABLL * ((v31[8] - v164) >> 3) <= v163)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v165 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v449, *v161, v161);
        v166 = *v161;
        v167 = v31[19];
        if (v166 >= (v31[20] - v167) >> 3)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v168 = v165;
        v169 = (const void **)(v164 + 24 * (int)v163);
        v170 = *(_QWORD *)(v167 + 8 * v166);
        v171 = (__int128 *)(v165 + 3);
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v321, (uint64_t)v169))
        {
          if (v170 >= v313 && v170 < v315)
          {
            v178 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v169);
            v129 = v319;
            if (v320 != v178)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("blob with gradient from phi has inflow gradient");
            v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
            v179 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
            if (*((char *)v179 + 63) < 0)
              std::string::__init_copy_ctor_external(&v441, (const std::string::value_type *)v179[5], v179[6]);
            else
              v441 = *(std::string *)(v179 + 5);
            if (*((char *)v168 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v442, (const std::string::value_type *)v168[3], v168[4]);
            }
            else
            {
              v183 = *v171;
              v442.__r_.__value_.__r.__words[2] = v168[5];
              *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v183;
            }
            memset(&v443, 0, sizeof(v443));
            v436 = (std::string **)&v443;
            v437 = 0;
            v443.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            v443.__r_.__value_.__l.__size_ = v443.__r_.__value_.__r.__words[0];
            v443.__r_.__value_.__r.__words[2] = v443.__r_.__value_.__r.__words[0] + 48;
            v443.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v443.__r_.__value_.__r.__words[2], (__int128 *)&v441, (__int128 *)&v443, (std::string *)v443.__r_.__value_.__l.__data_);
            merge_grads_with_phi((uint64_t)&v447, v319, (uint64_t *)&v443, v169, 0);
            v436 = (std::string **)&v443;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
            for (jj = 0; jj != -6; jj -= 3)
            {
              if (SHIBYTE(v442.__r_.__value_.__r.__words[jj + 2]) < 0)
                operator delete(*(void **)((char *)&v441 + jj * 8 + 24));
            }
            v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
            v185 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
            std::string::operator=((std::string *)(v185 + 5), &v447);
            goto LABEL_346;
          }
          v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          v129 = v319;
          v173 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
          v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          v174 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v445, (uint64_t)v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
          std::string::operator=((std::string *)(v174 + 5), (const std::string *)(v173 + 5));
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v321, (uint64_t)v169);
        }
        else
        {
          v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          v175 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
          v129 = v319;
          if ((char *)v175[8] - (char *)v175[7] != 24)
          {
            v301 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v301);
          }
          v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          v176 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441)[7];
          if (*((char *)v176 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v441, (const std::string::value_type *)*v176, v176[1]);
          }
          else
          {
            v177 = *(_OWORD *)v176;
            v441.__r_.__value_.__r.__words[2] = v176[2];
            *(_OWORD *)&v441.__r_.__value_.__l.__data_ = v177;
          }
          if (*((char *)v168 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v442, (const std::string::value_type *)v168[3], v168[4]);
          }
          else
          {
            v180 = *v171;
            v442.__r_.__value_.__r.__words[2] = v168[5];
            *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v180;
          }
          memset(&v443, 0, sizeof(v443));
          v436 = (std::string **)&v443;
          v437 = 0;
          v443.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v443.__r_.__value_.__l.__size_ = v443.__r_.__value_.__r.__words[0];
          v443.__r_.__value_.__r.__words[2] = v443.__r_.__value_.__r.__words[0] + 48;
          v443.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v443.__r_.__value_.__r.__words[2], (__int128 *)&v441, (__int128 *)&v443, (std::string *)v443.__r_.__value_.__l.__data_);
          merge_grads_with_phi((uint64_t)&v447, v319, (uint64_t *)&v443, v169, 0);
          v436 = (std::string **)&v443;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
          for (kk = 0; kk != -6; kk -= 3)
          {
            if (SHIBYTE(v442.__r_.__value_.__r.__words[kk + 2]) < 0)
              operator delete(*(void **)((char *)&v441 + kk * 8 + 24));
          }
          v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          v182 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v441);
          std::string::operator=((std::string *)v182[7], &v447);
LABEL_346:
          if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v447.__r_.__value_.__l.__data_);
        }
        ++v161;
        continue;
      }
      break;
    }
    Espresso::gradient_builder::build_gradient_segment(a1, v313 + 1, v315 - 1, a4, v129);
    v186 = (int *)__p;
    v187 = v396;
    while (v186 != v187)
    {
      v188 = *v186;
      v189 = v31[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v31[8] - v189) >> 3) <= v188)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v190 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v449, *v186, v186);
      v191 = (const void **)(v189 + 24 * (int)v188);
      v192 = v190 + 3;
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v321, (uint64_t)v191))
      {
        std::string::basic_string[abi:ne180100]<0>(&v441, "copy");
        v349 = 0;
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
        v193 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v321, (uint64_t)v191, (uint64_t)&std::piecewise_construct, (__int128 **)&v443);
        if (*((char *)v193 + 63) < 0)
          std::string::__init_copy_ctor_external(&v447, (const std::string::value_type *)v193[5], v193[6]);
        else
          v447 = *(std::string *)(v193 + 5);
        v347 = 0;
        v346 = 0;
        v348 = 0;
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v346;
        v443.__r_.__value_.__s.__data_[8] = 0;
        v346 = (std::string *)operator new(0x18uLL);
        v347 = v346;
        v348 = v346 + 1;
        v347 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v348, (__int128 *)&v447, (__int128 *)&v448, v346);
        if (*((char *)v190 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v443, (const std::string::value_type *)v190[3], v190[4]);
        }
        else
        {
          *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *v192;
          v443.__r_.__value_.__r.__words[2] = v190[5];
        }
        v344 = 0;
        v343 = 0;
        v345 = 0;
        v436 = &v343;
        v437 = 0;
        v343 = (std::string *)operator new(0x18uLL);
        v344 = v343;
        v345 = v343 + 1;
        v344 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v345, (__int128 *)&v443, (__int128 *)&v444, v343);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v350, v319, (uint64_t)&v441, (uint64_t)(v190 + 3), (uint64_t)&v349, (uint64_t)v346, (uint64_t)v347, (uint64_t *)&v343);
        v197 = v351;
        if (v351)
        {
          v198 = (unint64_t *)&v351->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v436 = &v343;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
        if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v443.__r_.__value_.__l.__data_);
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v346;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
        if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v447.__r_.__value_.__l.__data_);
        if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v441.__r_.__value_.__l.__data_);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v321, (uint64_t)v191);
      }
      else
      {
        if (v320 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a4, v191)|| (v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v191, v194 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v191, (uint64_t)&std::piecewise_construct, (__int128 **)&v441), (char *)v194[8] - (char *)v194[7] != 24))
        {
          v298 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::invalid_state_error::invalid_state_error(v298);
        }
        std::string::basic_string[abi:ne180100]<0>(&v441, "copy");
        v349 = 0;
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
        v195 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v191, (uint64_t)&std::piecewise_construct, (__int128 **)&v443)[7];
        if (*((char *)v195 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v447, (const std::string::value_type *)*v195, v195[1]);
        }
        else
        {
          v196 = *(_OWORD *)v195;
          v447.__r_.__value_.__r.__words[2] = v195[2];
          *(_OWORD *)&v447.__r_.__value_.__l.__data_ = v196;
        }
        v339 = 0;
        v338 = 0;
        v340 = 0;
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
        v443.__r_.__value_.__s.__data_[8] = 0;
        v338 = (std::string *)operator new(0x18uLL);
        v339 = v338;
        v340 = v338 + 1;
        v339 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v340, (__int128 *)&v447, (__int128 *)&v448, v338);
        if (*((char *)v190 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v443, (const std::string::value_type *)v190[3], v190[4]);
        }
        else
        {
          *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *v192;
          v443.__r_.__value_.__r.__words[2] = v190[5];
        }
        v336 = 0;
        v335 = 0;
        v337 = 0;
        v436 = &v335;
        v437 = 0;
        v335 = (std::string *)operator new(0x18uLL);
        v336 = v335;
        v337 = v335 + 1;
        v336 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v337, (__int128 *)&v443, (__int128 *)&v444, v335);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v341, v319, (uint64_t)&v441, (uint64_t)(v190 + 3), (uint64_t)&v349, (uint64_t)v338, (uint64_t)v339, (uint64_t *)&v335);
        v200 = v342;
        if (v342)
        {
          v201 = (unint64_t *)&v342->__shared_owners_;
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v436 = &v335;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
        if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v443.__r_.__value_.__l.__data_);
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
        if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v447.__r_.__value_.__l.__data_);
        if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v441.__r_.__value_.__l.__data_);
      }
      if (*((char *)v190 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v441, (const std::string::value_type *)v190[3], v190[4]);
      }
      else
      {
        *(_OWORD *)&v441.__r_.__value_.__l.__data_ = *v192;
        v441.__r_.__value_.__r.__words[2] = v190[5];
      }
      v447.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
      v203 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v191, (uint64_t)&std::piecewise_construct, (__int128 **)&v447);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v203 + 7), &v441, (__int128 *)&v442, 1uLL);
      if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v441.__r_.__value_.__l.__data_);
      ++v186;
    }
    v349 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v441, "cf_jump");
    if ((v400 & 0x80u) == 0)
      v204 = v400;
    else
      v204 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)&v447, v204 + 5);
    v5 = v319;
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v205 = &v447;
    else
      v205 = (std::string *)v447.__r_.__value_.__r.__words[0];
    if (v204)
    {
      if ((v400 & 0x80u) == 0)
        v206 = &v398;
      else
        v206 = v398;
      memmove(v205, v206, v204);
    }
    strcpy((char *)v205 + v204, "_jump");
    memset(v332, 0, sizeof(v332));
    memset(v331, 0, sizeof(v331));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v333, v319, (uint64_t)&v441, (uint64_t)&v447, (uint64_t)&v349, 0, 0, v331);
    v207 = v334;
    if (v334)
    {
      v208 = (unint64_t *)&v334->__shared_owners_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v331;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v332;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v441, "cf_end");
    if ((v400 & 0x80u) == 0)
      v210 = v400;
    else
      v210 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)&v447, v210 + 9);
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v211 = &v447;
    else
      v211 = (std::string *)v447.__r_.__value_.__r.__words[0];
    if (v210)
    {
      if ((v400 & 0x80u) == 0)
        v212 = &v398;
      else
        v212 = v398;
      memmove(v211, v212, v210);
    }
    strcpy((char *)v211 + v210, "_body_end");
    memset(v328, 0, sizeof(v328));
    memset(v327, 0, sizeof(v327));
    Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v329, v319, (uint64_t)&v441, (uint64_t)&v447, (uint64_t)&v436, 0, 0, v327);
    v213 = v330;
    if (v330)
    {
      v214 = (unint64_t *)&v330->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v441, "cf_end");
    if ((v400 & 0x80u) == 0)
      v216 = v400;
    else
      v216 = (size_t)v399;
    std::string::basic_string[abi:ne180100]((uint64_t)&v447, v216 + 4);
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v217 = &v447;
    else
      v217 = (std::string *)v447.__r_.__value_.__r.__words[0];
    if (v216)
    {
      if ((v400 & 0x80u) == 0)
        v218 = &v398;
      else
        v218 = v398;
      memmove(v217, v218, v216);
    }
    strcpy((char *)v217 + v216, "_end");
    memset(v324, 0, sizeof(v324));
    memset(v323, 0, sizeof(v323));
    Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v325, v319, (uint64_t)&v441, (uint64_t)&v447, (uint64_t)&v436, 0, 0, v323);
    v219 = v326;
    if (v326)
    {
      v220 = (unint64_t *)&v326->__shared_owners_;
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
        std::__shared_weak_count::__release_weak(v219);
      }
    }
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v324;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    v222 = (int *)__p;
    v223 = v396;
    while (v222 != v223)
    {
      v224 = *v222;
      v225 = v31[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v31[8] - v225) >> 3) <= v224)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v226 = (const void **)(v225 + 24 * (int)v224);
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v445, (uint64_t)v226))
      {
        v227 = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v449, *v222, v222);
        v441.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
        v228 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v226, (uint64_t)&std::piecewise_construct, (__int128 **)&v441)[7];
        if (*((char *)v227 + 47) < 0)
          std::string::__init_copy_ctor_external(&v441, (const std::string::value_type *)v227[3], v227[4]);
        else
          v441 = *(std::string *)((_BYTE *)v227 + 1);
        if (*((char *)v228 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v442, (const std::string::value_type *)*v228, v228[1]);
        }
        else
        {
          v229 = *(_OWORD *)v228;
          v442.__r_.__value_.__r.__words[2] = v228[2];
          *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v229;
        }
        memset(&v443, 0, sizeof(v443));
        v436 = (std::string **)&v443;
        v437 = 0;
        v443.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        v443.__r_.__value_.__l.__size_ = v443.__r_.__value_.__r.__words[0];
        v443.__r_.__value_.__r.__words[2] = v443.__r_.__value_.__r.__words[0] + 48;
        v443.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v443.__r_.__value_.__r.__words[2], (__int128 *)&v441, (__int128 *)&v443, (std::string *)v443.__r_.__value_.__l.__data_);
        merge_grads_with_phi((uint64_t)&v447, v319, (uint64_t *)&v443, v226, 0);
        if (*((char *)v228 + 23) < 0)
          operator delete((void *)*v228);
        v230 = *(_OWORD *)&v447.__r_.__value_.__l.__data_;
        v228[2] = v447.__r_.__value_.__r.__words[2];
        *(_OWORD *)v228 = v230;
        *((_BYTE *)&v447.__r_.__value_.__s + 23) = 0;
        v447.__r_.__value_.__s.__data_[0] = 0;
        v436 = (std::string **)&v443;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
        v231 = 0;
        v5 = v319;
        do
        {
          if (SHIBYTE(v442.__r_.__value_.__r.__words[v231 + 2]) < 0)
            operator delete(*(void **)((char *)&v441 + v231 * 8 + 24));
          v231 -= 3;
        }
        while (v231 != -6);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v445, (uint64_t)v226);
      }
      ++v222;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v445);
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v370.__r_.__value_.__l.__data_);
    v37 = v312;
    if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v391.__r_.__value_.__l.__data_);
    if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v392.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)v449);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v451);
    if (__p)
    {
      v396 = (int *)__p;
      operator delete(__p);
    }
    if ((char)v400 < 0)
      operator delete(v398);
LABEL_634:
    v433 = v37[4];
LABEL_650:
    v295 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v296 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
    v7 = v433;
  }
  while (v433 > v435[0]);
}

void sub_1914C20C4()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  if (SLOBYTE(STACK[0x36F]) < 0)
  {
    operator delete((void *)STACK[0x358]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 160);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x7E0]);
    JUMPOUT(0x1914C2DACLL);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1914C22A4()
{
  uint64_t v0;
  void *v1;

  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
  v1 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v1;
    operator delete(v1);
  }
  if (SLOBYTE(STACK[0x51F]) < 0)
    JUMPOUT(0x1914C2DA0);
  JUMPOUT(0x1914C2DA4);
}

void sub_1914C22AC()
{
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  JUMPOUT(0x1914C2D48);
}

void sub_1914C22E0()
{
  JUMPOUT(0x1914C26F4);
}

void sub_1914C22E8()
{
  uint64_t v0;

  STACK[0x7E0] = (unint64_t)&STACK[0x440];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x7E0]);
  v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7A0] + v0 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7A0] + v0 + 24));
    v0 -= 24;
    if (v0 == -48)
      JUMPOUT(0x1914C2788);
  }
}

void sub_1914C22F0()
{
  STACK[0x830] = (unint64_t)&STACK[0x3C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    JUMPOUT(0x1914C2784);
  JUMPOUT(0x1914C2788);
}

void sub_1914C2304()
{
  if (SLOBYTE(STACK[0x567]) < 0)
    JUMPOUT(0x1914C2430);
  JUMPOUT(0x1914C2BF8);
}

void sub_1914C2354()
{
  uint64_t v0;

  STACK[0x830] = (unint64_t)&STACK[0x5E0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  STACK[0x830] = (unint64_t)&STACK[0x5F8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  JUMPOUT(0x1914C2BF8);
}

void sub_1914C2374()
{
  uint64_t v0;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x830]);
  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  JUMPOUT(0x1914C23ECLL);
}

void sub_1914C237C()
{
  JUMPOUT(0x1914C2384);
}

void sub_1914C2390()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 208) = &STACK[0x580];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  *(_QWORD *)(v0 - 208) = &STACK[0x598];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  if (SLOBYTE(STACK[0x5C7]) < 0)
    JUMPOUT(0x1914C2430);
  JUMPOUT(0x1914C2BF8);
}

void sub_1914C23CC()
{
  unint64_t v0;

  STACK[0x600] = v0;
  JUMPOUT(0x1914C23D4);
}

void sub_1914C249C()
{
  __cxa_end_catch();
  JUMPOUT(0x1914C2D84);
}

void sub_1914C24B8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1914C2DACLL);
}

void sub_1914C24D8()
{
  uint64_t v0;

  STACK[0x810] = (unint64_t)&STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  STACK[0x810] = (unint64_t)&STACK[0x228];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  JUMPOUT(0x1914C2CB8);
}

void sub_1914C24F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  STACK[0x810] = (unint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  STACK[0x810] = (unint64_t)&a62;
  JUMPOUT(0x1914C2B34);
}

void sub_1914C2510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a70;

  STACK[0x810] = (unint64_t)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  STACK[0x810] = (unint64_t)&a70;
  JUMPOUT(0x1914C2B34);
}

void sub_1914C253C()
{
  unint64_t v0;

  STACK[0x448] = v0;
  JUMPOUT(0x1914C2658);
}

void sub_1914C2548()
{
  if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x497]) < 0)
      operator delete((void *)STACK[0x480]);
    if (SLOBYTE(STACK[0x4AF]) < 0)
      operator delete((void *)STACK[0x498]);
    JUMPOUT(0x1914C2D48);
  }
  JUMPOUT(0x1914C2CECLL);
}

void sub_1914C255C()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x338] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 240);
  if (SLOBYTE(STACK[0x847]) < 0)
    operator delete((void *)STACK[0x830]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  JUMPOUT(0x1914C2CD0);
}

void sub_1914C256C()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x430] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  STACK[0x7E0] = (unint64_t)&STACK[0x440];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x7E0]);
  v1 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7A0] + v1 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7A0] + v1 + 24));
    v1 -= 24;
    if (v1 == -48)
      JUMPOUT(0x1914C2788);
  }
}

void sub_1914C257C()
{
  STACK[0x830] = (unint64_t)&STACK[0x428];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x830]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  JUMPOUT(0x1914C2650);
}

void sub_1914C258C()
{
  uint64_t v0;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  JUMPOUT(0x1914C26F4);
}

void sub_1914C25DC()
{
  JUMPOUT(0x1914C2770);
}

void sub_1914C25E4()
{
  unint64_t v0;

  STACK[0x3C8] = v0;
  JUMPOUT(0x1914C2770);
}

void sub_1914C25F0()
{
  JUMPOUT(0x1914C2658);
}

void sub_1914C25F8()
{
  if (SLOBYTE(STACK[0x7BF]) < 0)
    JUMPOUT(0x1914C2CFCLL);
  JUMPOUT(0x1914C2D00);
}

void sub_1914C2618()
{
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  JUMPOUT(0x1914C2CF0);
}

void sub_1914C2624()
{
  uint64_t v0;

  STACK[0x810] = (unint64_t)&STACK[0x318];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x810]);
  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  *(_QWORD *)(v0 - 240) = &STACK[0x330];
  JUMPOUT(0x1914C26ECLL);
}

void sub_1914C268C()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x320] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x810]);
  if (*(char *)(v1 - 217) < 0)
    operator delete(*(void **)(v1 - 240));
  JUMPOUT(0x1914C26C4);
}

void sub_1914C2698()
{
  STACK[0x390] = (unint64_t)&STACK[0x3A8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x390]);
  if (SLOBYTE(STACK[0x847]) < 0)
    operator delete((void *)STACK[0x830]);
  STACK[0x830] = (unint64_t)&STACK[0x3C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    JUMPOUT(0x1914C2784);
  JUMPOUT(0x1914C2788);
}

void sub_1914C26D0()
{
  JUMPOUT(0x1914C2CE0);
}

void sub_1914C26DC()
{
  unint64_t v0;

  STACK[0x3B0] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x390]);
  if (SLOBYTE(STACK[0x847]) < 0)
    operator delete((void *)STACK[0x830]);
  JUMPOUT(0x1914C2768);
}

void sub_1914C2718()
{
  STACK[0x358] = (unint64_t)&STACK[0x3E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = (unint64_t)&STACK[0x400];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  if (SLOBYTE(STACK[0x7B7]) < 0)
    JUMPOUT(0x1914C2CDCLL);
  JUMPOUT(0x1914C2CE0);
}

void sub_1914C2798()
{
  JUMPOUT(0x1914C2D58);
}

void sub_1914C27A0()
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x4B0]);
  JUMPOUT(0x1914C2D58);
}

void sub_1914C27B4()
{
  JUMPOUT(0x1914C2DA4);
}

void sub_1914C27BC()
{
  if (SLOBYTE(STACK[0x507]) < 0)
    JUMPOUT(0x1914C2DA0);
  JUMPOUT(0x1914C2DA4);
}

void sub_1914C27DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    JUMPOUT(0x1914C2DA0);
  JUMPOUT(0x1914C2DA4);
}

void sub_1914C27F4()
{
  JUMPOUT(0x1914C2D30);
}

void sub_1914C27FC()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1914C2C9CLL);
  JUMPOUT(0x1914C2D18);
}

void sub_1914C2868()
{
  uint64_t v0;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7A0] + v0 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7A0] + v0 + 24));
    v0 -= 24;
    if (v0 == -48)
      JUMPOUT(0x1914C2D18);
  }
}

void sub_1914C28C8()
{
  uint64_t v0;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x790]);
  v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7E0] + v0 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7E0] + v0 + 24));
    v0 -= 24;
    if (v0 == -48)
      JUMPOUT(0x1914C2CC8);
  }
}

void sub_1914C292C()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1914C2D18);
}

void sub_1914C2958()
{
  STACK[0x790] = (unint64_t)&STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x790]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  JUMPOUT(0x1914C2AE4);
}

void sub_1914C29A0()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x270] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x810]);
  if (*(char *)(v1 - 217) < 0)
    operator delete(*(void **)(v1 - 240));
  JUMPOUT(0x1914C2CB8);
}

void sub_1914C29AC()
{
  uint64_t v0;

  STACK[0x790] = (unint64_t)&STACK[0x810];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x790]);
  v0 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7E0] + v0 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7E0] + v0 + 24));
    v0 -= 24;
    if (v0 == -48)
      JUMPOUT(0x1914C2CC8);
  }
}

void sub_1914C2A08()
{
  uint64_t v0;
  uint64_t v1;

  STACK[0x830] = v0 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  v1 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7A0] + v1 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7A0] + v1 + 24));
    v1 -= 24;
    if (v1 == -48)
      JUMPOUT(0x1914C2D84);
  }
}

void sub_1914C2A84()
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x790]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  JUMPOUT(0x1914C2AE4);
}

void sub_1914C2AEC()
{
  unint64_t v0;

  STACK[0x818] = v0;
  JUMPOUT(0x1914C2AF4);
}

void sub_1914C2B58()
{
  uint64_t v0;
  void *v1;

  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
    v1 = (void *)STACK[0x4D8];
    if (STACK[0x4D8])
    {
      STACK[0x4E0] = (unint64_t)v1;
      operator delete(v1);
    }
    if (SLOBYTE(STACK[0x51F]) < 0)
      JUMPOUT(0x1914C2DA0);
    JUMPOUT(0x1914C2DA4);
  }
  JUMPOUT(0x1914C2D0CLL);
}

void sub_1914C2B70()
{
  if (SLOBYTE(STACK[0x7B7]) < 0)
    JUMPOUT(0x1914C2C54);
  JUMPOUT(0x1914C2D84);
}

void sub_1914C2B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 200) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  v2 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x7A0] + v2 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x7A0] + v2 + 24));
    v2 -= 24;
    if (v2 == -48)
      JUMPOUT(0x1914C2D18);
  }
}

void sub_1914C2BDC()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    JUMPOUT(0x1914C2CC4);
  JUMPOUT(0x1914C2CC8);
}

void sub_1914C2BF4()
{
  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  JUMPOUT(0x1914C2D18);
}

void sub_1914C2C2C()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x1914C2D84);
}

void sub_1914C2C64()
{
  uint64_t v0;
  void *v1;

  if ((SLOBYTE(STACK[0x7B7]) & 0x80000000) == 0)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(v0 - 208);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v0 - 160);
    v1 = (void *)STACK[0x4D8];
    if (STACK[0x4D8])
    {
      STACK[0x4E0] = (unint64_t)v1;
      operator delete(v1);
    }
    if (SLOBYTE(STACK[0x51F]) < 0)
      JUMPOUT(0x1914C2DA0);
    JUMPOUT(0x1914C2DA4);
  }
  JUMPOUT(0x1914C2D0CLL);
}

void sub_1914C2C7C()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1914C2C9CLL);
  JUMPOUT(0x1914C2D18);
}

void sub_1914C2CAC()
{
  JUMPOUT(0x1914C2CC8);
}

void sub_1914C2CB4()
{
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x830]);
  JUMPOUT(0x1914C2CD0);
}

void sub_1914C2D14()
{
  void *v0;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x358]);
  v0 = (void *)STACK[0x7E0];
  if (STACK[0x7E0])
  {
    STACK[0x7E8] = (unint64_t)v0;
    operator delete(v0);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x508]);
  JUMPOUT(0x1914C2DA4);
}

void sub_1914C2D3C()
{
  JUMPOUT(0x1914C2DACLL);
}

void sub_1914C2D78()
{
  JUMPOUT(0x1914C2D68);
}

void sub_1914C2D80(_Unwind_Exception *a1)
{
  STACK[0x7A0] = (unint64_t)&STACK[0x7E0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x7A0]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x740]);
  _Unwind_Resume(a1);
}

void sum_grad_contribs(std::string *this, uint64_t *a2, _QWORD *a3, const void **a4)
{
  __int128 *v8;
  __int128 v9;
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string::size_type size;
  int v20;
  __int128 *v21;
  std::string __p;
  std::string v23;
  _DWORD v24[2];
  void *v25[2];
  unsigned __int8 v26;

  v8 = (__int128 *)*a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v25, v10 + 12);
  if ((v26 & 0x80u) != 0)
    v11 = (void **)v25[0];
  if (v10)
  {
    if (*((char *)a4 + 23) >= 0)
      v12 = a4;
    else
      v12 = *a4;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/grad_accum@");
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) >= 2)
  {
    v13 = 1;
    v14 = 24;
    do
    {
      std::to_string(&v23, (uint64_t)(*(_QWORD *)(a2[10] + 40) - *(_QWORD *)(a2[10] + 32)) >> 4);
      if ((v26 & 0x80u) == 0)
        v15 = v25;
      else
        v15 = (void **)v25[0];
      if ((v26 & 0x80u) == 0)
        v16 = v26;
      else
        v16 = (std::string::size_type)v25[1];
      v17 = std::string::insert(&v23, 0, (const std::string::value_type *)v15, v16);
      v18 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
      size = v17->__r_.__value_.__l.__size_;
      v24[0] = v17->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
      v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v21 = (__int128 *)*a3;
      if (v20 < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v18, size);
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        __p.__r_.__value_.__l.__size_ = size;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v24[0];
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v20;
      }
      Espresso::sequential_builder::elementwise_op(0, a2, (uint64_t)this, (uint64_t)v21 + v14, (uint64_t)&__p, (uint64_t)&v23);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        operator delete(this->__r_.__value_.__l.__data_);
      *this = v23;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v20 < 0)
LABEL_34:
          operator delete(v18);
      }
      else if (v20 < 0)
      {
        goto LABEL_34;
      }
      ++v13;
      v14 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3));
  }
  if ((char)v26 < 0)
    operator delete(v25[0]);
}

void sub_1914C3018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_stack_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_rename_phi_io>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&>(char *a1, _QWORD *a2, _QWORD *a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, *a2, *a3);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&,unsigned long const&,unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("backprop interval [%lu, %lu) crosses control flow block boundary [%lu, %lu)", a1, a2, a3, a4);
}

void segment_input_blob_indices(char **a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5)
{
  char **v5;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;

  if (a4 > a5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("start_layer_idx = %d > end_layer_idx = %d", a4, a5);
  v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 > a4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a4;
    do
    {
      v11 = a2[13];
      if (0xAAAAAAAAAAAAAAABLL * ((a2[14] - v11) >> 3) <= v10)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v12 = (int **)(v11 + 24 * v10);
      v13 = *v12;
      v14 = v12[1];
      while (v13 != v14)
      {
        v15 = *v13;
        v16 = a2[7];
        if (0xAAAAAAAAAAAAAAABLL * ((a2[8] - v16) >> 3) <= *v13)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, v16 + 24 * v15))
        {
          v17 = a2[19];
          if (v15 >= (unint64_t)((a2[20] - v17) >> 3))
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v18 = *(_QWORD *)(v17 + 8 * v15);
          if (v18 > v10 || v18 < a4)
          {
            if ((unint64_t)v9 >= v8)
            {
              v21 = (v9 - v7) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v22)
                v22 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
              if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
                v23 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v23 = v22;
              if (v23)
                v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
              else
                v24 = 0;
              v25 = (char *)(v23 + 4 * v21);
              *(_DWORD *)v25 = v15;
              v20 = v25 + 4;
              while (v9 != v7)
              {
                v26 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              v8 = v23 + 4 * v24;
              *a1 = v25;
              a1[1] = v20;
              a1[2] = (char *)v8;
              if (v7)
                operator delete(v7);
              v7 = v25;
              v5 = a1;
            }
            else
            {
              *(_DWORD *)v9 = v15;
              v20 = v9 + 4;
            }
            v5[1] = v20;
            v9 = v20;
          }
        }
        ++v13;
      }
      ++v10;
    }
    while (v10 != a5);
  }
}

void sub_1914C3380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void fill_and_extract_grads_for_inputs(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t *a5, uint64_t **a6, _QWORD *a7, _QWORD *a8)
{
  int *v12;
  uint64_t **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  const std::string *v24;
  uint64_t *v25;
  __int128 v26;
  size_t size;
  std::string *p_str;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  __int128 v37;
  std::string *v38;
  uint64_t *v39;
  const char *v40;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  std::string __str;
  _DWORD v55[8];
  char v56;
  std::string **v57;
  char v58;
  std::string v59;
  uint64_t v60;
  std::string v61;
  __int128 v62;

  *(_QWORD *)&v62 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3 != a4)
  {
    v12 = a3;
    v14 = a6 + 1;
    v40 = "contributions from phi and from actual backpropagator exist at same time";
    do
    {
      v15 = *v12;
      v16 = *(_QWORD *)(a2 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 64) - v16) >> 3) <= v15)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v17 = v16 + 24 * (int)v15;
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a8, v17))
      {
        v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a7, v17);
        v19 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a6, (_QWORD *)v17);
        if (v18)
        {
          if (v14 != v19)
          {
            *(_QWORD *)v55 = v17;
            v20 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55);
            if (v20[8] != v20[7])
              goto LABEL_59;
          }
        }
        else
        {
          if (v14 == v19)
          {
            *(_QWORD *)v55 = v17;
            v21 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v21 + 7), 0, 0, 0);
          }
          *(_QWORD *)v55 = v17;
          v22 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55);
          if (v22[8] == v22[7])
          {
            *(_QWORD *)&v55[5] = 0xFFFFFFFF00000001;
            v55[7] = 0;
            memset(v55, 0, 20);
            v56 = 0;
            if (*(char *)(v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
            }
            else
            {
              v26 = *(_OWORD *)v17;
              v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
              *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
            }
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
            else
              size = v53.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 15);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (size)
            {
              if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v29 = &v53;
              else
                v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
              memmove(p_str, v29, size);
            }
            strcpy((char *)p_str + size, "/grad_container");
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(__p, "fill");
            if (*(char *)(v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
            }
            else
            {
              v30 = *(_OWORD *)v17;
              v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
              *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v30;
            }
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
            v59.__r_.__value_.__s.__data_[8] = 0;
            v46 = (std::string *)operator new(0x18uLL);
            v47 = v46;
            v48 = v46 + 1;
            v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (__int128 *)&v61, &v62, v46);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v59, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v59 = __str;
            v43 = 0;
            v44 = 0;
            v45 = 0;
            v57 = &v43;
            v58 = 0;
            v43 = (std::string *)operator new(0x18uLL);
            v44 = v43;
            v45 = v43 + 1;
            v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (__int128 *)&v59, (__int128 *)&v60, v43);
            Espresso::sequential_builder::add<Espresso::fill_params_t>(&v51, a5, (uint64_t)__p, (uint64_t)&__str, (uint64_t)v55, (uint64_t)v46, (uint64_t)v47, (uint64_t *)&v43);
            v31 = v52;
            if (v52)
            {
              p_shared_owners = (unint64_t *)&v52->__shared_owners_;
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v57 = &v43;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            if (v50 < 0)
              operator delete(__p[0]);
            __p[0] = (void *)v17;
            v34 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
            v35 = v34;
            v36 = v34[8];
            if (v36 >= v34[9])
            {
              v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v34 + 7, (uint64_t)&__str);
            }
            else
            {
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v34[8], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              }
              else
              {
                v37 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                v36[2] = __str.__r_.__value_.__r.__words[2];
                *(_OWORD *)v36 = v37;
              }
              v38 = (std::string *)(v36 + 3);
              v35[8] = v36 + 3;
            }
            v35[8] = (uint64_t *)v38;
            __p[0] = (void *)v17;
            v39 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v17, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
            std::string::operator=((std::string *)(v39 + 5), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          else
          {
            *(_QWORD *)v55 = v17;
            v23 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55);
            if ((char *)v23[8] - (char *)v23[7] != 24)
            {
              v40 = "More than one gradient contribution exists";
LABEL_59:
              Espresso::throw_exception_selector<Espresso::invalid_state_error>(v40);
            }
            *(_QWORD *)v55 = v17;
            v24 = (const std::string *)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55)[7];
            *(_QWORD *)v55 = v17;
            v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v17, (uint64_t)&std::piecewise_construct, (__int128 **)v55);
            std::string::operator=((std::string *)(v25 + 5), v24);
          }
        }
      }
      ++v12;
    }
    while (v12 != a4);
  }
}

void sub_1914C3970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)(v45 + 64) = v44;
  if (a44 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a17);
  _Unwind_Resume(a1);
}

uint64_t get_layer_grad_name(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 5);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/grad");
  return result;
}

void merge_grads_with_phi(uint64_t a1, uint64_t *a2, uint64_t *a3, const void **a4, int a5)
{
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  size_t v20;
  std::string *v21;
  std::string *p_p;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  unsigned __int8 v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string __p;
  std::string **v46;
  char v47;
  std::string v48;
  uint64_t v49;
  std::string v50;
  uint64_t v51;
  std::string v52;
  __int128 v53;

  *(_QWORD *)&v53 = *MEMORY[0x1E0C80C00];
  if (*((char *)a4 + 23) >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v10 + 10);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a4 + 23) >= 0)
      v12 = a4;
    else
      v12 = *a4;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/grad_phi@");
  std::to_string(&v52, (uint64_t)(*(_QWORD *)(a2[10] + 40) - *(_QWORD *)(a2[10] + 32)) >> 4);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v52;
  else
    v13 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    size = v52.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v35, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v35, "phi_virtual");
  v41 = 0;
  v42 = 0;
  v40 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v52 = __p;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  v50.__r_.__value_.__s.__data_[8] = 0;
  v37 = (std::string *)operator new(0x18uLL);
  v38 = v37;
  v39 = v37 + 1;
  v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (__int128 *)&v52, &v53, v37);
  Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v43, a2, (uint64_t)&v35, (uint64_t)&__p, (uint64_t)&v48, v40, v41, (uint64_t *)&v37);
  v17 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (a5)
      goto LABEL_33;
LABEL_44:
    *(std::string *)a1 = __p;
    return;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (!a5)
    goto LABEL_44;
LABEL_33:
  Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v35, (uint64_t)&__p);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v35.__r_.__value_.__s.__data_[0])
  {
    if ((v36 & 0x80u) == 0)
      v20 = v36;
    else
      v20 = v35.__r_.__value_.__r.__words[2];
    v21 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v20 + 3);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (!v20)
      goto LABEL_55;
    if ((v36 & 0x80u) == 0)
      p_p = (std::string *)&v35.__r_.__value_.__r.__words[1];
    else
      p_p = (std::string *)v35.__r_.__value_.__l.__size_;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v20 = __p.__r_.__value_.__l.__size_;
    v21 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v20 + 3);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (!v20)
      goto LABEL_55;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  memmove(v21, p_p, v20);
LABEL_55:
  *(_DWORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 7365471;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v52;
  std::string::basic_string[abi:ne180100]<0>(&v52, "copy");
  v32 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v50 = __p;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  v48.__r_.__value_.__s.__data_[8] = 0;
  v29 = (std::string *)operator new(0x18uLL);
  v30 = v29;
  v31 = v29 + 1;
  v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (__int128 *)&v50, (__int128 *)&v51, v29);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v48 = *(std::string *)a1;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v46 = &v26;
  v47 = 0;
  v26 = (std::string *)operator new(0x18uLL);
  v27 = v26;
  v28 = v26 + 1;
  v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)&v48, (__int128 *)&v49, v26);
  Espresso::sequential_builder::add<Espresso::copy_params_t>(&v33, a2, (uint64_t)&v52, a1, (uint64_t)&v32, (uint64_t)v29, (uint64_t)v30, (uint64_t *)&v26);
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v46 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete((void *)v35.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1914C4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(v43 - 160) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 160));
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (*(char *)(v43 - 73) < 0)
    operator delete(*(void **)(v43 - 96));
  if (*(char *)(v42 + 23) < 0)
    operator delete(*(void **)v42);
  if (a27 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void sub_1914C41A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 73) < 0)
    operator delete(*(void **)(v23 - 96));
  if (a23 < 0)
    JUMPOUT(0x1914C4198);
  JUMPOUT(0x1914C419CLL);
}

void sub_1914C41D0()
{
  JUMPOUT(0x1914C419CLL);
}

void Espresso::sequential_builder::add<Espresso::cf_else_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914C43CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1914C464C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914C4858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fill_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914C4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_prepare_gradient_builder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t MRLModelCreate(uint64_t a1)
{
  const __CFNumber *Value;
  const __CFNumber *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  char *v16;
  const __CFString *v17;
  CFIndex v18;
  CFIndex v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  void *__p[2];
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  void *valuePtr[2];
  char v38;
  uint64_t v39;
  void *v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  __int16 v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  int v53;

  std::mutex::lock(&globalMutex(void)::mutex);
  if (a1)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("LayerParametersEspresso")))
    {
      valuePtr[0] = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("LayerParametersEspressoSize"));
      CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
      v39 = 0;
      v3 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("LayerParametersEspresso"));
      CFNumberGetValue(v3, kCFNumberLongLongType, &v39);
      a1 = operator new();
      v4 = v39;
      v5 = valuePtr[0];
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 4;
      v6 = operator new();
      *(_QWORD *)v6 = &off_1E2D4D8B8;
      *(_DWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = v6 + 48;
      *(_QWORD *)(v6 + 96) = 0;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 80) = v6 + 88;
      *(_QWORD *)(v6 + 128) = 0;
      *(_QWORD *)(v6 + 136) = 0;
      *(_QWORD *)(v6 + 120) = 0;
      *(_BYTE *)(v6 + 12) = 0;
      *(_DWORD *)(v6 + 72) = 0;
      *(_DWORD *)(v6 + 112) = 0;
      *(_OWORD *)(a1 + 32) = xmmword_191A93690;
      *(_QWORD *)(a1 + 24) = v6;
      *(_DWORD *)(a1 + 48) = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 72), "");
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 32;
      *(_QWORD *)(a1 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 181) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 192) = v5;
      *(_QWORD *)(a1 + 200) = v4;
      *(_QWORD *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 220) = 0x200000046;
      *(_BYTE *)(a1 + 228) = 0;
      maxFeatureVectors = 2;
      if (*(_DWORD *)v4)
      {
        v31 = 90;
      }
      else
      {
        v7 = *(_DWORD *)(v4 + 8) == 7;
        v8 = *(_DWORD *)(v4 + 632 * ((int)v5 - 1) + 16) << v7;
        *(_DWORD *)(a1 + 36) = v8;
        *(_BYTE *)(a1 + 188) = 0;
        v9 = 1;
        *(_DWORD *)(a1 + 184) = 1;
        *(_DWORD *)(a1 + 20) = -1;
        *(_BYTE *)(a1 + 152) = 0;
        v10 = *(_DWORD *)(v4 + 36);
        *(_BYTE *)(a1 + 216) = v7;
        v11 = *(_DWORD *)(v4 + 12);
        *(_DWORD *)(a1 + 32) = v11;
        *(_DWORD *)(a1 + 40) = v8;
        if (*(_BYTE *)(v4 + 20))
        {
          *(_DWORD *)a1 = 1;
          v12 = 1;
        }
        else
        {
          *(_DWORD *)a1 = 6;
          v24 = (_QWORD *)operator new();
          *v24 = 0;
          v24[1] = 0;
          v24[2] = 0;
          v40 = v24;
          v41.i8[0] = 0;
          v25 = operator new(0x18uLL);
          v24[1] = v25 + 3;
          v24[2] = v25 + 3;
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          *v24 = v25;
          *(_QWORD *)(a1 + 208) = v24;
          v26 = *(_QWORD *)(a1 + 200);
          if (v26)
            v27 = *(_DWORD *)(v26 + 28);
          else
            v27 = 1;
          std::vector<float>::resize(v25, *(int *)(a1 + 32) * (uint64_t)v27);
          v12 = 0;
          v9 = *(_DWORD *)a1;
          v11 = *(_DWORD *)(a1 + 32);
          v8 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 16) = 16;
        *(_BYTE *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 8) = MRLModelWrapper::makeNewEncoder((MRLModelWrapper *)a1, v9, (int *)(a1 + 32), (int *)(a1 + 36), v11, v8);
        v28 = *(_DWORD *)(a1 + 32);
        v29 = *(_DWORD *)a1;
        LODWORD(v40) = *(_DWORD *)(a1 + 16);
        HIDWORD(v40) = v28;
        v41 = vrev64_s32(*(int32x2_t *)(a1 + 36));
        v42 = 0x3F6666663C23D70ALL;
        v43 = 0x3FEFF7CED916872BLL;
        v44 = 0;
        v45 = v29;
        v46 = v12;
        v47 = 256;
        v48 = 0;
        v49 = v10;
        v50 = 0;
        v51 = v4;
        v52 = (int)v5;
        v53 = 0;
        if ((v10 & 7) == 0)
        {
          v30 = operator new();
          SentenceRecognizer::SentenceRecognizer(v30, &v40, *(_QWORD *)(a1 + 24));
          *(_QWORD *)(a1 + 120) = v30;
          *(_BYTE *)(v30 + 28) = 0;
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v30 + 40) + 280))(*(_QWORD *)(v30 + 40), 0);
          *(_BYTE *)(a1 + 188) = 1;
          MRLModelWrapper::cleanupAllBuffers(a1);
          *(_BYTE *)(a1 + 188) = 0;
          goto LABEL_40;
        }
        v31 = 234;
      }
      exitFramework(v31);
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("fileLocation")))
    {
      v13 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("fileLocation"));
      Length = CFStringGetLength(v13);
      v15 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v16 = (char *)operator new[]();
      CFStringGetCString(v13, v16, v15, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(&v40, v16);
      v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "None", 0);
      if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("embeddingFileLocation")))
        v17 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("embeddingFileLocation"));
      v18 = CFStringGetLength(v17);
      v19 = CFStringGetMaximumSizeForEncoding(v18, 0x8000100u) + 1;
      v20 = (char *)operator new[]();
      CFStringGetCString(v17, v20, v19, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(valuePtr, v20);
      a1 = operator new();
      if (v42 >= 0)
        v21 = (char *)&v40;
      else
        v21 = (char *)v40;
      std::string::basic_string[abi:ne180100]<0>(v35, v21);
      if (v38 >= 0)
        v22 = (char *)valuePtr;
      else
        v22 = (char *)valuePtr[0];
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 4;
      v23 = operator new();
      *(_QWORD *)v23 = &off_1E2D4D8B8;
      *(_DWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_QWORD *)(v23 + 64) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 32) = 0;
      *(_QWORD *)(v23 + 40) = v23 + 48;
      *(_QWORD *)(v23 + 96) = 0;
      *(_QWORD *)(v23 + 104) = 0;
      *(_QWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 80) = v23 + 88;
      *(_QWORD *)(v23 + 128) = 0;
      *(_QWORD *)(v23 + 136) = 0;
      *(_QWORD *)(v23 + 120) = 0;
      *(_BYTE *)(v23 + 12) = 0;
      *(_DWORD *)(v23 + 72) = 0;
      *(_DWORD *)(v23 + 112) = 0;
      *(_QWORD *)(a1 + 24) = v23;
      *(_OWORD *)(a1 + 32) = xmmword_191A93690;
      *(_DWORD *)(a1 + 48) = 0;
      if (SHIBYTE(v36) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 72), (const std::string::value_type *)v35[0], (std::string::size_type)v35[1]);
      }
      else
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v35;
        *(_QWORD *)(a1 + 88) = v36;
      }
      if (SHIBYTE(v34) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 96), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)(a1 + 96) = *(_OWORD *)__p;
        *(_QWORD *)(a1 + 112) = v34;
      }
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 32;
      *(_QWORD *)(a1 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 181) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_BYTE *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 220) = 0x200000046;
      *(_BYTE *)(a1 + 228) = 0;
      MRLModelWrapper::MRLModelInitialize((MRLModelWrapper *)a1);
      if (SHIBYTE(v34) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36) < 0)
        operator delete(v35[0]);
      CFRelease(v17);
      if (v38 < 0)
        operator delete(valuePtr[0]);
      MEMORY[0x19401CD78](v20, 0x1000C8077774924);
      if (SHIBYTE(v42) < 0)
        operator delete(v40);
      MEMORY[0x19401CD78](v16, 0x1000C8077774924);
    }
    else
    {
      a1 = 0;
    }
  }
LABEL_40:
  std::mutex::unlock(&globalMutex(void)::mutex);
  return a1;
}

void sub_1914C54A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

uint64_t std::vector<int>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3;
  std::vector<int> *v5;
  const int *end;
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  std::__wrap_iter<const int *>::iterator_type v9;
  const int *v10;
  std::vector<int>::pointer v11;
  int v12;
  const int *begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  std::__split_buffer<int> __v;

  v3 = __x;
  v5 = this;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
    {
      v20 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == __position.__i_)
          v23 = 1;
        else
          v23 = v15 >> 1;
        v24 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        v21 = (int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *v21 = *v3;
    __v.__end_ = v21 + 1;
    std::vector<int>::__swap_out_circular_buffer(v5, &__v, (std::vector<int>::pointer)__position.__i_);
    this = (std::vector<int> *)__v.__first_;
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      this = (std::vector<int> *)memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (__position.__i_ <= v3)
      v3 += v5->__end_ > v3;
    *__position.__i_ = *v3;
  }
  return (std::vector<int>::iterator)this;
}

void sub_1914C56C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeVectors(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  void **v21;
  const void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  int v34;
  void *__p;
  char v36;
  void **v37[3];
  int v38;
  uint64_t v39;
  _QWORD v40[3];

  std::mutex::lock(&globalMutex(void)::mutex);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence MRLModelRecognizeVectors");
  if (!a1)
    exitFramework(992);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!a4)
  {
    v34 = 991;
    goto LABEL_29;
  }
  if (!a2)
  {
    v34 = 99;
LABEL_29:
    exitFramework(v34);
  }
  if (*(_BYTE *)(a1 + 216))
  {
    MRLModelWrapper::optionalResizeRealloc(a1, (const char *)*(unsigned int *)(a1 + 220));
    v8 = *(_QWORD *)(a1 + 176);
    MRLModelWrapper::clearState(*(_QWORD *)(a1 + 120), v8);
    if (*(_DWORD *)(a1 + 220) - 1 >= (int)a3)
      v9 = a3;
    else
      v9 = *(_DWORD *)(a1 + 220) - 1;
    MRLModelWrapper::restoreState(*(_QWORD *)(a1 + 120), v8);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
    MRLModelWrapper::optionalResizeRealloc(a1, (const char *)*(unsigned int *)(a1 + 220));
    v10 = *(uint64_t **)(a1 + 128);
    if ((uint64_t)(*(_QWORD *)(*v10 + 8) - *(_QWORD *)*v10) >> 3 < (unint64_t)(int)a3)
      MRLModelWrapper::resizeXs((MRLModelWrapper *)a1, a3);
    memset(v40, 0, sizeof(v40));
    v11 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 264))(v11);
    if ((int)a3 >= 1)
    {
      v13 = 0;
      v14 = 4 * v12;
      do
      {
        bzero(*(void **)(*(_QWORD *)*v10 + v13), v14);
        memcpy(*(void **)(*(_QWORD *)*v10 + v13), *(const void **)(a2 + v13), v14);
        v13 += 8;
      }
      while (8 * a3 != v13);
    }
    v15 = *(unsigned __int8 *)(a1 + 152);
    v39 = 0;
    v38 = 0;
    if ((v16 & 1) == 0
    {
      MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize = 0;
      *(_QWORD *)algn_1EE219CD8 = 0;
      qword_1EE219CE0 = 0;
      __cxa_atexit((void (*)(void *))std::vector<VVector<float>>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize, &dword_190DAF000);
    }
    if ((v17 & 1) == 0
    {
      MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy = 0;
      *(_QWORD *)algn_1EE219CF8 = 0;
      qword_1EE219D00 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy, &dword_190DAF000);
    }
    SentenceRecognizer::recognizeSequence(*(_QWORD *)(a1 + 120), *v10, (uint64_t)v40, &MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummyCsUnUsedInRecognize, (uint64_t)&v39, (float *)&v39 + 1, a3, v15 == 0, 0, (uint64_t)&v38, (uint64_t)&MRLModelWrapper::MRLModelRecognizeUnthreadedBidir(float const**,int,BOOL)::dummy);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
    v19 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    memset(v37, 0, sizeof(v37));
    std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v37, *v19, v19[1], v19[1] - *v19);
    v20 = (a3 << 32) - 0x100000000;
    v21 = v37[0];
    v22 = *(void **)((char *)v37[0] + (v20 >> 29));
    v23 = *(void **)(a1 + 168);
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 272))(v24);
    memcpy(v23, v22, 4 * v25);
    maxFeatureVectors = 2;
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
    operator delete(v21);
    v37[0] = (void **)v40;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v37);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 272))(v26);
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    if (v9 >= 1)
    {
      v30 = (_QWORD *)v29;
      v31 = 0;
      v32 = 4 * v27;
      do
      {
        memcpy(a4, *(const void **)(*v30 + v31), v32);
        v31 += 8;
        a4 += v32;
      }
      while (8 * v9 != v31);
    }
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 200);
    if (v33 && !*(_DWORD *)(v33 + 8))
      recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a2, a3, a4, 0, 1);
    else
      recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a2, a3, a4, 0, 0);
  }
  if (v36 < 0)
    operator delete(__p);
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_1914C5AEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1914C5A1CLL);
}

void sub_1914C5B78(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

void recognizeSequenceOneByOneInternal(MRLModelWrapper *this, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  std::vector<int>::const_iterator v14;
  uint64_t v15;
  unsigned __int8 v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  std::vector<int>::pointer begin;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  char *v27;
  char **v28;
  char **v29;
  char *v30;
  _BOOL4 v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  std::vector<int>::pointer v42;
  char *v43;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v50;
  int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::vector<int>::pointer v57;
  _DWORD *v58;
  _DWORD **v59;
  unint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  std::vector<int>::pointer v71;
  _DWORD *v72;
  _DWORD **v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  int v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t **v92;
  void **v93;
  const void *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v103;
  char *__dst;
  void *__src;
  uint64_t *v106;
  std::vector<int> v107;
  std::vector<int>::value_type __x;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112[2];
  char v113;
  void **v114;
  char *v115;
  unint64_t v116;

  maxFeatureVectors = *((_DWORD *)this + 56);
  v7 = *((_QWORD *)this + 25);
  if (v7 && *(int *)(v7 + 28) <= 0)
    exitFramework(1764);
  if (!*((_BYTE *)this + 188))
    MRLModelWrapper::allocAllBuffers((uint64_t)this);
  v8 = *((_QWORD *)this + 22);
  __x = 1;
  MRLModelWrapper::clearState(*((_QWORD *)this + 15), v8);
  if (a3 < 1)
    return;
  v9 = 0;
  v97 = v8;
  do
  {
    __src = *(void **)(a2 + 8 * v9);
    v10 = *((unsigned int *)this + 8);
    if ((int)v10 >= 1)
    {
      v11 = (_DWORD *)***((_QWORD ***)this + 26);
      v12 = *(int **)(a2 + 8 * v9);
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
    }
    std::vector<int>::vector(&v107, 1uLL);
    v14.__i_ = v107.__begin_;
    *v107.__begin_ = 0;
    std::vector<int>::insert(&v107, v14, &__x);
    v15 = *((_QWORD *)this + 15);
    if (v9 || !a5)
      MRLModelWrapper::restoreState(v15, v8);
    else
      MRLModelWrapper::restoreState(v15, a5);
    if ((v16 & 1) == 0
    {
      recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy = 0;
      *(_QWORD *)algn_1EE219C18 = 0;
      qword_1EE219C20 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy, &dword_190DAF000);
    }
    v17 = a4;
    if (a6)
      v17 = &a4[4 * *((_DWORD *)this + 9) * (int)v9];
    __dst = v17;
    (***((void (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
    v106 = (uint64_t *)*((_QWORD *)this + 16);
    v18 = (unint64_t)((char *)v107.__end_ - (char *)v107.__begin_) >> 2;
    if (maxFeatureVectors >= (int)v18)
      v19 = v18;
    else
      v19 = maxFeatureVectors;
    std::vector<std::vector<int>>::vector(&v110, (int)v19);
    v103 = v9;
    if ((int)v19 < 1)
      goto LABEL_115;
    for (i = 0; i != v19; ++i)
    {
      begin = v107.__begin_;
      v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
      v23 = begin[i];
      if (v22 == 1)
      {
        v24 = **(_QWORD **)(*((_QWORD *)this + 15) + 104);
        if (v23 < (*(int (**)(uint64_t))(*(_QWORD *)v24 + 264))(v24) && (begin[i] & 0x80000000) == 0)
          continue;
      }
      else if ((v23 & 0x80000000) == 0)
      {
        continue;
      }
      v25 = *((_DWORD *)this + 46);
      if (v25 != 3)
      {
        if (v25 == 1)
        {
          begin[i] = 3;
          continue;
        }
LABEL_46:
        begin[i] = 1;
        continue;
      }
      v26 = (_QWORD *)*((_QWORD *)this + 18);
      if (!v26)
        goto LABEL_46;
      std::map<std::string,int>::map[abi:ne180100]((uint64_t)&v114, v26);
      std::string::basic_string[abi:ne180100]<0>(v112, "UNK");
      v27 = v115;
      if (!v115)
        goto LABEL_41;
      v28 = &v115;
      do
      {
        v29 = v28;
        v30 = v27 + 32;
        v31 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v27 + 4, v112);
        v32 = v27 + 8;
        if (!v31)
        {
          v32 = v27;
          v28 = (char **)v27;
        }
        v27 = *(char **)v32;
      }
      while (*(_QWORD *)v32);
      if (v28 == &v115
        || (!v31 ? (v33 = v30) : (v33 = (char *)(v29 + 4)),
            std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v112, v33)))
      {
LABEL_41:
        v28 = &v115;
      }
      if (v113 < 0)
        operator delete(v112[0]);
      if (&v115 == v28)
        v34 = 1;
      else
        v34 = *((_DWORD *)v28 + 14);
      begin[i] = v34;
      std::__tree<std::string>::destroy((uint64_t)&v114, v115);
    }
    for (j = 0; j != v19; ++j)
    {
      v36 = *(_QWORD *)*v106;
      v37 = **(_QWORD **)(*((_QWORD *)this + 15) + 104);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 264))(v37);
      bzero(*(void **)(v36 + 8 * j), 4 * v38);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), v107.__begin_[j], *(_QWORD *)*v106 + 8 * j);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)) == 5)
      {
        v39 = 0;
        v114 = 0;
        v115 = 0;
        v40 = -2;
        v116 = 0;
        do
        {
          v41 = ((int)v19 + (int)j + v40) % (int)v19;
          v42 = v107.__begin_;
          if ((unint64_t)v39 >= v116)
          {
            v44 = v114;
            v45 = (v39 - (char *)v114) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v47 = v116 - (_QWORD)v114;
            if ((uint64_t)(v116 - (_QWORD)v114) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v48);
              v44 = v114;
              v39 = v115;
            }
            else
            {
              v49 = 0;
            }
            v50 = (void **)(v48 + 4 * v45);
            *(_DWORD *)v50 = v42[v41];
            v43 = (char *)v50 + 4;
            while (v39 != (char *)v44)
            {
              v51 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v50 - 1) = v51;
              v50 = (void **)((char *)v50 - 4);
            }
            v114 = v50;
            v115 = v43;
            v116 = v48 + 4 * v49;
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_DWORD *)v39 = v107.__begin_[v41];
            v43 = v39 + 4;
          }
          v115 = v43;
          ++v40;
          v39 = v43;
        }
        while (v40 != 3);
        if (!v52)
          __cxa_bad_cast();
        (*(void (**)(void *, void ***, uint64_t))(*(_QWORD *)v52 + 56))(v52, &v114, *(_QWORD *)*v106 + 8 * j);
        if (v114)
        {
          v115 = (char *)v114;
          operator delete(v114);
        }
      }
      else if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)) == 6)
      {
        if (!__src)
          exitFramework(7345);
        if (j)
        {
          v53 = *(void **)(*(_QWORD *)*v106 + 8 * j);
          v54 = **(_QWORD **)(*((_QWORD *)this + 15) + 104);
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 264))(v54);
          memcpy(v53, __src, 4 * v55);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), v107.__begin_[j], *(_QWORD *)*v106 + 8 * j);
      }
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)) == 1)
      {
        v56 = v110 + 24 * j;
        v57 = v107.__begin_;
        v59 = (_DWORD **)(v56 + 8);
        v58 = *(_DWORD **)(v56 + 8);
        v60 = *(_QWORD *)(v56 + 16);
        if ((unint64_t)v58 >= v60)
        {
          v62 = *(_DWORD **)v56;
          v63 = ((uint64_t)v58 - *(_QWORD *)v56) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
            goto LABEL_134;
          v65 = v60 - (_QWORD)v62;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v66);
            v58 = *v59;
            v62 = *(_DWORD **)v56;
          }
          else
          {
            v67 = 0;
          }
          v68 = (_DWORD *)(v66 + 4 * v63);
          *v68 = v57[j];
          v61 = v68 + 1;
          while (v58 != v62)
          {
            v69 = *--v58;
            *--v68 = v69;
          }
          *(_QWORD *)v56 = v68;
          *v59 = v61;
          *(_QWORD *)(v56 + 16) = v66 + 4 * v67;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *v58 = v107.__begin_[j];
          v61 = v58 + 1;
        }
        *v59 = v61;
      }
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)) == 4)
      {
        v70 = v110 + 24 * j;
        v71 = v107.__begin_;
        v73 = (_DWORD **)(v70 + 8);
        v72 = *(_DWORD **)(v70 + 8);
        v74 = *(_QWORD *)(v70 + 16);
        if ((unint64_t)v72 >= v74)
        {
          v76 = *(_DWORD **)v70;
          v77 = ((uint64_t)v72 - *(_QWORD *)v70) >> 2;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62)
LABEL_134:
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v79 = v74 - (_QWORD)v76;
          if (v79 >> 1 > v78)
            v78 = v79 >> 1;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
            v80 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v80);
            v72 = *v73;
            v76 = *(_DWORD **)v70;
          }
          else
          {
            v81 = 0;
          }
          v82 = (_DWORD *)(v80 + 4 * v77);
          *v82 = v71[j];
          v75 = v82 + 1;
          while (v72 != v76)
          {
            v83 = *--v72;
            *--v82 = v83;
          }
          *(_QWORD *)v70 = v82;
          *v73 = v75;
          *(_QWORD *)(v70 + 16) = v80 + 4 * v81;
          if (v76)
            operator delete(v76);
        }
        else
        {
          *v72 = v107.__begin_[j];
          v75 = v72 + 1;
        }
        *v73 = v75;
      }
    }
LABEL_115:
    v8 = v97;
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)) != 1)
    {
      v85 = v110;
      v84 = v111;
      if (v111 != v110)
      {
        v86 = v111;
        do
        {
          v88 = *(void **)(v86 - 24);
          v86 -= 24;
          v87 = v88;
          if (v88)
          {
            *(_QWORD *)(v84 - 16) = v87;
            operator delete(v87);
          }
          v84 = v86;
        }
        while (v86 != v85);
      }
      v111 = v85;
    }
    v89 = *((unsigned __int8 *)this + 152);
    LODWORD(v112[0]) = 0;
    v109 = 0;
    if ((v90 & 1) == 0
    {
      MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize = 0;
      *(_QWORD *)algn_1EE219CB8 = 0;
      qword_1EE219CC0 = 0;
      __cxa_atexit((void (*)(void *))std::vector<VVector<float>>::~vector[abi:ne180100], &MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize, &dword_190DAF000);
    }
    if ((int)v19 >= 16777217)
      exitFramework(34);
    SentenceRecognizer::recognizeSequence(*((_QWORD *)this + 15), *v106, (uint64_t)&v110, &MRLModelWrapper::MRLModelRecognizeUnthreaded(std::vector<int> &,float *,std::vector<std::pair<int,VVector<float> *>> *,int,float const*,std::vector<int> const&)::dummyCsUnUsedInRecognize, (uint64_t)&v109 + 4, (float *)v112, v19 | 0x1000000, v89 == 0, v97, (uint64_t)&v109, (uint64_t)&recognizeSequenceOneByOneInternal(void *,float const**,long,int,float *,std::string const&,void *,BOOL)::dummy);
    v91 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 112) - 8);
    v92 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 32))(v91);
    v114 = 0;
    v115 = 0;
    v116 = 0;
    std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(&v114, *v92, v92[1], v92[1] - *v92);
    v93 = v114;
    v94 = v114[(int)v19 - 1];
    v95 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 112) - 8);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 272))(v95);
    memcpy(__dst, v94, 4 * v96);
    operator delete(v93);
    v114 = (void **)&v110;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v114);
    MRLModelWrapper::saveState(*((_QWORD *)this + 15), v97);
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v9 = v103 + 1;
  }
  while (v103 + 1 != a3);
}

void sub_1914C64CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 - 136) = &a29;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 136));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeVectorsIncremental(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v8;
  void *__p;
  char v10;

  std::mutex::lock(&globalMutex(void)::mutex);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence MRLModelRecognizeVectorsIncremental");
  if (!a1)
    exitFramework(992);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
  {
    v8 = 456;
    goto LABEL_12;
  }
  if (!a4)
  {
    v8 = 991;
    goto LABEL_12;
  }
  if (!a3)
  {
    v8 = 99;
LABEL_12:
    exitFramework(v8);
  }
  recognizeSequenceOneByOneInternal((MRLModelWrapper *)a1, a3, 1, a4, a2, 0);
  if (v10 < 0)
    operator delete(__p);
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_1914C6664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1914C661CLL);
}

void sub_1914C66B0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

_QWORD *MRLModelStateCreate(uint64_t a1)
{
  _QWORD *v2;

  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  v2 = MRLModelWrapper::allocInitialState(*(MRLModelWrapper **)(a1 + 120));
  std::mutex::unlock(&globalMutex(void)::mutex);
  return v2;
}

void sub_1914C6718(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1914C66FCLL);
}

void sub_1914C673C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

void MRLModelStateSave(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    MRLModelWrapper::allocAllBuffers(a1);
  if (!a2)
    exitFramework(40);
  MRLModelWrapper::saveState(*(_QWORD *)(a1 + 120), a2);
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_1914C67C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1914C67A0);
}

void sub_1914C67E0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

void MRLModelStateRestore(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    MRLModelWrapper::allocAllBuffers(a1);
  if (!a2)
    exitFramework(41);
  MRLModelWrapper::restoreState(*(_QWORD *)(a1 + 120), a2);
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_1914C6864(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1914C6844);
}

void sub_1914C6884(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

void MRLModelStateRelease(uint64_t a1, char **a2)
{
  std::mutex::lock(&globalMutex(void)::mutex);
  MRLModelWrapper::freeState(*(_QWORD *)(a1 + 120), a2);
}

void sub_1914C68C8()
{
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void sub_1914C68DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  sub_1914C68C8();
}

void sub_1914C68FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&globalMutex(void)::mutex);
  _Unwind_Resume(a1);
}

uint64_t MRLModelStatePieceSize(_QWORD *a1, int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  std::mutex::lock(&globalMutex(void)::mutex);
  if (!a1 || ((v4 = (a1[1] - *a1) >> 4, (int)v4 >= 1) ? (v5 = (int)v4 <= a2) : (v5 = 1), v5))
    v6 = 0xFFFFFFFFLL;
  else
    v6 = *(unsigned int *)(*a1 + 16 * a2);
  std::mutex::unlock(&globalMutex(void)::mutex);
  return v6;
}

uint64_t MRLModelStatePieceData(_QWORD *a1, int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  std::mutex::lock(&globalMutex(void)::mutex);
  if (!a1 || ((v4 = (a1[1] - *a1) >> 4, (int)v4 >= 1) ? (v5 = (int)v4 <= a2) : (v5 = 1), v5))
    v6 = 0;
  else
    v6 = **(_QWORD **)(*a1 + 16 * a2 + 8);
  std::mutex::unlock(&globalMutex(void)::mutex);
  return v6;
}

void MRLModelRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  int v14;
  const void **v15;
  void **v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  const char *v23;
  int v24;
  int v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *__p[2];
  unsigned __int8 v31;

  std::mutex::lock(&globalMutex(void)::mutex);
  maxFeatureVectors = *(_DWORD *)(a1 + 224);
  MRLModelWrapper::cleanupAllBuffers(a1);
  *(_BYTE *)(a1 + 188) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)v3 = &off_1E2D4D8B8;
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(v3 + 16);
    v4 = *(unsigned int *)(v3 + 8);
    if ((int)v4 >= 1)
    {
      v5 = (_QWORD *)(*(_QWORD *)(v3 + 120) + 8);
      do
      {
        *v5 = *(v5 - 1);
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v3 + 120));
    if (!*(_QWORD *)(v3 + 64))
    {
      std::__tree<int>::destroy(*(_QWORD **)(v3 + 48));
      *(_QWORD *)(v3 + 40) = v3 + 48;
      *(_QWORD *)(v3 + 48) = 0;
      *(_QWORD *)(v3 + 56) = 0;
    }
    *(_QWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 72) = 0;
    if (!*(_QWORD *)(v3 + 104))
    {
      std::__tree<int>::destroy(*(_QWORD **)(v3 + 88));
      *(_QWORD *)(v3 + 80) = v3 + 88;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 96) = 0;
    }
    *(_QWORD *)(v3 + 104) = 0;
    *(_DWORD *)(v3 + 112) = 0;
    __p[0] = (void *)(v3 + 120);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__tree<int>::destroy(*(_QWORD **)(v3 + 88));
    std::__tree<int>::destroy(*(_QWORD **)(v3 + 48));
    v6 = *(void **)(v3 + 16);
    if (v6)
    {
      *(_QWORD *)(v3 + 24) = v6;
      operator delete(v6);
    }
    MEMORY[0x19401CD90](v3, 0x10B1C40DD9087A7);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *(_QWORD **)(a1 + 120);
  if (v7)
  {
    v8 = v7[5];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8);
    v9 = v7[12];
    if (!v9)
      goto LABEL_59;
    v10 = *(const void **)v9;
    if (!*(_QWORD *)v9)
      goto LABEL_54;
    if (!*(_BYTE *)(v9 + 68))
    {
      if (*(_DWORD *)(v9 + 64) != 2)
        goto LABEL_44;
      v23 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v23 = *(const char **)v23;
      v24 = open(v23, 2);
      v25 = v24;
      v10 = *(const void **)v9;
      if ((v24 & 0x80000000) == 0)
      {
        write(v24, v10, *(_QWORD *)(v9 + 8));
        close(v25);
        v10 = *(const void **)v9;
      }
      if (v10)
LABEL_44:
        MEMORY[0x19401CD78](v10, 0x1000C8077774924);
      goto LABEL_54;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "do-not-us-this-path,from-raw-buffer");
    v11 = *(unsigned __int8 *)(v9 + 39);
    if ((v11 & 0x80u) == 0)
      v12 = (void *)*(unsigned __int8 *)(v9 + 39);
    else
      v12 = *(void **)(v9 + 24);
    v13 = v31;
    v14 = (char)v31;
    if ((v31 & 0x80u) != 0)
      v13 = (unint64_t)__p[1];
    if (v12 == (void *)v13)
    {
      v15 = (const void **)(v9 + 16);
      if ((v31 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      if ((v11 & 0x80) != 0)
      {
        v21 = memcmp(*v15, v16, *(_QWORD *)(v9 + 24)) != 0;
      }
      else
      {
        if (!*(_BYTE *)(v9 + 39))
        {
          v21 = 0;
          if (((char)v31 & 0x80000000) == 0)
          {
LABEL_49:
            if (!v21)
              goto LABEL_54;
            goto LABEL_53;
          }
          goto LABEL_52;
        }
        v17 = v11 - 1;
        do
        {
          v19 = *(unsigned __int8 *)v15;
          v15 = (const void **)((char *)v15 + 1);
          v18 = v19;
          v20 = *(unsigned __int8 *)v16;
          v16 = (void **)((char *)v16 + 1);
          v21 = v18 != v20;
        }
        while (v18 == v20 && v17-- != 0);
      }
      if ((v14 & 0x80000000) == 0)
        goto LABEL_49;
    }
    else
    {
      v21 = 1;
      if (((char)v31 & 0x80000000) == 0)
        goto LABEL_49;
    }
LABEL_52:
    operator delete(__p[0]);
    if (v21)
LABEL_53:
      munmap(*(void **)v9, *(_QWORD *)(v9 + 8));
LABEL_54:
    if (*(char *)(v9 + 63) < 0)
      operator delete(*(void **)(v9 + 40));
    if (*(char *)(v9 + 39) < 0)
      operator delete(*(void **)(v9 + 16));
    MEMORY[0x19401CD90](v9, 0x1012C40FBC6EF0BLL);
LABEL_59:
    v26 = (void *)v7[13];
    if (v26)
    {
      v7[14] = v26;
      operator delete(v26);
    }
    MEMORY[0x19401CD90](v7, 0x10A0C40156CC92FLL);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v27 = *(_QWORD *)(a1 + 144);
  if (!v27)
    goto LABEL_69;
  v28 = *(_DWORD *)(a1 + 184);
  if (v28 == 3)
  {
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 80));
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 56));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v27 + 24, *(char **)(v27 + 32));
    std::__tree<std::string>::destroy(v27, *(char **)(v27 + 8));
    goto LABEL_67;
  }
  if (v28 == 2)
  {
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 80));
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 56));
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 32));
    std::__tree<int>::destroy(*(_QWORD **)(v27 + 8));
LABEL_67:
    MEMORY[0x19401CD90](v27, 0x1020C40AAB8513ELL);
  }
  *(_QWORD *)(a1 + 144) = 0;
LABEL_69:
  v29 = *(_QWORD *)(a1 + 208);
  if (v29)
  {
    __p[0] = *(void **)(a1 + 208);
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    MEMORY[0x19401CD90](v29, 0x20C40960023A9);
  }
  maxFeatureVectors = 2;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  MEMORY[0x19401CD90](a1, 0x10F2C40224BF6E9);
  std::mutex::unlock(&globalMutex(void)::mutex);
}

void Espresso::ANECompilerEngine::compiler::~compiler(Espresso::ANECompilerEngine::compiler *this)
{
  Espresso::ANECompilerEngine::compiler::~compiler(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D7D690;
  Espresso::ANECompilerEngine::compiler::reset(this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 512);
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 416);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 360, *((_QWORD *)this + 46));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((_QWORD *)this + 43));
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t((Espresso::ANECompilerEngine::compiler *)((char *)this + 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E2D5FD08;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void Espresso::ANECompilerEngine::compiler::build(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  Espresso::net *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  Espresso::net *v61;
  char *v62;
  unint64_t v63;
  _DWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  unint64_t v72;
  int v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint8x8_t v88;
  uint64_t **v89;
  uint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  float v93;
  _BOOL8 v94;
  unint64_t v95;
  unint64_t v96;
  int8x8_t prime;
  void *v98;
  void *v99;
  uint64_t v100;
  _QWORD **v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  _QWORD *i;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void **v126;
  void *v127;
  void *v128;
  void **v129;
  void *v130;
  id v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  FILE *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::runtime_error *exception;
  uint64_t v143;
  unint64_t v144;
  int64x2_t *v145;
  uint64_t v146[2];
  uint64_t *v147;
  uint64_t *v148;
  unint64_t v149;
  void *v150[2];
  char v151;
  Espresso::net *v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  __int128 v155;
  void *v156;
  std::__shared_weak_count *v157;
  void *__p[2];
  __int128 v159;
  float v160;
  _QWORD *v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;

  v144 = __PAIR64__(a4, a3);
  v143 = a2;
  v164 = *MEMORY[0x1E0C80C00];
  v152 = 0;
  v153 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6
    || (v153 = std::__shared_weak_count::lock(v6)) == 0
    || (v7 = *(Espresso::net **)(a1 + 8), (v152 = v7) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "net");
  if (*(_BYTE *)(a1 + 552))
  {
    Espresso::ANECompilerEngine::compiler::reset((Espresso::ANECompilerEngine::compiler *)a1);
    v8 = objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
    v9 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v8;

    v10 = v150;
    if (v151 < 0)
      v10 = (void **)v150[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.additional.weights"), v10, v143, v144);
    v11 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v161 = v11;
    objc_msgSend(MEMORY[0x1E0C99DF0], "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    __p[0] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", __p, &v161, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 216), "setObject:forKeyedSubscript:", v13, &unk_1E2DEDB80);

  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v14 = *((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 5) == v14)
    goto LABEL_97;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(v14 + 16 * v16);
    v18 = (_QWORD *)(v17 + 40);
    v19 = *(char *)(v17 + 63);
    if (v19 < 0)
    {
      if (*(_QWORD *)(v17 + 48) != 15)
        goto LABEL_52;
      v18 = (_QWORD *)*v18;
    }
    else if (v19 != 15)
    {
      goto LABEL_52;
    }
    v20 = (_QWORD *)*v18;
    v21 = *(_QWORD *)((char *)v18 + 7);
    if (v20 == (_QWORD *)0x64656C656E6E7574 && v21 == 0x706F5F656E615F64)
    {
      v23 = operator new();
      *(_OWORD *)(v23 + 16) = 0u;
      v4 = v23 + 16;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_DWORD *)(v23 + 48) = 1065353216;
      *(_OWORD *)(v23 + 56) = 0u;
      *(_OWORD *)(v23 + 72) = 0u;
      *(_DWORD *)(v23 + 88) = 1065353216;
      *(_QWORD *)(v23 + 104) = 0;
      *(_QWORD *)(v23 + 112) = 0;
      *(_QWORD *)(v23 + 96) = 0;
      *(_QWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v16 + 1;
      v24 = operator new(4uLL);
      *v24 = 10008;
      *(_QWORD *)(v23 + 104) = v24 + 1;
      *(_QWORD *)(v23 + 112) = v24 + 1;
      *(_QWORD *)(v23 + 96) = v24;
      v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)v7 + 7, v16);
      if (!v25)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v27 = v25[3];
      v26 = v25[4];
      while (v27 != v26)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v4, v27, v27);
        v27 += 24;
      }
      v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)v7 + 12, v16);
      if (!v28)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v30 = v28[3];
      v29 = v28[4];
      while (v30 != v29)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v23 + 56, v30, v30);
        v30 += 24;
      }
      v31 = v147;
      v32 = v148;
      if (v147 != v148 && *(_QWORD *)v23 == *(_QWORD *)(*(v148 - 1) + 8))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Currently limited to discontigous segments per network.");
      if ((unint64_t)v148 >= v149)
      {
        v4 = v148 - v147;
        v33 = v4 + 1;
        if ((unint64_t)(v4 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v149 - (_QWORD)v147;
        if ((uint64_t)(v149 - (_QWORD)v147) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v36 = (char *)operator new(8 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = (uint64_t *)&v36[8 * v4];
        v38 = &v36[8 * v35];
        *v37 = v23;
        v15 = v37 + 1;
        if (v31 == v32)
        {
          v147 = (uint64_t *)&v36[8 * v4];
          v148 = v37 + 1;
          v149 = (unint64_t)v38;
        }
        else
        {
          do
          {
            v39 = *--v32;
            *v32 = 0;
            *--v37 = v39;
          }
          while (v32 != v31);
          v31 = v147;
          v40 = v148;
          v147 = v37;
          v148 = v15;
          v149 = (unint64_t)v38;
          while (v40 != v31)
          {
            v42 = *--v40;
            v41 = v42;
            *v40 = 0;
            if (v42)
              std::default_delete<Espresso::net_compiler_segment_based::segment_t>::operator()[abi:ne180100](v41);
          }
        }
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v148 = v23;
        v15 = v32 + 1;
      }
      v148 = v15;
      v7 = v152;
    }
LABEL_52:
    ++v16;
    v14 = *((_QWORD *)v7 + 4);
  }
  while (v16 < (*((_QWORD *)v7 + 5) - v14) >> 4);
  v43 = v147;
  if (v147 != v15)
  {
    v44 = (_QWORD *)(a1 + 64);
    v145 = (int64x2_t *)(a1 + 32);
    do
    {
      v45 = (unint64_t *)*v43;
      v46 = (_QWORD *)*v44;
      if (!*v44)
        goto LABEL_66;
      v47 = *v45;
      v48 = (_QWORD *)(a1 + 64);
      do
      {
        v49 = v46[4];
        v50 = v49 >= v47;
        if (v49 >= v47)
          v51 = v46;
        else
          v51 = v46 + 1;
        if (v50)
          v48 = v46;
        v46 = (_QWORD *)*v51;
      }
      while (*v51);
      if (v48 != v44 && v47 >= v48[4])
      {
        v60 = (_QWORD *)(v145->i64[0] + 120 * v48[5]);
        if (*v60 != v60[1] - 1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected tunneled_ane_op segment to be a single layer.");
      }
      else
      {
LABEL_66:
        v52 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 32) != v52 && *v45 == *(_QWORD *)(v52 - 112))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected tunneled_ane_op segment to be the discontigous.");
        if (v52 >= *(_QWORD *)(a1 + 48))
        {
          v53 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(v145, (uint64_t)v45);
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(*(_OWORD **)(a1 + 40), (uint64_t)v45);
          v53 = v52 + 120;
          *(_QWORD *)(a1 + 40) = v53;
        }
        *(_QWORD *)(a1 + 40) = v53;
        v54 = *(_QWORD *)(a1 + 32);
        v55 = *(_QWORD *)(v53 - 120);
        v56 = *(_QWORD **)(a1 + 64);
        v4 = a1 + 64;
        v57 = (_QWORD *)(a1 + 64);
        if (v56)
        {
          while (1)
          {
            while (1)
            {
              v57 = v56;
              v58 = v56[4];
              if (v55 >= v58)
                break;
              v56 = (_QWORD *)*v57;
              v4 = (uint64_t)v57;
              if (!*v57)
                goto LABEL_78;
            }
            if (v58 >= v55)
              break;
            v56 = (_QWORD *)v57[1];
            if (!v56)
            {
              v4 = (uint64_t)(v57 + 1);
              goto LABEL_78;
            }
          }
        }
        else
        {
LABEL_78:
          v59 = (uint64_t *)operator new(0x30uLL);
          v59[4] = v55;
          v59[5] = -1 - 0x1111111111111111 * ((v53 - v54) >> 3);
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)(a1 + 56), (uint64_t)v57, (uint64_t **)v4, v59);
        }
      }
      ++v43;
    }
    while (v43 != v15);
    v61 = v152;
    v62 = (char *)*((_QWORD *)v152 + 95);
    v63 = *((_QWORD *)v152 + 96);
    if ((unint64_t)v62 >= v63)
    {
      v65 = (char *)*((_QWORD *)v152 + 94);
      v66 = (v62 - v65) >> 2;
      if ((unint64_t)(v66 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v67 = v63 - (_QWORD)v65;
      v68 = (uint64_t)(v63 - (_QWORD)v65) >> 1;
      if (v68 <= v66 + 1)
        v68 = v66 + 1;
      v50 = v67 >= 0x7FFFFFFFFFFFFFFCLL;
      v69 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v50)
        v69 = v68;
      if (v69)
      {
        v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v69);
        v62 = (char *)*((_QWORD *)v61 + 95);
        v65 = (char *)*((_QWORD *)v61 + 94);
      }
      else
      {
        v70 = 0;
      }
      v71 = (_DWORD *)(v69 + 4 * v66);
      v72 = v69 + 4 * v70;
      *v71 = 10008;
      v64 = v71 + 1;
      while (v62 != v65)
      {
        v73 = *((_DWORD *)v62 - 1);
        v62 -= 4;
        *--v71 = v73;
      }
      *((_QWORD *)v61 + 94) = v71;
      *((_QWORD *)v61 + 95) = v64;
      *((_QWORD *)v61 + 96) = v72;
      if (v65)
        operator delete(v65);
    }
    else
    {
      *(_DWORD *)v62 = 10008;
      v64 = v62 + 4;
    }
    *((_QWORD *)v61 + 95) = v64;
    v7 = v152;
  }
LABEL_97:
  v74 = (_DWORD *)*((_QWORD *)v7 + 94);
  v75 = (_DWORD *)*((_QWORD *)v7 + 95);
  if (v74 != v75)
  {
    while (*v74 != 10008)
    {
      if (++v74 == v75)
      {
        v74 = (_DWORD *)*((_QWORD *)v7 + 95);
        break;
      }
    }
  }
  if (v74 != v75)
  {
    *(_OWORD *)__p = 0u;
    v159 = 0u;
    v160 = 1.0;
    v77 = *(_QWORD *)(a1 + 32);
    v76 = *(_QWORD *)(a1 + 40);
    if (v76 == v77)
      goto LABEL_208;
    v78 = 0;
    while (1)
    {
      v79 = *(_QWORD *)(v77 + 120 * v78);
      if (*(_QWORD *)(v77 + 120 * v78 + 8) - v79 != 1)
        goto LABEL_192;
      v80 = *(_QWORD *)(*((_QWORD *)v152 + 4) + 16 * v79);
      v81 = *(const void **)(v80 + 64);
      if (!v81)
        goto LABEL_191;
      if (!v82)
        goto LABEL_191;
      v83 = *(std::__shared_weak_count **)(v80 + 72);
      v156 = v82;
      v157 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(p_shared_owners);
        while (__stxr(v85 + 1, p_shared_owners));
        *(_QWORD *)&v155 = v82;
        *((_QWORD *)&v155 + 1) = v83;
        do
          v86 = __ldxr(p_shared_owners);
        while (__stxr(v86 + 1, p_shared_owners));
      }
      else
      {
        v155 = (unint64_t)v82;
      }
      LODWORD(v154) = v78;
      v87 = (unint64_t)__p[1];
      if (!__p[1])
        break;
      v88 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v88.i16[0] = vaddlv_u8(v88);
      if (v88.u32[0] > 1uLL)
      {
        v4 = (int)v78;
        if (__p[1] <= (void *)(int)v78)
          v4 = (int)v78 % (unint64_t)__p[1];
      }
      else
      {
        v4 = ((unint64_t)__p[1] - 1) & (int)v78;
      }
      v89 = (uint64_t **)*((_QWORD *)__p[0] + v4);
      if (!v89)
        break;
      v90 = *v89;
      if (!v90)
        break;
      while (1)
      {
        v91 = v90[1];
        if (v91 == (int)v78)
          break;
        if (v88.u32[0] > 1uLL)
        {
          if ((void *)v91 >= __p[1])
            v91 %= (unint64_t)__p[1];
        }
        else
        {
          v91 &= (unint64_t)__p[1] - 1;
        }
        if (v91 != v4)
          goto LABEL_130;
LABEL_129:
        v90 = (uint64_t *)*v90;
        if (!v90)
          goto LABEL_130;
      }
      if (*((_DWORD *)v90 + 4) != (_DWORD)v78)
        goto LABEL_129;
      if (v83)
      {
        v115 = (unint64_t *)&v83->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
LABEL_186:
      v112 = v157;
      if (v157)
      {
        v113 = (unint64_t *)&v157->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
LABEL_191:
      v77 = *(_QWORD *)(a1 + 32);
      v76 = *(_QWORD *)(a1 + 40);
LABEL_192:
      if (0xEEEEEEEEEEEEEEEFLL * ((v76 - v77) >> 3) <= ++v78)
      {
LABEL_208:
        std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign(a1 + 232, (uint64_t *)__p);
        std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node((_QWORD *)v159);
        v118 = __p[0];
        __p[0] = 0;
        if (v118)
          operator delete(v118);
        *(_BYTE *)(a1 + 224) = 1;
        goto LABEL_240;
      }
    }
LABEL_130:
    v92 = operator new(0x28uLL);
    v161 = v92;
    v162 = &v159;
    *v92 = 0;
    v92[1] = (int)v78;
    *((_DWORD *)v92 + 4) = v78;
    *(_OWORD *)(v92 + 3) = v155;
    v155 = 0uLL;
    LOBYTE(v163) = 1;
    v93 = (float)(unint64_t)(*((_QWORD *)&v159 + 1) + 1);
    if (!v87 || (float)(v160 * (float)v87) < v93)
    {
      v94 = (v87 & (v87 - 1)) != 0;
      if (v87 < 3)
        v94 = 1;
      v95 = v94 | (2 * v87);
      v96 = vcvtps_u32_f32(v93 / v160);
      if (v95 <= v96)
        prime = (int8x8_t)v96;
      else
        prime = (int8x8_t)v95;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v87 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime <= v87)
      {
        if (*(_QWORD *)&prime < v87)
        {
          v104 = vcvtps_u32_f32((float)*((unint64_t *)&v159 + 1) / v160);
          if (v87 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v87), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
          {
            v104 = std::__next_prime(v104);
          }
          else
          {
            v106 = 1 << -(char)__clz(v104 - 1);
            if (v104 >= 2)
              v104 = v106;
          }
          if (*(_QWORD *)&prime <= v104)
            prime = (int8x8_t)v104;
          if (*(_QWORD *)&prime >= v87)
          {
            v87 = (unint64_t)__p[1];
          }
          else
          {
            if (prime)
              goto LABEL_142;
            v117 = __p[0];
            __p[0] = 0;
            if (v117)
              operator delete(v117);
            v87 = 0;
            __p[1] = 0;
          }
        }
      }
      else
      {
LABEL_142:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v98 = operator new(8 * *(_QWORD *)&prime);
        v99 = __p[0];
        __p[0] = v98;
        if (v99)
          operator delete(v99);
        v100 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v100++) = 0;
        while (*(_QWORD *)&prime != v100);
        v101 = (_QWORD **)v159;
        if ((_QWORD)v159)
        {
          v102 = *(_QWORD *)(v159 + 8);
          v103 = (uint8x8_t)vcnt_s8(prime);
          v103.i16[0] = vaddlv_u8(v103);
          if (v103.u32[0] > 1uLL)
          {
            if (v102 >= *(_QWORD *)&prime)
              v102 %= *(_QWORD *)&prime;
          }
          else
          {
            v102 &= *(_QWORD *)&prime - 1;
          }
          *((_QWORD *)__p[0] + v102) = &v159;
          for (i = *v101; i; v102 = v108)
          {
            v108 = i[1];
            if (v103.u32[0] > 1uLL)
            {
              if (v108 >= *(_QWORD *)&prime)
                v108 %= *(_QWORD *)&prime;
            }
            else
            {
              v108 &= *(_QWORD *)&prime - 1;
            }
            if (v108 != v102)
            {
              if (!*((_QWORD *)__p[0] + v108))
              {
                *((_QWORD *)__p[0] + v108) = v101;
                goto LABEL_167;
              }
              *v101 = (_QWORD *)*i;
              *i = **((_QWORD **)__p[0] + v108);
              **((_QWORD **)__p[0] + v108) = i;
              i = v101;
            }
            v108 = v102;
LABEL_167:
            v101 = (_QWORD **)i;
            i = (_QWORD *)*i;
          }
        }
        v87 = (unint64_t)prime;
      }
      if ((v87 & (v87 - 1)) != 0)
      {
        if (v87 <= (int)v78)
          v4 = (int)v78 % v87;
        else
          v4 = (int)v78;
      }
      else
      {
        v4 = (v87 - 1) & (int)v78;
      }
    }
    v109 = (_QWORD *)*((_QWORD *)__p[0] + v4);
    v110 = v161;
    if (v109)
    {
      *v161 = *v109;
      goto LABEL_184;
    }
    *v161 = v159;
    *(_QWORD *)&v159 = v110;
    *((_QWORD *)__p[0] + v4) = &v159;
    if (*v110)
    {
      v111 = *(_QWORD *)(*v110 + 8);
      if ((v87 & (v87 - 1)) != 0)
      {
        if (v111 >= v87)
          v111 %= v87;
      }
      else
      {
        v111 &= v87 - 1;
      }
      v109 = (char *)__p[0] + 8 * v111;
LABEL_184:
      *v109 = v110;
    }
    v161 = 0;
    ++*((_QWORD *)&v159 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v161);
    goto LABEL_186;
  }
  Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets((Espresso::ANECompilerEngine::ane_mutable_weights_helper *)(a1 + 480), v7);
  if (Espresso::use_multiple_procedure_for_segments((uint64_t *)&v152))
  {
    v119 = objc_opt_new();
    v120 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v119;

    v121 = objc_opt_new();
    v122 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v121;

    v123 = objc_opt_new();
    v124 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v123;

  }
  v125 = (uint64_t)v152;
  if (*((char *)v152 + 471) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v152 + 56), *((_QWORD *)v152 + 57));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v152 + 28);
    *(_QWORD *)&v159 = *((_QWORD *)v152 + 58);
  }
  if (SBYTE7(v159) < 0)
  {
    if (!__p[1])
      goto LABEL_237;
    v126 = (void **)__p[0];
LABEL_221:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v126);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v127, 1, 0, 0);

    v161 = 0;
    v162 = 0;
    v163 = 0;
    v129 = v150;
    if (v151 < 0)
      v129 = (void **)v150[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.additional.weights"), v129);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v127, "stringByAppendingPathComponent:", v130);
    v131 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x19401C808](&v161, objc_msgSend(v131, "UTF8String"));

    v132 = v153;
    v146[0] = v125;
    v146[1] = (uint64_t)v153;
    if (v153)
    {
      v133 = (unint64_t *)&v153->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(&v154, a1 + 128, v146, (uint64_t)&v161);
    if (v132)
    {
      v135 = (unint64_t *)&v132->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    Espresso::ANECompilerEngine::compiler::build_wrapper(a1, v143);
    v137 = v154;
    if (v154)
    {
      v138 = *(FILE **)(v154 + 176);
      if (v138)
      {
        fclose(v138);
        *(_QWORD *)(v137 + 176) = 0;
      }
    }
    if (SHIBYTE(v163) < 0)
      operator delete(v161);

  }
  else
  {
    if (BYTE7(v159))
    {
      v126 = __p;
      goto LABEL_221;
    }
LABEL_237:
    Espresso::ANECompilerEngine::compiler::build_wrapper(a1, v143);
  }
  if (SBYTE7(v159) < 0)
    operator delete(__p[0]);
LABEL_240:
  __p[0] = &v147;
  std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v151 < 0)
    operator delete(v150[0]);
  v139 = v153;
  if (v153)
  {
    v140 = (unint64_t *)&v153->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
}

void sub_1914C7C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  __p = &a16;
  std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a24 < 0)
    operator delete(a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::dump_ir(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  std::string *v8;
  uint64_t v9;
  void *v10;
  void **v11;
  void *v12;
  id v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  void (***v17)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  FILE *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  FILE *v26;
  Espresso::net *v27;
  _DWORD *v28;
  _DWORD *v29;
  void *v30;
  void *v31;
  char v32;
  const char *v33;
  Espresso *v34;
  NSObject *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  NSMutableDictionary *v41;
  void *v42;
  void *v43;
  std::string *v44;
  void *v45;
  std::string *v46;
  NSString *v47;
  NSString *v48;
  NSNumber *v49;
  void *v50;
  std::string::size_type size;
  char v52;
  std::string *v53;
  void *v54;
  void *v55;
  std::string *v56;
  uint64_t v57;
  void *v58;
  uint64_t **m;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  std::string *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t j;
  NSMutableDictionary *v78;
  void *v79;
  void *v80;
  std::string *v81;
  void *v82;
  std::string *v83;
  NSString *v84;
  NSString *v85;
  NSNumber *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t k;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  FILE *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  void *v109;
  int v110;
  id v111;
  Espresso *v112;
  const char *v113;
  NSObject *v114;
  void *v115;
  void **v116;
  void *v117;
  void *v118;
  id v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::string *v126;
  std::runtime_error *exception;
  std::runtime_error *v128;
  const char *v129;
  void *v130;
  const char *v131;
  const char *v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  id obj;
  id obja;
  id objb;
  void *v142;
  void *v143;
  id v144;
  Espresso::ANECompilerEngine::compiler *v146;
  id v147;
  id v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  std::__shared_weak_count *v164;
  char v165;
  std::string v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _QWORD v172[5];
  std::__shared_weak_count *v173;
  uint64_t v174[2];
  std::string v175;
  void *v176[2];
  char v177;
  Espresso::net *v178;
  std::__shared_weak_count *v179;
  std::string __p[17];
  uint64_t v181;
  void *v182;
  _BYTE v183[128];
  _BYTE v184[128];
  _BYTE v185[128];
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v179 = 0;
  v178 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2
    || (v4 = std::__shared_weak_count::lock(v2), (v179 = v4) == 0)
    || (v5 = *(_QWORD *)(a1 + 8), (v178 = (Espresso::net *)v5) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v4;
  std::string::basic_string[abi:ne180100]<0>(v176, "net");
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(v5 + 471) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(v5 + 448), *(_QWORD *)(v5 + 456));
  else
    v175 = *(std::string *)(v5 + 448);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v175.__r_.__value_.__l.__size_)
    {
      v8 = (std::string *)v175.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
  }
  else if (*((_BYTE *)&v175.__r_.__value_.__s + 23))
  {
    v8 = &v175;
LABEL_15:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
    v9 = objc_claimAutoreleasedReturnValue();

    v142 = (void *)v9;
    goto LABEL_40;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v142, 1, 0, 0);

  memset(__p, 0, 24);
  v11 = v176;
  if (v177 < 0)
    v11 = (void **)v176[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.additional.weights"), v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v142, "stringByAppendingPathComponent:", v12);
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  MEMORY[0x19401C808](__p, objc_msgSend(v13, "UTF8String"));

  v174[0] = v5;
  v174[1] = (uint64_t)v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(&v167, a1 + 128, v174, (uint64_t)__p);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v17 = *(void (****)(uint64_t *__return_ptr, _QWORD))(a1 + 104);
  v172[0] = MEMORY[0x1E0C809B0];
  v172[1] = 3321888768;
  v172[2] = ___ZN8Espresso17ANECompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v172[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v172[4] = v178;
  v173 = v179;
  if (v179)
  {
    v18 = (unint64_t *)&v179->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::abstract_context::compute_batch_sync(v17, v172);
  v20 = v167;
  if (v167)
  {
    v21 = *(FILE **)(v167 + 176);
    if (v21)
    {
      fclose(v21);
      *(_QWORD *)(v20 + 176) = 0;
    }
  }
  v22 = v173;
  if (v173)
  {
    v23 = (unint64_t *)&v173->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v167;
  if (v167)
  {
    v26 = *(FILE **)(v167 + 176);
    if (v26)
    {
      fclose(v26);
      *(_QWORD *)(v25 + 176) = 0;
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_40:
  if (!*(_BYTE *)(a1 + 224))
  {
    v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v128, "Network not built");
    __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LOBYTE(v167) = 1;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  HIDWORD(v167) = 723714120;
  kdebug_trace();
  v27 = v178;
  v28 = (_DWORD *)*((_QWORD *)v178 + 94);
  v29 = (_DWORD *)*((_QWORD *)v178 + 95);
  if (v28 != v29)
  {
    while (*v28 != 10008)
    {
      if (++v28 == v29)
      {
        v28 = (_DWORD *)*((_QWORD *)v178 + 95);
        break;
      }
    }
  }
  if (v28 == v29)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = (uint64_t)v27;
    objc_msgSend(v30, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
    v135 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v135, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.force_single_weight_file"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "BOOLValue");

    memset(&v166, 0, sizeof(v166));
    v34 = (Espresso *)*((_QWORD *)v27 + 72);
    if (v34)
    {
      v34 = (Espresso *)(*(_QWORD *(**)(std::string *__return_ptr))(*(_QWORD *)v34 + 40))(__p);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      v166 = __p[0];
    }
    Espresso::espresso_os_log_subsystem(v34, v33);
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      v126 = &v166;
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v126 = (std::string *)v166.__r_.__value_.__r.__words[0];
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v126;
      _os_log_debug_impl(&dword_190DAF000, v35, OS_LOG_TYPE_DEBUG, "[compiler::dump_ir] net_storage_path %s", (uint8_t *)__p, 0xCu);
    }

    v36 = v176;
    if (v177 < 0)
      v36 = (void **)v176[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.additional.weights"), v36);
    v37 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v142, "stringByAppendingPathComponent:", v37);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    v143 = (void *)v37;
    if (*(_BYTE *)(a1 + 120))
    {
      v161 = 0u;
      v162 = 0u;
      v159 = 0u;
      v160 = 0u;
      objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", CFSTR("NetworkList"));
      obj = (id)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v159, v185, 16);
      if (v38)
      {
        v39 = *(_QWORD *)v160;
        do
        {
          for (i = 0; i != v38; ++i)
          {
            if (*(_QWORD *)v160 != v39)
              objc_enumerationMutation(obj);
            v41 = *(NSMutableDictionary **)(*((_QWORD *)&v159 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableDictionary setObject:forKeyedSubscript:](v41, "setObject:forKeyedSubscript:", v42, CFSTR("Weights"));

            if ((v32 & 1) == 0)
            {
              -[NSMutableDictionary objectForKeyedSubscript:](v41, "objectForKeyedSubscript:", CFSTR("Weights"));
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = (v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v166
                  : (std::string *)v166.__r_.__value_.__r.__words[0];
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v44);
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "addObject:", v45);

              if (*(_BYTE *)(v138 + 1282))
              {
                if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v46 = &v166;
                else
                  v46 = (std::string *)v166.__r_.__value_.__r.__words[0];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v46);
                v47 = (NSString *)objc_claimAutoreleasedReturnValue();
                append_weights_file_property(v41, v47, v48, v49);

              }
            }
            -[NSMutableDictionary objectForKeyedSubscript:](v41, "objectForKeyedSubscript:", CFSTR("Weights"));
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "addObject:", v143);

          }
          v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v159, v185, 16);
        }
        while (v38);
      }
    }
    else
    {
      v157 = 0u;
      v158 = 0u;
      v155 = 0u;
      v156 = 0u;
      objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", CFSTR("Networks"));
      obj = (id)objc_claimAutoreleasedReturnValue();
      v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v184, 16);
      if (v75)
      {
        v76 = *(_QWORD *)v156;
        do
        {
          for (j = 0; j != v75; ++j)
          {
            if (*(_QWORD *)v156 != v76)
              objc_enumerationMutation(obj);
            objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v155 + 1) + 8 * j));
            v78 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableDictionary setObject:forKeyedSubscript:](v78, "setObject:forKeyedSubscript:", v79, CFSTR("Weights"));

            if ((v32 & 1) == 0)
            {
              -[NSMutableDictionary objectForKeyedSubscript:](v78, "objectForKeyedSubscript:", CFSTR("Weights"));
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              v81 = (v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v166
                  : (std::string *)v166.__r_.__value_.__r.__words[0];
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v81);
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v80, "addObject:", v82);

              if (*(_BYTE *)(v138 + 1282))
              {
                if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v83 = &v166;
                else
                  v83 = (std::string *)v166.__r_.__value_.__r.__words[0];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v83);
                v84 = (NSString *)objc_claimAutoreleasedReturnValue();
                append_weights_file_property(v78, v84, v85, v86);

              }
            }
            -[NSMutableDictionary objectForKeyedSubscript:](v78, "objectForKeyedSubscript:", CFSTR("Weights"));
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "addObject:", v143);

          }
          v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v184, 16);
        }
        while (v75);
      }
    }

    if (*(_BYTE *)(a1 + 480))
    {
      v153 = 0u;
      v154 = 0u;
      v151 = 0u;
      v152 = 0u;
      objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", CFSTR("Networks"));
      objb = (id)objc_claimAutoreleasedReturnValue();
      v88 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v151, v183, 16);
      if (v88)
      {
        v89 = *(_QWORD *)v152;
        do
        {
          for (k = 0; k != v88; ++k)
          {
            if (*(_QWORD *)v152 != v89)
              objc_enumerationMutation(objb);
            v91 = *(_QWORD *)(*((_QWORD *)&v151 + 1) + 8 * k);
            objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", v91);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.mutable.weights"), v91);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v182 = v93;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v182, 1);
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v92, "setObject:forKeyedSubscript:", v94, CFSTR("MutableWeights"));

            objc_msgSend(v142, "stringByAppendingPathComponent:", v93);
            v95 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v96 = fopen((const char *)objc_msgSend(v95, "UTF8String"), "wb");
            std::vector<unsigned char>::vector(__p, *(_QWORD *)(a1 + 488));
            if (!v96)
              Espresso::throw_exception_selector<Espresso::io_error>("Cannot open mutable blob file");
            fwrite(__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0], 1uLL, v96);
            fclose(v96);
            if (__p[0].__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }

          }
          v88 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v151, v183, 16);
        }
        while (v88);
      }

    }
    v149 = v138;
    v150 = v179;
    if (v179)
    {
      v97 = (unint64_t *)&v179->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict(&v149);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 128), "setObject:forKeyedSubscript:", v99, CFSTR("ModelDebugInformation"));

    v100 = v150;
    if (v150)
    {
      v101 = (unint64_t *)&v150->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = v176;
    if (v177 < 0)
      v103 = (void **)v176[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.plist"), v103);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v142, "stringByAppendingPathComponent:", v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = *(_QWORD *)(a1 + 128);
    v148 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v106, 200, 0, &v148);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = v148;
    v109 = v108;
    if (!v107)
    {
      objc_msgSend(v108, "description");
      v129 = (const char *)objc_claimAutoreleasedReturnValue();
      Espresso::throw_exception_selector<Espresso::io_error,NSString * {__strong}>(v129);
    }
    v147 = v108;
    v110 = objc_msgSend(v107, "writeToFile:options:error:", v105, 1, &v147);
    v111 = v147;

    if (!v110)
    {
      objc_msgSend(v111, "description");
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("%@"), v130);

      v131 = (const char *)objc_msgSend(objc_retainAutorelease(v105), "UTF8String");
      objc_msgSend(v111, "description");
      v132 = (const char *)objc_claimAutoreleasedReturnValue();
      Espresso::throw_exception_selector<Espresso::io_error,char const*,NSString * {__strong}>(v131, v132);
    }
    Espresso::espresso_os_log_subsystem(v112, v113);
    v114 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
      _os_log_debug_impl(&dword_190DAF000, v114, OS_LOG_TYPE_DEBUG, "Dumping IR to %@", (uint8_t *)__p, 0xCu);
    }

    Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);
    v115 = (void *)objc_claimAutoreleasedReturnValue();

    if (v177 >= 0)
      v116 = v176;
    else
      v116 = (void **)v176[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.precompilation_info"), v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v142, "stringByAppendingPathComponent:", v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    Espresso::net::save_precompilation_info(v178, (uint64_t *)&v163);
    v119 = objc_retainAutorelease(v118);
    objc_msgSend(v119, "UTF8String");
    std::ofstream::basic_ofstream(__p);
    if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to file %s", objc_msgSend(objc_retainAutorelease(v119), "UTF8String"));
    (*(void (**)(void *, std::string *))(*(_QWORD *)v163 + 288))(v163, __p);
    __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x19401C8BC](&__p[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](&v181);
    v120 = v164;
    if (v164)
    {
      v121 = (unint64_t *)&v164->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }

    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);

  }
  else
  {
    if (*((char *)v178 + 615) < 0)
      std::string::__init_copy_ctor_external(&v166, *((const std::string::value_type **)v178 + 74), *((_QWORD *)v178 + 75));
    else
      v166 = *(std::string *)((char *)v178 + 592);
    size = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    v52 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v166.__r_.__value_.__l.__size_;
    if (!size)
    {
      std::string::operator=(&v166, (const std::string *)((char *)v27 + 616));
      v52 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    if (v52 >= 0)
      v53 = &v166;
    else
      v53 = (std::string *)v166.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "stringByDeletingLastPathComponent");
    v136 = (id)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v136, "length"))
    {
      v55 = (void *)MEMORY[0x1E0CB3940];
      std::__fs::filesystem::__current_path((std::__fs::filesystem::path *)__p, 0);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = __p;
      else
        v56 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      objc_msgSend(v55, "stringWithUTF8String:", v56);
      v57 = objc_claimAutoreleasedReturnValue();

      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v136 = (id)v57;
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v142, 1, 0, 0);

    Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = objc_retainAutorelease(v136);
    std::string::basic_string[abi:ne180100]<0>(&v163, (char *)objc_msgSend(v137, "UTF8String"));
    v144 = v134;
    obja = v142;
    if (!*(_BYTE *)(a1 + 224))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Can't dump network that isn't built.");
    for (m = *(uint64_t ***)(a1 + 248); m; m = (uint64_t **)*m)
    {
      if (!v60)
        __cxa_bad_cast();
      v61 = (uint64_t)v60;
      v146 = (Espresso::ANECompilerEngine::compiler *)v144;
      v62 = obja;
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      if (*((char *)v178 + 447) < 0)
        v63 = *((_QWORD *)v178 + 54);
      else
        v63 = *((unsigned __int8 *)v178 + 447);
      if (v63)
        std::string::operator=(__p, (const std::string *)((char *)v178 + 424));
      v64 = (void *)MEMORY[0x1E0CB3940];
      v65 = objc_retainAutorelease(v62);
      v66 = objc_msgSend(v65, "UTF8String");
      v67 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v67 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      objc_msgSend(v64, "stringWithFormat:", CFSTR("%s/%s.plist"), v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_DWORD *)(v61 + 328) != 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Pre-compiled ANE networks only support tunneled plist format.");
      v69 = v65;
      v70 = *(_QWORD *)(v61 + 512);
      v71 = *(_QWORD *)(v61 + 520);
      while (v70 != v71)
      {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("target_file_path cannot be absolute");
        v72 = v70;
        if (*(char *)(v70 + 23) < 0)
          v72 = *(_QWORD *)v70;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "stringByAppendingPathComponent:", v73);
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        v70 += 104;
      }

      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);

    }
    if (v165 < 0)
      operator delete(v163);

    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v167);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);

  if (v177 < 0)
    operator delete(v176[0]);
  v123 = v179;
  if (v179)
  {
    v124 = (unint64_t *)&v179->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
}

void sub_1914C905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  if (a56 < 0)
    operator delete(__p);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a57);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a72);

  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::compile_ir(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  void *v11;
  uint64_t *v12;
  Espresso *v13;
  const char *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFAllocator *v21;
  __CFDictionary *Mutable;
  __CFArray *v23;
  __CFDictionary *v24;
  __CFArray *v25;
  __CFDictionary *v26;
  Espresso::ANECompilerEngine *v27;
  void *v28;
  const void *v29;
  const __CFString *v30;
  const __CFString *v31;
  Espresso *v32;
  const char *v33;
  NSObject *v34;
  uint64_t v35;
  Espresso *v36;
  const char *v37;
  NSObject *v38;
  id v39;
  Espresso *v40;
  NSObject *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  void *value;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  Espresso *v56;
  __int16 v57;
  const __CFString *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = *(unsigned __int8 *)(v8 + 1408) != 0;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = 0;
LABEL_7:
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
  v13 = (Espresso *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_os_log_subsystem(v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v31 = CFSTR("False");
    *(_DWORD *)buf = 138412802;
    v54 = v11;
    v55 = 2112;
    if (v9)
      v31 = CFSTR("True");
    v56 = v13;
    v57 = 2112;
    v58 = v31;
    _os_log_debug_impl(&dword_190DAF000, v15, OS_LOG_TYPE_DEBUG, "[compiler::compile_ir] input: %@ binary path: %@ EnableANEAnalytics: %@", buf, 0x20u);
  }

  objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("net.plist"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("net.additional.weights"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("net_options.plist"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v16, "fileExistsAtPath:isDirectory:", v51, 0);

  objc_msgSend(v52, "stringByDeletingLastPathComponent");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringByAppendingString:", CFSTR("/"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v52, "lastPathComponent");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "lastPathComponent");
  value = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "stringByDeletingLastPathComponent");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "stringByAppendingString:", CFSTR("/"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  -[Espresso lastPathComponent](v13, "lastPathComponent");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  -[Espresso stringByDeletingLastPathComponent](v13, "stringByDeletingLastPathComponent");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "stringByAppendingString:", CFSTR("/"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, CFSTR("WeightFileName"), value);
  CFDictionaryAddValue(Mutable, CFSTR("WeightFilePath"), v49);
  v23 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v23, Mutable);
  CFRelease(Mutable);
  v24 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v24, CFSTR("NetworkPlistName"), v47);
  CFDictionaryAddValue(v24, CFSTR("NetworkPlistPath"), v46);
  CFDictionaryAddValue(v24, CFSTR("NetworkWeights"), v23);
  v25 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v25, v24);
  CFRelease(v24);
  CFRelease(v23);
  v26 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v26, CFSTR("InputNetworks"), v25);
  CFRelease(v25);
  CFDictionaryAddValue(v26, CFSTR("OutputFileName"), v45);
  CFDictionaryAddValue(v26, CFSTR("OutputFilePath"), v20);
  v27 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Espresso::ANECompilerEngine::current_ane_arch(v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(v27, CFSTR("UndefinedSymbolsBehaviorUseFVMLibs"), (const void *)*MEMORY[0x1E0C9AE50]);
  if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H14")) & 1) != 0)
  {
    v30 = CFSTR("h14");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H14G")) & 1) != 0)
  {
    v30 = CFSTR("h14g");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H13")) & 1) != 0)
  {
    v30 = CFSTR("h13");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H13G")) & 1) != 0)
  {
    v30 = CFSTR("h13g");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H12")) & 1) != 0)
  {
    v30 = CFSTR("h12");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("M9")) & 1) != 0)
  {
    v30 = CFSTR("m9");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("M10")) & 1) != 0)
  {
    v30 = CFSTR("m10");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("N301")) & 1) != 0
         || (objc_msgSend(v28, "isEqualToString:", CFSTR("H14G.N301")) & 1) != 0)
  {
    v30 = CFSTR("h14g.n301");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H15")) & 1) != 0)
  {
    v30 = CFSTR("h15");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H15G")) & 1) != 0)
  {
    v30 = CFSTR("h15g");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H16")) & 1) != 0)
  {
    v30 = CFSTR("h16");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H16G")) & 1) != 0)
  {
    v30 = CFSTR("h16g");
  }
  else if ((objc_msgSend(v28, "isEqualToString:", CFSTR("H17")) & 1) != 0)
  {
    v30 = CFSTR("h17");
  }
  else if (objc_msgSend(v28, "isEqualToString:", CFSTR("M11")))
  {
    v30 = CFSTR("m11");
  }
  else
  {
    v30 = CFSTR("h11");
  }
  CFDictionaryAddValue(v27, CFSTR("TargetArchitecture"), v30);
  if (v44)
    CFDictionaryAddValue(v27, CFSTR("OptionsFilePath"), v51);
  if (v9)
  {
    CFDictionaryAddValue(v27, CFSTR("CompileANEProgramForDebugging"), v29);
    CFDictionaryAddValue(v27, CFSTR("GenerateStaticPerfAnalytics"), v29);
    CFDictionaryAddValue(v27, CFSTR("GenerateAnalyticsBuffer"), v29);
    Espresso::espresso_os_log_subsystem(v32, v33);
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_190DAF000, v34, OS_LOG_TYPE_INFO, "[compiler::compile_ir] Set: CompileANEProgramForDebugging, GenerateStaticPerfAnalytics, GenerateAnalyticsBuffer", buf, 2u);
    }

  }
  v35 = ANECCompile();
  CFRelease(v26);
  if ((_DWORD)v35)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("_ANECompiler : ANECCompile() FAILED : %d", v35);
  if (v9)
  {
    Espresso::espresso_os_log_subsystem(v36, v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ANECGetAnalyticsBufferSize() Get ANE analytics size", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v13);
    v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v39, "bytes");
    objc_msgSend(v39, "length");
    v40 = (Espresso *)ANECGetAnalyticsBufferSize();
    if ((_DWORD)v40)
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("_ANECompiler : ANECGetAnalyticsBufferSize() FAILED : %d", (uint64_t)v40);
    Espresso::espresso_os_log_subsystem(v40, (const char *)v40);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v54 = 0;
      _os_log_impl(&dword_190DAF000, v41, OS_LOG_TYPE_INFO, "ANECGetAnalyticsBufferSize() ANE analytics size: %llu Bytes", buf, 0xCu);
    }

  }
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1914C9DE8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compiler::build_segment(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _BOOL4 v8;
  _QWORD *v9;
  void *v10;
  Espresso *v11;
  const char *v12;
  Espresso *v13;
  void *v14;
  BOOL v15;
  void *v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  const char *v55;
  void *v56;
  void *v57;
  BOOL v58;
  void *v59;
  unint64_t v60;
  uint64_t n;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  unsigned int v70;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  int v75;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v89;
  int v90;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  __int128 *v98;
  _QWORD *v99;
  char *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  const __CFString *v105;
  __CFString *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::string *v117;
  unint64_t v118;
  _BOOL4 v120;
  std::string *v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  std::__shared_weak_count *v125;
  float *v126;
  unint64_t *v127;
  unint64_t v128;
  size_t v129;
  _BYTE *v130;
  _BYTE *v131;
  int v132;
  int v133;
  _BOOL4 v135;
  _QWORD *v136;
  const void *v137;
  void *v138;
  std::string::size_type v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSString *v144;
  std::__shared_weak_count *size;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  BOOL v154;
  char v155;
  __CFString *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  __CFString *v160;
  unint64_t *v161;
  uint64_t v162;
  _QWORD *v163;
  __int128 v164;
  uint8_t *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *p_info;
  unint64_t v171;
  void *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v175;
  unint64_t *v176;
  unint64_t v177;
  Espresso *v178;
  const char *v179;
  unint64_t *v180;
  unint64_t v181;
  NSObject *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  _BYTE *v189;
  char *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *p_size;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  const void *v199;
  void (***v200)(void *, uint64_t, __int128 *);
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  _QWORD *v208;
  uint64_t *k;
  _QWORD *v210;
  char *v211;
  const void *v212;
  void *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void **v224;
  void *v225;
  uint64_t v226;
  void *v227;
  unsigned __int8 v228;
  unint64_t *v229;
  unint64_t v230;
  void *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  _QWORD *v243;
  std::string *v244;
  unint64_t *v245;
  unint64_t v246;
  void *v247;
  std::vector<std::string>::pointer begin;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int *v256;
  int v257;
  uint64_t v258;
  uint64_t m;
  uint64_t v260;
  _WORD *v261;
  uint64_t v262;
  int *v263;
  _WORD *v264;
  uint64_t v265;
  int v266;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  __int128 *v278;
  void *v279;
  void *v280;
  void *v281;
  uint64_t weights_file_index;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  NSString *v290;
  unsigned int *v291;
  uint64_t v292;
  void *v293;
  size_t v294;
  _BYTE *v295;
  uint8_t *v296;
  __int128 *v297;
  uint64_t v298;
  void *v299;
  __int128 *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  void *v318;
  int v319;
  char *v320;
  _QWORD *v321;
  __int128 *v322;
  __int128 *v323;
  __int128 v324;
  uint64_t v325;
  char *v326;
  const void *v327;
  void *v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unsigned __int8 *v345;
  char *v346;
  const void *v347;
  void *v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::string *v365;
  __int128 v366;
  uint8_t *v367;
  std::string::size_type v368;
  void *v369;
  std::string *v370;
  void *v371;
  std::string *v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  std::string *v377;
  void *v378;
  void *v379;
  uint64_t v380;
  void *v381;
  _BOOL4 v382;
  _QWORD *v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count *v385;
  uint64_t v386;
  uint64_t *v387;
  char *v388;
  const void **v389;
  void *v390;
  uint8_t *v391;
  id v392;
  uint64_t v393;
  char v394;
  uint64_t v395;
  uint64_t kk;
  void *v397;
  char v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  std::__shared_weak_count *v403;
  unsigned __int8 *v404;
  char *v405;
  char *v406;
  __int128 v407;
  __int128 v408;
  char *v409;
  char *v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  char *v414;
  unint64_t *v415;
  unint64_t v416;
  id v417;
  uint64_t v418;
  int v419;
  uint64_t mm;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint8x8_t v429;
  unint64_t v430;
  unint64_t v431;
  unsigned __int8 **v432;
  unsigned __int8 *v433;
  unint64_t v434;
  unsigned int *v435;
  unsigned int *v436;
  _DWORD *v437;
  _DWORD *v438;
  void *v439;
  std::string *p_sz;
  std::__shared_weak_count *v441;
  void *v442;
  int *v443;
  void *v444;
  void *v445;
  _QWORD *v446;
  void *v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  void **v452;
  void *v453;
  void *v454;
  uint64_t *v455;
  char *v456;
  const void *v457;
  unsigned int *v458;
  unsigned int *v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint8x8_t v465;
  unint64_t v466;
  void **v467;
  char *v468;
  unint64_t v469;
  std::string *v470;
  float v471;
  _BOOL8 v472;
  unint64_t v473;
  unint64_t v474;
  size_t v475;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  const Espresso::net *v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  char *v486;
  __int128 v487;
  const void *v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  void *v492;
  unsigned __int8 v493;
  unint64_t v494;
  void *v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  void *v499;
  _QWORD *v500;
  void *v501;
  std::string *v502;
  void *v503;
  std::string *v504;
  unint64_t *v505;
  unint64_t v506;
  unsigned __int8 *nn;
  uint64_t v508;
  std::string::size_type v509;
  Espresso::net *v510;
  char *v511;
  const void *v512;
  _DWORD *v513;
  _DWORD *v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  char *v520;
  __int128 v521;
  const void *v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  void *v526;
  unint64_t *v527;
  unint64_t v528;
  void *v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  void *v533;
  std::string *v534;
  __int128 v535;
  std::string *v536;
  void *v537;
  void *v538;
  void *v539;
  std::string *v540;
  void *v541;
  std::string::size_type v542;
  void *v543;
  unint64_t *v544;
  unint64_t v545;
  void *v546;
  char **v547;
  char *v548;
  char **v549;
  unint64_t *v550;
  unint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  _QWORD *v554;
  _QWORD *v555;
  _QWORD *v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  std::string::size_type v561;
  const std::string::value_type **v562;
  std::string::size_type v563;
  uint64_t *v564;
  unint64_t v565;
  std::string *v566;
  void *v567;
  void *v568;
  std::string::size_type v569;
  const void **v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unsigned __int8 *v574;
  unsigned __int8 *v575;
  BOOL v576;
  uint64_t *v577;
  char *v578;
  __int128 v579;
  __int128 v580;
  uint64_t *v581;
  uint64_t *v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  char *v586;
  unint64_t *v587;
  unint64_t v588;
  uint64_t *ii;
  _QWORD *v590;
  char *v591;
  const void *v592;
  _DWORD *v593;
  _DWORD *v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  char *v598;
  char *v599;
  unint64_t *v600;
  char *v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  char *v605;
  uint64_t v606;
  BOOL v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  __int128 v611;
  unint64_t *v612;
  unint64_t v613;
  char *v614;
  __int128 v615;
  const void *v616;
  unint64_t *v617;
  unint64_t v618;
  unint64_t v619;
  char **v620;
  char **v621;
  unint64_t v622;
  _BOOL4 v623;
  unint64_t *v624;
  char **v625;
  _BOOL8 v626;
  const char *v627;
  unint64_t v628;
  unint64_t v629;
  NSObject *v630;
  uint64_t v631;
  void *v632;
  unsigned __int8 v633;
  unint64_t v634;
  void *v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  char *v639;
  void *v640;
  void *v641;
  std::string *v642;
  void *v643;
  _QWORD *v644;
  void *v645;
  std::string::size_type v646;
  std::string::size_type v647;
  unint64_t *v648;
  unint64_t v649;
  void *v650;
  unsigned __int8 *jj;
  _QWORD *v652;
  char *v653;
  const void *v654;
  int *v655;
  int *v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  char *v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  __int128 v664;
  unint64_t *v665;
  unint64_t v666;
  char *v667;
  __int128 v668;
  const void *v669;
  unint64_t *v670;
  unint64_t v671;
  void *v672;
  unint64_t *v673;
  unint64_t v674;
  void *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  void *v679;
  std::string *v680;
  __int128 v681;
  _BYTE *v682;
  void *v683;
  void *v684;
  _BYTE *v685;
  void *v686;
  void *v687;
  unint64_t *v688;
  unint64_t v689;
  void *v690;
  void *v691;
  uint8_t *v692;
  void *v693;
  char *v694;
  char *v695;
  char **v696;
  uint64_t v697;
  void *v698;
  uint64_t v699;
  void *v700;
  uint64_t v701;
  unint64_t *v702;
  void *v703;
  _BOOL4 v704;
  void *v705;
  void *v706;
  void *v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  std::runtime_error *v712;
  std::runtime_error *v713;
  std::string *v714;
  __int128 v715;
  std::runtime_error *exception;
  std::runtime_error *v717;
  std::runtime_error *v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  void *v722;
  void *v723;
  char *v724;
  id *v725;
  void *v726;
  unint64_t v727;
  int v728;
  void *v729;
  _BOOL4 is_network_multihead_multiprocedure;
  uint64_t v731;
  _BOOL4 v732;
  _BOOL4 v733;
  uint64_t v734;
  uint64_t *v735;
  __int128 v736;
  id v737;
  void *v738;
  void *__vala;
  _QWORD *v741;
  _QWORD *v742;
  unint64_t v743;
  void *v745;
  std::string *v746;
  std::string *v747;
  Espresso::ANECompilerEngine *v748;
  Espresso::ANECompilerEngine *v749;
  Espresso::ANECompilerEngine *v750;
  Espresso::ANECompilerEngine *v751;
  int v752;
  std::__shared_weak_count *v753;
  uint64_t v754;
  std::__shared_weak_count *v755;
  uint64_t v756;
  Espresso::ANECompilerEngine *v757;
  Espresso::ANECompilerEngine *v758;
  void *v759;
  std::__shared_weak_count *v760;
  char v761;
  uint64_t v762;
  std::__shared_weak_count *v763;
  std::string v764;
  __int128 v765;
  uint64_t v766;
  std::__shared_weak_count *v767;
  uint64_t v768[2];
  uint64_t v769;
  std::__shared_weak_count *v770;
  std::vector<std::string>::pointer v771;
  std::vector<std::string>::pointer end;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  std::__shared_weak_count *v776;
  _QWORD *v777;
  void *v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  uint64_t v788;
  char v789[8];
  char *v790[2];
  unint64_t v791;
  char v792[4];
  int v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  std::__shared_weak_count *v803;
  __int128 v804;
  _BYTE v805[16];
  uint64_t *v806;
  _QWORD v807[2];
  unsigned __int8 *v808;
  void *v809;
  void *v810;
  uint64_t v811;
  _DWORD *v812;
  std::__shared_weak_count *v813;
  Espresso::net *v814;
  std::__shared_weak_count *v815;
  unsigned int *v816;
  std::__shared_weak_count *v817;
  void *v818[2];
  char v819;
  std::string v820;
  std::string v821;
  void *v822[2];
  __int128 v823;
  uint64_t v824;
  void *v825[3];
  std::string __sz;
  _BYTE v827[32];
  float v828;
  __int128 v829;
  char **v830;
  char *v831[2];
  __int128 *v832;
  __int128 v833;
  void *v834[2];
  __int128 v835;
  _OWORD v836[2];
  void *v837;
  std::__shared_weak_count *v838;
  char v839;
  void *v840;
  std::__shared_weak_count *v841;
  unsigned __int8 v842;
  std::string v843;
  __int128 **v844;
  std::__shared_weak_count *v845;
  _BYTE v846[128];
  _BYTE v847[128];
  _BYTE v848[40];
  void *v849[3];
  std::string v850;
  _QWORD v851[2];
  _QWORD v852[2];
  const __CFString *v853;
  const __CFString *v854;
  const __CFString *v855;
  void *lpsrc[2];
  std::__shared_weak_count *v857;
  _QWORD v858[2];
  int *v859;
  std::__shared_weak_count *v860;
  __int128 v861;
  std::string v862;
  void *v863;
  std::string *v864;
  std::string *v865;
  int v866;
  void *v867;
  char v868;
  int v869;
  __CFString *v870;
  uint8_t buf[16];
  _BYTE v872[32];
  std::vector<std::string> v873;
  int v874;
  void *__p;
  char v876;
  int v877;
  __CFString *v878;
  _BYTE __str[32];
  __int128 v880;
  __int128 v881;
  uint64_t v882;

  v882 = *MEMORY[0x1E0C80C00];
  v804 = *a4;
  std::unordered_set<std::string>::unordered_set((uint64_t)v805, (uint64_t)(a4 + 1));
  std::unordered_set<std::string>::unordered_set((uint64_t)v807, (uint64_t)a4 + 56);
  v810 = 0;
  v809 = 0;
  v811 = 0;
  std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(&v809, *((const void **)a4 + 12), *((_QWORD *)a4 + 13), (uint64_t)(*((_QWORD *)a4 + 13) - *((_QWORD *)a4 + 12)) >> 2);
  v5 = a1;
  v803 = 0;
  v802 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v803 = std::__shared_weak_count::lock(v6)) == 0 || (v7 = *(_QWORD *)(a1 + 8), (v802 = v7) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v792[0] = 1;
  v794 = a3;
  v795 = v7;
  v796 = 0;
  v797 = 0;
  v798 = 0;
  v799 = v7;
  v801 = 0;
  v800 = 0;
  v793 = 723714112;
  kdebug_trace();
  Espresso::four_cc_mapping_helper::four_cc_mapping_helper((uint64_t)v789, &v802, (uint64_t)&v804);
  is_network_multihead_multiprocedure = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v802);
  v8 = is_network_multihead_multiprocedure;
  if (a3)
    v8 = 0;
  if (v8)
    Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(v7);
  v9 = (_QWORD *)(v7 + 728);
  if (*(char *)(v7 + 751) < 0)
  {
    if (!*(_QWORD *)(v7 + 736))
      goto LABEL_44;
    v9 = (_QWORD *)*v9;
  }
  else if (!*(_BYTE *)(v7 + 751))
  {
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v9);
  v788 = 0;
  v722 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (Espresso *)0;
  v13 = v11;
  if (v10)
  {
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("isegment"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14 == 0;

    if (v15)
    {
      v782 = 0u;
      v783 = 0u;
      v780 = 0u;
      v781 = 0u;
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("all_outputs"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectAtIndexedSubscript:", a3);
      v18 = objc_claimAutoreleasedReturnValue();

      v21 = -[NSObject countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v780, v846, 16);
      if (v21)
      {
        v22 = *(_QWORD *)v781;
        do
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v781 != v22)
              objc_enumerationMutation(v18);
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v780 + 1) + 8 * i)), "UTF8String"));
            if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v807, (uint64_t)buf))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v807, (uint64_t)buf, (uint64_t)buf);
            if ((v872[7] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v21 = -[NSObject countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v780, v846, 16);
        }
        while (v21);
      }
    }
    else
    {
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("isegment"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "intValue");

      if (v17 != a3 && (v17 & 0x80000000) == 0)
      {

        goto LABEL_1135;
      }
      v786 = 0u;
      v787 = 0u;
      v784 = 0u;
      v785 = 0u;
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("outputs"));
      v18 = objc_claimAutoreleasedReturnValue();
      v24 = -[NSObject countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v784, v847, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v785;
        do
        {
          for (j = 0; j != v24; ++j)
          {
            if (*(_QWORD *)v785 != v25)
              objc_enumerationMutation(v18);
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v784 + 1) + 8 * j)), "UTF8String"));
            if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v807, (uint64_t)buf))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v807, (uint64_t)buf, (uint64_t)buf);
            if ((v872[7] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v24 = -[NSObject countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v784, v847, 16);
        }
        while (v24);
      }
    }
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v11, v12);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      -[Espresso description](v13, "description");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v19;
      _os_log_error_impl(&dword_190DAF000, v18, OS_LOG_TYPE_ERROR, "Error parsing compilation key: %@", buf, 0xCu);

    }
  }

  v5 = a1;
LABEL_44:
  if (*(_BYTE *)(v5 + 385))
  {
    *(_BYTE *)(v5 + 385) = 1;
LABEL_47:
    if (!objc_msgSend(*(id *)(v5 + 128), "count", v9))
    {
      v28 = objc_opt_new();
      v29 = *(void **)(v5 + 128);
      *(_QWORD *)(v5 + 128) = v28;

      v5 = a1;
    }
    v30 = objc_opt_new();
    v31 = *(void **)(v5 + 200);
    *(_QWORD *)(v5 + 200) = v30;

    v32 = objc_opt_new();
    v33 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v32;
    v728 = 1;
    v732 = 1;
    goto LABEL_50;
  }
  v27 = v791;
  *(_BYTE *)(v5 + 385) = v791 > 1;
  v732 = *(_QWORD *)(v802 + 792) != 0;
  if (v27 >= 2)
    goto LABEL_47;
  if ((Espresso::use_multiple_procedure_for_segments(&v802) & 1) == 0)
  {
    v697 = objc_opt_new();
    v698 = *(void **)(v5 + 200);
    *(_QWORD *)(v5 + 200) = v697;

    v699 = objc_opt_new();
    v700 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v699;

    v701 = objc_opt_new();
    v728 = 0;
    v33 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v701;
LABEL_50:

    v5 = a1;
    goto LABEL_51;
  }
  v728 = 0;
  v732 = 1;
LABEL_51:
  v725 = (id *)(v5 + 128);
  objc_msgSend(*(id *)(v5 + 128), "objectForKey:", CFSTR("Networks"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v34 == 0;

  if (v35)
  {
    v36 = (void *)objc_opt_new();
    objc_msgSend(*v725, "setObject:forKeyedSubscript:", v36, CFSTR("Networks"));

  }
  v37 = objc_opt_new();
  v38 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v37;

  v39 = objc_opt_new();
  v40 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v39;

  v41 = objc_opt_new();
  v42 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v41;

  v43 = objc_opt_new();
  v44 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v43;

  v45 = objc_opt_new();
  v46 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v45;

  v47 = a1;
  std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v741 = (_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = a1 + 280;
  if (*(_BYTE *)(a1 + 120))
  {
    v48 = objc_opt_new();
    v49 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v48;

    v50 = objc_opt_new();
    v51 = *(void **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v50;

    v47 = a1;
    objc_msgSend(*(id *)(a1 + 128), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 184), CFSTR("NetworkList"));
  }
  *(_BYTE *)(v47 + 384) = 1;
  objc_msgSend(*(id *)(v47 + 128), "setObject:forKeyedSubscript:", CFSTR("1.0.9"), CFSTR("Version"));
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v722 = (void *)objc_claimAutoreleasedReturnValue();

  v53 = v802;
  std::string::basic_string[abi:ne180100]<0>(buf, "anec_binary_point");
  v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v53 + 472, buf);
  if ((v872[7] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((_QWORD *)(v53 + 480) != v54)
  {
    v55 = (const char *)(v54 + 7);
    if (*((char *)v54 + 79) < 0)
      v55 = *(const char **)v55;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", atoi(v55));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v725, "setObject:forKeyedSubscript:", v56, CFSTR("BinaryPoint"));

  }
  objc_msgSend(v722, "objectForKeyedSubscript:", CFSTR("com.espresso.anecompiler.binary_point"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = v57 == 0;

  if (!v58)
  {
    objc_msgSend(v722, "objectForKeyedSubscript:", CFSTR("com.espresso.anecompiler.binary_point"));
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v725, "setObject:forKeyedSubscript:", v59, CFSTR("BinaryPoint"));

  }
  v60 = v804;
  v759 = (void *)v804;
  n = a1;
  while (v60 < *((_QWORD *)&v804 + 1))
  {
    v62 = v802;
    v63 = *(_OWORD *)(*(_QWORD *)(v802 + 32) + 16 * v60);
    *(_OWORD *)v818 = v63;
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67 = v63;
    v68 = (_QWORD *)(v63 + 40);
    if (*(char *)(v63 + 63) < 0)
    {
      v69 = 0;
      v72 = *(_QWORD *)(v63 + 48);
      if (v72 > 7)
      {
        if (v72 == 8)
        {
          v208 = (_QWORD *)*v68;
          if (*v208 != 0x646E5F74696C7073 && *v208 != 0x77725F656E616C70)
            goto LABEL_326;
          goto LABEL_327;
        }
        if (v72 == 23)
        {
          v68 = (_QWORD *)*v68;
LABEL_89:
          v77 = (_QWORD *)*v68;
          v78 = v68[1];
          v79 = *(_QWORD *)((char *)v68 + 15);
          _ZF = v77 == (_QWORD *)0x6978616D5F6E6F6ELL && v78 == 0x707075735F6D756DLL && v79 == 0x6E6F697373657270;
LABEL_99:
          v69 = _ZF;
        }
      }
      else
      {
        if (v72 == 4)
        {
          v68 = (_QWORD *)*v68;
LABEL_98:
          _ZF = *(_DWORD *)v68 == 1802530676;
          goto LABEL_99;
        }
        if (v72 == 5)
        {
          v73 = (_QWORD *)*v68;
          v74 = *(_DWORD *)v73;
          v75 = *((unsigned __int8 *)v73 + 4);
          if (v74 != 1768714355 || v75 != 116)
          {
LABEL_326:
            v69 = 0;
            goto LABEL_102;
          }
          goto LABEL_327;
        }
      }
    }
    else
    {
      v69 = 0;
      v70 = *(unsigned __int8 *)(v63 + 63);
      if (v70 > 7)
      {
        if (v70 == 8)
        {
          if (*v68 != 0x646E5F74696C7073)
          {
            _ZF = *v68 == 0x77725F656E616C70;
            goto LABEL_99;
          }
LABEL_327:
          v69 = 1;
          goto LABEL_102;
        }
        if (v70 == 23)
          goto LABEL_89;
      }
      else
      {
        if (v70 == 4)
          goto LABEL_98;
        if (v70 == 5)
        {
          _ZF = *(_DWORD *)v68 == 1768714355 && *(_BYTE *)(v63 + 44) == 116;
          goto LABEL_99;
        }
      }
    }
LABEL_102:
    *(_QWORD *)buf = &v759;
    v81 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v62 + 96, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (v81[4] - v81[3] == 24)
      v82 = 1;
    else
      v82 = v69;
    if ((v82 & 1) != 0)
      goto LABEL_124;
    v83 = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 16 * (_QWORD)v759);
    v84 = (uint64_t *)(v83 + 40);
    if (*(char *)(v83 + 63) < 0)
    {
      v85 = *(_QWORD *)(v83 + 48);
      if (v85 != 6)
      {
        if (v85 != 16)
          goto LABEL_1156;
        v84 = (uint64_t *)*v84;
LABEL_113:
        v87 = (uint64_t *)*v84;
        v86 = v84[1];
        if (v87 != (uint64_t *)0x5F747865746E6F63 || v86 != 0x726566736E617274)
          goto LABEL_1156;
        goto LABEL_124;
      }
      v84 = (uint64_t *)*v84;
    }
    else if (*(_BYTE *)(v83 + 63) != 6)
    {
      if (*(_BYTE *)(v83 + 63) != 16)
        goto LABEL_1156;
      goto LABEL_113;
    }
    v89 = *(_DWORD *)v84;
    v90 = *((unsigned __int16 *)v84 + 2);
    if (v89 != 1700750947 || v90 != 25710)
    {
LABEL_1156:
      v713 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string((std::string *)&v861, (unint64_t)v759);
      v714 = std::string::insert((std::string *)&v861, 0, "No output blobs for layer: ");
      v715 = *(_OWORD *)&v714->__r_.__value_.__l.__data_;
      *(_QWORD *)v872 = *((_QWORD *)&v714->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v715;
      v714->__r_.__value_.__l.__size_ = 0;
      v714->__r_.__value_.__r.__words[2] = 0;
      v714->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v713, (const std::string *)buf);
      __cxa_throw(v713, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_124:
    *(_QWORD *)buf = &v759;
    v92 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v62 + 96, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (v92[3] == v92[4])
    {
      n = a1;
      if (v64)
        goto LABEL_318;
      goto LABEL_322;
    }
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)&v861, (std::string *)(v67 + 16));
    v93 = v802;
    v94 = v802 + 96;
    *(_QWORD *)buf = &v759;
    v95 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v802 + 96, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    std::string::operator=((std::string *)&v861, (const std::string *)v95[3]);
    *(_QWORD *)buf = &v759;
    v96 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v94, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96[4] - v96[3]) >> 3) >= 2)
    {
      *(_QWORD *)__str = &v759;
      v97 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v94, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[3];
      *(_QWORD *)__str = &v759;
      v98 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v94, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[4];
      *(_QWORD *)v872 = 0;
      memset(buf, 0, sizeof(buf));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)buf, (__int128 *)(v97 + 24), v98, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v98 - v97 - 24) >> 3));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v862.__r_.__value_.__r.__words[1]);
      *(_OWORD *)&v862.__r_.__value_.__r.__words[1] = *(_OWORD *)buf;
      v863 = *(void **)v872;
      *(_QWORD *)v872 = 0;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)__str = buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    }
    *(_QWORD *)buf = &v759;
    v99 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v93 + 56, (unint64_t *)&v759, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (&v864 != v99 + 3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v864, (std::string *)v99[3], (std::string *)v99[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99[4] - v99[3]) >> 3));
    v866 = a3;
    if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v93 + 136), (unsigned __int8 *)&v861))
    {
      v752 = 1;
      goto LABEL_149;
    }
    *(_QWORD *)__str = &v861;
    v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93 + 136, (unsigned __int8 *)&v861, (__int128 **)__str);
    v102 = *((_QWORD *)v100 + 5);
    v101 = (std::__shared_weak_count *)*((_QWORD *)v100 + 6);
    *(_QWORD *)buf = v102;
    *(_QWORD *)&buf[8] = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v104 = __ldxr(p_shared_owners);
      while (__stxr(v104 + 1, p_shared_owners));
    }
    if (v102)
    {
      v869 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102) == 4)
      {
        v752 = 4;
        v105 = CFSTR("UInt8");
        goto LABEL_141;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102) == 2)
      {
        v752 = 2;
        v105 = CFSTR("Int8");
LABEL_141:
        v106 = v870;
        v870 = (__CFString *)v105;

        if (v101)
          goto LABEL_144;
        goto LABEL_148;
      }
    }
    v752 = 1;
    if (v101)
    {
LABEL_144:
      v107 = (unint64_t *)&v101->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
LABEL_148:
    v93 = v802;
LABEL_149:
    *(_QWORD *)&v779 = v93;
    *((_QWORD *)&v779 + 1) = v803;
    if (v803)
    {
      v109 = (unint64_t *)&v803->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    v777 = v818[0];
    v778 = v818[1];
    v746 = (std::string *)v818[1];
    if (v818[1])
    {
      v111 = (unint64_t *)((char *)v818[1] + 8);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(v93 + 472);
    v748 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    v113 = v777[8];
    v114 = *(std::__shared_weak_count **)(v113 + 16);
    v850.__r_.__value_.__r.__words[0] = *(_QWORD *)(v113 + 8);
    v850.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    memset(&v843, 0, sizeof(v843));
    v822[0] = 0;
    v822[1] = (void *)1065353216;
    *(_QWORD *)&v823 = 897988541;
    BYTE8(v823) = 0;
    *(void **)((char *)v825 + 4) = 0;
    v117 = v864;
    if (v865 != v864)
    {
      v118 = 0;
      v120 = v752 == 2 || v752 == 4;
      v733 = v120;
      while (2)
      {
        v121 = &v117[v118];
        if (SHIBYTE(v121->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v827, v121->__r_.__value_.__l.__data_, v121->__r_.__value_.__l.__size_);
        }
        else
        {
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          *(_QWORD *)&v827[16] = *((_QWORD *)&v121->__r_.__value_.__l + 2);
          *(_OWORD *)v827 = v122;
        }
        v123 = v779;
        *(_QWORD *)__str = v827;
        v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v779 + 136, v827, (__int128 **)__str);
        v126 = (float *)*((_QWORD *)v124 + 5);
        v125 = (std::__shared_weak_count *)*((_QWORD *)v124 + 6);
        v840 = v126;
        v841 = v125;
        if (v125)
        {
          v127 = (unint64_t *)&v125->__shared_owners_;
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)buf);
        if (v827[23] >= 0)
          v129 = v827[23];
        else
          v129 = *(_QWORD *)&v827[8];
        std::string::basic_string[abi:ne180100]((uint64_t)__str, v129 + 8);
        if (__str[23] >= 0)
          v130 = __str;
        else
          v130 = *(_BYTE **)__str;
        if (v129)
        {
          if (v827[23] >= 0)
            v131 = v827;
          else
            v131 = *(_BYTE **)v827;
          memmove(v130, v131, v129);
        }
        strcpy(&v130[v129], "__@quant");
        if ((v872[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_OWORD *)buf = *(_OWORD *)__str;
        *(_QWORD *)v872 = *(_QWORD *)&__str[16];
        if ((v827[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v827, *(std::string::size_type *)&v827[8]);
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)v827;
          *(_QWORD *)&__str[16] = *(_QWORD *)&v827[16];
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v873, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v874 = a3;
        v877 = 1;
        LODWORD(v822[0]) = 3;
        v838 = 0;
        v837 = 0;
        v132 = (*(uint64_t (**)(float *))(*(_QWORD *)v126 + 32))(v126);
        v133 = v132;
        v135 = v132 == 2 || v132 == 4;
        v136 = v777;
        v137 = (const void *)v777[8];
        if (!v137)
          goto LABEL_207;
        if (!v138)
          goto LABEL_207;
        v139 = v136[9];
        __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
        __sz.__r_.__value_.__l.__size_ = v139;
        if (v139)
        {
          v140 = (unint64_t *)(v139 + 8);
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
        v142 = (*(uint64_t (**)(void *))(*(_QWORD *)v138 + 104))(v138);
        std::unordered_set<std::string>::unordered_set((uint64_t)v834, v142);
        v143 = *(_QWORD *)(v142 + 40);
        *(_QWORD *)((char *)v836 + 13) = *(_QWORD *)(v142 + 45);
        *((_QWORD *)&v836[0] + 1) = v143;
        std::unordered_set<std::string>::unordered_set((uint64_t)&v830, (uint64_t)v834);
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v830, (uint64_t)v827))
        {
LABEL_202:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v830);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v834);
          size = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
          if (__sz.__r_.__value_.__l.__size_)
          {
            v146 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_207:
          v148 = v838;
          if (v838)
          {
            v149 = (unint64_t *)&v838->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }

          if (v876 < 0)
            operator delete(__p);
          *(_QWORD *)__str = &v873;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          *(_QWORD *)__str = &v872[8];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          if ((v872[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v151 = v841;
          if (v841)
          {
            v152 = (unint64_t *)&v841->__shared_owners_;
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
          }
          if ((v827[23] & 0x80000000) != 0)
            operator delete(*(void **)v827);
          ++v118;
          v117 = v864;
          if (v118 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v865 - (char *)v864) >> 3))
          {
            v114 = (std::__shared_weak_count *)v850.__r_.__value_.__l.__size_;
            goto LABEL_288;
          }
          continue;
        }
        break;
      }
      v154 = fabsf(v126[28] + -1.0) < 0.00000011921
          && std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v123 + 240), v827) == 0;
      v155 = v154 & ~Espresso::ANECompilerEngine::is_mix(v748, v144);
      if (v133 == 2 || v133 == 4)
      {
        if (v752 != 2 && v752 != 4 && (v155 & 1) == 0)
        {
          *(float *)&v822[1] = 1.0 / v126[28];
          v160 = v878;
          v878 = CFSTR("Float16");

          std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(__str, &v850, (uint64_t)v822);
          std::shared_ptr<Espresso::ANECompilerEngine::ane_kernel>::operator=[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,void>((uint64_t *)&v837, __str);
          v157 = *(std::__shared_weak_count **)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v161 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v159 = __ldaxr(v161);
            while (__stlxr(v159 - 1, v161));
LABEL_244:
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
        }
      }
      else if ((v752 == 4 || v752 == 2) && (v155 & 1) == 0)
      {
        *(float *)&v822[1] = v126[28];
        v156 = v878;
        v878 = CFSTR("Float16");

        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(__str, &v850, (uint64_t)v822);
        std::shared_ptr<Espresso::ANECompilerEngine::ane_kernel>::operator=[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,void>((uint64_t *)&v837, __str);
        v157 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v158 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          goto LABEL_244;
        }
      }
      if (v837)
      {
        std::string::operator=(&v864[v118], (const std::string *)buf);
        v162 = v779 + 136;
        if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v779 + 136), buf))
        {
          v163 = operator new(0xF0uLL);
          v163[2] = 0;
          *v163 = &off_1E2DB9E90;
          v163[1] = 0;
          *(_QWORD *)&v164 = Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v163 + 3), &v850, v133);
          *((_QWORD *)&v164 + 1) = v163;
          v736 = v164;
          *(_OWORD *)lpsrc = v164;
          v165 = buf;
          *(_QWORD *)__str = buf;
          v166 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v162, buf, (__int128 **)__str);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v166 + 5, v736, *((uint64_t *)&v736 + 1));
          *(_QWORD *)__str = buf;
          v167 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v162, buf, (__int128 **)__str)+ 5);
          *(_QWORD *)v848 = v827;
          v168 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v162, v827, (__int128 **)v848);
          Espresso::abstract_blob_container::shape(__str, *((_QWORD *)v168 + 5));
          v854 = 0;
          v853 = 0;
          (*(void (**)(uint64_t, _BYTE *, const __CFString **))(*(_QWORD *)v167 + 16))(v167, __str, &v853);
          v169 = (std::__shared_weak_count *)v854;
          if (v854)
          {
            p_info = (unint64_t *)&v854->info;
            do
              v171 = __ldaxr(p_info);
            while (__stlxr(v171 - 1, p_info));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          if (*((_QWORD *)&v880 + 1))
          {
            *(_QWORD *)&v881 = *((_QWORD *)&v880 + 1);
            operator delete(*((void **)&v880 + 1));
          }
          if (lpsrc[0]
          {
            v821.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
            v821.__r_.__value_.__l.__size_ = (std::string::size_type)lpsrc[1];
            if (lpsrc[1])
            {
              v173 = (unint64_t *)((char *)lpsrc[1] + 8);
              do
                v174 = __ldxr(v173);
              while (__stxr(v174 + 1, v173));
            }
          }
          else
          {
            v172 = 0;
            *(_OWORD *)&v821.__r_.__value_.__l.__data_ = 0uLL;
          }
          v175 = v779;
          *(_OWORD *)&v820.__r_.__value_.__l.__data_ = v779;
          if (*((_QWORD *)&v779 + 1))
          {
            v176 = (unint64_t *)(*((_QWORD *)&v779 + 1) + 8);
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
          }
          Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v172, (const Espresso::net *)v175, *((std::__shared_weak_count **)&v175 + 1));
          if (*((_QWORD *)&v175 + 1))
          {
            v180 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v175 + 1) + 16))(*((_QWORD *)&v175 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v175 + 1));
            }
          }
          Espresso::espresso_os_log_subsystem(v178, v179);
          v182 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG))
          {
            if (v872[7] < 0)
              v165 = *(uint8_t **)buf;
            if (v827[23] >= 0)
              v189 = v827;
            else
              v189 = *(_BYTE **)v827;
            v764.__r_.__value_.__r.__words[0] = (std::string::size_type)v827;
            v190 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v779 + 136, v827, (__int128 **)&v764);
            Espresso::abstract_blob_container::shape(__str, *((_QWORD *)v190 + 5));
            *(_DWORD *)v848 = 136316418;
            *(_QWORD *)&v848[4] = v165;
            *(_WORD *)&v848[12] = 2080;
            *(_QWORD *)&v848[14] = v189;
            *(_WORD *)&v848[22] = 1024;
            *(_DWORD *)&v848[24] = *(_DWORD *)__str;
            *(_WORD *)&v848[28] = 1024;
            *(_DWORD *)&v848[30] = v135;
            *(_WORD *)&v848[34] = 1024;
            *(_DWORD *)&v848[36] = v733;
            LOWORD(v849[0]) = 2048;
            *(double *)((char *)v849 + 2) = *(float *)&v822[1];
            _os_log_debug_impl(&dword_190DAF000, v182, OS_LOG_TYPE_DEBUG, "add_quantization_preprocessing: adding blob '%s' remapping '%s' w=%d is_input_quantized %d-> is_output_quantized %d alpha=%.3f", v848, 0x32u);
            if (*((_QWORD *)&v880 + 1))
            {
              *(_QWORD *)&v881 = *((_QWORD *)&v880 + 1);
              operator delete(*((void **)&v880 + 1));
            }
          }

          (**(void (***)(void *, uint64_t, uint8_t *))v837)(v837, a1, buf);
          v183 = (std::__shared_weak_count *)v821.__r_.__value_.__l.__size_;
          if (v821.__r_.__value_.__l.__size_)
          {
            v184 = (unint64_t *)(v821.__r_.__value_.__l.__size_ + 8);
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          v186 = (std::__shared_weak_count *)lpsrc[1];
          if (lpsrc[1])
          {
            v187 = (unint64_t *)((char *)lpsrc[1] + 8);
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
          }
        }
      }
      goto LABEL_202;
    }
LABEL_288:
    *(_QWORD *)buf = &v843;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v114)
    {
      v191 = (unint64_t *)&v114->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }

    if (v746)
    {
      p_size = &v746->__r_.__value_.__l.__size_;
      do
        v194 = __ldaxr(p_size);
      while (__stlxr(v194 - 1, p_size));
      if (!v194)
      {
        (*(void (**)(std::string *))(v746->__r_.__value_.__r.__words[0] + 16))(v746);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v746);
      }
    }
    v195 = (std::__shared_weak_count *)*((_QWORD *)&v779 + 1);
    if (*((_QWORD *)&v779 + 1))
    {
      v196 = (unint64_t *)(*((_QWORD *)&v779 + 1) + 8);
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    v198 = v818[0];
    v199 = (const void *)*((_QWORD *)v818[0] + 8);
    if (v199)
    {
      if (v200)
      {
        v201 = (std::__shared_weak_count *)*((_QWORD *)v198 + 9);
        *(_QWORD *)buf = v200;
        *(_QWORD *)&buf[8] = v201;
        if (v201)
        {
          v202 = (unint64_t *)&v201->__shared_owners_;
          do
            v203 = __ldxr(v202);
          while (__stxr(v203 + 1, v202));
        }
        (**v200)(v200, a1, &v861);
        if (v201)
        {
          v204 = (unint64_t *)&v201->__shared_owners_;
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
      }
    }

    if (v868 < 0)
      operator delete(v867);
    *(_QWORD *)buf = &v864;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v862.__r_.__value_.__l.__size_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    n = a1;
    if (v862.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v861);
    v64 = (std::__shared_weak_count *)v818[1];
    if (v818[1])
    {
LABEL_318:
      v206 = (unint64_t *)&v64->__shared_owners_;
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
LABEL_322:
    v60 = (unint64_t)v759 + 1;
    v759 = (void *)v60;
  }
  if (!v732)
  {
    Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)buf, *(void **)(n + 136));
    for (k = v806; k; k = (uint64_t *)*k)
    {
      v210 = k + 2;
      *(_QWORD *)&v861 = k + 2;
      v211 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v802 + 136, (unsigned __int8 *)k + 16, (__int128 **)&v861);
      v212 = (const void *)*((_QWORD *)v211 + 5);
      if (!v212
      {
        *(_QWORD *)&v848[8] = 0;
        *(_QWORD *)v848 = 0;
        if (*((char *)k + 39) < 0)
          v210 = (_QWORD *)*v210;
        *(_QWORD *)&v861 = v210;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type for: %s", &v861);
      }
      v214 = *((_QWORD *)v211 + 6);
      *(_QWORD *)v848 = v213;
      *(_QWORD *)&v848[8] = v214;
      if (v214)
      {
        v215 = (unint64_t *)(v214 + 8);
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
      }
      Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)k + 16, (std::string *)v822);
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(buf, (unsigned __int8 *)v822))
      {
        v217 = v802;
        v775 = v802;
        v776 = v803;
        if (v803)
        {
          v218 = (unint64_t *)&v803->__shared_owners_;
          do
            v219 = __ldxr(v218);
          while (__stxr(v219 + 1, v218));
        }
        v220 = *(_QWORD *)v848;
        v221 = *(std::__shared_weak_count **)&v848[8];
        v773 = *(_QWORD *)v848;
        v774 = *(_QWORD *)&v848[8];
        if (*(_QWORD *)&v848[8])
        {
          v222 = (unint64_t *)(*(_QWORD *)&v848[8] + 8);
          do
            v223 = __ldxr(v222);
          while (__stxr(v223 + 1, v222));
        }
        if ((SBYTE7(v823) & 0x80u) == 0)
          v224 = v822;
        else
          v224 = (void **)v822[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v224);
        v225 = (void *)objc_claimAutoreleasedReturnValue();
        v226 = v217 + 472;
        Espresso::ANECompilerEngine::ane_arch_allow_network_override(v217 + 472);
        v227 = (void *)objc_claimAutoreleasedReturnValue();
        std::string::basic_string[abi:ne180100]<0>(__str, "experimental.ane.enable_int16_resample");
        std::string::basic_string[abi:ne180100]<0>(v834, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v226, (uint64_t)__str, (uint64_t)v834, (std::string *)&v861);
        if (v862.__r_.__value_.__s.__data_[7] < 0)
        {
          v228 = *((_QWORD *)&v861 + 1) == 1 && *(_BYTE *)v861 == 49;
          operator delete((void *)v861);
        }
        else
        {
          v228 = v862.__r_.__value_.__s.__data_[7] == 1 && v861 == 49;
        }
        if (SBYTE7(v835) < 0)
          operator delete(v834[0]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        *(_QWORD *)&v861 = v220;
        *((_QWORD *)&v861 + 1) = v221;
        if (v221)
        {
          v229 = (unint64_t *)&v221->__shared_owners_;
          do
            v230 = __ldxr(v229);
          while (__stxr(v230 + 1, v229));
        }
        input_unit((unsigned int **)&v861, (unsigned int *)(v220 + 160), v227, 0, v228);
        v231 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v231, v225);

        v232 = (std::__shared_weak_count *)*((_QWORD *)&v861 + 1);
        if (*((_QWORD *)&v861 + 1))
        {
          v233 = (unint64_t *)(*((_QWORD *)&v861 + 1) + 8);
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        objc_msgSend(*(id *)(a1 + 152), "addObject:", v225);

        if (v221)
        {
          v235 = (unint64_t *)&v221->__shared_owners_;
          do
            v236 = __ldaxr(v235);
          while (__stlxr(v236 - 1, v235));
          if (!v236)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        v237 = v776;
        if (v776)
        {
          v238 = (unint64_t *)&v776->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
      }
      if (SBYTE7(v823) < 0)
        operator delete(v822[0]);
      v240 = *(std::__shared_weak_count **)&v848[8];
      if (*(_QWORD *)&v848[8])
      {
        v241 = (unint64_t *)(*(_QWORD *)&v848[8] + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)buf);
    n = a1;
  }
  v243 = *(_QWORD **)(n + 272);
  if (v243 != v741)
  {
    v749 = (Espresso::ANECompilerEngine *)(n + 336);
    do
    {
      if (*((char *)v243 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v243[4], v243[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v243 + 2);
        *(_QWORD *)v872 = v243[6];
      }
      if (*((char *)v243 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v872[8], (const std::string::value_type *)v243[7], v243[8]);
      }
      else
      {
        *(_OWORD *)&v872[8] = *(_OWORD *)(v243 + 7);
        *(_QWORD *)&v872[24] = v243[9];
      }
      v244 = (std::string *)v243[11];
      v873.__begin_ = (std::vector<std::string>::pointer)v243[10];
      v873.__end_ = v244;
      if (v244)
      {
        v245 = &v244->__r_.__value_.__l.__size_;
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(v802 + 472);
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      begin = v873.__begin_;
      v771 = v873.__begin_;
      end = v873.__end_;
      v753 = (std::__shared_weak_count *)v873.__end_;
      if (v873.__end_)
      {
        v249 = &v873.__end_->__r_.__value_.__l.__size_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
      }
      v757 = v247;
      if (!begin)
      {
        v712 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_argument_error::invalid_argument_error(v712);
      }
      v251 = HIDWORD(begin->__r_.__value_.__r.__words[1]);
      v252 = SLODWORD(begin->__r_.__value_.__r.__words[1]);
      v253 = 2 * v252 * v251;
      v254 = (HIDWORD(begin->__r_.__value_.__r.__words[2]) * LODWORD(begin->__r_.__value_.__r.__words[2]));
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v834, v254 * v253, 1, 1, 1);
      v255 = v253;
      v256 = (int *)v834[0];
      if ((int)v254 >= 1)
      {
        v257 = 0;
        v258 = 0;
        for (m = 0; m != v254; ++m)
        {
          if ((int)v251 >= 1)
          {
            v260 = 0;
            v261 = (_WORD *)(*((_QWORD *)v256 + 2) + v258);
            v262 = begin[1].__r_.__value_.__r.__words[0] + 4 * v257;
            do
            {
              if ((_DWORD)v252)
              {
                v263 = (int *)v262;
                v264 = v261;
                v265 = v252;
                do
                {
                  v266 = *v263++;
                  _S0 = v266;
                  __asm { FCVT            H0, S0 }
                  *v264++ = _S0;
                  --v265;
                }
                while (v265);
              }
              ++v260;
              v261 += v252;
              v262 += 4 * v252;
            }
            while (v260 != v251);
          }
          v258 += v253;
          v257 += v251 * v252;
        }
      }
      v271 = (std::__shared_weak_count *)v834[1];
      v822[0] = v256;
      v822[1] = v834[1];
      if (v834[1])
      {
        v272 = (unint64_t *)((char *)v834[1] + 8);
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
      }
      v274 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)v725, *((const unsigned __int8 **)v256 + 2), v256[2]);
      if (v271)
      {
        v275 = (unint64_t *)&v271->__shared_owners_;
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
      v277 = (void *)MEMORY[0x1E0CB3940];
      Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v749, (char *)buf, (std::string *)&v861);
      if (v862.__r_.__value_.__s.__data_[7] >= 0)
        v278 = &v861;
      else
        v278 = (__int128 *)v861;
      objc_msgSend(v277, "stringWithUTF8String:", v278);
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      if (v862.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v861);
      v280 = (void *)objc_opt_new();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v279, CFSTR("ConstantName"));
      v281 = (void *)MEMORY[0x1E0CB37E8];
      if (*(_BYTE *)(a1 + 552))
        weights_file_index = 0;
      else
      objc_msgSend(v281, "numberWithUnsignedLong:", weights_file_index);
      v283 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v283, CFSTR("ConstantIndex"));

      objc_msgSend(v280, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ConstantType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v251);
      v284 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v284, CFSTR("ConstantHeight"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v252);
      v285 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v285, CFSTR("ConstantWidth"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v254);
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v286, CFSTR("ConstantChannels"));

      objc_msgSend(v280, "setObject:forKeyedSubscript:", &unk_1E2DEDB68, CFSTR("ConstantInterleave"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2 * v252);
      v287 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v287, CFSTR("ConstantRowStride"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v255);
      v288 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v288, CFSTR("ConstantPlaneStride"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v274);
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "setObject:forKeyedSubscript:", v289, CFSTR("ConstantByteOffset"));

      objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v280, v279);
      if ((Espresso::ANECompilerEngine::is_mix(v757, v290) & 1) == 0)
      {
        v291 = (unsigned int *)v771;
        v292 = a1;
        if (SHIDWORD(v771->__r_.__value_.__r.__words[2]) < 2)
          goto LABEL_451;
        v293 = (void *)MEMORY[0x1E0CB3940];
        if (v872[7] >= 0)
          v294 = v872[7];
        else
          v294 = *(_QWORD *)&buf[8];
        std::string::basic_string[abi:ne180100]((uint64_t)__str, v294 + 13);
        if (__str[23] >= 0)
          v295 = __str;
        else
          v295 = *(_BYTE **)__str;
        if (v294)
        {
          if (v872[7] >= 0)
            v296 = buf;
          else
            v296 = *(uint8_t **)buf;
          memmove(v295, v296, v294);
        }
        strcpy(&v295[v294], "__@prereshape");
        Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v749, __str, (std::string *)&v861);
        if (v862.__r_.__value_.__s.__data_[7] >= 0)
          v297 = &v861;
        else
          v297 = (__int128 *)v861;
        objc_msgSend(v293, "stringWithUTF8String:", v297);
        v298 = objc_claimAutoreleasedReturnValue();

        if (v862.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v861);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v280, v298);
        objc_msgSend(v280, "setObject:forKeyedSubscript:", v298, CFSTR("ConstantName"));
        v299 = (void *)MEMORY[0x1E0CB3940];
        Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v749, (char *)buf, (std::string *)&v861);
        if (v862.__r_.__value_.__s.__data_[7] >= 0)
          v300 = &v861;
        else
          v300 = (__int128 *)v861;
        objc_msgSend(v299, "stringWithUTF8String:", v300);
        v301 = (void *)objc_claimAutoreleasedReturnValue();
        if (v862.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v861);
        v302 = (void *)objc_opt_new();
        objc_msgSend(v302, "setObject:forKeyedSubscript:", v298, CFSTR("Bottom"));
        objc_msgSend(v302, "setObject:forKeyedSubscript:", v301, CFSTR("Name"));
        objc_msgSend(v302, "setObject:forKeyedSubscript:", CFSTR("Reshape"), CFSTR("Type"));
        objc_msgSend(v302, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("OutputType"));
        v303 = (void *)objc_opt_new();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v291[2]);
        v304 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v303, "setObject:forKeyedSubscript:", v304, CFSTR("ReshapedWidth"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v291[3]);
        v305 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v303, "setObject:forKeyedSubscript:", v305, CFSTR("ReshapedHeight"));

        objc_msgSend(v303, "setObject:forKeyedSubscript:", &unk_1E2DEDB68, CFSTR("ReshapedDepth"));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v291[4]);
        v306 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v303, "setObject:forKeyedSubscript:", v306, CFSTR("ReshapedChannel"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v291[5]);
        v307 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v303, "setObject:forKeyedSubscript:", v307, CFSTR("ReshapedBatch"));

        objc_msgSend(v302, "setObject:forKeyedSubscript:", v303, CFSTR("Params"));
        objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v302, v301);
        objc_msgSend(*(id *)(a1 + 144), "addObject:", v301);

        v279 = (void *)v298;
      }
      v292 = a1;
LABEL_451:
      objc_msgSend(*(id *)(v292 + 168), "addObject:", v279);

      v308 = (std::__shared_weak_count *)v834[1];
      if (v834[1])
      {
        v309 = (unint64_t *)((char *)v834[1] + 8);
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (!v310)
        {
          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
          std::__shared_weak_count::__release_weak(v308);
        }
      }

      if (v753)
      {
        v311 = (unint64_t *)&v753->__shared_owners_;
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
          std::__shared_weak_count::__release_weak(v753);
        }
      }

      v313 = (std::__shared_weak_count *)v873.__end_;
      n = a1;
      if (v873.__end_)
      {
        v314 = &v873.__end_->__r_.__value_.__l.__size_;
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      if ((v872[31] & 0x80000000) != 0)
        operator delete(*(void **)&v872[8]);
      if ((v872[7] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v316 = (_QWORD *)v243[1];
      if (v316)
      {
        do
        {
          v317 = v316;
          v316 = (_QWORD *)*v316;
        }
        while (v316);
      }
      else
      {
        do
        {
          v317 = (_QWORD *)v243[2];
          _ZF = *v317 == (_QWORD)v243;
          v243 = v317;
        }
        while (!_ZF);
      }
      v243 = v317;
    }
    while (v317 != v741);
  }
  if (!v732)
  {
    objc_msgSend(v722, "objectForKeyedSubscript:", CFSTR("espresso.ane.dump_all_blobs"));
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    v319 = objc_msgSend(v318, "BOOLValue");

    if (v319)
    {
      v320 = 0;
      *(_QWORD *)v872 = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = &buf[8];
      v822[0] = (void *)v804;
      n = a1;
      if ((unint64_t)v804 < *((_QWORD *)&v804 + 1))
      {
        do
        {
          *(_QWORD *)&v861 = v822;
          v321 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v802 + 96, (unint64_t *)v822, (uint64_t)&std::piecewise_construct, (uint64_t **)&v861);
          v323 = (__int128 *)v321[3];
          v322 = (__int128 *)v321[4];
          while (v323 != v322)
          {
            if (*((char *)v323 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v861, *(const std::string::value_type **)v323, *((_QWORD *)v323 + 1));
            }
            else
            {
              v324 = *v323;
              v862.__r_.__value_.__r.__words[0] = *((_QWORD *)v323 + 2);
              v861 = v324;
            }
            *(_QWORD *)__str = &v861;
            if (!std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, &v861, (__int128 **)__str)[56])
            {
              *(_QWORD *)__str = &v861;
              std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, &v861, (__int128 **)__str)[56] = 1;
              v325 = v802;
              *(_QWORD *)__str = &v861;
              v326 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v802 + 136, (unsigned __int8 *)&v861, (__int128 **)__str);
              v327 = (const void *)*((_QWORD *)v326 + 5);
              if (!v327
              {
                v834[1] = 0;
                v834[0] = 0;
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
              }
              v329 = (uint64_t)v328;
              v330 = (std::__shared_weak_count *)*((_QWORD *)v326 + 6);
              v834[0] = v328;
              v834[1] = v330;
              if (v330)
              {
                v331 = (unint64_t *)&v330->__shared_owners_;
                do
                  v332 = __ldxr(v331);
                while (__stxr(v332 + 1, v331));
              }
              v769 = v325;
              v770 = v803;
              if (v803)
              {
                v333 = (unint64_t *)&v803->__shared_owners_;
                do
                  v334 = __ldxr(v333);
                while (__stxr(v334 + 1, v333));
              }
              Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)&v861, (std::string *)__str);
              v768[0] = v329;
              v768[1] = (uint64_t)v330;
              if (v330)
              {
                v335 = (unint64_t *)&v330->__shared_owners_;
                do
                  v336 = __ldxr(v335);
                while (__stxr(v336 + 1, v335));
              }
              Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(a1, &v769, (const void **)__str, v768);
              if (v330)
              {
                v337 = (unint64_t *)&v330->__shared_owners_;
                do
                  v338 = __ldaxr(v337);
                while (__stlxr(v338 - 1, v337));
                if (!v338)
                {
                  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                  std::__shared_weak_count::__release_weak(v330);
                }
              }
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
              v339 = v770;
              if (v770)
              {
                v340 = (unint64_t *)&v770->__shared_owners_;
                do
                  v341 = __ldaxr(v340);
                while (__stlxr(v341 - 1, v340));
                if (!v341)
                {
                  ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                  std::__shared_weak_count::__release_weak(v339);
                }
              }
              v342 = (std::__shared_weak_count *)v834[1];
              if (v834[1])
              {
                v343 = (unint64_t *)((char *)v834[1] + 8);
                do
                  v344 = __ldaxr(v343);
                while (__stlxr(v344 - 1, v343));
                if (!v344)
                {
                  ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                  std::__shared_weak_count::__release_weak(v342);
                }
              }
              n = a1;
            }
            if (v862.__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v861);
            v323 = (__int128 *)((char *)v323 + 24);
          }
          ++v822[0];
        }
        while (v822[0] < (void *)*((_QWORD *)&v804 + 1));
        v320 = *(char **)&buf[8];
      }
      std::__tree<std::string>::destroy((uint64_t)buf, v320);
    }
    else
    {
      v345 = v808;
      for (n = a1; v345; v345 = *(unsigned __int8 **)v345)
      {
        *(_QWORD *)buf = v345 + 16;
        v346 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v802 + 136, v345 + 16, (__int128 **)buf);
        v347 = (const void *)*((_QWORD *)v346 + 5);
        if (!v347
        {
          v861 = 0uLL;
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
        }
        v349 = *((_QWORD *)v346 + 6);
        *(_QWORD *)&v861 = v348;
        *((_QWORD *)&v861 + 1) = v349;
        if (v349)
        {
          v350 = (unint64_t *)(v349 + 8);
          do
            v351 = __ldxr(v350);
          while (__stxr(v351 + 1, v350));
        }
        v766 = v802;
        v767 = v803;
        n = a1;
        if (v803)
        {
          v352 = (unint64_t *)&v803->__shared_owners_;
          do
            v353 = __ldxr(v352);
          while (__stxr(v353 + 1, v352));
        }
        Espresso::ANECompilerEngine::ane_name_translator::ane_name(a1 + 336, (char *)v345 + 16, (std::string *)buf);
        v354 = (std::__shared_weak_count *)*((_QWORD *)&v861 + 1);
        v765 = v861;
        if (*((_QWORD *)&v861 + 1))
        {
          v355 = (unint64_t *)(*((_QWORD *)&v861 + 1) + 8);
          do
            v356 = __ldxr(v355);
          while (__stxr(v356 + 1, v355));
        }
        Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(a1, &v766, (const void **)buf, (uint64_t *)&v765);
        if (v354)
        {
          v357 = (unint64_t *)&v354->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
            std::__shared_weak_count::__release_weak(v354);
          }
        }
        if ((v872[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v359 = v767;
        if (v767)
        {
          v360 = (unint64_t *)&v767->__shared_owners_;
          do
            v361 = __ldaxr(v360);
          while (__stlxr(v361 - 1, v360));
          if (!v361)
          {
            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
            std::__shared_weak_count::__release_weak(v359);
          }
        }
        v362 = (std::__shared_weak_count *)*((_QWORD *)&v861 + 1);
        if (*((_QWORD *)&v861 + 1))
        {
          v363 = (unint64_t *)(*((_QWORD *)&v861 + 1) + 8);
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v764, "net");
  if (v728)
  {
    if (*(char *)(v802 + 447) < 0)
    {
      if (!*(_QWORD *)(v802 + 432))
        goto LABEL_558;
    }
    else if (!*(_BYTE *)(v802 + 447))
    {
      goto LABEL_558;
    }
    std::string::operator=(&v764, (const std::string *)(v802 + 424));
  }
LABEL_558:
  if (a3 >= 1)
  {
    std::to_string((std::string *)&v861, a3);
    v365 = std::string::insert((std::string *)&v861, 0, "_");
    v366 = *(_OWORD *)&v365->__r_.__value_.__l.__data_;
    *(_QWORD *)v872 = *((_QWORD *)&v365->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v366;
    v365->__r_.__value_.__l.__size_ = 0;
    v365->__r_.__value_.__r.__words[2] = 0;
    v365->__r_.__value_.__r.__words[0] = 0;
    if (v872[7] >= 0)
      v367 = buf;
    else
      v367 = *(uint8_t **)buf;
    if (v872[7] >= 0)
      v368 = v872[7];
    else
      v368 = *(_QWORD *)&buf[8];
    std::string::append(&v764, (const std::string::value_type *)v367, v368);
    if ((v872[7] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v862.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v861);
  }
  objc_msgSend(*(id *)(n + 136), "setObject:forKeyedSubscript:", *(_QWORD *)(n + 144), CFSTR("Units"));
  objc_msgSend(*(id *)(n + 136), "setObject:forKeyedSubscript:", *(_QWORD *)(n + 152), CFSTR("Inputs"));
  if (objc_msgSend(*(id *)(n + 160), "count"))
    objc_msgSend(*(id *)(n + 136), "setObject:forKeyedSubscript:", *(_QWORD *)(n + 160), CFSTR("Outputs"));
  if (objc_msgSend(*(id *)(n + 168), "count"))
    objc_msgSend(*(id *)(n + 136), "setObject:forKeyedSubscript:", *(_QWORD *)(n + 168), CFSTR("Constants"));
  v369 = *(void **)(n + 200);
  if ((v764.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v370 = &v764;
  else
    v370 = (std::string *)v764.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v370);
  v371 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v369, "addObject:", v371);

  if (*(_BYTE *)(a1 + 120))
  {
    objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 192), CFSTR("UnitList"));
    if ((v764.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v372 = &v764;
    else
      v372 = (std::string *)v764.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v372);
    v373 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v373, CFSTR("Name"));

    v374 = a1;
    objc_msgSend(*(id *)(a1 + 184), "addObject:", *(_QWORD *)(a1 + 136));
  }
  else
  {
    v376 = *(void **)(a1 + 128);
    v375 = *(_QWORD *)(a1 + 136);
    if ((v764.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v377 = &v764;
    else
      v377 = (std::string *)v764.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v377);
    v378 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v376, "setObject:forKeyedSubscript:", v375, v378);

    v374 = a1;
  }
  v379 = *(void **)(v374 + 208);
  if (!v379)
  {
    v380 = objc_opt_new();
    v381 = *(void **)(v374 + 208);
    *(_QWORD *)(v374 + 208) = v380;

    v379 = *(void **)(v374 + 208);
    v374 = a1;
  }
  objc_msgSend(v379, "addObject:", *(_QWORD *)(v374 + 136));
  if ((v728 & 1) != 0 || v732 && !is_network_multihead_multiprocedure)
  {
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = 0uLL;
    v560 = *(std::__shared_weak_count **)(v374 + 16);
    if (!v560
      || (v557 = std::__shared_weak_count::lock(v560),
          (__sz.__r_.__value_.__l.__size_ = (std::string::size_type)v557) == 0)
      || (v561 = *(_QWORD *)(v374 + 8), (__sz.__r_.__value_.__r.__words[0] = v561) == 0))
    {
      v717 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v717, "Inconsistent state");
      __cxa_throw(v717, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v727 = v791;
    if (!*(_QWORD *)(v561 + 792)
      && (Espresso::use_multiple_procedure_for_segments((uint64_t *)&__sz) & 1) == 0
      && !*(_BYTE *)(v374 + 385))
    {
      if (v727 >= 2)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Legacy code wants to exit here, which is wrong in case of multiple 4CC configs");
LABEL_1126:
      v702 = (unint64_t *)&v557->__shared_owners_;
      do
        v559 = __ldaxr(v702);
      while (__stlxr(v559 - 1, v702));
LABEL_1128:
      if (!v559)
      {
        ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
        std::__shared_weak_count::__release_weak(v557);
      }
      goto LABEL_1130;
    }
    Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)v822, *(void **)(v374 + 136));
    v562 = (const std::string::value_type **)(v374 + 392);
    if (*(char *)(v374 + 415) < 0)
    {
      v563 = *(_QWORD *)(v374 + 400);
      if (v563)
      {
        std::string::__init_copy_ctor_external((std::string *)v848, *v562, v563);
        goto LABEL_914;
      }
    }
    else if (*(_BYTE *)(v374 + 415))
    {
      *(_OWORD *)v848 = *(_OWORD *)v562;
      *(_QWORD *)&v848[16] = *(_QWORD *)(v374 + 408);
LABEL_914:
      std::map<std::string,Espresso::net_configuration>::map[abi:ne180100]((uint64_t)&v830, (_QWORD *)(v561 + 776));
      *(_QWORD *)buf = v848;
      v564 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v830, v848, (__int128 **)buf);
      if (v564 + 7 != (uint64_t *)(v561 + 800))
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v564 + 7), *(std::string **)(v561 + 800), *(std::string **)(v561 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v561 + 808) - *(_QWORD *)(v561 + 800)) >> 3));
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v564 + 10, *(__int128 **)(v561 + 824), (__int128 *)(v561 + 832));
      }
      v565 = v791;
      if (!v791)
        goto LABEL_1120;
      v743 = 0;
      v756 = v374 + 336;
      while (1)
      {
        v735 = (uint64_t *)v830;
        if (v830 == v831)
          goto LABEL_1119;
        do
        {
          v738 = (void *)objc_opt_new();
          lpsrc[0] = CFSTR("0");
          v853 = CFSTR("OperationName");
          v854 = CFSTR("NetworkName");
          if ((v764.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v566 = &v764;
          else
            v566 = (std::string *)v764.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v566);
          v567 = (void *)objc_claimAutoreleasedReturnValue();
          lpsrc[1] = v567;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", lpsrc, &v853, 2);
          v568 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v738, "addObject:", v568);

          v569 = __sz.__r_.__value_.__r.__words[0];
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v834, (__int128 **)(__sz.__r_.__value_.__r.__words[0] + 184));
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v835 + 8, (__int128 **)(v569 + 208));
          v570 = (const void **)(v735 + 4);
          v571 = *((unsigned __int8 *)v735 + 55);
          if ((v571 & 0x80u) == 0)
            v572 = *((unsigned __int8 *)v735 + 55);
          else
            v572 = v735[5];
          v573 = v848[23];
          if (v848[23] < 0)
            v573 = *(_QWORD *)&v848[8];
          if (v572 == v573)
          {
            if (v848[23] >= 0)
              v574 = v848;
            else
              v574 = *(unsigned __int8 **)v848;
            if ((v571 & 0x80) != 0)
            {
              if (!memcmp(*v570, v574, v735[5]))
              {
LABEL_940:
                if (*(_BYTE *)(a1 + 385))
                  v576 = v727 > 1;
                else
                  v576 = 1;
                if (v576)
                  goto LABEL_968;
                goto LABEL_944;
              }
            }
            else
            {
              if (!*((_BYTE *)v735 + 55))
                goto LABEL_940;
              v575 = (unsigned __int8 *)(v735 + 4);
              while (*v575 == *v574)
              {
                ++v575;
                ++v574;
                if (!--v571)
                  goto LABEL_940;
              }
            }
          }
          if (v727 > 1)
            goto LABEL_968;
LABEL_944:
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v843, (__int128 **)(v569 + 824));
          v577 = (uint64_t *)v735[10];
          if (v577 != v735 + 11)
          {
            do
            {
              *(_QWORD *)buf = v577 + 4;
              v578 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v843, v577 + 4, (__int128 **)buf);
              v579 = *(_OWORD *)(v577 + 7);
              v580 = *(_OWORD *)(v577 + 9);
              *((_QWORD *)v578 + 11) = v577[11];
              *(_OWORD *)(v578 + 72) = v580;
              *(_OWORD *)(v578 + 56) = v579;
              if (v577 != (uint64_t *)v578)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v578 + 96, (char *)v577[12], v577[13], (v577[13] - v577[12]) >> 2);
              v581 = (uint64_t *)v577[1];
              if (v581)
              {
                do
                {
                  v582 = v581;
                  v581 = (uint64_t *)*v581;
                }
                while (v581);
              }
              else
              {
                do
                {
                  v582 = (uint64_t *)v577[2];
                  _ZF = *v582 == (_QWORD)v577;
                  v577 = v582;
                }
                while (!_ZF);
              }
              v577 = v582;
            }
            while (v582 != v735 + 11);
          }
          v583 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
          v821.__r_.__value_.__r.__words[0] = v569;
          v821.__r_.__value_.__l.__size_ = __sz.__r_.__value_.__l.__size_;
          if (__sz.__r_.__value_.__l.__size_)
          {
            v584 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
            do
              v585 = __ldxr(v584);
            while (__stxr(v585 + 1, v584));
          }
          Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v821, (uint64_t)&v843, (uint64_t)buf);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v834, (char *)v834[1]);
          v834[0] = *(void **)buf;
          v834[1] = *(void **)&buf[8];
          *(_QWORD *)&v835 = *(_QWORD *)v872;
          if (*(_QWORD *)v872)
          {
            *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v834[1];
            *(_QWORD *)buf = &buf[8];
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)v872 = 0;
          }
          else
          {
            v834[0] = &v834[1];
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v835 + 8, *(char **)&v836[0]);
          v586 = *(char **)&v872[16];
          *((_QWORD *)&v835 + 1) = *(_QWORD *)&v872[8];
          v836[0] = *(_OWORD *)&v872[16];
          if (*(_QWORD *)&v872[24])
          {
            *(_QWORD *)(*(_QWORD *)&v872[16] + 16) = v836;
            v586 = 0;
            *(_QWORD *)&v872[8] = &v872[16];
            *(_OWORD *)&v872[16] = 0uLL;
          }
          else
          {
            *((_QWORD *)&v835 + 1) = v836;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v872[8], v586);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
          if (v583)
          {
            v587 = (unint64_t *)&v583->__shared_owners_;
            do
              v588 = __ldaxr(v587);
            while (__stlxr(v588 - 1, v587));
            if (!v588)
            {
              ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
              std::__shared_weak_count::__release_weak(v583);
            }
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v843, (char *)v843.__r_.__value_.__l.__size_);
LABEL_968:
          Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(&v843, (uint64_t)v570, v743);
          v747 = (std::string *)objc_opt_new();
          for (ii = v806; ii; ii = (uint64_t *)*ii)
          {
            v590 = ii + 2;
            *(_QWORD *)buf = ii + 2;
            v591 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__sz.__r_.__value_.__r.__words[0] + 136, (unsigned __int8 *)ii + 16, (__int128 **)buf);
            v592 = (const void *)*((_QWORD *)v591 + 5);
            if (!v592
            {
              if (*((char *)ii + 39) < 0)
                v590 = (_QWORD *)*v590;
              *(_QWORD *)buf = v590;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type for: %s", buf);
            }
            v594 = v593;
            v595 = (std::__shared_weak_count *)*((_QWORD *)v591 + 6);
            if (v595)
            {
              v596 = (unint64_t *)&v595->__shared_owners_;
              do
                v597 = __ldxr(v596);
              while (__stxr(v597 + 1, v596));
            }
            Espresso::ANECompilerEngine::ane_name_translator::ane_name(v756, (char *)ii + 16, (std::string *)v827);
            *(_QWORD *)buf = v827;
            v598 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v822, v827, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
            v599 = (char *)*((_QWORD *)v598 + 5);
            v751 = (Espresso::ANECompilerEngine *)*((_QWORD *)v598 + 6);
            if (v599 != (char *)v751)
            {
              v600 = (unint64_t *)&v595->__shared_owners_;
              while (1)
              {
                if (v594[50])
                {
                  *(_QWORD *)buf = ii + 2;
                  v601 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v834, ii + 2, (__int128 **)buf);
                  *(_OWORD *)&v820.__r_.__value_.__l.__data_ = 0uLL;
                  (*(void (**)(_DWORD *, char *, std::string *))(*(_QWORD *)v594 + 16))(v594, v601 + 56, &v820);
                  v602 = (std::__shared_weak_count *)v820.__r_.__value_.__l.__size_;
                  if (v820.__r_.__value_.__l.__size_)
                  {
                    v603 = (unint64_t *)(v820.__r_.__value_.__l.__size_ + 8);
                    do
                      v604 = __ldaxr(v603);
                    while (__stlxr(v604 - 1, v603));
                    if (!v604)
                    {
                      ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                      std::__shared_weak_count::__release_weak(v602);
                    }
                  }
                }
                *(_QWORD *)buf = ii + 2;
                v605 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v834, ii + 2, (__int128 **)buf);
                Espresso::abstract_blob_container::shape((char *)buf, (uint64_t)v594);
                v606 = (uint64_t)(v605 + 56);
                v607 = Espresso::layer_shape::operator==(v606, (uint64_t)buf);
                if (*(_QWORD *)&v872[24])
                {
                  v873.__begin_ = *(std::vector<std::string>::pointer *)&v872[24];
                  operator delete(*(void **)&v872[24]);
                }
                if (!v607)
                {
                  v818[1] = 0;
                  v818[0] = 0;
                  (*(void (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)v594 + 16))(v594, v606, v818);
                  v608 = (std::__shared_weak_count *)v818[1];
                  if (v818[1])
                  {
                    v609 = (unint64_t *)((char *)v818[1] + 8);
                    do
                      v610 = __ldaxr(v609);
                    while (__stlxr(v610 - 1, v609));
                    if (!v610)
                    {
                      ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                      std::__shared_weak_count::__release_weak(v608);
                    }
                  }
                }
                v611 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                if (__sz.__r_.__value_.__l.__size_)
                {
                  v612 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
                  do
                    v613 = __ldxr(v612);
                  while (__stxr(v613 + 1, v612));
                }
                v850.__r_.__value_.__r.__words[0] = (std::string::size_type)(ii + 2);
                v614 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v834, ii + 2, (__int128 **)&v850);
                v615 = *(_OWORD *)(v614 + 72);
                v861 = *(_OWORD *)(v614 + 56);
                *(_OWORD *)&v862.__r_.__value_.__l.__data_ = v615;
                v616 = (const void *)*((_QWORD *)v614 + 12);
                v862.__r_.__value_.__r.__words[2] = *((_QWORD *)v614 + 11);
                v863 = 0;
                v864 = 0;
                v865 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v863, v616, *((_QWORD *)v614 + 13), (uint64_t)(*((_QWORD *)v614 + 13) - (_QWORD)v616) >> 2);
                Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)buf, (const Espresso::net *)v611, (const Espresso::layer_shape *)&v861, v594[51]);
                if (v863)
                {
                  v864 = (std::string *)v863;
                  operator delete(v863);
                }
                if (*((_QWORD *)&v611 + 1))
                {
                  v617 = (unint64_t *)(*((_QWORD *)&v611 + 1) + 8);
                  do
                    v618 = __ldaxr(v617);
                  while (__stlxr(v618 - 1, v617));
                  if (!v618)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v611 + 1) + 16))(*((_QWORD *)&v611 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v611 + 1));
                  }
                }
                v619 = (unint64_t)v790[0];
                if (!v790[0])
                  goto LABEL_1017;
                v620 = v790;
                do
                {
                  v621 = v620;
                  v622 = v619 + 32;
                  v623 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v619 + 32), ii + 2);
                  v624 = (unint64_t *)(v619 + 8);
                  if (!v623)
                  {
                    v624 = (unint64_t *)v619;
                    v620 = (char **)v619;
                  }
                  v619 = *v624;
                }
                while (*v624);
                if (v620 == v790)
                  goto LABEL_1016;
                v625 = v623 ? v621 + 4 : (char **)v622;
                v626 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(ii + 2, v625);
                if (v626)
                  goto LABEL_1016;
                v628 = (unint64_t)v620[8];
                if (!v628)
                  break;
                v629 = (unint64_t)v620[7];
                if (!v629)
                  break;
                v619 = v743 / v628 % v629;
LABEL_1017:
                v631 = __sz.__r_.__value_.__r.__words[0] + 472;
                Espresso::ANECompilerEngine::ane_arch_allow_network_override(__sz.__r_.__value_.__r.__words[0] + 472);
                v632 = (void *)objc_claimAutoreleasedReturnValue();
                std::string::basic_string[abi:ne180100]<0>(&v840, "experimental.ane.enable_int16_resample");
                std::string::basic_string[abi:ne180100]<0>(&v837, "0");
                Espresso::map_const_get<std::map<std::string,std::string>>(v631, (uint64_t)&v840, (uint64_t)&v837, &v850);
                if (SHIBYTE(v850.__r_.__value_.__r.__words[2]) < 0)
                {
                  v633 = v850.__r_.__value_.__l.__size_ == 1 && *v850.__r_.__value_.__l.__data_ == 49;
                  operator delete(v850.__r_.__value_.__l.__data_);
                }
                else
                {
                  v633 = SHIBYTE(v850.__r_.__value_.__r.__words[2]) == 1 && v850.__r_.__value_.__s.__data_[0] == 49;
                }
                if (v839 < 0)
                  operator delete(v837);
                if ((char)v842 < 0)
                  operator delete(v840);
                v759 = v594;
                v760 = v595;
                if (v595)
                {
                  do
                    v634 = __ldxr(v600);
                  while (__stxr(v634 + 1, v600));
                }
                input_unit((unsigned int **)&v759, (unsigned int *)buf, v632, v619, v633);
                v635 = (void *)objc_claimAutoreleasedReturnValue();
                v636 = v760;
                if (v760)
                {
                  v637 = (unint64_t *)&v760->__shared_owners_;
                  do
                    v638 = __ldaxr(v637);
                  while (__stlxr(v638 - 1, v637));
                  if (!v638)
                  {
                    ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
                    std::__shared_weak_count::__release_weak(v636);
                  }
                }
                objc_msgSend(v635, "setObject:forKeyedSubscript:", CFSTR("0"), CFSTR("OperationName"));
                v639 = v599;
                if (v599[23] < 0)
                  v639 = *(char **)v599;
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v639);
                v640 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v635, "setObject:forKeyedSubscript:", v640, CFSTR("Name"));

                v641 = (void *)MEMORY[0x1E0CB3940];
                Espresso::ANECompilerEngine::ane_name_translator::ane_name(v756, v827, &v850);
                if ((v850.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v642 = &v850;
                else
                  v642 = (std::string *)v850.__r_.__value_.__r.__words[0];
                objc_msgSend(v641, "stringWithUTF8String:", v642);
                v643 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v635, "setObject:forKeyedSubscript:", v643, CFSTR("InputName"));

                if (SHIBYTE(v850.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v850.__r_.__value_.__l.__data_);
                v644 = ii + 2;
                if (*((char *)ii + 39) < 0)
                  v644 = (_QWORD *)*v590;
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v644);
                v645 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v635, "setObject:forKeyedSubscript:", v645, CFSTR("InputNameUnescaped"));

                unk_1EE229168(v747, "addObject:", v635);
                v599 += 24;
                if (v599 == (char *)v751)
                  goto LABEL_1046;
              }
              Espresso::espresso_os_log_subsystem((Espresso *)v626, v627);
              v630 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v630, OS_LOG_TYPE_ERROR))
              {
                v647 = (std::string::size_type)v620[7];
                v646 = (std::string::size_type)v620[8];
                LODWORD(v850.__r_.__value_.__l.__data_) = 134218240;
                *(std::string::size_type *)((char *)v850.__r_.__value_.__r.__words + 4) = v646;
                WORD2(v850.__r_.__value_.__r.__words[1]) = 2048;
                *(std::string::size_type *)((char *)&v850.__r_.__value_.__r.__words[1] + 6) = v647;
                _os_log_error_impl(&dword_190DAF000, v630, OS_LOG_TYPE_ERROR, "Incorrect 4CC data: %zd %zd", (uint8_t *)&v850, 0x16u);
              }

LABEL_1016:
              v619 = 0;
              goto LABEL_1017;
            }
LABEL_1046:
            if ((v827[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v827);
              if (v595)
              {
LABEL_1050:
                v648 = (unint64_t *)&v595->__shared_owners_;
                do
                  v649 = __ldaxr(v648);
                while (__stlxr(v649 - 1, v648));
                if (!v649)
                {
                  ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                  std::__shared_weak_count::__release_weak(v595);
                }
              }
            }
            else if (v595)
            {
              goto LABEL_1050;
            }
          }
          v650 = (void *)objc_opt_new();
          for (jj = v808; jj; jj = *(unsigned __int8 **)jj)
          {
            v652 = jj + 16;
            *(_QWORD *)buf = jj + 16;
            v653 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__sz.__r_.__value_.__r.__words[0] + 136, jj + 16, (__int128 **)buf);
            v654 = (const void *)*((_QWORD *)v653 + 5);
            if (!v654
            {
              if ((char)jj[39] < 0)
                v652 = (_QWORD *)*v652;
              *(_QWORD *)buf = v652;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid blob type: %s", buf);
            }
            v656 = v655;
            v657 = (std::__shared_weak_count *)*((_QWORD *)v653 + 6);
            if (v657)
            {
              v658 = (unint64_t *)&v657->__shared_owners_;
              do
                v659 = __ldxr(v658);
              while (__stxr(v659 + 1, v658));
            }
            if (v655[50])
            {
              *(_QWORD *)buf = jj + 16;
              v660 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v834, (_QWORD *)jj + 2, (__int128 **)buf);
              v845 = 0;
              v844 = 0;
              (*(void (**)(int *, char *, __int128 ***))(*(_QWORD *)v656 + 16))(v656, v660 + 56, &v844);
              v661 = v845;
              if (v845)
              {
                v662 = (unint64_t *)&v845->__shared_owners_;
                do
                  v663 = __ldaxr(v662);
                while (__stlxr(v663 - 1, v662));
                if (!v663)
                {
                  ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
                  std::__shared_weak_count::__release_weak(v661);
                }
              }
            }
            v664 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            v829 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            if (__sz.__r_.__value_.__l.__size_)
            {
              v665 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
              do
                v666 = __ldxr(v665);
              while (__stxr(v666 + 1, v665));
            }
            *(_QWORD *)v827 = jj + 16;
            v667 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v834, (_QWORD *)jj + 2, (__int128 **)v827);
            v668 = *(_OWORD *)(v667 + 72);
            *(_OWORD *)__str = *(_OWORD *)(v667 + 56);
            *(_OWORD *)&__str[16] = v668;
            v669 = (const void *)*((_QWORD *)v667 + 12);
            v880 = *((unint64_t *)v667 + 11);
            v881 = 0uLL;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)&v880 + 1, v669, *((_QWORD *)v667 + 13), (uint64_t)(*((_QWORD *)v667 + 13) - (_QWORD)v669) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)buf, (const Espresso::net *)v664, (const Espresso::layer_shape *)__str, v656[51]);
            if (*((_QWORD *)&v880 + 1))
            {
              *(_QWORD *)&v881 = *((_QWORD *)&v880 + 1);
              operator delete(*((void **)&v880 + 1));
            }
            if (*((_QWORD *)&v664 + 1))
            {
              v670 = (unint64_t *)(*((_QWORD *)&v664 + 1) + 8);
              do
                v671 = __ldaxr(v670);
              while (__stlxr(v671 - 1, v670));
              if (!v671)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v664 + 1) + 16))(*((_QWORD *)&v664 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v664 + 1));
              }
            }
            Espresso::ANECompilerEngine::ane_arch_allow_network_override(__sz.__r_.__value_.__r.__words[0] + 472);
            v672 = (void *)objc_claimAutoreleasedReturnValue();
            v859 = v656;
            v860 = v657;
            if (v657)
            {
              v673 = (unint64_t *)&v657->__shared_owners_;
              do
                v674 = __ldxr(v673);
              while (__stxr(v674 + 1, v673));
            }
            output_unit((uint64_t *)jj + 2, &v859, (int *)buf, v672);
            v675 = (void *)objc_claimAutoreleasedReturnValue();
            v676 = v860;
            if (v860)
            {
              v677 = (unint64_t *)&v860->__shared_owners_;
              do
                v678 = __ldaxr(v677);
              while (__stlxr(v678 - 1, v677));
              if (!v678)
              {
                ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
                std::__shared_weak_count::__release_weak(v676);
              }
            }
            v679 = (void *)MEMORY[0x1E0CB3940];
            Espresso::ANECompilerEngine::ane_name_translator::ane_name(v756, (char *)jj + 16, &v850);
            v680 = std::string::append(&v850, "@output");
            v681 = *(_OWORD *)&v680->__r_.__value_.__l.__data_;
            *(_QWORD *)&v827[16] = *((_QWORD *)&v680->__r_.__value_.__l + 2);
            *(_OWORD *)v827 = v681;
            v680->__r_.__value_.__l.__size_ = 0;
            v680->__r_.__value_.__r.__words[2] = 0;
            v680->__r_.__value_.__r.__words[0] = 0;
            if (v827[23] >= 0)
              v682 = v827;
            else
              v682 = *(_BYTE **)v827;
            objc_msgSend(v679, "stringWithUTF8String:", v682);
            v683 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v827[23] & 0x80000000) != 0)
              operator delete(*(void **)v827);
            if (SHIBYTE(v850.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v850.__r_.__value_.__l.__data_);
            objc_msgSend(v675, "setObject:forKeyedSubscript:", CFSTR("0"), CFSTR("OperationName"));
            v684 = (void *)MEMORY[0x1E0CB3940];
            Espresso::ANECompilerEngine::ane_name_translator::ane_name(v756, (char *)jj + 16, (std::string *)v827);
            if (v827[23] >= 0)
              v685 = v827;
            else
              v685 = *(_BYTE **)v827;
            objc_msgSend(v684, "stringWithUTF8String:", v685);
            v686 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v675, "setObject:forKeyedSubscript:", v686, CFSTR("Name"));

            if ((v827[23] & 0x80000000) != 0)
              operator delete(*(void **)v827);
            objc_msgSend(v675, "setObject:forKeyedSubscript:", v683, CFSTR("OutputName"));
            if ((char)jj[39] < 0)
              v652 = (_QWORD *)*v652;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v652);
            v687 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v675, "setObject:forKeyedSubscript:", v687, CFSTR("OutputNameUnescaped"));

            objc_msgSend(v675, "removeObjectForKey:", CFSTR("Bottom"));
            objc_msgSend(v650, "addObject:", v675);

            if (v657)
            {
              v688 = (unint64_t *)&v657->__shared_owners_;
              do
                v689 = __ldaxr(v688);
              while (__stlxr(v689 - 1, v688));
              if (!v689)
              {
                ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
                std::__shared_weak_count::__release_weak(v657);
              }
            }
          }
          v690 = (void *)objc_opt_new();
          v691 = (void *)MEMORY[0x1E0CB3940];
          Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration((std::string *)buf, a3, (uint64_t)&v843);
          if (v872[7] >= 0)
            v692 = buf;
          else
            v692 = *(uint8_t **)buf;
          objc_msgSend(v691, "stringWithUTF8String:", v692);
          v693 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v690, "setObject:forKeyedSubscript:", v693, CFSTR("Name"));

          if ((v872[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          objc_msgSend(v690, "setObject:forKeyedSubscript:", v738, CFSTR("OperationList"));
          objc_msgSend(v690, "setObject:forKeyedSubscript:", v747, CFSTR("InputList"));
          objc_msgSend(v690, "setObject:forKeyedSubscript:", v650, CFSTR("OutputList"));
          objc_msgSend(*(id *)(a1 + 176), "addObject:", v690);

          if (SHIBYTE(v843.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v843.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v835 + 8, *(char **)&v836[0]);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v834, (char *)v834[1]);

          v694 = (char *)v735;
          v695 = (char *)v735[1];
          if (v695)
          {
            do
            {
              v696 = (char **)v695;
              v695 = *(char **)v695;
            }
            while (v695);
          }
          else
          {
            do
            {
              v696 = (char **)*((_QWORD *)v694 + 2);
              _ZF = *v696 == v694;
              v694 = (char *)v696;
            }
            while (!_ZF);
          }
          v735 = (uint64_t *)v696;
        }
        while (v696 != v831);
        v565 = v791;
LABEL_1119:
        if (++v743 >= v565)
        {
LABEL_1120:
          std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)&v830, v831[0]);
          if ((v848[23] & 0x80000000) != 0)
            operator delete(*(void **)v848);
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v822);
          v557 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
          if (!__sz.__r_.__value_.__l.__size_)
            goto LABEL_1130;
          goto LABEL_1126;
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v848, "default");
    goto LABEL_914;
  }
  if (!v732)
    goto LABEL_1133;
  v382 = is_network_multihead_multiprocedure;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v374 + 40) - *(_QWORD *)(v374 + 32)) >> 3) - 1 != a3)
    v382 = 0;
  if (!v382)
    goto LABEL_1133;
  Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&v762, v802);
  v383 = *(_QWORD **)(v762 + 8);
  v719 = (_QWORD *)(v762 + 16);
  if (v383 != (_QWORD *)(v762 + 16))
  {
    v758 = (Espresso::ANECompilerEngine *)(v374 + 336);
    while (1)
    {
      v720 = v383 + 9;
      v721 = v383;
      v742 = (_QWORD *)v383[8];
      if (v742 != v383 + 9)
        break;
LABEL_892:
      v555 = (_QWORD *)v383[1];
      if (v555)
      {
        do
        {
          v556 = v555;
          v555 = (_QWORD *)*v555;
        }
        while (v555);
      }
      else
      {
        do
        {
          v556 = (_QWORD *)v383[2];
          _ZF = *v556 == (_QWORD)v383;
          v383 = v556;
        }
        while (!_ZF);
      }
      v383 = v556;
      if (v556 == v719)
        goto LABEL_898;
    }
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v759, "net");
      v845 = 0;
      v844 = 0;
      v384 = *(std::__shared_weak_count **)(v374 + 16);
      if (!v384
        || (v385 = std::__shared_weak_count::lock(v384), (v845 = v385) == 0)
        || (v386 = *(_QWORD *)(v374 + 8), (v844 = (__int128 **)v386) == 0))
      {
        v718 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v718, "Inconsistent state");
        __cxa_throw(v718, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (!*(_QWORD *)(v386 + 792) && !Espresso::use_multiple_procedure_for_segments((uint64_t *)&v844)
        || v742[5] == v742[6])
      {
        goto LABEL_880;
      }
      Espresso::ANECompilerEngine::compiler::get_consumers_of_blob((Espresso::ANECompilerEngine::compiler *)&v843, *(void **)(v374 + 136));
      std::string::basic_string[abi:ne180100]<0>(&v840, "default");
      std::map<std::string,Espresso::net_configuration>::map[abi:ne180100]((uint64_t)&v837, (_QWORD *)(v386 + 776));
      *(_QWORD *)buf = &v840;
      v387 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v837, &v840, (__int128 **)buf);
      if (v387 + 7 != (uint64_t *)(v386 + 800))
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v387 + 7), *(std::string **)(v386 + 800), *(std::string **)(v386 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v386 + 808) - *(_QWORD *)(v386 + 800)) >> 3));
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v387 + 10, *(__int128 **)(v386 + 824), (__int128 *)(v386 + 832));
      }
      v388 = (char *)v837;
      if (v837 != &v838)
      {
        do
        {
          v724 = v388;
          v389 = (const void **)(v388 + 32);
          v390 = (void *)MEMORY[0x1E0CB3940];
          Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration((std::string *)buf, (int *)v742[5], (int *)v742[6], (uint64_t)(v388 + 32));
          if (v872[7] >= 0)
            v391 = buf;
          else
            v391 = *(uint8_t **)buf;
          objc_msgSend(v390, "stringWithUTF8String:", v391);
          v745 = (void *)objc_claimAutoreleasedReturnValue();
          if ((v872[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          *(_OWORD *)v834 = 0u;
          v835 = 0u;
          memset(v836, 0, sizeof(v836));
          v392 = *(id *)(v374 + 176);
          v393 = objc_msgSend(v392, "countByEnumeratingWithState:objects:count:", v834, &v861, 16);
          if (v393)
          {
            v394 = 0;
            v395 = *(_QWORD *)v835;
            do
            {
              for (kk = 0; kk != v393; ++kk)
              {
                if (*(_QWORD *)v835 != v395)
                  objc_enumerationMutation(v392);
                objc_msgSend(*((id *)v834[1] + kk), "objectForKeyedSubscript:", CFSTR("Name"));
                v397 = (void *)objc_claimAutoreleasedReturnValue();
                v398 = objc_msgSend(v397, "isEqualToString:", v745);

                v394 |= v398;
              }
              v393 = objc_msgSend(v392, "countByEnumeratingWithState:objects:count:", v834, &v861, 16);
            }
            while (v393);

            if ((v394 & 1) != 0)
              goto LABEL_871;
          }
          else
          {

          }
          v399 = (uint64_t)v844;
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v830, v844 + 23);
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v832, (__int128 **)(v399 + 208));
          v400 = a1;
          v401 = v724[55];
          if ((v401 & 0x80u) == 0)
            v402 = (std::__shared_weak_count *)v724[55];
          else
            v402 = (std::__shared_weak_count *)*((_QWORD *)v724 + 5);
          v403 = (std::__shared_weak_count *)v842;
          if ((v842 & 0x80u) != 0)
            v403 = v841;
          if (v402 == v403)
          {
            if ((v842 & 0x80u) == 0)
              v404 = (unsigned __int8 *)&v840;
            else
              v404 = (unsigned __int8 *)v840;
            if ((v401 & 0x80) != 0)
            {
              if (!memcmp(*v389, v404, *((_QWORD *)v724 + 5)))
                goto LABEL_659;
            }
            else
            {
              if (!v724[55])
                goto LABEL_659;
              while (*(unsigned __int8 *)v389 == *v404)
              {
                v389 = (const void **)((char *)v389 + 1);
                ++v404;
                if (!--v401)
                  goto LABEL_659;
              }
            }
          }
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__str, (__int128 **)(v399 + 824));
          v405 = (char *)*((_QWORD *)v724 + 10);
          if (v405 != v724 + 88)
          {
            do
            {
              *(_QWORD *)buf = v405 + 32;
              v406 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__str, (_QWORD *)v405 + 4, (__int128 **)buf);
              v407 = *(_OWORD *)(v405 + 56);
              v408 = *(_OWORD *)(v405 + 72);
              *((_QWORD *)v406 + 11) = *((_QWORD *)v405 + 11);
              *(_OWORD *)(v406 + 72) = v408;
              *(_OWORD *)(v406 + 56) = v407;
              if (v405 != v406)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v406 + 96, *((char **)v405 + 12), *((_QWORD *)v405 + 13), (uint64_t)(*((_QWORD *)v405 + 13) - *((_QWORD *)v405 + 12)) >> 2);
              v409 = (char *)*((_QWORD *)v405 + 1);
              if (v409)
              {
                do
                {
                  v410 = v409;
                  v409 = *(char **)v409;
                }
                while (v409);
              }
              else
              {
                do
                {
                  v410 = (char *)*((_QWORD *)v405 + 2);
                  _ZF = *(_QWORD *)v410 == (_QWORD)v405;
                  v405 = v410;
                }
                while (!_ZF);
              }
              v405 = v410;
            }
            while (v410 != v724 + 88);
          }
          v411 = v845;
          *(_QWORD *)&v829 = v399;
          *((_QWORD *)&v829 + 1) = v845;
          if (v845)
          {
            v412 = (unint64_t *)&v845->__shared_owners_;
            do
              v413 = __ldxr(v412);
            while (__stxr(v413 + 1, v412));
          }
          Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v829, (uint64_t)__str, (uint64_t)buf);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v830, v831[0]);
          v830 = *(char ***)buf;
          v831[0] = *(char **)&buf[8];
          v831[1] = *(char **)v872;
          if (*(_QWORD *)v872)
          {
            *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = v831;
            *(_QWORD *)buf = &buf[8];
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)v872 = 0;
          }
          else
          {
            v830 = v831;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v832, (char *)v833);
          v414 = *(char **)&v872[16];
          v832 = *(__int128 **)&v872[8];
          v833 = *(_OWORD *)&v872[16];
          if (*(_QWORD *)&v872[24])
          {
            *(_QWORD *)(*(_QWORD *)&v872[16] + 16) = &v833;
            v414 = 0;
            *(_QWORD *)&v872[8] = &v872[16];
            *(_OWORD *)&v872[16] = 0uLL;
          }
          else
          {
            v832 = &v833;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v872[8], v414);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
          if (v411)
          {
            v415 = (unint64_t *)&v411->__shared_owners_;
            do
              v416 = __ldaxr(v415);
            while (__stlxr(v416 - 1, v415));
            if (!v416)
            {
              ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
              std::__shared_weak_count::__release_weak(v411);
            }
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__str, *(char **)&__str[8]);
LABEL_659:
          memset(v827, 0, sizeof(v827));
          v828 = 1.0;
          memset(__str, 0, sizeof(__str));
          v880 = 0u;
          v881 = 0u;
          v417 = *(id *)(a1 + 208);
          v418 = objc_msgSend(v417, "countByEnumeratingWithState:objects:count:", __str, buf, 16);
          if (v418)
          {
            v419 = 0;
            v400 = **(_QWORD **)&__str[16];
            do
            {
              for (mm = 0; mm != v418; ++mm)
              {
                if (**(_QWORD **)&__str[16] != v400)
                  objc_enumerationMutation(v417);
                Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(*(void **)(*(_QWORD *)&__str[8] + 8 * mm), v419 + mm, (uint64_t)v827);
              }
              v418 = objc_msgSend(v417, "countByEnumeratingWithState:objects:count:", __str, buf, 16);
              v419 += mm;
            }
            while (v418);
          }

          *(_OWORD *)v872 = 0u;
          *(_OWORD *)buf = 0u;
          *(_DWORD *)&v872[16] = 1065353216;
          __vala = (void *)objc_opt_new();
          v421 = a1;
          v422 = v742[5];
          if (v742[6] != v422)
          {
            v423 = 0;
            do
            {
              v754 = v423;
              v400 = *(int *)(v422 + 4 * v423);
              v424 = *(_QWORD *)(v421 + 32);
              memset(__str, 0, sizeof(__str));
              LODWORD(v880) = 1065353216;
              v425 = *(char **)(v424 + 120 * (int)v400 + 72);
              if (!v425)
                goto LABEL_705;
              do
              {
                Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, v425 + 16, &v850);
                v426 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v850);
                v427 = *(_QWORD *)&v827[8];
                if (!*(_QWORD *)&v827[8])
                  goto LABEL_685;
                v428 = v426;
                v429 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v827[8]);
                v429.i16[0] = vaddlv_u8(v429);
                v430 = v429.u32[0];
                if (v429.u32[0] > 1uLL)
                {
                  v431 = v426;
                  if (v426 >= *(_QWORD *)&v827[8])
                    v431 = v426 % *(_QWORD *)&v827[8];
                }
                else
                {
                  v431 = (*(_QWORD *)&v827[8] - 1) & v426;
                }
                v432 = *(unsigned __int8 ***)(*(_QWORD *)v827 + 8 * v431);
                if (!v432)
                  goto LABEL_685;
                v433 = *v432;
                if (!*v432)
                  goto LABEL_685;
                while (1)
                {
                  v434 = *((_QWORD *)v433 + 1);
                  if (v434 == v428)
                    break;
                  if (v430 > 1)
                  {
                    if (v434 >= v427)
                      v434 %= v427;
                  }
                  else
                  {
                    v434 &= v427 - 1;
                  }
                  if (v434 != v431)
                    goto LABEL_685;
LABEL_684:
                  v433 = *(unsigned __int8 **)v433;
                  if (!v433)
                    goto LABEL_685;
                }
                if (!std::equal_to<std::string>::operator()[abi:ne180100](v433 + 16, (unsigned __int8 *)&v850))
                  goto LABEL_684;
                v436 = (unsigned int *)*((_QWORD *)v433 + 5);
                v435 = (unsigned int *)*((_QWORD *)v433 + 6);
                while (v436 != v435)
                {
                  if (*v436 != (_DWORD)v400)
                  {
                    v438 = (_DWORD *)v742[5];
                    v437 = (_DWORD *)v742[6];
                    if (v438 != v437)
                    {
                      while (*v438 != *v436)
                      {
                        if (++v438 == v437)
                        {
                          v438 = (_DWORD *)v742[6];
                          break;
                        }
                      }
                    }
                    if (v438 != v437)
                    {
                      v439 = (void *)MEMORY[0x1E0CB3940];
                      Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, v425 + 16, &__sz);
                      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_sz = &__sz;
                      else
                        p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
                      objc_msgSend(v439, "stringWithUTF8String:", p_sz);
                      v441 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
                      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__sz.__r_.__value_.__l.__data_);
                      v442 = (void *)objc_opt_new();
                      v858[0] = CFSTR("OperationName");
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("S%d"), v400);
                      v443 = (int *)objc_claimAutoreleasedReturnValue();
                      v858[1] = CFSTR("Name");
                      v859 = v443;
                      v860 = v441;
                      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v859, v858, 2);
                      v444 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v442, "setObject:forKeyedSubscript:", v444, CFSTR("BindingBottom"));

                      v853 = CFSTR("OperationName");
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("S%d"), *v436);
                      v445 = (void *)objc_claimAutoreleasedReturnValue();
                      lpsrc[0] = v445;
                      v854 = CFSTR("Name");
                      v446 = v436 + 2;
                      if (*((char *)v436 + 31) < 0)
                        v446 = (_QWORD *)*v446;
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v446);
                      v447 = (void *)objc_claimAutoreleasedReturnValue();
                      v855 = CFSTR("Bottom");
                      lpsrc[1] = v447;
                      v857 = v441;
                      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", lpsrc, &v853, 3);
                      v448 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v442, "setObject:forKeyedSubscript:", v448, CFSTR("BindingTop"));

                      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)buf, (uint64_t)(v425 + 16), (uint64_t)(v425 + 16));
                      objc_msgSend(__vala, "addObject:", v442);

                    }
                  }
                  v436 += 8;
                }
LABEL_685:
                if (SHIBYTE(v850.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v850.__r_.__value_.__l.__data_);
                v425 = *(char **)v425;
                v421 = a1;
              }
              while (v425);
LABEL_705:
              std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__str);
              v423 = v754 + 1;
              v422 = v742[5];
            }
            while (v754 + 1 < (unint64_t)((v742[6] - v422) >> 2));
          }
          v723 = (void *)objc_opt_new();
          v750 = (Espresso::ANECompilerEngine *)objc_opt_new();
          v729 = (void *)objc_opt_new();
          v726 = (void *)objc_opt_new();
          memset(__str, 0, sizeof(__str));
          LODWORD(v880) = 1065353216;
          v449 = v742[5];
          if (v742[6] != v449)
          {
            v450 = 0;
            while (1)
            {
              v731 = v450;
              v451 = *(unsigned int *)(v449 + 4 * v450);
              v734 = *(_QWORD *)(v421 + 32);
              v452 = v761 >= 0 ? &v759 : (void **)v759;
              if ((_DWORD)v451)
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s_%d"), v452, v451);
              else
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v452);
              v737 = (id)objc_claimAutoreleasedReturnValue();

              v851[0] = CFSTR("OperationName");
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("S%d"), v451);
              v453 = (void *)objc_claimAutoreleasedReturnValue();
              v851[1] = CFSTR("NetworkName");
              v852[0] = v453;
              v852[1] = v737;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v852, v851, 2);
              v454 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v726, "addObject:", v454);

              v455 = *(uint64_t **)(v734 + 120 * (int)v451 + 32);
              if (v455)
                break;
LABEL_820:
              for (nn = *(unsigned __int8 **)(v734 + 120 * (int)v451 + 72); nn; nn = *(unsigned __int8 **)nn)
              {
                v850.__r_.__value_.__r.__words[0] = (std::string::size_type)(nn + 16);
                *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__str, nn + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v850)+ 10) = v451;
              }

              v450 = v731 + 1;
              v421 = a1;
              v449 = v742[5];
              if (v731 + 1 >= (unint64_t)((v742[6] - v449) >> 2))
                goto LABEL_823;
            }
            while (2)
            {
              if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(buf, (uint64_t)(v455 + 2)))
              {
LABEL_716:
                v455 = (uint64_t *)*v455;
                if (!v455)
                  goto LABEL_820;
                continue;
              }
              break;
            }
            v850.__r_.__value_.__r.__words[0] = (std::string::size_type)(v455 + 2);
            v456 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v844 + 17), (unsigned __int8 *)v455 + 16, (__int128 **)&v850);
            v457 = (const void *)*((_QWORD *)v456 + 5);
            if (!v457
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
            }
            v459 = v458;
            v755 = (std::__shared_weak_count *)*((_QWORD *)v456 + 6);
            if (v755)
            {
              v460 = (unint64_t *)&v755->__shared_owners_;
              do
                v461 = __ldxr(v460);
              while (__stxr(v461 + 1, v460));
            }
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, (char *)v455 + 16, &__sz);
            v462 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__sz);
            v463 = v462;
            v464 = *(_QWORD *)&v827[8];
            if (*(_QWORD *)&v827[8])
            {
              v465 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v827[8]);
              v465.i16[0] = vaddlv_u8(v465);
              v466 = v465.u32[0];
              if (v465.u32[0] > 1uLL)
              {
                v400 = v462;
                if (v462 >= *(_QWORD *)&v827[8])
                  v400 = v462 % *(_QWORD *)&v827[8];
              }
              else
              {
                v400 = (*(_QWORD *)&v827[8] - 1) & v462;
              }
              v467 = *(void ***)(*(_QWORD *)v827 + 8 * v400);
              if (v467)
              {
                v468 = (char *)*v467;
                if (*v467)
                {
                  do
                  {
                    v469 = *((_QWORD *)v468 + 1);
                    if (v469 == v463)
                    {
                      if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v468 + 16, (unsigned __int8 *)&__sz))
                      {
                        goto LABEL_764;
                      }
                    }
                    else
                    {
                      if (v466 > 1)
                      {
                        if (v469 >= v464)
                          v469 %= v464;
                      }
                      else
                      {
                        v469 &= v464 - 1;
                      }
                      if (v469 != v400)
                        break;
                    }
                    v468 = *(char **)v468;
                  }
                  while (v468);
                }
              }
            }
            v468 = (char *)operator new(0x40uLL);
            v850.__r_.__value_.__r.__words[0] = (std::string::size_type)v468;
            v850.__r_.__value_.__l.__size_ = (std::string::size_type)&v827[16];
            v850.__r_.__value_.__s.__data_[16] = 0;
            *(_QWORD *)v468 = 0;
            *((_QWORD *)v468 + 1) = v463;
            v470 = (std::string *)(v468 + 16);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v470, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v470->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
              *((_QWORD *)v468 + 4) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
            }
            *((_QWORD *)v468 + 5) = 0;
            *((_QWORD *)v468 + 6) = 0;
            *((_QWORD *)v468 + 7) = 0;
            v850.__r_.__value_.__s.__data_[16] = 1;
            v471 = (float)(unint64_t)(*(_QWORD *)&v827[24] + 1);
            if (!v464 || (float)(v828 * (float)v464) < v471)
            {
              v472 = (v464 & (v464 - 1)) != 0;
              if (v464 < 3)
                v472 = 1;
              v473 = v472 | (2 * v464);
              v474 = vcvtps_u32_f32(v471 / v828);
              if (v473 <= v474)
                v475 = v474;
              else
                v475 = v473;
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)v827, v475);
              v464 = *(_QWORD *)&v827[8];
              if ((*(_QWORD *)&v827[8] & (*(_QWORD *)&v827[8] - 1)) != 0)
              {
                if (v463 >= *(_QWORD *)&v827[8])
                  v400 = v463 % *(_QWORD *)&v827[8];
                else
                  v400 = v463;
              }
              else
              {
                v400 = (*(_QWORD *)&v827[8] - 1) & v463;
              }
            }
            v476 = *(_QWORD *)v827;
            v477 = *(_QWORD **)(*(_QWORD *)v827 + 8 * v400);
            if (v477)
            {
              *(_QWORD *)v468 = *v477;
              goto LABEL_762;
            }
            *(_QWORD *)v468 = *(_QWORD *)&v827[16];
            *(_QWORD *)&v827[16] = v468;
            *(_QWORD *)(v476 + 8 * v400) = &v827[16];
            if (*(_QWORD *)v468)
            {
              v478 = *(_QWORD *)(*(_QWORD *)v468 + 8);
              if ((v464 & (v464 - 1)) != 0)
              {
                if (v478 >= v464)
                  v478 %= v464;
              }
              else
              {
                v478 &= v464 - 1;
              }
              v477 = (_QWORD *)(*(_QWORD *)v827 + 8 * v478);
LABEL_762:
              *v477 = v468;
            }
            v850.__r_.__value_.__r.__words[0] = 0;
            ++*(_QWORD *)&v827[24];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v850);
LABEL_764:
            v479 = *((_QWORD *)v468 + 5);
            v480 = *((_QWORD *)v468 + 6);
            if (v479 != v480)
            {
              v481 = (unint64_t *)&v755->__shared_owners_;
              do
              {
                if (*(_DWORD *)v479 == (_DWORD)v451)
                {
                  v482 = (const Espresso::net *)v844;
                  v483 = v845;
                  if (v845)
                  {
                    v484 = (unint64_t *)&v845->__shared_owners_;
                    do
                      v485 = __ldxr(v484);
                    while (__stxr(v485 + 1, v484));
                  }
                  v821.__r_.__value_.__r.__words[0] = (std::string::size_type)(v455 + 2);
                  v486 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v830, v455 + 2, (__int128 **)&v821);
                  v487 = *(_OWORD *)(v486 + 72);
                  *(_OWORD *)v822 = *(_OWORD *)(v486 + 56);
                  v823 = v487;
                  v488 = (const void *)*((_QWORD *)v486 + 12);
                  v824 = *((_QWORD *)v486 + 11);
                  memset(v825, 0, sizeof(v825));
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v825, v488, *((_QWORD *)v486 + 13), (uint64_t)(*((_QWORD *)v486 + 13) - (_QWORD)v488) >> 2);
                  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v850, v482, (const Espresso::layer_shape *)v822, v459[51]);
                  if (v825[0])
                  {
                    v825[1] = v825[0];
                    operator delete(v825[0]);
                  }
                  if (v483)
                  {
                    v489 = (unint64_t *)&v483->__shared_owners_;
                    do
                      v490 = __ldaxr(v489);
                    while (__stlxr(v490 - 1, v489));
                    if (!v490)
                    {
                      ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                      std::__shared_weak_count::__release_weak(v483);
                    }
                  }
                  v491 = (uint64_t)(v844 + 59);
                  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v844 + 59));
                  v492 = (void *)objc_claimAutoreleasedReturnValue();
                  std::string::basic_string[abi:ne180100]<0>(&v820, "experimental.ane.enable_int16_resample");
                  std::string::basic_string[abi:ne180100]<0>(v818, "0");
                  Espresso::map_const_get<std::map<std::string,std::string>>(v491, (uint64_t)&v820, (uint64_t)v818, &v821);
                  if (SHIBYTE(v821.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v493 = v821.__r_.__value_.__l.__size_ == 1 && *v821.__r_.__value_.__l.__data_ == 49;
                    operator delete(v821.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    v493 = SHIBYTE(v821.__r_.__value_.__r.__words[2]) == 1 && v821.__r_.__value_.__s.__data_[0] == 49;
                  }
                  if (v819 < 0)
                    operator delete(v818[0]);
                  if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v820.__r_.__value_.__l.__data_);
                  v816 = v459;
                  v817 = v755;
                  if (v755)
                  {
                    do
                      v494 = __ldxr(v481);
                    while (__stxr(v494 + 1, v481));
                  }
                  input_unit(&v816, (unsigned int *)&v850, v492, 0, v493);
                  v495 = (void *)objc_claimAutoreleasedReturnValue();
                  v496 = v817;
                  if (v817)
                  {
                    v497 = (unint64_t *)&v817->__shared_owners_;
                    do
                      v498 = __ldaxr(v497);
                    while (__stlxr(v498 - 1, v497));
                    if (!v498)
                    {
                      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                      std::__shared_weak_count::__release_weak(v496);
                    }
                  }
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("S%d"), v451);
                  v499 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v495, "setObject:forKeyedSubscript:", v499, CFSTR("OperationName"));

                  if (*((char *)v455 + 39) < 0)
                    std::string::__init_copy_ctor_external(&v821, (const std::string::value_type *)v455[2], v455[3]);
                  else
                    v821 = *(std::string *)(v455 + 2);
                  Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, (char *)&v821, &v820);
                  v500 = (_QWORD *)(v479 + 8);
                  if (*(char *)(v479 + 31) < 0)
                    v500 = (_QWORD *)*v500;
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v500);
                  v501 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v495, "setObject:forKeyedSubscript:", v501, CFSTR("Name"));

                  if ((v820.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v502 = &v820;
                  else
                    v502 = (std::string *)v820.__r_.__value_.__r.__words[0];
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v502);
                  v503 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v495, "setObject:forKeyedSubscript:", v503, CFSTR("InputName"));

                  if ((v821.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v504 = &v821;
                  else
                    v504 = (std::string *)v821.__r_.__value_.__r.__words[0];
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v504);
                  v400 = objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v495, "setObject:forKeyedSubscript:", v400, CFSTR("InputNameUnescaped"));

                  -[Espresso::ANECompilerEngine addObject:](v750, "addObject:", v495);
                  if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v820.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v821.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v821.__r_.__value_.__l.__data_);

                }
                v479 += 32;
              }
              while (v479 != v480);
            }
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
            if (v755)
            {
              v505 = (unint64_t *)&v755->__shared_owners_;
              do
                v506 = __ldaxr(v505);
              while (__stlxr(v506 - 1, v505));
              if (!v506)
              {
                ((void (*)(std::__shared_weak_count *))v755->__on_zero_shared)(v755);
                std::__shared_weak_count::__release_weak(v755);
              }
            }
            goto LABEL_716;
          }
LABEL_823:
          v509 = v742[11];
          v508 = v742[12];
          while (v509 != v508)
          {
            v510 = (Espresso::net *)v844;
            v850.__r_.__value_.__r.__words[0] = v509;
            v511 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v844 + 17), (unsigned __int8 *)v509, (__int128 **)&v850);
            v512 = (const void *)*((_QWORD *)v511 + 5);
            if (!v512
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob type");
            }
            v514 = v513;
            v515 = (std::__shared_weak_count *)*((_QWORD *)v511 + 6);
            if (v515)
            {
              v516 = (unint64_t *)&v515->__shared_owners_;
              do
                v517 = __ldxr(v516);
              while (__stxr(v517 + 1, v516));
            }
            v814 = v510;
            v815 = v845;
            if (v845)
            {
              v518 = (unint64_t *)&v845->__shared_owners_;
              do
                v519 = __ldxr(v518);
              while (__stxr(v519 + 1, v518));
            }
            __sz.__r_.__value_.__r.__words[0] = v509;
            v520 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v830, (_QWORD *)v509, (__int128 **)&__sz);
            v521 = *(_OWORD *)(v520 + 72);
            *(_OWORD *)v848 = *(_OWORD *)(v520 + 56);
            *(_OWORD *)&v848[16] = v521;
            v522 = (const void *)*((_QWORD *)v520 + 12);
            *(_QWORD *)&v848[32] = *((_QWORD *)v520 + 11);
            memset(v849, 0, sizeof(v849));
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v849, v522, *((_QWORD *)v520 + 13), (uint64_t)(*((_QWORD *)v520 + 13) - (_QWORD)v522) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v850, v814, (const Espresso::layer_shape *)v848, v514[51]);
            if (v849[0])
            {
              v849[1] = v849[0];
              operator delete(v849[0]);
            }
            v523 = v815;
            if (v815)
            {
              v524 = (unint64_t *)&v815->__shared_owners_;
              do
                v525 = __ldaxr(v524);
              while (__stlxr(v525 - 1, v524));
              if (!v525)
              {
                ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
                std::__shared_weak_count::__release_weak(v523);
              }
            }
            Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v844 + 59));
            v526 = (void *)objc_claimAutoreleasedReturnValue();
            v812 = v514;
            v813 = v515;
            if (v515)
            {
              v527 = (unint64_t *)&v515->__shared_owners_;
              do
                v528 = __ldxr(v527);
              while (__stxr(v528 + 1, v527));
            }
            output_unit((uint64_t *)v509, &v812, (int *)&v850, v526);
            v529 = (void *)objc_claimAutoreleasedReturnValue();
            v530 = v813;
            if (v813)
            {
              v531 = (unint64_t *)&v813->__shared_owners_;
              do
                v532 = __ldaxr(v531);
              while (__stlxr(v532 - 1, v531));
              if (!v532)
              {
                ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
                std::__shared_weak_count::__release_weak(v530);
              }
            }
            v533 = (void *)MEMORY[0x1E0CB3940];
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, (char *)v509, &v821);
            v534 = std::string::append(&v821, "@output");
            v535 = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
            __sz.__r_.__value_.__r.__words[2] = v534->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v535;
            v534->__r_.__value_.__l.__size_ = 0;
            v534->__r_.__value_.__r.__words[2] = 0;
            v534->__r_.__value_.__r.__words[0] = 0;
            if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v536 = &__sz;
            else
              v536 = (std::string *)__sz.__r_.__value_.__r.__words[0];
            objc_msgSend(v533, "stringWithUTF8String:", v536);
            v537 = (void *)objc_claimAutoreleasedReturnValue();
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
            if (SHIBYTE(v821.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v821.__r_.__value_.__l.__data_);
            __sz.__r_.__value_.__r.__words[0] = v509;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("S%d"), *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__str, (unsigned __int8 *)v509, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz)+ 10));
            v538 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v529, "setObject:forKeyedSubscript:", v538, CFSTR("OperationName"));

            v539 = (void *)MEMORY[0x1E0CB3940];
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)v758, (char *)v509, &__sz);
            if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v540 = &__sz;
            else
              v540 = (std::string *)__sz.__r_.__value_.__r.__words[0];
            objc_msgSend(v539, "stringWithUTF8String:", v540);
            v541 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v529, "setObject:forKeyedSubscript:", v541, CFSTR("Name"));

            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
            objc_msgSend(v529, "setObject:forKeyedSubscript:", v537, CFSTR("OutputName"));
            v542 = v509;
            if (*(char *)(v509 + 23) < 0)
              v542 = *(_QWORD *)v509;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v542);
            v543 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v529, "setObject:forKeyedSubscript:", v543, CFSTR("OutputNameUnescaped"));

            objc_msgSend(v529, "removeObjectForKey:", CFSTR("Bottom"));
            objc_msgSend(v729, "addObject:", v529);

            if (v515)
            {
              v544 = (unint64_t *)&v515->__shared_owners_;
              do
                v545 = __ldaxr(v544);
              while (__stlxr(v545 - 1, v544));
              if (!v545)
              {
                ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                std::__shared_weak_count::__release_weak(v515);
              }
            }
            v509 += 24;
          }
          objc_msgSend(v723, "setObject:forKeyedSubscript:", v745, CFSTR("Name"));
          objc_msgSend(v723, "setObject:forKeyedSubscript:", v726, CFSTR("OperationList"));
          objc_msgSend(v723, "setObject:forKeyedSubscript:", v750, CFSTR("InputList"));
          objc_msgSend(v723, "setObject:forKeyedSubscript:", v729, CFSTR("OutputList"));
          objc_msgSend(v723, "setObject:forKeyedSubscript:", __vala, CFSTR("BindingList"));
          objc_msgSend(*(id *)(a1 + 176), "addObject:", v723);
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&__str[16]);
          v546 = *(void **)__str;
          *(_QWORD *)__str = 0;
          if (v546)
            operator delete(v546);

          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
          std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)v827);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v832, (char *)v833);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v830, v831[0]);
LABEL_871:

          v547 = (char **)v724;
          v548 = (char *)*((_QWORD *)v724 + 1);
          if (v548)
          {
            do
            {
              v549 = (char **)v548;
              v548 = *(char **)v548;
            }
            while (v548);
          }
          else
          {
            do
            {
              v549 = (char **)v547[2];
              _ZF = *v549 == (char *)v547;
              v547 = v549;
            }
            while (!_ZF);
          }
          v388 = (char *)v549;
          v374 = a1;
        }
        while (v549 != (char **)&v838);
      }
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)&v837, (char *)v838);
      if ((char)v842 < 0)
        operator delete(v840);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v843);
      v385 = v845;
      if (v845)
      {
LABEL_880:
        v550 = (unint64_t *)&v385->__shared_owners_;
        do
          v551 = __ldaxr(v550);
        while (__stlxr(v551 - 1, v550));
        if (!v551)
        {
          ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
          std::__shared_weak_count::__release_weak(v385);
        }
      }
      if (v761 < 0)
        operator delete(v759);
      v552 = v742;
      v553 = (_QWORD *)v742[1];
      v383 = v721;
      if (v553)
      {
        do
        {
          v554 = v553;
          v553 = (_QWORD *)*v553;
        }
        while (v553);
      }
      else
      {
        do
        {
          v554 = (_QWORD *)v552[2];
          _ZF = *v554 == (_QWORD)v552;
          v552 = v554;
        }
        while (!_ZF);
      }
      v742 = v554;
      if (v554 == v720)
        goto LABEL_892;
    }
  }
LABEL_898:
  v557 = v763;
  if (v763)
  {
    v558 = (unint64_t *)&v763->__shared_owners_;
    do
      v559 = __ldaxr(v558);
    while (__stlxr(v559 - 1, v558));
    goto LABEL_1128;
  }
LABEL_1130:
  objc_msgSend(*v725, "objectForKey:", CFSTR("ProcedureList"));
  v703 = (void *)objc_claimAutoreleasedReturnValue();
  v704 = v703 == 0;

  if (v704)
  {
    v705 = (void *)objc_opt_new();
    objc_msgSend(*v725, "setObject:forKeyedSubscript:", v705, CFSTR("ProcedureList"));

  }
  objc_msgSend(*v725, "objectForKeyedSubscript:", CFSTR("ProcedureList"));
  v706 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v706, "addObjectsFromArray:", *(_QWORD *)(a1 + 176));

  v374 = a1;
LABEL_1133:
  objc_msgSend(*v725, "objectForKeyedSubscript:", CFSTR("Networks"));
  v707 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v707, "addObjectsFromArray:", *(_QWORD *)(v374 + 200));

  if (SHIBYTE(v764.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v764.__r_.__value_.__l.__data_);
LABEL_1135:

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v790[0]);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v792);
  v708 = v803;
  if (v803)
  {
    v709 = (unint64_t *)&v803->__shared_owners_;
    do
      v710 = __ldaxr(v709);
    while (__stlxr(v710 - 1, v709));
    if (!v710)
    {
      ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
      std::__shared_weak_count::__release_weak(v708);
    }
  }
  if (v809)
  {
    v810 = v809;
    operator delete(v809);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v807);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v805);
}

void sub_1914CF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;

  if (a59 < 0)
    operator delete(__p);

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)STACK[0x2A0]);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&STACK[0x2B8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::dump_in_memory_ir_for_debugging(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  void *v10;
  id v11;
  Espresso *v12;
  Espresso *v13;
  const char *v14;
  NSObject *v15;
  void **v16;
  Espresso *v17;
  const char *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  void *v26;
  void *v27;
  char v28;
  Espresso *v29;
  const char *v30;
  NSObject *v31;
  void *v32;
  Espresso *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id obj;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t i;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  id v53;
  id v54;
  id v55;
  char v56;
  void *__p[2];
  char v58;
  _BYTE v59[128];
  uint8_t v60[128];
  uint8_t buf[4];
  _BYTE v62[14];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v38 = a4;
  v42 = a5;
  v36 = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("segment_%d"), a2);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "stringByAppendingPathComponent:");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v56 = 0;
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v39, "fileExistsAtPath:isDirectory:", v10, &v56) & 1) != 0)
  {
    v54 = 0;
    objc_msgSend(v39, "removeItemAtPath:error:", v10, &v54);
    v11 = v54;
    v53 = v11;
    objc_msgSend(v39, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v53);
    v12 = (Espresso *)v53;

    v33 = v12;
  }
  else
  {
    v55 = 0;
    objc_msgSend(v39, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v55);
    v13 = (Espresso *)v55;
    v33 = v13;
  }
  Espresso::espresso_os_log_subsystem(v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v62 = a2;
    *(_WORD *)&v62[4] = 2112;
    *(_QWORD *)&v62[6] = v10;
    _os_log_debug_impl(&dword_190DAF000, v15, OS_LOG_TYPE_DEBUG, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] save ANEC IR plist, weights, and compiler options of segment %d to %@", buf, 0x12u);
  }

  v16 = __p;
  if (v58 < 0)
    v16 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.plist"), v16);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByAppendingPathComponent:");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (Espresso *)objc_msgSend(v38, "writeToFile:atomically:");
  if ((v17 & 1) == 0)
  {
    Espresso::espresso_os_log_subsystem(v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v62 = v35;
      _os_log_error_impl(&dword_190DAF000, v19, OS_LOG_TYPE_ERROR, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] failed to save ANEC IR plist to %@", buf, 0xCu);
    }

  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  objc_msgSend(v42, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
  if (v43)
  {
    v41 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v50 != v41)
          objc_enumerationMutation(obj);
        objc_msgSend(v42, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * i));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        objc_msgSend(v20, "allKeys");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v45, v59, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v46;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v46 != v23)
                objc_enumerationMutation(v21);
              v25 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * j);
              objc_msgSend(v10, "stringByAppendingPathComponent:", v25);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "objectForKeyedSubscript:", v25);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = objc_msgSend(v27, "writeToFile:atomically:", v26, 1);

              if ((v28 & 1) == 0)
              {
                Espresso::espresso_os_log_subsystem(v29, v30);
                v31 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)v62 = v26;
                  _os_log_error_impl(&dword_190DAF000, v31, OS_LOG_TYPE_ERROR, "[Espresso::ANECompilerEngine::dump_in_memory_ir_for_debugging] failed to save weights to %@", buf, 0xCu);
                }

              }
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v45, v59, 16);
          }
          while (v22);
        }

      }
      v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
    }
    while (v43);
  }

  if (v58 < 0)
    operator delete(__p[0]);

}

void sub_1914D0DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  if (a51 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::create_ir_for_segment(uint64_t a1, void *a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void **v15;
  NSObject *v16;
  _BOOL4 v17;
  void (***v18)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  void *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *p_str;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  _QWORD *v51;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[5];
  std::__shared_weak_count *v64;
  _QWORD v65[6];
  std::__shared_weak_count *v66;
  std::string __str;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE v70[128];
  uint8_t v71[128];
  uint8_t buf[16];
  uint64_t v73;
  uint64_t v74;

  v51 = a6;
  v74 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if (!*(_BYTE *)(a1 + 552))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Call this function only when executing in-memory model flow");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v68 = 0;
  v69 = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v69 = v11) == 0)
    || (v13 = *(_QWORD *)(a1 + 8), (v68 = v13) == 0))
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Inconsistent state");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = v11;
  v15 = (void **)(v13 + 728);
  if (*(char *)(v13 + 751) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v13 + 728), *(_QWORD *)(v13 + 736));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 744);
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v11, v12);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v17)
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "Creating ANEC IR plist and weights files in memory for the ANE segment(s) identified by key \"%@\"", buf, 0xCu);
    }

    std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
    if (*(char *)(v13 + 751) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = *(_OWORD *)buf;
    *(_QWORD *)(v13 + 744) = v73;
  }
  else
  {
    if (v17)
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_str;
      _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "Creating ANEC IR plist and weights files in memory for the ANE segment(s) identified by key \"%s\"", buf, 0xCu);
    }

  }
  v18 = *(void (****)(uint64_t *__return_ptr, _QWORD))(a1 + 104);
  if (a3)
  {
    v65[0] = MEMORY[0x1E0C809B0];
    v65[1] = 3321888768;
    v65[2] = ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke;
    v65[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
    v65[4] = a1;
    v65[5] = v13;
    v66 = v14;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    Espresso::abstract_context::compute_batch_sync(v18, v65);
    v21 = v66;
    if (!v66)
      goto LABEL_30;
    v22 = (unint64_t *)&v66->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
  }
  else
  {
    v63[0] = MEMORY[0x1E0C809B0];
    v63[1] = 3321888768;
    v63[2] = ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke_146;
    v63[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
    v63[4] = v13;
    v64 = v14;
    v24 = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    Espresso::abstract_context::compute_batch_sync(v18, v63);
    v21 = v64;
    if (!v64)
      goto LABEL_30;
    v26 = (unint64_t *)&v64->__shared_owners_;
    do
      v23 = __ldaxr(v26);
    while (__stlxr(v23 - 1, v26));
  }
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_30:
  if (!*(_BYTE *)(a1 + 224))
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Network not built");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", CFSTR("NetworkList"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v60 != v29)
            objc_enumerationMutation(v27);
          v31 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
          Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(*(void **)(a1 + 216));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, CFSTR("Weights"));

        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
      }
      while (v28);
    }
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", CFSTR("Networks"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v55, v70, 16);
    if (v33)
    {
      v34 = *(_QWORD *)v56;
      do
      {
        for (j = 0; j != v33; ++j)
        {
          if (*(_QWORD *)v56 != v34)
            objc_enumerationMutation(v27);
          objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * j), v51);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(*(void **)(a1 + 216));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v37, CFSTR("Weights"));

        }
        v33 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v55, v70, 16);
      }
      while (v33);
    }
  }

  v53 = v68;
  v54 = v69;
  if (v69)
  {
    v38 = (unint64_t *)&v69->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict(&v53);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 128), "setObject:forKeyedSubscript:", v40, CFSTR("ModelDebugInformation"));

  v41 = v54;
  if (v54)
  {
    v42 = (unint64_t *)&v54->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *a4 = objc_retainAutorelease(*(id *)(a1 + 128));
  *a5 = objc_retainAutorelease(*(id *)(a1 + 216));
  Espresso::ANECompilerEngine::compiler::compiler_options_dict((Espresso::ANECompilerEngine::compiler *)a1);
  *v51 = (id)objc_claimAutoreleasedReturnValue();
  std::string::operator=((std::string *)(v68 + 728), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v44 = v69;
  if (v69)
  {
    v45 = (unint64_t *)&v69->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

}

void sub_1914D14D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  void *v50;
  void *v51;

  if (a48 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a50);

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compiler::create_ir(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 0, 0, a2, a3, a4);
}

uint64_t ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, 0, (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)) >> 4);
}

void ___ZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7__block_invoke_146(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

id Espresso::ANECompilerEngine::compiler::create_ir_for_segment(NSString *,BOOL,NSDictionary * {__autoreleasing}*,NSDictionary* {__autoreleasing}*<NSNumber *,NSDictionary*<NSString *,NSData *>>,NSDictionary * {__autoreleasing}*)::$_0::operator()(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  objc_msgSend(v1, "allKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sortedArrayUsingComparator:", &__block_literal_global_414);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(v1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v8), (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "allKeys");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "firstObject");
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v11);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  return v2;
}

void sub_1914D17A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::compiler::get_anec_debug_info_dict(uint64_t *a1)
{
  unint64_t v2;
  void *v3;
  void *v4;
  std::string *v5;
  void *v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  void *v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  int v24;
  BOOL v25;
  id v28;
  uint64_t *i;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  const __CFString *v38;
  __int128 *v39;
  uint64_t v40;
  std::string *v41;
  std::string::size_type v42;
  void **v43;
  std::string::size_type v44;
  __int128 *v45;
  __int128 *v46;
  std::string *v47;
  void *v48;
  id v49;
  uint64_t *v51;
  void *v52;
  void *v53;
  void *v54;
  std::string v55;
  std::string v56;
  void *v57[2];
  unsigned __int8 v58;
  void *v59;
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *__p;
  char v68;

  v2 = 0x1E0C99000uLL;
  v3 = (void *)objc_opt_new();
  v54 = (void *)objc_opt_new();
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(*a1, &v55);
  v52 = v3;
  if (!v55.__r_.__value_.__r.__words[0])
  {
    v12 = 0;
    goto LABEL_74;
  }
  Espresso::model_metadata_t::model_metadata_t(&v56, (__int128 *)(v55.__r_.__value_.__r.__words[0] + 8));
  v4 = (void *)objc_opt_new();
  v53 = (void *)objc_opt_new();
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v56;
  else
    v5 = (std::string *)v56.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "setObject:forKeyedSubscript:", v6, CFSTR("ModelBundleName"));

  if ((v58 & 0x80u) == 0)
    v7 = v57;
  else
    v7 = (void **)v57[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "setObject:forKeyedSubscript:", v8, CFSTR("ModelName"));

  if (v60 >= 0)
    v9 = &v59;
  else
    v9 = v59;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "setObject:forKeyedSubscript:", v10, CFSTR("ModelPath"));

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v53, CFSTR("ModelSourceInformation"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", CFSTR("Precompiled"), CFSTR("ModelCompilationMethod"));
  if (v62 < 0)
  {
    if (!v61[1])
      goto LABEL_18;
    v11 = (void **)v61[0];
  }
  else
  {
    if (!v62)
      goto LABEL_18;
    v11 = v61;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, CFSTR("version"));

LABEL_18:
  if (v64 < 0)
  {
    if (!v63[1])
      goto LABEL_24;
    v14 = (void **)v63[0];
  }
  else
  {
    if (!v64)
      goto LABEL_24;
    v14 = v63;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v15, CFSTR("product"));

LABEL_24:
  if (v66 < 0)
  {
    if (v65[1])
    {
      v16 = (void **)v65[0];
      goto LABEL_29;
    }
  }
  else if (v66)
  {
    v16 = v65;
LABEL_29:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v17, CFSTR("usecase"));

  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, CFSTR("ModelInformation"));
  v51 = a1;
  v18 = *(uint64_t **)(v55.__r_.__value_.__r.__words[0] + 192);
  if (v18)
  {
    v12 = 0;
    while (1)
    {
      v19 = v2;
      v20 = (void *)objc_opt_new();
      v21 = v18 + 2;
      v22 = v18 + 2;
      if (*((char *)v18 + 39) < 0)
        v22 = (_QWORD *)*v21;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22, v51);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKeyedSubscript:", v23, CFSTR("ModuleBundleName"));

      v24 = *((char *)v18 + 39);
      if (v24 < 0)
      {
        if (v18[3] == 27)
        {
          v21 = (_QWORD *)*v21;
LABEL_39:
          v25 = *v21 == 0x6C7070612E6D6F63 && v21[1] == 0x7365727073452E65;
          if (v25 && v21[2] == 0x77656D6172466F73 && *(_QWORD *)((char *)v21 + 19) == 0x6B726F77656D6172)
          {
            v28 = v20;

            v12 = v28;
          }
        }
      }
      else if (v24 == 27)
      {
        goto LABEL_39;
      }
      for (i = (uint64_t *)v18[7]; i; i = (uint64_t *)*i)
      {
        v30 = i + 5;
        if (*((char *)i + 63) < 0)
          v30 = (_QWORD *)*v30;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = i + 2;
        if (*((char *)i + 39) < 0)
          v32 = (_QWORD *)*v32;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setObject:forKeyedSubscript:", v31, v33);

      }
      objc_msgSend(v54, "addObject:", v20);

      v18 = (uint64_t *)*v18;
      v2 = v19;
      if (!v18)
        goto LABEL_60;
    }
  }
  v12 = 0;
LABEL_60:

  if (v68 < 0)
    operator delete(__p);
  a1 = v51;
  if (v66 < 0)
    operator delete(v65[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v60 < 0)
    operator delete(v59);
  if ((char)v58 < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_74:
  size = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
  if (!v55.__r_.__value_.__l.__size_)
    goto LABEL_78;
  v35 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_78:
    if (v12)
      goto LABEL_81;
    goto LABEL_79;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (!v12)
  {
LABEL_79:
    v12 = (void *)objc_opt_new();
    objc_msgSend(v54, "addObject:", v12);
  }
LABEL_81:
  objc_msgSend(v12, "setObject:forKeyedSubscript:", CFSTR("com.apple.EspressoFramework"), CFSTR("ModuleBundleName"), v51);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "3400.58.3.11.1");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v37, CFSTR("ModuleVersion"));

  if (*(_BYTE *)(*(_QWORD *)(*a1 + 16) + 127))
    v38 = CFSTR("AOT");
  else
    v38 = CFSTR("V1");
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v38, CFSTR("CompilationMethod"));
  std::string::basic_string[abi:ne180100]<0>(&v55, "");
  v39 = *(__int128 **)(*a1 + 472);
  v40 = *a1 + 480;
  if (v39 != (__int128 *)v40)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v56, v39 + 2);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v56;
      else
        v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v42 = v56.__r_.__value_.__l.__size_;
      std::string::append(&v55, (const std::string::value_type *)v41, v42);
      std::string::append(&v55, ":");
      if ((v58 & 0x80u) == 0)
        v43 = v57;
      else
        v43 = (void **)v57[0];
      if ((v58 & 0x80u) == 0)
        v44 = v58;
      else
        v44 = (std::string::size_type)v57[1];
      std::string::append(&v55, (const std::string::value_type *)v43, v44);
      std::string::append(&v55, ",");
      if ((char)v58 < 0)
        operator delete(v57[0]);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v45 = (__int128 *)*((_QWORD *)v39 + 1);
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = *(__int128 **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (__int128 *)*((_QWORD *)v39 + 2);
          v25 = *(_QWORD *)v46 == (_QWORD)v39;
          v39 = v46;
        }
        while (!v25);
      }
      v39 = v46;
    }
    while (v46 != (__int128 *)v40);
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v55;
  else
    v47 = (std::string *)v55.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v48, CFSTR("ModuleCompilationFlags"));

  objc_msgSend(v52, "setObject:forKeyedSubscript:", v54, CFSTR("ModuleInformation"));
  v49 = v52;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);

  return v49;
}

void sub_1914D1F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  void *v20;

  Espresso::model_metadata_t::~model_metadata_t(&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::compiler::compiler_options_dict(Espresso::ANECompilerEngine::compiler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  std::string *v9;
  __int128 v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string::size_type v13;
  char v14;
  std::string *v15;
  void *v16;
  std::string *v17;
  void *v18;
  std::string *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  const __CFString *v28;
  const __CFString *v29;
  void *v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v50;
  void *v51;
  void *v52;
  void *v53;
  id obj;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t i;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void *v73[2];
  char v74;
  std::string v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void *__p[2];
  std::string::size_type v81;
  std::string v82;
  std::string v83;
  std::string v84;
  _BYTE v85[128];
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v58 = (void *)objc_opt_new();
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v50 = v3;
    v4 = *((_QWORD *)this + 1);
  }
  else
  {
    v4 = 0;
    v50 = 0;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObjects:", CFSTR("M9"), CFSTR("M10"), CFSTR("H11"), CFSTR("H12"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", CFSTR("H13"));
  objc_msgSend(v5, "addObject:", CFSTR("H13G"));
  objc_msgSend(v5, "addObject:", CFSTR("H14"));
  objc_msgSend(v5, "addObject:", CFSTR("H14G"));
  objc_msgSend(v5, "addObject:", CFSTR("H15"));
  objc_msgSend(v5, "addObject:", CFSTR("H14G.N301"));
  objc_msgSend(v5, "addObject:", CFSTR("H15G"));
  objc_msgSend(v5, "addObject:", CFSTR("H16"));
  objc_msgSend(v5, "addObject:", CFSTR("H17"));
  if (*((char *)this + 479) < 0)
    std::string::__init_copy_ctor_external(&v84, *((const std::string::value_type **)this + 57), *((_QWORD *)this + 58));
  else
    v84 = *(std::string *)((_BYTE *)this + 19);
  std::string::basic_string[abi:ne180100]<0>(&v82, "anec_flags");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v56 = v4 + 472;
  Espresso::map_const_get<std::map<std::string,std::string>>(v4 + 472, (uint64_t)&v82, (uint64_t)__p, &v83);
  if (SHIBYTE(v81) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  obj = v5;
  v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
  if (v57)
  {
    v55 = *(_QWORD *)v77;
    do
    {
      for (i = 0; i != v57; ++i)
      {
        if (*(_QWORD *)v77 != v55)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * i);
        v7 = (void *)objc_opt_new();
        v8 = objc_retainAutorelease(v6);
        std::string::basic_string[abi:ne180100]<0>(&v75, (char *)objc_msgSend(v8, "UTF8String"));
        v9 = std::string::insert(&v75, 0, "anec_flags_");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v81 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v73, "");
        Espresso::map_const_get<std::map<std::string,std::string>>(v56, (uint64_t)__p, (uint64_t)v73, &v82);
        if (v74 < 0)
          operator delete(v73[0]);
        if (SHIBYTE(v81) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v84.__r_.__value_.__l.__size_;
        if (size)
          goto LABEL_32;
        v12 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = v83.__r_.__value_.__l.__size_;
        if (v12)
          goto LABEL_32;
        v13 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        v14 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v82.__r_.__value_.__l.__size_;
        if (v13)
        {
LABEL_32:
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v84;
          else
            v15 = (std::string *)v84.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "componentsSeparatedByString:", CFSTR(","));
          v59 = (void *)objc_claimAutoreleasedReturnValue();

          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v83;
          else
            v17 = (std::string *)v83.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "componentsSeparatedByString:", CFSTR(","));
          v60 = (void *)objc_claimAutoreleasedReturnValue();

          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v82;
          else
            v19 = (std::string *)v82.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "componentsSeparatedByString:", CFSTR(","));
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v60, "arrayByAddingObjectsFromArray:", v61);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "arrayByAddingObjectsFromArray:", v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          NSLog(CFSTR("Resolved compile flags: %@"), v22);
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v23 = v22;
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
          if (v24)
          {
            v25 = *(_QWORD *)v70;
            do
            {
              v26 = 0;
              do
              {
                if (*(_QWORD *)v70 != v25)
                  objc_enumerationMutation(v23);
                v27 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * v26);
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("SpatialSplitDisabled")) & 1) != 0)
                {
                  v28 = CFSTR("Disabled");
LABEL_54:
                  v29 = CFSTR("SpatialSplitMode");
LABEL_55:
                  objc_msgSend(v7, "setObject:forKeyedSubscript:", v28, v29);
                  goto LABEL_56;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("SpatialSplitAuto")) & 1) != 0)
                {
                  v28 = CFSTR("Auto");
                  goto LABEL_54;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("SpatialSplitMemory")) & 1) != 0)
                {
                  v28 = CFSTR("Memory");
                  goto LABEL_54;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("SpatialSplitGenericDAG")) & 1) != 0)
                {
                  v28 = CFSTR("GenericDAG");
                  goto LABEL_54;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("KernelRewind")) & 1) != 0)
                {
                  v28 = (const __CFString *)MEMORY[0x1E0C9AAB0];
                  v29 = CFSTR("KernelRewind");
                  goto LABEL_55;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("EnableSingleChannelEWOpCopyRemoval")) & 1) != 0)
                {
                  v28 = (const __CFString *)MEMORY[0x1E0C9AAB0];
                  v29 = CFSTR("EnableSingleChannelEWOpCopyRemoval");
                  goto LABEL_55;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("EnableAggressiveTensorCaching")) & 1) != 0)
                {
                  v28 = (const __CFString *)MEMORY[0x1E0C9AAB0];
                  v29 = CFSTR("EnableAggressiveTensorCaching");
                  goto LABEL_55;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("ScanWeightsForCompression")) & 1) != 0)
                {
                  v28 = (const __CFString *)MEMORY[0x1E0C9AAB0];
                  v29 = CFSTR("ScanWeightsForCompression");
                  goto LABEL_55;
                }
                if ((objc_msgSend(v27, "isEqualToString:", CFSTR("DisableInputCoalescing")) & 1) != 0)
                {
                  v28 = (const __CFString *)MEMORY[0x1E0C9AAB0];
                  v29 = CFSTR("DisableInputsSectionsCoalesce");
                  goto LABEL_55;
                }
                if (objc_msgSend(v27, "isEqualToString:", CFSTR("OptimizeReductionPerf")))
                {
                  v28 = CFSTR("ReductionPerf");
                  v29 = CFSTR("Optimize");
                  goto LABEL_55;
                }
                if (objc_msgSend(v27, "containsString:", CFSTR("=")))
                {
                  objc_msgSend(v27, "componentsSeparatedByString:", CFSTR("="));
                  v67 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v67, "count") != 2)
                  {
                    __p[0] = (void *)objc_msgSend(objc_retainAutorelease(v27), "UTF8String");
                    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Unsupported anec_flags entry %s", __p);
                  }
                  objc_msgSend(v67, "objectAtIndex:", 0);
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v67, "objectAtIndex:", 1);
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  v31 = objc_msgSend(v30, "isEqualToString:", CFSTR("true"));
                  v32 = MEMORY[0x1E0C9AAB0];
                  if ((v31 & 1) != 0
                    || (v33 = objc_msgSend(v30, "isEqualToString:", CFSTR("false")), v32 = MEMORY[0x1E0C9AAA0], v33))
                  {
                    objc_msgSend(v7, "setObject:forKeyedSubscript:", v32, v65);
                  }
                  else
                  {
                    if (objc_msgSend(v30, "hasPrefix:", CFSTR("int:")))
                    {
                      v51 = (void *)MEMORY[0x1E0CB37E8];
                      objc_msgSend(v30, "substringFromIndex:", 4);
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v51, "numberWithInt:", objc_msgSend(v63, "intValue"));
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v7, "setObject:forKeyedSubscript:", v52, v65);
                    }
                    else
                    {
                      if (!objc_msgSend(v30, "hasPrefix:", CFSTR("float:")))
                      {
                        objc_msgSend(v7, "setObject:forKeyedSubscript:", v30, v65);
                        goto LABEL_75;
                      }
                      v53 = (void *)MEMORY[0x1E0CB37E8];
                      objc_msgSend(v30, "substringFromIndex:", 6);
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v63, "floatValue");
                      objc_msgSend(v53, "numberWithFloat:");
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v7, "setObject:forKeyedSubscript:", v52, v65);
                    }

                  }
LABEL_75:

                }
LABEL_56:

                ++v26;
              }
              while (v24 != v26);
              v34 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
              v24 = v34;
            }
            while (v34);
          }

          v68 = (void *)objc_opt_new();
          objc_msgSend(*((id *)this + 16), "objectForKeyedSubscript:", CFSTR("ProcedureList"));
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "count");

          if (v36 <= 1)
            v37 = 1;
          else
            v37 = v36;
          v66 = v37;
          objc_msgSend(v8, "lowercaseString");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          if (v36 < 2)
          {
            objc_msgSend(v58, "setObject:forKeyedSubscript:", v7, v64);
          }
          else
          {
            for (j = 0; j != v66; ++j)
            {
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v7);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*((id *)this + 16), "objectForKeyedSubscript:", CFSTR("ProcedureList"));
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "objectAtIndexedSubscript:", j);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("Name"));
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "setObject:forKeyedSubscript:", v42, CFSTR("Name"));

              objc_msgSend(v68, "addObject:", v39);
            }
            v43 = (void *)objc_opt_new();
            objc_msgSend(v58, "setObject:forKeyedSubscript:", v43, v64);

            objc_msgSend(v58, "objectForKeyedSubscript:", v64);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "setObject:forKeyedSubscript:", v68, CFSTR("ProcedureParams"));

          }
          objc_msgSend(v58, "objectForKeyedSubscript:", v64);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("UndefinedSymbolsBehaviorUseFVMLibs"));

          v14 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        if (v14 < 0)
          operator delete(v82.__r_.__value_.__l.__data_);

      }
      v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
    }
    while (v57);
  }

  if (objc_msgSend(v58, "count"))
    v46 = v58;
  else
    v46 = 0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);

  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  return v46;
}

void sub_1914D2AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZZN8Espresso17ANECompilerEngine8compiler21create_ir_for_segmentEP8NSStringbPU15__autoreleasingP12NSDictionaryPU15__autoreleasingPS4_IP8NSNumberPS4_IS3_P6NSDataEES7_ENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void `anonymous namespace'::write_compilation_options_file(void *a1, uint64_t *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s_options.plist"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByAppendingPathComponent:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeItemAtPath:error:", v9, 0);

    Espresso::espresso_os_log_subsystem(v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "Dumping compiler options to %@", buf, 0xCu);
    }

    if ((objc_msgSend(v5, "writeToFile:atomically:", v9, 1) & 1) == 0)
    {
      *(_QWORD *)buf = objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Failed writing compiler options %s", buf);
    }
  }

}

void sub_1914D2F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBBDA0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D854C0;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso19pass_ane_multi_headE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso23analysis_ane_multi_headE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1914D3144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(uint64_t a1, std::string *__str)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = CFSTR("Float16");
  std::string::operator=((std::string *)(a1 + 80), __str);
  return a1;
}

void sub_1914D3238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1914D32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compiler::get_consumers_of_blob(Espresso::ANECompilerEngine::compiler *this, void *a2)
{
  uint64_t *i;
  uint64_t v4;
  uint64_t j;
  char *v6;
  char **v7;
  __int128 *v8;
  std::string *v9;
  std::string *v10;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 *v15;

  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(a2, -1, (uint64_t)&v12);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)*((unint64_t *)&v13 + 1));
  for (i = (uint64_t *)v13; i; i = (uint64_t *)*i)
  {
    v4 = i[5];
    for (j = i[6]; v4 != j; v4 += 32)
    {
      v15 = (__int128 *)(i + 2);
      v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v15);
      v7 = (char **)(v6 + 40);
      v8 = (__int128 *)(v4 + 8);
      v9 = (std::string *)*((_QWORD *)v6 + 6);
      if ((unint64_t)v9 >= *((_QWORD *)v6 + 7))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (uint64_t)v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, v8);
        v10 = v9 + 1;
      }
      *((_QWORD *)v6 + 6) = v10;
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)&v12);
}

void sub_1914D3408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v9);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>::~pair(uint64_t a1)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::ANECompilerEngine::compiler::add_anec_subnet_output(uint64_t a1, _QWORD *a2, const void **a3, uint64_t *a4)
{
  void *v8;
  size_t v9;
  void **v10;
  const void *v11;
  void **v12;
  void *v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  v8 = (void *)MEMORY[0x1E0CB3940];
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 7);
  if (v26 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "@output");
  if (v26 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  objc_msgSend(v8, "stringWithUTF8String:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v26 < 0)
    operator delete(__p[0]);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a2 + 472);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = *a4;
  v16 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v15 = *a4;
  }
  output_unit((uint64_t *)a3, &v23, (int *)(v15 + 160), v14);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 136), "setObject:forKeyedSubscript:", v19, v13);

  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "addObject:", v13);

}

void sub_1914D3620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1914D3658(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1914D3650);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1914D3754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,Espresso::net_configuration>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15[3];
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1914D38BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration(std::string *a1, int *a2, int *a3, uint64_t a4)
{
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  int v13;
  size_t v14;
  std::string *v15;
  std::string *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string __p;

  memset(&v21, 0, sizeof(v21));
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      std::to_string(&v23, *v7);
      v8 = std::string::append(&v23, ",");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v21, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      ++v7;
    }
    while (v7 != a3);
  }
  v12 = std::string::insert(&v21, 0, "C");
  v22 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v13 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    v14 = v22.__r_.__value_.__l.__size_;
  v15 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if (v13 >= 0)
      v16 = &v22;
    else
      v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 64;
  v17 = *(char *)(a4 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a4;
  else
    v18 = *(const std::string::value_type **)a4;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a4 + 23);
  else
    v19 = *(_QWORD *)(a4 + 8);
  v20 = std::string::append(&__p, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      return;
LABEL_36:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    goto LABEL_36;
}

void sub_1914D3AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  int v30;

  if (a30 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

id input_unit(unsigned int **a1, unsigned int *a2, void *a3, unint64_t a4, unsigned __int8 a5)
{
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  Espresso::ANECompilerEngine *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  void *v21;
  NSString *v22;
  void *v23;
  Espresso *v24;
  const char *v25;
  unsigned int *v26;
  void *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  unsigned int v34;
  signed int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  signed int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  id v47;
  void *v48;
  NSString *v49;
  void *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  NSObject *v66;
  int v68;
  const char *v69;
  unsigned int **v70;
  unsigned int **v71;
  Espresso::ANECompilerEngine *v72;
  void *v73;
  id v74;
  uint8_t buf[4];
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v74 = a3;
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)*a1 + 32))(*a1) == 4
    || (*(unsigned int (**)(unsigned int *))(*(_QWORD *)*a1 + 32))(*a1) == 2)
  {
    v9 = 1;
  }
  else
  {
    v9 = 2;
  }
  v10 = (void *)objc_opt_new();
  v73 = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2[4]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("InputWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2[3]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("InputHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, CFSTR("BatchSize"));

  v15 = *((_QWORD *)*a1 + 16);
  v16 = *((_QWORD *)*a1 + 17);
  v17 = v16 - v15;
  if (a4 && v16 == v15)
  {
    v69 = "4CC format index must stay 0";
    goto LABEL_81;
  }
  if (v16 != v15 && v17 >> 2 <= a4)
  {
    v69 = "4CC format index too large";
LABEL_81:
    Espresso::throw_exception_selector<Espresso::generic_error>(v69);
  }
  if (v16 == v15)
    goto LABEL_35;
  v18 = 0;
  v19 = *(unsigned int *)(v15 + 4 * a4);
  if ((int)v19 <= 1278226487)
  {
    if ((_DWORD)v19 == 843264056 || (_DWORD)v19 == 843264104)
      goto LABEL_36;
    v20 = 1111970369;
  }
  else
  {
    if ((int)v19 <= 1380411456)
    {
      if ((_DWORD)v19 != 1278226488)
      {
        v20 = 1278226536;
        goto LABEL_19;
      }
LABEL_36:
      if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)*a1 + 32))(*a1) == 4)
      {
        v33 = CFSTR("UInt8");
      }
      else if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)*a1 + 32))(*a1) == 2)
      {
        v33 = CFSTR("Int8");
      }
      else if (v9 == 4)
      {
        v33 = CFSTR("Float32");
      }
      else if ((((*a1)[30] == 7) & a5) != 0)
      {
        v33 = CFSTR("Int16");
      }
      else
      {
        v33 = CFSTR("Float16");
      }
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v33, CFSTR("InputType"));
      v34 = a2[3];
      v70 = a1;
      v35 = (*a1)[48];
      v36 = a2[4] * v9 * v35;
      v38 = v36 - 1;
      v37 = v36 < 1;
      v39 = v36 + 62;
      if (!v37)
        v39 = v38;
      v40 = (v39 & 0xFFFFFFC0) + 64;
      if (v37)
        v38 += 127;
      v41 = (v38 & 0xFFFFFF80) + 128;
      if (v18)
        v42 = v41;
      else
        v42 = v40;
      v43 = a2[1];
      v44 = a2[2];
      v45 = *a2;
      v46 = a2[7];
      v47 = v73;
      v72 = (Espresso::ANECompilerEngine *)v74;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "setObject:forKeyedSubscript:", v48, CFSTR("InputRowStride"));

      if (v46 == -1)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v34 * v42);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "setObject:forKeyedSubscript:", v56, CFSTR("InputPlaneStride"));
        v10 = v73;
        a1 = v70;
      }
      else
      {
        if ((Espresso::ANECompilerEngine::is_mix(v72, v49) & 1) != 0)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v44);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "setObject:forKeyedSubscript:", v50, CFSTR("InputDepth"));
        v51 = v43 / v35;

        if (v46 == 1)
        {
          v54 = v34 * v42;
          v55 = (v51 * v54);
          v53 = v45 * v55;
          v10 = v73;
          v52 = 0x1E0CB3000uLL;
        }
        else
        {
          v10 = v73;
          v52 = 0x1E0CB3000;
          if (v46)
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
          v53 = v34 * v42;
          v54 = (v44 * v53);
          v55 = (v54 * v51);
        }
        objc_msgSend(*(id *)(v52 + 2024), "numberWithInt:", v53, v70);
        a1 = v71;
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "setObject:forKeyedSubscript:", v57, CFSTR("InputDepthStride"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v54);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "setObject:forKeyedSubscript:", v58, CFSTR("InputPlaneStride"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "setObject:forKeyedSubscript:", v56, CFSTR("InputBatchStride"));
      }

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (*a1)[48]);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "setObject:forKeyedSubscript:", v59, CFSTR("InputInterleave"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2[1]);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "setObject:forKeyedSubscript:", v32, CFSTR("InputChannels"));
      goto LABEL_61;
    }
    if ((_DWORD)v19 == 1380411457)
      goto LABEL_36;
    v20 = 1751411059;
  }
LABEL_19:
  if ((_DWORD)v19 == v20)
    goto LABEL_36;
  if (v17 != 4)
  {
    if ((_DWORD)v19)
      goto LABEL_27;
LABEL_35:
    v18 = 0;
    goto LABEL_36;
  }
  if (!(_DWORD)v19)
    goto LABEL_35;
  if ((_DWORD)v19 == 1278226534 || (_DWORD)v19 == 843264102)
  {
    Espresso::ANECompilerEngine::current_ane_arch(v14);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v21, v22) & 1) == 0)
    {
      v68 = 4 * (*a1)[48] * a2[4];

      v18 = (v68 & 0x3C) == 0 && v19 == 843264102;
      if ((v68 & 0x3C) == 0)
        v9 = 4;
      goto LABEL_36;
    }

    goto LABEL_35;
  }
LABEL_27:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v19);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v23, CFSTR("Input4CCFormat"));

  v26 = *a1;
  if (*((_QWORD *)*a1 + 7) != *((_QWORD *)*a1 + 6))
  {
    v27 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
    if (*((_QWORD *)v26 + 7) != *((_QWORD *)v26 + 6))
    {
      v28 = 0;
      do
      {
        v29 = (void *)objc_opt_new();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, CFSTR("PlaneIndex"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*((_QWORD *)v26 + 6) + 4 * v28));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setObject:forKeyedSubscript:", v31, CFSTR("PlaneRowStride"));

        objc_msgSend(v27, "addObject:", v29);
        ++v28;
      }
      while (v28 < (uint64_t)(*((_QWORD *)v26 + 7) - *((_QWORD *)v26 + 6)) >> 2);
    }
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v27, CFSTR("PlaneDescriptor"));

  }
  if ((_DWORD)v19 == 707153000 || (_DWORD)v19 == 706956392)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2[1]);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v32, CFSTR("InputChannels"));
LABEL_61:

  }
  v60 = *a1;
  v61 = (*a1)[8];
  if (v61)
  {
    if ((v61 & 0x3F) != 0)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride (not aligned)");
    v62 = v60[9];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (*a1)[8]);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v63, CFSTR("InputRowStride"));

    if ((_DWORD)v62)
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v62);
    else
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (*a1)[3] * v61);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v64, CFSTR("InputPlaneStride"));

    v60 = *a1;
  }
  if (v60[11])
  {
    objc_msgSend(v10, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)v60[10], (int)a2[6], a2[7] == 0), CFSTR("InputCircularBufferWrapAxis"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (*a1)[11]);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v65, CFSTR("InputCircularBufferSize"));

  }
  Espresso::espresso_os_log_subsystem(v24, v25);
  v66 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v76 = v10;
    _os_log_debug_impl(&dword_190DAF000, v66, OS_LOG_TYPE_DEBUG, "ANEC input = %@", buf, 0xCu);
  }

  return v10;
}

void sub_1914D43A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id output_unit(uint64_t *a1, _QWORD *a2, int *a3, void *a4)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  Espresso::ANECompilerEngine *v9;
  unsigned int *v10;
  unsigned int *v11;
  _BOOL4 v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  void *v19;
  int v20;
  int v21;
  _QWORD *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  int v35;
  id v36;
  void *v37;
  NSString *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  const __CFString *v48;
  void *v49;
  void *v52;
  NSString *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  int v62;
  _QWORD *v63;
  void *v64;
  char v65;
  BOOL v66;
  int v67;
  void *v68;
  void *v69;
  Espresso::ANECompilerEngine *v70;
  id v72;

  v72 = a4;
  if (*((char *)a1 + 23) >= 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = v7;
  v8 = (void *)objc_opt_new();
  v69 = v8;
  v9 = (Espresso::ANECompilerEngine *)objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("Bottom"));
  v10 = *(unsigned int **)(*a2 + 128);
  v11 = *(unsigned int **)(*a2 + 136);
  v12 = 0;
  v13 = (char *)v11 - (char *)v10;
  if (v11 == v10)
  {
    v15 = 2;
  }
  else
  {
    v14 = *v10;
    v15 = 2;
    if ((int)v14 <= 1278226487)
    {
      v16 = (_DWORD)v14 == 843264056 || (_DWORD)v14 == 843264104;
      v17 = 1111970369;
    }
    else if ((int)v14 > 1380411456)
    {
      v16 = (_DWORD)v14 == 1380411457;
      v17 = 1751411059;
    }
    else
    {
      v16 = (_DWORD)v14 == 1278226488;
      v17 = 1278226536;
    }
    if (v16 || (_DWORD)v14 == v17)
      goto LABEL_19;
    if (v13 == 4)
    {
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 != 1278226534 && (_DWORD)v14 != 843264102)
          goto LABEL_58;
        Espresso::ANECompilerEngine::current_ane_arch(v9);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v52, v53) & 1) == 0)
        {
          v62 = *(_DWORD *)(*a2 + 192) * a3[4];
          v63 = a2;
          v64 = v8;
          v65 = 4 * v62;

          v66 = (v65 & 0x3C) == 0;
          v8 = v64;
          a2 = v63;
          v12 = v66 && v14 == 843264102;
          if (v66)
            v15 = 4;
          else
            v15 = 2;
          goto LABEL_19;
        }

      }
    }
    else if ((_DWORD)v14)
    {
LABEL_58:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v14);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v54, CFSTR("Output4CCFormat"));

      v55 = *a2;
      if (*(_QWORD *)(*a2 + 56) != *(_QWORD *)(*a2 + 48))
      {
        v56 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
        if (*(_QWORD *)(v55 + 56) != *(_QWORD *)(v55 + 48))
        {
          v57 = 0;
          do
          {
            v58 = (void *)objc_opt_new();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v57);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v58, "setObject:forKeyedSubscript:", v59, CFSTR("PlaneIndex"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v55 + 48) + 4 * v57));
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("PlaneRowStride"));

            objc_msgSend(v56, "addObject:", v58);
            ++v57;
          }
          while (v57 < (uint64_t)(*(_QWORD *)(v55 + 56) - *(_QWORD *)(v55 + 48)) >> 2);
        }
        objc_msgSend(v69, "setObject:forKeyedSubscript:", v56, CFSTR("PlaneDescriptor"));

      }
      v44 = v69;
      if ((_DWORD)v14 == 707153000 || (_DWORD)v14 == 706956392)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3[1]);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "setObject:forKeyedSubscript:", v61, CFSTR("InputChannels"));

      }
      goto LABEL_45;
    }
    v12 = 0;
  }
LABEL_19:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a2 + 192));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v19, CFSTR("OutputInterleave"));

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) == 4
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) == 2)
  {
    v15 = 1;
  }
  v20 = a3[3];
  v67 = v15;
  v21 = a3[4] * v15;
  v22 = a2;
  v23 = *(_DWORD *)(*a2 + 192);
  v24 = v21 * v23;
  v26 = v24 - 1;
  v25 = v24 < 1;
  v27 = v24 + 62;
  if (!v25)
    v27 = v26;
  v28 = (v27 & 0xFFFFFFC0) + 64;
  if (v25)
    v26 += 127;
  v29 = (v26 & 0xFFFFFF80) + 128;
  if (v12)
    v30 = v29;
  else
    v30 = v28;
  v32 = a3[1];
  v31 = a3[2];
  v33 = *a3;
  v34 = v8;
  v35 = a3[7];
  v36 = v34;
  v70 = (Espresso::ANECompilerEngine *)v72;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v30);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setObject:forKeyedSubscript:", v37, CFSTR("OutputRowStride"));

  if (v35 == -1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (v20 * v30));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v43, CFSTR("OutputPlaneStride"));
    v7 = v68;
    v44 = v69;
    v45 = v67;
    a2 = v22;
  }
  else
  {
    if ((Espresso::ANECompilerEngine::is_mix(v70, v38) & 1) != 0)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
    v39 = v32 / v23;
    if (v35 == 1)
    {
      v41 = (v20 * v30);
      v42 = (v39 * v41);
      v40 = (v33 * v42);
      a2 = v22;
    }
    else
    {
      if (v35)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid ANE blob layout.");
      a2 = v22;
      v40 = (v20 * v30);
      v41 = (v31 * v40);
      v42 = (v41 * v39);
    }
    v7 = v68;
    v44 = v69;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v40);
    v45 = v67;
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v46, CFSTR("OutputDepthStride"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v41);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, CFSTR("OutputPlaneStride"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v43, CFSTR("OutputBatchStride"));
  }

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) == 4)
  {
    v48 = CFSTR("UInt8");
  }
  else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) == 2)
  {
    v48 = CFSTR("Int8");
  }
  else if (v45 == 4)
  {
    v48 = CFSTR("Float32");
  }
  else
  {
    v48 = CFSTR("Float16");
  }
  objc_msgSend(v36, "setObject:forKeyedSubscript:", v48, CFSTR("OutputType"));
LABEL_45:
  if (*(_DWORD *)(*a2 + 44))
  {
    objc_msgSend(v44, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*(unsigned int *)(*a2 + 40), a3[6], a3[7] == 0), CFSTR("OutputCircularBufferWrapAxis"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*a2 + 44));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "setObject:forKeyedSubscript:", v49, CFSTR("OutputCircularBufferSize"));

  }
  return v44;
}

void sub_1914D4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Espresso::ANECompilerEngine::compiler::add_consumers_of_blob(void *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id obj;
  void *context;
  uint64_t v27;
  id v28;
  const __CFDictionary *theDict;
  void *__p[2];
  char v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = a1;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
  if (v4)
  {
    v23 = *(_QWORD *)v42;
    do
    {
      v5 = 0;
      v24 = v4;
      do
      {
        if (*(_QWORD *)v42 != v23)
          objc_enumerationMutation(obj);
        v27 = v5;
        v6 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v5);
        context = (void *)MEMORY[0x19401D4A4]();
        objc_msgSend(obj, "objectForKeyedSubscript:", v6);
        theDict = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          CFDictionaryGetValue(theDict, CFSTR("Bottom"));
          v28 = (id)objc_claimAutoreleasedReturnValue();
          CFDictionaryGetValue(theDict, CFSTR("Name"));
          v7 = objc_claimAutoreleasedReturnValue();
          v8 = (void *)v7;
          if (v28)
            v9 = v7 == 0;
          else
            v9 = 1;
          if (!v9)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v39 = 0u;
              v40 = 0u;
              v37 = 0u;
              v38 = 0u;
              v10 = v28;
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
              if (v11)
              {
                v12 = *(_QWORD *)v38;
                do
                {
                  for (i = 0; i != v11; ++i)
                  {
                    if (*(_QWORD *)v38 != v12)
                      objc_enumerationMutation(v10);
                    v14 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
                    v33 = 0;
                    v35 = 0;
                    v36 = 0;
                    v34 = 0;
                    MEMORY[0x19401C808](&v34, objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
                    v33 = a2;
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
                    v45 = __p;
                    v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v45);
                    v16 = v15 + 5;
                    v17 = v15[6];
                    if (v17 >= v15[7])
                    {
                      v18 = std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(v16, (uint64_t)&v33);
                    }
                    else
                    {
                      std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>((uint64_t)v16, (uint64_t)&v33);
                      v18 = (char *)(v17 + 32);
                    }
                    v15[6] = v18;
                    if (v32 < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v36) < 0)
                      operator delete(v34);
                  }
                  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
                }
                while (v11);
              }

            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v33 = 0;
                v35 = 0;
                v36 = 0;
                v34 = 0;
                MEMORY[0x19401C808](&v34, objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
                v33 = a2;
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v28), "UTF8String"));
                v45 = __p;
                v19 = std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v45);
                v20 = v19 + 5;
                v21 = v19[6];
                if (v21 >= v19[7])
                {
                  v22 = std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(v20, (uint64_t)&v33);
                }
                else
                {
                  std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>((uint64_t)v20, (uint64_t)&v33);
                  v22 = (char *)(v21 + 32);
                }
                v19[6] = v22;
                if (v32 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v36) < 0)
                  operator delete(v34);
              }
            }
          }

        }
        objc_autoreleasePoolPop(context);
        v5 = v27 + 1;
      }
      while (v27 + 1 != v24);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    }
    while (v4);
  }

}

void sub_1914D50FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x40uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 6) = 0;
  *((_QWORD *)i + 7) = 0;
  *((_QWORD *)i + 5) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1914D544C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__construct_one_at_end[abi:ne180100]<Espresso::ANECompilerEngine::compiler::consumer_info const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  v4 = (std::string *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
}

void sub_1914D54C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::ANECompilerEngine::compiler::consumer_info>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::consumer_info const&>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  char *v13;
  int v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  unint64_t v18;
  char *v20;
  int64x2_t v21;
  char *v22;
  unint64_t *v23;

  v3 = *a1;
  v2 = a1[1];
  v4 = (uint64_t)(v2 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v23 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v20 = v10;
  v21.i64[0] = (uint64_t)v11;
  v21.i64[1] = (uint64_t)v11;
  v22 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v3 = *a1;
    v2 = a1[1];
    v13 = (char *)v21.i64[1];
    v11 = (char *)v21.i64[0];
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    v13 = v11;
  }
  if (v2 == v3)
  {
    v16 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      v14 = *(_DWORD *)(v2 - 32);
      v2 -= 32;
      *((_DWORD *)v11 - 8) = v14;
      v11 -= 32;
      v15 = *(_OWORD *)(v2 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v2 + 24);
      *(_OWORD *)(v11 + 8) = v15;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    while (v2 != v3);
    v16 = *(int64x2_t *)a1;
  }
  v17 = v13 + 32;
  *a1 = (unint64_t)v11;
  a1[1] = (unint64_t)(v13 + 32);
  v21 = v16;
  v18 = a1[2];
  a1[2] = (unint64_t)v22;
  v22 = (char *)v18;
  v20 = (char *)v16.i64[0];
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_1914D5620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::compiler::consumer_info>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(std::string *this, uint64_t a2, unint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  std::string::size_type v14;
  std::string v15;
  std::string v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if (!a3)
      return;
  }
  else
  {
    *this = *(std::string *)a2;
    if (!a3)
      return;
  }
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 35;
  std::to_string(&v15, a3);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v15;
  else
    v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v16, (const std::string::value_type *)v9, size);
  v12 = v11->__r_.__value_.__r.__words[0];
  v17[0] = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  v14 = v17[0];
  this->__r_.__value_.__r.__words[0] = v12;
  this->__r_.__value_.__l.__size_ = v14;
  *(std::string::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v17 + 7);
  *((_BYTE *)&this->__r_.__value_.__s + 23) = v13;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1914D5818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(Espresso::ANECompilerEngine::compiler::build_state_t *this, const unsigned __int8 *a2, size_t a3)
{
  uint64_t **v6;
  const void **i;
  int v8;
  int v9;
  size_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v19;
  char v21;
  void *__p[3];
  std::string v23;
  size_t v24;
  std::string v25;

  *((_BYTE *)this + 172) = 1;
  Espresso::sha_hash(&v25, a2, a3, 0);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v23 = v25;
  v24 = a3;
  v6 = (uint64_t **)((char *)this + 184);
  for (i = (const void **)*((_QWORD *)this + 24); i; i = (const void **)*i)
  {
    if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100]((const void **)&v23.__r_.__value_.__l.__data_, i + 4))
    {
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](i + 4, (const void **)&v23.__r_.__value_.__l.__data_))
      {
        v14 = *((unsigned int *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>((uint64_t **)this + 23, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&v23)+ 16);
        goto LABEL_22;
      }
      ++i;
    }
  }
  v8 = *((_DWORD *)this + 42);
  if (v8 <= 0)
    v9 = -(-v8 & 3);
  else
    v9 = *((_DWORD *)this + 42) & 3;
  if (v9)
  {
    v10 = (4 - v9);
    *((_DWORD *)this + 42) = v10 + v8;
    if (*((_BYTE *)this + 97))
    {
      objc_msgSend(*((id *)this + 11), "objectForKeyedSubscript:", &unk_1E2DEDB80);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "allValues");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = 0;
      std::vector<unsigned char>::vector(__p, v10, &v21);
      objc_msgSend(v13, "appendBytes:length:", __p[0], v10);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }

    }
    else
    {
      v19 = v9 - 5;
      while (!__CFADD__(v19++, 1))
      {
        if (fputc(0, *((FILE **)this + 22)) == -1)
          Espresso::throw_exception_selector<Espresso::io_error>("Error writing additional blob file");
      }
    }
  }
  v14 = *((unsigned int *)this + 42);
  *((_DWORD *)this + 42) = v14 + a3;
  if (*((_BYTE *)this + 97))
  {
    objc_msgSend(*((id *)this + 11), "objectForKeyedSubscript:", &unk_1E2DEDB80);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "allValues");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectAtIndexedSubscript:", 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "appendBytes:length:", a2, a3);
  }
  else if (fwrite(a2, a3, 1uLL, *((FILE **)this + 22)) != 1)
  {
    Espresso::throw_exception_selector<Espresso::io_error>("Error writing additional blob file");
  }
  *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>(v6, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&v23)+ 16) = v14;
LABEL_22:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1914D5ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::pair<std::string,unsigned long>,int>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,int>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long> const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  const void **v8;
  uint64_t **v9;
  char *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = (const void **)(v5 + 4);
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](a2, (const void **)v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v8, a2))
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (char *)operator new(0x48uLL);
    v11 = (std::string *)(v10 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *((_DWORD *)v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v6;
    *v9 = (uint64_t *)v10;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_1914D5C90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  return !v15 && a1[3] < a2[3];
}

Espresso::ANECompilerEngine::compiler::layer_graph_info_t *Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(Espresso::ANECompilerEngine::compiler::layer_graph_info_t *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_DWORD *)this + 26) = 1;
  *((_QWORD *)this + 14) = CFSTR("Float16");
  MEMORY[0x19401C808]((char *)this + 80, "Unassigned");
  return this;
}

void sub_1914D5E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,Espresso::elementwise_params &,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA248;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_1914D5EAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<Espresso::ANECompilerEngine::ane_kernel>::operator=[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,void>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = a2[1];
  if (*a2)
    v4 = *a2 + 336;
  else
    v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBDA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBDA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_ane_multi_head>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::throw_exception_selector<Espresso::generic_error,int &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>(a1, a2);
}

void ___ZN8Espresso17ANECompilerEngine8compiler10compile_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(Espresso *a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    Espresso::espresso_os_log_subsystem(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = a3;
      _os_log_error_impl(&dword_190DAF000, v4, OS_LOG_TYPE_ERROR, "ANECCompile() failed: statusdict=%@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void Espresso::ANECompilerEngine::compiler::build_state_t::prepare_additional_blob_file(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  FILE *v8;
  const char *v9;
  FILE *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;

  v8 = *(FILE **)(a2 + 176);
  if (v8)
    fclose(v8);
  if (*(char *)(a4 + 23) >= 0)
    v9 = (const char *)a4;
  else
    v9 = *(const char **)a4;
  v10 = fopen(v9, "wb");
  *(_QWORD *)(a2 + 176) = v10;
  if (!v10)
    Espresso::throw_exception_selector<Espresso::io_error>("Cannot open additional blob file");
  *(_DWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 172) = 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v24 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.force_single_weight_file"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    v14 = *a3;
    v15 = *(const void **)(v14 + 576);
    if (v15
    {
      v17 = v16;
      v18 = *(std::__shared_weak_count **)(v14 + 584);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v16 + 48))(v16) != 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("force_single_weight_file option is not supported with blob_v2 file format. Please dump espresso network to get blob_v1 file and use it along with above flag.");
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    if (fwrite(*((const void **)v17 + 9), *((_QWORD *)v17 + 10), 1uLL, *(FILE **)(a2 + 176)) != 1)
    {
      if (*(char *)(a4 + 23) >= 0)
        v23 = a4;
      else
        v23 = *(_QWORD *)a4;
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to file %s", v23);
    }
    *(_DWORD *)(a2 + 168) = *((_QWORD *)v17 + 10);
    *(_BYTE *)(a2 + 172) = 1;
    if (v18)
    {
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  *a1 = a2;

}

void sub_1914D6270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void `anonymous namespace'::write_to_dest(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  NSString *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  int v28;
  _anonymous_namespace_ *v29;
  const void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  NSString *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string *v42;
  __int128 v43;
  _anonymous_namespace_ **v44;
  std::string v45;
  std::string v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _anonymous_namespace_ *v49[2];
  void *v50;

  v10 = a5;
  switch(*(_DWORD *)a3)
  {
    case 0:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob storage type uninitialized.");
    case 1:
      v11 = v10;
      v14 = *(_QWORD *)(a3 + 8);
      v13 = a3 + 8;
      v12 = v14;
      if (*(char *)(v13 + 23) >= 0)
        v15 = v13;
      else
        v15 = v12;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)a4 + 23) >= 0)
        v17 = a4;
      else
        v17 = (uint64_t *)*a4;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v11);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:relativeToURL:", v16, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "removeItemAtPath:error:", v11, 0);

      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "copyItemAtURL:toURL:error:", v21, v19, 0);

      if ((v24 & 1) == 0)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed copying plist to file.");

      goto LABEL_27;
    case 2:
      v27 = *(_anonymous_namespace_ **)(a3 + 32);
      v26 = a3 + 32;
      v25 = v27;
      v28 = *(char *)(v26 + 23);
      if (v28 >= 0)
        v29 = (_anonymous_namespace_ *)v26;
      else
        v29 = v25;
      if (v28 >= 0)
        v30 = (const void *)*(unsigned __int8 *)(v26 + 23);
      else
        v30 = *(const void **)(v26 + 8);
      goto LABEL_28;
    case 3:
      v31 = a3 + 56;
      v11 = v10;
      v32 = (std::__shared_weak_count *)a2[1];
      v47 = *a2;
      v48 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
      (*(void (**)(_anonymous_namespace_ **__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 + 560) + 120))(v49, a1 + 560, &v47, a1, v31);
      v36 = v48;
      if (v48)
      {
        v37 = (unint64_t *)&v48->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (!v49[0])
      {
        std::operator+<char>();
        v39 = std::string::append(&v45, "' is not an existing raw blob");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v46.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v46;
        else
          v41 = (std::string *)v46.__r_.__value_.__r.__words[0];
        Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v41);
      }
LABEL_27:

LABEL_28:
      return;
    default:
      std::to_string(&v46, *(_DWORD *)a3);
      v42 = std::string::insert(&v46, 0, "Unsupported blob storage type. ");
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v50 = (void *)v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)v49 = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50) >= 0)
        v44 = v49;
      else
        v44 = (_anonymous_namespace_ **)v49[0];
      Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v44);
  }
}

void sub_1914D65C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  if (a30 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::starts_with(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;

  v4 = strlen(__s);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  return v5 >= v4 && std::string::compare((const std::string *)a1, 0, v4, __s) == 0;
}

void `anonymous namespace'::write_compilation_aux_file(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  char v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  _QWORD v33[2];
  _QWORD v34[3];
  _QWORD v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  v29 = v5;
  objc_msgSend(v5, "stringByAppendingFormat:", CFSTR("/%s_aux.json"), v6);
  v30 = (id)objc_claimAutoreleasedReturnValue();
  v31 = (void *)objc_opt_new();
  v32 = (void *)objc_opt_new();
  v7 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v8 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      v11 = *v7;
      v10 = (std::__shared_weak_count *)v7[1];
      v33[0] = *v7;
      v33[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (*(_DWORD *)(v11 + 8) == 10008)
        goto LABEL_24;
      v14 = (uint64_t *)(v11 + 40);
      v15 = *(char *)(v11 + 63);
      if (v15 < 0)
      {
        if (*(_QWORD *)(v11 + 48) != 16)
          goto LABEL_19;
        v16 = (uint64_t *)*v14;
      }
      else
      {
        v16 = (uint64_t *)(v11 + 40);
        if (v15 != 16)
          goto LABEL_19;
      }
      v18 = *v16;
      v17 = v16[1];
      if (v18 != 0x5F747865746E6F63 || v17 != 0x726566736E617274)
      {
LABEL_19:
        v34[0] = CFSTR("ilayer");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v35[0] = v20;
        v34[1] = CFSTR("name");
        v21 = (_QWORD *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v21 = (_QWORD *)*v21;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v35[1] = v22;
        v34[2] = CFSTR("type");
        if (*(char *)(v11 + 63) < 0)
          v14 = (uint64_t *)*v14;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v35[2] = v23;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 3);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "addObject:", v24);

      }
LABEL_24:
      if (v10)
      {
        v25 = (unint64_t *)&v10->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v9 = (v9 + 1);
      v7 += 2;
    }
    while (v7 != v8);
  }
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, CFSTR("unsupported"));
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v31, 1, 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "writeToFile:atomically:", v30, 1);

  if ((v28 & 1) == 0)
  {
    v33[0] = objc_msgSend(objc_retainAutorelease(v30), "UTF8String");
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Failed writing compiler aux file %s", v33);
  }

}

void sub_1914D6A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void append_weights_file_property(NSMutableDictionary *a1, NSString *a2, NSString *a3, NSNumber *a4)
{
  NSMutableDictionary *v5;
  NSString *v6;
  void *v7;
  void *v8;
  Espresso *v9;
  const char *v10;
  NSObject *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  -[NSMutableDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("WeightFileProperties"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, CFSTR("WeightFileProperties"));
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, v6);
  }
  v9 = (Espresso *)objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Encrypted"));
  Espresso::espresso_os_log_subsystem(v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v12 = 138412290;
    v13 = v7;
    _os_log_debug_impl(&dword_190DAF000, v11, OS_LOG_TYPE_DEBUG, "[compiler::append_weights_file_property] weights_file_properties %@", (uint8_t *)&v12, 0xCu);
  }

}

void sub_1914D6C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,NSString * {__strong}>(const char *a1)
{
  Espresso::throw_exception_with_format<Espresso::io_error>("Cannot serialize ANEC_IR_repr %s", a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*,NSString * {__strong}>(const char *a1, const char *a2)
{
  Espresso::throw_exception_with_format<Espresso::io_error>("Cannot write IR to %s. %s", a1, a2);
}

void `anonymous namespace'::write_data_to_dest(_anonymous_namespace_ *this, const void *a2, void *a3, NSString *a4)
{
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", this, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeItemAtPath:error:", v8, 0);

  if ((objc_msgSend(v6, "writeToFile:atomically:", v8, 1) & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed writing plist to file.");

}

void sub_1914D6D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::reset(Espresso::ANECompilerEngine::compiler *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  __int128 v44;

  v39 = 1065353216;
  v42 = 0u;
  memset(v38, 0, sizeof(v38));
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v41 = 0u;
  v44 = 0u;
  v40 = &v41;
  v43 = &v44;
  v31 = 0;
  v2 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;

  v3 = v32;
  *(_QWORD *)&v32 = 0;
  v4 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v3;

  v5 = *((_QWORD *)&v32 + 1);
  *((_QWORD *)&v32 + 1) = 0;
  v6 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v5;

  v7 = v33;
  *(_QWORD *)&v33 = 0;
  v8 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v7;

  v9 = *((_QWORD *)&v33 + 1);
  *((_QWORD *)&v33 + 1) = 0;
  v10 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v9;

  v11 = v34;
  *(_QWORD *)&v34 = 0;
  v12 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v11;

  v13 = *((_QWORD *)&v34 + 1);
  *((_QWORD *)&v34 + 1) = 0;
  v14 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v13;

  v15 = v35;
  *(_QWORD *)&v35 = 0;
  v16 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v15;

  v17 = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  v18 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v17;

  v19 = v36;
  *(_QWORD *)&v36 = 0;
  v20 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v19;

  v21 = *((_QWORD *)&v36 + 1);
  *((_QWORD *)&v36 + 1) = 0;
  v22 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v21;

  v23 = v37;
  *(_QWORD *)&v37 = 0;
  v24 = (void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v23;

  *((_WORD *)this + 112) = WORD4(v37);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign((uint64_t)this + 232, (uint64_t *)v38);
  v25 = (char *)this + 280;
  std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*((_QWORD **)this + 35));
  v26 = v41;
  *((_QWORD *)this + 34) = v40;
  *((_QWORD *)this + 35) = v26;
  v27 = *((_QWORD *)&v41 + 1);
  *((_QWORD *)this + 36) = *((_QWORD *)&v41 + 1);
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = v25;
    v40 = &v41;
    v41 = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 34) = v25;
  }
  *(_OWORD *)((char *)this + 296) = v42;
  v28 = (char *)this + 320;
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 40));
  v29 = v44;
  *((_QWORD *)this + 39) = v43;
  *((_QWORD *)this + 40) = v29;
  v30 = *((_QWORD *)&v44 + 1);
  *((_QWORD *)this + 41) = *((_QWORD *)&v44 + 1);
  if (v30)
  {
    *(_QWORD *)(v29 + 16) = v28;
    v43 = &v44;
    v44 = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 39) = v28;
  }
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t((Espresso::ANECompilerEngine::compiler::build_state_t *)&v31);
  *((_BYTE *)this + 225) = *((_BYTE *)this + 552);
}

void std::default_delete<Espresso::net_compiler_segment_based::segment_t>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 16);
  JUMPOUT(0x19401CD90);
}

void std::vector<std::unique_ptr<Espresso::net_compiler_segment_based::segment_t>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<Espresso::net_compiler_segment_based::segment_t>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void Espresso::ANECompilerEngine::compiler::build_wrapper(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t *i;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  char v27;
  void *v28;
  std::__shared_weak_count *v29;
  char v30;
  std::string v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v32 = 0;
  v33 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && (v33 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v32 = v5;
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v5 + 472, (uint64_t)&v28, (uint64_t)__p, &v31);
  if (v27 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v28);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) == 1)
    {
      v6 = &v31;
      goto LABEL_14;
    }
LABEL_34:
    Espresso::net_compiler_segment_based::build((_QWORD *)a1, a2);
    goto LABEL_35;
  }
  if (v31.__r_.__value_.__l.__size_ != 1)
    goto LABEL_34;
  v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
LABEL_14:
  if (v6->__r_.__value_.__s.__data_[0] != 49)
    goto LABEL_34;
  for (i = *(uint64_t **)(a1 + 432); i; i = (uint64_t *)*i)
  {
    v8 = (void *)i[5];
    v9 = (std::__shared_weak_count *)i[6];
    v28 = v8;
    v29 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
    std::string::operator=((std::string *)(a1 + 392), (const std::string *)(i + 2));
    *(_BYTE *)(a1 + 385) = 1;
    Espresso::net_compiler_segment_based::build((_QWORD *)a1, a2);
    v15 = v29;
    if (v29)
    {
      v16 = (unint64_t *)&v29->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v19 = v32;
  v18 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v18;
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
LABEL_35:
  *(_BYTE *)(a1 + 224) = 1;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1914D7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t(Espresso::ANECompilerEngine::compiler::build_state_t *this)
{
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24));
  std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::destroy(*((_QWORD **)this + 19));
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<Espresso::generic_tunneled_ane_op_kernel const>>>>::~__hash_table((uint64_t)this + 104);

}

void Espresso::ANECompilerEngine::CombineOptionsPlists(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  uint64_t *v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0C99E08];
  if (*((char *)a1 + 23) >= 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryWithContentsOfFile:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1E0C99E08];
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dictionaryWithContentsOfFile:", v11);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    if (*((char *)a1 + 23) >= 0)
      v23 = a1;
    else
      v23 = (uint64_t *)*a1;
    v32 = v23;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Error reading options plist at %s", &v32);
  }
  if (!v27)
  {
    if (*((char *)a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = (uint64_t *)*a2;
    v32 = v24;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Error reading options plist at %s", &v32);
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v12 = v27;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v29 != v14)
          objc_enumerationMutation(v12);
        v16 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(v8, "objectForKeyedSubscript:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectForKeyedSubscript:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "objectForKey:", CFSTR("ProcedureParams"));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19 == 0;

        if (!v20)
          Espresso::throw_exception_selector<Espresso::generic_error>("Procedures not supported in user-supplied options plist");
        if (v17)
          objc_msgSend(v17, "addEntriesFromDictionary:", v18);
        else
          objc_msgSend(v8, "setObject:forKey:", v18, v16);

      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v13);
  }

  if (*((char *)v26 + 23) >= 0)
    v21 = v26;
  else
    v21 = (uint64_t *)*v26;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "writeToFile:atomically:", v22, 1);

}

void sub_1914D783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::add_unit(Espresso::ANECompilerEngine::compiler *this, const Espresso::ANECompilerEngine::compiler::unit_t *a2)
{
  std::__shared_weak_count *v3;
  void *v5;
  std::string *p_p;
  char *v7;
  void *v8;
  std::string *v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  char *v13;
  char *i;
  void *v15;
  std::string *v16;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  const Espresso::ANECompilerEngine::compiler::unit_t *v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  Espresso *v28;
  const char *v29;
  NSObject *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  void *v35;
  std::runtime_error *exception;
  id v37;
  std::__shared_weak_count *v38;
  std::string __p;
  id v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v3 || (v38 = std::__shared_weak_count::lock(v3)) == 0 || !*((_QWORD *)this + 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (void *)MEMORY[0x1E0CB3940];
  Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, (char *)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v5, "stringWithUTF8String:", p_p);
  v37 = (id)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (char *)*((_QWORD *)a2 + 6);
  if (*((_QWORD *)a2 + 7) - (_QWORD)v7 == 24)
  {
    v8 = (void *)MEMORY[0x1E0CB3940];
    Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v8, "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (*((char *)v11 + 23) < 0)
      v11 = (uint64_t *)*v11;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = (void *)objc_opt_new();
    v12 = (void *)objc_opt_new();
    v13 = (char *)*((_QWORD *)a2 + 6);
    for (i = (char *)*((_QWORD *)a2 + 7); v13 != i; v13 += 24)
    {
      v15 = (void *)MEMORY[0x1E0CB3940];
      Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this + 336, v13, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v15, "stringWithUTF8String:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v17);

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v18 = v13;
      if (v13[23] < 0)
        v18 = *(char **)v13;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v19);

    }
  }
  v20 = (void *)objc_opt_new();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v10, CFSTR("Bottom"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v12, CFSTR("UnescapedBottom"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v37, CFSTR("Name"));
  if (*((char *)a2 + 23) >= 0)
    v21 = a2;
  else
    v21 = *(const Espresso::ANECompilerEngine::compiler::unit_t **)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v22, CFSTR("UnescapedName"));

  objc_msgSend(v20, "setObject:forKeyedSubscript:", *((_QWORD *)a2 + 15), CFSTR("Type"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", *((_QWORD *)a2 + 16), CFSTR("Params"));
  if (*((char *)a2 + 103) >= 0)
    v23 = (char *)a2 + 80;
  else
    v23 = (char *)*((_QWORD *)a2 + 10);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, CFSTR("EspressoLayerName"));

  if (*((int *)a2 + 35) >= 2)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v25, CFSTR("NumGroups"));

  }
  v26 = *((id *)a2 + 14);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v26, CFSTR("OutputType"));
  if (*((_DWORD *)a2 + 34))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v27, CFSTR("OutputChannels"));

  }
  v28 = (Espresso *)objc_msgSend(*((id *)this + 18), "addObject:", v37);
  Espresso::espresso_os_log_subsystem(v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    v33 = objc_msgSend(objc_retainAutorelease(v37), "UTF8String");
    v34 = objc_msgSend(*((id *)a2 + 15), "UTF8String");
    objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("EspressoLayerName"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v33;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v34;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
    v40 = v26;
    v41 = 2112;
    v42 = v35;
    _os_log_debug_impl(&dword_190DAF000, v30, OS_LOG_TYPE_DEBUG, "[ANECompilerEngine::compiler::add_unit] Adding unit %s of type %s %@  Espresso layer: %@ ", (uint8_t *)&__p, 0x2Au);

  }
  if (*((_BYTE *)this + 120))
  {
    objc_msgSend(*((id *)this + 24), "addObject:", v20);
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v37, CFSTR("Name"));
  }
  else
  {
    objc_msgSend(*((id *)this + 17), "setObject:forKeyedSubscript:", v20, v37);
  }

  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
}

void sub_1914D7DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator(Espresso::ANECompilerEngine::ane_name_translator *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD *)this + 4));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this, *((_QWORD *)this + 1));
}

uint64_t Espresso::ANECompilerEngine::compiler::compiler(uint64_t a1, const Espresso::net **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t *v5;
  _OWORD *v6;
  const Espresso::net *v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const Espresso::net *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  const Espresso::net *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *i;
  const void *v29;
  void *v30;
  const Espresso::net *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  char v40;
  std::string *p_p;
  _QWORD *v42;
  Espresso *v43;
  const char *v44;
  _QWORD *v45;
  const void **v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type size;
  int v52;
  std::string *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  BOOL v61;
  _BOOL4 v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t *v71;
  char **v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char **v77;
  BOOL v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  const void *v93;
  void *v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  size_t v100;
  std::string *v101;
  const void *v102;
  int v103;
  const std::string::value_type *v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  Espresso::DTypeConverter *v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  const void *v118;
  unint64_t *v119;
  unint64_t v120;
  std::runtime_error *exception;
  uint64_t v123;
  uint64_t **v124;
  uint64_t **v125;
  _QWORD *v126;
  uint64_t v127;
  __int128 v128;
  std::string __p;
  __int128 v130;
  uint64_t *v131[3];
  __int128 *v132;
  std::string v133;
  char **v134;
  char *v135[3];
  __int128 v136;
  char v137;
  char *v138[6];

  v3 = a1;
  v138[3] = *(char **)MEMORY[0x1E0C80C00];
  v4 = 0uLL;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)a1 = &off_1E2D7D690;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (_OWORD *)(a1 + 104);
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_DWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  v124 = (uint64_t **)(a1 + 336);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_WORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 544) = 1065353216;
  *(_BYTE *)(a1 + 552) = 0;
  v7 = *a2;
  v8 = (const void *)*((_QWORD *)*a2 + 2);
  if (v8
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = *(std::__shared_weak_count **)(v3 + 112);
    *(_OWORD *)(v3 + 104) = v4;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    *v6 = v4;
  }
  v16 = *a2;
  v17 = a2[1];
  if (v17)
  {
    v18 = (unint64_t *)((char *)v17 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v127 = (uint64_t)v6 + 312;
  v20 = *(std::__shared_weak_count **)(v3 + 16);
  *(_QWORD *)(v3 + 8) = v16;
  *(_QWORD *)(v3 + 16) = v17;
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = *(_BYTE *)(*(_QWORD *)(v3 + 104) + 123);
  *(_BYTE *)(v3 + 552) = v21;
  *(_BYTE *)(v3 + 225) = v21;
  v22 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating compiler");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (getenv("ESPRESSO_ANEC_USE_LISTS"))
    *(_BYTE *)(v3 + 120) = 1;
  if (getenv("ESPRESSO_ANEC_USE_FUSE_CONV_VERTICAL"))
    *(_BYTE *)(v3 + 121) = 1;
  v23 = (std::__shared_weak_count *)a2[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table(v124, v22);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  for (i = (_QWORD *)*((_QWORD *)*a2 + 19); i; i = (_QWORD *)*i)
  {
    v29 = (const void *)i[5];
    if (v29)
    {
      if (v30)
      {
        v31 = *a2;
        v32 = (std::__shared_weak_count *)a2[1];
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v30, v31, v32);
        if (v32)
        {
          v35 = (unint64_t *)&v32->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
  }
  v37 = *(std::__shared_weak_count **)(v3 + 16);
  if (v37)
  {
    v38 = std::__shared_weak_count::lock(v37);
    if (v38)
      v39 = *v5;
    else
      v39 = 0;
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(&v136, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v39 + 472, (uint64_t)&v133, (uint64_t)&v136, &__p);
  if (v137 < 0)
    operator delete((void *)v136);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != 1)
      goto LABEL_184;
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_185;
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] != 49)
    goto LABEL_182;
  v123 = v3;
  std::string::basic_string[abi:ne180100]<0>(&v133, "default");
  *(_QWORD *)&v136 = &v133;
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v127, (unsigned __int8 *)&v133, (__int128 **)&v136);
  v43 = (Espresso *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v42 + 5, v39, (uint64_t)v38);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  v125 = (uint64_t **)(v39 + 776);
  v45 = *(_QWORD **)(v39 + 776);
  v126 = (_QWORD *)(v39 + 784);
  if (v45 == (_QWORD *)(v39 + 784))
    goto LABEL_181;
  do
  {
    v46 = (const void **)(v45 + 4);
    Espresso::espresso_os_log_subsystem(v43, v44);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      v118 = v45 + 4;
      if (*((char *)v45 + 55) < 0)
        v118 = *v46;
      LODWORD(v133.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "per_network_configuration config=%s", (uint8_t *)&v133, 0xCu);
    }

    Espresso::reload_network_layers((Espresso *)v39, (uint64_t *)&v128);
    v48 = *(_QWORD *)(v39 + 1368);
    if (v48)
      Espresso::multi_head_aot_helper_t::remove_unused_layers(v48, (Espresso::net *)v128, v45 + 4);
    std::string::basic_string[abi:ne180100]<0>(&v133, "default");
    v49 = *((unsigned __int8 *)v45 + 55);
    if ((v49 & 0x80u) == 0)
      v50 = *((unsigned __int8 *)v45 + 55);
    else
      v50 = v45[5];
    size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    v52 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v133.__r_.__value_.__l.__size_;
    if (v50 == size)
    {
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v133;
      else
        v53 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if ((v49 & 0x80) != 0)
      {
        v62 = memcmp(*v46, v53, v45[5]) == 0;
        if (v52 < 0)
          goto LABEL_90;
      }
      else if (*((_BYTE *)v45 + 55))
      {
        v54 = v49 - 1;
        v55 = (unsigned __int8 *)(v45 + 4);
        do
        {
          v57 = *v55++;
          v56 = v57;
          v59 = v53->__r_.__value_.__s.__data_[0];
          v53 = (std::string *)((char *)v53 + 1);
          v58 = v59;
          v61 = v54-- != 0;
          v62 = v56 == v58;
        }
        while (v56 == v58 && v61);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_90:
          operator delete(v133.__r_.__value_.__l.__data_);
          if (v62)
          {
LABEL_81:
            v63 = v128;
            if (*((_QWORD *)&v128 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
            }
            Espresso::shape_network_recursive((Espresso *)v63, (Espresso::net *)(v39 + 184), 0, 0);
            if (*((_QWORD *)&v63 + 1))
            {
              v66 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v63 + 1) + 16))(*((_QWORD *)&v63 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
              }
            }
            goto LABEL_130;
          }
          goto LABEL_91;
        }
      }
      else
      {
        v62 = 1;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_90;
      }
    }
    else
    {
      v62 = 0;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_90;
    }
    if (v62)
      goto LABEL_81;
LABEL_91:
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v131, (__int128 **)(v39 + 824));
    v68 = v128;
    v69 = *(_QWORD **)(v128 + 784);
    if (!v69)
    {
LABEL_96:
      *(_QWORD *)&v136 = v45 + 4;
      v70 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v125, v45 + 4, (__int128 **)&v136);
      goto LABEL_102;
    }
    while (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45 + 4, v69 + 4))
    {
LABEL_95:
      v69 = (_QWORD *)*v69;
      if (!v69)
        goto LABEL_96;
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v69 + 4, v45 + 4))
    {
      ++v69;
      goto LABEL_95;
    }
    *(_QWORD *)&v136 = v45 + 4;
    v70 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v68 + 776), v45 + 4, (__int128 **)&v136);
LABEL_102:
    v71 = v70;
    memset(&v133, 0, sizeof(v133));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v133, v70[7], v70[8], 0xAAAAAAAAAAAAAAABLL * ((v70[8] - v70[7]) >> 3));
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v134, (__int128 **)v71 + 10);
    v72 = v134;
    if (v134 != v135)
    {
      do
      {
        *(_QWORD *)&v130 = v72 + 4;
        v73 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v131, v72 + 4, (__int128 **)&v130);
        v74 = *(_OWORD *)(v72 + 7);
        v75 = *(_OWORD *)(v72 + 9);
        *((_QWORD *)v73 + 11) = v72[11];
        *(_OWORD *)(v73 + 72) = v75;
        *(_OWORD *)(v73 + 56) = v74;
        if (v72 != (char **)v73)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v73 + 96, v72[12], (uint64_t)v72[13], (v72[13] - v72[12]) >> 2);
        v76 = v72[1];
        if (v76)
        {
          do
          {
            v77 = (char **)v76;
            v76 = *(char **)v76;
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (char **)v72[2];
            v78 = *v77 == (char *)v72;
            v72 = v77;
          }
          while (!v78);
        }
        v72 = v77;
      }
      while (v77 != v135);
    }
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    v130 = v128;
    if (*((_QWORD *)&v128 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v130, (uint64_t)v131, (uint64_t)&v136);
    if (v79)
    {
      v82 = (unint64_t *)&v79->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v84 = v128;
    if (*((_QWORD *)&v128 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    Espresso::shape_network_recursive((Espresso *)v84, (Espresso::net *)&v136, 0, 0);
    if (*((_QWORD *)&v84 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
      }
    }
    v132 = (__int128 *)(v45 + 4);
    v89 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v125, v45 + 4, &v132);
    v90 = v128;
    if ((uint64_t *)(v128 + 800) != v89 + 7)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v128 + 800, (std::string *)v89[7], (std::string *)v89[8], 0xAAAAAAAAAAAAAAABLL * ((v89[8] - v89[7]) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v90 + 824), (__int128 *)v89[10], (__int128 *)(v89 + 11));
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v138, v138[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v136, *((char **)&v136 + 1));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v134, v135[0]);
    *(_QWORD *)&v136 = &v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v131, (char *)v131[1]);
LABEL_130:
    v91 = v128;
    v92 = *(_QWORD **)(v128 + 152);
    if (v92)
    {
      do
      {
        v93 = (const void *)v92[5];
        if (v93)
        {
          if (v94)
          {
            v95 = v128;
            if (*((_QWORD *)&v128 + 1))
            {
              v96 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v94, (const Espresso::net *)v95, *((std::__shared_weak_count **)&v95 + 1));
            if (*((_QWORD *)&v95 + 1))
            {
              v98 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
              }
            }
          }
        }
        v92 = (_QWORD *)*v92;
      }
      while (v92);
      v91 = v128;
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v91 + 776, *(char **)(v91 + 784));
    *(_QWORD *)(v91 + 776) = v91 + 784;
    *(_QWORD *)(v91 + 792) = 0;
    *(_QWORD *)(v91 + 784) = 0;
    if (*(char *)(v39 + 447) >= 0)
      v100 = *(unsigned __int8 *)(v39 + 447);
    else
      v100 = *(_QWORD *)(v39 + 432);
    std::string::basic_string[abi:ne180100]((uint64_t)&v133, v100 + 1);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &v133;
    else
      v101 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if (v100)
    {
      if (*(char *)(v39 + 447) >= 0)
        v102 = (const void *)(v39 + 424);
      else
        v102 = *(const void **)(v39 + 424);
      memmove(v101, v102, v100);
    }
    *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v100) = 95;
    v103 = *((char *)v45 + 55);
    if (v103 >= 0)
      v104 = (const std::string::value_type *)(v45 + 4);
    else
      v104 = (const std::string::value_type *)v45[4];
    if (v103 >= 0)
      v105 = *((unsigned __int8 *)v45 + 55);
    else
      v105 = v45[5];
    v106 = std::string::append(&v133, v104, v105);
    v107 = v106->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v136 = v106->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v136 + 7) = *(std::string::size_type *)((char *)&v106->__r_.__value_.__r.__words[1] + 7);
    v108 = HIBYTE(v106->__r_.__value_.__r.__words[2]);
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    v109 = v128;
    if (*(char *)(v128 + 447) < 0)
      operator delete(*(void **)(v128 + 424));
    v110 = v136;
    *(_QWORD *)(v109 + 424) = v107;
    *(_QWORD *)(v109 + 432) = v110;
    *(_QWORD *)(v109 + 439) = *(_QWORD *)((char *)&v136 + 7);
    *(_BYTE *)(v109 + 447) = v108;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(*(_QWORD *)(v39 + 16) + 127))
    {
      v111 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&v133, (Espresso::net *)v128);
      Espresso::DTypeConverter::PrepareNetworkForConversion(v111);
      std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)&v133.__r_.__value_.__r.__words[2]);
    }
    *(_QWORD *)&v136 = v45 + 4;
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v127, (uint64_t)(v45 + 4), (uint64_t)&std::piecewise_construct, (__int128 **)&v136);
    v43 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v112 + 5), &v128);
    v113 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v114 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = (_QWORD *)v45[1];
    if (v116)
    {
      do
      {
        v117 = v116;
        v116 = (_QWORD *)*v116;
      }
      while (v116);
    }
    else
    {
      do
      {
        v117 = (_QWORD *)v45[2];
        v78 = *v117 == (_QWORD)v45;
        v45 = v117;
      }
      while (!v78);
    }
    v45 = v117;
  }
  while (v117 != v126);
LABEL_181:
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)v125, *(char **)(v39 + 784));
  *(_QWORD *)(v39 + 776) = v126;
  *(_OWORD *)(v39 + 784) = 0u;
  v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v3 = v123;
LABEL_182:
  if (v40 < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_184:
    operator delete(p_p);
  }
LABEL_185:
  if (v38)
  {
    v119 = (unint64_t *)&v38->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v3;
}

void sub_1914D8B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, Espresso::ANECompilerEngine::compiler::build_state_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37)
{
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;

  v40 = v37;
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  if (a33 < 0)
    operator delete(__p);
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a12 + 512);
  if (*(char *)(a12 + 479) < 0)
    operator delete(*(void **)(v38 + 352));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a25);
  if (*(char *)(a12 + 415) < 0)
    operator delete(*(void **)(v38 + 288));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v38 + 256, *(_QWORD *)(a12 + 368));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16, *(_QWORD *)(a12 + 344));
  Espresso::ANECompilerEngine::compiler::build_state_t::~build_state_t(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38);
  *(_QWORD *)a12 = off_1E2D94680;
  v44 = *(void **)(a12 + 80);
  if (v44)
  {
    *(_QWORD *)(a12 + 88) = v44;
    operator delete(v44);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a13, *(_QWORD **)(a12 + 64));
  *(_QWORD *)(v39 - 208) = a14;
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 208));
  *(_QWORD *)a12 = off_1E2D5FD08;
  v45 = *(std::__shared_weak_count **)(a12 + 16);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

id *Espresso::ANECompilerEngine::compiler::unit_t::unit_t(id *this, id *a2)
{
  std::string *v4;

  v4 = (std::string *)Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)this, (std::string *)(a2 + 10));
  v4[5].__r_.__value_.__r.__words[0] = 0;
  v4[5].__r_.__value_.__l.__size_ = 0;
  v4[5].__r_.__value_.__r.__words[2] = 0x100000000;
  std::string::operator=(v4, (const std::string *)a2);
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(this + 3), (std::string *)a2[3], (std::string *)a2[4], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[4] - (_BYTE *)a2[3]) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(this + 6), (std::string *)a2[6], (std::string *)a2[7], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[7] - (_BYTE *)a2[6]) >> 3));
  }
  objc_storeStrong(this + 14, a2[14]);
  return this;
}

void sub_1914D8FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 103) < 0)
    operator delete(*(void **)(v10 + 80));
  a10 = (void **)(v10 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel::~scatter_nd_kernel(Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel::is_valid_for_engine()
{
  return 0;
}

const char *Espresso::generic_scatter_nd_kernel::kernel_type_str(Espresso::generic_scatter_nd_kernel *this)
{
  return "scatter_nd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::scatter_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSGraphEngine::Kernels::one_hot_kernel::~one_hot_kernel(Espresso::MPSGraphEngine::Kernels::one_hot_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::one_hot_kernel::is_valid_for_engine()
{
  return 0;
}

BOOL Espresso::generic_one_hot_kernel::has_dynamic_top_shape(Espresso::generic_one_hot_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

const char *Espresso::generic_one_hot_kernel::kernel_type_str(Espresso::generic_one_hot_kernel *this)
{
  return "one_hot";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::one_hot_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void H12ACCPHeuristics::~H12ACCPHeuristics(H12ACCPHeuristics *this)
{
  H12ACCPHeuristics::~H12ACCPHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56398;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float H12ACCPHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float H12ACCPHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float H12ACCPHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float H12ACCPHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ACCPHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ACCPHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.0);
}

float H12ACCPHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.0);
}

float H12ACCPHeuristics::get_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  float v5;

  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (a3 == 1)
  {
    v5 = 8.0;
    if (!v4)
      goto LABEL_3;
  }
  else
  {
    v5 = 4.0;
    if (!v4)
LABEL_3:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(unint64_t)(float)((float)(*((float *)v4 + 5) * v5) * 3.0);
}

uint64_t H12ACCPHeuristics::get_highest_device_pstate(H12ACCPHeuristics *this)
{
  return 7;
}

float H12ACCPHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

uint64_t H12ACCPHeuristics::get_num_cores(H12ACCPHeuristics *this)
{
  return 2;
}

uint64_t H12ACCPHeuristics::get_llc_size(H12ACCPHeuristics *this)
{
  return 0x800000;
}

uint64_t H12ACCPHeuristics::get_l1_cache_size(H12ACCPHeuristics *this)
{
  return 128;
}

float H12ACCPHeuristics::get_amx_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  float v5;

  v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (a3 != 1)
  {
    if (v4)
    {
      v5 = 256.0;
      return (float)(*((float *)v4 + 5) * 0.5) * v5;
    }
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!v4)
    goto LABEL_7;
  v5 = 512.0;
  return (float)(*((float *)v4 + 5) * 0.5) * v5;
}

uint64_t H12ACCPHeuristics::get_neon_simd_reg_count(H12ACCPHeuristics *this)
{
  return 384;
}

uint64_t H12ACCPHeuristics::get_neon_alu_count(H12ACCPHeuristics *this)
{
  return 3;
}

uint64_t H12ACCPHeuristics::get_neon_sfu_count(H12ACCPHeuristics *this)
{
  return 1;
}

uint64_t H12ACCPHeuristics::get_amx_reg_count(H12ACCPHeuristics *this)
{
  return 8;
}

uint64_t H12ACCPHeuristics::get_amx_reg_width(H12ACCPHeuristics *this)
{
  return 64;
}

uint64_t H12ACCPHeuristics::get_amx_fp16_ops_per_clock(H12ACCPHeuristics *this)
{
  return 512;
}

uint64_t H12ACCPHeuristics::get_amx_fp32_ops_per_clock(H12ACCPHeuristics *this)
{
  return 256;
}

void newpACCPHeuristics::~newpACCPHeuristics(newpACCPHeuristics *this)
{
  newpACCPHeuristics::~newpACCPHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56BE8;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float newpACCPHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float newpACCPHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float newpACCPHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpACCPHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.0);
}

float newpACCPHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

uint64_t newpACCPHeuristics::get_num_cores(newpACCPHeuristics *this)
{
  return 2;
}

uint64_t newpACCPHeuristics::get_llc_size(newpACCPHeuristics *this)
{
  return 0x800000;
}

uint64_t newpACCPHeuristics::get_l1_cache_size(newpACCPHeuristics *this)
{
  return 128;
}

uint64_t newpACCPHeuristics::get_neon_simd_reg_count(newpACCPHeuristics *this)
{
  return 448;
}

uint64_t newpACCPHeuristics::get_neon_alu_count(newpACCPHeuristics *this)
{
  return 3;
}

uint64_t newpACCPHeuristics::get_neon_sfu_count(newpACCPHeuristics *this)
{
  return 1;
}

uint64_t newpACCPHeuristics::get_amx_reg_count(newpACCPHeuristics *this)
{
  return 8;
}

uint64_t newpACCPHeuristics::get_amx_reg_width(newpACCPHeuristics *this)
{
  return 64;
}

uint64_t newpACCPHeuristics::get_amx_fp16_ops_per_clock(newpACCPHeuristics *this)
{
  return 512;
}

uint64_t newpACCPHeuristics::get_amx_fp32_ops_per_clock(newpACCPHeuristics *this)
{
  return 256;
}

uint64_t Espresso::quantized_weights_helper::quantized_weights_helper(uint64_t result, _QWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  v8 = a2[1];
  *(_QWORD *)(result + 112) = *a2;
  *(_QWORD *)(result + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(result + 128) = a3;
  *(_DWORD *)(result + 132) = a4;
  *(_DWORD *)(result + 136) = a5;
  *(_DWORD *)(result + 140) = a6;
  *(_DWORD *)(result + 144) = a7;
  *(_DWORD *)(result + 148) = a8;
  *(_BYTE *)(result + 152) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 156) = 0;
  *(_BYTE *)(result + 164) = 0;
  return result;
}

{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  v8 = a2[1];
  *(_QWORD *)(result + 112) = *a2;
  *(_QWORD *)(result + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(result + 128) = a3;
  *(_DWORD *)(result + 132) = a4;
  *(_DWORD *)(result + 136) = a5;
  *(_DWORD *)(result + 140) = a6;
  *(_DWORD *)(result + 144) = a7;
  *(_DWORD *)(result + 148) = a8;
  *(_BYTE *)(result + 152) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 156) = 0;
  *(_BYTE *)(result + 164) = 0;
  return result;
}

void Espresso::swap_zero_to_first_position_anec_format(Espresso *this, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned int v8;
  double v9;
  size_t v10;
  int v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  void *v31;
  char *v32;
  char *v33;
  char v34;
  int i;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  void *v42;
  char *v43;
  _BYTE *v44;
  char *v45;
  char v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  Espresso *v53;
  const char *v54;
  NSObject *v55;
  void *v56;
  __int128 *p_buf;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 v60;
  uint64_t v61;
  void *__p;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  __int128 buf;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;

  v8 = a2;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = exp2((double)(unint64_t)a5);
  __p = 0;
  v66 = 0;
  v67 = 0;
  if (a6)
    v10 = 2 * v8;
  else
    v10 = v8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, v10);
  if (v8)
  {
    v11 = 0;
    v12 = v66;
    do
    {
      if (v12 >= v67)
      {
        v14 = (unint64_t)__p;
        v15 = v12 - (_BYTE *)__p;
        v16 = v12 - (_BYTE *)__p + 1;
        if (v16 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v17 = v67 - (_BYTE *)__p;
        if (2 * (v67 - (_BYTE *)__p) > (unint64_t)v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v19[v15];
        v21 = &v19[v15];
        *v21 = 0;
        v13 = v21 + 1;
        if (v12 != (char *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (char *)v14);
          v12 = (char *)__p;
          v20 = v19;
        }
        __p = v20;
        v66 = v13;
        v67 = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = 0;
        v13 = v12 + 1;
      }
      v66 = v13;
      ++v11;
      v12 = v13;
    }
    while (v11 != v8);
  }
  if ((a6 & 1) != 0)
  {
    v24 = v66;
    if (v66 >= v67)
    {
      v26 = (unint64_t)__p;
      v27 = v66 - (_BYTE *)__p;
      v28 = v66 - (_BYTE *)__p + 1;
      if (v28 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v29 = v67 - (_BYTE *)__p;
      if (2 * (v67 - (_BYTE *)__p) > (unint64_t)v28)
        v28 = 2 * v29;
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
        v30 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
        v31 = operator new(v30);
      else
        v31 = 0;
      v32 = (char *)v31 + v30;
      *((_BYTE *)v31 + v27) = 0x80;
      v25 = (char *)v31 + v27 + 1;
      if (v24 == (char *)v26)
      {
        v31 = (char *)v31 + v27;
      }
      else
      {
        v33 = &v24[~v26];
        do
        {
          v34 = *--v24;
          (v33--)[(_QWORD)v31] = v34;
        }
        while (v24 != (char *)v26);
        v24 = (char *)__p;
      }
      __p = v31;
      v66 = v25;
      v67 = v32;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v66 = 0x80;
      v25 = v24 + 1;
    }
    v66 = v25;
    if (v8 >= 2)
    {
      for (i = 1; i != v8; ++i)
      {
        if (v25 >= v67)
        {
          v37 = (unint64_t)__p;
          v38 = v25 - (_BYTE *)__p;
          v39 = v25 - (_BYTE *)__p + 1;
          if (v39 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v40 = v67 - (_BYTE *)__p;
          if (2 * (v67 - (_BYTE *)__p) > (unint64_t)v39)
            v39 = 2 * v40;
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
            v41 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
            v42 = operator new(v41);
          else
            v42 = 0;
          v43 = (char *)v42 + v38;
          v44 = (char *)v42 + v38;
          *v44 = 0;
          v36 = v44 + 1;
          if (v25 == (char *)v37)
          {
            __p = v43;
            v66 = v36;
            v67 = (char *)v42 + v41;
          }
          else
          {
            v45 = &v25[~v37];
            do
            {
              v46 = *--v25;
              (v45--)[(_QWORD)v42] = v46;
            }
            while (v25 != (char *)v37);
            v25 = (char *)__p;
            __p = v42;
            v66 = v36;
            v67 = (char *)v42 + v41;
            if (!v25)
              goto LABEL_63;
          }
          operator delete(v25);
        }
        else
        {
          *v25 = 0;
          v36 = v25 + 1;
        }
LABEL_63:
        v66 = v36;
        v25 = v36;
      }
    }
  }
  v47 = (unint64_t)(v9 * (double)v8);
  v48 = (char *)__p;
  if (!v47)
    goto LABEL_99;
  v49 = 0;
  v50 = v66;
  v51 = v66 - (_BYTE *)__p;
  while (v50 == v48)
  {
LABEL_70:
    v49 += v8;
    if (v49 >= v47)
      goto LABEL_99;
  }
  v52 = 0;
  while (1)
  {
    v53 = (Espresso *)memcmp((char *)this + v49, &v48[v52], v8);
    if (!(_DWORD)v53)
      break;
    v52 += v8;
    if (v51 <= v52)
      goto LABEL_70;
  }
  if (!v49 || v49 >= v47)
    goto LABEL_99;
  Espresso::espresso_os_log_subsystem(v53, v54);
  v55 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v49 / v8;
    _os_log_debug_impl(&dword_190DAF000, v55, OS_LOG_TYPE_DEBUG, "swap_zero_to_first_position_anec_format: %zu", (uint8_t *)&buf, 0xCu);
  }

  memcpy((char *)this + v49, this, v8);
  memcpy(this, __p, v8);
  switch((char)a5)
  {
    case 1:
      v56 = Espresso::bit_packer::anec_bit_at;
      goto LABEL_83;
    case 2:
      v56 = Espresso::bit_packer::anec_uint2_at;
      goto LABEL_83;
    case 4:
      v56 = Espresso::bit_packer::anec_uint4_at;
      goto LABEL_83;
    case 6:
      v56 = Espresso::bit_packer::anec_uint6_at;
      goto LABEL_83;
    case 8:
      v56 = Espresso::bit_packer::anec_uint8_at;
LABEL_83:
      *(_QWORD *)&buf = &off_1E2DAD2A8;
      *((_QWORD *)&buf + 1) = v56;
      break;
    default:
      *(_QWORD *)&buf = &off_1E2DAC9B8;
      *((_QWORD *)&buf + 1) = Espresso::bit_packer::anec_value_at;
      v71 = a5;
      break;
  }
  p_buf = &buf;
  v72 = &buf;
  if (!a4)
  {
    v61 = 4;
LABEL_97:
    (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v61))();
    goto LABEL_98;
  }
  v58 = 0;
  p_buf = &buf;
  do
  {
    v68 = a3;
    v69 = v58;
    if (!p_buf)
      std::__throw_bad_function_call[abi:ne180100]();
    v59 = (*(uint64_t (**)(__int128 *, unsigned __int8 **, uint64_t *))(*(_QWORD *)p_buf + 48))(p_buf, &v69, &v68);
    v60 = v49 / v8;
    if (v59)
    {
      if (v49 / v8 != v59)
        goto LABEL_91;
      v60 = 0;
    }
    Espresso::bit_packer::set_pack_starts_from_lsb_val(a3, (unsigned __int8 *)v60, (uint64_t)v58, a5);
LABEL_91:
    ++v58;
    p_buf = v72;
  }
  while (a4 != v58);
  if (v72 == &buf)
  {
    v61 = 4;
    p_buf = &buf;
    goto LABEL_97;
  }
  if (v72)
  {
    v61 = 5;
    goto LABEL_97;
  }
LABEL_98:
  v48 = (char *)__p;
LABEL_99:
  if (v48)
  {
    v66 = v48;
    operator delete(v48);
  }
}

void sub_1914D9C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d(uint64_t *a1, uint64_t a2, double a3, double a4, float a5)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  float *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  float *v40;
  int v41;
  int v42;
  float *v43;
  float *v44;
  char *v45;
  std::__shared_weak_count *v46;

  v5 = *((_DWORD *)a1 + 40);
  if (v5 >= 1 && (v6 = a1[2]) != 0)
  {
    v7 = (std::__shared_weak_count *)a1[3];
    v46 = v7;
    if (!v7)
      goto LABEL_11;
  }
  else
  {
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v46 = v7;
    if (!v7)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v5 = *((_DWORD *)a1 + 40);
LABEL_9:
  if (v5 <= 0)
    v5 = *((_DWORD *)a1 + 39);
LABEL_11:
  if (a1[6] || a1[8] || a1[4])
  {
    v10 = a1[4];
    if (!v10)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    v11 = *(float **)(*(_QWORD *)a2 + 24);
    v12 = *(unsigned __int8 **)(v6 + 16);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = a1[10];
    v15 = (std::__shared_weak_count *)a1[11];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = a1[12];
    v19 = (std::__shared_weak_count *)a1[13];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    dequantize_uint_per_channel_lut<float>(v11, v12, v13, v14, v18, *((_DWORD *)a1 + 32), *((_DWORD *)a1 + 33), *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), v5, *((_DWORD *)a1 + 36));
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v15)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_29;
    }
  }
  else
  {
    if (v5 == 8 && !*((_DWORD *)a1 + 36))
    {
      v40 = *(float **)(*(_QWORD *)a2 + 24);
      v41 = *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34);
      v42 = v41 * *((_DWORD *)a1 + 35);
      v43 = *(float **)(a1[10] + 16);
      v44 = *(float **)(a1[12] + 16);
      v45 = *(char **)(v6 + 16);
      if (*((_BYTE *)a1 + 164))
        Espresso::range_quantizer<signed char>::dequantize_chunks(v40, v42, v41, v43, v44, v45);
      else
        Espresso::range_quantizer<unsigned char>::dequantize_chunks(v40, v42, v41, v43, v44, (unsigned __int8 *)v45);
      goto LABEL_31;
    }
    v28 = *(float **)(*(_QWORD *)a2 + 24);
    v29 = *(_BYTE **)(v6 + 16);
    v30 = a1[10];
    v15 = (std::__shared_weak_count *)a1[11];
    if (v15)
    {
      v31 = (unint64_t *)&v15->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = a1[12];
    v34 = (std::__shared_weak_count *)a1[13];
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    dequantize_uint_per_channel_linear<float>(v28, v29, v30, v33, *((_DWORD *)a1 + 32), *((_DWORD *)a1 + 33), *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), a3, a4, a5, v5, *((_DWORD *)a1 + 36), *((_BYTE *)a1 + 164));
    if (v34)
    {
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v15)
    {
      v39 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v39);
      while (__stlxr(v25 - 1, v39));
LABEL_29:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_31:
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1914DA050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::range_quantizer<unsigned char>::dequantize_chunks(float *__C, int a2, int a3, float *a4, float *a5, unsigned __int8 *__A)
{
  float *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  vDSP_Length v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float __B;

  v10 = __C;
  vDSP_vfltu8(__A, 1, __C, 1, a2);
  v20 = a3;
  v11 = (a2 - 1) / a3;
  if ((v11 & 0x80000000) == 0)
  {
    v12 = 0;
    v13 = (v11 + 1);
    v14 = a2;
    do
    {
      v15 = a3;
      if (v14 < a3)
        v15 = v14;
      v16 = v15 + v12;
      v17 = *a4++;
      v18 = v17;
      v19 = *a5++;
      v21 = v19;
      __B = v18;
      vDSP_vsmul(v10, 1, &__B, v10, 1, v15 + v12);
      vDSP_vsadd(v10, 1, &v21, v10, 1, v16);
      a3 += v20;
      v12 -= v20;
      v10 += v20;
      --v13;
    }
    while (v13);
  }
}

void Espresso::range_quantizer<signed char>::dequantize_chunks(float *__C, int a2, int a3, float *a4, float *a5, char *__A)
{
  float *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  vDSP_Length v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float __B;

  v10 = __C;
  vDSP_vflt8(__A, 1, __C, 1, a2);
  v20 = a3;
  v11 = (a2 - 1) / a3;
  if ((v11 & 0x80000000) == 0)
  {
    v12 = 0;
    v13 = (v11 + 1);
    v14 = a2;
    do
    {
      v15 = a3;
      if (v14 < a3)
        v15 = v14;
      v16 = v15 + v12;
      v17 = *a4++;
      v18 = v17;
      v19 = *a5++;
      v21 = v19;
      __B = v18;
      vDSP_vsmul(v10, 1, &__B, v10, 1, v15 + v12);
      vDSP_vsadd(v10, 1, &v21, v10, 1, v16);
      a3 += v20;
      v12 -= v20;
      v10 += v20;
      --v13;
    }
    while (v13);
  }
}

float *dequantize_uint_per_channel_linear<float>(float *result, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, double a9, double a10, float a11, int a12, int a13, char a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  float v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  char v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  float v52;
  float v53;
  _BYTE *v54;
  unint64_t v55;
  char v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  char v67;
  unsigned int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v14 = (a6 * a5);
  if (!a13)
  {
    if (a8 < 1)
      return result;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = (v14 * a7);
    v50 = (int)v49;
    v77 = a8;
    v78 = v49;
    v75 = a12 * a7 * a6 * a5;
    v76 = 4 * (int)v49;
    v74 = a12 * (uint64_t)(int)v49;
    v51 = a2;
    while (1)
    {
      if (a3)
      {
        v52 = *(float *)(*(_QWORD *)(a3 + 16) + 4 * v48);
        if (!a4)
          goto LABEL_47;
      }
      else
      {
        v52 = 1.0;
        if (!a4)
        {
LABEL_47:
          v53 = 0.0;
          goto LABEL_48;
        }
      }
      v53 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v48);
LABEL_48:
      v54 = v51;
      v55 = v46;
      v56 = v47;
      v57 = result;
      v58 = v78;
      if ((int)v50 >= 1)
      {
        do
        {
          if (8 - (v56 & 7u) >= (unint64_t)a12)
            v59 = a12;
          else
            v59 = 8 - (v56 & 7u);
          if (a14)
          {
            if (a12 == 8)
            {
              v60 = (float)(char)*v54;
            }
            else
            {
              v61 = 8 - (v56 & 7);
              if (v61 >= a12)
                v62 = a12;
              else
                v62 = 8 - (v56 & 7);
              v63 = (((255 << (8 - v62)) >> (v56 & 7)) & a2[v55 >> 3]) >> (v61 - v62);
              if (a12 > v61)
              {
                v64 = (a12 - v62);
                v65 = v63 << (a12 - v62);
                v66 = ((_BYTE)v59 + v56) & 7;
                if (v64 >= 8 - v66)
                  LOBYTE(v64) = 8 - v66;
                v63 = ((((255 << (8 - v64)) >> v66) & a2[(v59 + v55) >> 3]) >> (8 - v66 - v64)) | v65;
              }
              if (((1 << (a12 - 1)) & v63) != 0)
                v67 = 255 << a12;
              else
                v67 = 0;
              v60 = (float)(char)(v67 | v63);
            }
          }
          else if (a12 == 8)
          {
            LOBYTE(a11) = *v54;
            v60 = (float)LODWORD(a11);
          }
          else
          {
            v68 = 8 - (v56 & 7);
            if (v68 >= a12)
              v69 = a12;
            else
              v69 = 8 - (v56 & 7);
            v70 = (((255 << (8 - v69)) >> (v56 & 7)) & a2[v55 >> 3]) >> (v68 - v69);
            if (a12 > v68)
            {
              v71 = (a12 - v69);
              v72 = v70 << (a12 - v69);
              v73 = ((_BYTE)v59 + v56) & 7;
              if (v71 >= 8 - v73)
                LOBYTE(v71) = 8 - v73;
              v70 = ((((255 << (8 - v71)) >> v73) & a2[(v59 + v55) >> 3]) >> (8 - v73 - v71)) | v72;
            }
            v60 = (float)v70;
          }
          a11 = v53 + (float)(v60 * v52);
          *v57++ = a11;
          v56 += a12;
          v55 += a12;
          ++v54;
          --v58;
        }
        while (v58);
      }
      ++v48;
      result = (float *)((char *)result + v76);
      v47 += v75;
      v46 += v74;
      v51 += v50;
      if (v48 == v77)
        return result;
    }
  }
  if (a7 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = a7;
    v18 = a7 * a6 * a5;
    do
    {
      if (a3)
      {
        v19 = *(float *)(*(_QWORD *)(a3 + 16) + 4 * v16);
        if (!a4)
          goto LABEL_8;
      }
      else
      {
        v19 = 1.0;
        if (!a4)
        {
LABEL_8:
          v20 = 0.0;
          goto LABEL_9;
        }
      }
      v20 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v16);
LABEL_9:
      if (a8 >= 1)
      {
        v21 = 0;
        v22 = v15;
        do
        {
          v23 = v22;
          v24 = v14;
          if ((int)v14 >= 1)
          {
            do
            {
              if (a14)
              {
                if (a12 == 8)
                {
                  v25 = (char)a2[v23];
                }
                else
                {
                  v27 = v23 * (uint64_t)a12;
                  v28 = 8 - (v27 & 7);
                  if (v28 >= a12)
                    v29 = a12;
                  else
                    v29 = 8 - (v27 & 7);
                  v30 = (((255 << (8 - v29)) >> (v27 & 7)) & a2[v27 >> 3]) >> (v28 - v29);
                  if (a12 > v28)
                  {
                    v31 = (a12 - v29);
                    v32 = v27 + v29;
                    v33 = v30 << (a12 - v29);
                    v34 = v32 >> 3;
                    v35 = v32 & 7;
                    if (v31 >= 8 - v35)
                      LOBYTE(v31) = 8 - v35;
                    v30 = ((((255 << (8 - v31)) >> v35) & a2[v34]) >> (8 - v35 - v31)) | v33;
                  }
                  if (((1 << (a12 - 1)) & v30) != 0)
                    v36 = 255 << a12;
                  else
                    v36 = 0;
                  v25 = (char)(v36 | v30);
                }
                v26 = (float)v25;
              }
              else if (a12 == 8)
              {
                LOBYTE(a11) = a2[v23];
                v26 = (float)LODWORD(a11);
              }
              else
              {
                v37 = v23 * (uint64_t)a12;
                v38 = 8 - (v37 & 7);
                if (v38 >= a12)
                  v39 = a12;
                else
                  v39 = 8 - (v37 & 7);
                v40 = (((255 << (8 - v39)) >> (v37 & 7)) & a2[v37 >> 3]) >> (v38 - v39);
                if (a12 > v38)
                {
                  v41 = (a12 - v39);
                  v42 = v37 + v39;
                  v43 = v40 << (a12 - v39);
                  v44 = v42 >> 3;
                  v45 = v42 & 7;
                  if (v41 >= 8 - v45)
                    LOBYTE(v41) = 8 - v45;
                  v40 = ((((255 << (8 - v41)) >> v45) & a2[v44]) >> (8 - v45 - v41)) | v43;
                }
                v26 = (float)v40;
              }
              a11 = v20 + (float)(v26 * v19);
              result[v23++] = a11;
              --v24;
            }
            while (v24);
          }
          ++v21;
          v22 += v18;
        }
        while (v21 != a8);
      }
      ++v16;
      v15 += v14;
    }
    while (v16 != v17);
  }
  return result;
}

float *dequantize_uint_per_channel_lut<float>(float *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  float v37;
  float v38;
  unsigned __int8 *v39;
  unint64_t v40;
  char v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  char v52;

  v11 = (a7 * a6);
  if (!a11)
  {
    if (a9 < 1)
      return result;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = (v11 * a8);
    v52 = a10 * a8 * a7 * a6;
    v36 = a2;
    while (1)
    {
      if (a4)
      {
        v37 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v34);
        if (!a5)
          goto LABEL_32;
      }
      else
      {
        v37 = 1.0;
        if (!a5)
        {
LABEL_32:
          v38 = 0.0;
          goto LABEL_33;
        }
      }
      v38 = *(float *)(*(_QWORD *)(a5 + 16) + 4 * v34);
LABEL_33:
      v39 = v36;
      v40 = v32;
      v41 = v33;
      v42 = result;
      v43 = v35;
      if ((int)v35 >= 1)
      {
        do
        {
          v44 = 8 - (v41 & 7u);
          if (v44 >= a10)
            v44 = a10;
          if (a10 == 8)
          {
            v45 = *(float *)(a3 + 4 * *v39);
          }
          else
          {
            v46 = 8 - (v41 & 7);
            if (v46 >= a10)
              v47 = a10;
            else
              v47 = 8 - (v41 & 7);
            v48 = (((255 << (8 - v47)) >> (v41 & 7)) & a2[v40 >> 3]) >> (v46 - v47);
            if (a10 > v46)
            {
              v49 = (a10 - v47);
              v50 = (v44 + v40) >> 3;
              v51 = ((_BYTE)v44 + v41) & 7;
              if (v49 >= 8 - v51)
                LOBYTE(v49) = 8 - v51;
              v48 = ((((255 << (8 - v49)) >> v51) & a2[v50]) >> (8 - v51 - v49)) | (v48 << (a10 - v47));
            }
            v45 = v38 + (float)(v37 * *(float *)(a3 + 4 * v48));
          }
          *v42++ = v45;
          v41 += a10;
          v40 += a10;
          ++v39;
          --v43;
        }
        while (v43);
      }
      ++v34;
      result += (int)v35;
      v33 += v52;
      v32 += a10 * (uint64_t)(int)v35;
      v36 += (int)v35;
      if (v34 == a9)
        return result;
    }
  }
  if (a8 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = a8;
    v15 = a8 * a7 * a6;
    do
    {
      if (a4)
      {
        v16 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v13);
        if (!a5)
          goto LABEL_8;
      }
      else
      {
        v16 = 1.0;
        if (!a5)
        {
LABEL_8:
          v17 = 0.0;
          goto LABEL_9;
        }
      }
      v17 = *(float *)(*(_QWORD *)(a5 + 16) + 4 * v13);
LABEL_9:
      if (a9 >= 1)
      {
        v18 = 0;
        v19 = v12;
        do
        {
          v20 = v19;
          v21 = v11;
          if ((int)v11 >= 1)
          {
            do
            {
              if (a10 == 8)
              {
                v22 = a2[v20];
              }
              else
              {
                v23 = v20 * (uint64_t)a10;
                v24 = 8 - (v23 & 7);
                if (v24 >= a10)
                  v25 = a10;
                else
                  v25 = 8 - (v23 & 7);
                v26 = (((255 << (8 - v25)) >> (v23 & 7)) & a2[v23 >> 3]) >> (v24 - v25);
                if (a10 > v24)
                {
                  v27 = (a10 - v25);
                  v28 = v23 + v25;
                  v29 = v26 << (a10 - v25);
                  v30 = v28 >> 3;
                  v31 = v28 & 7;
                  if (v27 >= 8 - v31)
                    LOBYTE(v27) = 8 - v31;
                  v26 = ((((255 << (8 - v27)) >> v31) & a2[v30]) >> (8 - v31 - v27)) | v29;
                }
                v22 = v26;
              }
              result[v20++] = v17 + (float)(v16 * *(float *)(a3 + 4 * v22));
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v15;
        }
        while (v18 != a9);
      }
      ++v13;
      v12 += v11;
    }
    while (v13 != v14);
  }
  return result;
}

int *Espresso::quantized_weights_helper::get_extended_weight_blob@<X0>(int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (this[40] >= 1 && (v2 = *((_QWORD *)this + 2)) != 0)
  {
    v3 = *((_QWORD *)this + 3);
  }
  else
  {
    v2 = *(_QWORD *)this;
    v3 = *((_QWORD *)this + 1);
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

uint64_t Espresso::quantized_weights_helper::get_extended_number_of_weight_bits(Espresso::quantized_weights_helper *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 40);
  if ((int)result <= 0)
    return *((unsigned int *)this + 39);
  return result;
}

uint64_t Espresso::quantized_weights_helper::are_weights_signed(Espresso::quantized_weights_helper *this)
{
  return *((unsigned __int8 *)this + 164);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_4d(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 1 && *(_QWORD *)(a1 + 16))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3)
      goto LABEL_11;
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v2 = *(_DWORD *)(a1 + 160);
LABEL_9:
  if (v2 <= 0)
    v2 = *(_DWORD *)(a1 + 156);
LABEL_11:
  v18 = v3;
  if (v2 != 8)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("FP16 BNNS Dequantizer only available for uint8/int8");
  if (*(_DWORD *)(a1 + 144))
  {
    v6 = *(_DWORD *)(a1 + 136);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128);
      v11 = (int)v10 * v6;
      do
      {
        if (*(int *)(a1 + 140) >= 1)
        {
          v19 = v9;
          v20 = v8;
          v12 = 0;
          v21 = v7;
          do
          {
            if (BNNSDequantize())
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "BNNS de-quantization error");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            ++v12;
            v8 += 2 * v11;
            v7 += v11;
          }
          while (v12 < *(int *)(a1 + 140));
          v6 = *(_DWORD *)(a1 + 136);
          v8 = v20;
          v7 = v21;
          v9 = v19;
        }
        ++v9;
        v8 += 2 * v10;
        v7 += v10;
      }
      while (v9 < v6);
    }
  }
  else if (*(int *)(a1 + 140) >= 1)
  {
    v13 = 0;
    do
    {
      if (BNNSDequantize())
      {
        v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "BNNS de-quantization error");
        __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v13;
    }
    while (v13 < *(int *)(a1 + 140));
  }
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1914DAE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  double v5;
  float v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35));
  v7 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_4d((uint64_t *)this, (uint64_t)v12, v4, v5, v6);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1914DAF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_2d(uint64_t *a1, uint64_t a2, double a3, double a4, float a5)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  float *v28;
  int v29;
  int v30;
  float *v31;
  float *v32;
  char *v33;
  float *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;

  v5 = *((_DWORD *)a1 + 40);
  if (v5 >= 1 && (v6 = a1[2]) != 0)
  {
    v7 = (std::__shared_weak_count *)a1[3];
    v46 = v7;
    if (!v7)
      goto LABEL_11;
  }
  else
  {
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v46 = v7;
    if (!v7)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v5 = *((_DWORD *)a1 + 40);
LABEL_9:
  if (v5 <= 0)
    v5 = *((_DWORD *)a1 + 39);
LABEL_11:
  if (a1[6] || a1[8] || a1[4])
  {
    v10 = a1[4];
    if (!v10)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    v11 = *(float **)(*(_QWORD *)a2 + 16);
    v12 = *(unsigned __int8 **)(v6 + 16);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = a1[10];
    v15 = (std::__shared_weak_count *)a1[11];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = a1[12];
    v19 = (std::__shared_weak_count *)a1[13];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    dequantize_uint_per_channel_lut<float>(v11, v12, v13, v14, v18, 1, 1, *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), v5, *((_DWORD *)a1 + 36));
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v15)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_29;
    }
  }
  else
  {
    if (v5 == 8)
    {
      v28 = *(float **)(*(_QWORD *)a2 + 16);
      v29 = *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34);
      v30 = v29 * *((_DWORD *)a1 + 35);
      v31 = *(float **)(a1[10] + 16);
      v32 = *(float **)(a1[12] + 16);
      v33 = *(char **)(v6 + 16);
      if (*((_BYTE *)a1 + 164))
        Espresso::range_quantizer<signed char>::dequantize_chunks(v28, v30, v29, v31, v32, v33);
      else
        Espresso::range_quantizer<unsigned char>::dequantize_chunks(v28, v30, v29, v31, v32, (unsigned __int8 *)v33);
      goto LABEL_31;
    }
    v34 = *(float **)(*(_QWORD *)a2 + 16);
    v35 = *(_BYTE **)(v6 + 16);
    v36 = a1[10];
    v15 = (std::__shared_weak_count *)a1[11];
    if (v15)
    {
      v37 = (unint64_t *)&v15->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = a1[12];
    v40 = (std::__shared_weak_count *)a1[13];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    dequantize_uint_per_channel_linear<float>(v34, v35, v36, v39, 1, 1, *((_DWORD *)a1 + 33) * *((_DWORD *)a1 + 32) * *((_DWORD *)a1 + 34), *((_DWORD *)a1 + 35), a3, a4, a5, v5, *((_DWORD *)a1 + 36), *((_BYTE *)a1 + 164));
    if (v40)
    {
      v43 = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v15)
    {
      v45 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v45);
      while (__stlxr(v25 - 1, v45));
LABEL_29:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_31:
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1914DB1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_2d(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::runtime_error *exception;

  v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 1 && *(_QWORD *)(a1 + 16))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3)
      goto LABEL_11;
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v2 = *(_DWORD *)(a1 + 160);
LABEL_9:
  if (v2 <= 0)
    v2 = *(_DWORD *)(a1 + 156);
LABEL_11:
  if (v2 != 8)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("FP16 BNNS Dequantizer only available for uint8/int8");
  if (*(int *)(a1 + 140) >= 1)
  {
    v6 = 0;
    do
    {
      if (BNNSDequantize())
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "BNNS de-quantization error");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 140));
  }
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1914DB404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_2d(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  double v5;
  float v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), 1, 1);
  v7 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d((uint64_t *)this, (uint64_t)v12, v4, v5, v6);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1914DB4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  double v44;
  float v45;
  unint64_t *v46;
  float *v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  v4 = *((_DWORD *)this + 35) / 4;
  v5 = *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34);
  v58 = v5 * v4;
  v6 = v5 * v4 * *((_DWORD *)this + 39);
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 6;
  if (!v7)
    v9 = v8;
  v10 = v9 >> 3;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, 1, 1, v5, (*((_DWORD *)this + 35) + (*((int *)this + 35) < 0 ? 3 : 0)) & 0xFFFFFFFC);
  if (*((int *)this + 40) >= 1 && (v11 = *((_QWORD *)this + 2)) != 0)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  }
  else
  {
    v11 = *(_QWORD *)this;
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  }
  v59 = v11;
  v60 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = v10 + 1;
  if (*((_QWORD *)this + 6) || *((_QWORD *)this + 8) || *((_QWORD *)this + 4))
  {
    if (!*((_QWORD *)this + 4))
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    v16 = 0;
    v17 = v15;
    do
    {
      v18 = *((_DWORD *)this + 39);
      v19 = *(_QWORD *)(*a2 + 24);
      v20 = *(_QWORD *)(v59 + 16);
      v21 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
      v22 = *((_QWORD *)this + 10);
      v23 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = (float *)(v19 + 4 * v58 * (int)v16);
      v27 = (unsigned __int8 *)(v20 + v16 * v17);
      v28 = v21 + 4 * v16 * (2 << (v18 - 1));
      v29 = *((_QWORD *)this + 12);
      v30 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        dequantize_uint_per_channel_lut<float>(v26, v27, v28, v22, v29, 1, 1, v5, v4, *((_DWORD *)this + 39), *((_DWORD *)this + 36));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      else
      {
        dequantize_uint_per_channel_lut<float>(v26, v27, v28, v22, v29, 1, 1, v5, v4, *((_DWORD *)this + 39), *((_DWORD *)this + 36));
      }
      if (v23)
      {
        v34 = (unint64_t *)&v23->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      ++v16;
    }
    while (v16 != 4);
  }
  else
  {
    v38 = 0;
    v57 = a2;
    v56 = v15;
    do
    {
      v39 = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
      v40 = (std::__shared_weak_count *)operator new(0x58uLL);
      v40->__shared_owners_ = 0;
      v41 = (unint64_t *)&v40->__shared_owners_;
      v40->__shared_weak_owners_ = 0;
      v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
      v40[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1190;
      *(_OWORD *)&v40[2].__shared_owners_ = 0u;
      v40[3].std::__shared_count = 0u;
      LODWORD(v40[1].__shared_owners_) = v4;
      v40[1].__shared_weak_owners_ = v39 + 4 * v38 * v4;
      LOBYTE(v40[2].__vftable) = 0;
      v42 = *(_QWORD *)(*((_QWORD *)this + 12) + 16);
      v43 = (std::__shared_weak_count *)operator new(0x58uLL);
      v43->__shared_owners_ = 0;
      v46 = (unint64_t *)&v43->__shared_owners_;
      v43->__shared_weak_owners_ = 0;
      v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
      v43[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1190;
      *(_OWORD *)&v43[2].__shared_owners_ = 0u;
      v43[3].std::__shared_count = 0u;
      LODWORD(v43[1].__shared_owners_) = v4;
      v43[1].__shared_weak_owners_ = v42 + 4 * v38 * v4;
      LOBYTE(v43[2].__vftable) = 0;
      v47 = (float *)(*(_QWORD *)(*v57 + 24) + 4 * v58 * (int)v38);
      v48 = (_BYTE *)(*(_QWORD *)(v59 + 16) + v38 * v56);
      do
        v49 = __ldxr(v41);
      while (__stxr(v49 + 1, v41));
      do
        v50 = __ldxr(v46);
      while (__stxr(v50 + 1, v46));
      dequantize_uint_per_channel_linear<float>(v47, v48, (uint64_t)&v40[1], (uint64_t)&v43[1], 1, 1, v5, v4, 0.0, v44, v45, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((_BYTE *)this + 164));
      do
        v51 = __ldaxr(v46);
      while (__stlxr(v51 - 1, v46));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      do
        v52 = __ldaxr(v41);
      while (__stlxr(v52 - 1, v41));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      do
        v53 = __ldaxr(v46);
      while (__stlxr(v53 - 1, v46));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      if (v40)
      {
        v54 = (unint64_t *)&v40->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      ++v38;
    }
    while (v38 != 4);
  }
  if (v60)
  {
    v36 = (unint64_t *)&v60->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_1914DB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a8);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::dequantize_to_float16_4d(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  _WORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _WORD *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a2, 2 * *((_DWORD *)this + 32) * *((_DWORD *)this + 33) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
  if (*((_QWORD *)this + 6) || *((_QWORD *)this + 8) || *((_QWORD *)this + 4))
  {
    v7 = *((_QWORD *)this + 4);
    if (!v7)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    v8 = *(_WORD **)(*a2 + 16);
    v9 = *(unsigned __int8 **)(*(_QWORD *)this + 16);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *((_QWORD *)this + 10);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *((_QWORD *)this + 12);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v15, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (!v12)
        return;
    }
    else
    {
      dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v15, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
      if (!v12)
        return;
    }
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_20:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  v22 = *(_WORD **)(*a2 + 16);
  v23 = *(_BYTE **)(*(_QWORD *)this + 16);
  v24 = *((_QWORD *)this + 10);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *((_QWORD *)this + 12);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  dequantize_uint_per_channel_linear<half>(v22, v23, v24, v27, *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), v4, v5, v6, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((_BYTE *)this + 164));
  if (v28)
  {
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v12)
  {
    v33 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v33);
    while (__stlxr(v21 - 1, v33));
    goto LABEL_20;
  }
}

void sub_1914DBC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_WORD *dequantize_uint_per_channel_linear<half>(_WORD *result, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, double a9, double a10, float _S2, int a12, int a13, char a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  float v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  char v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  float v56;
  float v57;
  _BYTE *v58;
  unint64_t v59;
  char v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  unsigned int v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  char v71;
  unsigned int v72;
  char v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v14 = (a6 * a5);
  if (!a13)
  {
    if (a8 < 1)
      return result;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = (v14 * a7);
    v54 = (int)v53;
    v81 = a8;
    v82 = v53;
    v79 = a12 * a7 * a6 * a5;
    v80 = 2 * (int)v53;
    v78 = a12 * (uint64_t)(int)v53;
    v55 = a2;
    while (1)
    {
      if (a3)
      {
        v56 = *(float *)(*(_QWORD *)(a3 + 16) + 4 * v52);
        if (!a4)
          goto LABEL_47;
      }
      else
      {
        v56 = 1.0;
        if (!a4)
        {
LABEL_47:
          v57 = 0.0;
          goto LABEL_48;
        }
      }
      v57 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v52);
LABEL_48:
      v58 = v55;
      v59 = v50;
      v60 = v51;
      v61 = result;
      v62 = v82;
      if ((int)v54 >= 1)
      {
        do
        {
          if (8 - (v60 & 7u) >= (unint64_t)a12)
            v63 = a12;
          else
            v63 = 8 - (v60 & 7u);
          if (a14)
          {
            if (a12 == 8)
            {
              v64 = (float)(char)*v58;
            }
            else
            {
              v65 = 8 - (v60 & 7);
              if (v65 >= a12)
                v66 = a12;
              else
                v66 = 8 - (v60 & 7);
              v67 = (((255 << (8 - v66)) >> (v60 & 7)) & a2[v59 >> 3]) >> (v65 - v66);
              if (a12 > v65)
              {
                v68 = (a12 - v66);
                v69 = v67 << (a12 - v66);
                v70 = ((_BYTE)v63 + v60) & 7;
                if (v68 >= 8 - v70)
                  LOBYTE(v68) = 8 - v70;
                v67 = ((((255 << (8 - v68)) >> v70) & a2[(v63 + v59) >> 3]) >> (8 - v70 - v68)) | v69;
              }
              if (((1 << (a12 - 1)) & v67) != 0)
                v71 = 255 << a12;
              else
                v71 = 0;
              v64 = (float)(char)(v71 | v67);
            }
          }
          else if (a12 == 8)
          {
            LOBYTE(_S2) = *v58;
            v64 = (float)LODWORD(_S2);
          }
          else
          {
            v72 = 8 - (v60 & 7);
            if (v72 >= a12)
              v73 = a12;
            else
              v73 = 8 - (v60 & 7);
            v74 = (((255 << (8 - v73)) >> (v60 & 7)) & a2[v59 >> 3]) >> (v72 - v73);
            if (a12 > v72)
            {
              v75 = (a12 - v73);
              v76 = v74 << (a12 - v73);
              v77 = ((_BYTE)v63 + v60) & 7;
              if (v75 >= 8 - v77)
                LOBYTE(v75) = 8 - v77;
              v74 = ((((255 << (8 - v75)) >> v77) & a2[(v63 + v59) >> 3]) >> (8 - v77 - v75)) | v76;
            }
            v64 = (float)v74;
          }
          _S2 = v57 + (float)(v64 * v56);
          __asm { FCVT            H2, S2 }
          *v61++ = LOWORD(_S2);
          v60 += a12;
          v59 += a12;
          ++v58;
          --v62;
        }
        while (v62);
      }
      ++v52;
      result = (_WORD *)((char *)result + v80);
      v51 += v79;
      v50 += v78;
      v55 += v54;
      if (v52 == v81)
        return result;
    }
  }
  if (a7 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = a7;
    v18 = a7 * a6 * a5;
    do
    {
      if (a3)
      {
        v19 = *(float *)(*(_QWORD *)(a3 + 16) + 4 * v16);
        if (!a4)
          goto LABEL_8;
      }
      else
      {
        v19 = 1.0;
        if (!a4)
        {
LABEL_8:
          v20 = 0.0;
          goto LABEL_9;
        }
      }
      v20 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v16);
LABEL_9:
      if (a8 >= 1)
      {
        v21 = 0;
        v22 = v15;
        do
        {
          v23 = v22;
          v24 = v14;
          if ((int)v14 >= 1)
          {
            do
            {
              if (a14)
              {
                if (a12 == 8)
                {
                  v25 = (char)a2[v23];
                }
                else
                {
                  v27 = v23 * (uint64_t)a12;
                  v28 = 8 - (v27 & 7);
                  if (v28 >= a12)
                    v29 = a12;
                  else
                    v29 = 8 - (v27 & 7);
                  v30 = (((255 << (8 - v29)) >> (v27 & 7)) & a2[v27 >> 3]) >> (v28 - v29);
                  if (a12 > v28)
                  {
                    v31 = (a12 - v29);
                    v32 = v27 + v29;
                    v33 = v30 << (a12 - v29);
                    v34 = v32 >> 3;
                    v35 = v32 & 7;
                    if (v31 >= 8 - v35)
                      LOBYTE(v31) = 8 - v35;
                    v30 = ((((255 << (8 - v31)) >> v35) & a2[v34]) >> (8 - v35 - v31)) | v33;
                  }
                  if (((1 << (a12 - 1)) & v30) != 0)
                    v36 = 255 << a12;
                  else
                    v36 = 0;
                  v25 = (char)(v36 | v30);
                }
                v26 = (float)v25;
              }
              else if (a12 == 8)
              {
                LOBYTE(_S2) = a2[v23];
                v26 = (float)LODWORD(_S2);
              }
              else
              {
                v37 = v23 * (uint64_t)a12;
                v38 = 8 - (v37 & 7);
                if (v38 >= a12)
                  v39 = a12;
                else
                  v39 = 8 - (v37 & 7);
                v40 = (((255 << (8 - v39)) >> (v37 & 7)) & a2[v37 >> 3]) >> (v38 - v39);
                if (a12 > v38)
                {
                  v41 = (a12 - v39);
                  v42 = v37 + v39;
                  v43 = v40 << (a12 - v39);
                  v44 = v42 >> 3;
                  v45 = v42 & 7;
                  if (v41 >= 8 - v45)
                    LOBYTE(v41) = 8 - v45;
                  v40 = ((((255 << (8 - v41)) >> v45) & a2[v44]) >> (8 - v45 - v41)) | v43;
                }
                v26 = (float)v40;
              }
              _S2 = v20 + (float)(v26 * v19);
              __asm { FCVT            H2, S2 }
              result[v23++] = LOWORD(_S2);
              --v24;
            }
            while (v24);
          }
          ++v21;
          v22 += v18;
        }
        while (v21 != a8);
      }
      ++v16;
      v15 += v14;
    }
    while (v16 != v17);
  }
  return result;
}

_WORD *dequantize_uint_per_channel_lut<half>(_WORD *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  float v42;
  float v43;
  unsigned __int8 *v44;
  unint64_t v45;
  char v46;
  _WORD *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  char v58;

  v11 = (a7 * a6);
  if (!a11)
  {
    if (a9 < 1)
      return result;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = (v11 * a8);
    v58 = a10 * a8 * a7 * a6;
    v41 = a2;
    while (1)
    {
      if (a4)
      {
        v42 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v39);
        if (!a5)
          goto LABEL_32;
      }
      else
      {
        v42 = 1.0;
        if (!a5)
        {
LABEL_32:
          v43 = 0.0;
          goto LABEL_33;
        }
      }
      v43 = *(float *)(*(_QWORD *)(a5 + 16) + 4 * v39);
LABEL_33:
      v44 = v41;
      v45 = v37;
      v46 = v38;
      v47 = result;
      v48 = v40;
      if ((int)v40 >= 1)
      {
        do
        {
          v49 = 8 - (v46 & 7u);
          if (v49 >= a10)
            v49 = a10;
          if (a10 == 8)
          {
            _S2 = *(float *)(a3 + 4 * *v44);
          }
          else
          {
            v51 = 8 - (v46 & 7);
            if (v51 >= a10)
              v52 = a10;
            else
              v52 = 8 - (v46 & 7);
            v53 = (((255 << (8 - v52)) >> (v46 & 7)) & a2[v45 >> 3]) >> (v51 - v52);
            if (a10 > v51)
            {
              v54 = (a10 - v52);
              v55 = (v49 + v45) >> 3;
              v56 = ((_BYTE)v49 + v46) & 7;
              if (v54 >= 8 - v56)
                LOBYTE(v54) = 8 - v56;
              v53 = ((((255 << (8 - v54)) >> v56) & a2[v55]) >> (8 - v56 - v54)) | (v53 << (a10 - v52));
            }
            _S2 = v43 + (float)(v42 * *(float *)(a3 + 4 * v53));
          }
          __asm { FCVT            H2, S2 }
          *v47++ = _H2;
          v46 += a10;
          v45 += a10;
          ++v44;
          --v48;
        }
        while (v48);
      }
      ++v39;
      result += (int)v40;
      v38 += v58;
      v37 += a10 * (uint64_t)(int)v40;
      v41 += (int)v40;
      if (v39 == a9)
        return result;
    }
  }
  if (a8 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = a8;
    v15 = a8 * a7 * a6;
    do
    {
      if (a4)
      {
        v16 = *(float *)(*(_QWORD *)(a4 + 16) + 4 * v13);
        if (!a5)
          goto LABEL_8;
      }
      else
      {
        v16 = 1.0;
        if (!a5)
        {
LABEL_8:
          v17 = 0.0;
          goto LABEL_9;
        }
      }
      v17 = *(float *)(*(_QWORD *)(a5 + 16) + 4 * v13);
LABEL_9:
      if (a9 >= 1)
      {
        v18 = 0;
        v19 = v12;
        do
        {
          v20 = v19;
          v21 = v11;
          if ((int)v11 >= 1)
          {
            do
            {
              if (a10 == 8)
              {
                v22 = a2[v20];
              }
              else
              {
                v23 = v20 * (uint64_t)a10;
                v24 = 8 - (v23 & 7);
                if (v24 >= a10)
                  v25 = a10;
                else
                  v25 = 8 - (v23 & 7);
                v26 = (((255 << (8 - v25)) >> (v23 & 7)) & a2[v23 >> 3]) >> (v24 - v25);
                if (a10 > v24)
                {
                  v27 = (a10 - v25);
                  v28 = v23 + v25;
                  v29 = v26 << (a10 - v25);
                  v30 = v28 >> 3;
                  v31 = v28 & 7;
                  if (v27 >= 8 - v31)
                    LOBYTE(v27) = 8 - v31;
                  v26 = ((((255 << (8 - v27)) >> v31) & a2[v30]) >> (8 - v31 - v27)) | v29;
                }
                v22 = v26;
              }
              _S2 = v17 + (float)(v16 * *(float *)(a3 + 4 * v22));
              __asm { FCVT            H2, S2 }
              result[v20++] = LOWORD(_S2);
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v15;
        }
        while (v18 != a9);
      }
      ++v13;
      v12 += v11;
    }
    while (v13 != v14);
  }
  return result;
}

void Espresso::quantized_weights_helper::dequantize_to_float16_2d(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  _WORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _WORD *v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a2, 2 * *((_DWORD *)this + 32) * *((_DWORD *)this + 33) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
  if (*((_QWORD *)this + 6) || *((_QWORD *)this + 8) || *((_QWORD *)this + 4))
  {
    v7 = *((_QWORD *)this + 4);
    if (!v7)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid quantization parameters");
    v8 = *(_WORD **)(*a2 + 16);
    v9 = *(unsigned __int8 **)(*(_QWORD *)this + 16);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *((_QWORD *)this + 10);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *((_QWORD *)this + 12);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    dequantize_uint_per_channel_lut<half>(v8, v9, v10, v11, v15, 1, 1, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((_DWORD *)this + 39), *((_DWORD *)this + 36));
    if (!v16)
      goto LABEL_15;
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v12)
        return;
    }
    else
    {
LABEL_15:
      if (!v12)
        return;
    }
    v21 = (unint64_t *)&v12->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    goto LABEL_18;
  }
  v23 = *(_WORD **)(*a2 + 16);
  v24 = *(_BYTE **)(*(_QWORD *)this + 16);
  v25 = *((_QWORD *)this + 10);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v12)
  {
    v26 = (unint64_t *)&v12->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *((_QWORD *)this + 12);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  dequantize_uint_per_channel_linear<half>(v23, v24, v25, v28, 1, 1, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34), *((_DWORD *)this + 35), v4, v5, v6, *((_DWORD *)this + 39), *((_DWORD *)this + 36), *((_BYTE *)this + 164));
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v12)
  {
    v34 = (unint64_t *)&v12->__shared_owners_;
    do
      v22 = __ldaxr(v34);
    while (__stlxr(v22 - 1, v34));
LABEL_18:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1914DC6A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::expand_to_int8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::quantized_weights_helper::expand_to_uint8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::quantized_weights_helper::make_uint8_weight_from_raw(Espresso::quantized_weights_helper *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int i;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  unsigned __int8 v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  __int128 v44;

  if (*((_DWORD *)this + 39) != 8)
  {
    if (*((_BYTE *)this + 164))
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to extend signed int weights to unsigned char");
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v44, *((_DWORD *)this + 33) * *((_DWORD *)this + 32) * *((_DWORD *)this + 34) * *((_DWORD *)this + 35), 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 16, &v44);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_BYTE **)(*((_QWORD *)this + 2) + 16);
    v6 = *(_QWORD *)(*(_QWORD *)this + 16);
    v8 = *((_DWORD *)this + 34);
    v7 = *((unsigned int *)this + 35);
    v9 = *((int *)this + 39);
    v10 = (*((_DWORD *)this + 33) * *((_DWORD *)this + 32));
    if (*((_DWORD *)this + 36))
    {
      if (v8 >= 1)
      {
        v11 = 0;
        for (i = 0; i != v8; ++i)
        {
          if ((int)v7 >= 1)
          {
            v13 = 0;
            v14 = v11;
            do
            {
              v15 = v14;
              v16 = v10;
              if ((int)v10 >= 1)
              {
                do
                {
                  v17 = (int)v9 * (uint64_t)v15;
                  v18 = 8 - (v17 & 7);
                  if (v18 >= v9)
                    v19 = v9;
                  else
                    v19 = 8 - (v17 & 7);
                  v20 = (((255 << (8 - v19)) >> (v17 & 7)) & *(unsigned __int8 *)(v6 + (v17 >> 3))) >> (v18 - v19);
                  if (v9 > v18)
                  {
                    v21 = (v9 - v19);
                    v22 = v17 + v19;
                    v23 = v20 << (v9 - v19);
                    v24 = v22 >> 3;
                    v25 = v22 & 7;
                    if (v21 >= 8 - v25)
                      LOBYTE(v21) = 8 - v25;
                    v20 = ((((255 << (8 - v21)) >> v25) & *(unsigned __int8 *)(v6 + v24)) >> (8 - v25 - v21)) | v23;
                  }
                  v5[v15++] = v20;
                  --v16;
                }
                while (v16);
              }
              ++v13;
              v14 += v10 * v8;
            }
            while (v13 != (_DWORD)v7);
          }
          v11 += v10;
        }
      }
    }
    else if ((int)v7 >= 1)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = (v10 * v8);
      do
      {
        v30 = v26;
        v31 = v27;
        v32 = v5;
        v33 = v29;
        if ((int)v29 >= 1)
        {
          do
          {
            v34 = v31 & 7;
            v35 = (8 - v34);
            if (v35 >= v9)
              v36 = v9;
            else
              v36 = (8 - v34);
            if (v35 >= v9)
              v37 = v9;
            else
              v37 = 8 - (v31 & 7);
            v38 = (((255 << (8 - v37)) >> v34) & *(unsigned __int8 *)(v6 + (v30 >> 3))) >> (8 - (v31 & 7) - v37);
            if (v9 > v35)
            {
              v39 = v9 - v37;
              v40 = v39;
              v41 = v38 << v39;
              v42 = (v36 + v30) >> 3;
              v43 = ((_BYTE)v36 + v31) & 7;
              if (v40 >= 8 - v43)
                LOBYTE(v40) = 8 - v43;
              v38 = ((((255 << (8 - v40)) >> v43) & *(unsigned __int8 *)(v6 + v42)) >> (8 - v43 - v40)) | v41;
            }
            *v32++ = v38;
            v31 += v9;
            v30 += v9;
            --v33;
          }
          while (v33);
        }
        ++v28;
        v5 += (int)v29;
        v27 += v29 * v9;
        v26 += (int)v9 * (uint64_t)(int)v29;
      }
      while (v28 != v7);
    }
    *((_DWORD *)this + 40) = 8;
  }
}

__int16 Espresso::quantized_weights_helper::make_fp16_lut_from_fp32@<H0>(Espresso::quantized_weights_helper *this@<X0>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int16 result;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int *v10;
  _WORD *v11;
  int v12;
  __int128 v18;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v3 = *(int *)(v1 + 8);
    v5 = (char *)this + 168;
    v4 = *((_QWORD *)this + 21);
    if (!v4)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v18, *(_DWORD *)(v1 + 8), 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v5, &v18);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v1 = *((_QWORD *)this + 4);
      v4 = *((_QWORD *)this + 21);
    }
    if ((_DWORD)v3)
    {
      v10 = *(int **)(v1 + 16);
      v11 = *(_WORD **)(v4 + 16);
      do
      {
        v12 = *v10++;
        _S0 = v12;
        __asm { FCVT            H0, S0 }
        *v11++ = result;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEFB8;
  *((_QWORD *)v10 + 3) = &off_1E2DA13B0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1914DCB68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

BOOL Espresso::quantized_weights_helper::valid(Espresso::quantized_weights_helper *this)
{
  if (!*(_QWORD *)this)
    return 0;
  if (*((_QWORD *)this + 4) || *((_QWORD *)this + 6) || *((_QWORD *)this + 8))
    return 1;
  return *((_QWORD *)this + 10) != 0;
}

BOOL Espresso::quantized_weights_helper::has_lut(Espresso::quantized_weights_helper *this)
{
  return *((_QWORD *)this + 4) || *((_QWORD *)this + 6) || *((_QWORD *)this + 8) != 0;
}

BOOL Espresso::quantized_weights_helper::is_qbias_zero(uint64_t *a1)
{
  uint64_t v1;
  float __C;

  v1 = *a1;
  if (!*a1)
    return 1;
  __C = 0.0;
  vDSP_maxmgv(*(const float **)(v1 + 16), 1, &__C, *(int *)(v1 + 8));
  return __C < 0.00001;
}

BOOL Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(Espresso::quantized_weights_helper *this)
{
  _BOOL8 is_qbias_zero;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  if (*((_QWORD *)this + 4) || *((_QWORD *)this + 6) || *((_QWORD *)this + 8) || !*((_BYTE *)this + 164))
    return 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  v8[0] = *((_QWORD *)this + 12);
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return is_qbias_zero;
}

void sub_1914DCCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::cast_int8_linear_to_uint8_linear(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  float v16;
  float v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(_QWORD *)this
    && !*((_QWORD *)this + 4)
    && !*((_QWORD *)this + 6)
    && !*((_QWORD *)this + 8)
    && *((_QWORD *)this + 10)
    && *((_DWORD *)this + 39) == 8)
  {
    v4 = 136;
    if (!*((_DWORD *)this + 36))
      v4 = 140;
    v5 = *(unsigned int *)((char *)this + v4);
    v6 = *(_DWORD *)(*(_QWORD *)this + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v32, v6, 1, 1, 1);
    v7 = v32;
    v8 = *(_QWORD *)(v32 + 16);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v30, v5, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v28, v5, 1, 1, 1);
    if ((int)v5 >= 1)
    {
      v9 = 0;
      v10 = *((_QWORD *)this + 10);
      v11 = *((_QWORD *)this + 12);
      v12 = *(_QWORD *)(v30 + 16);
      v13 = *(_QWORD *)(v28 + 16);
      do
      {
        if (v10)
        {
          v14 = *(float *)(*(_QWORD *)(v10 + 16) + v9);
          if (!v11)
            goto LABEL_16;
        }
        else
        {
          v14 = 1.0;
          if (!v11)
          {
LABEL_16:
            v15 = 0.0;
            goto LABEL_17;
          }
        }
        v15 = *(float *)(*(_QWORD *)(v11 + 16) + v9);
LABEL_17:
        v16 = v15 + v14 * -128.0;
        *(float *)(v12 + v9) = v16;
        v17 = v14;
        *(float *)(v13 + v9) = v17;
        v9 += 4;
      }
      while (4 * v5 != v9);
    }
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_BYTE *)(v8 + i) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + i) ^ 0x80;
    }
    v19 = v29;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a2 + 2, v28, (uint64_t)v29);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a2 + 4, v30, (uint64_t)v31);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a2, v7, (uint64_t)v33);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v31;
    if (v31)
    {
      v23 = (unint64_t *)&v31->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v33;
    if (v33)
    {
      v26 = (unint64_t *)&v33->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_1914DCF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Espresso::quantized_weights_helper::linear_quantization_data *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::quantized_weights_helper::number_of_weights_bits(Espresso::quantized_weights_helper *this)
{
  return *((unsigned int *)this + 39);
}

void Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(Espresso::quantized_weights_helper *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;
  float v21;
  uint64_t i;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(_QWORD *)this
    && !*((_QWORD *)this + 4)
    && !*((_QWORD *)this + 6)
    && !*((_QWORD *)this + 8)
    && *((_QWORD *)this + 10)
    && *((_DWORD *)this + 39) == 8)
  {
    v8 = 136;
    if (!*((_DWORD *)this + 36))
      v8 = 140;
    v9 = *(unsigned int *)((char *)this + v8);
    v10 = *(_DWORD *)(*(_QWORD *)this + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v37, v10, 1, 1, 1);
    v11 = v37;
    v12 = *(_QWORD *)(v37 + 16);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v35, v9, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v33, v9, 1, 1, 1);
    if ((int)v9 >= 1)
    {
      v13 = 0;
      v14 = *((_QWORD *)this + 10);
      v15 = *((_QWORD *)this + 12);
      v16 = *(_QWORD *)(v35 + 16);
      v17 = *(_QWORD *)(v33 + 16);
      do
      {
        if (v14)
        {
          v18 = *(float *)(*(_QWORD *)(v14 + 16) + v13);
          if (!v15)
            goto LABEL_16;
        }
        else
        {
          v18 = 1.0;
          if (!v15)
          {
LABEL_16:
            v19 = 0.0;
            goto LABEL_17;
          }
        }
        v19 = *(float *)(*(_QWORD *)(v15 + 16) + v13);
LABEL_17:
        v20 = v19 + v18 * 128.0;
        if (a2 | a3)
          v20 = 0.0;
        *(float *)(v16 + v13) = v20;
        v21 = v18;
        *(float *)(v17 + v13) = v21;
        v13 += 4;
      }
      while (4 * v9 != v13);
    }
    if (v10)
    {
      for (i = 0; i != v10; *(_BYTE *)(v12 + i++) = v23)
      {
        v23 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + i);
        if (!a2)
          v23 ^= 0x80u;
      }
    }
    v24 = v34;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a4 + 2, v33, (uint64_t)v34);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a4 + 4, v35, (uint64_t)v36);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a4, v11, (uint64_t)v38);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v36;
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v38;
    if (v38)
    {
      v31 = (unint64_t *)&v38->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1914DD238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Espresso::quantized_weights_helper::linear_quantization_data *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v3);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long &,unsigned long &,int &>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("Mismatching size %d != %d, n_elements=%d n_bits=%d", a1, a2, a3, a4);
}

_QWORD *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(_QWORD *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t *a5, int a6, char a7)
{
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_5;
  if (!*a5 || (a7 & 1) != 0)
  {
    if (!*a5)
    {
LABEL_5:
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v33, a6, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
      size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
      if (v33.__r_.__value_.__l.__size_)
      {
        v13 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (*(_DWORD *)(*a1 + 8) != a4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v30, a4);
        v21 = std::string::insert(&v30, 0, "Unexpected size s=");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v31, "/blob=");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v29, *(int *)(*a1 + 8));
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v29;
        else
          v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          v26 = v29.__r_.__value_.__l.__size_;
        v27 = std::string::append(&v32, (const std::string::value_type *)v25, v26);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(*a1 + 16), a3, a4);
    }
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_5;
  }
  v16 = (char *)operator new(0x58uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_1E2DBED50;
  *((_QWORD *)v16 + 3) = &off_1E2DA1250;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *((_DWORD *)v16 + 8) = a6;
  *((_QWORD *)v16 + 5) = a3;
  v16[48] = 0;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 24);
  v33.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
  v17 = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a1 + 32), *a5, a5[1]);
}

void sub_1914DD500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

_QWORD *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(_QWORD *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t *a5, int a6, char a7)
{
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_5;
  if (!*a5 || (a7 & 1) != 0)
  {
    if (!*a5)
    {
LABEL_5:
      std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v33, a6, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
      size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
      if (v33.__r_.__value_.__l.__size_)
      {
        v13 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (*(_DWORD *)(*a1 + 8) != a4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v30, a4);
        v21 = std::string::insert(&v30, 0, "Unexpected size s=");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v31, "/blob=");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v29, *(int *)(*a1 + 8));
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v29;
        else
          v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          v26 = v29.__r_.__value_.__l.__size_;
        v27 = std::string::append(&v32, (const std::string::value_type *)v25, v26);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(*a1 + 16), a3, a4);
    }
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_5;
  }
  v16 = (char *)operator new(0x58uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_1E2DBEB20;
  *((_QWORD *)v16 + 3) = &off_1E2DA1110;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *((_DWORD *)v16 + 8) = a6;
  *((_QWORD *)v16 + 5) = a3;
  v16[48] = 0;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 24);
  v33.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
  v17 = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a1 + 32), *a5, a5[1]);
}

void sub_1914DD83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

BOOL Espresso::quantized_weights_helper::is_linear_quantization(Espresso::quantized_weights_helper *this)
{
  return !*((_QWORD *)this + 4) && !*((_QWORD *)this + 6) && !*((_QWORD *)this + 8) && *((_QWORD *)this + 10) != 0;
}

void Espresso::quantized_weights_helper::get_per_ch_ranges_uint8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a4, 2 * a3, 1, 1, 1);
  if (a3 >= 1)
  {
    v8 = 0;
    v9 = *a1;
    v10 = *a2;
    v11 = *(_QWORD *)(*a4 + 16);
    do
    {
      if (v9)
      {
        v12 = *(float *)(*(_QWORD *)(v9 + 16) + v8);
        if (!v10)
          goto LABEL_7;
      }
      else
      {
        v12 = 1.0;
        if (!v10)
        {
LABEL_7:
          v13 = 0.0;
          goto LABEL_8;
        }
      }
      v13 = *(float *)(*(_QWORD *)(v10 + 16) + v8);
LABEL_8:
      v14 = v13 + (float)(v12 * 255.0);
      if (v13 <= v14)
        v15 = v13;
      else
        v15 = v14;
      if (v13 > v14)
        v14 = v13;
      *(float *)(v11 + v8) = v15;
      *(float *)(v11 + 4 * a3 + v8) = v14;
      v8 += 4;
    }
    while (4 * a3 != v8);
  }
}

void Espresso::quantized_weights_helper::get_per_ch_ranges(Espresso::quantized_weights_helper *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;

  if (*((_QWORD *)this + 4) || *((_QWORD *)this + 6) || *((_QWORD *)this + 8) || !*((_QWORD *)this + 10))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid linear quantization");
  v4 = 140;
  if (*((_DWORD *)this + 36) == 1)
    v4 = 136;
  v5 = *(unsigned int *)((char *)this + v4);
  v6 = *((_DWORD *)this + 40);
  if (v6 <= 0)
    v6 = *((_DWORD *)this + 39);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, 2 * v5, 1, 1, 1);
  v7 = (float)((2 << (v6 - 1)) - 1);
  if (!*((_BYTE *)this + 164))
  {
    if ((int)v5 < 1)
      return;
    v18 = 0;
    v19 = *((_QWORD *)this + 10);
    v20 = *((_QWORD *)this + 12);
    v21 = *(_QWORD *)(*a2 + 16);
    while (1)
    {
      if (v19)
      {
        v22 = *(float *)(*(_QWORD *)(v19 + 16) + v18);
        if (!v20)
          goto LABEL_32;
      }
      else
      {
        v22 = 1.0;
        if (!v20)
        {
LABEL_32:
          v23 = 0.0;
          goto LABEL_33;
        }
      }
      v23 = *(float *)(*(_QWORD *)(v20 + 16) + v18);
LABEL_33:
      v24 = v23 + (float)(v22 * v7);
      if (v23 <= v24)
        v25 = v23;
      else
        v25 = v24;
      if (v23 > v24)
        v24 = v23;
      *(float *)(v21 + v18) = v25;
      *(float *)(v21 + 4 * v5 + v18) = v24;
      v18 += 4;
      if (4 * v5 == v18)
        return;
    }
  }
  v8 = (float)(v7 + -1.0) * 0.5;
  if (v6 <= 1)
    v8 = 1.0;
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 10);
    v11 = *((_QWORD *)this + 12);
    v12 = *(_QWORD *)(*a2 + 16);
    do
    {
      if (v10)
      {
        v13 = *(float *)(*(_QWORD *)(v10 + 16) + v9);
        if (!v11)
          goto LABEL_18;
      }
      else
      {
        v13 = 1.0;
        if (!v11)
        {
LABEL_18:
          v14 = 0.0;
          goto LABEL_19;
        }
      }
      v14 = *(float *)(*(_QWORD *)(v11 + 16) + v9);
LABEL_19:
      v15 = v14 + (float)((float)-v8 * v13);
      v16 = v14 + (float)(v8 * v13);
      if (v15 <= v16)
        v17 = v15;
      else
        v17 = v16;
      if (v15 > v16)
        v16 = v15;
      *(float *)(v12 + v9) = v17;
      *(float *)(v12 + 4 * v5 + v9) = v16;
      v9 += 4;
    }
    while (4 * v5 != v9);
  }
}

BOOL Espresso::weight_key_supported_by_conv_quantized_weights_helper(_BYTE *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  int v19;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  BOOL v26;

  v2 = a1[23];
  v3 = (char)v2;
  v4 = 0;
  if (a2)
  {
    if (((char)v2 & 0x80000000) == 0)
    {
      v5 = a1;
      switch(a1[23])
      {
        case 2:
          v6 = 0;
          v4 = *(unsigned __int16 *)a1 == 14423;
          v3 = 2;
          goto LABEL_66;
        case 4:
          v4 = *(_DWORD *)a1 == 947216215;
          v8 = *(_DWORD *)a1;
          goto LABEL_58;
        case 9:
          v6 = 0;
          v4 = *(_QWORD *)a1 == 0x616D6E696D5F3857 && a1[8] == 120;
          v3 = 9;
          goto LABEL_66;
        case 0xA:
          goto LABEL_19;
        default:
          goto LABEL_26;
      }
    }
    v7 = *((_QWORD *)a1 + 1);
    switch(v7)
    {
      case 2:
        v4 = **(unsigned __int16 **)a1 == 14423;
        v7 = 2;
        goto LABEL_76;
      case 4:
        v4 = **(_DWORD **)a1 == 947216215;
        goto LABEL_60;
      case 9:
        v4 = (**(_QWORD **)a1 ^ 0x616D6E696D5F3857 | *(unsigned __int8 *)(*(_QWORD *)a1 + 8) ^ 0x78) == 0;
        if (!(**(_QWORD **)a1 ^ 0x616D6E696D5F3857 | *(unsigned __int8 *)(*(_QWORD *)a1 + 8) ^ 0x78))
          v7 = 9;
        goto LABEL_76;
      case 10:
        v5 = *(_BYTE **)a1;
LABEL_19:
        v10 = *(_QWORD *)v5;
        v11 = *((unsigned __int16 *)v5 + 4);
        v4 = v10 == 0x6E61725F38755F71 && v11 == 25959;
        break;
      default:
        goto LABEL_36;
    }
  }
  if ((char)v2 < 0)
  {
    v7 = *((_QWORD *)a1 + 1);
LABEL_36:
    if (v7 > 11)
    {
      if (v7 == 12)
      {
        v22 = *(_BYTE **)a1;
        v21 = 1;
LABEL_68:
        v23 = *(_QWORD *)v22;
        v24 = *((_DWORD *)v22 + 2);
        if (v23 == 0x755F6F745F74756CLL && v24 == 947154537)
          v4 = 1;
        if (!v21)
          goto LABEL_81;
        v7 = *((_QWORD *)a1 + 1);
        goto LABEL_76;
      }
      if (v7 == 14)
      {
        v14 = *(_QWORD *)(*(_QWORD *)a1 + 6);
        v15 = **(_QWORD **)a1 == 0x665F6F745F74756CLL;
        v16 = 0x323374616F6C665FLL;
LABEL_51:
        if (v15 && v14 == v16)
        {
          v19 = 0;
          v4 = 1;
          return (v4 | v19) != 0;
        }
      }
    }
    else
    {
      if (v7 == 4)
      {
LABEL_60:
        a1 = *(_BYTE **)a1;
        if (*a1 == 87)
          return (char)a1[3] >= 49 && a1[3] <= 0x38u && ((a1[2] - 83) & 0xFD) == 0;
LABEL_86:
        v19 = 0;
        return (v4 | v19) != 0;
      }
      if (v7 == 11)
      {
        v14 = *(_QWORD *)(*(_QWORD *)a1 + 3);
        v15 = **(_QWORD **)a1 == 0x695F6F745F74756CLL;
        v16 = 0x38746E695F6F745FLL;
        goto LABEL_51;
      }
    }
LABEL_76:
    if (v7 == 12)
    {
      a1 = *(_BYTE **)a1;
      goto LABEL_88;
    }
    if (v7 == 13)
    {
      v26 = **(_QWORD **)a1 == 0x715F68635F726570 && *(_QWORD *)(*(_QWORD *)a1 + 5) == 0x656C616373715F68;
      goto LABEL_91;
    }
    goto LABEL_86;
  }
LABEL_26:
  if (a1[23] > 0xBu)
  {
    if (v2 != 12)
    {
      if (v2 != 14)
        goto LABEL_65;
      v17 = *(_QWORD *)a1 == 0x665F6F745F74756CLL && *(_QWORD *)(a1 + 6) == 0x323374616F6C665FLL;
      v3 = 14;
      if (v17)
      {
LABEL_47:
        v6 = 1;
LABEL_66:
        v4 |= v6;
      }
LABEL_81:
      if (v3 != 12)
      {
        if (v3 == 13)
        {
          v26 = *(_QWORD *)a1 == 0x715F68635F726570 && *(_QWORD *)(a1 + 5) == 0x656C616373715F68;
LABEL_91:
          v19 = v26;
          return (v4 | v19) != 0;
        }
        goto LABEL_86;
      }
LABEL_88:
      v26 = *(_QWORD *)a1 == 0x715F68635F726570 && *((_DWORD *)a1 + 2) == 1935763810;
      goto LABEL_91;
    }
    v21 = 0;
    v22 = a1;
    goto LABEL_68;
  }
  if (v2 != 4)
  {
    if (v2 == 11)
    {
      v13 = *(_QWORD *)a1 == 0x695F6F745F74756CLL && *(_QWORD *)(a1 + 3) == 0x38746E695F6F745FLL;
      v3 = 11;
      if (!v13)
        goto LABEL_81;
      goto LABEL_47;
    }
LABEL_65:
    v6 = 0;
    goto LABEL_66;
  }
  v8 = *a1;
LABEL_58:
  if (v8 != 87)
  {
    v3 = 4;
    goto LABEL_81;
  }
  return (char)a1[3] >= 49 && a1[3] <= 0x38u && ((a1[2] - 83) & 0xFD) == 0;
}

void Espresso::set_conv_quantized_weight_helper(double a1, double a2, int32x2_t a3, uint64_t a4, unsigned __int8 **a5, char *a6, unint64_t a7, uint64_t *a8, uint64_t a9, __int128 *a10, uint64_t *a11, int a12, char a13)
{
  uint64_t *v16;
  int *v20;
  int v21;
  int v22;
  uint64_t v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v45;

  v16 = a8;
  if (*((char *)a5 + 23) < 0)
  {
    switch((unint64_t)a5[1])
    {
      case 1uLL:
        v21 = **a5;
LABEL_6:
        if (v21 != 87 && v21 != 98)
          goto LABEL_32;
        break;
      case 4uLL:
        v22 = *(_DWORD *)*a5;
LABEL_21:
        if (v22 != 947216215 || (a13 & 1) != 0)
          goto LABEL_32;
        break;
      case 5uLL:
        if ((*(_DWORD *)*a5 != 828792663 || (*a5)[4] != 54) && (*(_DWORD *)*a5 != 828792674 || (*a5)[4] != 54))
          goto LABEL_32;
        break;
      case 0xAuLL:
        v20 = (int *)*a5;
LABEL_40:
        if (*(_QWORD *)v20 ^ 0x6E61725F38755F71 | *((unsigned __int16 *)v20 + 4) ^ 0x6567)
          v38 = 0;
        else
          v38 = a13 == 0;
        if (!v38)
          goto LABEL_32;
        break;
      default:
LABEL_32:
        v27 = *(_QWORD *)a9;
        if (!*(_QWORD *)a9)
        {
          v28 = (char *)operator new(0xD0uLL);
          v29 = v28;
          *((_QWORD *)v28 + 1) = 0;
          *((_QWORD *)v28 + 2) = 0;
          *(_QWORD *)v28 = &off_1E2DBD3F0;
          v30 = v28 + 24;
          v31 = *a11;
          v32 = (std::__shared_weak_count *)a11[1];
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
            v35 = *a10;
            *v30 = 0u;
            *(_OWORD *)(v28 + 40) = 0u;
            *(_OWORD *)(v28 + 56) = 0u;
            *(_OWORD *)(v28 + 72) = 0u;
            *(_OWORD *)(v28 + 88) = 0u;
            *(_OWORD *)(v28 + 104) = 0u;
            *(_OWORD *)(v28 + 120) = 0u;
            v36 = (unint64_t *)&v32->__shared_owners_;
            *((_QWORD *)v28 + 17) = v31;
            *((_QWORD *)v28 + 18) = v32;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          else
          {
            v35 = *a10;
            *v30 = 0u;
            *(_OWORD *)(v28 + 40) = 0u;
            *(_OWORD *)(v28 + 56) = 0u;
            *(_OWORD *)(v28 + 72) = 0u;
            *(_OWORD *)(v28 + 88) = 0u;
            *(_OWORD *)(v28 + 104) = 0u;
            *(_OWORD *)(v28 + 120) = 0u;
            *((_QWORD *)v28 + 17) = v31;
            *((_QWORD *)v28 + 18) = 0;
          }
          *(_OWORD *)(v28 + 152) = v35;
          *((_DWORD *)v28 + 42) = a12;
          *((_DWORD *)v28 + 43) = 1;
          v28[176] = 0;
          *((_QWORD *)v28 + 24) = 0;
          *((_QWORD *)v28 + 25) = 0;
          *(_QWORD *)(v28 + 180) = 0;
          v28[188] = 0;
          if (v32)
          {
            v39 = (unint64_t *)&v32->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          *(_QWORD *)&v45 = v30;
          *((_QWORD *)&v45 + 1) = v29;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a9, &v45);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          v16 = a8;
          if (*((_QWORD *)&v45 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v27 = *(_QWORD *)a9;
          *(_BYTE *)(*(_QWORD *)a9 + 152) = a13;
        }
        Espresso::quantized_weights_helper::__set_weight_raw_blob(v27, a1, a2, a3, (uint64_t)a5, (uint64_t)a5, a6, a7, v16);
        break;
    }
  }
  else
  {
    v20 = (int *)a5;
    switch(*((_BYTE *)a5 + 23))
    {
      case 1:
        v21 = *(unsigned __int8 *)a5;
        goto LABEL_6;
      case 4:
        v22 = *(_DWORD *)a5;
        goto LABEL_21;
      case 5:
        if ((*(_DWORD *)a5 != 828792663 || *((_BYTE *)a5 + 4) != 54)
          && (*(_DWORD *)a5 != 828792674 || *((_BYTE *)a5 + 4) != 54))
        {
          goto LABEL_32;
        }
        break;
      case 0xA:
        goto LABEL_40;
      default:
        goto LABEL_32;
    }
  }
}

void sub_1914DE35C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::analysis_result::~analysis_result(Espresso::analysis_result *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_params_base::~pass_params_base(Espresso::pass_params_base *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::net_pass::~net_pass(Espresso::net_pass *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E2DA6C90;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t Espresso::run_custom_pass_on_network(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  NSString *v5;
  Class v6;
  void *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("EspressoPass_%s"), v4);
  v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  v6 = NSClassFromString(v5);

  if (!v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v10 = a1;
    else
      v10 = (uint64_t *)*a1;
    v12 = v10;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Pass not found %s", &v12);
  }
  v7 = (void *)objc_opt_new();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (*((char *)a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = (uint64_t *)*a1;
    v12 = v11;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid pass %s", &v12);
  }
  v8 = objc_msgSend(v7, "runOnNetwork:", a2);

  return v8;
}

void sub_1914DE514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::transform_network_inplace(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35[2];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD *v44[7];
  char v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _BYTE v52[32];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  Espresso::net::net((Espresso::net *)v52);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)&v53);
  v53 = *(_OWORD *)(a1 + 32);
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign((uint64_t)&v55, (uint64_t *)(a1 + 56));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign((uint64_t)&v56, (uint64_t *)(a1 + 96));
  Espresso::net::_tag_inputs_and_outputs((Espresso::net *)v52);
  v50 = a1;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC3708;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v51 = v4;
  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)&v50, (_QWORD *)a1, a1);
  v40 = a1;
  v41 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  v39[0] = *(_QWORD *)(a1 + 16);
  v39[1] = (uint64_t)v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_DWORD *)(*(_QWORD *)v53 + 12);
  v38[0] = 0;
  v38[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v42, &v40, v39, v10, v38);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = v41;
  if (v41)
  {
    v14 = (unint64_t *)&v41->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  Espresso::sequential_builder::init_net_shape((Espresso::sequential_builder *)&v42);
  v16 = *(_QWORD *)(a2 + 24);
  if (!v16)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v16 + 48))(v16, v52, &v42);
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v42, v42, 1, &v36);
  v17 = v37;
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v35[0] = 0;
  v35[1] = 0;
  Espresso::net::setup_script(a1, v35, *(unsigned int *)(**(_QWORD **)(a1 + 32) + 12));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v49);
  v20 = v48;
  if (v48)
  {
    v21 = (unint64_t *)&v48->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v47;
  if (v47)
  {
    v24 = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v45 < 0)
    operator delete(v44[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v44, v44[1]);
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v51;
  if (v51)
  {
    v33 = (unint64_t *)&v51->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  Espresso::net::~net((Espresso::net *)v52);
}

void sub_1914DE8A0()
{
  __break(1u);
}

void sub_1914DE8E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1914DE90CLL);
}

void sub_1914DE8F0()
{
  JUMPOUT(0x1914DE90CLL);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__shared_ptr_pointer<Espresso::net *,noop_deleter,std::allocator<Espresso::net>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<Espresso::net *,noop_deleter,std::allocator<Espresso::net>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"12noop_deleter"))
    return a1 + 24;
  else
    return 0;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x19401CD90);
}

std::string *Espresso::scoped_env_var_kv::scoped_env_var_kv(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  int v8;
  std::string *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  std::string::pointer data;
  std::string *v14;
  const char *v15;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v7)
  {
    v8 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = this;
    if (v8 < 0)
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = getenv((const char *)v9);
    if (v10)
    {
      v11 = v10;
      v12 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(v12, v11);
      data = this[1].__r_.__value_.__l.__data_;
      this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      if (data)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)data);
      LOBYTE(v8) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v8 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 23) >= 0)
      v15 = (const char *)a3;
    else
      v15 = *(const char **)a3;
    if (setenv((const char *)v14, v15, 1))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to set an environment variable");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1914DEB88(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  __cxa_free_exception(v2);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::scoped_env_var_kv::~scoped_env_var_kv(const char **this)
{
  Espresso::scoped_env_var_kv *v1;
  const char *v2;
  Espresso *v3;
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t v7[16];

  v1 = (Espresso::scoped_env_var_kv *)this;
  if (*((char *)this + 23) < 0)
  {
    if (!this[1])
      goto LABEL_17;
  }
  else if (!*((_BYTE *)this + 23))
  {
    goto LABEL_17;
  }
  v2 = this[3];
  if (v2)
  {
    if ((*((_BYTE *)this + 23) & 0x80) != 0)
      this = (const char **)*this;
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    v3 = (Espresso *)setenv((const char *)this, v2, 1);
    if ((_DWORD)v3)
    {
      Espresso::espresso_os_log_subsystem(v3, v4);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v7 = 0;
        _os_log_error_impl(&dword_190DAF000, v5, OS_LOG_TYPE_ERROR, "Failure in destructor to restore environment variable.", v7, 2u);
      }

      std::terminate();
    }
  }
  else
  {
    if ((*((_BYTE *)this + 23) & 0x80) != 0)
      this = (const char **)*this;
    unsetenv((const char *)this);
  }
LABEL_17:
  v6 = *((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = 0;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  if (*((char *)v1 + 23) < 0)
    operator delete(*(void **)v1);
}

void Espresso::MPSGraphEngine::Kernels::elementwise_kernel::~elementwise_kernel(Espresso::MPSGraphEngine::Kernels::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  int64x2_t *v56;
  uint64_t v57;
  int64x2_t *v58;
  uint64_t v59;
  int64x2_t *v60;
  uint64_t v61;
  std::string v62;
  std::string __p;
  int64x2_t *v64;
  uint64_t v65;
  void **v66;
  unint64_t v67;
  std::string v68;
  std::string v69;
  int64x2_t *v70;
  uint64_t v71;
  void **v72;
  _BYTE v73[32];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a3[4] - a3[3];
  if (v5 == 64)
  {
    v74 = xmmword_191AA13A0;
    v75 = unk_191AA13B0;
    v76 = xmmword_191AA13C0;
    v77 = unk_191AA13D0;
    *(_OWORD *)v73 = xmmword_191AA1380;
    *(_OWORD *)&v73[16] = unk_191AA1390;
    v78 = 25;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&v69, (unsigned int *)v73, 25);
    *(_OWORD *)v73 = xmmword_191AA13E4;
    *(_OWORD *)&v73[16] = unk_191AA13F4;
    v74 = xmmword_191AA1404;
    v75 = unk_191AA1414;
    *(_QWORD *)&v76 = 0x7100000021;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&v68, (unsigned int *)v73, 18);
    *(_DWORD *)v73 = 101;
    std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set((uint64_t)&v66, (unsigned int *)v73, 1);
    v7 = *(_DWORD *)(a1 + 280);
    v8 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
    if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_, v7)|| std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, v7)|| std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v66, v67, v7))
    {
      if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(v8, *((unint64_t *)&v8 + 1), v7)&& (v9 = a3[1] - *a3, v9 != 64))
      {
        v31 = *(_QWORD *)(a2 + 8);
        v60 = *(int64x2_t **)a2;
        v61 = v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v9 = a3[1] - *a3;
        }
        std::to_string(&v62, v9 >> 6);
        v34 = std::string::insert(&v62, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: unary op accepts 1 input, received ");
        __p = *v34;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v73, (__int128 *)&__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v60, (Espresso::base_kernel::validate_for_engine_warning_t *)v73);
        v35 = (std::__shared_weak_count *)v77;
        if ((_QWORD)v77)
        {
          v36 = (unint64_t *)(v77 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v72 = (void **)&v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        v72 = (void **)&v73[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        if ((v73[23] & 0x80000000) != 0)
          operator delete(*(void **)v73);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v18 = v61;
        if (!v61)
          goto LABEL_111;
        v38 = (unint64_t *)(v61 + 8);
        do
          v20 = __ldaxr(v38);
        while (__stlxr(v20 - 1, v38));
      }
      else if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, v7)&& (v10 = a3[1] - *a3, (unint64_t)v10 >= 0x81))
      {
        v11 = *(_QWORD *)(a2 + 8);
        v58 = *(int64x2_t **)a2;
        v59 = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          v10 = a3[1] - *a3;
        }
        std::to_string(&v62, v10 >> 6);
        v14 = std::string::insert(&v62, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: binary op accepts 1 or 2 inputs, received ");
        __p = *v14;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v73, (__int128 *)&__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v58, (Espresso::base_kernel::validate_for_engine_warning_t *)v73);
        v15 = (std::__shared_weak_count *)v77;
        if ((_QWORD)v77)
        {
          v16 = (unint64_t *)(v77 + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v72 = (void **)&v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        v72 = (void **)&v73[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        if ((v73[23] & 0x80000000) != 0)
          operator delete(*(void **)v73);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v18 = v59;
        if (!v59)
          goto LABEL_111;
        v19 = (unint64_t *)(v59 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
      else
      {
        if (!std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>((uint64_t)v66, v67, v7)|| (v30 = a3[1] - *a3, v30 == 192))
        {
          v18 = 1;
LABEL_111:
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v66);
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v68);
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v69);
          return v18;
        }
        v39 = *(_QWORD *)(a2 + 8);
        v56 = *(int64x2_t **)a2;
        v57 = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
          v30 = a3[1] - *a3;
        }
        std::to_string(&v62, v30 >> 6);
        v42 = std::string::insert(&v62, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: ternary op accepts 3 inputs, received ");
        __p = *v42;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v73, (__int128 *)&__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v56, (Espresso::base_kernel::validate_for_engine_warning_t *)v73);
        v43 = (std::__shared_weak_count *)v77;
        if ((_QWORD)v77)
        {
          v44 = (unint64_t *)(v77 + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v72 = (void **)&v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        v72 = (void **)&v73[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
        if ((v73[23] & 0x80000000) != 0)
          operator delete(*(void **)v73);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v18 = v57;
        if (!v57)
          goto LABEL_111;
        v46 = (unint64_t *)(v57 + 8);
        do
          v20 = __ldaxr(v46);
        while (__stlxr(v20 - 1, v46));
      }
    }
    else
    {
      v47 = *(_QWORD *)(a2 + 8);
      v64 = *(int64x2_t **)a2;
      v65 = v47;
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        v7 = *(_DWORD *)(a1 + 280);
      }
      std::to_string(&v62, v7);
      v50 = std::string::insert(&v62, 0, "[Dispatch::MPSGraph::elementwise_kernel] Unsupported: elementwise operation ");
      __p = *v50;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v73, (__int128 *)&__p, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v64, (Espresso::base_kernel::validate_for_engine_warning_t *)v73);
      v51 = (std::__shared_weak_count *)v77;
      if ((_QWORD)v77)
      {
        v52 = (unint64_t *)(v77 + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v72 = (void **)&v75;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
      v72 = (void **)&v73[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v72);
      if ((v73[23] & 0x80000000) != 0)
        operator delete(*(void **)v73);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v18 = v65;
      if (!v65)
        goto LABEL_111;
      v54 = (unint64_t *)(v65 + 8);
      do
        v20 = __ldaxr(v54);
      while (__stlxr(v20 - 1, v54));
    }
    if (!v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
    }
    v18 = 0;
    goto LABEL_111;
  }
  v21 = *(_QWORD *)(a2 + 8);
  v70 = *(int64x2_t **)a2;
  v71 = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v5 = a3[4] - a3[3];
  }
  std::to_string(&v68, v5 >> 6);
  v24 = std::string::insert(&v68, 0, "[Dispatch::MPSGraph::elementwise_kernel] unsupported: number of outputs must be 1, received ");
  v69 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v73, (__int128 *)&v69, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v70, (Espresso::base_kernel::validate_for_engine_warning_t *)v73);
  v25 = (std::__shared_weak_count *)v77;
  if ((_QWORD)v77)
  {
    v26 = (unint64_t *)(v77 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v66 = (void **)&v75;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
  v66 = (void **)&v73[24];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
  if ((v73[23] & 0x80000000) != 0)
    operator delete(*(void **)v73);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  v18 = v71;
  if (v71)
  {
    v28 = (unint64_t *)(v71 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
    }
    return 0;
  }
  return v18;
}

void sub_1914DF4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v49 - 192));
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a36);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_1914DF6A8()
{
  JUMPOUT(0x1914DF6A0);
}

uint64_t std::unordered_set<Espresso::ELEMENTWISE_OPERATION>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1914DF710(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::fill_kernel::~fill_kernel(Espresso::MPSGraphEngine::Kernels::fill_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::fill_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int64x2_t *v28;
  std::__shared_weak_count *v29;
  int64x2_t *v30;
  std::__shared_weak_count *v31;
  void *v32[2];
  char v33;
  std::string __p;
  _BYTE v35[24];
  _BYTE v36[32];
  std::__shared_weak_count *v37;
  int64x2_t *v38;
  std::__shared_weak_count *v39;
  void **v40;

  if (*(_BYTE *)(a1 + 312))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    v38 = *(int64x2_t **)a2;
    v39 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::fill_kernel] unsupported: dynamic fill");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v37;
    if (v37)
    {
      v8 = (unint64_t *)&v37->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v40 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    v40 = (void **)v35;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = v39;
    if (!v39)
      return 0;
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_34;
  }
  if (*a3 != a3[1])
  {
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v30 = *(int64x2_t **)a2;
    v31 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::fill_kernel] unsupported: invalid number of inputs ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v37;
    if (v37)
    {
      v17 = (unint64_t *)&v37->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v40 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    v40 = (void **)v35;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = v31;
    if (!v31)
      return 0;
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 308))
    return 1;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v28 = *(int64x2_t **)a2;
  v29 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::fill_kernel] unsupported: nd_mode is false");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v28, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v40 = (void **)v36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)v35;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v33 < 0)
    operator delete(v32[0]);
  v10 = v29;
  if (v29)
  {
    v27 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v27);
    while (__stlxr(v12 - 1, v27));
LABEL_34:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_1914DFA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a19);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::einsum_kernel::~einsum_kernel(Espresso::MPSGraphEngine::Kernels::einsum_kernel *this)
{
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::einsum_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  int64x2_t *v39;
  std::__shared_weak_count *v40;
  int64x2_t *v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string v44;
  std::string __p;
  _BYTE v46[24];
  _BYTE v47[32];
  std::__shared_weak_count *v48;
  int64x2_t *v49;
  std::__shared_weak_count *v50;
  void **v51;

  v4 = (_DWORD *)*a3;
  v5 = a3[1] - *a3;
  if (v5 != 128)
  {
    v14 = *(std::__shared_weak_count **)(a2 + 8);
    v49 = *(int64x2_t **)a2;
    v50 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v5 = a3[1] - *a3;
    }
    std::to_string(&v43, v5 >> 6);
    v17 = std::string::insert(&v43, 0, "[Dispatch::MPSGraph::einsum_kernel] unsupported: number of inputs must be 2, received ");
    v44 = *v17;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v44, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v48;
    if (v48)
    {
      v19 = (unint64_t *)&v48->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v51 = (void **)v47;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v51);
    v51 = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v51);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v21 = v50;
    if (!v50)
      return 0;
    v22 = (unint64_t *)&v50->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    goto LABEL_78;
  }
  v6 = a3[3];
  v7 = a3[4] - v6;
  if (v7 != 64)
  {
    v24 = *(std::__shared_weak_count **)(a2 + 8);
    v41 = *(int64x2_t **)a2;
    v42 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v7 = a3[4] - a3[3];
    }
    std::to_string(&v43, v7 >> 6);
    v27 = std::string::insert(&v43, 0, "[Dispatch::MPSGraph::einsum_kernel] unsupported: number of outputs must be 1, received ");
    v44 = *v27;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v44, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v28 = v48;
    if (v48)
    {
      v29 = (unint64_t *)&v48->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v51 = (void **)v47;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v51);
    v51 = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v51);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v21 = v42;
    if (!v42)
      return 0;
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldaxr(v31);
    while (__stlxr(v23 - 1, v31));
    goto LABEL_78;
  }
  v8 = v4[5];
  v9 = v8;
  if (v8 == -1)
  {
    if (v4[4] == 1)
      v9 = 4;
    else
      v9 = 5;
  }
  v10 = v4[21];
  if (v10 == -1)
  {
    if (v4[20] == 1)
      v10 = 4;
    else
      v10 = 5;
  }
  if (v9 == v10)
  {
    v11 = v4[5];
    if (v8 == -1)
    {
      if (v4[4] == 1)
        v11 = 4;
      else
        v11 = 5;
    }
    v12 = *(_DWORD *)(v6 + 20);
    if (v12 == -1)
    {
      if (*(_DWORD *)(v6 + 16) == 1)
        v12 = 4;
      else
        v12 = 5;
    }
    if (v11 == v12)
    {
      if (v8 == -1)
      {
        if (v4[4] == 1)
          return 1;
      }
      else if ((v8 - 3) < 2)
      {
        return 1;
      }
    }
  }
  v32 = *(std::__shared_weak_count **)(a2 + 8);
  v39 = *(int64x2_t **)a2;
  v40 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "[Dispatch::MPSGraph::einsum_kernel] unsupported: tensors have mismatching ranks or ranks other than 3 or 4.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v44, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v21 = v40;
  if (v40)
  {
    v38 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v38);
    while (__stlxr(v23 - 1, v38));
LABEL_78:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return 0;
}

void sub_1914DFFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1914E024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_remove_squeeze::~pass_remove_squeeze(Espresso::pass_remove_squeeze *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_remove_squeeze::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_remove_squeeze::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  Espresso::zephyr::function_t *v5;
  uint64_t *i;
  Espresso::zephyr::ordered_block_t *v7;
  Espresso::zephyr::ordered_block_t **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  void *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  Espresso::zephyr::value_t **v32;
  Espresso::zephyr::value_t *v33;
  char *v34;
  char *j;
  Espresso::zephyr::node_t *v36;
  Espresso::zephyr::value_t **v37;
  Espresso::zephyr::value_t **v38;
  char *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::runtime_error *exception;
  uint64_t *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void **p_buf;
  std::__shared_weak_count *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _BYTE v74[24];
  _BYTE *v75;
  __int128 v76;
  unint64_t v77;
  _QWORD v78[3];
  __int128 buf;
  _QWORD v80[4];

  v80[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "initial");
  v75 = 0;
  Espresso::net::pprint((uint64_t)a1, (uint64_t)__p, (uint64_t)v74);
  v3 = v75;
  if (v75 == v74)
  {
    v4 = 4;
    v3 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v62 < 0)
    operator delete(__p[0]);
  v65 = 0;
  Espresso::zephyr::es_function_t::es_function_t((Espresso::zephyr::es_function_t *)__p, (Espresso::zephyr::context_t *)&v65, a1);
  for (i = v64; i != &v63; i = (uint64_t *)i[1])
  {
    v8 = (Espresso::zephyr::ordered_block_t **)(i + 2);
    v7 = (Espresso::zephyr::ordered_block_t *)i[2];
    v9 = (_QWORD *)*((_QWORD *)v7 + 15);
    if (v9 != (_QWORD *)((char *)v7 + 112))
    {
      v60 = i;
      do
      {
        v10 = v9[2];
        v11 = (unint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v10);
        if (v11 | (unint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v10)
          && *(_QWORD *)(v10 + 104) - *(_QWORD *)(v10 + 96) == 8)
        {
          v76 = 0uLL;
          v77 = 0;
          std::vector<Espresso::net *>::reserve((void **)&v76, (uint64_t)(*(_QWORD *)(v10 + 128) - *(_QWORD *)(v10 + 120)) >> 3);
          v14 = *(_QWORD *)(v10 + 120);
          v15 = *(_QWORD *)(v10 + 128);
          if (v14 == v15)
          {
            v24 = (char *)*((_QWORD *)&v76 + 1);
            v20 = (char *)v76;
            v30 = *(_QWORD *)(v10 + 120);
LABEL_43:
            if (v24 - v20 == v30 - v14)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v12, v13);
              v31 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
              {
                v47 = (_QWORD *)(v10 + 144);
                if (*(char *)(v10 + 167) < 0)
                  v47 = (_QWORD *)*v47;
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v47;
                _os_log_debug_impl(&dword_190DAF000, v31, OS_LOG_TYPE_DEBUG, "pass_remove_squeeze: move squeezes at %s", (uint8_t *)&buf, 0xCu);
              }

              v32 = *(Espresso::zephyr::value_t ***)(v10 + 96);
              if (*(Espresso::zephyr::value_t ***)(v10 + 104) == v32)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v33 = *v32;
              v34 = Espresso::zephyr::function_t::new_value((uint64_t)__p, (uint64_t)*v32 + 32);
              for (j = v20; j != v24; j += 8)
              {
                v36 = *(Espresso::zephyr::node_t **)j;
                v37 = *(Espresso::zephyr::value_t ***)(*(_QWORD *)j + 96);
                if (*(Espresso::zephyr::value_t ***)(*(_QWORD *)j + 104) == v37)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                v38 = (Espresso::zephyr::value_t **)*((_QWORD *)v36 + 15);
                if (*((Espresso::zephyr::value_t ***)v36 + 16) == v38)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                if ((Espresso::zephyr::node_t::replace_input_with((Espresso::zephyr::node_t *)v10, *v37, *v38) & 1) == 0)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
                  Espresso::invalid_state_error::invalid_state_error(exception);
                }
                Espresso::zephyr::node_t::remove_if_unused(v36);
              }
              Espresso::zephyr::node_t::replace_output_at(v10, 0, (Espresso::zephyr::value_t *)v34);
              v39 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v10 + 24), v10 + 144);
              v40 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) + 8);
              p_buf = 0;
              v67 = 0;
              Espresso::clone_kernel(v40, &p_buf, &buf);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)v39 + 1) + 8, &buf);
              v41 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
              {
                v42 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              v44 = v67;
              if (v67)
              {
                p_shared_owners = (unint64_t *)&v67->__shared_owners_;
                do
                  v46 = __ldaxr(p_shared_owners);
                while (__stlxr(v46 - 1, p_shared_owners));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v39, (Espresso::zephyr::value_t *)v34);
              Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v39, v33);
              Espresso::zephyr::ordered_block_t::insert_node_after(*v8, (Espresso::zephyr::node_t *)v39, (Espresso::zephyr::node_t *)v10);
            }
          }
          else
          {
            while (1)
            {
              v16 = *(_QWORD *)(*(_QWORD *)v14 + 80);
              if (!v16)
                break;
              v17 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(*(_QWORD *)(*(_QWORD *)v14 + 80));
              if (!v17)
                break;
              v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 320))(v17);
              if (*(int *)(v12 + 4) > 0 || *(_BYTE *)(v12 + 136) != 0)
                break;
              v19 = (char *)*((_QWORD *)&v76 + 1);
              v20 = (char *)v76;
              v21 = (char *)v76;
              if ((_QWORD)v76 != *((_QWORD *)&v76 + 1))
              {
                v22 = *(_DWORD *)v12;
                v23 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(*(_QWORD *)v76);
                v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 320))(v23);
                v21 = v19;
                if (v22 != *(_DWORD *)v12)
                  break;
              }
              if ((unint64_t)v21 >= v77)
              {
                v25 = (v21 - v20) >> 3;
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v27 = v77 - (_QWORD)v20;
                if ((uint64_t)(v77 - (_QWORD)v20) >> 2 > v26)
                  v26 = v27 >> 2;
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                  v12 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v12 = v26;
                if (v12)
                  v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
                else
                  v13 = 0;
                v28 = (char *)(v12 + 8 * v25);
                *(_QWORD *)v28 = v16;
                v24 = v28 + 8;
                if (v20 != v19)
                {
                  do
                  {
                    v29 = *((_QWORD *)v19 - 1);
                    v19 -= 8;
                    *((_QWORD *)v28 - 1) = v29;
                    v28 -= 8;
                  }
                  while (v19 != v20);
                  v20 = (char *)v76;
                }
                *(_QWORD *)&v76 = v28;
                v77 = v12 + 8 * (_QWORD)v13;
                if (v20)
                  operator delete(v20);
                v20 = v28;
              }
              else
              {
                *(_QWORD *)v21 = v16;
                v24 = v21 + 8;
              }
              *((_QWORD *)&v76 + 1) = v24;
              v14 += 8;
              if (v14 == v15)
              {
                v14 = *(_QWORD *)(v10 + 120);
                v30 = *(_QWORD *)(v10 + 128);
                goto LABEL_43;
              }
            }
          }
          if ((_QWORD)v76)
            operator delete((void *)v76);
        }
        v9 = (_QWORD *)v9[1];
        v7 = *v8;
      }
      while (v9 != (_QWORD *)((char *)*v8 + 112));
      i = v60;
    }
    v72[0] = &off_1E2DB1920;
    v72[1] = v8;
    v73 = v72;
    std::string::basic_string[abi:ne180100]<0>(&v76, "squeeze");
    std::string::basic_string[abi:ne180100]<0>(v78, "expand_dims");
    buf = 0uLL;
    v80[0] = 0;
    p_buf = (void **)&buf;
    LOBYTE(v67) = 0;
    *(_QWORD *)&buf = operator new(0x30uLL);
    *((_QWORD *)&buf + 1) = buf;
    v80[0] = buf + 48;
    v48 = 0;
    *((_QWORD *)&buf + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v80, &v76, &buf, (std::string *)buf);
    do
    {
      if (SHIBYTE(v78[v48 + 2]) < 0)
        operator delete((void *)v78[v48]);
      v48 -= 3;
    }
    while (v48 != -6);
    *(_QWORD *)&v76 = &off_1E2DB2EC8;
    *((_QWORD *)&v76 + 1) = v72;
    v78[0] = &v76;
    Espresso::zephyr::match_kernel_chain((uint64_t)v7, (uint64_t *)&buf, &v76);
    v49 = (__int128 *)v78[0];
    if ((__int128 *)v78[0] == &v76)
    {
      v49 = &v76;
      v50 = 4;
    }
    else
    {
      if (!v78[0])
        goto LABEL_78;
      v50 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_78:
    p_buf = (void **)&buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_buf);
    v51 = v73;
    if (v73 == v72)
    {
      v51 = v72;
      v52 = 4;
      goto LABEL_82;
    }
    if (v73)
    {
      v52 = 5;
LABEL_82:
      (*(void (**)(void))(*v51 + 8 * v52))();
    }
  }
  Espresso::zephyr_passes::fuse_conv_activation((Espresso::zephyr_passes *)__p, v5);
  Espresso::zephyr::es_function_t::lower_to_net((__int128 **)__p, a1);
  std::string::basic_string[abi:ne180100]<0>(&v76, "preshape");
  v71 = 0;
  Espresso::net::pprint((uint64_t)a1, (uint64_t)&v76, (uint64_t)v70);
  v53 = v71;
  if (v71 == v70)
  {
    v54 = 4;
    v53 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_89;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_89:
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  std::string::basic_string[abi:ne180100]<0>(&v76, "final");
  v69 = 0;
  Espresso::net::pprint((uint64_t)a1, (uint64_t)&v76, (uint64_t)v68);
  v55 = v69;
  if (v69 == v68)
  {
    v56 = 4;
    v55 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_96;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_96:
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)__p);
}

void sub_1914E0A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char *a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  char *v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;

  v56 = a49;
  if (a49 == v53)
  {
    v57 = 4;
    v56 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_6:
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2EC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2EC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_squeeze_kernelENS_26generic_expand_dims_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_squeeze_kernel,Espresso::generic_expand_dims_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1920;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1920;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  Espresso *v11;
  const char *v12;
  BOOL v15;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  Espresso::zephyr::node_t **v20;
  Espresso::zephyr::node_t **v21;
  Espresso::zephyr::value_t **v22;
  Espresso::zephyr::value_t **v23;
  Espresso::zephyr::node_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  __int16 v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (_QWORD *)a2[1];
  v5 = *a3;
  v6 = (_QWORD *)a3[1];
  v7 = (*(uint64_t (**)(_QWORD *))(*v4 + 320))(v4);
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(v7 + 4);
  v10 = *(_BYTE *)(v7 + 136);
  v11 = (Espresso *)(*(uint64_t (**)(_QWORD *))(*v6 + 320))(v6);
  v15 = v9 <= 0 && (v10 & 1) == 0 && *((_DWORD *)v11 + 1) <= 0 && *(_DWORD *)v11 == v8;
  if (!v15 || v4[1] != v6[1])
    return 0;
  Espresso::espresso_os_log_subsystem(v11, v12);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v25 = (_QWORD *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0)
      v25 = (_QWORD *)*v25;
    v26 = (_QWORD *)(v5 + 144);
    if (*(char *)(v5 + 167) < 0)
      v26 = (_QWORD *)*v26;
    v27 = 136315394;
    v28 = v25;
    v29 = 2080;
    v30 = v26;
    _os_log_debug_impl(&dword_190DAF000, v17, OS_LOG_TYPE_DEBUG, "pass_remove_squeeze: fusing at %s %s\n", (uint8_t *)&v27, 0x16u);
  }

  v18 = *(uint64_t **)(v5 + 96);
  if (*(uint64_t **)(v5 + 104) == v18)
LABEL_28:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v19 = *v18;
  v20 = *(Espresso::zephyr::node_t ***)(v19 + 56);
  v21 = *(Espresso::zephyr::node_t ***)(v19 + 64);
  while (v20 != v21)
  {
    v22 = *(Espresso::zephyr::value_t ***)(v5 + 96);
    if (*(Espresso::zephyr::value_t ***)(v5 + 104) == v22)
      goto LABEL_28;
    v23 = *(Espresso::zephyr::value_t ***)(v3 + 120);
    if (*(Espresso::zephyr::value_t ***)(v3 + 128) == v23)
      goto LABEL_28;
    v24 = *v20;
    v20 += 2;
    Espresso::zephyr::node_t::replace_input_with(v24, *v22, *v23);
  }
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  return 1;
}

uint64_t std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso19pass_remove_squeeze14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_remove_squeeze::run_on_network(Espresso::net &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_squeeze_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_expand_dims_kernel>)>::target_type()
{
}

void std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBDD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBDD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_remove_squeeze>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1914E1078(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dispatch_error_use_mpsgraph_compiler::~dispatch_error_use_mpsgraph_compiler(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dispatch_error_use_mps_buffers::~dispatch_error_use_mps_buffers(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dispatch_error_use_cpu_script::~dispatch_error_use_cpu_script(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

Espresso::cpu_context_transfer_algo_t *std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>(Espresso::cpu_context_transfer_algo_t **a1, const Espresso::cpu_context_transfer_algo_options *a2)
{
  _QWORD *v4;
  Espresso::cpu_context_transfer_algo_t *result;

  v4 = operator new(0xB0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBDB60;
  result = Espresso::cpu_context_transfer_algo_t::cpu_context_transfer_algo_t((Espresso::cpu_context_transfer_algo_t *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::cpu_context_transfer_algo_t *)v4;
  return result;
}

void sub_1914E11A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void to_fallback_if_bouncing_too_much(uint64_t a1, const char *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  _BOOL4 v14;
  int v15;
  NSObject *v16;
  Espresso *v17;
  const char *v18;
  double v19;
  NSObject *v20;
  std::runtime_error *exception;
  const char *v22;
  std::runtime_error *v23;
  _DWORD v24[2];
  __int16 v25;
  double v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v2 = (int)a2;
  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 56);
  v7 = (v6 - v5) >> 2;
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = v7;
    do
    {
      if (v8)
        v11 = *(_DWORD *)(v5 + 4 * (v8 - 1));
      else
        v11 = 0;
      v9 += (v11 != 0) ^ (*(_DWORD *)(v5 + 4 * v8++) != 0);
    }
    while (v10 != v8);
  }
  v12 = (float)v9 / (float)v7;
  v14 = *(float *)(a1 + 48) < 240.0 && v9 > 5;
  if (v12 <= 0.3)
    v14 = 0;
  v15 = v9 > 0x20 || v14;
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(float *)(a1 + 48);
    v24[0] = 67109888;
    v24[1] = v15;
    v25 = 2048;
    v26 = v19;
    v27 = 2048;
    v28 = v9;
    v29 = 2048;
    v30 = v12;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] bouncing_often=%d cost=%f n_bounces=%zu bounce_ratio=%f", (uint8_t *)v24, 0x26u);
  }

  if (v15)
  {
    Espresso::espresso_os_log_subsystem(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v24[0]) = 0;
      _os_log_debug_impl(&dword_190DAF000, v20, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.", (uint8_t *)v24, 2u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = exception;
    if (v2)
    {
      Espresso::dispatch_error_use_mpsgraph::dispatch_error_use_mpsgraph(exception, v22);
    }
    Espresso::dispatch_error_fallback_at_c_level::dispatch_error_fallback_at_c_level(exception, v22);
  }
}

void sub_1914E1424(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::dispatch_error_use_mpsgraph::dispatch_error_use_mpsgraph(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, "The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.");
  result->__vftable = (std::runtime_error_vtbl *)&off_1E2D95898;
  return result;
}

std::runtime_error *Espresso::dispatch_error_fallback_at_c_level::dispatch_error_fallback_at_c_level(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, "The network bounces between the ANE and GPU/CPU or between GPU & CPU too often. Please consider running the network on a different engine or change the architecture.");
  result->__vftable = (std::runtime_error_vtbl *)&off_1E2D9E1F0;
  return result;
}

std::runtime_error *Espresso::dispatch_error_use_mpsgraph_compiler::dispatch_error_use_mpsgraph_compiler(std::runtime_error *this)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, "");
  result->__vftable = (std::runtime_error_vtbl *)&off_1E2D9F368;
  return result;
}

std::runtime_error *Espresso::dispatch_error_use_cpu_script::dispatch_error_use_cpu_script(std::runtime_error *this)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, "");
  result->__vftable = (std::runtime_error_vtbl *)&off_1E2D994E0;
  return result;
}

void Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_2::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  Espresso ***v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  Espresso::create_context(*(int **)a2, &v25);
  v4 = v25;
  if (!v25)
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Could not create MPSBuffers context.");
  *(_BYTE *)(v25 + 56) = 1;
  v23 = v4;
  v24 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(uint64_t **)(a2 + 8);
  v8 = (std::__shared_weak_count *)v7[1];
  v22[0] = *v7;
  v22[1] = (uint64_t)v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(Espresso ****)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v21 = 0;
  try_dispatch(a1, &v23, v22, v11, v12, (unsigned int *)&v21 + 1, *(int **)(a2 + 40), (int *)&v21);
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1914E1694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t Espresso::dispatch_status_t::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;

  v4 = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  v5 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  return a1;
}

BOOL is_fully_on_fallback(char *a1, char *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  v2 = a2 - a1;
  v3 = (a2 - a1) >> 2;
  v4 = 0;
  if (a2 != a1)
  {
    if (v3 <= 1)
      v5 = 1;
    else
      v5 = (a2 - a1) >> 2;
    do
    {
      v6 = *(_DWORD *)a1;
      a1 += 4;
      if (v6)
        ++v4;
      --v5;
    }
    while (v5);
  }
  v7 = v3 - 1;
  return v2 > 0xC && v4 >= v7;
}

void sub_1914E192C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_transpose_inner_product::~pass_transpose_inner_product(Espresso::pass_transpose_inner_product *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_transpose_inner_product::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_transpose_inner_product::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[5];
  char v44[8];
  std::__shared_weak_count *v45;
  _QWORD *v46;
  _QWORD *v47;
  char **v48;
  char v49;
  void **v50[2];
  std::__shared_weak_count *v51;
  _QWORD v52[3];
  _QWORD v53[3];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a1, &__block_literal_global_6396);
  v5 = &__block_literal_global_2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v44, a1);
  v42 = 0u;
  memset(v43, 0, 28);
  v41 = 0u;
  v43[4] = a1;
  v6 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v6)
  {
    v7 = 0;
    do
    {
      LODWORD(v43[3]) = v7;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v42, *(_QWORD *)(v6 + 16 * v7), *(_QWORD *)(v6 + 16 * v7 + 8));
      v8 = v42;
      v9 = *(void **)(v42 + 64);
      if (v9
      {
        v10 = *(_QWORD *)(v8 + 72);
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
      }
      else
      {
        v10 = 0;
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      *(_QWORD *)&v41 = v9;
      *((_QWORD *)&v41 + 1) = v10;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v9 = (void *)v41;
      }
      if (v9)
        ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke_2((uint64_t)v9, (uint64_t *)&v41);
      ++v7;
      v6 = *((_QWORD *)a1 + 4);
    }
    while (v7 < (*((_QWORD *)a1 + 5) - v6) >> 4);
    v16 = v43[0];
    v17 = v43[1];
    if (v43[0] != v43[1])
    {
      v37 = a2;
      v18 = 0;
      do
      {
        v19 = *(_DWORD *)v16 + v18;
        *(_DWORD *)v16 = v19;
        v20 = *(void ***)(v16 + 8);
        if (v20)
        {
          LODWORD(v50[0]) = v19;
          v21 = *(std::__shared_weak_count **)(v16 + 16);
          v50[1] = v20;
          v51 = v21;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          memset(v52, 0, sizeof(v52));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v52, *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3));
          memset(v53, 0, sizeof(v53));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v53, *(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3));
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v48 = &v38;
          v49 = 0;
          v38 = (char *)operator new(0x48uLL);
          v39 = (uint64_t)v38;
          v40 = v38 + 72;
          v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v40, (uint64_t)v50, (uint64_t)&v54, (uint64_t)v38);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v38);
          v48 = &v38;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          v48 = (char **)v53;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          v48 = (char **)v52;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          v24 = v51;
          if (v51)
          {
            v25 = (unint64_t *)&v51->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v19);
          v27 = -1;
        }
        v18 += v27;
        v16 += 72;
      }
      while (v16 != v17);
      a2 = v37;
    }
  }
  v50[0] = (void **)v43;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v50);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v47);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v46);
  v34 = v45;
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
}

void sub_1914E1DE0(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34[2];

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v34[0] = *a2;
  v34[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "W_t_x");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  transpose_inner_product((uint64_t *)(v4 + 624), v34, (uint64_t)v32, __p);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v10 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v29[0] = *a2;
  v29[1] = (uint64_t)v9;
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "W_t_x_reverse");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x_reverse");
  transpose_inner_product((uint64_t *)(v10 + 640), v29, (uint64_t)v32, __p);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v28[0] = *a2;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "W_t_h");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  transpose_inner_product((uint64_t *)(v16 + 656), v28, (uint64_t)v32, __p);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  v27[0] = v22;
  v27[1] = (uint64_t)v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "W_t_h_reverse");
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h_reverse");
  transpose_inner_product((uint64_t *)(v22 + 672), v27, (uint64_t)v32, __p);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1914E2258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void transpose_inner_product(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *__p;
  std::__shared_weak_count *v53;
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  v5 = *a1;
  if (!v5 || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5) + 28))
    return;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 416))(&v59);
  if (v59)
  {
    Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v57, &v59);
    v9 = *a1;
    v55 = 0;
    v56 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "w_f32_t");
    (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 168))(v9, &v55, &__p, *(_QWORD *)(v57 + 16), 4 * *(int *)(v57 + 8) * (uint64_t)*(int *)(v57 + 12), 0);
    if (v54 < 0)
      operator delete(__p);
    v10 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *a1;
    v50 = 0;
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 400))(v13, &v50);
    v14 = v51;
    if (v51)
    {
      v15 = (unint64_t *)&v51->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *a2;
    if (*a2)
    {
      __p = 0;
      v53 = 0;
      (*(void (**)(uint64_t, void **, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, &__p, a3, *(_QWORD *)(v57 + 16), 4 * *(int *)(v57 + 8) * (uint64_t)*(int *)(v57 + 12), 0);
      v18 = v53;
      if (v53)
      {
        v19 = (unint64_t *)&v53->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>((uint64_t **)(*a2 + 152), a4);
      Espresso::abstract_kernel_with_weights_::erase_weights_blobs(*a2, a4);
    }
    v21 = v58;
    if (!v58)
      goto LABEL_63;
    v22 = (unint64_t *)&v58->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 472))(&v57);
    if (v57)
    {
      Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v55, &v57);
      v24 = *a1;
      v48 = 0;
      v49 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "w_f16_t");
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v24 + 168))(v24, &v48, &__p, *(_QWORD *)(v55 + 16), 2 * *(int *)(v55 + 8) * (uint64_t)*(int *)(v55 + 12), 0);
      if (v54 < 0)
        operator delete(__p);
      v25 = v49;
      if (v49)
      {
        v26 = (unint64_t *)&v49->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *a1;
      v46 = 0;
      v47 = 0;
      __p = 0;
      v53 = 0;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v28 + 464))(v28, &v46, &__p);
      v29 = v53;
      if (v53)
      {
        v30 = (unint64_t *)&v53->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v47;
      if (v47)
      {
        v33 = (unint64_t *)&v47->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *a2;
      if (*a2)
      {
        __p = 0;
        v53 = 0;
        (*(void (**)(uint64_t, void **, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v35 + 168))(v35, &__p, a3, *(_QWORD *)(v55 + 16), 2 * *(int *)(v55 + 8) * (uint64_t)*(int *)(v55 + 12), 0);
        v36 = v53;
        if (v53)
        {
          v37 = (unint64_t *)&v53->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>((uint64_t **)(*a2 + 152), a4);
        Espresso::abstract_kernel_with_weights_::erase_weights_blobs(*a2, a4);
      }
      v39 = v56;
      if (v56)
      {
        v40 = (unint64_t *)&v56->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    v21 = v58;
    if (!v58)
      goto LABEL_63;
    v42 = (unint64_t *)&v58->__shared_owners_;
    do
      v23 = __ldaxr(v42);
    while (__stlxr(v23 - 1, v42));
  }
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_63:
  v43 = v60;
  if (v60)
  {
    v44 = (unint64_t *)&v60->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1914E27E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 64);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (uint64_t *)v7[2];
        v8 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void Espresso::abstract_kernel_with_weights_::erase_weights_blobs(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;

  v4 = *(uint64_t **)(a1 + 288);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v4, a2))
  {
    v5 = (uint64_t **)(a1 + 280);
    v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 280, a2);
    if ((uint64_t *)(a1 + 288) != v6)
    {
      v7 = v6;
      v8 = (uint64_t *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        v10 = v6;
        do
        {
          v9 = (uint64_t *)v10[2];
          v11 = *v9 == (_QWORD)v10;
          v10 = v9;
        }
        while (!v11);
      }
      if (*v5 == v6)
        *v5 = v9;
      --*(_QWORD *)(a1 + 296);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v7 + 4));
      operator delete(v7);
    }
  }
}

void ___ZN8Espresso28pass_transpose_inner_product14run_on_networkERNS_3netE_block_invoke(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  uint64_t v11[2];
  uint64_t v12[2];

  v2 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11[0] = 0;
  v11[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  transpose_inner_product(v12, v11, (uint64_t)v9, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1914E2AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transpose_inner_product>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1914E379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;

  if (v50)
  {
    operator delete(v50);
    if (!v49)
    {
LABEL_3:
      if (!v48)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v49)
  {
    goto LABEL_3;
  }
  operator delete(v49);
  if (!v48)
  {
LABEL_5:
    Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v51 - 216));
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v48);
  goto LABEL_5;
}

void sub_1914E3B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)va);
  _Unwind_Resume(a1);
}

void sub_1914E4020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (v13)
  {
    operator delete(v13);
    if (!v12)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if (!v12)
  {
    goto LABEL_4;
  }
  operator delete(v12);
  goto LABEL_4;
}

void sub_1914E4304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1914E4438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1914E44F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<int,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1310;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<int,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1310;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<int,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<int,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<vision::DCN::boundingbox,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA10F0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<vision::DCN::boundingbox,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA10F0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<vision::DCN::boundingbox,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::lrn_kernel::~lrn_kernel(Espresso::MPSGraphEngine::Kernels::lrn_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::lrn_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14[2];
  char v15;
  std::string __p;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int64x2_t *v20;
  std::__shared_weak_count *v21;
  void **v22;

  if (a3[1] - *a3 == 64 && a3[4] - a3[3] == 64)
    return 1;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v20 = *(int64x2_t **)a2;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::lrn_kernel] unsupported: invalid number of inputs or outputs. ");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v14, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v22 = (void **)&v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v17;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 0;
}

void sub_1914E49FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 40);
  _Unwind_Resume(a1);
}

float Espresso::MPSEngine::context::begin_batch@<S0>(id *this@<X0>, _OWORD *a2@<X8>)
{
  char v4;
  float result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSEngine::context *,void>((Espresso::MPSEngine::batch **)&v8, this);
  v4 = *((_BYTE *)this + 184);
  result = *((float *)this + 42);
  v6 = v8;
  v7 = v8;
  *(_BYTE *)(v8 + 216) = *((_BYTE *)this + 172);
  *(float *)(v7 + 212) = result;
  *(_BYTE *)(v7 + 232) = v4;
  *a2 = v6;
  return result;
}

void Espresso::MPSBuffersEngine::context::network_transform_pre_allocation(Espresso::MPSBuffersEngine::context *this, Espresso::net *a2)
{
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];

  if (!*((_BYTE *)a2 + 568) && (Espresso::net::needs_interpreter(a2) & 1) == 0)
  {
    *((_BYTE *)a2 + 568) = 1;
    v4 = MEMORY[0x1E0C809B0];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
    v7[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v7[4] = this;
    v7[5] = a2;
    Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a2, v7);
    v6[0] = v4;
    v6[1] = 3221225472;
    v6[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
    v6[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v6[4] = this;
    v6[5] = a2;
    Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a2, v6);
    v5[0] = v4;
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
    v5[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v5[4] = this;
    v5[5] = a2;
    Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(a2, v5);
  }
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  signed int v15;
  uint64_t v16;
  int v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61[2];
  uint64_t v62[2];
  std::string *v63;
  std::string *v64;
  void **v65;
  std::string *v66;
  std::string *v67;
  void **p_data;
  std::string v69;
  uint64_t v70[3];
  uint64_t v71;
  std::string v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _OWORD v77[4];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _OWORD v83[4];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[25];
  int v88;
  char v89[8];
  int v90;
  int v91;
  void *v92;
  void *v93;
  std::string v94;
  std::string __s;
  std::string v96;
  std::string v97;
  std::string v98;
  const void *v99[2];
  char v100;
  void ***v101;
  char v102;
  std::string v103;
  uint64_t v104;
  std::string v105;
  uint64_t v106;
  std::string v107;
  __int128 v108;

  *(_QWORD *)&v108 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v99, "@BUFFERS2D");
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2[3].i32[2];
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      v4 = *(_QWORD *)(a1 + 40);
      v5 = a2[3].i32[2];
    }
    else
    {
      v98 = *(std::string *)(v6 + 16);
    }
    *(_QWORD *)&v83[0] = v5;
    v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, v83)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v97.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v8;
    }
    v9 = *(_QWORD *)(a1 + 40) + 96;
    v10 = a2[3].i32[2];
    *(_QWORD *)&v83[0] = v10;
    v11 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v83)[3];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v12;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v97.__r_.__value_.__l.__data_, v99, (uint64_t)&__s);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v96.__r_.__value_.__l.__data_, v99, (uint64_t)&v94);
    v13 = *(_QWORD *)(a1 + 40);
    memset((char *)&v77[1] + 8, 0, 40);
    v77[0] = xmmword_191A8AA80;
    *(_QWORD *)&v77[1] = 0xFFFFFFFF00000001;
    Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v83, v13 + 184, &v97, (uint64_t)v77);
    if (LODWORD(v83[1]) == 1)
      v14 = 4;
    else
      v14 = 5;
    if (DWORD1(v83[1]) == -1)
      v15 = v14;
    else
      v15 = DWORD1(v83[1]);
    if (*((_QWORD *)&v83[2] + 1))
    {
      *(_QWORD *)&v83[3] = *((_QWORD *)&v83[2] + 1);
      operator delete(*((void **)&v83[2] + 1));
    }
    v16 = *(_QWORD *)(a1 + 40);
    memset((char *)&v77[1] + 8, 0, 40);
    v77[0] = xmmword_191A8AA80;
    *(_QWORD *)&v77[1] = 0xFFFFFFFF00000001;
    Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v83, v16 + 184, &v96, (uint64_t)v77);
    if (LODWORD(v83[1]) == 1)
      v17 = 4;
    else
      v17 = 5;
    if (DWORD1(v83[1]) == -1)
      v18 = v17;
    else
      v18 = DWORD1(v83[1]);
    if (*((_QWORD *)&v83[2] + 1))
    {
      *(_QWORD *)&v83[3] = *((_QWORD *)&v83[2] + 1);
      operator delete(*((void **)&v83[2] + 1));
    }
    if (*((_QWORD *)&v77[2] + 1))
      operator delete(*((void **)&v77[2] + 1));
    if (v15 >= 4
      && v18 >= 4
      && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]) + 32))
    {
      v19 = *(_QWORD *)(a1 + 40);
      memset((char *)&v83[1] + 8, 0, 40);
      v83[0] = xmmword_191A8AA80;
      *(_QWORD *)&v83[1] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)v89, v19 + 184, &v97, (uint64_t)v83);
      if (v15 != 4 || v90 != 1 || v91 != 1)
      {
        v86 = 0u;
        memset(v87, 0, sizeof(v87));
        v84 = 0u;
        v85 = 0u;
        *(_QWORD *)&v83[0] = 0x200000000;
        memset(&v83[1], 0, 48);
        v88 = 2;
        v82 = 0;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        *(_QWORD *)&v77[0] = 0x200000000;
        memset(&v77[1], 0, 48);
        *((int32x2_t *)&v83[0] + 1) = vadd_s32(vdup_n_s32(v15), (int32x2_t)0xFFFFFFFEFFFFFFFFLL);
        *((int32x2_t *)&v77[0] + 1) = vadd_s32(vdup_n_s32(v18), (int32x2_t)-2);
        v20 = *(_QWORD *)(a1 + 40);
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(std::__shared_weak_count **)(v20 + 24);
        v75 = v22;
        v76 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        Espresso::abstract_engine_factory::shared(&v69);
        v25 = v69.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v72, "squeeze");
        LODWORD(v107.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v75 + 8))(*(_QWORD *)(v75 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v25, (uint64_t)&v75, (uint64_t)&v72, (uint64_t)v83, (int *)&v107);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        size = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
        if (v69.__r_.__value_.__l.__size_)
        {
          v27 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        Espresso::abstract_engine_factory::shared(&v69);
        v29 = v69.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v72, "expand_dims");
        LODWORD(v107.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v75 + 8))(*(_QWORD *)(v75 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)&v75, (uint64_t)&v72, (uint64_t)v77, (int *)&v107);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        v30 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
        if (v69.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
        v33 = (std::__shared_weak_count *)v74;
        v70[0] = v73;
        v70[1] = v74;
        if (v74)
        {
          v34 = (unint64_t *)(v74 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::string::basic_string[abi:ne180100]<0>(&v72, "squeeze");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v98.__r_.__value_.__l.__data_, v99, (uint64_t)&v107);
        v36 = std::string::append(&v107, "squeeze");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v105, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
        else
          v105 = v97;
        v66 = 0;
        v67 = 0;
        p_data = 0;
        v63 = (std::string *)&v66;
        LOBYTE(v64) = 0;
        v66 = (std::string *)operator new(0x18uLL);
        v67 = v66;
        p_data = (void **)&v66[1].__r_.__value_.__l.__data_;
        v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v105, (__int128 *)&v106, v66);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v103, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v103 = __s;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v101 = (void ***)&v63;
        v102 = 0;
        v63 = (std::string *)operator new(0x18uLL);
        v64 = v63;
        v65 = (void **)&v63[1].__r_.__value_.__l.__data_;
        v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (__int128 *)&v103, (__int128 *)&v104, v63);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v70, &v72, &v69, &v66, &v63);
        v101 = (void ***)&v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v63 = (std::string *)&v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (v33)
        {
          v38 = (unint64_t *)&v33->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v40 = (std::__shared_weak_count *)a2->i64[1];
        v62[0] = a2->i64[0];
        v62[1] = (uint64_t)v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        std::string::basic_string[abi:ne180100]<0>(&v72, "inner_product");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v107, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v107 = __s;
        memset(&v69, 0, sizeof(v69));
        v66 = &v69;
        LOBYTE(v67) = 0;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v69.__r_.__value_.__l.__size_ = v69.__r_.__value_.__r.__words[0];
        v69.__r_.__value_.__r.__words[2] = v69.__r_.__value_.__r.__words[0] + 24;
        v69.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69.__r_.__value_.__r.__words[2], (__int128 *)&v107, &v108, (std::string *)v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v105, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
        else
          v105 = v94;
        v66 = 0;
        v67 = 0;
        p_data = 0;
        v63 = (std::string *)&v66;
        LOBYTE(v64) = 0;
        v66 = (std::string *)operator new(0x18uLL);
        v67 = v66;
        p_data = (void **)&v66[1].__r_.__value_.__l.__data_;
        v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v105, (__int128 *)&v106, v66);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v62, &v72, &v98, (std::string **)&v69, &v66);
        v63 = (std::string *)&v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v66 = &v69;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (v40)
        {
          v43 = (unint64_t *)&v40->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v45 = (std::__shared_weak_count *)v71;
        v61[0] = v70[2];
        v61[1] = v71;
        if (v71)
        {
          v46 = (unint64_t *)(v71 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        std::string::basic_string[abi:ne180100]<0>(&v72, "expand_dims");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v98.__r_.__value_.__l.__data_, v99, (uint64_t)&v107);
        v48 = std::string::append(&v107, "expand_dims");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v105, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
        else
          v105 = v94;
        v66 = 0;
        v67 = 0;
        p_data = 0;
        v63 = (std::string *)&v66;
        LOBYTE(v64) = 0;
        v66 = (std::string *)operator new(0x18uLL);
        v67 = v66;
        p_data = (void **)&v66[1].__r_.__value_.__l.__data_;
        v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v105, (__int128 *)&v106, v66);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v103, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
        else
          v103 = v96;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v101 = (void ***)&v63;
        v102 = 0;
        v63 = (std::string *)operator new(0x18uLL);
        v64 = v63;
        v65 = (void **)&v63[1].__r_.__value_.__l.__data_;
        v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (__int128 *)&v103, (__int128 *)&v104, v63);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v61, &v72, &v69, &v66, &v63);
        v101 = (void ***)&v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v63 = (std::string *)&v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (v45)
        {
          v50 = (unint64_t *)&v45->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v52 = (std::__shared_weak_count *)v71;
        if (v71)
        {
          v53 = (unint64_t *)(v71 + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = (std::__shared_weak_count *)v74;
        if (v74)
        {
          v56 = (unint64_t *)(v74 + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v58 = v76;
        if (v76)
        {
          v59 = (unint64_t *)&v76->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete((void *)v99[0]);
  }
}

void sub_1914E57F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;

  a15 = (uint64_t)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 73) < 0)
    operator delete(*(void **)(v39 - 96));
  if (a36 < 0)
    operator delete(a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  v41 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v41;
    operator delete(v41);
  }
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (*(char *)(v39 - 233) < 0)
    operator delete(*(void **)(v39 - 256));
  if (*(char *)(v39 - 201) < 0)
    operator delete(*(void **)(v39 - 224));
  if (*(char *)(v39 - 177) < 0)
    operator delete(*(void **)(v39 - 200));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t i;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48[2];
  std::string *v49;
  std::string *v50;
  void **v51;
  std::string *v52;
  std::string *v53;
  void **p_data;
  std::string v55;
  uint64_t v56[3];
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  int v61;
  std::string v62;
  __int128 v63;
  __int128 __p;
  uint64_t v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  const void *v71[2];
  char v72;
  std::string **v73;
  char v74;
  std::string v75;
  uint64_t v76;
  std::string v77;
  uint64_t v78;
  std::string v79;
  std::string v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "@BUFFERS2D");
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2[3].i32[2];
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      v4 = *(_QWORD *)(a1 + 40);
      v5 = a2[3].i32[2];
    }
    else
    {
      v70 = *(std::string *)(v6 + 16);
    }
    v79.__r_.__value_.__r.__words[0] = v5;
    v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, &v79)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v69.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v8;
    }
    v9 = *(_QWORD *)(a1 + 40) + 56;
    v79.__r_.__value_.__r.__words[0] = a2[3].i32[2];
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v79.__r_.__value_.__r.__words[0], &v79);
    if (v10[4] - v10[3] != 24)
    {
      v11 = *(_QWORD *)(a1 + 40) + 56;
      v79.__r_.__value_.__r.__words[0] = a2[3].i32[2];
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v79.__r_.__value_.__r.__words[0], &v79)[3];
      if (*(char *)(v12 + 47) < 0)
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v12 + 24), *(_QWORD *)(v12 + 32));
      else
        v68 = *(std::string *)(v12 + 24);
      v13 = *(_QWORD *)(a1 + 40) + 96;
      v79.__r_.__value_.__r.__words[0] = a2[3].i32[2];
      v14 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v79.__r_.__value_.__r.__words[0], &v79)[3];
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v15;
      }
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v68.__r_.__value_.__l.__data_, v71, (uint64_t)&v66);
      v16 = *(_QWORD *)(a1 + 40);
      v65 = 0;
      __p = 0u;
      v63 = 0u;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = xmmword_191A8AA80;
      v62.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)&v79, v16 + 184, &v69, (uint64_t)&v62);
      v17 = HIDWORD(v79.__r_.__value_.__r.__words[2]);
      if (v80.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)&v81 = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        operator delete((void *)v80.__r_.__value_.__r.__words[2]);
      }
      v18 = *(_QWORD *)(a1 + 40);
      v65 = 0;
      __p = 0u;
      v63 = 0u;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = xmmword_191A8AA80;
      v62.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
      Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>((uint64_t)&v79, v18 + 184, &v67, (uint64_t)&v62);
      v19 = HIDWORD(v79.__r_.__value_.__r.__words[2]);
      if (v80.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)&v81 = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        operator delete((void *)v80.__r_.__value_.__r.__words[2]);
      }
      if ((_QWORD)__p)
        operator delete((void *)__p);
      if (v17 != -1 && v17 <= 3 && v19 != -1 && v19 <= 3)
      {
        v61 = 4;
        v60 = xmmword_191A93620;
        v20 = *(_QWORD *)(a1 + 40);
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(std::__shared_weak_count **)(v20 + 24);
        v58 = v22;
        v59 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        Espresso::abstract_engine_factory::shared(&v62);
        v25 = v62.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v79, "transpose");
        LODWORD(v55.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v58 + 8))(*(_QWORD *)(v58 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v25, (uint64_t)&v58, (uint64_t)&v79, (uint64_t)&v60, (int *)&v55);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        size = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
        if (v62.__r_.__value_.__l.__size_)
        {
          v27 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
        v29 = (std::__shared_weak_count *)v57;
        v56[0] = v56[2];
        v56[1] = v57;
        if (v57)
        {
          v30 = (unint64_t *)(v57 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        std::string::basic_string[abi:ne180100]<0>(&v79, "transpose");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v70.__r_.__value_.__l.__data_, v71, (uint64_t)&v55);
        v32 = std::string::append(&v55, "transpose");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v77, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
        else
          v77 = v68;
        v52 = 0;
        v53 = 0;
        p_data = 0;
        v49 = (std::string *)&v52;
        LOBYTE(v50) = 0;
        v52 = (std::string *)operator new(0x18uLL);
        v53 = v52;
        p_data = (void **)&v52[1].__r_.__value_.__l.__data_;
        v53 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v77, (__int128 *)&v78, v52);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v75, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
        else
          v75 = v66;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v73 = &v49;
        v74 = 0;
        v49 = (std::string *)operator new(0x18uLL);
        v50 = v49;
        v51 = (void **)&v49[1].__r_.__value_.__l.__data_;
        v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v51, (__int128 *)&v75, (__int128 *)&v76, v49);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v56, &v79, &v62, &v52, &v49);
        v73 = &v49;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        v49 = (std::string *)&v52;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (v29)
        {
          v34 = (unint64_t *)&v29->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v36 = (std::__shared_weak_count *)a2->i64[1];
        v48[0] = a2->i64[0];
        v48[1] = (uint64_t)v36;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        std::string::basic_string[abi:ne180100]<0>(&v62, "inner_product");
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v79, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
        else
          v79 = v69;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v80, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
        else
          v80 = v66;
        memset(&v55, 0, sizeof(v55));
        v52 = &v55;
        LOBYTE(v53) = 0;
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
        v55.__r_.__value_.__r.__words[2] = v55.__r_.__value_.__r.__words[0] + 48;
        v55.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55.__r_.__value_.__r.__words[2], (__int128 *)&v79, &v81, (std::string *)v55.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v77, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        else
          v77 = v67;
        v52 = 0;
        v53 = 0;
        p_data = 0;
        v49 = (std::string *)&v52;
        LOBYTE(v50) = 0;
        v52 = (std::string *)operator new(0x18uLL);
        v53 = v52;
        p_data = (void **)&v52[1].__r_.__value_.__l.__data_;
        v53 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v77, (__int128 *)&v78, v52);
        Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v48, &v62, &v70, (std::string **)&v55, &v52);
        v49 = (std::string *)&v52;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        v52 = &v55;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        for (i = 0; i != -6; i -= 3)
        {
          if (SHIBYTE(v80.__r_.__value_.__r.__words[i + 2]) < 0)
            operator delete(*(void **)((char *)&v79 + i * 8 + 24));
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (v36)
        {
          v40 = (unint64_t *)&v36->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v42 = (std::__shared_weak_count *)v57;
        if (v57)
        {
          v43 = (unint64_t *)(v57 + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = v59;
        if (v59)
        {
          v46 = (unint64_t *)&v59->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (v72 < 0)
      operator delete((void *)v71[0]);
  }
}

void sub_1914E63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  a17 = (uint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  v75 = 0;
  v76 = v73 - 144;
  while (1)
  {
    if (*(char *)(v76 + v75 + 47) < 0)
      operator delete(*(void **)(v76 + v75 + 24));
    v75 -= 24;
    if (v75 == -48)
    {
      if (a38 < 0)
        operator delete(__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
      if (a50 < 0)
        operator delete(a45);
      if (a56 < 0)
        operator delete(a51);
      if (a63 < 0)
        operator delete(a58);
      if (a70 < 0)
        operator delete(a65);
      if (a73 < 0)
        operator delete(a72);
      if (*(char *)(v73 - 225) < 0)
        operator delete(*(void **)(v73 - 248));
      _Unwind_Resume(a1);
    }
  }
}

void ___ZN8Espresso16MPSBuffersEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;

  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      v5 = v4;
      v6 = *(std::__shared_weak_count **)(a2 + 8);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = (_QWORD *)(v9 + 1024);
      if (*(char *)(v9 + 1047) < 0)
        v10 = (_QWORD *)*v10;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10, v4, v6);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = (void *)v5[52];
      v5[52] = v11;

      if (v6)
      {
        v13 = (unint64_t *)&v6->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1914E672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_1914E6B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *Espresso::map_const_get<std::map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  __int128 v13;

  v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, a3);
  if ((_QWORD *)(a2 + 8) == v7)
  {
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v13;
    v11 = *(const void **)(a4 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a4 + 48);
  }
  else
  {
    v8 = *(_OWORD *)(v7 + 7);
    v9 = *(_OWORD *)(v7 + 9);
    *(_QWORD *)(a1 + 32) = v7[11];
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (_QWORD *)(a1 + 40);
    v11 = (const void *)v7[12];
    v12 = v7[13];
  }
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10, v11, v12, (v12 - (uint64_t)v11) >> 2);
}

Espresso::MPSEngine::batch *std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSEngine::context *,void>(Espresso::MPSEngine::batch **a1, id *a2)
{
  _QWORD *v4;
  Espresso::MPSEngine::batch *result;

  v4 = operator new(0x120uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC2518;
  result = Espresso::MPSEngine::batch::batch((Espresso::MPSEngine::batch *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::MPSEngine::batch *)v4;
  return result;
}

void sub_1914E6C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::MPSBuffersEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  _QWORD v15[2];

  v6 = operator new(0x118uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9598;
  v8 = (unint64_t)(v6 + 3);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    Espresso::MPSBuffersEngine::blob_container::blob_container((uint64_t)(v6 + 3), v15, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    Espresso::MPSBuffersEngine::blob_container::blob_container((uint64_t)(v6 + 3), v15, a2);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

__n128 Espresso::MPSBuffersEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x110uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB99F8;
  v7 = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D72C40;
  *((_WORD *)v6 + 132) = 1;
  *((_BYTE *)v6 + 68) = 1;
  *((_BYTE *)v6 + 80) = 1;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E6E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::engine::~engine(Espresso::MPSBuffersEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, const Espresso::dev_op_params_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  uint64_t v8[2];
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v6 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9528;
  Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)v8, a2);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D70F18;
  *((_QWORD *)v6 + 38) = 0;
  *((_DWORD *)v6 + 78) = 0;
  *((_QWORD *)v6 + 54) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  Espresso::dev_op_params_t::operator=((uint64_t)(v6 + 304), v8);
  v17 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  if (v14 < 0)
    operator delete(__p);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E6FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 + 472);

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v27);
  *(_QWORD *)(v28 - 40) = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(_QWORD *)(v28 - 40) = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  if (a22 < 0)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a11)
    operator delete(a11);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v30);
  _Unwind_Resume(a1);
}

Espresso::dev_op_params_t *Espresso::dev_op_params_t::dev_op_params_t(Espresso::dev_op_params_t *this, const Espresso::dev_op_params_t *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v5;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)this + 11, *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)this + 14, *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  return this;
}

void sub_1914E7198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 48) = v14;
    operator delete(v14);
  }
  v15 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 24) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<Espresso::dev_op_params_t::shape>::__init_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1914E7254(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB98E0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D72688;
  *((_BYTE *)v6 + 312) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7344(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB96B0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D71808;
  *((_BYTE *)v6 + 320) = 0;
  v6[41] = 0;
  v6[57] = 0;
  v6[58] = 0;
  *((_DWORD *)v6 + 118) = 0;
  v6[38] = *a2;
  *(_QWORD *)((char *)v6 + 310) = *(_QWORD *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E73E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB96B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB96B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9480;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D70B10;
  v6[41] = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E74E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9950;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D72938;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 45) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7608(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x360uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9678;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D716B0;
  v8[103] = 0;
  *((_DWORD *)v8 + 208) = a3;
  v8[105] = 0;
  v8[107] = 0;
  v8[106] = 0;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E7710(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  __n128 result;

  v6 = (char *)operator new(0x228uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9870;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D72310;
  *((_QWORD *)v6 + 51) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v7;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v9;
  *((_QWORD *)v6 + 66) = 0;
  v10 = (void *)*((_QWORD *)v6 + 67);
  *((_QWORD *)v6 + 67) = 0;

  v11 = (void *)*((_QWORD *)v6 + 68);
  *((_QWORD *)v6 + 68) = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E783C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  unint64_t v15;
  id v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  double v22;
  uint64_t v23;
  void *v24;
  __n128 result;
  std::runtime_error *exception;

  v6 = operator new(0x148uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB93D8;
  v8 = *a2;
  v7 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((_QWORD *)v6 + 3) = &off_1E2D70708;
  *((_QWORD *)v6 + 39) = v7;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v8;
  v9 = (const void *)*((_QWORD *)v6 + 4);
  if (!v9
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v10[18];
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v14 = v10[18];
  }
  v16 = objc_alloc(MEMORY[0x1E0CC71F8]);
  LODWORD(v17) = 0;
  LODWORD(v18) = 1.0;
  LODWORD(v19) = 0;
  v20 = (void *)objc_msgSend(v16, "initWithLearningRate:gradientRescale:regularizationType:regularizationScale:", 0, v17, v18, v19);
  v21 = objc_alloc(MEMORY[0x1E0CC71F0]);
  LODWORD(v22) = *((_DWORD *)v6 + 78);
  v23 = objc_msgSend(v21, "initWithDevice:beta1:beta2:epsilon:timeStep:optimizerDescriptor:", v14, 0, v20, *((float *)v6 + 76), *((float *)v6 + 77), v22);
  v24 = (void *)*((_QWORD *)v6 + 40);
  *((_QWORD *)v6 + 40) = v23;

  if (!*((_QWORD *)v6 + 40))
    Espresso::throw_exception_selector<Espresso::generic_error>("fail to create mps adam kernel");

  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7A70(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::base_kernel *v2;
  void *v4;

  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB93D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB93D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::adam_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9448;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D709B8;
  v6[43] = 0;
  v6[44] = 0;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_BYTE *)v6 + 336) = *(_BYTE *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7B94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  const void *v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  double v21;
  uint64_t v22;
  void *v23;
  id v24;
  double v25;
  uint64_t v26;
  __n128 result;
  std::runtime_error *exception;

  v6 = operator new(0x148uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB93A0;
  v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((_QWORD *)v6 + 3) = &off_1E2D705B0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v7;
  *((_DWORD *)v6 + 78) = (_DWORD)a2;
  v8 = (const void *)*((_QWORD *)v6 + 4);
  if (!v8
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = v9[18];
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v13 = v9[18];
  }
  if (*((_BYTE *)v6 + 304))
  {
    v15 = objc_alloc(MEMORY[0x1E0CC71F8]);
    LODWORD(v16) = 0;
    LODWORD(v17) = 1.0;
    LODWORD(v18) = 0;
    v19 = (void *)objc_msgSend(v15, "initWithLearningRate:gradientRescale:regularizationType:regularizationScale:", 0, v16, v17, v18);
    v20 = objc_alloc(MEMORY[0x1E0CC7200]);
    LODWORD(v21) = *((_DWORD *)v6 + 77);
    v22 = objc_msgSend(v20, "initWithDevice:momentumScale:useNestrovMomentum:optimizerDescriptor:", v13, 0, v19, v21);
    v23 = (void *)*((_QWORD *)v6 + 40);
    *((_QWORD *)v6 + 40) = v22;

  }
  else
  {
    v24 = objc_alloc(MEMORY[0x1E0CC7200]);
    LODWORD(v25) = 0;
    v26 = objc_msgSend(v24, "initWithDevice:learningRate:", v13, v25);
    v19 = (void *)*((_QWORD *)v6 + 40);
    *((_QWORD *)v6 + 40) = v26;
  }

  if (!*((_QWORD *)v6 + 40))
    Espresso::throw_exception_selector<Espresso::generic_error>("fail to create mps sgd kernel");

  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7DEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::base_kernel *v2;
  void *v4;

  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB93A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB93A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::sgd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x1A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9758;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D71C58;
  v6[51] = 0;
  v6[52] = 0;
  v6[50] = 0;
  v6[40] = 0;
  v6[41] = 0;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = *a2;
  v6[41] = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E7F68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 400);
  if (v2)
  {
    *(_QWORD *)(a1 + 408) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB95D0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D712A8;
  v6[44] = 0;
  v6[45] = 0;
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  v6[42] = *(_QWORD *)(a2 + 32);
  v6[43] = 0;
  v6[45] = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E80A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB95D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB95D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reshape_kernel>::__on_zero_shared(id *a1)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  int v7;
  uint64_t v8;
  __n128 result;

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9800;
  v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D72060;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *((_WORD *)v6 + 152) = (_WORD)a2;
  v6[306] = (a2 | (v7 << 16)) >> 16;
  v6[320] = 0;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E81E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(_QWORD *)(a1 + 336) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  v8 = operator new(0x218uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB97C8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D71F08;
  v10 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 26) = v10;
  v8[54] = *(_QWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 24) = v12;
  v13 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v13;
  *((_DWORD *)v8 + 130) = a3;
  v8[66] = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E83DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB97C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB97C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  v8 = operator new(0x220uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9640;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D71558;
  v10 = a2[7];
  *((_OWORD *)v8 + 25) = a2[6];
  *((_OWORD *)v8 + 26) = v10;
  *((_OWORD *)v8 + 27) = a2[8];
  v11 = a2[3];
  *((_OWORD *)v8 + 21) = a2[2];
  *((_OWORD *)v8 + 22) = v11;
  v12 = a2[5];
  *((_OWORD *)v8 + 23) = a2[4];
  *((_OWORD *)v8 + 24) = v12;
  v13 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v13;
  *((_DWORD *)v8 + 132) = a3;
  v8[67] = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E84E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB96E8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D71960;
  *((_QWORD *)v8 + 49) = 0;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v8 + 100) = a3;
  v8[324] = 0;
  *((_QWORD *)v8 + 61) = 0;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E85F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB96E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB96E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(_QWORD *)(a1 + 336) = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  void *v7;
  __n128 result;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9838;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D721B8;
  *((_OWORD *)v6 + 20) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *((_QWORD *)v6 + 38) = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  v7 = (void *)*((_QWORD *)v6 + 49);
  *((_QWORD *)v6 + 49) = 0;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E874C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::l2_normalize_kernel>::__on_zero_shared(id *a1)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x1B0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB9988;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D72A90;
  *((_QWORD *)v8 + 41) = 0;
  *((_DWORD *)v8 + 107) = 0;
  *(_OWORD *)(v8 + 396) = 0u;
  *(_OWORD *)(v8 + 412) = 0u;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v8 + 84) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E8888(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::matrix_band_part_kernel>::__on_zero_shared(id *a1)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v8 = (char *)operator new(0x228uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB9918;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D727E0;
  *((_DWORD *)v8 + 135) = 0;
  *(_OWORD *)(v8 + 492) = 0u;
  *(_OWORD *)(v8 + 508) = 0u;
  *(_OWORD *)(v8 + 524) = 0u;
  *((_DWORD *)v8 + 136) = a3;
  v10 = a2[3];
  *((_OWORD *)v8 + 21) = a2[2];
  *((_OWORD *)v8 + 22) = v10;
  *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 + 60);
  v11 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v11;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E89C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_padding_kernel>::__on_zero_shared(id *a1)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  _BYTE v12[28];

  v8 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB9560;
  v11 = *a2;
  *(_OWORD *)v12 = a2[1];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 28);
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D71070;
  *((_QWORD *)v8 + 44) = 0;
  *((_QWORD *)v8 + 45) = 0;
  *((_DWORD *)v8 + 121) = a3;
  v8[488] = 0;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = *(_OWORD *)v12;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)&v12[9];
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E8B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::reduce_kernel>::__on_zero_shared(id *a1)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::base_kernel *)(a1 + 3);

  Espresso::base_kernel::~base_kernel(v2);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v8 = operator new(0x178uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB94B8;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 12);
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D70C68;
  v8[45] = 0;
  *((_DWORD *)v8 + 92) = a3;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = v12;
  *((_OWORD *)v8 + 21) = v13;
  *((_DWORD *)v8 + 88) = v14;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E8C58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB94B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB94B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB94F0;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D70DC0;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E8D60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB94F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB94F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  int v12;

  v8 = (char *)operator new(0x208uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB9720;
  v10 = *a2;
  v11 = a2[1];
  v12 = *((_DWORD *)a2 + 8);
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_QWORD *)v8 + 3) = &off_1E2D71AB8;
  *((_QWORD *)v8 + 52) = 0;
  *((_QWORD *)v8 + 55) = 0;
  *((_QWORD *)v8 + 56) = 0;
  *((_DWORD *)v8 + 117) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *((_DWORD *)v8 + 90) = v12;
  *(_OWORD *)(v8 + 328) = v10;
  *(_OWORD *)(v8 + 344) = v11;
  *((_QWORD *)v8 + 57) = 0;
  *((_QWORD *)v8 + 52) = 0;

  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E8EAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::MPSBuffersEngine::activation_kernel::~activation_kernel((Espresso::MPSBuffersEngine::activation_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9410;
  LODWORD(a2) = *a2;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D70860;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  v6[39] = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E8F84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

double ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v8 = operator new(0x1D8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9790;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 12);
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D71DB0;
  *((_BYTE *)v8 + 356) = 0;
  *((_DWORD *)v8 + 90) = a3;
  v8[46] = 0;
  *((_BYTE *)v8 + 376) = 0;
  v8[48] = 0;
  *((_BYTE *)v8 + 392) = 0;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 28) = 0u;
  v8[58] = 0;
  *((_OWORD *)v8 + 19) = v11;
  *((_OWORD *)v8 + 20) = v12;
  *((_OWORD *)v8 + 21) = v13;
  *((_DWORD *)v8 + 88) = v14;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E9110(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(_QWORD *)(a1 + 432) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 400);
  if (v4)
  {
    *(_QWORD *)(a1 + 408) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  void *v9;
  void *v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v8 = (char *)operator new(0x3A8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB98A8;
  v18 = a2[6];
  v19 = a2[7];
  v20 = *((_DWORD *)a2 + 32);
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v17 = a2[5];
  v12 = *a2;
  v13 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D72468;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  v8[480] = 0;
  *((_QWORD *)v8 + 71) = 0;
  v8[580] = 1;
  *((_QWORD *)v8 + 77) = 0;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *((_DWORD *)v8 + 174) = a3;
  *((_QWORD *)v8 + 99) = 0;
  *(_OWORD *)(v8 + 776) = 0u;
  *((_OWORD *)v8 + 44) = 0u;
  *((_OWORD *)v8 + 45) = 0u;
  *((_OWORD *)v8 + 46) = 0u;
  *((_QWORD *)v8 + 94) = 0;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(_OWORD *)(v8 + 888) = 0u;
  *((_QWORD *)v8 + 113) = 0;
  *(_OWORD *)(v8 + 920) = 0u;
  *(_OWORD *)(v8 + 360) = v14;
  *(_OWORD *)(v8 + 376) = v15;
  *(_OWORD *)(v8 + 328) = v12;
  *(_OWORD *)(v8 + 344) = v13;
  *((_DWORD *)v8 + 114) = v20;
  *(_OWORD *)(v8 + 424) = v18;
  *(_OWORD *)(v8 + 440) = v19;
  *(_OWORD *)(v8 + 392) = v16;
  *(_OWORD *)(v8 + 408) = v17;
  *((_QWORD *)v8 + 78) = 0;
  v9 = (void *)*((_QWORD *)v8 + 94);
  *((_QWORD *)v8 + 94) = 0;

  v10 = (void *)*((_QWORD *)v8 + 71);
  *((_QWORD *)v8 + 71) = 0;

  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1914E9324(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB98A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB98A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::MPSBuffersEngine::inner_product_kernel::~inner_product_kernel((id *)(a1 + 24));
}

__n128 ___ZN8Espresso16MPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9608;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D71400;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914E9424(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::CVAEngine::convolution_kernel::~convolution_kernel(void **this)
{
  char *v2;

  *this = &off_1E2DA70E8;
  v2 = (char *)(this + 81);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 87));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 85));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 83));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  char *v2;

  *this = &off_1E2DA70E8;
  v2 = (char *)(this + 81);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 87));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 85));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 83));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CVAEngine::convolution_kernel::__launch(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int64x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  const __CFAllocator *v19;
  const __CFAllocator *v20;
  const char **v21;
  const char *v22;
  const char *v23;
  int v24;
  int v25;
  uint64_t v26;
  const __CFData *shared_weak_owners;
  int v28;
  CFIndex Length;
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  uint64_t v33;
  __CFDictionary *Mutable;
  __CFDictionary *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  CFNumberRef v43;
  const void *v44;
  CFNumberRef v45;
  const void *v46;
  CFNumberRef v47;
  const void *v48;
  CFNumberRef v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  CFNumberRef v54;
  const void *v55;
  CFNumberRef v56;
  const void *v57;
  CFNumberRef v58;
  const void *v59;
  const void *v60;
  const void *v61;
  _QWORD *v62;
  const void *v63;
  const void *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *exception;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type size;
  std::string *v80;
  __int128 v81;
  std::runtime_error *v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  std::runtime_error *v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  std::string::size_type v97;
  std::string *v98;
  __int128 v99;
  unsigned int v100;
  unsigned int v101;
  void *v102;
  const __CFData *v103;
  void *v104;
  void *v105;
  void *v106;
  std::__shared_weak_count_vtbl *v107;
  void *value;
  const __CFData *v109;
  const __CFData *shared_owners;
  const __CFData *theData;
  int64x2_t *v112;
  __int128 v113;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::string v122;
  int v123;
  _QWORD valuePtr[2];

  v4 = *(const void **)(a1 + 8);
  if (v4
  {
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    v120 = v5;
    v121 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v120 = 0;
    v121 = 0;
  }
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = (int64x2_t *)v9[16];
    do
      v14 = __ldaxr(v11);
    while (__stlxr(v14 - 1, v11));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v13 = (int64x2_t *)v9[16];
  }
  v15 = getkCVANetOutputShapeSame();
  if (*(unsigned __int16 *)(a1 + 376) - 2 < 2
    || (v16 = v15, !*(_WORD *)(a1 + 376))
    && !*(_WORD *)(a1 + 384)
    && !*(_WORD *)(a1 + 386)
    && !*(_WORD *)(a1 + 388)
    && !*(_WORD *)(a1 + 390))
  {
    v16 = getkCVANetOutputShapeValid();
  }
  v112 = v13;
  v17 = (std::__shared_weak_count *)operator new(0x58uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC18A0;
  v17[1].std::__shared_count = 0u;
  *(_OWORD *)&v17[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v17[2].__shared_owners_ = 0u;
  v17[3].std::__shared_count = 0u;
  v118 = v17 + 1;
  v119 = v17;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v17[1].__shared_weak_owners_ = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)(*(_QWORD *)(a1 + 608) + 16), *(int *)(*(_QWORD *)(a1 + 608) + 8), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v17[2].__vftable = (std::__shared_weak_count_vtbl *)CFDataCreateWithBytesNoCopy(v19, *(const UInt8 **)(*(_QWORD *)(a1 + 560) + 16), 4 * *(int *)(*(_QWORD *)(a1 + 560) + 8), v20);
  v17[2].__shared_owners_ = (uint64_t)CFDataCreateWithBytesNoCopy(v19, *(const UInt8 **)(*(_QWORD *)(a1 + 576) + 16), 4 * *(int *)(*(_QWORD *)(a1 + 576) + 8), v20);
  v17[2].__shared_weak_owners_ = (uint64_t)CFDataCreateWithBytesNoCopy(v19, *(const UInt8 **)(*(_QWORD *)(a1 + 592) + 16), 4 * *(int *)(*(_QWORD *)(a1 + 592) + 8), v20);
  v21 = (const char **)v112[6].i64[1];
  if (!v21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v115, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    v74 = std::string::insert(&v115, 0, "CVA EXPECT_EQ failed ");
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v116, ":");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v114, 116);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v114;
    else
      v78 = (std::string *)v114.__r_.__value_.__r.__words[0];
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    else
      size = v114.__r_.__value_.__l.__size_;
    v80 = std::string::append(&v117, (const std::string::value_type *)v78, size);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v122.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v122);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v112[7].i64[0])
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v115, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    v83 = std::string::insert(&v115, 0, "CVA EXPECT_EQ failed ");
    v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v85 = std::string::append(&v116, ":");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v114, 117);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &v114;
    else
      v87 = (std::string *)v114.__r_.__value_.__r.__words[0];
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    else
      v88 = v114.__r_.__value_.__l.__size_;
    v89 = std::string::append(&v117, (const std::string::value_type *)v87, v88);
    v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v122.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v82, &v122);
    __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = *v21;
  if ((*v21)[23] < 0)
    v22 = *(const char **)v22;
  v17[3].__vftable = (std::__shared_weak_count_vtbl *)CFStringCreateWithCString(v19, v22, 0);
  v23 = *(const char **)v112[7].i64[0];
  if (v23[23] < 0)
    v23 = *(const char **)v23;
  v102 = (void *)v16;
  v17[3].__shared_owners_ = (uint64_t)CFStringCreateWithCString(v19, v23, 0);
  v107 = v17[3].__vftable;
  value = (void *)getkCVANetAcceleratorISP();
  v106 = (void *)getkCVANetFormatUInt8();
  v104 = (void *)getkCVANetFormatInt8();
  v24 = *(_DWORD *)(a1 + 356);
  v25 = *(_DWORD *)(a1 + 348);
  v26 = *(int *)(a1 + 344);
  v100 = *(__int16 *)(a1 + 398);
  v101 = *(__int16 *)(a1 + 396);
  shared_weak_owners = (const __CFData *)v17[1].__shared_weak_owners_;
  shared_owners = (const __CFData *)v17[2].__shared_owners_;
  theData = (const __CFData *)v17[2].__vftable;
  v109 = (const __CFData *)v17[2].__shared_weak_owners_;
  v105 = (void *)v17[3].__shared_owners_;
  v28 = *(_DWORD *)(a1 + 640);
  LODWORD(v117.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 352);
  LODWORD(v116.__r_.__value_.__l.__data_) = v24;
  LODWORD(v115.__r_.__value_.__l.__data_) = v25;
  LODWORD(v114.__r_.__value_.__l.__data_) = v26;
  valuePtr[0] = 0;
  v123 = v28;
  v103 = shared_weak_owners;
  Length = CFDataGetLength(shared_weak_owners);
  v30 = CFDataGetLength(theData);
  v31 = CFDataGetLength(shared_owners);
  v32 = CFDataGetLength(v109);
  if (Length != LODWORD(v117.__r_.__value_.__l.__data_) * v25 * v24 * (_DWORD)v26
    || (v33 = 4 * v26, v30 != 4 * v26)
    || v31 != v33
    || v32 != v33)
  {
    v17[1].__shared_owners_ = 0;
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v115, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    v92 = std::string::insert(&v115, 0, "CVA EXPECT_EQ failed ");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    v94 = std::string::append(&v116, ":");
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v114, 148);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v96 = &v114;
    else
      v96 = (std::string *)v114.__r_.__value_.__r.__words[0];
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    else
      v97 = v114.__r_.__value_.__l.__size_;
    v98 = std::string::append(&v117, (const std::string::value_type *)v96, v97);
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v122.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v91, &v122);
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v36 = (const void *)getkCVANetUnitType[0]();
  v37 = (const void *)getkCVANetUnitTypeConvolution[0]();
  CFDictionaryAddValue(Mutable, v36, v37);
  v38 = (const void *)getkCVANetUnitAcceleratorType[0]();
  CFDictionaryAddValue(Mutable, v38, value);
  v39 = (const void *)getkCVANetUnitName[0]();
  CFDictionaryAddValue(Mutable, v39, v107);
  v40 = (const void *)getkCVANetUnitDataType[0]();
  CFDictionaryAddValue(Mutable, v40, v106);
  v41 = (const void *)getkCVANetUnitBottomName[0]();
  CFDictionaryAddValue(Mutable, v41, v105);
  v42 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
  v43 = CFNumberCreate(v19, kCFNumberSInt32Type, (char *)valuePtr + 4);
  CFDictionaryAddValue(Mutable, v42, v43);
  CFRelease(v43);
  v44 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
  v45 = CFNumberCreate(v19, kCFNumberSInt32Type, valuePtr);
  CFDictionaryAddValue(Mutable, v44, v45);
  CFRelease(v45);
  v46 = (const void *)getkCVANetUnitInputChannels[0]();
  v47 = CFNumberCreate(v19, kCFNumberSInt32Type, &v115);
  CFDictionaryAddValue(Mutable, v46, v47);
  CFRelease(v47);
  v48 = (const void *)getkCVANetUnitOutputChannels[0]();
  v49 = CFNumberCreate(v19, kCFNumberSInt32Type, &v114);
  CFDictionaryAddValue(Mutable, v48, v49);
  CFRelease(v49);
  v50 = (const void *)getkCVANetUnitKernelType[0]();
  CFDictionaryAddValue(v35, v50, v104);
  v51 = (const void *)getkCVANetUnitOffsetOut[0]();
  CFDictionaryAddValue(v35, v51, theData);
  v52 = (const void *)getkCVANetUnitKernel[0]();
  CFDictionaryAddValue(v35, v52, v103);
  v53 = (const void *)getkCVANetUnitKernelWidth[0]();
  v54 = CFNumberCreate(v19, kCFNumberSInt32Type, &v117);
  CFDictionaryAddValue(v35, v53, v54);
  CFRelease(v54);
  v55 = (const void *)getkCVANetUnitKernelHeight[0]();
  v56 = CFNumberCreate(v19, kCFNumberSInt32Type, &v116);
  CFDictionaryAddValue(v35, v55, v56);
  CFRelease(v56);
  v57 = (const void *)getkCVANetUnitOffsetIn[0]();
  v58 = CFNumberCreate(v19, kCFNumberSInt32Type, &v123);
  CFDictionaryAddValue(v35, v57, v58);
  CFRelease(v58);
  v59 = (const void *)getkCVANetUnitScaleOut[0]();
  CFDictionaryAddValue(v35, v59, shared_owners);
  v60 = (const void *)getkCVANetUnitShiftOut[0]();
  CFDictionaryAddValue(v35, v60, v109);
  v61 = (const void *)getkCVANetUnitStep[0]();
  v62 = operator new(8uLL);
  *v62 = v101 | ((unint64_t)v100 << 32);
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 1);
  v122.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 1);
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  dictionaryAddVector<int>(v35, v61, &v122.__r_.__value_.__l.__data_);
  operator delete(v62);
  v63 = (const void *)getkCVANetUnitOutputShape[0]();
  CFDictionaryAddValue(v35, v63, v102);
  v64 = (const void *)getkCVANetUnitParams[0]();
  CFDictionaryAddValue(Mutable, v64, v35);
  CFRelease(v35);
  v17[1].__shared_owners_ = (uint64_t)Mutable;
  *(_QWORD *)&v113 = v17 + 1;
  *((_QWORD *)&v113 + 1) = v17;
  do
    v65 = __ldxr(v18);
  while (__stxr(v65 + 1, v18));
  Espresso::CVAEngine::CVACompiler::add_operation(v112, &v113);
  do
    v66 = __ldaxr(v18);
  while (__stlxr(v66 - 1, v18));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v67 = v119;
  if (v119)
  {
    v68 = (unint64_t *)&v119->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v121;
  if (v121)
  {
    v71 = (unint64_t *)&v121->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_1914EA098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;

  if (*(char *)(v44 - 105) < 0)
    operator delete(*(void **)(v44 - 128));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v43 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 160);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 144);
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v42);
  goto LABEL_14;
}

void Espresso::CVAEngine::convolution_kernel::share_weights(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::runtime_error *exception;

  if (!*(_QWORD *)a2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, v4[70], v4[71]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, v5[72], v5[73]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, v5[74], v5[75]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 76, v5[76], v5[77]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 78, v5[78], v5[79]);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1914EA308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::convolution_kernel::clear_weights(Espresso::CVAEngine::convolution_kernel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 70);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 72);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  *((_OWORD *)this + 37) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 76);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 78);
  *((_DWORD *)this + 160) = 0;
}

void Espresso::CVAEngine::convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t *v10;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  uint64_t v30;
  int v31;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::runtime_error *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::runtime_error *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::runtime_error *v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  __int128 v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;

  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v10 = a3;
    switch(*((_BYTE *)a3 + 23))
    {
      case 7:
        if (*(_DWORD *)a3 != 1650423912 || *(_DWORD *)((char *)a3 + 3) != 1935763810)
          goto LABEL_76;
        goto LABEL_15;
      case 9:
        if (*a3 != 0x656E72656B5F7868 || *((_BYTE *)a3 + 8) != 108)
          goto LABEL_76;
        goto LABEL_62;
      case 0xA:
        goto LABEL_45;
      case 0xB:
        if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 3) == 0x74756F656C616373)
          goto LABEL_77;
        if (*a3 != 0x74666968735F7868 || *(uint64_t *)((char *)a3 + 3) != 0x74756F7466696873)
          goto LABEL_76;
        goto LABEL_84;
      default:
        goto LABEL_76;
    }
  }
  switch(a3[1])
  {
    case 7:
      if (*(_DWORD *)*a3 != 1650423912 || *(_DWORD *)(*a3 + 3) != 1935763810)
        goto LABEL_76;
LABEL_15:
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v95, *(_DWORD *)(a1 + 344), 1, 1, 1);
      v13 = a1 + 560;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v13, (__int128 *)&v95);
      size = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
      if (v95.__r_.__value_.__l.__size_)
      {
        v15 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v17 = *(_QWORD *)v13;
      if (a5 != 4 * *(int *)(*(_QWORD *)v13 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v92, a5);
        v19 = std::string::insert(&v92, 0, "Unexpected size ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = std::string::append(&v93, "/");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v91, 4 * *(int *)(*(_QWORD *)v13 + 8));
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v91;
        else
          v23 = (std::string *)v91.__r_.__value_.__r.__words[0];
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        else
          v24 = v91.__r_.__value_.__l.__size_;
        v25 = std::string::append(&v94, (const std::string::value_type *)v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v95);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_83;
    case 9:
      if (*(_QWORD *)*a3 != 0x656E72656B5F7868 || *(_BYTE *)(*a3 + 8) != 108)
        goto LABEL_76;
LABEL_62:
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = 0uLL;
      if (a6 && *a6)
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v95, *a6, a6[1]);
        v90 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
        if (v95.__r_.__value_.__l.__size_)
        {
          v38 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
      }
      else
      {
        v90 = 0uLL;
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(&v94, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, (uint64_t *)&v90, *(_DWORD *)(a1 + 348) * *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 608, (__int128 *)&v94);
      v54 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
      if (v94.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
      if (v95.__r_.__value_.__l.__size_)
      {
        v61 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      break;
    case 10:
      v10 = (uint64_t *)*a3;
LABEL_45:
      v30 = *v10;
      v31 = *((unsigned __int16 *)v10 + 4);
      if (v30 == 0x61727478655F7868 && v31 == 26207)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v95, 1, 1, 1, 1);
        v33 = a1 + 624;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 624, (__int128 *)&v95);
        v34 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
        if (v95.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (a5 != 4 * *(int *)(*(_QWORD *)v33 + 8))
        {
          v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v92, a5);
          v64 = std::string::insert(&v92, 0, "Unexpected size ");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          v66 = std::string::append(&v93, "/");
          v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v91, *(int *)(*(_QWORD *)(a1 + 608) + 8));
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v91;
          else
            v68 = (std::string *)v91.__r_.__value_.__r.__words[0];
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v69 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          else
            v69 = v91.__r_.__value_.__l.__size_;
          v70 = std::string::append(&v94, (const std::string::value_type *)v68, v69);
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v63, &v95);
          __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        memcpy(*(void **)(*(_QWORD *)v33 + 16), a4, a5);
      }
      goto LABEL_76;
    case 11:
      v40 = (uint64_t *)*a3;
      if (*(_QWORD *)*a3 == 0x656C6163735F7868 && *(_QWORD *)(*a3 + 3) == 0x74756F656C616373)
      {
LABEL_77:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v95, *(_DWORD *)(a1 + 344), 1, 1, 1);
        v45 = a1 + 576;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v45, (__int128 *)&v95);
        v46 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
        if (v95.__r_.__value_.__l.__size_)
        {
          v47 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v17 = *(_QWORD *)v45;
        if (a5 != 4 * *(int *)(*(_QWORD *)v45 + 8))
        {
          v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v92, a5);
          v73 = std::string::insert(&v92, 0, "Unexpected size ");
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          v75 = std::string::append(&v93, "/");
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v91, 4 * *(int *)(*(_QWORD *)v45 + 8));
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v91;
          else
            v77 = (std::string *)v91.__r_.__value_.__r.__words[0];
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          else
            v78 = v91.__r_.__value_.__l.__size_;
          v79 = std::string::append(&v94, (const std::string::value_type *)v77, v78);
          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v72, &v95);
          __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_83:
        memcpy(*(void **)(v17 + 16), a4, a5);
      }
      else
      {
        v42 = *v40;
        v43 = *(uint64_t *)((char *)v40 + 3);
        if (v42 == 0x74666968735F7868 && v43 == 0x74756F7466696873)
        {
LABEL_84:
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(&v95, *(_DWORD *)(a1 + 344), 1, 1, 1);
          v49 = a1 + 592;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v49, (__int128 *)&v95);
          v50 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
          if (v95.__r_.__value_.__l.__size_)
          {
            v51 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          if (a5 != 4 * *(int *)(*(_QWORD *)v49 + 8))
          {
            v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v92, a5);
            v82 = std::string::insert(&v92, 0, "Unexpected size ");
            v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            v93.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            v84 = std::string::append(&v93, "/");
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v94.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v91, 4 * *(int *)(*(_QWORD *)v49 + 8));
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &v91;
            else
              v86 = (std::string *)v91.__r_.__value_.__r.__words[0];
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
            else
              v87 = v91.__r_.__value_.__l.__size_;
            v88 = std::string::append(&v94, (const std::string::value_type *)v86, v87);
            v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
            v95.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v89;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v81, &v95);
            __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          memcpy(*(void **)(*(_QWORD *)v49 + 16), a4, a5);
          if (a5)
          {
            v53 = *(_DWORD **)(*(_QWORD *)v49 + 16);
            do
            {
              *v53++ += 8;
              --a5;
            }
            while (a5);
          }
        }
        else
        {
LABEL_76:
          Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 648), a3, a4, a5);
        }
      }
      break;
    default:
      goto LABEL_76;
  }
}

void sub_1914EAD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

void Espresso::CVAEngine::convolution_kernel::__set_weights_finalize(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;

  if (!a1[76])
  {
    v2 = a1 + 76;
    Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v21, (Espresso::generic_convolution_kernel *)(a1 + 81), (uint64_t)a1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, v21, (uint64_t)v22);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, v23, (uint64_t)v24);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, v25, (uint64_t)v26);
    v3 = a1[74];
    if (v3 && *(_DWORD *)(v3 + 8))
    {
      v4 = 0;
      v5 = *(_QWORD *)(v3 + 16);
      do
        *(_DWORD *)(v5 + 4 * v4++) += 8;
      while (v4 < *(unsigned int *)(v3 + 8));
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v2, v27, (uint64_t)v28);
    v6 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v28;
    if (v28)
    {
      v10 = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

_QWORD *Espresso::CVAEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 696), *a2, a2[1]);
}

void Espresso::CVAEngine::convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1914EB04C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[3];
  std::__shared_weak_count *v19;

  v18[2] = a2;
  v19 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)a6[1];
  v18[0] = *a6;
  v18[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(a1, a2, a4, a5, v18, a7, a8);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1914EB150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t initValkCVANetOutputShapeSame(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetOutputShapeSame");
  if (v0)
  {
    result = *v0;
    constantValkCVANetOutputShapeSame = result;
  }
  else
  {
    result = constantValkCVANetOutputShapeSame;
  }
  getkCVANetOutputShapeSame = kCVANetOutputShapeSameFunction;
  return result;
}

uint64_t kCVANetOutputShapeSameFunction(void)
{
  return constantValkCVANetOutputShapeSame;
}

uint64_t initValkCVANetOutputShapeValid(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetOutputShapeValid");
  if (v0)
  {
    result = *v0;
    constantValkCVANetOutputShapeValid = result;
  }
  else
  {
    result = constantValkCVANetOutputShapeValid;
  }
  getkCVANetOutputShapeValid = kCVANetOutputShapeValidFunction;
  return result;
}

uint64_t kCVANetOutputShapeValidFunction(void)
{
  return constantValkCVANetOutputShapeValid;
}

uint64_t initValkCVANetAcceleratorISP(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetAcceleratorISP");
  if (v0)
  {
    result = *v0;
    constantValkCVANetAcceleratorISP = result;
  }
  else
  {
    result = constantValkCVANetAcceleratorISP;
  }
  getkCVANetAcceleratorISP = kCVANetAcceleratorISPFunction;
  return result;
}

uint64_t kCVANetAcceleratorISPFunction(void)
{
  return constantValkCVANetAcceleratorISP;
}

uint64_t initValkCVANetFormatUInt8(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatUInt8");
  if (v0)
  {
    result = *v0;
    constantValkCVANetFormatUInt8 = result;
  }
  else
  {
    result = constantValkCVANetFormatUInt8;
  }
  getkCVANetFormatUInt8 = kCVANetFormatUInt8Function;
  return result;
}

uint64_t kCVANetFormatUInt8Function(void)
{
  return constantValkCVANetFormatUInt8;
}

uint64_t initValkCVANetFormatInt8(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatInt8");
  if (v0)
  {
    result = *v0;
    constantValkCVANetFormatInt8 = result;
  }
  else
  {
    result = constantValkCVANetFormatInt8;
  }
  getkCVANetFormatInt8 = kCVANetFormatInt8Function;
  return result;
}

uint64_t kCVANetFormatInt8Function(void)
{
  return constantValkCVANetFormatInt8;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC18A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC18A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler::op_t>::__on_zero_shared(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 64);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
}

void Espresso::CVAEngine::pool_kernel::~pool_kernel(Espresso::CVAEngine::pool_kernel *this)
{
  char *v2;

  v2 = (char *)this + 472;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 488);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

{
  char *v2;

  v2 = (char *)this + 472;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 488);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CVAEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const char **v22;
  const __CFAllocator *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  float v31;
  float v32;
  double v33;
  int v34;
  int v35;
  const void *v36;
  const void *v37;
  const void *v38;
  int v39;
  int v40;
  int v41;
  const void *v42;
  int v43;
  __CFDictionary *Mutable;
  __CFDictionary *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  CFNumberRef v53;
  const void *v54;
  CFNumberRef v55;
  const void *v56;
  CFNumberRef v57;
  const void *v58;
  CFNumberRef v59;
  const void *v60;
  const void *v61;
  CFNumberRef v62;
  const void *v63;
  CFNumberRef v64;
  const void *v65;
  CFNumberRef v66;
  const void *v67;
  CFNumberRef v68;
  const void *v69;
  CFNumberRef v70;
  const void *v71;
  CFNumberRef v72;
  const void *v73;
  _QWORD *v74;
  const void *v75;
  const void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::runtime_error *exception;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  std::string::size_type size;
  std::string *v107;
  __int128 v108;
  std::runtime_error *v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  int64x2_t *v118;
  uint64_t v119;
  int v120;
  void *value;
  void *v122;
  __int128 v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  __int128 v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::string v135;
  int v136;
  uint64_t valuePtr;
  int v138;
  int v139[3];

  v8 = *(const void **)(a1 + 8);
  if (v8
  {
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    v133 = v9;
    v134 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v133 = 0;
    v134 = 0;
  }
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (int64x2_t *)v13[16];
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = (int64x2_t *)v13[16];
  }
  v19 = **a4;
  if (v19 && *(void (***)(Espresso::CVAEngine::blob_container *__hidden))v19 == &off_1E2DA7008)
  {
    v94 = (std::__shared_weak_count *)(*a4)[1];
    v131 = **a4;
    v132 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
  }
  else
  {
    v19 = 0;
    v131 = 0;
    v132 = 0;
  }
  v20 = **a3;
  if (v20 && *(void (***)(Espresso::CVAEngine::blob_container *__hidden))v20 == &off_1E2DA7008)
  {
    v97 = (std::__shared_weak_count *)(*a3)[1];
    v129 = **a3;
    v130 = v97;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
  }
  else
  {
    v20 = 0;
    v129 = 0;
    v130 = 0;
  }
  v122 = (void *)getkCVANetOutputShapeSame();
  if (*(unsigned __int16 *)(a1 + 340) - 2 < 2
    || !*(_WORD *)(a1 + 340)
    && !*(_WORD *)(a1 + 348)
    && !*(_WORD *)(a1 + 350)
    && !*(_WORD *)(a1 + 352)
    && !*(_WORD *)(a1 + 354))
  {
    v122 = (void *)getkCVANetOutputShapeValid();
  }
  v21 = (char *)operator new(0x58uLL);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = &off_1E2DC18A0;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_QWORD *)&v128 = v21 + 24;
  *((_QWORD *)&v128 + 1) = v21;
  v22 = (const char **)v17[6].i64[1];
  if (!v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v125, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    v101 = std::string::insert(&v125, 0, "CVA EXPECT_EQ failed ");
    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    v103 = std::string::append(&v126, ":");
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v124, 221);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v105 = &v124;
    else
      v105 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      size = v124.__r_.__value_.__l.__size_;
    v107 = std::string::append(&v127, (const std::string::value_type *)v105, size);
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v135);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v17[7].i64[0])
  {
    v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v125, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
    v110 = std::string::insert(&v125, 0, "CVA EXPECT_EQ failed ");
    v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    v112 = std::string::append(&v126, ":");
    v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v124, 222);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &v124;
    else
      v114 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      v115 = v124.__r_.__value_.__l.__size_;
    v116 = std::string::append(&v127, (const std::string::value_type *)v114, v115);
    v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v109, &v135);
    __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v24 = *v22;
  if ((*v22)[23] < 0)
    v24 = *(const char **)v24;
  *((_QWORD *)v21 + 9) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v24, 0);
  v25 = *(const char **)v17[7].i64[0];
  if (v25[23] < 0)
    v25 = *(const char **)v25;
  *((_QWORD *)v21 + 10) = CFStringCreateWithCString(v23, v25, 0);
  v26 = getkCVANetPoolingTypeMax();
  v27 = *(_DWORD *)(a1 + 304);
  if (!v27)
  {
    v26 = getkCVANetPoolingTypeAvg();
    v27 = *(_DWORD *)(a1 + 304);
  }
  if (v27 == 2)
  {
    v26 = getkCVANetPoolingTypeL2();
    v27 = *(_DWORD *)(a1 + 304);
  }
  value = (void *)v26;
  v118 = v17;
  v28 = *(int **)(*(_QWORD *)(a1 + 448) + 16);
  v30 = *v28;
  v29 = v28[1];
  if (v27)
  {
    v120 = v29;
  }
  else
  {
    v31 = ldexp(1.0, -v29) * (double)v30;
    v32 = 1.0 / (double)(*(_DWORD *)(a1 + 312) * *(_DWORD *)(a1 + 308)) * v31;
    v33 = v32;
    v34 = vcvtmd_s64_f64(log2(4096.0 / v32));
    if (v34 >= 20)
      v34 = 20;
    if (v34 <= 8)
      v35 = 8;
    else
      v35 = v34;
    v120 = v35;
    v30 = vcvtpd_s64_f64(ldexp(1.0, v35) * v33);
  }
  v36 = (const void *)*((_QWORD *)v21 + 9);
  v37 = (const void *)getkCVANetAcceleratorISP();
  v38 = (const void *)getkCVANetFormatUInt8();
  v39 = *(_DWORD *)(a1 + 312);
  v40 = *(_DWORD *)(v19 + 16);
  v41 = *(_DWORD *)(v20 + 16);
  v119 = *(unsigned int *)(a1 + 324);
  v42 = (const void *)*((_QWORD *)v21 + 10);
  v43 = *(_DWORD *)(a1 + 464);
  LODWORD(v127.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 308);
  LODWORD(v126.__r_.__value_.__l.__data_) = v39;
  LODWORD(v125.__r_.__value_.__l.__data_) = v40;
  LODWORD(v124.__r_.__value_.__l.__data_) = v41;
  v138 = v30;
  v139[0] = 0;
  valuePtr = 0;
  v136 = v43;
  Mutable = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v45 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = (const void *)getkCVANetUnitType[0]();
  v47 = (const void *)getkCVANetUnitTypePooling[0]();
  CFDictionaryAddValue(Mutable, v46, v47);
  v48 = (const void *)getkCVANetUnitAcceleratorType[0]();
  CFDictionaryAddValue(Mutable, v48, v37);
  v49 = (const void *)getkCVANetUnitName[0]();
  CFDictionaryAddValue(Mutable, v49, v36);
  v50 = (const void *)getkCVANetUnitDataType[0]();
  CFDictionaryAddValue(Mutable, v50, v38);
  v51 = (const void *)getkCVANetUnitBottomName[0]();
  CFDictionaryAddValue(Mutable, v51, v42);
  v52 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
  v53 = CFNumberCreate(v23, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFDictionaryAddValue(Mutable, v52, v53);
  CFRelease(v53);
  v54 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
  v55 = CFNumberCreate(v23, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, v54, v55);
  CFRelease(v55);
  v56 = (const void *)getkCVANetUnitInputChannels[0]();
  v57 = CFNumberCreate(v23, kCFNumberSInt32Type, &v125);
  CFDictionaryAddValue(Mutable, v56, v57);
  CFRelease(v57);
  v58 = (const void *)getkCVANetUnitOutputChannels[0]();
  v59 = CFNumberCreate(v23, kCFNumberSInt32Type, &v124);
  CFDictionaryAddValue(Mutable, v58, v59);
  CFRelease(v59);
  v60 = (const void *)getkCVANetUnitPoolingType[0]();
  CFDictionaryAddValue(v45, v60, value);
  v61 = (const void *)getkCVANetUnitKernelWidth[0]();
  v62 = CFNumberCreate(v23, kCFNumberSInt32Type, &v127);
  CFDictionaryAddValue(v45, v61, v62);
  CFRelease(v62);
  v63 = (const void *)getkCVANetUnitKernelHeight[0]();
  v64 = CFNumberCreate(v23, kCFNumberSInt32Type, &v126);
  CFDictionaryAddValue(v45, v63, v64);
  CFRelease(v64);
  v65 = (const void *)getkCVANetUnitOffsetIn[0]();
  v66 = CFNumberCreate(v23, kCFNumberSInt32Type, &v136);
  CFDictionaryAddValue(v45, v65, v66);
  CFRelease(v66);
  v67 = (const void *)getkCVANetUnitOffsetOut[0]();
  v68 = CFNumberCreate(v23, kCFNumberSInt32Type, v139);
  CFDictionaryAddValue(v45, v67, v68);
  CFRelease(v68);
  v69 = (const void *)getkCVANetUnitScaleOut[0]();
  v70 = CFNumberCreate(v23, kCFNumberSInt32Type, &v138);
  CFDictionaryAddValue(v45, v69, v70);
  CFRelease(v70);
  v71 = (const void *)getkCVANetUnitShiftOut[0]();
  v135.__r_.__value_.__r.__words[0] = (v120 - 8);
  v72 = CFNumberCreate(v23, kCFNumberSInt64Type, &v135);
  CFDictionaryAddValue(v45, v71, v72);
  CFRelease(v72);
  v73 = (const void *)getkCVANetUnitStep[0]();
  v74 = operator new(8uLL);
  *v74 = v119 | (v119 << 32);
  v135.__r_.__value_.__l.__size_ = (std::string::size_type)(v74 + 1);
  v135.__r_.__value_.__r.__words[2] = (std::string::size_type)(v74 + 1);
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
  dictionaryAddVector<int>(v45, v73, &v135.__r_.__value_.__l.__data_);
  operator delete(v74);
  v75 = (const void *)getkCVANetUnitOutputShape[0]();
  CFDictionaryAddValue(v45, v75, v122);
  v76 = (const void *)getkCVANetUnitParams[0]();
  CFDictionaryAddValue(Mutable, v76, v45);
  CFRelease(v45);
  *((_QWORD *)v21 + 4) = Mutable;
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  v123 = v128;
  if (*((_QWORD *)&v128 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  Espresso::CVAEngine::CVACompiler::add_operation(v118, &v123);
  if (v77)
  {
    v80 = (unint64_t *)&v77->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v130;
  if (v130)
  {
    v86 = (unint64_t *)&v130->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v132;
  if (v132)
  {
    v89 = (unint64_t *)&v132->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v134;
  if (v134)
  {
    v92 = (unint64_t *)&v134->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_1914EC05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (a22 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v46 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 192);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 176);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

void Espresso::CVAEngine::pool_kernel::clear_weights(Espresso::CVAEngine::pool_kernel *this)
{
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 54);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 56);
}

void *Espresso::CVAEngine::pool_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::runtime_error *exception;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a3 + 23) != 10)
    {
      v9 = (uint64_t *)a3;
      if (*(_BYTE *)(a3 + 23) != 14)
        return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
      goto LABEL_8;
    }
    if (*(_QWORD *)a3 != 0x61727478655F7868 || *(_WORD *)(a3 + 8) != 26207)
      return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
LABEL_31:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v47, 1, 1, 1, 1);
    v21 = a1 + 432;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 432, (__int128 *)&v47);
    size = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
    if (v47.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v21 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      v35 = std::string::insert(&v44, 0, "Unexpected size ");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v45, "/");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*(_QWORD *)v21 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v43;
      else
        v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v40 = v43.__r_.__value_.__l.__size_;
      v41 = std::string::append(&v46, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v47);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v21 + 16), a4, a5);
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
  }
  v10 = *(_QWORD *)(a3 + 8);
  if (v10 == 10)
  {
    if (**(_QWORD **)a3 != 0x61727478655F7868 || *(_WORD *)(*(_QWORD *)a3 + 8) != 26207)
      return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
    goto LABEL_31;
  }
  if (v10 != 14)
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
  v9 = *(uint64_t **)a3;
LABEL_8:
  v11 = *v9;
  v12 = *(uint64_t *)((char *)v9 + 6);
  if (v11 != 0x656C6163735F7868 || v12 != 0x74666968735F656CLL)
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 472), (_DWORD *)a3, a4, a5);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v47, 2, 1, 1, 1);
  v14 = a1 + 448;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, (__int128 *)&v47);
  v15 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (a5 != 4 * *(int *)(*(_QWORD *)v14 + 8))
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v44, a5);
    v26 = std::string::insert(&v44, 0, "Unexpected size ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v45, "/");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, 4 * *(int *)(*(_QWORD *)v14 + 8));
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v43;
    else
      v30 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v31 = v43.__r_.__value_.__l.__size_;
    v32 = std::string::append(&v46, (const std::string::value_type *)v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v25, &v47);
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return memcpy(*(void **)(*(_QWORD *)v14 + 16), a4, a5);
}

void sub_1914EC5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  char v34;
  uint64_t v35;

  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v34 & 1) != 0)
    __cxa_free_exception(v33);
  _Unwind_Resume(exception_object);
}

void Espresso::CVAEngine::pool_kernel::__set_weights_finalize(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;

  if (!*(_QWORD *)(a1 + 448))
  {
    v1 = (_QWORD *)(a1 + 448);
    Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v8, (uint64_t *)(a1 + 472));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1, v8, (uint64_t)v9);
    v2 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v9;
    if (v9)
    {
      v6 = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t initValkCVANetPoolingTypeMax(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeMax");
  if (v0)
  {
    result = *v0;
    constantValkCVANetPoolingTypeMax = result;
  }
  else
  {
    result = constantValkCVANetPoolingTypeMax;
  }
  getkCVANetPoolingTypeMax = kCVANetPoolingTypeMaxFunction;
  return result;
}

uint64_t kCVANetPoolingTypeMaxFunction(void)
{
  return constantValkCVANetPoolingTypeMax;
}

uint64_t initValkCVANetPoolingTypeAvg(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeAvg");
  if (v0)
  {
    result = *v0;
    constantValkCVANetPoolingTypeAvg = result;
  }
  else
  {
    result = constantValkCVANetPoolingTypeAvg;
  }
  getkCVANetPoolingTypeAvg = kCVANetPoolingTypeAvgFunction;
  return result;
}

uint64_t kCVANetPoolingTypeAvgFunction(void)
{
  return constantValkCVANetPoolingTypeAvg;
}

uint64_t initValkCVANetPoolingTypeL2(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_6618);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPoolingTypeL2");
  if (v0)
  {
    result = *v0;
    constantValkCVANetPoolingTypeL2 = result;
  }
  else
  {
    result = constantValkCVANetPoolingTypeL2;
  }
  getkCVANetPoolingTypeL2 = kCVANetPoolingTypeL2Function;
  return result;
}

uint64_t kCVANetPoolingTypeL2Function(void)
{
  return constantValkCVANetPoolingTypeL2;
}

void Espresso::CVAEngine::concat_kernel::~concat_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CVAEngine::concat_kernel::__launch(uint64_t a1, uint64_t a2, void (*****a3)(Espresso::CVAEngine::blob_container *__hidden this), uint64_t *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  void (***v20)(Espresso::CVAEngine::blob_container *__hidden);
  void (***v21)(Espresso::CVAEngine::blob_container *__hidden);
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  const char **v25;
  const __CFAllocator *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  __int128 **v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  void *v41;
  std::string *v42;
  void *v43;
  std::__shared_weak_count_vtbl *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  __CFDictionary *Mutable;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *exception;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  std::string::size_type size;
  std::string *v87;
  __int128 v88;
  std::runtime_error *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  void *value;
  int64x2_t *v99;
  char *v100;
  const __CFAllocator *allocator;
  __int128 v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  char *v108;
  std::__shared_weak_count *v109;
  void (***v110)(Espresso::CVAEngine::blob_container *__hidden);
  std::__shared_weak_count *v111;
  void (***v112)(Espresso::CVAEngine::blob_container *__hidden);
  std::__shared_weak_count *v113;
  void *v114;
  std::__shared_weak_count *v115;

  v8 = *(const void **)(a1 + 8);
  if (v8
  {
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    v114 = v9;
    v115 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v114 = 0;
    v115 = 0;
  }
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (int64x2_t *)v13[16];
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = (int64x2_t *)v13[16];
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = *(void (****)(Espresso::CVAEngine::blob_container *__hidden))v19;
    if (*(_QWORD *)v19 && *v20 == &off_1E2DA7008)
    {
      v74 = *(std::__shared_weak_count **)(v19 + 8);
      v112 = v20;
      v113 = v74;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
    }
    else
    {
      v112 = 0;
      v113 = 0;
    }
    v21 = **a3;
    if (v21 && *v21 == &off_1E2DA7008)
    {
      v77 = (std::__shared_weak_count *)(*a3)[1];
      v110 = **a3;
      v111 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
    }
    else
    {
      v110 = 0;
      v111 = 0;
    }
    v22 = (char *)operator new(0x58uLL);
    v23 = (std::__shared_weak_count *)v22;
    *((_QWORD *)v22 + 1) = 0;
    v24 = (unint64_t *)(v22 + 8);
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_1E2DC18A0;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    v108 = v22 + 24;
    v109 = (std::__shared_weak_count *)v22;
    v25 = (const char **)v17[6].i64[1];
    if (!v25)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v104, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
      v81 = std::string::insert(&v104, 0, "CVA EXPECT_EQ failed ");
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      v83 = std::string::append(&v105, ":");
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v103, 339);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v103;
      else
        v85 = (std::string *)v103.__r_.__value_.__r.__words[0];
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      else
        size = v103.__r_.__value_.__l.__size_;
      v87 = std::string::append(&v106, (const std::string::value_type *)v85, size);
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v107);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v17[7].i64[0])
    {
      v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v104, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAKernels.mm");
      v90 = std::string::insert(&v104, 0, "CVA EXPECT_EQ failed ");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v105, ":");
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v103, 340);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = &v103;
      else
        v94 = (std::string *)v103.__r_.__value_.__r.__words[0];
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      else
        v95 = v103.__r_.__value_.__l.__size_;
      v96 = std::string::append(&v106, (const std::string::value_type *)v94, v95);
      v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v89, &v107);
      __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v27 = *v25;
    v100 = v22 + 24;
    if ((*v25)[23] < 0)
      v27 = *(const char **)v27;
    *((_QWORD *)v22 + 9) = CFStringCreateWithCString(v26, v27, 0);
    v28 = *(const char **)v17[7].i64[0];
    if (v28[23] < 0)
      v28 = *(const char **)v28;
    v23[3].__shared_owners_ = (uint64_t)CFStringCreateWithCString(v26, v28, 0);
    v29 = objc_opt_new();
    v30 = *(void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v29;

    v31 = objc_opt_new();
    v32 = *(void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v31;

    v33 = objc_opt_new();
    v34 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v33;

    v35 = objc_opt_new();
    allocator = v26;
    v36 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v35;

    v99 = v17;
    v37 = (__int128 **)v17[7].i64[0];
    v38 = *v37;
    v39 = v37[1];
    if (*v37 != v39)
    {
      do
      {
        if (*((char *)v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
        }
        else
        {
          v40 = *v38;
          v107.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v40;
        }
        v41 = *(void **)(a1 + 344);
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v107;
        else
          v42 = (std::string *)v107.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "addObject:", v43);

        objc_msgSend(*(id *)(a1 + 352), "addObject:", &unk_1E2DEDB98);
        objc_msgSend(*(id *)(a1 + 360), "addObject:", &unk_1E2DEDB98);
        objc_msgSend(*(id *)(a1 + 368), "addObject:", &unk_1E2DEDB98);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v38 = (__int128 *)((char *)v38 + 24);
      }
      while (v38 != v39);
    }
    v44 = v23[3].__vftable;
    v45 = (const void *)getkCVANetAcceleratorISP();
    v46 = (const void *)getkCVANetFormatUInt8();
    v48 = *(const void **)(a1 + 344);
    v47 = *(const void **)(a1 + 352);
    v49 = *(const void **)(a1 + 360);
    value = *(void **)(a1 + 368);
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v51 = (const void *)getkCVANetUnitType[0]();
    v52 = (const void *)getkCVANetUnitTypeConcat[0]();
    CFDictionaryAddValue(Mutable, v51, v52);
    v53 = (const void *)getkCVANetUnitAcceleratorType[0]();
    CFDictionaryAddValue(Mutable, v53, v45);
    v54 = (const void *)getkCVANetUnitName[0]();
    CFDictionaryAddValue(Mutable, v54, v44);
    v55 = (const void *)getkCVANetUnitDataType[0]();
    CFDictionaryAddValue(Mutable, v55, v46);
    v56 = (const void *)getkCVANetUnitBottomName[0]();
    CFDictionaryAddValue(Mutable, v56, v48);
    v57 = (const void *)getkCVANetUnitBottomOutputIndex[0]();
    CFDictionaryAddValue(Mutable, v57, v47);
    v58 = (const void *)getkCVANetUnitBottomOutputChannelStart[0]();
    CFDictionaryAddValue(Mutable, v58, v49);
    v59 = (const void *)getkCVANetUnitInputChannels[0]();
    CFDictionaryAddValue(Mutable, v59, value);
    v23[1].__shared_owners_ = (uint64_t)Mutable;
    *(_QWORD *)&v102 = v100;
    *((_QWORD *)&v102 + 1) = v23;
    do
      v60 = __ldxr(v24);
    while (__stxr(v60 + 1, v24));
    Espresso::CVAEngine::CVACompiler::add_operation(v99, &v102);
    do
      v61 = __ldaxr(v24);
    while (__stlxr(v61 - 1, v24));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    v62 = v109;
    if (v109)
    {
      v63 = (unint64_t *)&v109->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v111;
    if (v111)
    {
      v66 = (unint64_t *)&v111->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = v113;
    if (v113)
    {
      v69 = (unint64_t *)&v113->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  v71 = v115;
  if (v115)
  {
    v72 = (unint64_t *)&v115->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1914ED0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a46 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v47 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 152);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 136);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 120);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 104);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v46);
  goto LABEL_14;
}

void Espresso::CVAEngine::context_transfer_kernel::~context_transfer_kernel(Espresso::CVAEngine::context_transfer_kernel *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CVAEngine::context_transfer_kernel::__launch(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v4[16];
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v8 = v4[16];
  }
  v10 = *(_QWORD *)(a1 + 312);
  v11 = *(std::__shared_weak_count **)(a1 + 320);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(_QWORD *)(v8 + 232))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX: only one context transfer is supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v8 + 232), v10, (uint64_t)v11);
  v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 32) + 16 * *(int *)(v8 + 88));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v8 + 216), *v14, v14[1]);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1914ED3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::context_transfer_kernel::blob_options(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

const char *Espresso::generic_context_transfer_kernel::kernel_type_str(Espresso::generic_context_transfer_kernel *this)
{
  return "context_transfer";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::context_transfer_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::abstract_executor_t::get_subnetwork(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16)
                   + 8
                   * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)(a1 + 40), a2)[5]);
}

void Espresso::abstract_executor_t::setup_subnetworks(Espresso::abstract_executor_t *this)
{
  void **v2;
  char *v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void **v34;

  v2 = (void **)((char *)this + 16);
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  v3 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)this + 40);
  std::vector<Espresso::net *>::reserve(v2, *((_QWORD *)*(v2 - 1) + 126) + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
  v34 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v34)+ 5) = 0;
  if (v33 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v34 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v34)+ 5) = 0;
  if (v33 < 0)
    operator delete(__p[0]);
  v5 = (char *)*((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (v5 - (_BYTE *)*v2) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
LABEL_41:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*v2;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *((_QWORD *)this + 1);
    v6 = v12 + 1;
    v15 = (char *)*((_QWORD *)this + 2);
    v14 = (char *)*((_QWORD *)this + 3);
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*v2;
    }
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v6;
    *((_QWORD *)this + 4) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v5 = *((_QWORD *)this + 1);
    v6 = v5 + 8;
  }
  *((_QWORD *)this + 3) = v6;
  v17 = *(_QWORD **)(*((_QWORD *)this + 1) + 1000);
  if (v17)
  {
    v18 = 1;
    do
    {
      __p[0] = v17 + 2;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v17 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)__p)[5] = v18;
      v19 = v17[5];
      v21 = (char *)*((_QWORD *)this + 3);
      v20 = *((_QWORD *)this + 4);
      if ((unint64_t)v21 >= v20)
      {
        v23 = (v21 - (_BYTE *)*v2) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          goto LABEL_41;
        v24 = v20 - (_QWORD)*v2;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
        else
          v27 = 0;
        v28 = (_QWORD *)(v26 + 8 * v23);
        *v28 = v19;
        v22 = v28 + 1;
        v30 = (char *)*((_QWORD *)this + 2);
        v29 = (char *)*((_QWORD *)this + 3);
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = (char *)*v2;
        }
        *((_QWORD *)this + 2) = v28;
        *((_QWORD *)this + 3) = v22;
        *((_QWORD *)this + 4) = v26 + 8 * v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v21 = v19;
        v22 = v21 + 8;
      }
      *((_QWORD *)this + 3) = v22;
      ++v18;
      v17 = (_QWORD *)*v17;
    }
    while (v17);
  }
}

void sub_1914ED6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = *a4;
  v17 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 5) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1914ED91C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_executor_t::abstract_executor_t(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)result = off_1E2D84530;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  v3 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(result + 80) = *(_QWORD *)(*a2 + 16);
  *(_QWORD *)(result + 88) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void Espresso::abstract_executor_t::~abstract_executor_t(Espresso::abstract_executor_t *this)
{
  void *v2;

  *(_QWORD *)this = off_1E2D84530;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 40);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void Espresso::load_network_layers(std::string *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string __p;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  _QWORD v20[2];
  _QWORD v21[51];
  _QWORD v22[20];

  v22[19] = *MEMORY[0x1E0C80C00];
  Espresso::find_base_dir((uint64_t)&v19, a1);
  Espresso::gen_precompilation_info_fstream((Espresso::ANECompilerEngine *)&v17, (uint64_t *)a1);
  std::ifstream::basic_ifstream(v20);
  if (v21[15])
  {
    v12 = v17;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::load_network_layers_internal(a6, (uint64_t)v20, &v19, a2, a3, v12, a4, a5, 0, &__p, 0, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*a6)
      std::string::operator=((std::string *)(*a6 + 592), a1);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  v20[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401C8BC](v21);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v22);
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1914EDB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  uint64_t v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28);
  std::ifstream::~ifstream(&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_internal(uint64_t *a1, uint64_t a2, std::string *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, unsigned int a7, _QWORD *a8, FILE *a9, const std::string *a10, char a11, uint64_t a12, uint64_t a13)
{
  void *v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40[2];
  uint64_t v41[2];
  void *v42[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  char v47;
  char *v48[3];
  uint64_t v49;
  uint64_t v50;

  v21 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v49, (uint64_t)v21, a8);
  v22 = v49;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 280))(v49, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v23 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v22 + 24))(v22, __p);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "shape");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v22 + 120))(&v44, v22, v42);
    Espresso::load_network_shape(&v44, (uint64_t)__p);
    v24 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v43 < 0)
      operator delete(v42[0]);
    v27 = (std::__shared_weak_count *)v50;
    v41[0] = v49;
    v41[1] = v50;
    if (v50)
    {
      v28 = (unint64_t *)(v50 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    Espresso::load_network_layers_internal(a1, v41, a3, a4, (uint64_t)__p, a6, a7, a9, a10, a11, a12, a13);
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v48, v48[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  }
  else
  {
    v32 = (std::__shared_weak_count *)v50;
    v40[0] = v22;
    v40[1] = v50;
    if (v50)
    {
      v33 = (unint64_t *)(v50 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    Espresso::load_network_layers_internal(a1, v40, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13);
    if (v32)
    {
      v35 = (unint64_t *)&v32->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v37 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v38 = (unint64_t *)(v50 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1914EDE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_internal(uint64_t *a1, uint64_t *a2, std::string *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, unsigned int a7, FILE *a8, const std::string *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43[4];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v21 = *a4;
  v20 = a4[1];
  v46 = *a4;
  v47 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (***(unsigned int (****)(_QWORD))(v21 + 8))(*(_QWORD *)(v21 + 8)) == 10006
     || (***(uint64_t (****)(_QWORD))(v21 + 8))(*(_QWORD *)(v21 + 8)) == 10007;
  v25 = *a2;
  v26 = (std::__shared_weak_count *)a2[1];
  v43[2] = *a2;
  v43[3] = (uint64_t)v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  Espresso::load_blob_storage(&v44, v25, (const void **)&a3->__r_.__value_.__l.__data_, a8, (uint64_t)a9, a11, a12, v24);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = *a2;
  v32 = (std::__shared_weak_count *)a2[1];
  v43[0] = v31;
  v43[1] = (uint64_t)v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  Espresso::load_network_layers_internal(v43, a9, a3, a4, a5, a6, a7, a10, a1, &v44);
  if (v32)
  {
    v35 = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v37 = v45;
  if (v45)
  {
    v38 = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1914EE144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  _QWORD *v23[2];

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1))
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, a2);
    v9 = (uint64_t *)a1[2];
    v10 = *(std::__shared_weak_count **)(a4 + 8);
    v23[0] = *(_QWORD **)a4;
    v23[1] = &v10->__vftable;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    *(_QWORD *)a1[1] += Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()(v9, a3, v8, v23, 0);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v15 = (_QWORD *)a1[3];
    v16 = *(_QWORD **)a4;
    v17 = *(std::__shared_weak_count **)(a4 + 8);
    v22[0] = (uint64_t)v16;
    v22[1] = (uint64_t)v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(v15, v22, a2, a3);
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1914EE2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9[3];
  char v10;
  std::string v11;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, a3);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)a1[1] + 64))(*(_QWORD *)a1[1], v7))
  {
    v8 = *a2;
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v11 = *(std::string *)a4;
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)a1[1] + 72))(v9, *(_QWORD *)a1[1], v7);
    Espresso::base_kernel::set_blob_file_metadata(v8, (uint64_t)&v11, (uint64_t)v9);
    if (v10 < 0)
      operator delete(v9[1]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1914EE3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()(uint64_t *a1, uint64_t a2, unint64_t a3, _QWORD **a4, unsigned __int8 a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;

  v9 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)*a1 + 24))(*a1, a3);
  if (!(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)*a1 + 80))(*a1, a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v16 = std::string::append(&v23, " idx=");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v22, a3);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v22;
    else
      v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      size = v22.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v24, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v25);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v25, *a1, a1[1]);
  v10 = 160;
  if (((*(_BYTE *)(a1[2] + 53) != 0) & a5) != 0)
    v10 = 168;
  (*(void (**)(void))(**a4 + v10))();
  v11 = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
  if (v25.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v25.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v9;
}

void sub_1914EE5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

BOOL Espresso::run_pass_on_network<Espresso::pass_multi_head_program_gen>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBDCB0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D96668;
  v3 = (_QWORD *)((char *)v2 + 24);
  v15 = (_QWORD *)((char *)v2 + 24);
  v16 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v18 = (unint64_t)"N8Espresso27pass_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v14 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v14);
  if (v14)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v18 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso31analysis_multi_head_program_genE");
  }
  v6 = buf[0];
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6 != 0;
}

void sub_1914EE854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::net::reload_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::net::reload_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::net::reload_info_t>::__on_zero_shared(char **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 3);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)(a1 + 16), a1[17]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a1 + 13), a1[14]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a1 + 10), a1[11]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDCB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDCB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_multi_head_program_gen>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<float,6>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1230;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return a1;
}

void Espresso::blob<float,6>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1230;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&,char const*>(const char *a1, const char *a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("String property %s must be a string of size_t. Got %s", a1, a2);
}

uint64_t **std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 5) = v9 + 12;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void Espresso::net::set_analysis<Espresso::analysis_to_preserve_mil_types>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error *exception;
  uint64_t v12;
  std::string v13;

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Null analysis");
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = *(_QWORD *)(*(_QWORD *)*a2 - 8);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
  v5 = (_QWORD *)*a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v3[4];
  v3[3] = v5;
  v3[4] = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1914EEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  char *v12;
  Espresso *v13;
  void *v14;

  v12 = (char *)operator new(0x68uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBECE0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1210;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *((_DWORD *)v12 + 8) = a2;
  *((_DWORD *)v12 + 9) = a3;
  *((_DWORD *)v12 + 10) = a4;
  *((_DWORD *)v12 + 11) = a5;
  *((_DWORD *)v12 + 12) = a6;
  v13 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5 * a6);
  v14 = Espresso::kern_alloc_uninitialized(v13);
  bzero(v14, (size_t)v13);
  *((_QWORD *)v12 + 7) = v14;
  v12[64] = 1;
  *a1 = v12 + 24;
  a1[1] = v12;
}

void sub_1914EED84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_insert_casts>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE0D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE0D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_multi_head_program_gen>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  std::string __p;

  v6 = operator new(0x78uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB470;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  Espresso::blob_storage_mmap::blob_storage_mmap((uint64_t)(v6 + 3), (__int128 *)&__p, *a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1914EEF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<Espresso::blob_storage_abstract>::operator=[abi:ne180100]<Espresso::blob_storage_abstract,std::default_delete<Espresso::blob_storage_abstract>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E2DC3698;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_storage_abstract  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AD0373))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_storage_mmap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::load_network_layers_binserializer_v2(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, Espresso::net *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  size_t v12;
  void **v13;
  const void *v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  const char *v18;
  FILE *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;
  std::string v44;
  void *v45[2];
  char v46;

  if (*((char *)a2 + 23) >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = v45;
  std::string::basic_string[abi:ne180100]((uint64_t)v45, v12 + 4);
  if (v46 < 0)
    v13 = (void **)v45[0];
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *a2;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".net");
  if (*((char *)a2 + 23) >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = &v44;
  std::string::basic_string[abi:ne180100]((uint64_t)&v44, v15 + 8);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = *a2;
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, ".weights");
  if (*(char *)(a1 + 23) >= 0)
    v18 = (const char *)a1;
  else
    v18 = *(const char **)a1;
  v19 = fopen(v18, "rb");
  if (v19)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::binserializer_blob_to_sstream(&v40, v19, (uint64_t)v45);
    Espresso::load_js_fstream(&v38, v40, __p);
    v20 = v38;
    if (v38)
    {
      v21 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = (***(unsigned int (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8)) == 10006
         || (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8)) == 10007;
      Espresso::load_blob_storage(&v36, v20, (const void **)&v44.__r_.__value_.__l.__data_, v19, a1, 0, 0, v24);
      if (v21)
      {
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      Espresso::load_and_shape_network((uint64_t)&v38, &v44, a3, a4, a5, &v36, (std::string *)a1, (uint64_t)a6);
      v27 = v37;
      if (v37)
      {
        v28 = (unint64_t *)&v37->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      *a6 = 0;
      a6[1] = 0;
    }
    v30 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v41;
    if (v41)
    {
      v34 = (unint64_t *)&v41->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v43 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(v45[0]);
}

void sub_1914EF474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(a1);
}

double Espresso::binserializer_blob_to_sstream(_QWORD *a1, FILE *a2, uint64_t a3)
{
  const char *v6;
  __sFILE *v7;
  int v8;
  size_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  double result;
  const char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::ios_base *v21;
  int v22;
  std::string __ptr;
  size_t v24;

  fseek(a2, 0, 0);
  if (*(char *)(a3 + 23) >= 0)
    v7 = (__sFILE *)a3;
  else
    v7 = *(__sFILE **)a3;
  if (v7)
  {
    v8 = Espresso::BinSerializer::BinSerializer_fseek(a2, v7, v6);
    if (v8 < 0)
    {
      syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", v8, Espresso::BinSerializer::BinSerializer_statusDescription[v8 + 10], "BinSerializer_status Espresso::BinSerializer::BinSerializer_freadInBytes(FILE *, const char *, BOOL, void **, size_t *)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", 548);
      goto LABEL_17;
    }
  }
  if (fread(&__ptr, 0x28uLL, 1uLL, a2) != 1)
  {
LABEL_17:
    v16 = (char *)operator new(0x128uLL);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &off_1E2DC2780;
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
    v18 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
    *((_QWORD *)v16 + 3) = v17;
    v19 = MEMORY[0x1E0DE4FD8];
    v20 = MEMORY[0x1E0DE4FD8] + 64;
    *((_QWORD *)v16 + 18) = MEMORY[0x1E0DE4FD8] + 64;
    *(_QWORD *)&v16[*(_QWORD *)(v17 - 24) + 24] = v18;
    *((_QWORD *)v16 + 4) = 0;
    v21 = (std::ios_base *)&v16[*(_QWORD *)(*((_QWORD *)v16 + 3) - 24) + 24];
    std::ios_base::init(v21, v16 + 40);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    *((_QWORD *)v16 + 3) = v19 + 24;
    *((_QWORD *)v16 + 18) = v20;
    std::streambuf::basic_streambuf();
    *((_QWORD *)v16 + 5) = MEMORY[0x1E0DE4FB8] + 16;
    result = 0.0;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *((_DWORD *)v16 + 34) = 8;
    *a1 = v16 + 24;
    a1[1] = v16;
    return result;
  }
  if (LOWORD(__ptr.__r_.__value_.__r.__words[1]) != 9)
  {
    v22 = 559;
    v14 = "invalid data type";
    v15 = -5;
LABEL_16:
    syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", v15, v14, "BinSerializer_status Espresso::BinSerializer::BinSerializer_freadInBytes(FILE *, const char *, BOOL, void **, size_t *)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", v22);
    goto LABEL_17;
  }
  v9 = v24;
  v10 = (char *)malloc_type_malloc(4 * v24, 0x100004052888210uLL);
  if (!v10)
  {
    v22 = 569;
    v14 = "undexpected null pointer";
    v15 = -3;
    goto LABEL_16;
  }
  v11 = v10;
  if (fread(v10, 1uLL, v9, a2) != v9)
  {
    v22 = 574;
    v14 = "I/O error";
    v15 = -7;
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(&__ptr, v11);
  v12 = operator new(0x128uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E2DC2780;
  *a1 = std::istringstream::basic_istringstream[abi:ne180100](v12 + 3, &__ptr);
  a1[1] = v12;
  free(v11);
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__ptr.__r_.__value_.__l.__data_);
  return result;
}

void sub_1914EF7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;
  void *v21;

  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v3 = a1 + 1;
  v2 = (uint64_t *)a1[1];
  if (!v2)
    return 0;
  v6 = a1 + 1;
  v7 = (_QWORD *)a1[1];
  do
  {
    v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
    v9 = v7 + 1;
    if (!v8)
    {
      v9 = v7;
      v6 = v7;
    }
    v7 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    return 0;
  v11 = (_QWORD *)v6[1];
  if (v11)
  {
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v13 = v6;
    do
    {
      v12 = (_QWORD *)v13[2];
      v14 = *v12 == (_QWORD)v13;
      v13 = v12;
    }
    while (!v14);
  }
  if ((_QWORD *)*a1 == v6)
    *a1 = v12;
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
  if (*((char *)v6 + 55) < 0)
    operator delete((void *)v6[4]);
  operator delete(v6);
  return 1;
}

void std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAE900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAE900;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AA2A73))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::target_type()
{
}

void Espresso::load_network_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  size_t v12;
  void **v13;
  const void *v14;
  const char *v15;
  FILE *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  Espresso *v28;
  const char *v29;
  NSObject *v30;
  int v31;
  const char *v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40[4];
  Espresso *v41[2];
  char **v42;
  char *v43;
  uint64_t v44;
  char **v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  void *__p[2];
  char v51;
  void *v52[2];
  char v53;
  _BYTE buf[24];
  char **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if ((a5 - 3) <= 0xFFFFFFFD)
    Espresso::throw_exception_selector<Espresso::io_error>("error loading binserializer.");
  if (*((char *)a2 + 23) >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = v52;
  std::string::basic_string[abi:ne180100]((uint64_t)v52, v12 + 6);
  if (v53 < 0)
    v13 = (void **)v52[0];
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *a2;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".shape");
  if (*(char *)(a1 + 23) >= 0)
    v15 = (const char *)a1;
  else
    v15 = *(const char **)a1;
  v16 = fopen(v15, "rb");
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::binserializer_blob_to_sstream(&v48, v16, (uint64_t)v52);
    fclose(v16);
    v42 = &v43;
    v43 = 0;
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = &v46;
    if (v48 && !*(_DWORD *)((char *)v48 + *(_QWORD *)(*v48 - 24) + 32))
    {
      Espresso::load_network_shape((uint64_t)v48, __p, (uint64_t)buf);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v42, v43);
      v42 = *(char ***)buf;
      v43 = *(char **)&buf[8];
      v44 = *(_QWORD *)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v43;
        *(_QWORD *)buf = &buf[8];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
      }
      else
      {
        v42 = &v43;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v45, v46);
      v17 = (char *)v56;
      v45 = v55;
      v46 = (char *)v56;
      v47 = v57;
      if (v57)
      {
        *(_QWORD *)(v56 + 16) = &v46;
        v55 = (char **)&v56;
        v56 = 0;
        v57 = 0;
        v17 = 0;
      }
      else
      {
        v45 = &v46;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v55, v17);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    }
    v41[0] = 0;
    v41[1] = 0;
    if (a5 == 1)
      Espresso::load_network_layers_binserializer(a1, a2, a3, (uint64_t)&v42, a4, 0, (uint64_t *)buf);
    else
      Espresso::load_network_layers_binserializer_v2(a1, a2, a3, (Espresso::net *)&v42, a4, buf);
    v18 = *(std::__shared_weak_count **)&buf[8];
    v41[0] = *(Espresso **)buf;
    v41[1] = *(Espresso **)&buf[8];
    if (*(_QWORD *)buf)
    {
      std::string::operator=((std::string *)(*(_QWORD *)buf + 424), (const std::string *)a2);
      std::string::operator=((std::string *)((char *)v41[0] + 592), (const std::string *)a1);
      v40[2] = (uint64_t)v41[0];
      v40[3] = (uint64_t)v41[1];
      if (v41[1])
      {
        v19 = (unint64_t *)((char *)v41[1] + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      Espresso::shape_network_recursive(v41[0], (Espresso::net *)&v42, 0, 0);
      if (v41[1])
      {
        v21 = (unint64_t *)((char *)v41[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          (*(void (**)(Espresso *))(*(_QWORD *)v41[1] + 16))(v41[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v41[1]);
        }
      }
      v23 = (std::__shared_weak_count *)v41[1];
      v40[0] = (uint64_t)v41[0];
      v40[1] = (uint64_t)v41[1];
      if (v41[1])
      {
        v24 = (unint64_t *)((char *)v41[1] + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      Espresso::setup_layer_callbacks(v40);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      Espresso::setup_layers_post_load((uint64_t)v41);
      Espresso::espresso_os_log_subsystem(v28, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v31 = *(char *)(a1 + 23);
        v32 = *(const char **)a1;
        v33 = (***(uint64_t (****)(_QWORD))(*a3 + 8))(*(_QWORD *)(*a3 + 8));
        *(_DWORD *)buf = 136315650;
        if (v31 >= 0)
          v34 = a1;
        else
          v34 = (uint64_t)v32;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v33;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a4;
        _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "Loaded network: '%s' pf=%d cp=%d", buf, 0x18u);
      }

      *(_OWORD *)a6 = *(_OWORD *)v41;
    }
    else
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      if (v18)
      {
        v38 = (unint64_t *)&v18->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v45, v46);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v42, v43);
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v51 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
  }
  if (v53 < 0)
    operator delete(v52[0]);
}

void sub_1914EFE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  Espresso::network_shape::~network_shape(&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void Espresso::load_network_shape(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  char **v23;
  char *v24[2];

  v21 = v22;
  v22[0] = 0;
  v24[0] = 0;
  v24[1] = 0;
  v22[1] = 0;
  v23 = v24;
  v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v19, (uint64_t)v8, a3);
  v9 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 296))(v19, a1, a2);
  v10 = (std::__shared_weak_count *)v20;
  v18[0] = v9;
  v18[1] = v20;
  if (v20)
  {
    v11 = (unint64_t *)(v20 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::load_network_shape(v18, a4);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v16 = (unint64_t *)(v20 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v23, v24[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_1914F005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char *a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  Espresso::network_shape::~network_shape(&a13);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  size_t v14;
  void **v15;
  const void *v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  const char *v20;
  FILE *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  std::string v29;
  void *v30[2];
  char v31;

  if (*((char *)a2 + 23) >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v30;
  std::string::basic_string[abi:ne180100]((uint64_t)v30, v14 + 4);
  if (v31 < 0)
    v15 = (void **)v30[0];
  if (v14)
  {
    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = *a2;
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, ".net");
  if (*((char *)a2 + 23) >= 0)
    v17 = *((unsigned __int8 *)a2 + 23);
  else
    v17 = (size_t)a2[1];
  v18 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v17 + 8);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)a2 + 23) >= 0)
      v19 = a2;
    else
      v19 = *a2;
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".weights");
  if (*(char *)(a1 + 23) >= 0)
    v20 = (const char *)a1;
  else
    v20 = *(const char **)a1;
  v21 = fopen(v20, "rb");
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::binserializer_blob_to_sstream(&v25, v21, (uint64_t)v30);
    Espresso::load_network_layers_internal(a7, v25, &v29, a3, a4, 0, a5, __p, v21, (const std::string *)a1, a6, 0, 0);
    if (*a7)
      std::string::operator=((std::string *)(*a7 + 592), (const std::string *)a1);
    v22 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30[0]);
}

void sub_1914F02BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<std::istringstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::dump_network_binserializer(uint64_t *a1, const char *a2, const void **a3)
{
  size_t v6;
  void **v7;
  const void *v8;
  size_t v9;
  void **v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  FILE *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __sFILE *v22;
  __sFILE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  char v29;
  void *v30;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[2];
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[11];
  char v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;

  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = v46;
  std::string::basic_string[abi:ne180100]((uint64_t)v46, v6 + 4);
  if (v47 < 0)
    v7 = (void **)v46[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".net");
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  v10 = v44;
  std::string::basic_string[abi:ne180100]((uint64_t)v44, v9 + 6);
  if (v45 < 0)
    v10 = (void **)v44[0];
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".shape");
  if (*((char *)a3 + 23) >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  v13 = v42;
  std::string::basic_string[abi:ne180100]((uint64_t)v42, v12 + 8);
  if (v43 < 0)
    v13 = (void **)v42[0];
  if (v12)
  {
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = *a3;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".weights");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v15 = fopen(a2, "wb");
  v16 = *a1;
  v17 = (std::__shared_weak_count *)a1[1];
  v32 = v16;
  v33 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::dump_network_internal(v16, v17, (uint64_t)v39, (uint64_t)v35, (uint64_t)v42, v15);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::stringbuf::str();
  std::stringbuf::str();
  if (v47 >= 0)
    v22 = (__sFILE *)v46;
  else
    v22 = (__sFILE *)v46[0];
  Espresso::binserializer_write_string(v15, v22, (const void **)&v30);
  if (v45 >= 0)
    v23 = (__sFILE *)v44;
  else
    v23 = (__sFILE *)v44[0];
  Espresso::binserializer_write_string(v15, v23, (const void **)&__p);
  fclose(v15);
  if (v29 < 0)
    operator delete(__p);
  if (v31 < 0)
    operator delete(v30);
  v24 = *MEMORY[0x1E0DE4F50];
  v34[0] = v24;
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v24 - 24)) = v25;
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  v35[0] = v26;
  v35[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete((void *)v35[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v37);
  v38[0] = v24;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v24 - 24)) = v25;
  v39[0] = v26;
  v39[1] = v27;
  if (v40 < 0)
    operator delete((void *)v39[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v41);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
}

void sub_1914F0714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);
  if (*(char *)(v59 - 129) < 0)
    operator delete(*(void **)(v59 - 152));
  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (*(char *)(v59 - 81) < 0)
    operator delete(*(void **)(v59 - 104));
  _Unwind_Resume(a1);
}

void Espresso::dump_network_internal(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3, uint64_t a4, uint64_t a5, FILE *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  void *v40[2];
  __int128 v41;
  __int128 v42;
  void *__p[2];
  __int128 v44;

  *(_OWORD *)__p = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v36 = 0u;
  v32[0] = a1;
  v32[1] = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::serialize_network(v32, a5, v36, 0, &v33);
  if (a2)
  {
    v13 = (unint64_t *)&a2->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  v15 = v33;
  if (*((_QWORD *)&v33 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v19 = v34;
  v18 = v35;
  if (v35)
  {
    v20 = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v15 + 288))(v15, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 288))(v19, a4);
  Espresso::dump_network_layers_blobs_state::write((uint64_t)v36, a5, a6);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*((_QWORD *)&v15 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v44) < 0)
    operator delete(__p[1]);
  *(_QWORD *)&v33 = &v42;
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v40[1])
  {
    *(void **)&v41 = v40[1];
    operator delete(v40[1]);
  }
  *(_QWORD *)&v33 = &v39;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v37[1])
  {
    *(void **)&v38 = v37[1];
    operator delete(v37[1]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
}

void sub_1914F0A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  Espresso::dump_network_layers_blobs_state::~dump_network_layers_blobs_state((void **)va1);
  _Unwind_Resume(a1);
}

void Espresso::binserializer_write_string(FILE *a1, __sFILE *a2, const void **a3)
{
  size_t v6;
  char *v7;
  char *v8;
  const void *v9;

  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = (char *)malloc_type_malloc(v6 + 1, 0xEC8B7D8DuLL);
  v8 = v7;
  if (*((char *)a3 + 23) >= 0)
    v9 = a3;
  else
    v9 = *a3;
  memcpy(v7, v9, v6);
  v8[v6] = 0;
  Espresso::BinSerializer::BinSerializer_fwriteBytes(a1, a2, v8, (const void *)(v6 + 1));
  free(v8);
}

void Espresso::serialize_network(_QWORD *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  _QWORD *i;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  Espresso::net *v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  Espresso::net *v58;
  std::__shared_weak_count *v59;
  Espresso::net *v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  __int128 v63;
  void *v64[2];
  char v65;

  std::string::basic_string[abi:ne180100]<0>(v64, "json");
  *a5 = 0u;
  a5[1] = 0u;
  if (*(_QWORD *)(*a1 + 1008) || *(_QWORD *)(*a1 + 968))
  {
    v10 = (std::__shared_weak_count *)a1[1];
    v58 = (Espresso::net *)*a1;
    v59 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    Espresso::dump_network_layers((uint64_t *)__p, &v58, 300, a3, a2, a4);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a5 + 1), &v63);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v59;
    if (v59)
    {
      v20 = (unint64_t *)&v59->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v56, (uint64_t)v22, v64);
    for (i = *(_QWORD **)(*a1 + 1000); i; i = (_QWORD *)*i)
    {
      v24 = (std::__shared_weak_count *)i[6];
      v53 = (Espresso::net *)i[5];
      v54 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      Espresso::dump_network_layers((uint64_t *)__p, &v53, 300, a3, a2, a4);
      v55 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v54;
      if (v54)
      {
        v34 = (unint64_t *)&v54->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v56 + 240))(v56, i + 2, &v55);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    v39 = *(_QWORD *)a5;
    std::string::basic_string[abi:ne180100]<0>(__p, "subnetworks");
    (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v39 + 240))(v39, __p, &v56);
    if (SBYTE7(v63) < 0)
      operator delete(__p[0]);
    v40 = v57;
    if (v57)
    {
      v41 = (unint64_t *)&v57->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      goto LABEL_51;
    }
  }
  else
  {
    v43 = (std::__shared_weak_count *)a1[1];
    v60 = (Espresso::net *)*a1;
    v61 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    Espresso::dump_network_layers((uint64_t *)__p, &v60, 200, a3, a2, a4);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a5 + 1), &v63);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v50 = (unint64_t *)((char *)__p[1] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v40 = v61;
    if (v61)
    {
      v52 = (unint64_t *)&v61->__shared_owners_;
      do
        v42 = __ldaxr(v52);
      while (__stlxr(v42 - 1, v52));
LABEL_51:
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (v65 < 0)
    operator delete(v64[0]);
}

void sub_1914F0F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  _Unwind_Resume(a1);
}

void Espresso::dump_network_layers_blobs_state::write(uint64_t a1, uint64_t a2, FILE *a3)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  std::string::size_type size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _QWORD *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  size_t *v27;
  uint64_t v28;
  unsigned int v29;
  const void *v30;
  size_t v31;
  char *v32;
  std::string *v33;
  int v34;
  std::string *v35;
  uint64_t v36;
  const void *v37;
  _QWORD *v38;
  const char *v39;
  const void **v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  size_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  const void *v49;
  const void *v50;
  size_t v51;
  std::string *v52;
  int v53;
  void *v54;
  std::string::size_type v55;
  std::string *v56;
  FILE *v57;
  _QWORD *v58;
  _QWORD *v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _BYTE *v66;
  _QWORD *v67;
  unint64_t v68;
  const void *v69;
  std::string::size_type v70;
  std::string *v71;
  FILE *v72;
  FILE *v73;
  uint64_t v74;
  std::string::size_type v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::string *v87;
  __int128 v88;
  std::runtime_error *exception;
  std::string *v90;
  __int128 v91;
  std::runtime_error *v92;
  std::string *v93;
  __int128 v94;
  std::runtime_error *v95;
  std::runtime_error *v96;
  std::runtime_error *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string v102;
  std::string v103;
  void *__dst[2];
  void *v105[2];
  __int128 v106;
  int v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  _BYTE *v112;
  uint64_t v113;
  std::string v114;
  void *__p;
  _QWORD *v116;
  uint64_t v117;
  void *v118;
  _BYTE *v119;
  uint64_t v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string __ptr;
  unsigned int *v126;
  unsigned int *v127;
  const void *v128;

  if (!Espresso::blob_storage_write_version)
  {
    v10 = *(char *)(a2 + 23);
    if (a3)
    {
      if (v10 < 0)
        std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v121 = *(std::string *)a2;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(&v118, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
      __p = 0;
      v116 = 0;
      v117 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      v11 = (uint64_t *)__p;
      if (__p == v116)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        do
        {
          v13 = *v11++;
          v12 += v13;
        }
        while (v11 != v116);
      }
      v36 = (2 * (v119 - (_BYTE *)v118)) | 8;
      v37 = (const void *)(v36 + v12);
      v38 = (_QWORD *)operator new[]();
      v39 = (const char *)v38;
      v40 = (const void **)v118;
      v41 = v119 == v118;
      v42 = (v119 - (_BYTE *)v118) >> 3;
      *v38 = v42;
      if (!v41)
      {
        v43 = 0;
        v44 = (size_t *)__p;
        if (v42 <= 1)
          v45 = 1;
        else
          v45 = v42;
        v46 = v38 + 1;
        v47 = 0x200000000;
        do
        {
          *v46 = v43;
          v46 += 2;
          *(_QWORD *)((char *)v38 + (v47 >> 29)) = v44[v43++];
          v47 += 0x200000000;
        }
        while (v45 != v43);
        v48 = (char *)v38 + v36;
        do
        {
          v50 = *v40++;
          v49 = v50;
          v51 = *v44++;
          memcpy(v48, v49, v51);
          v48 += v51;
          --v45;
        }
        while (v45);
      }
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v121;
      else
        v52 = (std::string *)v121.__r_.__value_.__r.__words[0];
      v53 = Espresso::BinSerializer::BinSerializer_fwriteBytes(a3, (__sFILE *)v52, v39, v37);
      if (v53)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)__dst, v53);
        v90 = std::string::insert((std::string *)__dst, 0, "Binserializer error ");
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        __ptr.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__ptr);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      MEMORY[0x19401CD78](v39, 0x1000C8077774924);
      if (__p)
      {
        v116 = __p;
        operator delete(__p);
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v54 = (void *)v121.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v10 < 0)
      {
        v55 = *(_QWORD *)(a2 + 8);
        if (!v55)
          return;
        std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)a2, v55);
      }
      else
      {
        if (!*(_BYTE *)(a2 + 23))
          return;
        v114 = *(std::string *)a2;
      }
      v111 = 0;
      v112 = 0;
      v113 = 0;
      std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(&v111, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
      v108 = 0;
      v109 = 0;
      v110 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v108, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v114;
      else
        v56 = (std::string *)v114.__r_.__value_.__r.__words[0];
      v57 = fopen((const char *)v56, "wb");
      v58 = (_QWORD *)operator new[]();
      if (!v57)
      {
        v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__dst, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
          v105[0] = (void *)v114.__r_.__value_.__r.__words[2];
        }
        v100 = std::string::insert((std::string *)__dst, 0, "Can't open for writing: ");
        v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        __ptr.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v101;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v96, &__ptr);
        __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v59 = v58;
      v60 = v112 - (_BYTE *)v111;
      v41 = v112 == v111;
      v61 = (v112 - (_BYTE *)v111) >> 3;
      *v58 = v61;
      if (!v41)
      {
        v62 = 0;
        v63 = v108;
        if (v61 <= 1)
          v61 = 1;
        v64 = v58 + 1;
        v65 = 0x200000000;
        do
        {
          *v64 = v62;
          v64 += 2;
          *(_QWORD *)((char *)v58 + (v65 >> 29)) = v63[v62++];
          v65 += 0x200000000;
        }
        while (v61 != v62);
      }
      fwrite(v58, (2 * v60) | 8, 1uLL, v57);
      v67 = v111;
      v66 = v112;
      if (v112 != v111)
      {
        v68 = 0;
        do
        {
          v69 = (const void *)v67[v68];
          if (v69)
          {
            fwrite(v69, *((_QWORD *)v108 + v68), 1uLL, v57);
            v67 = v111;
            v66 = v112;
          }
          ++v68;
        }
        while (v68 < (v66 - (_BYTE *)v67) >> 3);
      }
      fclose(v57);
      MEMORY[0x19401CD78](v59, 0x1000C8000313F17);
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v54 = (void *)v114.__r_.__value_.__r.__words[0];
    }
LABEL_130:
    operator delete(v54);
    return;
  }
  if (Espresso::blob_storage_write_version != 1)
  {
    if (Espresso::blob_storage_write_version == 2)
    {
      v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Writing to blob_v2 file format is not supported. Please set blob_storage_write_version=1 to use blob_v1 file format.");
      __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__dst, Espresso::blob_storage_write_version);
    v87 = std::string::insert((std::string *)__dst, 0, "Invalid blob_storage_write_version: ");
    v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v86, &__ptr);
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_OWORD *)v105 = 0u;
  v106 = 0u;
  *(_OWORD *)__dst = 0u;
  v107 = 64;
  if (__dst != (void **)a1)
  {
    v7 = *(const void **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v8 = v6 - *(_QWORD *)a1;
    if (v6 == *(_QWORD *)a1)
    {
      v9 = 0;
    }
    else
    {
      if (v8 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      std::vector<unsigned long>::__vallocate[abi:ne180100](__dst, v8 >> 3);
      v9 = (char *)__dst[1];
      memmove(__dst[1], v7, v8);
    }
    __dst[1] = &v9[8 * (v8 >> 3)];
  }
  if (__dst != (void **)a1)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v105[1], *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  v14 = *(char *)(a2 + 23);
  if (a3)
  {
    if (v14 < 0)
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v103 = *(std::string *)a2;
    fseek(a3, 0, 2);
    v15 = MEMORY[0x19401D21C](a3);
    Espresso::write_blob_storage_v1_info((uint64_t)&__ptr, (uint64_t *)__dst, v15 + 40);
    v16 = (char *)operator new[]();
    v123.__r_.__value_.__s.__data_[0] = 0;
    std::vector<unsigned char>::vector(&v124, 2 * v107, &v123);
    size = __ptr.__r_.__value_.__l.__size_;
    *(_QWORD *)v16 = __ptr.__r_.__value_.__r.__words[0];
    if (__ptr.__r_.__value_.__r.__words[2] != size)
    {
      v18 = 0;
      if ((unint64_t)((uint64_t)(__ptr.__r_.__value_.__r.__words[2] - size) >> 4) <= 1)
        v19 = 1;
      else
        v19 = (uint64_t)(__ptr.__r_.__value_.__r.__words[2] - size) >> 4;
      v20 = v19;
      do
      {
        v21 = v18;
        *(_OWORD *)&v16[v18 + 8] = *(_OWORD *)(size + v18);
        v18 += 16;
        --v20;
      }
      while (v20);
      v22 = v21 + 24;
      v23 = v126;
      v24 = __dst[0];
      v25 = v124.__r_.__value_.__r.__words[0];
      v26 = v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0];
      v27 = (size_t *)(size + 8);
      do
      {
        v29 = *v23++;
        v28 = v29;
        if ((v29 & 0x80000000) != 0)
        {
          v31 = *v27;
          if (*v27 > v26)
          {
            v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v82, "Align error");
            __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (!v31)
            goto LABEL_42;
          v32 = &v16[v22];
          v30 = (const void *)v25;
        }
        else
        {
          v30 = (const void *)v24[v28];
          v31 = *v27;
          v32 = &v16[v22];
        }
        memcpy(v32, v30, v31);
        v22 += v31;
LABEL_42:
        v27 += 2;
        --v19;
      }
      while (v19);
    }
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v103;
    else
      v33 = (std::string *)v103.__r_.__value_.__r.__words[0];
    v34 = Espresso::BinSerializer::BinSerializer_fwriteBytes(a3, (__sFILE *)v33, v16, v128);
    if (v34)
    {
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v122, v34);
      v93 = std::string::insert(&v122, 0, "Binserializer error ");
      v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v92, &v123);
      __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MEMORY[0x19401CD78](v16, 0x1000C8077774924);
    if (v124.__r_.__value_.__r.__words[0])
    {
      v124.__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    if (__ptr.__r_.__value_.__l.__size_)
    {
      __ptr.__r_.__value_.__r.__words[2] = __ptr.__r_.__value_.__l.__size_;
      operator delete((void *)__ptr.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      v35 = &v103;
LABEL_125:
      operator delete(v35->__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v14 < 0)
    {
      v70 = *(_QWORD *)(a2 + 8);
      if (!v70)
        goto LABEL_126;
      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)a2, v70);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 23))
        goto LABEL_126;
      v102 = *(std::string *)a2;
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v102;
    else
      v71 = (std::string *)v102.__r_.__value_.__r.__words[0];
    v72 = fopen((const char *)v71, "wb");
    v73 = v72;
    if (!v72)
    {
      v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v124, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
      else
        v124 = v102;
      v98 = std::string::insert(&v124, 0, "Can't open for writing: ");
      v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v95, &__ptr);
      __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v74 = MEMORY[0x19401D21C](v72);
    Espresso::write_blob_storage_v1_info((uint64_t)&__ptr, (uint64_t *)__dst, v74);
    v123.__r_.__value_.__s.__data_[0] = 0;
    std::vector<unsigned char>::vector(&v124, 2 * v107, &v123);
    if (fwrite(&__ptr, 8uLL, 1uLL, v73) != 1)
    {
      v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v97, "I/O error");
      __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v75 = __ptr.__r_.__value_.__l.__size_;
    if (__ptr.__r_.__value_.__r.__words[2] != __ptr.__r_.__value_.__l.__size_)
    {
      v76 = 0;
      v77 = 0;
      do
      {
        if (fwrite((const void *)(v75 + v76), 0x10uLL, 1uLL, v73) != 1)
        {
          v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v83, "I/O error");
          __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        ++v77;
        v75 = __ptr.__r_.__value_.__l.__size_;
        v76 += 16;
      }
      while (v77 < (uint64_t)(__ptr.__r_.__value_.__r.__words[2] - __ptr.__r_.__value_.__l.__size_) >> 4);
      if (__ptr.__r_.__value_.__r.__words[2] != __ptr.__r_.__value_.__l.__size_)
      {
        v78 = 0;
        v79 = 8;
        do
        {
          v80 = v126[v78];
          v81 = *(_QWORD *)(v75 + v79);
          if ((v80 & 0x80000000) != 0)
          {
            if (v81 > v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0])
            {
              v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "Align error");
              goto LABEL_139;
            }
            if (v81 && fwrite(v124.__r_.__value_.__l.__data_, v81, 1uLL, v73) != 1)
            {
LABEL_138:
              v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "I/O error");
LABEL_139:
              __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
          }
          else if (v81 && fwrite(*((const void **)__dst[0] + v80), v81, 1uLL, v73) != 1)
          {
            goto LABEL_138;
          }
          ++v78;
          v75 = __ptr.__r_.__value_.__l.__size_;
          v79 += 16;
        }
        while (v78 < (uint64_t)(__ptr.__r_.__value_.__r.__words[2] - __ptr.__r_.__value_.__l.__size_) >> 4);
      }
    }
    if (v124.__r_.__value_.__r.__words[0])
    {
      v124.__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    if (__ptr.__r_.__value_.__l.__size_)
    {
      __ptr.__r_.__value_.__r.__words[2] = __ptr.__r_.__value_.__l.__size_;
      operator delete((void *)__ptr.__r_.__value_.__l.__size_);
    }
    fclose(v73);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      v35 = &v102;
      goto LABEL_125;
    }
  }
LABEL_126:
  if (v105[1])
  {
    *(void **)&v106 = v105[1];
    operator delete(v105[1]);
  }
  v54 = __dst[0];
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    goto LABEL_130;
  }
}

void sub_1914F1B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;

  __cxa_free_exception(v58);
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

void sub_1914F1ED0()
{
  __cxa_end_catch();
  JUMPOUT(0x1914F1ED8);
}

void std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::dump_network_layers_blobs_state::~dump_network_layers_blobs_state(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v5 = this + 12;
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  v5 = this + 6;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = this[3];
  if (v3)
  {
    this[4] = v3;
    operator delete(v3);
  }
  v4 = *this;
  if (*this)
  {
    this[1] = v4;
    operator delete(v4);
  }
}

_QWORD *std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1914F2054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dump_network_layers(uint64_t *a1, Espresso::net **a2, int a3, void **a4, uint64_t a5, char a6)
{
  void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  Espresso::net *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  Espresso::net *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  Espresso *v56;
  const char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  uint64_t v62;
  NSObject *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  int *v74;
  int *v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  Espresso::net *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  _QWORD *i;
  uint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _DWORD *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  _QWORD *j;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  int v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  int v161;
  const std::string::value_type *v162;
  std::string::size_type v163;
  uint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  const void *v169;
  int8x8_t *v170;
  int8x8_t *v171;
  uint64_t v172;
  uint64_t v173;
  _BOOL4 has_parameter_blob;
  _BOOL4 v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  size_t v198;
  uint64_t v199;
  const void **v200;
  unsigned __int8 *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  BOOL v214;
  BOOL v216;
  _BOOL4 v217;
  BOOL v219;
  uint64_t v220;
  char *v223;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  _OWORD *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  char *v249;
  __int128 v250;
  int64x2_t v251;
  char *v252;
  std::string::size_type v253;
  unint64_t v254;
  std::string::size_type v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  void *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::string::size_type v268;
  unint64_t v269;
  std::string::size_type v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  void *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  std::string::size_type v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t k;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::string::size_type v300;
  std::string::size_type v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  std::string::size_type v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::string::size_type v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  std::string::size_type v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  int8x8_t *v365;
  int8x8_t *v366;
  _BOOL4 v367;
  _BOOL4 v368;
  std::string::size_type v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::string::size_type v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::string::size_type v426;
  unint64_t *v427;
  unint64_t v428;
  uint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  int8x8_t *v442;
  int8x8_t *v443;
  _BOOL4 v444;
  _BOOL4 v445;
  std::string::size_type v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::string::size_type v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  int v479;
  int v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::string::size_type v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  uint64_t v491;
  unint64_t *v492;
  _BOOL4 v493;
  _BOOL4 v494;
  std::string::size_type v495;
  unint64_t *v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  std::string::size_type v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  int8x8_t *v527;
  int8x8_t *v528;
  _BOOL4 v529;
  _BOOL4 v530;
  std::string::size_type v531;
  unint64_t *v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  const void *v560;
  _QWORD *v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  _QWORD *v565;
  void *v566;
  _QWORD *v567;
  _QWORD *v568;
  uint64_t v569;
  char *v570;
  _QWORD *v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  _QWORD *v580;
  char *v581;
  char *v582;
  uint64_t v583;
  void **v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t *v589;
  _QWORD *v590;
  uint64_t *v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  BOOL v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  _QWORD *v606;
  _QWORD *v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  _QWORD *v614;
  __int128 *v615;
  __int128 *v616;
  char *v617;
  uint64_t v618;
  unint64_t *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  __int128 *v629;
  __int128 *v630;
  int v631;
  int v632;
  __int128 v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  void *v640;
  __int128 v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::string::size_type v648;
  std::string::size_type v649;
  std::string::size_type v650;
  unint64_t *v651;
  unint64_t v652;
  _QWORD *v653;
  _QWORD *v654;
  std::string::size_type v655;
  unint64_t *v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  _QWORD *v666;
  _QWORD *v667;
  const void *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  uint64_t v672;
  _QWORD *v673;
  _QWORD *v674;
  uint64_t v675;
  std::string::size_type v676;
  std::string::size_type v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  std::string::size_type v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  unint64_t *v690;
  unint64_t v691;
  _QWORD *v692;
  _QWORD *v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t *v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  std::__shared_weak_count *v700;
  unint64_t *v701;
  unint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t *v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t *v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  _QWORD *v721;
  _QWORD *v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t *v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t *v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t *v742;
  uint64_t v743;
  std::string::size_type v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  unint64_t *v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  unint64_t *v757;
  unint64_t v758;
  _QWORD *v759;
  _QWORD *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t *v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  std::__shared_weak_count *v769;
  unint64_t *v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t *v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t *v780;
  std::__shared_weak_count *v781;
  unint64_t *v782;
  unint64_t v783;
  std::__shared_weak_count *v784;
  unint64_t *v785;
  unint64_t v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  uint64_t v790;
  std::__shared_weak_count *v791;
  unint64_t *v792;
  unint64_t v793;
  uint64_t *m;
  void *v795;
  uint64_t v796;
  __int128 v797;
  unint64_t *v798;
  unint64_t v799;
  void *v800;
  unint64_t *v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t *v806;
  unint64_t v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  std::__shared_weak_count *v811;
  unint64_t *v812;
  unint64_t v813;
  std::__shared_weak_count *v814;
  unint64_t *v815;
  unint64_t v816;
  std::string::size_type v817;
  std::string::size_type v818;
  unint64_t *v819;
  unint64_t v820;
  std::string::size_type v821;
  uint64_t v822;
  unint64_t v823;
  int64_t v824;
  unint64_t v825;
  char *v826;
  uint64_t v827;
  char *v828;
  std::string::size_type v829;
  unint64_t *v830;
  unint64_t v831;
  _QWORD *v832;
  std::string::size_type v833;
  std::string::size_type v834;
  __int128 v835;
  int64x2_t v836;
  std::string::size_type v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  std::__shared_weak_count *v841;
  unint64_t *v842;
  unint64_t v843;
  std::__shared_weak_count *v844;
  unint64_t *v845;
  unint64_t v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  void *v853;
  Espresso::net *v854;
  _QWORD *v855;
  uint64_t v856;
  uint64_t v857;
  std::__shared_weak_count *v858;
  unint64_t *v859;
  unint64_t v860;
  std::string::size_type v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  unint64_t v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  std::__shared_weak_count *v868;
  unint64_t *v869;
  unint64_t v870;
  std::__shared_weak_count *v871;
  unint64_t *v872;
  unint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  _BYTE *v880;
  std::runtime_error *exception;
  std::string *v882;
  __int128 v883;
  void **v885;
  uint64_t v886;
  _QWORD *v887;
  _QWORD *v888;
  void *context;
  std::__shared_weak_count *v890;
  uint64_t v892;
  const void **v893;
  _BYTE *v894;
  uint64_t v895;
  uint64_t v896;
  __int128 v898;
  _BYTE v899[32];
  uint64_t v900;
  void *v901;
  void *v902;
  uint64_t v903;
  std::string v904;
  std::string v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  std::string v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  uint64_t v936;
  std::__shared_weak_count *v937;
  uint64_t v938;
  std::__shared_weak_count *v939;
  __int128 v940;
  uint64_t v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  uint64_t v947;
  std::__shared_weak_count *v948;
  std::string v949;
  __int128 v950;
  void *__p;
  BOOL *v952;
  char *v953;
  Espresso::net **v954;
  void **v955;
  _QWORD *v956;
  _QWORD *v957;
  _QWORD *v958;
  _QWORD *v959;
  BOOL v960;
  __int128 v961;
  char *v962;
  void **v963;
  uint64_t v964;
  std::__shared_weak_count *v965;
  uint64_t v966;
  std::__shared_weak_count *v967;
  uint64_t v968;
  std::__shared_weak_count *v969;
  void *v970[2];
  char v971;
  char v972;
  int v973;
  std::string v974;
  std::string::size_type v975;
  std::string::value_type *v976;
  _QWORD v977[3];
  _QWORD *v978;
  _BYTE buf[40];
  _BYTE *v980;
  _BYTE *v981;
  uint64_t v982;
  __int128 v983;
  uint64_t v984;

  v984 = *MEMORY[0x1E0C80C00];
  v973 = a3;
  v972 = a6;
  std::string::basic_string[abi:ne180100]<0>(v970, "json");
  v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v968, (uint64_t)v7, v970);
  v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v966, (uint64_t)v8, v970);
  v886 = v968;
  v9 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v964, (uint64_t)v9, v970);
  if (*((char *)*a2 + 447) < 0)
  {
    if (!*((_QWORD *)*a2 + 54))
      goto LABEL_14;
  }
  else if (!*((_BYTE *)*a2 + 447))
  {
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], (uint64_t)*a2 + 424);
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v953) < 0)
    operator delete(__p);
LABEL_14:
  v13 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v13, v970);
  v14 = (__int128 *)*((_QWORD *)*a2 + 59);
  v15 = (uint64_t)*a2 + 480;
  if (v14 != (__int128 *)v15)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)buf, v14 + 2);
      (*(void (**)(void *, _BYTE *, _BYTE *))(*(_QWORD *)__p + 232))(__p, buf, &buf[24]);
      if (SHIBYTE(v980) < 0)
        operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v16 = (__int128 *)*((_QWORD *)v14 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)v14 + 2);
          v214 = *(_QWORD *)v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (!v214);
      }
      v14 = v17;
    }
    while (v17 != (__int128 *)v15);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v886 + 240))(v886, buf, &__p);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v18 = (std::__shared_weak_count *)v952;
  if (v952)
  {
    v19 = (unint64_t *)(v952 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format_version");
  Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
  (*(void (**)(_QWORD, _BYTE *, int *))(**(_QWORD **)buf + 160))(*(_QWORD *)buf, &buf[16], &v973);
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v953) < 0)
    operator delete(__p);
  v24 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v24, v970);
  v25 = *a2;
  v26 = (_QWORD *)*((_QWORD *)*a2 + 41);
  v27 = (uint64_t)*a2 + 336;
  if (v26 != (_QWORD *)v27)
  {
    v28 = *(_QWORD *)v899;
    do
    {
      v29 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v29, v970);
      Espresso::SerDes::params_io<Espresso::vimage2espresso_param>((uint64_t)__p, (uint64_t)(v26 + 7), 1);
      Espresso::SerDes::generic_serdes_object::operator[](v28, (uint64_t)(v26 + 4), buf);
      (*(void (**)(_QWORD, _BYTE *, void **))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], &__p);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v952;
      if (v952)
      {
        v34 = (unint64_t *)(v952 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (_QWORD *)v26[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v26[2];
          v214 = *v37 == (_QWORD)v26;
          v26 = v37;
        }
        while (!v214);
      }
      v26 = v37;
    }
    while (v37 != (_QWORD *)v27);
    v25 = *a2;
  }
  if (*((_QWORD *)v25 + 43))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "transform_params");
    Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], v899);
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
    v38 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (SHIBYTE(v953) < 0)
      operator delete(__p);
  }
  v41 = *(std::__shared_weak_count **)&v899[8];
  if (*(_QWORD *)&v899[8])
  {
    v42 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v963 = v970;
  v44 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v44, v970);
  Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v963, (_QWORD *)*a2 + 44, *(uint64_t *)v899);
  if (*((_QWORD *)*a2 + 46))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "numerical_parameters");
    Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], v899);
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
    v45 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (SHIBYTE(v953) < 0)
      operator delete(__p);
  }
  v48 = *(std::__shared_weak_count **)&v899[8];
  if (*(_QWORD *)&v899[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v51, v970);
  v52 = *a2;
  v53 = (int *)*((_QWORD *)*a2 + 50);
  v54 = (uint64_t)*a2 + 408;
  if (v53 != (int *)v54)
  {
    v55 = *(_QWORD *)v899;
    while (1)
    {
      v952 = 0;
      __p = 0;
      v953 = 0;
      Espresso::abstract_engine_factory::shared(buf);
      Espresso::abstract_engine_factory::engine_for_platform(*(uint64_t *)buf, v53 + 8, &v974);
      v58 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v974.__r_.__value_.__r.__words[0];
      if (v974.__r_.__value_.__r.__words[0])
      {
        v56 = (Espresso *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v974.__r_.__value_.__l.__data_
                                                                            + 16))(v974.__r_.__value_.__r.__words[0]);
        if (v56)
        {
          v62 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v61 + 16))(v61);
          v56 = (Espresso *)MEMORY[0x19401C808](&__p, v62);
        }
      }
      if (SHIBYTE(v953) < 0)
      {
        if (!v952)
        {
LABEL_106:
          Espresso::espresso_os_log_subsystem(v56, v57);
          v63 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            v76 = v53[8];
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v76;
            _os_log_error_impl(&dword_190DAF000, v63, OS_LOG_TYPE_ERROR, "Cannot find engine for: %d", buf, 8u);
          }

        }
      }
      else if (!HIBYTE(v953))
      {
        goto LABEL_106;
      }
      v64 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v961, (uint64_t)v64, v970);
      Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v963, (_QWORD *)v53 + 5, v961);
      Espresso::SerDes::generic_serdes_object::operator[](v55, (uint64_t)&__p, buf);
      (*(void (**)(_QWORD, _BYTE *, __int128 *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], &v961);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v65 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v66 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v961 + 1);
      if (*((_QWORD *)&v961 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v961 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      size = (std::__shared_weak_count *)v974.__r_.__value_.__l.__size_;
      if (v974.__r_.__value_.__l.__size_)
      {
        v72 = (unint64_t *)(v974.__r_.__value_.__l.__size_ + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (SHIBYTE(v953) < 0)
        operator delete(__p);
      v74 = (int *)*((_QWORD *)v53 + 1);
      if (v74)
      {
        do
        {
          v75 = v74;
          v74 = *(int **)v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          v75 = (int *)*((_QWORD *)v53 + 2);
          v214 = *(_QWORD *)v75 == (_QWORD)v53;
          v53 = v75;
        }
        while (!v214);
      }
      v53 = v75;
      if (v75 == (int *)v54)
      {
        v52 = *a2;
        break;
      }
    }
  }
  if (*((_QWORD *)v52 + 52))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "numerical_properties");
    Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], v899);
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
    v77 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (SHIBYTE(v953) < 0)
      operator delete(__p);
  }
  v80 = *(std::__shared_weak_count **)&v899[8];
  if (*(_QWORD *)&v899[8])
  {
    v81 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v83, v970);
  Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v963, (_QWORD *)*a2 + 47, *(uint64_t *)v899);
  if (*((_QWORD *)*a2 + 49))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "io_bind_info");
    Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&__p, buf);
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], v899);
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
    v84 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v85 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if (SHIBYTE(v953) < 0)
      operator delete(__p);
  }
  v87 = *(std::__shared_weak_count **)&v899[8];
  if (*(_QWORD *)&v899[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = *a2;
  if (*((_QWORD *)*a2 + 99))
  {
    Espresso::net::save_additional_configurations(v90, (uint64_t *)&__p);
    std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
    (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v886 + 240))(v886, buf, &__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v91 = (std::__shared_weak_count *)v952;
    if (v952)
    {
      v92 = (unint64_t *)(v952 + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v90 = *a2;
  }
  if (*((_QWORD *)v90 + 143))
  {
    v94 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v94, v970);
    for (i = (_QWORD *)*((_QWORD *)*a2 + 142); i; i = (_QWORD *)*i)
    {
      if ((*(_QWORD *)(i[2] + 8) & 0x7FFFFFFFFFFFFFFFLL) != ((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL))
      {
        v96 = i[3];
        if (v96)
        {
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v96 + 24))(v899);
          if (*(_QWORD *)v899)
          {
            v97 = __p;
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)(*(_QWORD *)(i[2] + 8) & 0x7FFFFFFFFFFFFFFFLL));
            (*(void (**)(void *, _BYTE *, _BYTE *))(*(_QWORD *)v97 + 240))(v97, buf, v899);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v98 = *(std::__shared_weak_count **)&v899[8];
          if (*(_QWORD *)&v899[8])
          {
            v99 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "analyses");
    (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v886 + 240))(v886, buf, &__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v101 = (std::__shared_weak_count *)v952;
    if (v952)
    {
      v102 = (unint64_t *)(v952 + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v90 = *a2;
  }
  v961 = 0uLL;
  v962 = 0;
  v960 = Espresso::blob_storage_write_version == 1;
  __p = a4;
  v952 = &v960;
  v953 = &v972;
  v954 = a2;
  v955 = a4;
  v885 = a4 + 3;
  v956 = a4 + 3;
  v957 = a4 + 6;
  v958 = a4 + 9;
  v959 = a4 + 12;
  v104 = (_QWORD *)*((_QWORD *)v90 + 4);
  v887 = (_QWORD *)*((_QWORD *)v90 + 5);
  v895 = a5;
  if (v104 != v887)
  {
    do
    {
      v105 = (std::__shared_weak_count *)v104[1];
      v892 = *v104;
      v888 = v104;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldxr(p_shared_owners);
        while (__stxr(v107 + 1, p_shared_owners));
      }
      v890 = v105;
      context = (void *)MEMORY[0x19401D4A4]();
      v108 = *((_QWORD *)&v961 + 1);
      v109 = v961;
      v110 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v950, (uint64_t)v110, v970);
      v111 = v950;
      std::string::basic_string[abi:ne180100]<0>(v899, "type");
      Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], v892 + 40);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v112 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v113 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      std::string::basic_string[abi:ne180100]<0>(v899, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], v892 + 16);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v115 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v116 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      std::string::basic_string[abi:ne180100]<0>(v899, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
      if (*(char *)(v892 + 223) < 0)
        std::string::__init_copy_ctor_external(&v974, *(const std::string::value_type **)(v892 + 200), *(_QWORD *)(v892 + 208));
      else
        v974 = *(std::string *)(v892 + 200);
      (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], &v974);
      if (SHIBYTE(v974.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v974.__r_.__value_.__l.__data_);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v118 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v119 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      v121 = *(_DWORD **)(v892 + 64);
      v893 = (const void **)(v892 + 64);
      if (v121)
      {
        if (v121[34])
        {
          std::string::basic_string[abi:ne180100]<0>(v899, "hint_fallback_from_metal");
          Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
          (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 160))(*(_QWORD *)buf, &buf[16], (uint64_t)*v893 + 136);
          if ((buf[39] & 0x80000000) != 0)
            operator delete(*(void **)&buf[16]);
          v122 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v123 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v121 = *v893;
        }
        if (v121[36])
        {
          std::string::basic_string[abi:ne180100]<0>(v899, "hint_fallback_from_cpu");
          Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
          (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 160))(*(_QWORD *)buf, &buf[16], (uint64_t)*v893 + 144);
          if ((buf[39] & 0x80000000) != 0)
            operator delete(*(void **)&buf[16]);
          v125 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v126 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v121 = *v893;
        }
        if (v121[35])
        {
          std::string::basic_string[abi:ne180100]<0>(v899, "hint_fallback_from_ane");
          Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
          (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 160))(*(_QWORD *)buf, &buf[16], (uint64_t)*v893 + 140);
          if ((buf[39] & 0x80000000) != 0)
            operator delete(*(void **)&buf[16]);
          v128 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v129 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v121 = *v893;
        }
        if (*((_QWORD *)v121 + 33))
        {
          v131 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v131, v970);
          for (j = (char *)*v893 + 256;
                ;
                (*(void (**)(_QWORD, _QWORD *, _QWORD *))(**(_QWORD **)v899 + 160))(*(_QWORD *)v899, j + 2, j + 5))
          {
            j = (_QWORD *)*j;
            if (!j)
              break;
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "attributes");
          (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v111 + 240))(v111, buf, v899);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v133 = *(std::__shared_weak_count **)&v899[8];
          if (*(_QWORD *)&v899[8])
          {
            v134 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
        }
      }
      if (*(char *)(v892 + 151) < 0)
        v136 = *(_QWORD *)(v892 + 136);
      else
        v136 = *(unsigned __int8 *)(v892 + 151);
      v896 = v111;
      if (v136)
      {
        std::string::basic_string[abi:ne180100]<0>(v899, "share_weights_from_layer_named");
        Espresso::SerDes::generic_serdes_object::operator[](v111, (uint64_t)v899, buf);
        (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], v892 + 128);
        if ((buf[39] & 0x80000000) != 0)
          operator delete(*(void **)&buf[16]);
        v137 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v138 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
      }
      v140 = 0;
      v141 = 0;
      memset(&v974, 0, sizeof(v974));
      v142 = (int)((v108 - v109) >> 4);
      while (1)
      {
        v143 = (uint64_t)*a2 + 56;
        *(_QWORD *)buf = (int)((v108 - v109) >> 4);
        v144 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v143, v142, buf);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144[4] - v144[3]) >> 3) <= v141)
          break;
        if (v141)
          std::string::append(&v974, ",");
        v145 = (uint64_t)*a2 + 56;
        *(_QWORD *)buf = (int)((v108 - v109) >> 4);
        v146 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v145, v142, buf);
        v147 = v146[3] + v140;
        v148 = *(char *)(v147 + 23);
        if (v148 >= 0)
          v149 = (const std::string::value_type *)(v146[3] + v140);
        else
          v149 = *(const std::string::value_type **)v147;
        if (v148 >= 0)
          v150 = *(unsigned __int8 *)(v147 + 23);
        else
          v150 = *(_QWORD *)(v147 + 8);
        std::string::append(&v974, v149, v150);
        ++v141;
        v140 += 24;
      }
      std::string::basic_string[abi:ne180100]<0>(v899, "bottom");
      Espresso::SerDes::generic_serdes_object::operator[](v896, (uint64_t)v899, buf);
      (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], &v974);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v151 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v152 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      v154 = 0;
      v155 = 0;
      memset(&v949, 0, sizeof(v949));
      while (1)
      {
        v156 = (uint64_t)*a2 + 96;
        *(_QWORD *)buf = v142;
        v157 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v156, v142, buf);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157[4] - v157[3]) >> 3) <= v155)
          break;
        if (v155)
          std::string::append(&v949, ",");
        v158 = (uint64_t)*a2 + 96;
        *(_QWORD *)buf = v142;
        v159 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v158, v142, buf);
        v160 = v159[3] + v154;
        v161 = *(char *)(v160 + 23);
        if (v161 >= 0)
          v162 = (const std::string::value_type *)(v159[3] + v154);
        else
          v162 = *(const std::string::value_type **)v160;
        if (v161 >= 0)
          v163 = *(unsigned __int8 *)(v160 + 23);
        else
          v163 = *(_QWORD *)(v160 + 8);
        std::string::append(&v949, v162, v163);
        ++v155;
        v154 += 24;
      }
      std::string::basic_string[abi:ne180100]<0>(v899, "top");
      Espresso::SerDes::generic_serdes_object::operator[](v896, (uint64_t)v899, buf);
      v164 = (uint64_t *)(v892 + 64);
      (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], &v949);
      if ((buf[39] & 0x80000000) != 0)
        operator delete(*(void **)&buf[16]);
      v165 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v166 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      v168 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
      Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v947, (uint64_t)v168, (_QWORD *)(v892 + 40));
      if (!v947)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v882 = std::string::append((std::string *)v899, "'");
        v883 = *(_OWORD *)&v882->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v882->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v883;
        v882->__r_.__value_.__l.__size_ = 0;
        v882->__r_.__value_.__r.__words[2] = 0;
        v882->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)buf);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v947 + 24))(v947, v896, *v893);
      v169 = *v893;
      if (v136)
      {
        if (!v169)
          goto LABEL_487;
        if (*(char *)(v892 + 151) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v892 + 128), *(_QWORD *)(v892 + 136));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(v892 + 128);
          *(_QWORD *)&buf[16] = *(_QWORD *)(v892 + 144);
        }
        v188 = *((_QWORD *)*a2 + 4);
        v187 = *((_QWORD *)*a2 + 5);
        v189 = buf[23];
        v894 = *(_BYTE **)buf;
        if (v187 == v188)
          goto LABEL_1523;
        v190 = 0;
        v191 = (v187 - v188) >> 4;
        if (buf[23] >= 0)
          v192 = buf[23];
        else
          v192 = *(_QWORD *)&buf[8];
        if (buf[23] >= 0)
          v193 = buf;
        else
          v193 = *(_BYTE **)buf;
        if (v191 <= 1)
          v194 = 1;
        else
          v194 = (v187 - v188) >> 4;
        while (1)
        {
          v195 = 16 * v190;
          v196 = *(_QWORD *)(v188 + 16 * v190);
          v197 = *(unsigned __int8 *)(v196 + 39);
          v198 = *(_QWORD *)(v196 + 24);
          if ((v197 & 0x80u) == 0)
            v199 = *(unsigned __int8 *)(v196 + 39);
          else
            v199 = *(_QWORD *)(v196 + 24);
          if (v199 == v192)
          {
            v200 = (const void **)(v196 + 16);
            if ((v197 & 0x80) != 0)
            {
              if (!memcmp(*v200, v193, v198))
              {
LABEL_386:
                if (v190 != v191 && v190 < (uint64_t)(*((_QWORD *)&v961 + 1) - v961) >> 4)
                {
                  v202 = *(_QWORD *)(v961 + 16 * v190);
                  std::string::basic_string[abi:ne180100]<0>(v899, "weights");
                  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v202 + 120))(&v915, v202, v899);
                  if ((v899[23] & 0x80000000) != 0)
                    operator delete(*(void **)v899);
                  a5 = v895;
                  if (v915.__r_.__value_.__r.__words[0])
                  {
                    std::string::basic_string[abi:ne180100]<0>(v899, "weights");
                    (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 240))(v896, v899, &v915);
                    if ((v899[23] & 0x80000000) != 0)
                      operator delete(*(void **)v899);
                  }
                  v203 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                  if (v915.__r_.__value_.__l.__size_)
                  {
                    v204 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                    do
                      v205 = __ldaxr(v204);
                    while (__stlxr(v205 - 1, v204));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                    }
                  }
                  memset(v899, 0, 24);
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v961 + 16 * v190) + 32))(*(_QWORD *)(v961 + 16 * v190), v899);
                  v207 = *(_QWORD *)&v899[8];
                  v206 = *(_QWORD *)v899;
                  while (2)
                  {
                    if (v206 == v207)
                    {
                      v915.__r_.__value_.__r.__words[0] = (std::string::size_type)v899;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v915);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      goto LABEL_487;
                    }
                    v208 = *(unsigned __int8 *)(v206 + 23);
                    if (*(char *)(v206 + 23) < 0)
                    {
                      v209 = *(char **)v206;
                      v210 = *(_QWORD *)(v206 + 8);
                    }
                    else
                    {
                      v209 = (char *)v206;
                      v210 = *(unsigned __int8 *)(v206 + 23);
                    }
                    v211 = &v209[v210];
                    if (v210 >= 5)
                    {
                      v212 = v209;
                      do
                      {
                        v213 = (char *)memchr(v212, 98, v210 - 4);
                        if (!v213)
                          break;
                        v214 = *(_DWORD *)v213 == 1651469410 && v213[4] == 95;
                        if (v214)
                          goto LABEL_412;
                        v212 = v213 + 1;
                        v210 = v211 - v212;
                      }
                      while (v211 - v212 > 4);
                    }
                    v213 = v211;
LABEL_412:
                    v216 = v213 != v211 && v213 == v209;
                    if ((v208 & 0x80) != 0)
                    {
                      v220 = *(_QWORD *)(v206 + 8);
                      a5 = v895;
                      switch(v220)
                      {
                        case 13:
                          v217 = 0;
                          v219 = **(_QWORD **)v206 == 0x746E6174736E6F63
                              && *(_QWORD *)(*(_QWORD *)v206 + 5) == 0x626F6C625F746E61;
                          goto LABEL_463;
                        case 29:
                          v217 = 0;
                          v219 = **(_QWORD **)v206 == 0x617A69746E617571
                              && *(_QWORD *)(*(_QWORD *)v206 + 8) == 0x74756C5F6E6F6974
                              && *(_QWORD *)(*(_QWORD *)v206 + 16) == 0x737468676965775FLL
                              && *(_QWORD *)(*(_QWORD *)v206 + 21) == 0x626F6C625F737468;
                          goto LABEL_463;
                        case 21:
                          v217 = 0;
                          v219 = **(_QWORD **)v206 == 0x617A69746E617571
                              && *(_QWORD *)(*(_QWORD *)v206 + 8) == 0x74756C5F6E6F6974
                              && *(_QWORD *)(*(_QWORD *)v206 + 13) == 0x626F6C625F74756CLL;
                          goto LABEL_463;
                      }
                      if (v220 != 24)
                      {
                        v217 = 0;
                        if (!v216)
                          goto LABEL_480;
                        goto LABEL_481;
                      }
                      v223 = *(char **)v206;
                    }
                    else
                    {
                      v217 = 0;
                      a5 = v895;
                      if (v208 <= 23)
                      {
                        if (v208 == 13)
                        {
                          v217 = 0;
                          v219 = *(_QWORD *)v206 == 0x746E6174736E6F63
                              && *(_QWORD *)(v206 + 5) == 0x626F6C625F746E61;
                          goto LABEL_463;
                        }
                        if (v208 == 21)
                        {
                          v217 = 0;
                          v219 = *(_QWORD *)v206 == 0x617A69746E617571
                              && *(_QWORD *)(v206 + 8) == 0x74756C5F6E6F6974
                              && *(_QWORD *)(v206 + 13) == 0x626F6C625F74756CLL;
                          goto LABEL_463;
                        }
LABEL_479:
                        if (!v216)
                        {
LABEL_480:
                          if (v217)
                            goto LABEL_481;
LABEL_482:
                          v206 += 24;
                          continue;
                        }
LABEL_481:
                        v915.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v961 + v195) + 80))(*(_QWORD *)(v961 + v195), v206);
                        (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v896 + 200))(v896, v206, &v915);
                        goto LABEL_482;
                      }
                      v223 = (char *)v206;
                      if (v208 != 24)
                      {
                        if (v208 != 29)
                          goto LABEL_479;
                        v217 = 0;
                        v219 = *(_QWORD *)v206 == 0x617A69746E617571
                            && *(_QWORD *)(v206 + 8) == 0x74756C5F6E6F6974
                            && *(_QWORD *)(v206 + 16) == 0x737468676965775FLL
                            && *(_QWORD *)(v206 + 21) == 0x626F6C625F737468;
LABEL_463:
                        if (v219)
                          v216 = 1;
                        if (!v216)
                          goto LABEL_480;
                        goto LABEL_481;
                      }
                    }
                    break;
                  }
                  v227 = *(_QWORD *)v223;
                  v228 = *((_QWORD *)v223 + 1);
                  v229 = *((_QWORD *)v223 + 2);
                  v217 = v227 == 0x617A69746E617571 && v228 == 0x6E61725F6E6F6974 && v229 == 0x626F6C625F736567;
                  goto LABEL_479;
                }
LABEL_1523:
                if (v189 >= 0)
                  v880 = buf;
                else
                  v880 = v894;
                Espresso::throw_exception_selector<Espresso::io_error,char const*>("Invalid source layer %s", (uint64_t)v880);
              }
            }
            else
            {
              if (!(_DWORD)v197)
                goto LABEL_386;
              v201 = v193;
              while (*(unsigned __int8 *)v200 == *v201)
              {
                v200 = (const void **)((char *)v200 + 1);
                ++v201;
                if (!--v197)
                  goto LABEL_386;
              }
            }
          }
          if (++v190 == v194)
            goto LABEL_1523;
        }
      }
      if (!v169)
        goto LABEL_487;
      if (!v170)
        goto LABEL_695;
      v171 = v170;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v170 + 456))(&v915);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 552))(&v905, v171);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 440))(&v904, v171);
      (*(void (**)(__int128 *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 584))(&v946, v171);
      (*(void (**)(__int128 *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 600))(&v945, v171);
      (*(void (**)(__int128 *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 568))(&v944, v171);
      std::string::basic_string[abi:ne180100]<0>(buf, "W_f32_compressed_f16");
      v172 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)&v171[20], buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      std::string::basic_string[abi:ne180100]<0>(buf, "b_f32_compressed_f16");
      v173 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)&v171[20], buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
      has_parameter_blob = Espresso::base_kernel::has_parameter_blob(v171, buf);
      v175 = has_parameter_blob;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v175)
        {
LABEL_342:
          std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
          Espresso::base_kernel::get_parameter_blob<unsigned short,1>(buf, &v943, (uint64_t)v171);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if ((_QWORD)v943)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
            v176 = v943;
            v942 = v943;
            if (*((_QWORD *)&v943 + 1))
            {
              v177 = (unint64_t *)(*((_QWORD *)&v943 + 1) + 8);
              do
                v178 = __ldxr(v177);
              while (__stxr(v178 + 1, v177));
            }
            v179 = *(_QWORD *)(v176 + 16);
            v180 = *(int *)(v176 + 8);
            std::string::basic_string[abi:ne180100]<0>(v899, "b_f16");
            v938 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v942, v179, 2 * v180, v899);
            (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v896 + 200))(v896, buf, &v938);
            if ((v899[23] & 0x80000000) != 0)
              operator delete(*(void **)v899);
            v181 = (std::__shared_weak_count *)*((_QWORD *)&v942 + 1);
            if (*((_QWORD *)&v942 + 1))
            {
              v182 = (unint64_t *)(*((_QWORD *)&v942 + 1) + 8);
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v184 = (std::__shared_weak_count *)*((_QWORD *)&v943 + 1);
          if (*((_QWORD *)&v943 + 1))
          {
            v185 = (unint64_t *)(*((_QWORD *)&v943 + 1) + 8);
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          goto LABEL_574;
        }
      }
      else if (has_parameter_blob)
      {
        goto LABEL_342;
      }
      if (!v173)
      {
        (*(void (**)(_BYTE *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 448))(buf, v171);
        v398 = *(_QWORD *)buf;
        v399 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v400 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v401 = __ldaxr(v400);
          while (__stlxr(v401 - 1, v400));
          if (!v401)
          {
            ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
            std::__shared_weak_count::__release_weak(v399);
          }
        }
        if (v398)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(__int128 *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 448))(&v943, v171);
          v940 = v943;
          v943 = 0uLL;
          (*(void (**)(uint64_t *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 448))(&v938, v171);
          v402 = *(_QWORD *)(v938 + 16);
          (*(void (**)(uint64_t *__return_ptr, int8x8_t *))(*(_QWORD *)v171 + 448))(&v936, v171);
          v403 = *(int *)(v936 + 8);
          std::string::basic_string[abi:ne180100]<0>(v899, "b");
          v941 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v940, v402, 4 * v403, v899);
          (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v896 + 200))(v896, buf, &v941);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v404 = v937;
          if (v937)
          {
            v405 = (unint64_t *)&v937->__shared_owners_;
            do
              v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (!v406)
            {
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v404);
            }
          }
          v407 = v939;
          if (v939)
          {
            v408 = (unint64_t *)&v939->__shared_owners_;
            do
              v409 = __ldaxr(v408);
            while (__stlxr(v409 - 1, v408));
            if (!v409)
            {
              ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
              std::__shared_weak_count::__release_weak(v407);
            }
          }
          v410 = (std::__shared_weak_count *)*((_QWORD *)&v940 + 1);
          if (*((_QWORD *)&v940 + 1))
          {
            v411 = (unint64_t *)(*((_QWORD *)&v940 + 1) + 8);
            do
              v412 = __ldaxr(v411);
            while (__stlxr(v412 - 1, v411));
            if (!v412)
            {
              ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
              std::__shared_weak_count::__release_weak(v410);
            }
          }
          v413 = (std::__shared_weak_count *)*((_QWORD *)&v943 + 1);
          if (*((_QWORD *)&v943 + 1))
          {
            v414 = (unint64_t *)(*((_QWORD *)&v943 + 1) + 8);
            do
              v415 = __ldaxr(v414);
            while (__stlxr(v415 - 1, v414));
            if (!v415)
            {
              ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
              std::__shared_weak_count::__release_weak(v413);
            }
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
LABEL_574:
      if (v904.__r_.__value_.__r.__words[0])
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_shuffled_weights");
        v291 = v904.__r_.__value_.__r.__words[0];
        v935 = *(_OWORD *)&v904.__r_.__value_.__l.__data_;
        if (v904.__r_.__value_.__l.__size_)
        {
          v292 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
          do
            v293 = __ldxr(v292);
          while (__stxr(v293 + 1, v292));
        }
        v294 = *(_QWORD *)(v291 + 32);
        v295 = *(int *)(v291 + 8);
        for (k = 12; k != 32; k += 4)
          v295 *= *(int *)(v291 + k);
        std::string::basic_string[abi:ne180100]<0>(v899, "");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v935, v294, 4 * v295, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v297 = (std::__shared_weak_count *)*((_QWORD *)&v935 + 1);
        if (*((_QWORD *)&v935 + 1))
        {
          v298 = (unint64_t *)(*((_QWORD *)&v935 + 1) + 8);
          do
            v299 = __ldaxr(v298);
          while (__stlxr(v299 - 1, v298));
          if (!v299)
          {
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!v915.__r_.__value_.__r.__words[0] || (_QWORD)v944)
        goto LABEL_607;
      v300 = v905.__r_.__value_.__r.__words[0];
      if (!v905.__r_.__value_.__r.__words[0] && !v172)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        v301 = v915.__r_.__value_.__r.__words[0];
        v934 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
        if (v915.__r_.__value_.__l.__size_)
        {
          v302 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
          do
            v303 = __ldxr(v302);
          while (__stxr(v303 + 1, v302));
        }
        v304 = 0;
        v305 = *(_QWORD *)(v301 + 24);
        v306 = *(int *)(v301 + 8);
        v307 = v301 + 12;
        do
        {
          v306 *= *(int *)(v307 + v304);
          v304 += 4;
        }
        while (v304 != 12);
        std::string::basic_string[abi:ne180100]<0>(v899, "W");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v934, v305, 4 * v306, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v308 = (std::__shared_weak_count *)*((_QWORD *)&v934 + 1);
        if (*((_QWORD *)&v934 + 1))
        {
          v309 = (unint64_t *)(*((_QWORD *)&v934 + 1) + 8);
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
            std::__shared_weak_count::__release_weak(v308);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
LABEL_607:
        v300 = v905.__r_.__value_.__r.__words[0];
      }
      if (v300)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        v311 = v905.__r_.__value_.__r.__words[0];
        v933 = *(_OWORD *)&v905.__r_.__value_.__l.__data_;
        if (v905.__r_.__value_.__l.__size_)
        {
          v312 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
          do
            v313 = __ldxr(v312);
          while (__stxr(v313 + 1, v312));
        }
        v314 = 0;
        v315 = *(_QWORD *)(v311 + 24);
        v316 = *(int *)(v311 + 8);
        v317 = v311 + 12;
        do
        {
          v316 *= *(int *)(v317 + v314);
          v314 += 4;
        }
        while (v314 != 12);
        std::string::basic_string[abi:ne180100]<0>(v899, "W_f16");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v933, v315, 2 * v316, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v318 = (std::__shared_weak_count *)*((_QWORD *)&v933 + 1);
        if (*((_QWORD *)&v933 + 1))
        {
          v319 = (unint64_t *)(*((_QWORD *)&v933 + 1) + 8);
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (!v320)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if ((_QWORD)v944)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "quantization_lut_weights_blob");
        v321 = v944;
        v932 = v944;
        if (*((_QWORD *)&v944 + 1))
        {
          v322 = (unint64_t *)(*((_QWORD *)&v944 + 1) + 8);
          do
            v323 = __ldxr(v322);
          while (__stxr(v323 + 1, v322));
        }
        v324 = 0;
        v325 = *(_QWORD *)(v321 + 24);
        v326 = *(int *)(v321 + 8);
        v327 = v321 + 12;
        do
        {
          v326 *= *(int *)(v327 + v324);
          v324 += 4;
        }
        while (v324 != 12);
        std::string::basic_string[abi:ne180100]<0>(v899, "");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v932, v325, v326, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v328 = (std::__shared_weak_count *)*((_QWORD *)&v932 + 1);
        if (*((_QWORD *)&v932 + 1))
        {
          v329 = (unint64_t *)(*((_QWORD *)&v932 + 1) + 8);
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
            std::__shared_weak_count::__release_weak(v328);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if ((_QWORD)v946)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "quantization_lut_blob");
        v331 = v946;
        v931 = v946;
        if (*((_QWORD *)&v946 + 1))
        {
          v332 = (unint64_t *)(*((_QWORD *)&v946 + 1) + 8);
          do
            v333 = __ldxr(v332);
          while (__stxr(v333 + 1, v332));
        }
        v334 = *(_QWORD *)(v331 + 16);
        v335 = *(int *)(v331 + 8);
        std::string::basic_string[abi:ne180100]<0>(v899, "");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v931, v334, 4 * v335, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v336 = (std::__shared_weak_count *)*((_QWORD *)&v931 + 1);
        if (*((_QWORD *)&v931 + 1))
        {
          v337 = (unint64_t *)(*((_QWORD *)&v931 + 1) + 8);
          do
            v338 = __ldaxr(v337);
          while (__stlxr(v338 - 1, v337));
          if (!v338)
          {
            ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
            std::__shared_weak_count::__release_weak(v336);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if ((_QWORD)v945)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "quantization_ranges_blob");
        v339 = v945;
        v930 = v945;
        if (*((_QWORD *)&v945 + 1))
        {
          v340 = (unint64_t *)(*((_QWORD *)&v945 + 1) + 8);
          do
            v341 = __ldxr(v340);
          while (__stxr(v341 + 1, v340));
        }
        v342 = *(_QWORD *)(v339 + 16);
        v343 = *(int *)(v339 + 8);
        std::string::basic_string[abi:ne180100]<0>(v899, "");
        *(_QWORD *)&v943 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v930, v342, 4 * v343, v899);
        (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v943);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        v344 = (std::__shared_weak_count *)*((_QWORD *)&v930 + 1);
        if (*((_QWORD *)&v930 + 1))
        {
          v345 = (unint64_t *)(*((_QWORD *)&v930 + 1) + 8);
          do
            v346 = __ldaxr(v345);
          while (__stlxr(v346 - 1, v345));
          if (!v346)
          {
            ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
            std::__shared_weak_count::__release_weak(v344);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v347 = (std::__shared_weak_count *)*((_QWORD *)&v944 + 1);
      if (*((_QWORD *)&v944 + 1))
      {
        v348 = (unint64_t *)(*((_QWORD *)&v944 + 1) + 8);
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
      v350 = (std::__shared_weak_count *)*((_QWORD *)&v945 + 1);
      if (*((_QWORD *)&v945 + 1))
      {
        v351 = (unint64_t *)(*((_QWORD *)&v945 + 1) + 8);
        do
          v352 = __ldaxr(v351);
        while (__stlxr(v352 - 1, v351));
        if (!v352)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
      }
      v353 = (std::__shared_weak_count *)*((_QWORD *)&v946 + 1);
      if (*((_QWORD *)&v946 + 1))
      {
        v354 = (unint64_t *)(*((_QWORD *)&v946 + 1) + 8);
        do
          v355 = __ldaxr(v354);
        while (__stlxr(v355 - 1, v354));
        if (!v355)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
      v356 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
      if (v904.__r_.__value_.__l.__size_)
      {
        v357 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
        do
          v358 = __ldaxr(v357);
        while (__stlxr(v358 - 1, v357));
        if (!v358)
        {
          ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
          std::__shared_weak_count::__release_weak(v356);
        }
      }
      v359 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
      if (v905.__r_.__value_.__l.__size_)
      {
        v360 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
        do
          v361 = __ldaxr(v360);
        while (__stlxr(v361 - 1, v360));
        if (!v361)
        {
          ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
          std::__shared_weak_count::__release_weak(v359);
        }
      }
      v362 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
      if (v915.__r_.__value_.__l.__size_)
      {
        v363 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
        do
          v364 = __ldaxr(v363);
        while (__stlxr(v364 - 1, v363));
        if (!v364)
        {
          ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
          std::__shared_weak_count::__release_weak(v362);
        }
      }
      v169 = *v893;
      if (!*v893)
        goto LABEL_1117;
LABEL_695:
      if (!v365)
        goto LABEL_818;
      v366 = v365;
      std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
      v367 = Espresso::base_kernel::has_parameter_blob(v366, buf);
      v368 = v367;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v368)
        {
LABEL_698:
          std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
          Espresso::base_kernel::get_parameter_blob<unsigned short,1>(buf, &v915, (uint64_t)v366);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (v915.__r_.__value_.__r.__words[0])
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
            v369 = v915.__r_.__value_.__r.__words[0];
            v929 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
            if (v915.__r_.__value_.__l.__size_)
            {
              v370 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
              do
                v371 = __ldxr(v370);
              while (__stxr(v371 + 1, v370));
            }
            v372 = *(_QWORD *)(v369 + 16);
            v373 = *(int *)(v369 + 8);
            std::string::basic_string[abi:ne180100]<0>(v899, "b_f16");
            v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v929, v372, 2 * v373, v899);
            (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v905);
            if ((v899[23] & 0x80000000) != 0)
              operator delete(*(void **)v899);
            v374 = (std::__shared_weak_count *)*((_QWORD *)&v929 + 1);
            if (*((_QWORD *)&v929 + 1))
            {
              v375 = (unint64_t *)(*((_QWORD *)&v929 + 1) + 8);
              do
                v376 = __ldaxr(v375);
              while (__stlxr(v376 - 1, v375));
              if (!v376)
              {
                ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                std::__shared_weak_count::__release_weak(v374);
              }
            }
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v377 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
          if (v915.__r_.__value_.__l.__size_)
          {
            v378 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
            do
              v379 = __ldaxr(v378);
            while (__stlxr(v379 - 1, v378));
            if (!v379)
            {
              ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
              std::__shared_weak_count::__release_weak(v377);
            }
          }
          goto LABEL_779;
        }
      }
      else if (v367)
      {
        goto LABEL_698;
      }
      (*(void (**)(_BYTE *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 408))(buf, v366);
      v380 = *(_QWORD *)buf;
      v381 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_723;
      v382 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v383 = __ldaxr(v382);
      while (__stlxr(v383 - 1, v382));
      if (!v383)
      {
        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
        std::__shared_weak_count::__release_weak(v381);
        if (!v380)
          goto LABEL_779;
      }
      else
      {
LABEL_723:
        if (!v380)
          goto LABEL_779;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 408))(&v915, v366);
      v928 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
      *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 408))(&v905, v366);
      v384 = *(_QWORD *)(v905.__r_.__value_.__r.__words[0] + 16);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 408))(&v904, v366);
      v385 = *(int *)(v904.__r_.__value_.__r.__words[0] + 8);
      std::string::basic_string[abi:ne180100]<0>(v899, "b");
      *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v928, v384, 4 * v385, v899);
      (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v946);
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      v386 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
      if (v904.__r_.__value_.__l.__size_)
      {
        v387 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
        do
          v388 = __ldaxr(v387);
        while (__stlxr(v388 - 1, v387));
        if (!v388)
        {
          ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
          std::__shared_weak_count::__release_weak(v386);
        }
      }
      v389 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
      if (v905.__r_.__value_.__l.__size_)
      {
        v390 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
        do
          v391 = __ldaxr(v390);
        while (__stlxr(v391 - 1, v390));
        if (!v391)
        {
          ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
          std::__shared_weak_count::__release_weak(v389);
        }
      }
      v392 = (std::__shared_weak_count *)*((_QWORD *)&v928 + 1);
      if (*((_QWORD *)&v928 + 1))
      {
        v393 = (unint64_t *)(*((_QWORD *)&v928 + 1) + 8);
        do
          v394 = __ldaxr(v393);
        while (__stlxr(v394 - 1, v393));
        if (!v394)
        {
          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
          std::__shared_weak_count::__release_weak(v392);
        }
      }
      v395 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
      if (v915.__r_.__value_.__l.__size_)
      {
        v396 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
        do
          v397 = __ldaxr(v396);
        while (__stlxr(v397 - 1, v396));
        if (!v397)
        {
          ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
          std::__shared_weak_count::__release_weak(v395);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
LABEL_779:
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 416))(&v915, v366);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v366 + 472))(&v905, v366);
      if (*(_QWORD *)&v366[64] || *(_QWORD *)&v366[66])
      {
        if (v915.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_t");
          v416 = v915.__r_.__value_.__r.__words[0];
          v927 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
          if (v915.__r_.__value_.__l.__size_)
          {
            v417 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
            do
              v418 = __ldxr(v417);
            while (__stxr(v418 + 1, v417));
          }
          v419 = *(_QWORD *)(v416 + 16);
          v420 = *(_DWORD *)(v416 + 8);
          v421 = *(_DWORD *)(v416 + 12);
          std::string::basic_string[abi:ne180100]<0>(v899, "w_f32_t");
          v422 = 4 * v420 * (uint64_t)v421;
          v164 = (uint64_t *)(v892 + 64);
          v904.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v927, v419, v422, v899);
          (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v904);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v423 = (std::__shared_weak_count *)*((_QWORD *)&v927 + 1);
          if (*((_QWORD *)&v927 + 1))
          {
            v424 = (unint64_t *)(*((_QWORD *)&v927 + 1) + 8);
            do
              v425 = __ldaxr(v424);
            while (__stlxr(v425 - 1, v424));
            if (!v425)
            {
              ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
              std::__shared_weak_count::__release_weak(v423);
            }
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (v905.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16_t");
          v426 = v905.__r_.__value_.__r.__words[0];
          v926 = *(_OWORD *)&v905.__r_.__value_.__l.__data_;
          if (v905.__r_.__value_.__l.__size_)
          {
            v427 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
            do
              v428 = __ldxr(v427);
            while (__stxr(v428 + 1, v427));
          }
          v429 = *(_QWORD *)(v426 + 16);
          v430 = *(_DWORD *)(v426 + 8);
          v431 = *(_DWORD *)(v426 + 12);
          std::string::basic_string[abi:ne180100]<0>(v899, "w_f16_t");
          v432 = 2 * v430 * (uint64_t)v431;
          v164 = (uint64_t *)(v892 + 64);
          v904.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v926, v429, v432, v899);
          (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v904);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v433 = (std::__shared_weak_count *)*((_QWORD *)&v926 + 1);
          if (*((_QWORD *)&v926 + 1))
          {
            v434 = (unint64_t *)(*((_QWORD *)&v926 + 1) + 8);
            do
              v435 = __ldaxr(v434);
            while (__stlxr(v435 - 1, v434));
LABEL_803:
            if (!v435)
            {
              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
              std::__shared_weak_count::__release_weak(v433);
            }
          }
          goto LABEL_805;
        }
      }
      else
      {
        if (v915.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
          v475 = v915.__r_.__value_.__r.__words[0];
          v925 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
          if (v915.__r_.__value_.__l.__size_)
          {
            v476 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
            do
              v477 = __ldxr(v476);
            while (__stxr(v477 + 1, v476));
          }
          v478 = *(_QWORD *)(v475 + 16);
          v479 = *(_DWORD *)(v475 + 8);
          v480 = *(_DWORD *)(v475 + 12);
          std::string::basic_string[abi:ne180100]<0>(v899, "W");
          v481 = 4 * v479 * (uint64_t)v480;
          v164 = (uint64_t *)(v892 + 64);
          v904.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v925, v478, v481, v899);
          (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v904);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v482 = (std::__shared_weak_count *)*((_QWORD *)&v925 + 1);
          if (*((_QWORD *)&v925 + 1))
          {
            v483 = (unint64_t *)(*((_QWORD *)&v925 + 1) + 8);
            do
              v484 = __ldaxr(v483);
            while (__stlxr(v484 - 1, v483));
            if (!v484)
            {
              ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
              std::__shared_weak_count::__release_weak(v482);
            }
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (v905.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
          v485 = v905.__r_.__value_.__r.__words[0];
          v924 = *(_OWORD *)&v905.__r_.__value_.__l.__data_;
          if (v905.__r_.__value_.__l.__size_)
          {
            v486 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
            do
              v487 = __ldxr(v486);
            while (__stxr(v487 + 1, v486));
          }
          v488 = *(_QWORD *)(v485 + 16);
          v489 = *(_DWORD *)(v485 + 8);
          v490 = *(_DWORD *)(v485 + 12);
          std::string::basic_string[abi:ne180100]<0>(v899, "W_f16");
          v491 = 2 * v489 * (uint64_t)v490;
          v164 = (uint64_t *)(v892 + 64);
          v904.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v924, v488, v491, v899);
          (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v904);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v433 = (std::__shared_weak_count *)*((_QWORD *)&v924 + 1);
          if (*((_QWORD *)&v924 + 1))
          {
            v492 = (unint64_t *)(*((_QWORD *)&v924 + 1) + 8);
            do
              v435 = __ldaxr(v492);
            while (__stlxr(v435 - 1, v492));
            goto LABEL_803;
          }
LABEL_805:
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
      v436 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
      if (v905.__r_.__value_.__l.__size_)
      {
        v437 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
        do
          v438 = __ldaxr(v437);
        while (__stlxr(v438 - 1, v437));
        if (!v438)
        {
          ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
          std::__shared_weak_count::__release_weak(v436);
        }
      }
      v439 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
      if (v915.__r_.__value_.__l.__size_)
      {
        v440 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
        do
          v441 = __ldaxr(v440);
        while (__stlxr(v441 - 1, v440));
        if (!v441)
        {
          ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
          std::__shared_weak_count::__release_weak(v439);
        }
      }
      v169 = (const void *)*v164;
      if (*v164)
      {
LABEL_818:
        if (v442)
        {
          v443 = v442;
          std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
          v444 = Espresso::base_kernel::has_parameter_blob(v443, buf);
          v445 = v444;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v445)
              goto LABEL_842;
LABEL_821:
            std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,1>(buf, &v915, (uint64_t)v443);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v915.__r_.__value_.__r.__words[0])
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
              v446 = v915.__r_.__value_.__r.__words[0];
              v923 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
              if (v915.__r_.__value_.__l.__size_)
              {
                v447 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                do
                  v448 = __ldxr(v447);
                while (__stxr(v448 + 1, v447));
              }
              v449 = *(_QWORD *)(v446 + 16);
              v450 = *(int *)(v446 + 8);
              std::string::basic_string[abi:ne180100]<0>(v899, "b_f16");
              v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v923, v449, 2 * v450, v899);
              (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v905);
              if ((v899[23] & 0x80000000) != 0)
                operator delete(*(void **)v899);
              v451 = (std::__shared_weak_count *)*((_QWORD *)&v923 + 1);
              if (*((_QWORD *)&v923 + 1))
              {
                v452 = (unint64_t *)(*((_QWORD *)&v923 + 1) + 8);
                do
                  v453 = __ldaxr(v452);
                while (__stlxr(v453 - 1, v452));
                if (!v453)
                {
                  ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                  std::__shared_weak_count::__release_weak(v451);
                }
              }
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            v454 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
            if (v915.__r_.__value_.__l.__size_)
            {
              v455 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
              do
                v456 = __ldaxr(v455);
              while (__stlxr(v456 - 1, v455));
              if (!v456)
              {
                ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                std::__shared_weak_count::__release_weak(v454);
              }
            }
          }
          else
          {
            if (v444)
              goto LABEL_821;
LABEL_842:
            (*(void (**)(_BYTE *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 408))(buf, v443);
            v457 = *(_QWORD *)buf;
            v458 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_846;
            v459 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v460 = __ldaxr(v459);
            while (__stlxr(v460 - 1, v459));
            if (!v460)
            {
              ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
              std::__shared_weak_count::__release_weak(v458);
              if (v457)
              {
LABEL_847:
                std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 408))(&v915, v443);
                v922 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
                *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 408))(&v905, v443);
                v461 = *(_QWORD *)(v905.__r_.__value_.__r.__words[0] + 16);
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 408))(&v904, v443);
                v462 = *(int *)(v904.__r_.__value_.__r.__words[0] + 8);
                std::string::basic_string[abi:ne180100]<0>(v899, "b");
                *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v922, v461, 4 * v462, v899);
                (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v946);
                if ((v899[23] & 0x80000000) != 0)
                  operator delete(*(void **)v899);
                v463 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
                if (v904.__r_.__value_.__l.__size_)
                {
                  v464 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
                  do
                    v465 = __ldaxr(v464);
                  while (__stlxr(v465 - 1, v464));
                  if (!v465)
                  {
                    ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                    std::__shared_weak_count::__release_weak(v463);
                  }
                }
                v466 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
                if (v905.__r_.__value_.__l.__size_)
                {
                  v467 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
                  do
                    v468 = __ldaxr(v467);
                  while (__stlxr(v468 - 1, v467));
                  if (!v468)
                  {
                    ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                    std::__shared_weak_count::__release_weak(v466);
                  }
                }
                v469 = (std::__shared_weak_count *)*((_QWORD *)&v922 + 1);
                if (*((_QWORD *)&v922 + 1))
                {
                  v470 = (unint64_t *)(*((_QWORD *)&v922 + 1) + 8);
                  do
                    v471 = __ldaxr(v470);
                  while (__stlxr(v471 - 1, v470));
                  if (!v471)
                  {
                    ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                    std::__shared_weak_count::__release_weak(v469);
                  }
                }
                v472 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                if (v915.__r_.__value_.__l.__size_)
                {
                  v473 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                  do
                    v474 = __ldaxr(v473);
                  while (__stlxr(v474 - 1, v473));
                  if (!v474)
                  {
                    ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                    std::__shared_weak_count::__release_weak(v472);
                  }
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
            }
            else
            {
LABEL_846:
              if (v457)
                goto LABEL_847;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "W_f16");
          v493 = Espresso::base_kernel::has_parameter_blob(v443, buf);
          v494 = v493;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v494)
              goto LABEL_920;
LABEL_897:
            std::string::basic_string[abi:ne180100]<0>(buf, "W_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,5>(buf, &v915, (uint64_t)v443);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v915.__r_.__value_.__r.__words[0])
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
              v495 = v915.__r_.__value_.__r.__words[0];
              v921 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
              if (v915.__r_.__value_.__l.__size_)
              {
                v496 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                do
                  v497 = __ldxr(v496);
                while (__stxr(v497 + 1, v496));
              }
              v498 = 0;
              v499 = *(_QWORD *)(v495 + 32);
              v500 = *(int *)(v495 + 8);
              v501 = v495 + 12;
              do
              {
                v500 *= *(int *)(v501 + v498);
                v498 += 4;
              }
              while (v498 != 16);
              std::string::basic_string[abi:ne180100]<0>(v899, "W_f16");
              v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v921, v499, 2 * v500, v899);
              (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v905);
              if ((v899[23] & 0x80000000) != 0)
                operator delete(*(void **)v899);
              v502 = (std::__shared_weak_count *)*((_QWORD *)&v921 + 1);
              if (*((_QWORD *)&v921 + 1))
              {
                v503 = (unint64_t *)(*((_QWORD *)&v921 + 1) + 8);
                do
                  v504 = __ldaxr(v503);
                while (__stlxr(v504 - 1, v503));
                if (!v504)
                {
                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                  std::__shared_weak_count::__release_weak(v502);
                }
              }
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            v505 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
            if (v915.__r_.__value_.__l.__size_)
            {
              v506 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
              do
                v507 = __ldaxr(v506);
              while (__stlxr(v507 - 1, v506));
              if (!v507)
              {
                ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                std::__shared_weak_count::__release_weak(v505);
              }
            }
          }
          else
          {
            if (v493)
              goto LABEL_897;
LABEL_920:
            (*(void (**)(_BYTE *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 416))(buf, v443);
            v508 = *(_QWORD *)buf;
            v509 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_924;
            v510 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v511 = __ldaxr(v510);
            while (__stlxr(v511 - 1, v510));
            if (!v511)
            {
              ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
              std::__shared_weak_count::__release_weak(v509);
              if (v508)
                goto LABEL_925;
            }
            else
            {
LABEL_924:
              if (v508)
              {
LABEL_925:
                std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 416))(&v915, v443);
                v920 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
                *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 416))(&v905, v443);
                v512 = *(_QWORD *)(v905.__r_.__value_.__r.__words[0] + 32);
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v443 + 416))(&v904, v443);
                v513 = 0;
                v514 = *(int *)(v904.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v514 *= *(int *)(v904.__r_.__value_.__r.__words[0] + 12 + v513);
                  v513 += 4;
                }
                while (v513 != 16);
                std::string::basic_string[abi:ne180100]<0>(v899, "W");
                *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v920, v512, 4 * v514, v899);
                (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v946);
                if ((v899[23] & 0x80000000) != 0)
                  operator delete(*(void **)v899);
                v515 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
                if (v904.__r_.__value_.__l.__size_)
                {
                  v516 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
                  do
                    v517 = __ldaxr(v516);
                  while (__stlxr(v517 - 1, v516));
                  if (!v517)
                  {
                    ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                    std::__shared_weak_count::__release_weak(v515);
                  }
                }
                v518 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
                if (v905.__r_.__value_.__l.__size_)
                {
                  v519 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
                  do
                    v520 = __ldaxr(v519);
                  while (__stlxr(v520 - 1, v519));
                  if (!v520)
                  {
                    ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
                    std::__shared_weak_count::__release_weak(v518);
                  }
                }
                v521 = (std::__shared_weak_count *)*((_QWORD *)&v920 + 1);
                if (*((_QWORD *)&v920 + 1))
                {
                  v522 = (unint64_t *)(*((_QWORD *)&v920 + 1) + 8);
                  do
                    v523 = __ldaxr(v522);
                  while (__stlxr(v523 - 1, v522));
                  if (!v523)
                  {
                    ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
                    std::__shared_weak_count::__release_weak(v521);
                  }
                }
                v524 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                if (v915.__r_.__value_.__l.__size_)
                {
                  v525 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                  do
                    v526 = __ldaxr(v525);
                  while (__stlxr(v526 - 1, v525));
                  if (!v526)
                  {
                    ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
                    std::__shared_weak_count::__release_weak(v524);
                  }
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
            }
          }
          v169 = (const void *)*v164;
          if (!*v164)
            goto LABEL_1117;
        }
        if (v527)
        {
          v528 = v527;
          std::string::basic_string[abi:ne180100]<0>(buf, "batchnorm_params_f16");
          v529 = Espresso::base_kernel::has_parameter_blob(v528, buf);
          v530 = v529;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v530)
              goto LABEL_977;
LABEL_956:
            std::string::basic_string[abi:ne180100]<0>(buf, "batchnorm_params_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,1>(buf, &v915, (uint64_t)v528);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v915.__r_.__value_.__r.__words[0])
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "blob_batchnorm_params_f16");
              v531 = v915.__r_.__value_.__r.__words[0];
              v919 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
              if (v915.__r_.__value_.__l.__size_)
              {
                v532 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                do
                  v533 = __ldxr(v532);
                while (__stxr(v533 + 1, v532));
              }
              v534 = *(_QWORD *)(v531 + 16);
              v535 = *(int *)(v531 + 8);
              std::string::basic_string[abi:ne180100]<0>(v899, "");
              v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v919, v534, 2 * v535, v899);
              (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v905);
              if ((v899[23] & 0x80000000) != 0)
                operator delete(*(void **)v899);
              v536 = (std::__shared_weak_count *)*((_QWORD *)&v919 + 1);
              if (*((_QWORD *)&v919 + 1))
              {
                v537 = (unint64_t *)(*((_QWORD *)&v919 + 1) + 8);
                do
                  v538 = __ldaxr(v537);
                while (__stlxr(v538 - 1, v537));
                if (!v538)
                {
                  ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                  std::__shared_weak_count::__release_weak(v536);
                }
              }
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            v539 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
            if (v915.__r_.__value_.__l.__size_)
            {
              v540 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
              do
                v541 = __ldaxr(v540);
              while (__stlxr(v541 - 1, v540));
              if (!v541)
              {
                ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                std::__shared_weak_count::__release_weak(v539);
              }
            }
          }
          else
          {
            if (v529)
              goto LABEL_956;
LABEL_977:
            (*(void (**)(_BYTE *__return_ptr, int8x8_t *))(*(_QWORD *)v528 + 408))(buf, v528);
            v542 = *(_QWORD *)buf;
            v543 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_981;
            v544 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v545 = __ldaxr(v544);
            while (__stlxr(v545 - 1, v544));
            if (!v545)
            {
              ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
              std::__shared_weak_count::__release_weak(v543);
              if (v542)
              {
LABEL_982:
                std::string::basic_string[abi:ne180100]<0>(buf, "blob_batchnorm_params");
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v528 + 408))(&v915, v528);
                v918 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
                *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v528 + 408))(&v905, v528);
                v546 = *(_QWORD *)(v905.__r_.__value_.__r.__words[0] + 16);
                (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(_QWORD *)v528 + 408))(&v904, v528);
                v547 = *(int *)(v904.__r_.__value_.__r.__words[0] + 8);
                std::string::basic_string[abi:ne180100]<0>(v899, "");
                *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v918, v546, 4 * v547, v899);
                (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v896 + 200))(v896, buf, &v946);
                if ((v899[23] & 0x80000000) != 0)
                  operator delete(*(void **)v899);
                v548 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
                if (v904.__r_.__value_.__l.__size_)
                {
                  v549 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
                  do
                    v550 = __ldaxr(v549);
                  while (__stlxr(v550 - 1, v549));
                  if (!v550)
                  {
                    ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                    std::__shared_weak_count::__release_weak(v548);
                  }
                }
                v551 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
                if (v905.__r_.__value_.__l.__size_)
                {
                  v552 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
                  do
                    v553 = __ldaxr(v552);
                  while (__stlxr(v553 - 1, v552));
                  if (!v553)
                  {
                    ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
                    std::__shared_weak_count::__release_weak(v551);
                  }
                }
                v554 = (std::__shared_weak_count *)*((_QWORD *)&v918 + 1);
                if (*((_QWORD *)&v918 + 1))
                {
                  v555 = (unint64_t *)(*((_QWORD *)&v918 + 1) + 8);
                  do
                    v556 = __ldaxr(v555);
                  while (__stlxr(v556 - 1, v555));
                  if (!v556)
                  {
                    ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                    std::__shared_weak_count::__release_weak(v554);
                  }
                }
                v557 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                if (v915.__r_.__value_.__l.__size_)
                {
                  v558 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                  do
                    v559 = __ldaxr(v558);
                  while (__stlxr(v559 - 1, v558));
                  if (!v559)
                  {
                    ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                    std::__shared_weak_count::__release_weak(v557);
                  }
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
            }
            else
            {
LABEL_981:
              if (v542)
                goto LABEL_982;
            }
          }
        }
        v560 = (const void *)*v164;
        if (*v164)
        {
          if (!v561)
            goto LABEL_1013;
          v562 = v561;
          v563 = v561[43];
          if (v563 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v563 + 32))(v563))
          {
            v743 = v562[43];
            v744 = *(_QWORD *)(v743 + 160);
            v745 = *(std::__shared_weak_count **)(v743 + 168);
            v915.__r_.__value_.__r.__words[0] = v744;
            v915.__r_.__value_.__l.__size_ = (std::string::size_type)v745;
            if (v745)
            {
              v746 = (unint64_t *)&v745->__shared_owners_;
              do
                v747 = __ldxr(v746);
              while (__stxr(v747 + 1, v746));
            }
            if (v744)
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "constant_blob");
              *(_QWORD *)&v917 = v744;
              *((_QWORD *)&v917 + 1) = v745;
              if (v745)
              {
                v748 = (unint64_t *)&v745->__shared_owners_;
                do
                  v749 = __ldxr(v748);
                while (__stxr(v749 + 1, v748));
              }
              v750 = 0;
              v751 = *(_QWORD *)(v744 + 24);
              v752 = *(int *)(v744 + 8);
              do
              {
                v752 *= *(int *)(v744 + 12 + v750);
                v750 += 4;
              }
              while (v750 != 12);
              std::string::basic_string[abi:ne180100]<0>(v899, "constant_blob");
              v753 = 4 * v752;
              v164 = (uint64_t *)(v892 + 64);
              v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v917, v751, v753, v899);
              (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, buf, &v905);
              if ((v899[23] & 0x80000000) != 0)
                operator delete(*(void **)v899);
              v754 = (std::__shared_weak_count *)*((_QWORD *)&v917 + 1);
              if (*((_QWORD *)&v917 + 1))
              {
                v755 = (unint64_t *)(*((_QWORD *)&v917 + 1) + 8);
                do
                  v756 = __ldaxr(v755);
                while (__stlxr(v756 - 1, v755));
                if (!v756)
                {
                  ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
                  std::__shared_weak_count::__release_weak(v754);
                }
              }
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v745 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
            }
            if (v745)
            {
              v757 = (unint64_t *)&v745->__shared_owners_;
              do
                v758 = __ldaxr(v757);
              while (__stlxr(v758 - 1, v757));
              if (!v758)
              {
                ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
                std::__shared_weak_count::__release_weak(v745);
              }
            }
          }
          else
          {
            *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
          }
          v560 = (const void *)*v164;
          if (*v164)
          {
LABEL_1013:
            if (!v564)
              goto LABEL_1085;
            v565 = v564;
            v566 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v915, (uint64_t)v566, v970);
            v567 = (_QWORD *)v565[35];
            v568 = v565 + 36;
            if (v567 != v565 + 36)
            {
              v569 = v915.__r_.__value_.__r.__words[0];
              do
              {
                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(v899, (void *)v567[7], (std::__shared_weak_count *)v567[8]);
                v570 = (char *)*a4;
                v571 = a4[1];
                v572 = ((char *)v571 - (_BYTE *)*a4) >> 3;
                v905.__r_.__value_.__r.__words[0] = v572;
                v573 = *(_QWORD *)(*(_QWORD *)v899 + 24);
                v574 = (unint64_t)a4[2];
                if ((unint64_t)v571 >= v574)
                {
                  if ((unint64_t)(v572 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v576 = v574 - (_QWORD)v570;
                  v577 = v576 >> 2;
                  if (v576 >> 2 <= (unint64_t)(v572 + 1))
                    v577 = v572 + 1;
                  if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8)
                    v578 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v578 = v577;
                  if (v578)
                    v578 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v578);
                  else
                    v579 = 0;
                  v580 = (_QWORD *)(v578 + 8 * v572);
                  *v580 = v573;
                  v575 = v580 + 1;
                  v582 = (char *)*a4;
                  v581 = (char *)a4[1];
                  if (v581 == *a4)
                  {
                    v584 = a4;
                  }
                  else
                  {
                    do
                    {
                      v583 = *((_QWORD *)v581 - 1);
                      v581 -= 8;
                      *--v580 = v583;
                    }
                    while (v581 != v582);
                    v584 = a4;
                    v581 = (char *)*a4;
                  }
                  *v584 = v580;
                  v584[1] = v575;
                  v584[2] = (void *)(v578 + 8 * v579);
                  if (v581)
                    operator delete(v581);
                }
                else
                {
                  *v571 = v573;
                  v575 = v571 + 1;
                }
                v585 = 0;
                a4[1] = v575;
                v586 = *(int *)(*(_QWORD *)v899 + 8);
                do
                {
                  v586 *= *(int *)(*(_QWORD *)v899 + 12 + v585);
                  v585 += 4;
                }
                while (v585 != 12);
                v587 = 4 * v586;
                v589 = (uint64_t *)a4[4];
                v588 = (unint64_t)a4[5];
                if ((unint64_t)v589 >= v588)
                {
                  v591 = (uint64_t *)*v885;
                  v592 = ((char *)v589 - (_BYTE *)*v885) >> 3;
                  v593 = v592 + 1;
                  if ((unint64_t)(v592 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v594 = v588 - (_QWORD)v591;
                  if (v594 >> 2 > v593)
                    v593 = v594 >> 2;
                  v595 = (unint64_t)v594 >= 0x7FFFFFFFFFFFFFF8;
                  v596 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v595)
                    v596 = v593;
                  if (v596)
                  {
                    v596 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v596);
                    v591 = (uint64_t *)a4[3];
                    v589 = (uint64_t *)a4[4];
                  }
                  else
                  {
                    v597 = 0;
                  }
                  v598 = (uint64_t *)(v596 + 8 * v592);
                  *v598 = v587;
                  v590 = v598 + 1;
                  if (v589 == v591)
                  {
                    v164 = (uint64_t *)(v892 + 64);
                  }
                  else
                  {
                    v164 = (uint64_t *)(v892 + 64);
                    do
                    {
                      v599 = *--v589;
                      *--v598 = v599;
                    }
                    while (v589 != v591);
                  }
                  a4[3] = v598;
                  a4[4] = v590;
                  a4[5] = (void *)(v596 + 8 * v597);
                  if (v591)
                    operator delete(v591);
                }
                else
                {
                  *v589 = v587;
                  v590 = v589 + 1;
                  v164 = (uint64_t *)(v892 + 64);
                }
                a4[4] = v590;
                Espresso::SerDes::generic_serdes_object::operator[](v569, (uint64_t)(v567 + 4), buf);
                (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 192))(*(_QWORD *)buf, &buf[16], &v905);
                a5 = v895;
                if ((buf[39] & 0x80000000) != 0)
                  operator delete(*(void **)&buf[16]);
                v600 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v601 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v602 = __ldaxr(v601);
                  while (__stlxr(v602 - 1, v601));
                  if (!v602)
                  {
                    ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
                    std::__shared_weak_count::__release_weak(v600);
                  }
                }
                v603 = *(std::__shared_weak_count **)&v899[8];
                if (*(_QWORD *)&v899[8])
                {
                  v604 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
                  do
                    v605 = __ldaxr(v604);
                  while (__stlxr(v605 - 1, v604));
                  if (!v605)
                  {
                    ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
                    std::__shared_weak_count::__release_weak(v603);
                  }
                }
                v606 = (_QWORD *)v567[1];
                if (v606)
                {
                  do
                  {
                    v607 = v606;
                    v606 = (_QWORD *)*v606;
                  }
                  while (v606);
                }
                else
                {
                  do
                  {
                    v607 = (_QWORD *)v567[2];
                    v214 = *v607 == (_QWORD)v567;
                    v567 = v607;
                  }
                  while (!v214);
                }
                v567 = v607;
              }
              while (v607 != v568);
            }
            std::string::basic_string[abi:ne180100]<0>(v899, "weights");
            Espresso::SerDes::generic_serdes_object::operator[](v896, (uint64_t)v899, buf);
            (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 240))(*(_QWORD *)buf, &buf[16], &v915);
            if ((buf[39] & 0x80000000) != 0)
              operator delete(*(void **)&buf[16]);
            v608 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v609 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v610 = __ldaxr(v609);
              while (__stlxr(v610 - 1, v609));
              if (!v610)
              {
                ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                std::__shared_weak_count::__release_weak(v608);
              }
            }
            if ((v899[23] & 0x80000000) != 0)
              operator delete(*(void **)v899);
            v611 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
            if (v915.__r_.__value_.__l.__size_)
            {
              v612 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
              do
                v613 = __ldaxr(v612);
              while (__stlxr(v613 - 1, v612));
              if (!v613)
              {
                ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
                std::__shared_weak_count::__release_weak(v611);
              }
            }
            v560 = (const void *)*v164;
            if (*v164)
            {
LABEL_1085:
              if (v614)
              {
                v615 = (__int128 *)v614[48];
                v616 = (__int128 *)(v614 + 49);
                if (v615 != (__int128 *)(v614 + 49))
                {
                  do
                  {
                    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)buf, v615 + 2);
                    if (*(_QWORD *)&buf[24])
                    {
                      if (buf[23] >= 0)
                        v617 = buf;
                      else
                        v617 = *(char **)buf;
                      std::string::basic_string[abi:ne180100]<0>(v899, v617);
                      v618 = *(_QWORD *)&buf[24];
                      v916 = *(_OWORD *)&buf[24];
                      if (*(_QWORD *)&buf[32])
                      {
                        v619 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
                        do
                          v620 = __ldxr(v619);
                        while (__stxr(v620 + 1, v619));
                        v618 = *(_QWORD *)&buf[24];
                      }
                      v621 = *(_QWORD *)(v618 + 16);
                      v622 = *(int *)(v618 + 8);
                      std::string::basic_string[abi:ne180100]<0>(&v915, "");
                      v905.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, v164, &v916, v621, v622, (unsigned __int8 *)&v915);
                      (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v896 + 200))(v896, v899, &v905);
                      if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v915.__r_.__value_.__l.__data_);
                      v623 = (std::__shared_weak_count *)*((_QWORD *)&v916 + 1);
                      if (*((_QWORD *)&v916 + 1))
                      {
                        v624 = (unint64_t *)(*((_QWORD *)&v916 + 1) + 8);
                        do
                          v625 = __ldaxr(v624);
                        while (__stlxr(v625 - 1, v624));
                        if (!v625)
                        {
                          ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
                          std::__shared_weak_count::__release_weak(v623);
                        }
                      }
                      if ((v899[23] & 0x80000000) != 0)
                        operator delete(*(void **)v899);
                    }
                    v626 = *(std::__shared_weak_count **)&buf[32];
                    if (*(_QWORD *)&buf[32])
                    {
                      v627 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
                      do
                        v628 = __ldaxr(v627);
                      while (__stlxr(v628 - 1, v627));
                      if (!v628)
                      {
                        ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                        std::__shared_weak_count::__release_weak(v626);
                      }
                    }
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    v629 = (__int128 *)*((_QWORD *)v615 + 1);
                    if (v629)
                    {
                      do
                      {
                        v630 = v629;
                        v629 = *(__int128 **)v629;
                      }
                      while (v629);
                    }
                    else
                    {
                      do
                      {
                        v630 = (__int128 *)*((_QWORD *)v615 + 2);
                        v214 = *(_QWORD *)v630 == (_QWORD)v615;
                        v615 = v630;
                      }
                      while (!v214);
                    }
                    v615 = v630;
                  }
                  while (v630 != v616);
                }
              }
            }
          }
        }
      }
LABEL_1117:
      *(_OWORD *)&v905.__r_.__value_.__l.__data_ = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(buf, "weights");
      v631 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v896 + 24))(v896, buf);
      v632 = v631;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v632)
        {
LABEL_1119:
          std::string::basic_string[abi:ne180100]<0>(buf, "weights");
          (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v896 + 120))(v899, v896, buf);
          v633 = *(_OWORD *)v899;
          *(_OWORD *)v899 = 0uLL;
          v634 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
          *(_OWORD *)&v905.__r_.__value_.__l.__data_ = v633;
          if (v634)
          {
            v635 = (unint64_t *)&v634->__shared_owners_;
            do
              v636 = __ldaxr(v635);
            while (__stlxr(v636 - 1, v635));
            if (!v636)
            {
              ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
              std::__shared_weak_count::__release_weak(v634);
            }
          }
          v637 = *(std::__shared_weak_count **)&v899[8];
          if (*(_QWORD *)&v899[8])
          {
            v638 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
            do
              v639 = __ldaxr(v638);
            while (__stlxr(v639 - 1, v638));
            if (!v639)
            {
              ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
              std::__shared_weak_count::__release_weak(v637);
            }
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          goto LABEL_1142;
        }
      }
      else if (v631)
      {
        goto LABEL_1119;
      }
      v640 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(buf, (uint64_t)v640, v970);
      v641 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v642 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
      *(_OWORD *)&v905.__r_.__value_.__l.__data_ = v641;
      if (v642)
      {
        v643 = (unint64_t *)&v642->__shared_owners_;
        do
          v644 = __ldaxr(v643);
        while (__stlxr(v644 - 1, v643));
        if (!v644)
        {
          ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
          std::__shared_weak_count::__release_weak(v642);
        }
      }
      v645 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v646 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v647 = __ldaxr(v646);
        while (__stlxr(v647 - 1, v646));
        if (!v647)
        {
          ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
          std::__shared_weak_count::__release_weak(v645);
        }
      }
LABEL_1142:
      v648 = v905.__r_.__value_.__r.__words[0];
      v649 = *(_QWORD *)(v892 + 64);
      v650 = *(_QWORD *)(v892 + 72);
      v904.__r_.__value_.__r.__words[0] = v649;
      v904.__r_.__value_.__l.__size_ = v650;
      if (v650)
      {
        v651 = (unint64_t *)(v650 + 8);
        do
          v652 = __ldxr(v651);
        while (__stxr(v652 + 1, v651));
      }
      memset(buf, 0, 32);
      *(_DWORD *)&buf[32] = 1065353216;
      v653 = *(_QWORD **)(v649 + 152);
      v654 = (_QWORD *)(v649 + 160);
      if (v653 != (_QWORD *)(v649 + 160))
      {
        do
        {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, _QWORD *))(*(_QWORD *)v904.__r_.__value_.__l.__data_
                                                                                              + 184))(&v915, v904.__r_.__value_.__r.__words[0], v653 + 4);
          v655 = v915.__r_.__value_.__r.__words[0];
          v914 = *(_OWORD *)&v915.__r_.__value_.__l.__data_;
          if (v915.__r_.__value_.__l.__size_)
          {
            v656 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
            do
              v657 = __ldxr(v656);
            while (__stxr(v657 + 1, v656));
          }
          v658 = *(_QWORD *)(v655 + 16);
          v659 = *(int *)(v655 + 8);
          std::string::basic_string[abi:ne180100]<0>(v899, "");
          *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)&v904, &v914, v658, v659, v899);
          (*(void (**)(std::string::size_type, _QWORD *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v653 + 4, &v946);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          v660 = (std::__shared_weak_count *)*((_QWORD *)&v914 + 1);
          if (*((_QWORD *)&v914 + 1))
          {
            v661 = (unint64_t *)(*((_QWORD *)&v914 + 1) + 8);
            do
              v662 = __ldaxr(v661);
            while (__stlxr(v662 - 1, v661));
            if (!v662)
            {
              ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
              std::__shared_weak_count::__release_weak(v660);
            }
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)buf, (uint64_t)(v653 + 4), (uint64_t)(v653 + 4));
          v663 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
          if (v915.__r_.__value_.__l.__size_)
          {
            v664 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
            do
              v665 = __ldaxr(v664);
            while (__stlxr(v665 - 1, v664));
            if (!v665)
            {
              ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
              std::__shared_weak_count::__release_weak(v663);
            }
          }
          v666 = (_QWORD *)v653[1];
          if (v666)
          {
            do
            {
              v667 = v666;
              v666 = (_QWORD *)*v666;
            }
            while (v666);
          }
          else
          {
            do
            {
              v667 = (_QWORD *)v653[2];
              v214 = *v667 == (_QWORD)v653;
              v653 = v667;
            }
            while (!v214);
          }
          v653 = v667;
        }
        while (v667 != v654);
      }
      v668 = *v893;
      if (*v893)
      {
        if (v669)
        {
          v670 = (_QWORD *)v669[35];
          v671 = v669 + 36;
          if (v670 != v669 + 36)
          {
            while (1)
            {
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(buf, (uint64_t)(v670 + 4)))
              {
                v672 = v670[7];
                if (v672 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v672 + 32))(v672))
                {
                  v675 = v670[7];
                  v676 = *(_QWORD *)(v675 + 160);
                  v677 = *(_QWORD *)(v675 + 168);
                  v915.__r_.__value_.__r.__words[0] = v676;
                  v915.__r_.__value_.__l.__size_ = v677;
                  if (v677)
                  {
                    v678 = (unint64_t *)(v677 + 8);
                    do
                      v679 = __ldxr(v678);
                    while (__stxr(v679 + 1, v678));
                    v680 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                    if (v676)
                    {
                      *(_QWORD *)&v913 = v676;
                      *((_QWORD *)&v913 + 1) = v915.__r_.__value_.__l.__size_;
                      if (v915.__r_.__value_.__l.__size_)
                      {
                        v681 = (unint64_t *)(v915.__r_.__value_.__l.__size_ + 8);
                        do
                          v682 = __ldxr(v681);
                        while (__stxr(v682 + 1, v681));
                      }
LABEL_1191:
                      v683 = 0;
                      v684 = *(_QWORD *)(v676 + 24);
                      v685 = *(int *)(v676 + 8);
                      v686 = v676 + 12;
                      do
                      {
                        v685 *= *(int *)(v686 + v683);
                        v683 += 4;
                      }
                      while (v683 != 12);
                      std::string::basic_string[abi:ne180100]<0>(v899, "");
                      *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v913, v684, 4 * v685, v899);
                      (*(void (**)(std::string::size_type, _QWORD *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v670 + 4, &v946);
                      if ((v899[23] & 0x80000000) != 0)
                        operator delete(*(void **)v899);
                      v687 = (std::__shared_weak_count *)*((_QWORD *)&v913 + 1);
                      if (*((_QWORD *)&v913 + 1))
                      {
                        v688 = (unint64_t *)(*((_QWORD *)&v913 + 1) + 8);
                        do
                          v689 = __ldaxr(v688);
                        while (__stlxr(v689 - 1, v688));
                        if (!v689)
                        {
                          ((void (*)(std::__shared_weak_count *))v687->__on_zero_shared)(v687);
                          std::__shared_weak_count::__release_weak(v687);
                        }
                      }
                      v680 = (std::__shared_weak_count *)v915.__r_.__value_.__l.__size_;
                    }
                    if (v680)
                    {
                      v690 = (unint64_t *)&v680->__shared_owners_;
                      do
                        v691 = __ldaxr(v690);
                      while (__stlxr(v691 - 1, v690));
                      if (!v691)
                      {
                        ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
                        std::__shared_weak_count::__release_weak(v680);
                      }
                    }
                    goto LABEL_1174;
                  }
                  if (v676)
                  {
                    v913 = v676;
                    goto LABEL_1191;
                  }
                }
                else
                {
                  *(_OWORD *)&v915.__r_.__value_.__l.__data_ = 0uLL;
                }
              }
LABEL_1174:
              v673 = (_QWORD *)v670[1];
              if (v673)
              {
                do
                {
                  v674 = v673;
                  v673 = (_QWORD *)*v673;
                }
                while (v673);
              }
              else
              {
                do
                {
                  v674 = (_QWORD *)v670[2];
                  v214 = *v674 == (_QWORD)v670;
                  v670 = v674;
                }
                while (!v214);
              }
              v670 = v674;
              if (v674 == v671)
                goto LABEL_1333;
            }
          }
          goto LABEL_1333;
        }
        if (v692)
        {
          v693 = v692;
          if (v692[43])
          {
            std::string::basic_string[abi:ne180100]<0>(v899, "params_prelu");
            v694 = v693[43];
            v695 = v693[44];
            *(_QWORD *)&v912 = v694;
            *((_QWORD *)&v912 + 1) = v695;
            if (v695)
            {
              v696 = (unint64_t *)(v695 + 8);
              do
                v697 = __ldxr(v696);
              while (__stxr(v697 + 1, v696));
              v694 = v693[43];
            }
            v698 = *(_QWORD *)(v694 + 16);
            v699 = *(int *)(v694 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v915, "");
            *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v912, v698, 4 * v699, (unsigned __int8 *)&v915);
            (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
            if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v915.__r_.__value_.__l.__data_);
            v700 = (std::__shared_weak_count *)*((_QWORD *)&v912 + 1);
            if (*((_QWORD *)&v912 + 1))
            {
              v701 = (unint64_t *)(*((_QWORD *)&v912 + 1) + 8);
              do
                v702 = __ldaxr(v701);
              while (__stlxr(v702 - 1, v701));
              if (!v702)
              {
                ((void (*)(std::__shared_weak_count *))v700->__on_zero_shared)(v700);
                std::__shared_weak_count::__release_weak(v700);
              }
            }
            if ((v899[23] & 0x80000000) != 0)
              operator delete(*(void **)v899);
          }
          if (v693[45])
          {
            std::string::basic_string[abi:ne180100]<0>(v899, "softplus_alphas");
            v703 = v693[45];
            v704 = v693[46];
            *(_QWORD *)&v911 = v703;
            *((_QWORD *)&v911 + 1) = v704;
            if (v704)
            {
              v705 = (unint64_t *)(v704 + 8);
              do
                v706 = __ldxr(v705);
              while (__stxr(v706 + 1, v705));
              v703 = v693[45];
            }
            v707 = *(_QWORD *)(v703 + 16);
            v708 = *(int *)(v703 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v915, "");
            *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v911, v707, 4 * v708, (unsigned __int8 *)&v915);
            (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
            if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v915.__r_.__value_.__l.__data_);
            v709 = (std::__shared_weak_count *)*((_QWORD *)&v911 + 1);
            if (*((_QWORD *)&v911 + 1))
            {
              v710 = (unint64_t *)(*((_QWORD *)&v911 + 1) + 8);
              do
                v711 = __ldaxr(v710);
              while (__stlxr(v711 - 1, v710));
              if (!v711)
              {
                ((void (*)(std::__shared_weak_count *))v709->__on_zero_shared)(v709);
                std::__shared_weak_count::__release_weak(v709);
              }
            }
            if ((v899[23] & 0x80000000) != 0)
              operator delete(*(void **)v899);
          }
          if (v693[47])
          {
            std::string::basic_string[abi:ne180100]<0>(v899, "softplus_betas");
            v712 = v693[47];
            v713 = v693[48];
            *(_QWORD *)&v910 = v712;
            *((_QWORD *)&v910 + 1) = v713;
            if (v713)
            {
              v714 = (unint64_t *)(v713 + 8);
              do
                v715 = __ldxr(v714);
              while (__stxr(v715 + 1, v714));
              v712 = v693[47];
            }
            v716 = *(_QWORD *)(v712 + 16);
            v717 = *(int *)(v712 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v915, "");
            *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v910, v716, 4 * v717, (unsigned __int8 *)&v915);
            (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
            if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v915.__r_.__value_.__l.__data_);
            v718 = (std::__shared_weak_count *)*((_QWORD *)&v910 + 1);
            if (!*((_QWORD *)&v910 + 1))
              goto LABEL_1331;
            v719 = (unint64_t *)(*((_QWORD *)&v910 + 1) + 8);
            do
              v720 = __ldaxr(v719);
            while (__stlxr(v720 - 1, v719));
            goto LABEL_1329;
          }
        }
        else
        {
          if (v721)
          {
            v722 = v721;
            if (v721[36])
            {
              std::string::basic_string[abi:ne180100]<0>(v899, "scale");
              v724 = v722[36];
              v723 = v722[37];
              *(_QWORD *)&v909 = v724;
              *((_QWORD *)&v909 + 1) = v723;
              if (v723)
              {
                v725 = (unint64_t *)(v723 + 8);
                do
                  v726 = __ldxr(v725);
                while (__stxr(v726 + 1, v725));
                v724 = v722[36];
              }
              v727 = 0;
              v728 = *(_QWORD *)(v724 + 24);
              v729 = *(int *)(v724 + 8);
              v730 = v724 + 12;
              do
              {
                v729 *= *(int *)(v730 + v727);
                v727 += 4;
              }
              while (v727 != 12);
              std::string::basic_string[abi:ne180100]<0>(&v915, "");
              *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v909, v728, 4 * v729, (unsigned __int8 *)&v915);
              (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
              if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v915.__r_.__value_.__l.__data_);
              v731 = (std::__shared_weak_count *)*((_QWORD *)&v909 + 1);
              if (*((_QWORD *)&v909 + 1))
              {
                v732 = (unint64_t *)(*((_QWORD *)&v909 + 1) + 8);
                do
                  v733 = __ldaxr(v732);
                while (__stlxr(v733 - 1, v732));
                if (!v733)
                {
                  ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
                  std::__shared_weak_count::__release_weak(v731);
                }
              }
              if ((v899[23] & 0x80000000) != 0)
                operator delete(*(void **)v899);
            }
            if (v722[38])
            {
              std::string::basic_string[abi:ne180100]<0>(v899, "zero_point");
              v735 = v722[38];
              v734 = v722[39];
              *(_QWORD *)&v908 = v735;
              *((_QWORD *)&v908 + 1) = v734;
              if (v734)
              {
                v736 = (unint64_t *)(v734 + 8);
                do
                  v737 = __ldxr(v736);
                while (__stxr(v737 + 1, v736));
                v735 = v722[38];
              }
              v738 = 0;
              v739 = *(_QWORD *)(v735 + 24);
              v740 = *(int *)(v735 + 8);
              v741 = v735 + 12;
              do
              {
                v740 *= *(int *)(v741 + v738);
                v738 += 4;
              }
              while (v738 != 12);
              std::string::basic_string[abi:ne180100]<0>(&v915, "");
              *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v908, v739, 4 * v740, (unsigned __int8 *)&v915);
              (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
              if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v915.__r_.__value_.__l.__data_);
              v718 = (std::__shared_weak_count *)*((_QWORD *)&v908 + 1);
              if (!*((_QWORD *)&v908 + 1))
                goto LABEL_1331;
              v742 = (unint64_t *)(*((_QWORD *)&v908 + 1) + 8);
              do
                v720 = __ldaxr(v742);
              while (__stlxr(v720 - 1, v742));
LABEL_1329:
              if (!v720)
              {
                ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
                std::__shared_weak_count::__release_weak(v718);
              }
              goto LABEL_1331;
            }
          }
          else
          {
            if (v759)
            {
              v760 = v759;
              if (v759[36])
              {
                std::string::basic_string[abi:ne180100]<0>(v899, "scale");
                v762 = v760[36];
                v761 = v760[37];
                *(_QWORD *)&v907 = v762;
                *((_QWORD *)&v907 + 1) = v761;
                if (v761)
                {
                  v763 = (unint64_t *)(v761 + 8);
                  do
                    v764 = __ldxr(v763);
                  while (__stxr(v764 + 1, v763));
                  v762 = v760[36];
                }
                v765 = 0;
                v766 = *(_QWORD *)(v762 + 24);
                v767 = *(int *)(v762 + 8);
                v768 = v762 + 12;
                do
                {
                  v767 *= *(int *)(v768 + v765);
                  v765 += 4;
                }
                while (v765 != 12);
                std::string::basic_string[abi:ne180100]<0>(&v915, "");
                *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v907, v766, 4 * v767, (unsigned __int8 *)&v915);
                (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
                if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v915.__r_.__value_.__l.__data_);
                v769 = (std::__shared_weak_count *)*((_QWORD *)&v907 + 1);
                if (*((_QWORD *)&v907 + 1))
                {
                  v770 = (unint64_t *)(*((_QWORD *)&v907 + 1) + 8);
                  do
                    v771 = __ldaxr(v770);
                  while (__stlxr(v771 - 1, v770));
                  if (!v771)
                  {
                    ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
                    std::__shared_weak_count::__release_weak(v769);
                  }
                }
                if ((v899[23] & 0x80000000) != 0)
                  operator delete(*(void **)v899);
              }
              if (v760[38])
              {
                std::string::basic_string[abi:ne180100]<0>(v899, "zero_point");
                v773 = v760[38];
                v772 = v760[39];
                *(_QWORD *)&v906 = v773;
                *((_QWORD *)&v906 + 1) = v772;
                if (v772)
                {
                  v774 = (unint64_t *)(v772 + 8);
                  do
                    v775 = __ldxr(v774);
                  while (__stxr(v775 + 1, v774));
                  v773 = v760[38];
                }
                v776 = 0;
                v777 = *(_QWORD *)(v773 + 24);
                v778 = *(int *)(v773 + 8);
                v779 = v773 + 12;
                do
                {
                  v778 *= *(int *)(v779 + v776);
                  v776 += 4;
                }
                while (v776 != 12);
                std::string::basic_string[abi:ne180100]<0>(&v915, "");
                *(_QWORD *)&v946 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)v893, &v906, v777, 4 * v778, (unsigned __int8 *)&v915);
                (*(void (**)(std::string::size_type, _BYTE *, __int128 *))(*(_QWORD *)v648 + 200))(v648, v899, &v946);
                if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v915.__r_.__value_.__l.__data_);
                v718 = (std::__shared_weak_count *)*((_QWORD *)&v906 + 1);
                if (*((_QWORD *)&v906 + 1))
                {
                  v780 = (unint64_t *)(*((_QWORD *)&v906 + 1) + 8);
                  do
                    v720 = __ldaxr(v780);
                  while (__stlxr(v720 - 1, v780));
                  goto LABEL_1329;
                }
LABEL_1331:
                if ((v899[23] & 0x80000000) != 0)
                  operator delete(*(void **)v899);
              }
            }
          }
        }
      }
LABEL_1333:
      std::string::basic_string[abi:ne180100]<0>(&v915, "weights");
      Espresso::SerDes::generic_serdes_object::operator[](v896, (uint64_t)&v915, v899);
      (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)v899 + 240))(*(_QWORD *)v899, &v899[16], &v905);
      if (SHIBYTE(v900) < 0)
        operator delete(*(void **)&v899[16]);
      v781 = *(std::__shared_weak_count **)&v899[8];
      if (*(_QWORD *)&v899[8])
      {
        v782 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
        do
          v783 = __ldaxr(v782);
        while (__stlxr(v783 - 1, v782));
        if (!v783)
        {
          ((void (*)(std::__shared_weak_count *))v781->__on_zero_shared)(v781);
          std::__shared_weak_count::__release_weak(v781);
        }
      }
      if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v915.__r_.__value_.__l.__data_);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
      v784 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
      if (v904.__r_.__value_.__l.__size_)
      {
        v785 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
        do
          v786 = __ldaxr(v785);
        while (__stlxr(v786 - 1, v785));
        if (!v786)
        {
          ((void (*)(std::__shared_weak_count *))v784->__on_zero_shared)(v784);
          std::__shared_weak_count::__release_weak(v784);
        }
      }
      v787 = (std::__shared_weak_count *)v905.__r_.__value_.__l.__size_;
      if (v905.__r_.__value_.__l.__size_)
      {
        v788 = (unint64_t *)(v905.__r_.__value_.__l.__size_ + 8);
        do
          v789 = __ldaxr(v788);
        while (__stlxr(v789 - 1, v788));
        if (!v789)
        {
          ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
          std::__shared_weak_count::__release_weak(v787);
        }
      }
LABEL_487:
      v232 = *((_QWORD *)&v961 + 1);
      if (*((_QWORD *)&v961 + 1) >= (unint64_t)v962)
      {
        v237 = (uint64_t)(*((_QWORD *)&v961 + 1) - v961) >> 4;
        v238 = v237 + 1;
        if ((unint64_t)(v237 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v239 = (uint64_t)&v962[-v961];
        if ((uint64_t)&v962[-v961] >> 3 > v238)
          v238 = v239 >> 3;
        if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF0)
          v240 = 0xFFFFFFFFFFFFFFFLL;
        else
          v240 = v238;
        *(_QWORD *)&buf[32] = &v962;
        v241 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v240);
        v243 = &v241[16 * v237];
        v244 = *((_QWORD *)&v950 + 1);
        *(_OWORD *)v243 = v950;
        if (v244)
        {
          v245 = (unint64_t *)(v244 + 8);
          do
            v246 = __ldxr(v245);
          while (__stxr(v246 + 1, v245));
        }
        v247 = (_QWORD *)*((_QWORD *)&v961 + 1);
        v248 = (_QWORD *)v961;
        if (*((_QWORD *)&v961 + 1) == (_QWORD)v961)
        {
          v251 = vdupq_n_s64(*((unint64_t *)&v961 + 1));
          v249 = &v241[16 * v237];
        }
        else
        {
          v249 = &v241[16 * v237];
          do
          {
            v250 = *((_OWORD *)v247 - 1);
            v247 -= 2;
            *((_OWORD *)v249 - 1) = v250;
            v249 -= 16;
            *v247 = 0;
            v247[1] = 0;
          }
          while (v247 != v248);
          v251 = (int64x2_t)v961;
        }
        v236 = v243 + 16;
        *(_QWORD *)&v961 = v249;
        *((_QWORD *)&v961 + 1) = v243 + 16;
        *(int64x2_t *)&buf[8] = v251;
        v252 = v962;
        v962 = &v241[16 * v242];
        *(_QWORD *)&buf[24] = v252;
        *(_QWORD *)buf = v251.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        **((_QWORD **)&v961 + 1) = v950;
        v233 = *((_QWORD *)&v950 + 1);
        *(_QWORD *)(v232 + 8) = *((_QWORD *)&v950 + 1);
        if (v233)
        {
          v234 = (unint64_t *)(v233 + 8);
          do
            v235 = __ldxr(v234);
          while (__stxr(v235 + 1, v234));
        }
        v236 = (_OWORD *)(v232 + 16);
      }
      *((_QWORD *)&v961 + 1) = v236;
      Espresso::layer_data::shapes((Espresso::layer_data *)&v915, *(uint64_t **)(v892 + 104), *(uint64_t **)(v892 + 112));
      v253 = v915.__r_.__value_.__r.__words[0];
      if (v915.__r_.__value_.__l.__size_ != v915.__r_.__value_.__r.__words[0])
      {
        v254 = 0;
        do
        {
          v255 = v253 + (v254 << 6);
          v256 = *(_OWORD *)v255;
          v257 = *(_OWORD *)(v255 + 16);
          *(_QWORD *)&buf[32] = *(_QWORD *)(v255 + 32);
          *(_OWORD *)buf = v256;
          *(_OWORD *)&buf[16] = v257;
          v981 = 0;
          v982 = 0;
          v980 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v980, *(const void **)(v255 + 40), *(_QWORD *)(v255 + 48), (uint64_t)(*(_QWORD *)(v255 + 48) - *(_QWORD *)(v255 + 40)) >> 2);
          v258 = (uint64_t)*a2 + 96;
          *(_QWORD *)v899 = v142;
          v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v258, v142, v899)[3]+ 24 * v254;
          if (*(char *)(v259 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v905, *(const std::string::value_type **)v259, *(_QWORD *)(v259 + 8));
          }
          else
          {
            v260 = *(_OWORD *)v259;
            v905.__r_.__value_.__r.__words[2] = *(_QWORD *)(v259 + 16);
            *(_OWORD *)&v905.__r_.__value_.__l.__data_ = v260;
          }
          v261 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v904, (uint64_t)v261, v970);
          Espresso::SerDes::params_io<Espresso::layer_shape>((uint64_t)v904.__r_.__value_.__l.__data_, (uint64_t)buf, 1);
          Espresso::SerDes::generic_serdes_object::operator[](v966, (uint64_t)&v905, v899);
          (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)v899 + 240))(*(_QWORD *)v899, &v899[16], &v904);
          if (SHIBYTE(v900) < 0)
            operator delete(*(void **)&v899[16]);
          v262 = *(std::__shared_weak_count **)&v899[8];
          if (*(_QWORD *)&v899[8])
          {
            v263 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 - 1, v263));
            if (!v264)
            {
              ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
              std::__shared_weak_count::__release_weak(v262);
            }
          }
          v265 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
          if (v904.__r_.__value_.__l.__size_)
          {
            v266 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
          if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v905.__r_.__value_.__l.__data_);
          if (v980)
          {
            v981 = v980;
            operator delete(v980);
          }
          ++v254;
          v253 = v915.__r_.__value_.__r.__words[0];
        }
        while (v254 < (uint64_t)(v915.__r_.__value_.__l.__size_ - v915.__r_.__value_.__r.__words[0]) >> 6);
      }
      Espresso::layer_data::shapes((Espresso::layer_data *)&v905, *(uint64_t **)(v892 + 80), *(uint64_t **)(v892 + 88));
      v268 = v905.__r_.__value_.__r.__words[0];
      if (v905.__r_.__value_.__l.__size_ != v905.__r_.__value_.__r.__words[0])
      {
        v269 = 0;
        do
        {
          v270 = v268 + (v269 << 6);
          v271 = *(_OWORD *)v270;
          v272 = *(_OWORD *)(v270 + 16);
          *(_QWORD *)&buf[32] = *(_QWORD *)(v270 + 32);
          *(_OWORD *)buf = v271;
          *(_OWORD *)&buf[16] = v272;
          v981 = 0;
          v982 = 0;
          v980 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v980, *(const void **)(v270 + 40), *(_QWORD *)(v270 + 48), (uint64_t)(*(_QWORD *)(v270 + 48) - *(_QWORD *)(v270 + 40)) >> 2);
          v273 = (uint64_t)*a2 + 56;
          *(_QWORD *)v899 = v142;
          v274 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v273, v142, v899)[3]+ 24 * v269;
          if (*(char *)(v274 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v904, *(const std::string::value_type **)v274, *(_QWORD *)(v274 + 8));
          }
          else
          {
            v275 = *(_OWORD *)v274;
            v904.__r_.__value_.__r.__words[2] = *(_QWORD *)(v274 + 16);
            *(_OWORD *)&v904.__r_.__value_.__l.__data_ = v275;
          }
          v276 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v946, (uint64_t)v276, v970);
          Espresso::SerDes::params_io<Espresso::layer_shape>(v946, (uint64_t)buf, 1);
          Espresso::SerDes::generic_serdes_object::operator[](v966, (uint64_t)&v904, v899);
          (*(void (**)(_QWORD, _BYTE *, __int128 *))(**(_QWORD **)v899 + 240))(*(_QWORD *)v899, &v899[16], &v946);
          if (SHIBYTE(v900) < 0)
            operator delete(*(void **)&v899[16]);
          v277 = *(std::__shared_weak_count **)&v899[8];
          if (*(_QWORD *)&v899[8])
          {
            v278 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
            do
              v279 = __ldaxr(v278);
            while (__stlxr(v279 - 1, v278));
            if (!v279)
            {
              ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
              std::__shared_weak_count::__release_weak(v277);
            }
          }
          v280 = (std::__shared_weak_count *)*((_QWORD *)&v946 + 1);
          if (*((_QWORD *)&v946 + 1))
          {
            v281 = (unint64_t *)(*((_QWORD *)&v946 + 1) + 8);
            do
              v282 = __ldaxr(v281);
            while (__stlxr(v282 - 1, v281));
            if (!v282)
            {
              ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
              std::__shared_weak_count::__release_weak(v280);
            }
          }
          if (SHIBYTE(v904.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v904.__r_.__value_.__l.__data_);
          if (v980)
          {
            v981 = v980;
            operator delete(v980);
          }
          ++v269;
          v268 = v905.__r_.__value_.__r.__words[0];
        }
        while (v269 < (uint64_t)(v905.__r_.__value_.__l.__size_ - v905.__r_.__value_.__r.__words[0]) >> 6);
      }
      *(_QWORD *)buf = &v905;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v915;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v283 = v948;
      if (v948)
      {
        v284 = (unint64_t *)&v948->__shared_owners_;
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
      }
      if (SHIBYTE(v949.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v949.__r_.__value_.__l.__data_);
      if (SHIBYTE(v974.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v974.__r_.__value_.__l.__data_);
      v286 = (std::__shared_weak_count *)*((_QWORD *)&v950 + 1);
      if (*((_QWORD *)&v950 + 1))
      {
        v287 = (unint64_t *)(*((_QWORD *)&v950 + 1) + 8);
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      objc_autoreleasePoolPop(context);
      if (v890)
      {
        v289 = (unint64_t *)&v890->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v890->__on_zero_shared)(v890);
          std::__shared_weak_count::__release_weak(v890);
        }
      }
      v104 = v888 + 2;
    }
    while (v888 + 2 != v887);
  }
  v790 = v964;
  std::string::basic_string[abi:ne180100]<0>(buf, "layer_shapes");
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v790 + 240))(v790, buf, &v966);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(v899, "layers");
  Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)v899, buf);
  (*(void (**)(_QWORD, _BYTE *, __int128 *))(**(_QWORD **)buf + 248))(*(_QWORD *)buf, &buf[16], &v961);
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v791 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v792 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v793 = __ldaxr(v792);
    while (__stlxr(v793 - 1, v792));
    if (!v793)
    {
      ((void (*)(std::__shared_weak_count *))v791->__on_zero_shared)(v791);
      std::__shared_weak_count::__release_weak(v791);
    }
  }
  if ((v899[23] & 0x80000000) != 0)
    operator delete(*(void **)v899);
  memset(&v949, 0, sizeof(v949));
  for (m = (uint64_t *)*((_QWORD *)*a2 + 165); m; m = (uint64_t *)*m)
  {
    v795 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v904, (uint64_t)v795, v970);
    v796 = v904.__r_.__value_.__r.__words[0];
    if (*((char *)m + 39) < 0)
      std::string::__init_copy_ctor_external(&v915, (const std::string::value_type *)m[2], m[3]);
    else
      v915 = *(std::string *)(m + 2);
    std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)buf, (__int128 *)(m + 5));
    *(_OWORD *)v899 = *(_OWORD *)buf;
    *(_OWORD *)&v899[16] = *(_OWORD *)&buf[16];
    v900 = *(_QWORD *)&buf[32];
    v902 = 0;
    v903 = 0;
    v901 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v901, v980, (uint64_t)v981, (v981 - v980) >> 2);
    v797 = v983;
    v950 = v983;
    if (*((_QWORD *)&v983 + 1))
    {
      v798 = (unint64_t *)(*((_QWORD *)&v983 + 1) + 8);
      do
        v799 = __ldxr(v798);
      while (__stxr(v799 + 1, v798));
    }
    v800 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v947, (uint64_t)v800, v970);
    Espresso::SerDes::params_io<Espresso::layer_shape>(v947, (uint64_t)v899, 1);
    std::string::basic_string[abi:ne180100]<0>(&v974, "data");
    v946 = 0uLL;
    v898 = v797;
    if (*((_QWORD *)&v797 + 1))
    {
      v801 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
      do
        v802 = __ldxr(v801);
      while (__stxr(v802 + 1, v801));
    }
    v803 = 0;
    v804 = *(_QWORD *)(v797 + 32);
    v805 = *(int *)(v797 + 8);
    do
    {
      v805 *= *(int *)(v797 + 12 + v803);
      v803 += 4;
    }
    while (v803 != 16);
    std::string::basic_string[abi:ne180100]<0>(&v905, "");
    *(_QWORD *)&v945 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((void ***)&__p, (uint64_t *)&v946, &v898, v804, 4 * v805, (unsigned __int8 *)&v905);
    (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v796 + 200))(v796, &v974, &v945);
    if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v905.__r_.__value_.__l.__data_);
      if (*((_QWORD *)&v797 + 1))
      {
LABEL_1379:
        v806 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
        do
          v807 = __ldaxr(v806);
        while (__stlxr(v807 - 1, v806));
        if (!v807)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v797 + 1) + 16))(*((_QWORD *)&v797 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v797 + 1));
        }
      }
    }
    else if (*((_QWORD *)&v797 + 1))
    {
      goto LABEL_1379;
    }
    v808 = (std::__shared_weak_count *)*((_QWORD *)&v946 + 1);
    if (*((_QWORD *)&v946 + 1))
    {
      v809 = (unint64_t *)(*((_QWORD *)&v946 + 1) + 8);
      do
        v810 = __ldaxr(v809);
      while (__stlxr(v810 - 1, v809));
      if (!v810)
      {
        ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
        std::__shared_weak_count::__release_weak(v808);
      }
    }
    if (SHIBYTE(v974.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v974.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v905, "shape");
    Espresso::SerDes::generic_serdes_object::operator[](v796, (uint64_t)&v905, &v974);
    (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t *))(*(_QWORD *)v974.__r_.__value_.__l.__data_
                                                                                        + 240))(v974.__r_.__value_.__r.__words[0], &v974.__r_.__value_.__r.__words[2], &v947);
    if (SHIBYTE(v976) < 0)
      operator delete((void *)v974.__r_.__value_.__r.__words[2]);
    v811 = (std::__shared_weak_count *)v974.__r_.__value_.__l.__size_;
    if (v974.__r_.__value_.__l.__size_)
    {
      v812 = (unint64_t *)(v974.__r_.__value_.__l.__size_ + 8);
      do
        v813 = __ldaxr(v812);
      while (__stlxr(v813 - 1, v812));
      if (!v813)
      {
        ((void (*)(std::__shared_weak_count *))v811->__on_zero_shared)(v811);
        std::__shared_weak_count::__release_weak(v811);
      }
    }
    if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v905.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v905, "name");
    Espresso::SerDes::generic_serdes_object::operator[](v796, (uint64_t)&v905, &v974);
    (*(void (**)(std::string::size_type, std::string::size_type *, std::string *))(*(_QWORD *)v974.__r_.__value_.__l.__data_
                                                                                            + 232))(v974.__r_.__value_.__r.__words[0], &v974.__r_.__value_.__r.__words[2], &v915);
    if (SHIBYTE(v976) < 0)
      operator delete((void *)v974.__r_.__value_.__r.__words[2]);
    v814 = (std::__shared_weak_count *)v974.__r_.__value_.__l.__size_;
    if (v974.__r_.__value_.__l.__size_)
    {
      v815 = (unint64_t *)(v974.__r_.__value_.__l.__size_ + 8);
      do
        v816 = __ldaxr(v815);
      while (__stlxr(v816 - 1, v815));
      if (!v816)
      {
        ((void (*)(std::__shared_weak_count *))v814->__on_zero_shared)(v814);
        std::__shared_weak_count::__release_weak(v814);
      }
    }
    if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v905.__r_.__value_.__l.__data_);
    v817 = v949.__r_.__value_.__l.__size_;
    if (v949.__r_.__value_.__l.__size_ >= v949.__r_.__value_.__r.__words[2])
    {
      v822 = (uint64_t)(v949.__r_.__value_.__l.__size_ - v949.__r_.__value_.__r.__words[0]) >> 4;
      v823 = v822 + 1;
      if ((unint64_t)(v822 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v824 = v949.__r_.__value_.__r.__words[2] - v949.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v949.__r_.__value_.__r.__words[2] - v949.__r_.__value_.__r.__words[0]) >> 3 > v823)
        v823 = v824 >> 3;
      if ((unint64_t)v824 >= 0x7FFFFFFFFFFFFFF0)
        v825 = 0xFFFFFFFFFFFFFFFLL;
      else
        v825 = v823;
      v976 = &v949.__r_.__value_.__s.__data_[16];
      v826 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v825);
      v828 = &v826[16 * v822];
      v829 = v904.__r_.__value_.__l.__size_;
      *(_OWORD *)v828 = *(_OWORD *)&v904.__r_.__value_.__l.__data_;
      if (v829)
      {
        v830 = (unint64_t *)(v829 + 8);
        do
          v831 = __ldxr(v830);
        while (__stxr(v831 + 1, v830));
      }
      v832 = (_QWORD *)v949.__r_.__value_.__l.__size_;
      v833 = v949.__r_.__value_.__r.__words[0];
      if (v949.__r_.__value_.__l.__size_ == v949.__r_.__value_.__r.__words[0])
      {
        v836 = vdupq_n_s64(v949.__r_.__value_.__l.__size_);
        v834 = (std::string::size_type)&v826[16 * v822];
      }
      else
      {
        v834 = (std::string::size_type)&v826[16 * v822];
        do
        {
          v835 = *((_OWORD *)v832 - 1);
          v832 -= 2;
          *(_OWORD *)(v834 - 16) = v835;
          v834 -= 16;
          *v832 = 0;
          v832[1] = 0;
        }
        while (v832 != (_QWORD *)v833);
        v836 = *(int64x2_t *)&v949.__r_.__value_.__l.__data_;
      }
      v821 = (std::string::size_type)(v828 + 16);
      v949.__r_.__value_.__r.__words[0] = v834;
      v949.__r_.__value_.__l.__size_ = (std::string::size_type)(v828 + 16);
      *(int64x2_t *)&v974.__r_.__value_.__r.__words[1] = v836;
      v837 = v949.__r_.__value_.__r.__words[2];
      v949.__r_.__value_.__r.__words[2] = (std::string::size_type)&v826[16 * v827];
      v975 = v837;
      v974.__r_.__value_.__r.__words[0] = v836.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v974);
    }
    else
    {
      *(_QWORD *)v949.__r_.__value_.__l.__size_ = v904.__r_.__value_.__r.__words[0];
      v818 = v904.__r_.__value_.__l.__size_;
      *(_QWORD *)(v817 + 8) = v904.__r_.__value_.__l.__size_;
      if (v818)
      {
        v819 = (unint64_t *)(v818 + 8);
        do
          v820 = __ldxr(v819);
        while (__stxr(v820 + 1, v819));
      }
      v821 = v817 + 16;
    }
    v949.__r_.__value_.__l.__size_ = v821;
    v838 = v948;
    a5 = v895;
    if (v948)
    {
      v839 = (unint64_t *)&v948->__shared_owners_;
      do
        v840 = __ldaxr(v839);
      while (__stlxr(v840 - 1, v839));
      if (!v840)
      {
        ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
        std::__shared_weak_count::__release_weak(v838);
      }
    }
    v841 = (std::__shared_weak_count *)*((_QWORD *)&v950 + 1);
    if (*((_QWORD *)&v950 + 1))
    {
      v842 = (unint64_t *)(*((_QWORD *)&v950 + 1) + 8);
      do
        v843 = __ldaxr(v842);
      while (__stlxr(v843 - 1, v842));
      if (!v843)
      {
        ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
        std::__shared_weak_count::__release_weak(v841);
      }
    }
    if (v901)
    {
      v902 = v901;
      operator delete(v901);
    }
    v844 = (std::__shared_weak_count *)*((_QWORD *)&v983 + 1);
    if (*((_QWORD *)&v983 + 1))
    {
      v845 = (unint64_t *)(*((_QWORD *)&v983 + 1) + 8);
      do
        v846 = __ldaxr(v845);
      while (__stlxr(v846 - 1, v845));
      if (!v846)
      {
        ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
        std::__shared_weak_count::__release_weak(v844);
      }
    }
    if (v980)
    {
      v981 = v980;
      operator delete(v980);
    }
    if (SHIBYTE(v915.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v915.__r_.__value_.__l.__data_);
    v847 = (std::__shared_weak_count *)v904.__r_.__value_.__l.__size_;
    if (v904.__r_.__value_.__l.__size_)
    {
      v848 = (unint64_t *)(v904.__r_.__value_.__l.__size_ + 8);
      do
        v849 = __ldaxr(v848);
      while (__stlxr(v849 - 1, v848));
      if (!v849)
      {
        ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
        std::__shared_weak_count::__release_weak(v847);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v899, "metadata_in_weights");
  Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)v899, buf);
  (*(void (**)(_QWORD, _BYTE *, std::string *))(**(_QWORD **)buf + 248))(*(_QWORD *)buf, &buf[16], &v949);
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v850 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v851 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v852 = __ldaxr(v851);
    while (__stlxr(v852 - 1, v851));
    if (!v852)
    {
      ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
      std::__shared_weak_count::__release_weak(v850);
    }
  }
  if ((v899[23] & 0x80000000) != 0)
    operator delete(*(void **)v899);
  if (v973 >= 300 && Espresso::net::is_root_module(*a2))
  {
    v853 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v899, (uint64_t)v853, v970);
    v854 = *a2;
    v977[0] = &off_1E2DB1870;
    v977[1] = v970;
    v977[2] = v899;
    v978 = v977;
    Espresso::net::apply_to_all_globals(v854, v977);
    v855 = v978;
    if (v978 == v977)
    {
      v856 = 4;
      v855 = v977;
    }
    else
    {
      if (!v978)
      {
LABEL_1471:
        v857 = v964;
        std::string::basic_string[abi:ne180100]<0>(buf, "global_shapes");
        (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v857 + 240))(v857, buf, v899);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v858 = *(std::__shared_weak_count **)&v899[8];
        if (*(_QWORD *)&v899[8])
        {
          v859 = (unint64_t *)(*(_QWORD *)&v899[8] + 8);
          do
            v860 = __ldaxr(v859);
          while (__stlxr(v860 - 1, v859));
          if (!v860)
          {
            ((void (*)(std::__shared_weak_count *))v858->__on_zero_shared)(v858);
            std::__shared_weak_count::__release_weak(v858);
          }
        }
        goto LABEL_1478;
      }
      v856 = 5;
    }
    (*(void (**)(void))(*v855 + 8 * v856))();
    goto LABEL_1471;
  }
LABEL_1478:
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v899, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v899 = *(_OWORD *)a5;
    *(_QWORD *)&v899[16] = *(_QWORD *)(a5 + 16);
  }
  v861 = std::string::rfind((const std::string *)a5, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v861 != -1)
  {
    std::string::basic_string((std::string *)buf, (const std::string *)a5, v861 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v974);
    if ((v899[23] & 0x80000000) != 0)
      operator delete(*(void **)v899);
    *(_OWORD *)v899 = *(_OWORD *)buf;
    *(_QWORD *)&v899[16] = *(_QWORD *)&buf[16];
  }
  std::string::basic_string[abi:ne180100]<0>(&v974, "storage");
  Espresso::SerDes::generic_serdes_object::operator[](v886, (uint64_t)&v974, buf);
  (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)buf + 232))(*(_QWORD *)buf, &buf[16], v899);
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v862 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v863 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v864 = __ldaxr(v863);
    while (__stlxr(v864 - 1, v863));
    if (!v864)
    {
      ((void (*)(std::__shared_weak_count *))v862->__on_zero_shared)(v862);
      std::__shared_weak_count::__release_weak(v862);
    }
  }
  if (SHIBYTE(v974.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v974.__r_.__value_.__l.__data_);
  if (v973 >= 300)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "shape");
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v886 + 240))(v886, buf, &v964);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v865 = v969;
  *a1 = v968;
  a1[1] = (uint64_t)v865;
  if (v865)
  {
    v866 = (unint64_t *)&v865->__shared_owners_;
    do
      v867 = __ldxr(v866);
    while (__stxr(v867 + 1, v866));
  }
  v868 = v965;
  a1[2] = v964;
  a1[3] = (uint64_t)v868;
  if (v868)
  {
    v869 = (unint64_t *)&v868->__shared_owners_;
    do
      v870 = __ldxr(v869);
    while (__stxr(v870 + 1, v869));
  }
  if ((v899[23] & 0x80000000) != 0)
    operator delete(*(void **)v899);
  *(_QWORD *)buf = &v949;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v961;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v871 = v965;
  if (v965)
  {
    v872 = (unint64_t *)&v965->__shared_owners_;
    do
      v873 = __ldaxr(v872);
    while (__stlxr(v873 - 1, v872));
    if (!v873)
    {
      ((void (*)(std::__shared_weak_count *))v871->__on_zero_shared)(v871);
      std::__shared_weak_count::__release_weak(v871);
    }
  }
  v874 = v967;
  if (v967)
  {
    v875 = (unint64_t *)&v967->__shared_owners_;
    do
      v876 = __ldaxr(v875);
    while (__stlxr(v876 - 1, v875));
    if (!v876)
    {
      ((void (*)(std::__shared_weak_count *))v874->__on_zero_shared)(v874);
      std::__shared_weak_count::__release_weak(v874);
    }
  }
  v877 = v969;
  if (v969)
  {
    v878 = (unint64_t *)&v969->__shared_owners_;
    do
      v879 = __ldaxr(v878);
    while (__stlxr(v879 - 1, v878));
    if (!v879)
    {
      ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
      std::__shared_weak_count::__release_weak(v877);
    }
  }
  if (v971 < 0)
    operator delete(v970[0]);
}

void sub_1914F7F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  if (a34 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v50 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A0]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  v52 = (std::__shared_weak_count *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (a18)
  {
    v55 = (unint64_t *)&a18->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  STACK[0x3E0] = (unint64_t)&STACK[0x430];
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  v57 = (std::__shared_weak_count *)STACK[0x458];
  if (STACK[0x458])
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)STACK[0x468];
  if (STACK[0x468])
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)STACK[0x478];
  if (STACK[0x478])
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  _Unwind_Resume(a1);
}

void Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v21, (uint64_t)v7, *a1);
      Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v21, (uint64_t)(v4 + 7), 1);
      Espresso::SerDes::generic_serdes_object::operator[](a3, (uint64_t)(v4 + 4), &v17);
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v17 + 240))(v17, &__p, &v21);
      if (v20 < 0)
        operator delete(__p);
      v8 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v22;
      if (v22)
      {
        v12 = (unint64_t *)&v22->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != v3);
  }
}

void sub_1914F911C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()(void ***a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _BYTE *v10;
  int v11;
  uint64_t blob_file_metadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  std::string *v27;
  void **v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  int64x2_t v77;
  char *v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v109;
  uint64_t v110;
  int64x2_t v111;
  char *v112;
  _QWORD *v113;

  v10 = (*a1)[1];
  v109 = **a1;
  v11 = *(unsigned __int8 *)a1[1];
  if (*(_BYTE *)a1[2]
    && *a2
    && std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*a2 + 24), a6))
  {
    blob_file_metadata = Espresso::base_kernel::get_blob_file_metadata(*a2, a6);
    v15 = operator new();
    Espresso::blob_file_metadata::blob_file_metadata(v15, blob_file_metadata);
    v16 = *((_QWORD *)*a1[3] + 72);
    if (v16)
      v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, *(_QWORD *)(v15 + 32));
    else
      v17 = -1;
    v18 = (uint64_t *)a1[4];
    v19 = *((unsigned __int8 *)v18 + 143);
    if (*((char *)v18 + 143) < 0)
      v20 = v18[16];
    else
      v20 = *((unsigned __int8 *)v18 + 143);
    v21 = (std::string *)(v18 + 15);
    if (v20)
    {
      v22 = v18[16];
      if ((v19 & 0x80u) == 0)
        v23 = *((unsigned __int8 *)v18 + 143);
      else
        v23 = v18[16];
      v24 = *(unsigned __int8 *)(v15 + 31);
      v25 = (char)v24;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v15 + 16);
      if (v23 != v24)
        goto LABEL_119;
      if (v25 >= 0)
        v26 = (unsigned __int8 *)(v15 + 8);
      else
        v26 = *(unsigned __int8 **)(v15 + 8);
      if ((v19 & 0x80) != 0)
      {
        if (memcmp(v21->__r_.__value_.__l.__data_, v26, v22))
          goto LABEL_119;
      }
      else if ((_DWORD)v19)
      {
        v27 = v21;
        while (v27->__r_.__value_.__s.__data_[0] == *v26)
        {
          v27 = (std::string *)((char *)v27 + 1);
          ++v26;
          if (!--v19)
            goto LABEL_28;
        }
LABEL_119:
        Espresso::throw_exception_selector<Espresso::network_translation_error>("Blob storage must be backed by only one weight file.");
      }
    }
LABEL_28:
    std::string::operator=(v21, (const std::string *)(v15 + 8));
  }
  else
  {
    v15 = 0;
    v17 = -1;
  }
  v28 = *a1;
  v30 = (*a1)[1];
  v29 = (unint64_t)(*a1)[2];
  if ((unint64_t)v30 >= v29)
  {
    v32 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = v29 - (_QWORD)*v28;
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v35);
    else
      v36 = 0;
    v37 = (_QWORD *)(v35 + 8 * v32);
    v38 = v35 + 8 * v36;
    *v37 = a4;
    v31 = v37 + 1;
    v40 = (char *)*v28;
    v39 = (char *)v28[1];
    if (v39 != *v28)
    {
      do
      {
        v41 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v37 = v41;
      }
      while (v39 != v40);
      v39 = (char *)*v28;
    }
    *v28 = v37;
    v28[1] = v31;
    v28[2] = (void *)v38;
    if (v39)
      operator delete(v39);
  }
  else
  {
    *v30 = a4;
    v31 = v30 + 1;
  }
  v28[1] = v31;
  v42 = (uint64_t *)a1[5];
  v44 = (_QWORD *)v42[1];
  v43 = v42[2];
  if ((unint64_t)v44 >= v43)
  {
    v46 = (_QWORD *)*v42;
    v47 = ((uint64_t)v44 - *v42) >> 3;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      goto LABEL_120;
    v49 = v43 - (_QWORD)v46;
    if (v49 >> 2 > v48)
      v48 = v49 >> 2;
    v50 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8;
    v51 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v50)
      v51 = v48;
    if (v51)
    {
      v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
      v46 = (_QWORD *)*v42;
      v44 = (_QWORD *)v42[1];
    }
    else
    {
      v52 = 0;
    }
    v53 = (_QWORD *)(v51 + 8 * v47);
    v54 = v51 + 8 * v52;
    *v53 = a5;
    v45 = v53 + 1;
    while (v44 != v46)
    {
      v55 = *--v44;
      *--v53 = v55;
    }
    *v42 = (uint64_t)v53;
    v42[1] = (uint64_t)v45;
    v42[2] = v54;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v44 = a5;
    v45 = v44 + 1;
  }
  v42[1] = (uint64_t)v45;
  v56 = (char **)a1[6];
  v57 = v56[1];
  v58 = (unint64_t)v56[2];
  if ((unint64_t)v57 >= v58)
  {
    v63 = (v57 - *v56) >> 4;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v65 = v58 - (_QWORD)*v56;
    if (v65 >> 3 > v64)
      v64 = v65 >> 3;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
      v66 = 0xFFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    v113 = v56 + 2;
    v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v66);
    v69 = &v67[16 * v63];
    v70 = *a3;
    *(_OWORD *)v69 = *a3;
    if (*((_QWORD *)&v70 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v74 = *v56;
    v73 = v56[1];
    if (v73 == *v56)
    {
      v77 = vdupq_n_s64((unint64_t)v73);
      v75 = &v67[16 * v63];
    }
    else
    {
      v75 = &v67[16 * v63];
      do
      {
        v76 = *((_OWORD *)v73 - 1);
        v73 -= 16;
        *((_OWORD *)v75 - 1) = v76;
        v75 -= 16;
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
      }
      while (v73 != v74);
      v77 = *(int64x2_t *)v56;
    }
    v62 = v69 + 16;
    *v56 = v75;
    v56[1] = v69 + 16;
    v111 = v77;
    v78 = v56[2];
    v56[2] = &v67[16 * v68];
    v112 = v78;
    v110 = v77.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v110);
  }
  else
  {
    *(_QWORD *)v57 = *(_QWORD *)a3;
    v59 = *((_QWORD *)a3 + 1);
    *((_QWORD *)v57 + 1) = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = v57 + 16;
  }
  v56[1] = v62;
  v79 = (uint64_t *)a1[7];
  v81 = (uint64_t *)v79[1];
  v80 = v79[2];
  if ((unint64_t)v81 < v80)
  {
    *v81 = v17;
    v82 = v81 + 1;
    goto LABEL_95;
  }
  v83 = (uint64_t *)*v79;
  v84 = ((uint64_t)v81 - *v79) >> 3;
  v85 = v84 + 1;
  if ((unint64_t)(v84 + 1) >> 61)
LABEL_120:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v86 = v80 - (_QWORD)v83;
  if (v86 >> 2 > v85)
    v85 = v86 >> 2;
  v50 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8;
  v87 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v50)
    v87 = v85;
  if (v87)
  {
    v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v87);
    v83 = (uint64_t *)*v79;
    v81 = (uint64_t *)v79[1];
  }
  else
  {
    v88 = 0;
  }
  v89 = (uint64_t *)(v87 + 8 * v84);
  v90 = v87 + 8 * v88;
  *v89 = v17;
  v82 = v89 + 1;
  while (v81 != v83)
  {
    v91 = *--v81;
    *--v89 = v91;
  }
  *v79 = (uint64_t)v89;
  v79[1] = (uint64_t)v82;
  v79[2] = v90;
  if (v83)
    operator delete(v83);
LABEL_95:
  v79[1] = (uint64_t)v82;
  v92 = (uint64_t **)a1[8];
  v94 = v92[1];
  v93 = (unint64_t)v92[2];
  if ((unint64_t)v94 >= v93)
  {
    v96 = *v92;
    v97 = v94 - *v92;
    v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v99 = v93 - (_QWORD)v96;
    if (v99 >> 2 > v98)
      v98 = v99 >> 2;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (v100)
    {
      if (v100 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v101 = (char *)operator new(8 * v100);
    }
    else
    {
      v101 = 0;
    }
    v102 = (uint64_t *)&v101[8 * v97];
    v103 = (uint64_t *)&v101[8 * v100];
    *v102 = v15;
    v95 = v102 + 1;
    if (v94 == v96)
    {
      *v92 = v102;
      v92[1] = v95;
      v92[2] = v103;
    }
    else
    {
      do
      {
        v104 = *--v94;
        *v94 = 0;
        *--v102 = v104;
      }
      while (v94 != v96);
      v94 = *v92;
      v105 = v92[1];
      *v92 = v102;
      v92[1] = v95;
      v92[2] = v103;
      while (v105 != v94)
      {
        v107 = *--v105;
        v106 = v107;
        *v105 = 0;
        if (v107)
          std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v106);
      }
    }
    if (v94)
      operator delete(v94);
  }
  else
  {
    *v94 = v15;
    v95 = v94 + 1;
  }
  v92[1] = v95;
  if (v11)
    return ((v10 - v109) >> 2) | 1;
  else
    return (v10 - v109) >> 3;
}

void sub_1914F9720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C40B400CDBBLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB1870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char v23[40];
  void *v24;
  void *v25;

  v4 = *(const void **)(a2 + 24);
  if (v4)
  {
    {
      v5 = *(std::__shared_weak_count **)(a2 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      return;
    }
    v9 = (uint64_t)v4;
  }
  else
  {
    v9 = 0;
  }
  Espresso::abstract_blob_container::shape(v23, v9);
  v10 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v21, (uint64_t)v10, *(_QWORD **)(a1 + 8));
  Espresso::SerDes::params_io<Espresso::layer_shape>(v21, (uint64_t)v23, 1);
  Espresso::SerDes::generic_serdes_object::operator[](**(_QWORD **)(a1 + 16), a2, &v17);
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v17 + 240))(v17, &__p, &v21);
  if (v20 < 0)
    operator delete(__p);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1914F997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  if (a17 < 0)
    operator delete(__p);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a19)
  {
    v29 = (unint64_t *)&a19->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso19dump_network_layersENSt3__110shared_ptrINS_3netEEEiRNS_31dump_network_layers_blobs_stateERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2,std::allocator<Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_2>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

void Espresso::throw_exception_selector<Espresso::network_translation_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::network_translation_error>(a1);
}

void Espresso::dump_network(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Espresso::dump_network_internal(v5, v6, a2, a3, a4, 0);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1914F9B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::load_network_layers_internal(a7, a1, a2, a3, a4, 0, a5, a6, 0, &__p, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1914F9BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t *a7@<X8>)
{
  std::string __p;
  void *v15[2];
  char v16;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, "");
  std::string::basic_string[abi:ne180100]<0>(v15, "json");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::load_network_layers_internal(a7, a1, &v17, a4, a5, 0, a6, v15, 0, &__p, 0, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1914F9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void Espresso::reload_network_layers(Espresso *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t **v6;
  std::string::size_type *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  void *__p[2];
  unsigned __int8 v34;

  v3 = *((_QWORD *)this + 161);
  if (!v3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing reload info cache");
  if (!*(_QWORD *)v3 || (v6 = (uint64_t **)(v3 + 32), !*(_QWORD *)(v3 + 32)) || !*(_QWORD *)(v3 + 120))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cached reload info is malformed");
  v7 = (std::string::size_type *)((char *)this + 576);
  Espresso::load_network_metadata(*(_QWORD *)v3, (const std::string *)((char *)this + 592), (const std::string *)((char *)this + 1024), (uint64_t *)this + 2, (uint64_t *)this + 72, a2);
  if (!*a2)
    Espresso::throw_exception_selector<Espresso::generic_error>("Error reloading network metadata");
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  v8 = (uint64_t *)(v3 + 112);
  v9 = *(_QWORD **)(v3 + 112);
  if (!v9)
    goto LABEL_52;
  v10 = (uint64_t *)(v3 + 112);
  do
  {
    v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9 + 4, __p);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v10 + 4))
LABEL_52:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Default configuration missing from reload info");
  v13 = *a2;
  v14 = *a2 + 800;
  if ((uint64_t *)v14 != v10 + 7)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v14, (std::string *)v10[7], (std::string *)v10[8], 0xAAAAAAAAAAAAAAABLL * ((v10[8] - v10[7]) >> 3));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v13 + 824), (__int128 *)v10[10], (__int128 *)(v10 + 11));
    v13 = *a2;
  }
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v13 + 776, *(char **)(v13 + 784));
  *(_QWORD *)(v13 + 776) = v13 + 784;
  *(_QWORD *)(v13 + 792) = 0;
  *(_QWORD *)(v13 + 784) = 0;
  v15 = *(uint64_t **)(v3 + 104);
  if (v15 != v8)
  {
    do
    {
      v16 = *((unsigned __int8 *)v15 + 55);
      if ((v16 & 0x80u) == 0)
        v17 = (void *)*((unsigned __int8 *)v15 + 55);
      else
        v17 = (void *)v15[5];
      v18 = v34;
      if ((v34 & 0x80u) != 0)
        v18 = (unint64_t)__p[1];
      if (v17 != (void *)v18)
        goto LABEL_32;
      if ((v34 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((v16 & 0x80) != 0)
      {
        if (memcmp((const void *)v15[4], v19, v15[5]))
          goto LABEL_32;
      }
      else if (*((_BYTE *)v15 + 55))
      {
        v20 = (unsigned __int8 *)(v15 + 4);
        while (*v20 == *(unsigned __int8 *)v19)
        {
          ++v20;
          v19 = (void **)((char *)v19 + 1);
          if (!--v16)
            goto LABEL_34;
        }
LABEL_32:
        v21 = (uint64_t **)(*a2 + 776);
        *(_QWORD *)&v32 = v15 + 4;
        v22 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v15 + 4, (__int128 **)&v32);
        v23 = v22;
        if (v15 != v22)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 7), (std::string *)v15[7], (std::string *)v15[8], 0xAAAAAAAAAAAAAAABLL * ((v15[8] - v15[7]) >> 3));
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v23 + 10, (__int128 *)v15[10], (__int128 *)(v15 + 11));
        }
      }
LABEL_34:
      v24 = (uint64_t *)v15[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v15[2];
          v26 = *v25 == (_QWORD)v15;
          v15 = v25;
        }
        while (!v26);
      }
      v15 = v25;
    }
    while (v25 != v8);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a2 + 712), *((_QWORD *)this + 89), *((_QWORD *)this + 90));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a2 + 1256), *((_QWORD *)this + 157), *((_QWORD *)this + 158));
  v27 = **v6;
  v28 = (*v6)[1];
  while (v27 != v28)
  {
    v32 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v27 + 88, &v32);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v27 += 224;
  }
  Espresso::load_network_layers_post_dispatch(a2, (uint64_t *)v3, (uint64_t *)(v3 + 16), (uint64_t *)(v3 + 32), *(unsigned __int8 *)(v3 + 52), v3 + 56, *(_DWORD *)(v3 + 48), 0, v7);
  if ((char)v34 < 0)
    operator delete(__p[0]);
}

void sub_1914FA084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void Espresso::shape_network(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Espresso *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v10[8];
  char *v11;
  char *v12[3];

  Espresso::load_network_shape(a2, a3, (uint64_t)v10);
  v4 = *(Espresso **)a1;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::shape_network_recursive(v4, (Espresso::net *)v10, 0, 0);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v12, v12[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v10, v11);
}

void sub_1914FA16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  Espresso::network_shape::~network_shape(&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::check_blob_storage_aligned(std::string *__str, const void **a2)
{
  std::string::size_type size;
  std::string *v5;
  __int128 v6;
  size_t v7;
  size_t v8;
  std::string *p_ptr;
  const void *v10;
  std::string *v11;
  FILE *v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  int v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  std::string *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v26;
  uint64_t v27;
  std::string v28;
  std::string __ptr;
  std::string __p;
  std::string v31;
  std::string v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size <= 3)
    {
      std::string::__init_copy_ctor_external(&v32, __str->__r_.__value_.__l.__data_, size);
      goto LABEL_8;
    }
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (HIBYTE(__str->__r_.__value_.__r.__words[2]) <= 3u)
    {
      v32 = *__str;
      goto LABEL_8;
    }
  }
  std::string::basic_string(&__ptr, __str, 0, size - 4, (std::allocator<char> *)&v31);
  v5 = std::string::append(&__ptr, ".weights");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__ptr.__r_.__value_.__l.__data_);
LABEL_8:
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v31 = v32;
LABEL_11:
    __p = v32;
    goto LABEL_12;
  }
  std::string::__init_copy_ctor_external(&v31, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
  std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
LABEL_12:
  if (*((char *)a2 + 23) < 0)
  {
    v7 = (size_t)a2[1];
    if (v7)
      goto LABEL_16;
  }
  else if (*((_BYTE *)a2 + 23))
  {
    v7 = (size_t)a2[1];
LABEL_16:
    if (*((char *)a2 + 23) >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = v7;
    p_ptr = &__ptr;
    std::string::basic_string[abi:ne180100]((uint64_t)&__ptr, v8 + 8);
    if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_ptr = (std::string *)__ptr.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*((char *)a2 + 23) >= 0)
        v10 = a2;
      else
        v10 = *a2;
      memmove(p_ptr, v10, v8);
    }
    strcpy((char *)p_ptr + v8, ".weights");
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v32 = __ptr;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = __str;
    else
      v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v12 = fopen((const char *)v11, "rb");
    fseek(v12, 0, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v32;
    else
      v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (Espresso::BinSerializer::BinSerializer_fseek(v12, (__sFILE *)v14, v13))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &__ptr);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (fread(&__ptr, 0x28uLL, 1uLL, v12) != 1)
    {
      v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v26, &v28);
      __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v27 = MEMORY[0x19401D21C](v12);
    fclose(v12);
    std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(&v28, (uint64_t)__str, &v27);
    v16 = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
    v15 = v28.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  v17 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  v18 = v31.__r_.__value_.__r.__words[0];
  v19 = (std::__shared_weak_count *)operator new(0x78uLL);
  v16 = v19;
  if (v17 >= 0)
    v20 = &v31;
  else
    v20 = (std::string *)v18;
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB470;
  std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v20);
  v15 = (std::string::size_type)&v16[1];
  Espresso::blob_storage_mmap::blob_storage_mmap((uint64_t)&v16[1], (__int128 *)&__ptr, 0);
  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__ptr.__r_.__value_.__l.__data_);
LABEL_42:
  v33 = v15;
  v34 = v16;
  v21 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v15 + 88))(v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v21;
}

void sub_1914FA564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 64);
  _Unwind_Resume(a1);
}

void Espresso::dump_network(uint64_t *a1, std::string *__str, uint64_t a3, uint64_t a4)
{
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  int v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type v16;
  size_t v17;
  std::string *v18;
  std::string *v19;
  size_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string __p;
  uint64_t v32[2];
  std::string v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39[17];
  _QWORD v40[20];

  v40[19] = *MEMORY[0x1E0C80C00];
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__str->__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_6:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Output network path is empty");
  }
  if (!__str->__r_.__value_.__l.__size_)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v35 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v34 = *(std::string *)a4;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v8 = __str;
  }
  v9 = (std::string *)((char *)v8 + size);
  if (size)
  {
    v10 = v8;
    v11 = (std::string *)((char *)v8 + size);
    do
    {
      if (v10->__r_.__value_.__s.__data_[0] == 46)
      {
        v12 = 1u;
        while (v12 != 13)
        {
          if ((std::string *)((char *)v10 + v12) == v9)
            goto LABEL_26;
          v13 = v10->__r_.__value_.__s.__data_[v12];
          v14 = aEspressoNet[v12++];
          if (v13 != v14)
            goto LABEL_17;
        }
        v11 = v10;
      }
LABEL_17:
      v10 = (std::string *)((char *)v10 + 1);
    }
    while (v10 != v9);
  }
  else
  {
    v11 = v8;
  }
LABEL_26:
  v15 = (char *)v11 - (char *)v8;
  if (v11 == v9)
    v16 = -1;
  else
    v16 = v15;
  std::string::basic_string(&v33, __str, 0, v16, (std::allocator<char> *)v39);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v34.__r_.__value_.__l.__size_)
      goto LABEL_46;
  }
  else if (*((_BYTE *)&v34.__r_.__value_.__s + 23))
  {
    goto LABEL_46;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v17 = v33.__r_.__value_.__l.__size_;
  v18 = v39;
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v17 + 17);
  if ((v39[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v39[0].__r_.__value_.__r.__words[0];
  if (v17)
  {
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v33;
    else
      v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".espresso.weights");
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v34 = v39[0];
LABEL_46:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v35.__r_.__value_.__l.__size_)
      goto LABEL_63;
  }
  else if (*((_BYTE *)&v35.__r_.__value_.__s + 23))
  {
    goto LABEL_63;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v20 = v33.__r_.__value_.__l.__size_;
  v21 = v39;
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v20 + 15);
  if ((v39[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = (std::string *)v39[0].__r_.__value_.__r.__words[0];
  if (v20)
  {
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v33;
    else
      v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, ".espresso.shape");
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v35 = v39[0];
LABEL_63:
  std::ofstream::basic_ofstream(v39);
  std::ofstream::basic_ofstream(&v36);
  v23 = *a1;
  v24 = (std::__shared_weak_count *)a1[1];
  v32[0] = v23;
  v32[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    __p = v34;
  Espresso::dump_network(v32, (uint64_t)v39, (uint64_t)&v36, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = *MEMORY[0x1E0DE4F48];
  v36 = v29;
  v30 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  *(std::string::size_type *)((char *)&v36 + *(_QWORD *)(v29 - 24)) = v30;
  MEMORY[0x19401C8BC](&v37);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v38);
  v39[0].__r_.__value_.__r.__words[0] = v29;
  *(std::string::size_type *)((char *)v39[0].__r_.__value_.__r.__words + *(_QWORD *)(v29 - 24)) = v30;
  MEMORY[0x19401C8BC](&v39[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v40);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_1914FAA9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, void *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, void *);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::ofstream::~ofstream(va1);
  std::ofstream::~ofstream(&STACK[0x2B0]);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  if (SHIBYTE(v13) < 0)
    operator delete(v11);
  if (SHIBYTE(v17) < 0)
    operator delete(v15);
  _Unwind_Resume(a1);
}

void Espresso::default_layer_parameters(uint64_t *a1@<X8>)
{
  void *v3;
  uint64_t v4;
  Espresso::generic_factory_t *v5;
  __int128 *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  BOOL v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v35;
  __int128 *v36;
  _QWORD *v37[2];

  v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = *a1;
  v5 = (Espresso::generic_factory_t *)Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::generic_factory_t::get_objects_copy(v5, (uint64_t)&v36);
  v6 = v36;
  if (v36 != (__int128 *)v37)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v6 + 2);
      v31 = v7;
      v32 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(_QWORD *)v7 + 32))(&v29, v7, v4);
      Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)&__p, &v25);
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v25 + 240))(v25, &v27, &v29);
      if (v28 < 0)
        operator delete(v27);
      v10 = v26;
      if (v26)
      {
        v11 = (unint64_t *)&v26->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v30;
      if (v30)
      {
        v14 = (unint64_t *)&v30->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = v32;
      if (v32)
      {
        v17 = (unint64_t *)&v32->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v35;
      if (v35)
      {
        v20 = (unint64_t *)&v35->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v22 = (__int128 *)*((_QWORD *)v6 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(__int128 **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (__int128 *)*((_QWORD *)v6 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v6;
          v6 = v23;
        }
        while (!v24);
      }
      v6 = v23;
    }
    while (v23 != (__int128 *)v37);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v37[0]);
}

void sub_1914FADA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::debug::write_vImage_Buffer(Espresso::debug *this, const char *a2, vImage_Buffer *a3)
{
  FILE *v4;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = fopen((const char *)this, "wb");
  v6 = vextq_s8(*(int8x16_t *)(a2 + 8), *(int8x16_t *)(a2 + 8), 8uLL);
  v7 = *((_QWORD *)a2 + 3);
  fwrite(&v6, 8uLL, 3uLL, v4);
  fwrite(*(const void **)a2, *((_QWORD *)a2 + 1) * *((_QWORD *)a2 + 3), 1uLL, v4);
  return fclose(v4);
}

uint64_t Espresso::debug::read_vImage_Buffer@<X0>(Espresso::debug *this@<X0>, _QWORD *a2@<X8>)
{
  FILE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = fopen((const char *)this, "rb");
  fread(&v11, 8uLL, 3uLL, v4);
  v5 = v11;
  v6 = v12;
  a2[1] = v12;
  a2[2] = v5;
  v7 = v13;
  a2[3] = v13;
  v8 = v7 * v6;
  v9 = malloc_type_malloc(v7 * v6, 0x1774316CuLL);
  *a2 = v9;
  fread(v9, v8, 1uLL, v4);
  return fclose(v4);
}

uint64_t Espresso::get_vImageBuffer_from_CGImage@<X0>(Espresso *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;
  vImage_Buffer v8;
  vImage_Buffer height;
  vImage_CGImageFormat format;

  format.bitsPerComponent = CGImageGetBitsPerComponent(this);
  format.bitsPerPixel = CGImageGetBitsPerPixel(this);
  format.colorSpace = CGImageGetColorSpace(this);
  format.bitmapInfo = CGImageGetBitmapInfo(this);
  memset(&format.version, 0, 20);
  result = vImageBuffer_InitWithCGImage((vImage_Buffer *)a2, &format, 0, this, 0);
  if (*(_QWORD *)a2)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&height.data = *(_OWORD *)a2;
    *(_OWORD *)&height.width = v6;
    if ((double)*((unint64_t *)&v6 + 1) / (double)(unint64_t)v6 < 2.0)
    {
      vImageBuffer_Init(&v8, height.height, v6, 0x20u, 0);
      vImageConvert_Planar8toARGB8888(&height, &height, &height, &height, &v8, 0);
      free(height.data);
      v7 = *(_OWORD *)&v8.width;
      *(_OWORD *)a2 = *(_OWORD *)&v8.data;
      *(_OWORD *)(a2 + 16) = v7;
    }
    LODWORD(v8.data) = 50331906;
    return vImagePermuteChannels_ARGB8888((const vImage_Buffer *)a2, (const vImage_Buffer *)a2, (const uint8_t *)&v8, 0);
  }
  return result;
}

void Espresso::load_image_to_vImageBuffer_stbi(Espresso *this, const char *a2)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "internal image library not available");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1914FB0C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::load_image_to_vImageBuffer(Espresso *this@<X0>, const char *a2@<X1>, char a3@<W2>, vImage_Buffer *a4@<X8>)
{
  void *v7;
  void *v8;
  CGDataProvider *v9;
  void *v10;
  void *v11;
  int v12;
  CGImageRef v13;
  CGImage *v14;
  int Width;
  int Height;
  CGColorSpace *v17;
  void *v18;
  CGContext *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void *context;
  vImage_Buffer buf;
  vImage_Buffer permuteMap;
  CGRect v26;

  v7 = (void *)MEMORY[0x19401D4A4](this, a2);
  a4->data = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), this);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  context = (void *)MEMORY[0x19401D4A4]();
  v9 = CGDataProviderCreateWithFilename((const char *)this);
  if (v9)
  {
    objc_msgSend(v8, "pathExtension");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "isEqualToString:", CFSTR("png")))
    {

    }
    else
    {
      objc_msgSend(v8, "pathExtension");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("PNG"));

      if (!v12)
      {
        v13 = CGImageCreateWithJPEGDataProvider(v9, 0, 0, kCGRenderingIntentDefault);
        goto LABEL_7;
      }
    }
    v13 = CGImageCreateWithPNGDataProvider(v9, 0, 0, kCGRenderingIntentDefault);
LABEL_7:
    v14 = v13;
    CGDataProviderRelease(v9);
    Width = CGImageGetWidth(v14);
    Height = CGImageGetHeight(v14);
    v22 = a3;
    v17 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    v18 = malloc_type_malloc(4 * Width * Height, 0x9B83E74EuLL);
    v19 = CGBitmapContextCreate(v18, Width, Height, 8uLL, 4 * Width, v17, 0x4001u);
    CGColorSpaceRelease(v17);
    v26.size.width = (double)Width;
    v26.size.height = (double)Height;
    v26.origin.x = 0.0;
    v26.origin.y = 0.0;
    CGContextDrawImage(v19, v26, v14);
    a4->data = v18;
    a4->height = Height;
    a4->width = Width;
    a4->rowBytes = 4 * Width;
    LODWORD(permuteMap.data) = 50331906;
    vImagePermuteChannels_ARGB8888(a4, a4, (const uint8_t *)&permuteMap, 0);
    CGContextRelease(v19);
    CGImageRelease(v14);
    a3 = v22;
  }
  objc_autoreleasePoolPop(context);
  if (a4->data)
  {
    if ((a3 & 1) == 0)
    {
      v20 = *(_OWORD *)&a4->width;
      *(_OWORD *)&permuteMap.data = *(_OWORD *)&a4->data;
      *(_OWORD *)&permuteMap.width = v20;
      if ((double)*((unint64_t *)&v20 + 1) / (double)(unint64_t)v20 < 2.0)
      {
        vImageBuffer_Init(&buf, permuteMap.height, v20, 0x20u, 0);
        vImageConvert_Planar8toARGB8888(&permuteMap, &permuteMap, &permuteMap, &permuteMap, &buf, 0);
        free(permuteMap.data);
        v21 = *(_OWORD *)&buf.width;
        *(_OWORD *)&a4->data = *(_OWORD *)&buf.data;
        *(_OWORD *)&a4->width = v21;
      }
    }
  }

  objc_autoreleasePoolPop(v7);
}

void sub_1914FB360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void Espresso::load_network_no_dispatch(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  uint64_t v11;
  const std::string::value_type *v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  std::string::value_type *v17;
  const std::string::value_type *v18;
  uint64_t v19;
  uint64_t v20;
  std::string::value_type *v21;
  const std::string::value_type *v22;
  const std::string::value_type *v24;
  const std::string::value_type *v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v30;
  uint64_t v31;
  const std::string *v32;
  __int128 v33;
  char *v34;
  void **v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *size;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  void *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type v86;
  std::string::size_type v87;
  uint64_t v88;
  std::string::size_type v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::runtime_error *exception;
  std::runtime_error *v113;
  uint64_t *v114;
  uint64_t v116[2];
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122;
  std::__shared_weak_count *v123;
  char v124;
  std::string v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  std::string v129;
  char **v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unsigned int v137;
  std::string v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  std::string __p;
  char **v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[21];

  v148[19] = *MEMORY[0x1E0C80C00];
  v137 = a3;
  v5 = a2[1];
  v135 = *a2;
  v136 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(char *)(a1 + 23);
  v10 = *(const std::string::value_type **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v8 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v114 = a4;
  if (v8 >= 0)
    v12 = (const std::string::value_type *)a1;
  else
    v12 = *(const std::string::value_type **)a1;
  v13 = (char *)&v12[v11];
  v14 = v11 - 4;
  if (v11 >= 4)
  {
    v16 = v11;
    v17 = (std::string::value_type *)v12;
    do
    {
      v18 = (const std::string::value_type *)memchr(v17, 46, v16 - 3);
      if (!v18)
        break;
      if (*(_DWORD *)v18 == 1852400174)
        goto LABEL_17;
      v17 = (std::string::value_type *)(v18 + 1);
      v16 = v13 - v17;
    }
    while (v13 - v17 > 3);
    v18 = &v12[v11];
LABEL_17:
    v19 = v18 - v12;
    if (v18 == v13)
      v19 = -1;
    v15 = v19 != v14;
    if (v11 >= 5)
    {
      v20 = v11;
      v21 = (std::string::value_type *)v12;
      do
      {
        v22 = (const std::string::value_type *)memchr(v21, 46, v20 - 4);
        if (!v22)
          break;
        if (*(_DWORD *)v22 == 1852400174 && v22[4] == 58)
          goto LABEL_28;
        v21 = (std::string::value_type *)(v22 + 1);
        v20 = v13 - v21;
      }
      while (v13 - v21 > 4);
    }
  }
  else
  {
    v15 = v14 != -1;
  }
  v22 = &v12[v11];
LABEL_28:
  if (v11)
  {
    v24 = v12;
    v25 = &v12[v11];
    do
    {
      if (*v24 == 46)
      {
        v26 = 1u;
        while (v26 != 4)
        {
          if (&v24[v26] == v13)
            goto LABEL_40;
          v27 = v24[v26];
          v28 = aMil[v26++];
          if (v27 != v28)
            goto LABEL_31;
        }
        v25 = v24;
      }
LABEL_31:
      ++v24;
    }
    while (v24 != v13);
  }
  else
  {
    v25 = v12;
  }
LABEL_40:
  v134 = 0uLL;
  v133 = 0uLL;
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129.__r_.__value_.__l.__size_;
  v129.__r_.__value_.__l.__size_ = 0;
  v131 = 0;
  v132 = 0;
  v30 = (v22 == v13 || v22 - v12 == -1) && v15;
  v129.__r_.__value_.__r.__words[2] = 0;
  v130 = &v131;
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "load_network_layers_and_exit does not support binserializer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v25 == v13)
    v31 = -1;
  else
    v31 = v25 - v12;
  if (v31 == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "main");
    v32 = (const std::string *)a1;
    Espresso::MILTranslator::TranslateProgram((uint64_t *)&v138, a1, (uint64_t)&__p);
    v33 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = 0uLL;
    v134 = v33;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::operator=((std::string *)(v33 + 592), (const std::string *)a1);
    v34 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_1E2DBE2D0;
    *(_OWORD *)(v34 + 24) = 0u;
    v35 = (void **)(v34 + 24);
    *(_OWORD *)(v34 + 40) = 0u;
    *(_OWORD *)(v34 + 56) = 0u;
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    v125.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 24);
    v125.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    v128 = v33;
    if (*((_QWORD *)&v33 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.espresso.weights");
    Espresso::serialize_network(&v128, (uint64_t)&__p, v35, 0, &v138);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*((_QWORD *)&v33 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v133, (uint64_t)v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
    v40 = v138.__r_.__value_.__r.__words[2];
    v41 = v139;
    v122 = (void *)v138.__r_.__value_.__r.__words[2];
    v123 = v139;
    if (v139)
    {
      p_shared_owners = (unint64_t *)&v139->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
      v127 = v41;
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
    }
    else
    {
      v127 = 0;
    }
    v126 = v40;
    Espresso::load_network_shape(&v126, (uint64_t)&__p);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v129, (char *)v129.__r_.__value_.__l.__size_);
    v129 = __p;
    if (__p.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = &v129.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v130, v131);
    v53 = (char *)v146;
    v130 = v145;
    v131 = (char *)v146;
    v132 = v147;
    if (v147)
    {
      *(_QWORD *)(v146 + 16) = &v131;
      v145 = (char **)&v146;
      v146 = 0;
      v147 = 0;
      v53 = 0;
    }
    else
    {
      v130 = &v131;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v145, v53);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    v54 = v127;
    if (v127)
    {
      v55 = (unint64_t *)&v127->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v123)
    {
      v57 = &v123->__shared_owners_;
      do
        v58 = __ldaxr((unint64_t *)v57);
      while (__stlxr(v58 - 1, (unint64_t *)v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v59 = v139;
    if (v139)
    {
      v60 = (unint64_t *)&v139->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    size = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
    if (v138.__r_.__value_.__l.__size_)
    {
      v63 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v125.__r_.__value_.__l.__size_)
    {
      v65 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v125.__r_.__value_.__l.__size_ + 16))(v125.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v125.__r_.__value_.__l.__size_);
      }
    }
  }
  else
  {
    v32 = (const std::string *)a1;
    if (v8 < 0)
      std::string::__init_copy_ctor_external(&v125, v10, v9);
    else
      v125 = *(std::string *)a1;
    v45 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    v46 = &v125;
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v45 = v125.__r_.__value_.__l.__size_;
      v46 = (std::string *)v125.__r_.__value_.__r.__words[0];
    }
    if (!v45)
      goto LABEL_198;
    v47 = (std::string *)((char *)v46 + v45);
    v48 = v46;
    v49 = v47;
    do
    {
      if (v48->__r_.__value_.__s.__data_[0] == 46)
      {
        v50 = 1u;
        while (v50 != 13)
        {
          if ((std::string *)((char *)v48 + v50) == v47)
            goto LABEL_85;
          v51 = v48->__r_.__value_.__s.__data_[v50];
          v52 = aEspressoNet[v50++];
          if (v51 != v52)
            goto LABEL_77;
        }
        v49 = v48;
      }
LABEL_77:
      v48 = (std::string *)((char *)v48 + 1);
    }
    while (v48 != v47);
LABEL_85:
    if (v49 == v47 || (char *)v49 - (char *)v46 == -1)
LABEL_198:
      Espresso::throw_exception_selector<Espresso::io_error>("espresso network does not end in .espresso.net");
    std::string::replace(&v125, (char *)v49 - (char *)v46, 0xFFFFFFFFFFFFFFFFLL, ".espresso.shape");
    std::string::basic_string[abi:ne180100]<0>(&v122, "json");
    std::ifstream::basic_ifstream(&__p);
    if (!*(_DWORD *)((char *)&v146 + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)))
    {
      Espresso::load_network_shape((uint64_t)&__p, &v122, (uint64_t)&v138);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v129, (char *)v129.__r_.__value_.__l.__size_);
      v129 = v138;
      if (v138.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)(v138.__r_.__value_.__l.__size_ + 16) = &v129.__r_.__value_.__l.__size_;
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138.__r_.__value_.__l.__size_;
        *(_OWORD *)&v138.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129.__r_.__value_.__l.__size_;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v130, v131);
      v67 = (char *)v140;
      v130 = (char **)v139;
      v131 = (char *)v140;
      v132 = v141;
      if (v141)
      {
        *(_QWORD *)(v140 + 16) = &v131;
        v139 = (std::__shared_weak_count *)&v140;
        v140 = 0;
        v141 = 0;
        v67 = 0;
      }
      else
      {
        v130 = &v131;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v139, v67);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v138, (char *)v138.__r_.__value_.__l.__size_);
    }
    std::ifstream::basic_ifstream(&v138);
    if (!v142)
    {
      v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v113, "Could not create filestream from json.");
      __cxa_throw(v113, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v120 = 0;
    v121 = 0;
    v68 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v119, (uint64_t)v68, &v122);
    v69 = v119;
    v119 = 0uLL;
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    v133 = v69;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    (*(void (**)(_QWORD, std::string *))(*(_QWORD *)v133 + 280))(v133, &v138);
    _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v119);
    v76 = v119;
    v119 = 0uLL;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    v134 = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v121;
    if (v121)
    {
      v84 = (unint64_t *)&v121->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = *MEMORY[0x1E0DE4F40];
    v138.__r_.__value_.__r.__words[0] = v86;
    v87 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    *(std::string::size_type *)((char *)v138.__r_.__value_.__r.__words + *(_QWORD *)(v86 - 24)) = v87;
    MEMORY[0x19401C8BC](&v138.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x19401CCD0](&v143);
    __p.__r_.__value_.__r.__words[0] = v86;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v86 - 24)) = v87;
    MEMORY[0x19401C8BC](&__p.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x19401CCD0](v148);
    if (v124 < 0)
      operator delete(v122);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
  }
  v88 = v133;
  memset(&__p, 0, sizeof(__p));
  v89 = std::string::rfind(v32, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v89 != -1)
  {
    std::string::basic_string(&v138, v32, 0, v89, (std::allocator<char> *)&v125);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v138;
  }
  v90 = v134;
  v92 = v135;
  v91 = (uint64_t)v136;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v134 + 16), v135, (uint64_t)v136);
  std::string::operator=((std::string *)(v90 + 1024), &__p);
  memset(&v138, 0, sizeof(v138));
  std::string::basic_string[abi:ne180100]<0>(&v122, "layers");
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(_QWORD *)v88 + 128))(&v125, v88, &v122);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)&v138.__r_.__value_.__l.__data_);
  v138 = v125;
  memset(&v125, 0, sizeof(v125));
  v120 = &v125;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  if (v124 < 0)
    operator delete(v122);
  v117 = v92;
  v118 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v93 = (unint64_t *)(v91 + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  v116[0] = v90;
  v116[1] = *((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  Espresso::load_network_no_dispatch_internal(v114, &v117, v116, (uint64_t **)&v138, (uint64_t)&v129, &v137);
  if (v95)
  {
    v98 = (unint64_t *)&v95->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v100 = v118;
  if (v118)
  {
    v101 = (unint64_t *)&v118->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v130, v131);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v129, (char *)v129.__r_.__value_.__l.__size_);
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v136;
  if (v136)
  {
    v110 = (unint64_t *)&v136->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_1914FBFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48)
{
  std::ifstream::~ifstream(&STACK[0x360]);
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  Espresso::network_shape::~network_shape(&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v5 = (void **)(a1 + 120);
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
}

void Espresso::load_network_from_net_no_dispatch(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  char *v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  char v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  char v64;
  char *v65[4];
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  char *v71;
  std::__shared_weak_count *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unsigned int v75;
  void **v76;

  v75 = a3;
  v7 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E2DBE2D0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  v8 = (void **)(v7 + 24);
  v73 = v7 + 24;
  v74 = (std::__shared_weak_count *)v7;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v68, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, "model.espresso.weights");
  Espresso::serialize_network(&v68, (uint64_t)__p, v8, 0, &v70);
  if (v64 < 0)
    operator delete(__p[0]);
  v9 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v67 = v70;
  if (*((_QWORD *)&v70 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (uint64_t)v71;
  v15 = v72;
  v65[3] = v71;
  v66 = v72;
  if (v72)
  {
    v16 = (unint64_t *)&v72->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v62 = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
  }
  else
  {
    v62 = 0;
  }
  v61 = v14;
  Espresso::load_network_shape(&v61, (uint64_t)__p);
  v19 = v62;
  if (v62)
  {
    v20 = (unint64_t *)&v62->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v67;
  v59 = 0uLL;
  v60 = 0;
  std::string::basic_string[abi:ne180100]<0>(v55, "layers");
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v22 + 128))(&v57, v22, v55);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)&v59);
  v59 = v57;
  v60 = v58;
  v58 = 0;
  v57 = 0uLL;
  v76 = (void **)&v57;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v76);
  if (v56 < 0)
    operator delete(v55[0]);
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v57);
  v23 = a2[1];
  v53 = *a2;
  v54 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  v52 = v57;
  if (*((_QWORD *)&v57 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  Espresso::load_network_no_dispatch_internal(a4, &v53, (uint64_t *)&v52, (uint64_t **)&v59, (uint64_t)__p, &v75);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = v54;
  if (v54)
  {
    v32 = (unint64_t *)&v54->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(_QWORD *)&v57 = &v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v65, v65[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  v37 = v66;
  if (v66)
  {
    v38 = (unint64_t *)&v66->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v72;
  if (v72)
  {
    v44 = (unint64_t *)&v72->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v74;
  if (v74)
  {
    v50 = (unint64_t *)&v74->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1914FC6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a20 = &a24;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  Espresso::network_shape::~network_shape((char **)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 80);
  _Unwind_Resume(a1);
}

void Espresso::get_last_layer_blob(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(_QWORD *)(v2 - 16);
  v4 = *(std::__shared_weak_count **)(v2 - 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(uint64_t **)(v3 + 104);
  v9 = *v7;
  v8 = v7[1];
  *a2 = v9;
  a2[1] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void Espresso::load_network_layers(std::string *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  char **v5;
  char *v6[2];
  char **v7;
  char *v8[2];

  v5 = v6;
  v6[0] = 0;
  v8[0] = 0;
  v8[1] = 0;
  v6[1] = 0;
  v7 = v8;
  Espresso::load_network_layers(a1, a2, (uint64_t)&v5, a3, a4, a5);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v7, v8[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1914FC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  Espresso::network_shape::~network_shape(&a9);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  char **v6;
  char *v7[2];
  char **v8;
  char *v9[2];

  v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  v8 = v9;
  Espresso::load_network_layers(a1, a2, a3, a4, (uint64_t)&v6, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_1914FC8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  Espresso::network_shape::~network_shape(&a9);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  char **v6;
  char *v7[2];
  char **v8;
  char *v9[2];

  v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  v8 = v9;
  Espresso::load_network_layers(a1, a2, a3, (uint64_t)&v6, a4, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_1914FC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  Espresso::network_shape::~network_shape(&a9);
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  char **v6;
  char *v7[2];
  char **v8;
  char *v9[2];

  v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  v8 = v9;
  Espresso::load_network_layers_binserializer(a1, a2, a3, (uint64_t)&v6, a4, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_1914FC9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  Espresso::network_shape::~network_shape(&a9);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::~v9_wg_transform_in_kernel(Espresso::V9Engine::v9_wg_transform_in_kernel *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2DA6718;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 544);
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2DA6718;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 544);
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  _DWORD *v12;
  const void *v13;
  int32x2_t *v14;
  int **v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  MTLFunctionConstantValues *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  Espresso::context_metal *v28;
  Espresso::context_metal *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSString *v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::runtime_error *exception;
  void *v43;
  _QWORD v44[3];
  _QWORD v45[3];
  Espresso::context_metal *v46;
  std::__shared_weak_count *v47;
  _DWORD v48[2];
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int32x2_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  __int128 v58;
  id v59[3];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v59, *a2);
  v8 = v59[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = (int **)(a1 + 512);
  if (*(_QWORD *)(a1 + 520) == *(_QWORD *)(a1 + 512))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 512), 4uLL);
    *(_OWORD *)*v15 = xmmword_191A936B0;
  }
  if (Espresso::update_tune(a1 + 512, a1, (uint64_t)a3, (uint64_t)a4))
  {
    v16 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = 0;

  }
  v57 = 0;
  v56 = 0;
  v58 = xmmword_191A935D0;
  v17 = v14[2].i32[0];
  v50 = v17;
  v51 = 0;
  v18 = v12[2];
  v49 = v12[3];
  v48[0] = v18;
  v48[1] = v49 * v18;
  v54 = vmul_s32(vmax_s32(*(int32x2_t *)(a1 + 536), (int32x2_t)0x100000001), v14[1]);
  v19 = *(__int16 *)(a1 + 314);
  v52 = *(__int16 *)(a1 + 310);
  v53 = v19;
  v55 = 0;
  if (!*(_QWORD *)(a1 + 328))
  {
    v20 = (MTLFunctionConstantValues *)objc_opt_new();
    v21 = (void *)objc_opt_new();
    v22 = v21;
    if (v17 >= 1)
      v23 = v17 - 1;
    else
      v23 = v17 + 2;
    LOWORD(v46) = v17;
    objc_msgSend(v21, "appendFormat:", CFSTR("%d:%d_"), 0, (unsigned __int16)v17);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 0);
    LOWORD(v46) = (v23 >> 2) + 1;
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 1, (unsigned __int16)v46);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 1);
    LOWORD(v46) = 0;
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 2, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 2);
    LOWORD(v46) = *(_WORD *)(a1 + 318);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 4, (unsigned __int16)v46);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 4);
    v24 = *(unsigned int *)(a1 + 536);
    LOWORD(v46) = *(_DWORD *)(a1 + 536);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 5, v24);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 5);
    v25 = *(unsigned int *)(a1 + 540);
    LOWORD(v46) = *(_DWORD *)(a1 + 540);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 6, v25);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 6);
    LOWORD(v46) = 0;
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 7, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 7);
    LOWORD(v46) = 0;
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 8, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 8);
    if (*(_QWORD *)(a1 + 544))
    {
      LOWORD(v46) = 1;
      objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 7, 1);
      -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 7);
      LOWORD(v46) = 0;
      LOWORD(v46) = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 544) + 384))(*(_QWORD *)(a1 + 544))
                              + 28);
      objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 8, *(unsigned int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 544) + 384))(*(_QWORD *)(a1 + 544))+ 28));
      -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v20, "setConstantValue:type:atIndex:", &v46, 41, 8);
      DWORD2(v58) = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 544) + 384))(*(_QWORD *)(a1 + 544))
                              + 36);
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sample%d"), (*v15)[3]);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("k%dx%d_w%dx%d"), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 284));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = *(const void **)(a1 + 8);
    if (v27
    {
      v29 = v28;
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      v46 = v28;
      v47 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
    }
    else
    {
      v30 = 0;
      v29 = 0;
      v46 = 0;
      v47 = 0;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("v9_wg_transform4_in_%@_%@"), v43, v26);
    v33 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function(v29, v33, (NSString *)v22, v20);
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v34;

    if (v30)
    {
      v36 = (unint64_t *)&v30->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    v15 = (int **)(a1 + 512);
    if (!*(_QWORD *)(a1 + 328))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_39:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v8, "setComputePipelineState:");
  objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)&v14[21], 0);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v12 + 21), 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", v48, 68, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v14[20], 0, 1);
  v38 = *(_QWORD *)(a1 + 544);
  if (v38)
  {
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(v38 + 488), 0, 1);
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 544) + 488))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Missing batch_meanvar_buffer");
      goto LABEL_39;
    }
  }
  v39 = **v15;
  v40 = (*v15)[1];
  v41 = (*v15)[2];
  v45[0] = (v48[0] - 1) / (int)v39 + 1;
  v45[1] = (v49 - 1) / (int)v40 + 1;
  v45[2] = (v50 - 1) / (4 * (int)v41) + 1;
  v44[0] = v39;
  v44[1] = v40;
  v44[2] = v41;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v45, v44);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v59);
}

void sub_1914FD140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  __cxa_free_exception(v22);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v23 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v5[3];
  void **v6;

  if (a1[67].i32[0] < 1 || a1[67].i32[1] < 1)
  {
    Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, a2, a3);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
    *(int32x2_t *)v5[0] = vmul_s32(*(int32x2_t *)v5[0], a1[67]);
    Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, v5, a3);
    v6 = (void **)v5;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void sub_1914FD2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_wg_transform_in_kernel::wisdom_key(Espresso::V9Engine::v9_wg_transform_in_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"WG_TX_IN,", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"WS,", 3);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"KS,", 3);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"W,", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"H,", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"K,", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v13);
}

void sub_1914FD498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_wg_transform_in_kernel::wisdom_tunables@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  int v3;
  unint64_t *v4;
  char v5;
  char v6;
  _DWORD *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _DWORD *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  char *v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _DWORD *v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t *v87;

  v2 = 0;
  v3 = 0;
  a1[2] = 0;
  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = operator new(0x10uLL);
    v8 = (char *)(v7 + 4);
    *(_QWORD *)v7 = 0x400000004;
    v7[2] = 4;
    v7[3] = v3;
    *(_QWORD *)&v9 = v7;
    *((_QWORD *)&v9 + 1) = v7 + 4;
    if (v2 >= *v4)
    {
      v76 = v9;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v12)
        v12 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v87 = v4;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v15 = &v14[24 * v11];
      v83 = v14;
      v84 = v15;
      v86 = &v14[24 * v16];
      *(_OWORD *)v15 = v76;
      *((_QWORD *)v15 + 2) = v8;
      v85 = v15 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v10 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v2 = v9;
      *(_QWORD *)(v2 + 16) = v8;
      v10 = v2 + 24;
      a1[1] = v10;
    }
    a1[1] = v10;
    v17 = operator new(0x10uLL);
    v18 = (char *)(v17 + 4);
    *(_QWORD *)v17 = 0x400000004;
    v17[2] = 1;
    v17[3] = v3;
    *(_QWORD *)&v19 = v17;
    *((_QWORD *)&v19 + 1) = v17 + 4;
    if (v10 >= *v4)
    {
      v77 = v19;
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a1) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v22)
        v22 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v22;
      v87 = v4;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
      v25 = &v24[24 * v21];
      v83 = v24;
      v84 = v25;
      v86 = &v24[24 * v26];
      *(_OWORD *)v25 = v77;
      *((_QWORD *)v25 + 2) = v18;
      v85 = v25 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v20 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v10 = v19;
      *(_QWORD *)(v10 + 16) = v18;
      v20 = v10 + 24;
      a1[1] = v20;
    }
    a1[1] = v20;
    v27 = operator new(0x10uLL);
    v28 = (char *)(v27 + 4);
    *(_QWORD *)v27 = 0x200000002;
    v27[2] = 4;
    v27[3] = v3;
    *(_QWORD *)&v29 = v27;
    *((_QWORD *)&v29 + 1) = v27 + 4;
    if (v20 >= *v4)
    {
      v78 = v29;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v32)
        v32 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v32;
      v87 = v4;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
      v35 = &v34[24 * v31];
      v83 = v34;
      v84 = v35;
      v86 = &v34[24 * v36];
      *(_OWORD *)v35 = v78;
      *((_QWORD *)v35 + 2) = v28;
      v85 = v35 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v30 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v20 = v29;
      *(_QWORD *)(v20 + 16) = v28;
      v30 = v20 + 24;
      a1[1] = v30;
    }
    a1[1] = v30;
    v37 = operator new(0x10uLL);
    v38 = (char *)(v37 + 4);
    *(_QWORD *)v37 = 0x200000002;
    v37[2] = 6;
    v37[3] = v3;
    *(_QWORD *)&v39 = v37;
    *((_QWORD *)&v39 + 1) = v37 + 4;
    if (v30 >= *v4)
    {
      v79 = v39;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a1) >> 3);
      v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v42)
        v42 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v42;
      v87 = v4;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v43);
      v45 = &v44[24 * v41];
      v83 = v44;
      v84 = v45;
      v86 = &v44[24 * v46];
      *(_OWORD *)v45 = v79;
      *((_QWORD *)v45 + 2) = v38;
      v85 = v45 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v40 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v30 = v39;
      *(_QWORD *)(v30 + 16) = v38;
      v40 = v30 + 24;
      a1[1] = v40;
    }
    a1[1] = v40;
    v47 = operator new(0x10uLL);
    v48 = (char *)(v47 + 4);
    *(_QWORD *)v47 = 0x200000002;
    v47[2] = 8;
    v47[3] = v3;
    *(_QWORD *)&v49 = v47;
    *((_QWORD *)&v49 + 1) = v47 + 4;
    if (v40 >= *v4)
    {
      v80 = v49;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a1) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v52)
        v52 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      v87 = v4;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
      v55 = &v54[24 * v51];
      v83 = v54;
      v84 = v55;
      v86 = &v54[24 * v56];
      *(_OWORD *)v55 = v80;
      *((_QWORD *)v55 + 2) = v48;
      v85 = v55 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v50 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v40 = v49;
      *(_QWORD *)(v40 + 16) = v48;
      v50 = v40 + 24;
      a1[1] = v50;
    }
    a1[1] = v50;
    v57 = operator new(0x10uLL);
    v58 = (char *)(v57 + 4);
    *(_QWORD *)v57 = 0x200000002;
    v57[2] = 16;
    v57[3] = v3;
    *(_QWORD *)&v59 = v57;
    *((_QWORD *)&v59 + 1) = v57 + 4;
    if (v50 >= *v4)
    {
      v81 = v59;
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *a1) >> 3);
      v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v62)
        v62 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v63 = 0xAAAAAAAAAAAAAAALL;
      else
        v63 = v62;
      v87 = v4;
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v63);
      v65 = &v64[24 * v61];
      v83 = v64;
      v84 = v65;
      v86 = &v64[24 * v66];
      *(_OWORD *)v65 = v81;
      *((_QWORD *)v65 + 2) = v58;
      v85 = v65 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v60 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v50 = v59;
      *(_QWORD *)(v50 + 16) = v58;
      v60 = v50 + 24;
      a1[1] = v60;
    }
    a1[1] = v60;
    result = (uint64_t)operator new(0x10uLL);
    v68 = result + 16;
    *(_QWORD *)result = 0x800000008;
    *(_DWORD *)(result + 8) = 4;
    *(_DWORD *)(result + 12) = v3;
    *(_QWORD *)&v69 = result;
    *((_QWORD *)&v69 + 1) = result + 16;
    if (v60 >= *v4)
    {
      v82 = v69;
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *a1) >> 3);
      v71 = v70 + 1;
      if (v70 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v71)
        v71 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v72 = 0xAAAAAAAAAAAAAAALL;
      else
        v72 = v71;
      v87 = v4;
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v72);
      v74 = &v73[24 * v70];
      v83 = v73;
      v84 = v74;
      v86 = &v73[24 * v75];
      *(_OWORD *)v74 = v82;
      *((_QWORD *)v74 + 2) = v68;
      v85 = v74 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v2 = a1[1];
      result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v60 = v69;
      *(_QWORD *)(v60 + 16) = v68;
      v2 = v60 + 24;
      a1[1] = v2;
    }
    v5 = 0;
    a1[1] = v2;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

void sub_1914FDB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::update_tune(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  v19 = v5;
  v20 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(v5 + 24);
  if (v9 && *(_BYTE *)(v9 + 12))
  {
    Espresso::wisdom_trainer2::get_tune(v9, a2, a3, a4, &__p);
    v11 = (char *)__p;
    v10 = v18;
    v12 = (_BYTE *)v18 - (_BYTE *)__p;
    if (v18 != __p)
    {
      if (v12 == *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 && !memcmp(__p, *(const void **)a1, (_BYTE *)v18 - (_BYTE *)__p))
      {
        v13 = 0;
      }
      else
      {
        if (&__p != (void **)a1)
        {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)a1, v11, (uint64_t)v10, v12 >> 2);
          v13 = 1;
          v10 = __p;
          if (!__p)
            goto LABEL_15;
          goto LABEL_14;
        }
        v13 = 1;
      }
      v10 = v11;
      if (!v11)
        goto LABEL_15;
LABEL_14:
      v18 = v10;
      operator delete(v10);
      goto LABEL_15;
    }
    v13 = 0;
    if (v18)
      goto LABEL_14;
  }
  else
  {
    v13 = 0;
  }
LABEL_15:
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v13;
}

void sub_1914FDCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_out_kernel::~v9_wg_transform_out_kernel(Espresso::V9Engine::v9_wg_transform_out_kernel *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2DA6870;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E2D80DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2DA6870;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E2D80DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_wg_transform_out_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  Espresso::context_metal *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  int *v12;
  const void *v13;
  _DWORD *v14;
  int **v15;
  void *v16;
  uint64_t v22;
  int v23;
  MTLFunctionConstantValues *v24;
  void *v25;
  void *v26;
  int v27;
  _BOOL8 v28;
  void *v29;
  void *v30;
  NSString *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::runtime_error *exception;
  std::runtime_error *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  Espresso::context_metal *v49;
  MTLFunctionConstantValues *v50;
  _QWORD v51[3];
  _QWORD v52[3];
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  _DWORD v58[2];
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  int v69;
  id v70[4];

  v7 = *(Espresso::context_metal **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v70, *a2);
  v8 = v70[0];
  if (*((_BYTE *)v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = (int **)(a1 + 416);
  if (*(_QWORD *)(a1 + 424) == *(_QWORD *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 416), 4uLL);
    *(_OWORD *)*v15 = xmmword_191A936B0;
  }
  if (Espresso::update_tune(a1 + 416, a1, (uint64_t)a3, (uint64_t)a4))
  {
    v16 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = 0;

  }
  v64 = 0;
  v63 = 0;
  v62 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v67 = _D0;
  v65 = 0;
  v68 = 0;
  v22 = v12[4];
  v60 = 0;
  v61 = v22;
  v66 = *(_WORD *)(a1 + 332);
  v69 = *(_DWORD *)(a1 + 328);
  v23 = v14[2];
  v59 = v14[3];
  v58[0] = v23;
  v58[1] = v59 * v23;
  v64 = *((_QWORD *)v12 + 1);
  if (!*(_QWORD *)(a1 + 368))
  {
    v24 = (MTLFunctionConstantValues *)objc_opt_new();
    v50 = v24;
    v25 = (void *)objc_opt_new();
    v26 = v25;
    if ((int)v22 >= 1)
      v27 = v22 - 1;
    else
      v27 = v22 + 2;
    LOWORD(v57.__r_.__value_.__l.__data_) = v22;
    objc_msgSend(v25, "appendFormat:", CFSTR("%d:%d_"), 0, (unsigned __int16)v22);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v57, 41, 0);
    LOWORD(v57.__r_.__value_.__l.__data_) = (v27 >> 2) + 1;
    objc_msgSend(v26, "appendFormat:", CFSTR("%d:%d_"), 1, LOWORD(v57.__r_.__value_.__l.__data_));
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v57, 41, 1);
    LOWORD(v57.__r_.__value_.__l.__data_) = 0;
    objc_msgSend(v26, "appendFormat:", CFSTR("%d:%d_"), 2, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v57, 41, 2);
    v49 = v7;
    v28 = *(_QWORD *)(a1 + 384) != 0;
    LOWORD(v57.__r_.__value_.__l.__data_) = *(_QWORD *)(a1 + 384) != 0;
    objc_msgSend(v26, "appendFormat:", CFSTR("%d:%d_"), 9, v28);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v57, 41, 9);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sample%d"), *(unsigned int *)(*(_QWORD *)(a1 + 416) + 12));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("k%dx%d_w%dx%d"), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 308));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("v9_wg_transform4_out_%@_%@"), v29, v30);
    v31 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function(v49, v31, (NSString *)v26, v50);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v32;

    v15 = (int **)(a1 + 416);
  }
  v34 = *(void **)(a1 + 376);
  if (!v34)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer not set");
    goto LABEL_35;
  }
  if (objc_msgSend(v34, "length") < (unint64_t)(4 * v22))
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, objc_msgSend(*(id *)(a1 + 376), "length"));
    v41 = std::string::insert(&v54, 0, "bias buffer too small: ");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v55, "/");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v22);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v53;
    else
      v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    v47 = std::string::append(&v56, (const std::string::value_type *)v45, size);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v40, &v57);
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*(_QWORD *)(a1 + 368))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_35:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "setComputePipelineState:");
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v14 + 21), 0);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v12 + 21), 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", v58, 68, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 376), 0, 1);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 376), 0, 2);
  v35 = *(_QWORD *)(a1 + 384);
  if (v35)
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v35, 0, 2);
  v36 = **v15;
  v37 = (*v15)[1];
  v38 = (*v15)[2];
  v52[0] = (v58[0] - 1) / (int)v36 + 1;
  v52[1] = (v59 - 1) / (int)v37 + 1;
  v52[2] = (v61 - 1) / (4 * (int)v38) + 1;
  v51[0] = v36;
  v51[1] = v37;
  v51[2] = v38;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v52, v51);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v70);
}

void sub_1914FE3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  int v49;
  uint64_t v50;

  if (*(char *)(v50 - 185) < 0)
    operator delete(*(void **)(v50 - 208));
  if (a28 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v49 & 1) == 0)
    {
LABEL_14:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v50 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v48);
  goto LABEL_14;
}

uint64_t Espresso::V9Engine::v9_wg_transform_out_kernel::wisdom_key(Espresso::V9Engine::v9_wg_transform_out_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"WG_TX_OUT,", 10);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"WS,", 3);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"KS,", 3);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"W,", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"H,", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"K,", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v13);
}

void sub_1914FE6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_wg_transform_out_kernel::wisdom_tunables@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  int v3;
  unint64_t *v4;
  char v5;
  char v6;
  _DWORD *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _DWORD *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  char *v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _DWORD *v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t *v87;

  v2 = 0;
  v3 = 0;
  a1[2] = 0;
  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = operator new(0x10uLL);
    v8 = (char *)(v7 + 4);
    *(_QWORD *)v7 = 0x400000004;
    v7[2] = 4;
    v7[3] = v3;
    *(_QWORD *)&v9 = v7;
    *((_QWORD *)&v9 + 1) = v7 + 4;
    if (v2 >= *v4)
    {
      v76 = v9;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v12)
        v12 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v87 = v4;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v15 = &v14[24 * v11];
      v83 = v14;
      v84 = v15;
      v86 = &v14[24 * v16];
      *(_OWORD *)v15 = v76;
      *((_QWORD *)v15 + 2) = v8;
      v85 = v15 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v10 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v2 = v9;
      *(_QWORD *)(v2 + 16) = v8;
      v10 = v2 + 24;
      a1[1] = v10;
    }
    a1[1] = v10;
    v17 = operator new(0x10uLL);
    v18 = (char *)(v17 + 4);
    *(_QWORD *)v17 = 0x400000004;
    v17[2] = 1;
    v17[3] = v3;
    *(_QWORD *)&v19 = v17;
    *((_QWORD *)&v19 + 1) = v17 + 4;
    if (v10 >= *v4)
    {
      v77 = v19;
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a1) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v22)
        v22 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v22;
      v87 = v4;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
      v25 = &v24[24 * v21];
      v83 = v24;
      v84 = v25;
      v86 = &v24[24 * v26];
      *(_OWORD *)v25 = v77;
      *((_QWORD *)v25 + 2) = v18;
      v85 = v25 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v20 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v10 = v19;
      *(_QWORD *)(v10 + 16) = v18;
      v20 = v10 + 24;
      a1[1] = v20;
    }
    a1[1] = v20;
    v27 = operator new(0x10uLL);
    v28 = (char *)(v27 + 4);
    *(_QWORD *)v27 = 0x200000002;
    v27[2] = 4;
    v27[3] = v3;
    *(_QWORD *)&v29 = v27;
    *((_QWORD *)&v29 + 1) = v27 + 4;
    if (v20 >= *v4)
    {
      v78 = v29;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v32)
        v32 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v32;
      v87 = v4;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
      v35 = &v34[24 * v31];
      v83 = v34;
      v84 = v35;
      v86 = &v34[24 * v36];
      *(_OWORD *)v35 = v78;
      *((_QWORD *)v35 + 2) = v28;
      v85 = v35 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v30 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v20 = v29;
      *(_QWORD *)(v20 + 16) = v28;
      v30 = v20 + 24;
      a1[1] = v30;
    }
    a1[1] = v30;
    v37 = operator new(0x10uLL);
    v38 = (char *)(v37 + 4);
    *(_QWORD *)v37 = 0x200000002;
    v37[2] = 6;
    v37[3] = v3;
    *(_QWORD *)&v39 = v37;
    *((_QWORD *)&v39 + 1) = v37 + 4;
    if (v30 >= *v4)
    {
      v79 = v39;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a1) >> 3);
      v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v42)
        v42 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v42;
      v87 = v4;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v43);
      v45 = &v44[24 * v41];
      v83 = v44;
      v84 = v45;
      v86 = &v44[24 * v46];
      *(_OWORD *)v45 = v79;
      *((_QWORD *)v45 + 2) = v38;
      v85 = v45 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v40 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v30 = v39;
      *(_QWORD *)(v30 + 16) = v38;
      v40 = v30 + 24;
      a1[1] = v40;
    }
    a1[1] = v40;
    v47 = operator new(0x10uLL);
    v48 = (char *)(v47 + 4);
    *(_QWORD *)v47 = 0x200000002;
    v47[2] = 8;
    v47[3] = v3;
    *(_QWORD *)&v49 = v47;
    *((_QWORD *)&v49 + 1) = v47 + 4;
    if (v40 >= *v4)
    {
      v80 = v49;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a1) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v52)
        v52 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      v87 = v4;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
      v55 = &v54[24 * v51];
      v83 = v54;
      v84 = v55;
      v86 = &v54[24 * v56];
      *(_OWORD *)v55 = v80;
      *((_QWORD *)v55 + 2) = v48;
      v85 = v55 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v50 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v40 = v49;
      *(_QWORD *)(v40 + 16) = v48;
      v50 = v40 + 24;
      a1[1] = v50;
    }
    a1[1] = v50;
    v57 = operator new(0x10uLL);
    v58 = (char *)(v57 + 4);
    *(_QWORD *)v57 = 0x200000002;
    v57[2] = 16;
    v57[3] = v3;
    *(_QWORD *)&v59 = v57;
    *((_QWORD *)&v59 + 1) = v57 + 4;
    if (v50 >= *v4)
    {
      v81 = v59;
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *a1) >> 3);
      v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v62)
        v62 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v63 = 0xAAAAAAAAAAAAAAALL;
      else
        v63 = v62;
      v87 = v4;
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v63);
      v65 = &v64[24 * v61];
      v83 = v64;
      v84 = v65;
      v86 = &v64[24 * v66];
      *(_OWORD *)v65 = v81;
      *((_QWORD *)v65 + 2) = v58;
      v85 = v65 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v60 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v50 = v59;
      *(_QWORD *)(v50 + 16) = v58;
      v60 = v50 + 24;
      a1[1] = v60;
    }
    a1[1] = v60;
    result = (uint64_t)operator new(0x10uLL);
    v68 = result + 16;
    *(_QWORD *)result = 0x800000008;
    *(_DWORD *)(result + 8) = 4;
    *(_DWORD *)(result + 12) = v3;
    *(_QWORD *)&v69 = result;
    *((_QWORD *)&v69 + 1) = result + 16;
    if (v60 >= *v4)
    {
      v82 = v69;
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *a1) >> 3);
      v71 = v70 + 1;
      if (v70 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v71)
        v71 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555)
        v72 = 0xAAAAAAAAAAAAAAALL;
      else
        v72 = v71;
      v87 = v4;
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v72);
      v74 = &v73[24 * v70];
      v83 = v73;
      v84 = v74;
      v86 = &v73[24 * v75];
      *(_OWORD *)v74 = v82;
      *((_QWORD *)v74 + 2) = v68;
      v85 = v74 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      v2 = a1[1];
      result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)v60 = v69;
      *(_QWORD *)(v60 + 16) = v68;
      v2 = v60 + 24;
      a1[1] = v2;
    }
    v5 = 0;
    a1[1] = v2;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

void sub_1914FED9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_elementwise_kernel::~v9_elementwise_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  id *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  id *v22;
  id *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  const void *v43;
  id *v44;
  id *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::runtime_error *exception;
  uint64_t v63;
  id v64;
  id v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int64x2_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t v73;
  id *v74;
  std::__shared_weak_count *v75;
  id *v76;
  std::__shared_weak_count *v77;
  id v78[3];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v78, *a2);
  v8 = v78[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = (_DWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 284);
  v14 = *(_DWORD *)(a1 + 280);
  if ((v14 - 2) >= 2)
  {
    if (!v14)
    {
      v21 = *a4;
      if (a4[1] - *a4 != 32)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Not implemented");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(_QWORD *)v21
      {
        v23 = v22;
        v24 = *(std::__shared_weak_count **)(v21 + 8);
        v76 = v22;
        v77 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          v21 = *a4;
        }
      }
      else
      {
        v23 = 0;
        v76 = 0;
        v77 = 0;
      }
      v43 = *(const void **)(v21 + 16);
      if (v43
      {
        v45 = v44;
        v46 = *(std::__shared_weak_count **)(v21 + 24);
        v74 = v44;
        v75 = v46;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
      }
      else
      {
        v46 = 0;
        v45 = 0;
        v74 = 0;
        v75 = 0;
      }
      v49 = v23[20];
      v50 = v45[20];
      v51 = v12[20];
      v52 = *(_QWORD *)(a1 + 336);
      if (!v52)
      {
        v65 = v49;
        v53 = (void *)objc_opt_new();
        v54 = objc_retainAutorelease((id)objc_opt_new());
        objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_elementwise_add", objc_msgSend(v54, "UTF8String"), v53);
        v55 = objc_claimAutoreleasedReturnValue();
        v56 = *(void **)(a1 + 336);
        *(_QWORD *)(a1 + 336) = v55;

        v52 = *(_QWORD *)(a1 + 336);
        v49 = v65;
      }
      objc_msgSend(v8, "setComputePipelineState:", v52);
      *(_DWORD *)(a1 + 344) = *((_DWORD *)v23 + 65) / 4 * *((_DWORD *)v23 + 5) * *((_DWORD *)v23 + 6);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", v49, 0, 0);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", v50, 0, 1);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", v51, 0, 2);
      objc_msgSend(v8, "setBytes:length:atIndex:", a1 + 344, 16, 3);
      v72 = ((*v13 - 1) >> 6) + 1;
      v73 = vdupq_n_s64(1uLL);
      v70 = xmmword_191A93520;
      v71 = 1;
      objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v72, &v70);

      if (v46)
      {
        v57 = (unint64_t *)&v46->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v59 = v77;
      if (v77)
      {
        v60 = (unint64_t *)&v77->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          v42 = v59;
          goto LABEL_54;
        }
      }
    }
  }
  else
  {
    v15 = *a4;
    if (*(_QWORD *)v15
    {
      v17 = v16;
      v18 = *(std::__shared_weak_count **)(v15 + 8);
      v76 = v16;
      v77 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    else
    {
      v18 = 0;
      v17 = 0;
      v76 = 0;
      v77 = 0;
    }
    v27 = v17[20];
    v28 = v12[20];
    v29 = *(_QWORD *)(a1 + 336);
    if (!v29)
    {
      v64 = v27;
      v30 = v7;
      v63 = objc_opt_new();
      v31 = (void *)objc_opt_new();
      v32 = *(_DWORD *)(a1 + 280);
      v33 = objc_retainAutorelease(v31);
      v34 = (void *)v63;
      v35 = objc_msgSend(v33, "UTF8String");
      if (v32 == 2)
        v36 = "v9_elementwise_addc";
      else
        v36 = "v9_elementwise_mulc";
      objc_msgSend(*(id *)(v30 + 160), "kernelForFunction:cacheString:withConstants:", v36, v35, v63, v63);
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = *(void **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v37;

      v29 = *(_QWORD *)(a1 + 336);
      v27 = v64;
    }
    objc_msgSend(v8, "setComputePipelineState:", v29);
    *(_DWORD *)(a1 + 344) = *((_DWORD *)v17 + 65) / 4 * *((_DWORD *)v17 + 5) * *((_DWORD *)v17 + 6);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v27, 0, 0);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v28, 0, 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", a1 + 344, 16, 2);
    v39 = ((*v13 - 1) >> 6) + 1;
    v67 = 1;
    v68 = v39;
    v69 = vdupq_n_s64(1uLL);
    v66 = xmmword_191A93520;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v68, &v66);

    if (v18)
    {
      v40 = (unint64_t *)&v18->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        v42 = v18;
LABEL_54:
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v78);
}

void sub_1914FF410(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a16);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 120);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v20 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_concat_kernel::~v9_concat_kernel(Espresso::V9Engine::v9_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_concat_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int32x2_t **v25;
  size_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int32x2_t **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int32x2_t *v37;
  id v38;
  void *v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  int32x2_t **v44;
  int32x2_t *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int32x2_t v52;
  int32x2_t v53;
  __int128 v54;
  id v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  __int128 *v64;
  void *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int32x2_t **v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  int32x2_t *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int32x2_t *v80;
  unint64_t v81;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int64x2_t *v90;
  _QWORD *v91;
  uint64_t v92;
  std::runtime_error *v93;
  std::runtime_error *exception;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  int64x2_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  _QWORD v104[3];
  int64x2_t v105;
  _QWORD v106[3];
  std::string v107;
  std::string v108;
  __int128 v109;
  int64_t v110;
  int32x2_t **v111;
  int32x2_t **v112;
  int32x2_t **v113;
  id v114[3];

  if (a4[1] != *a4 || *(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v114, *a2);
    v8 = v114[0];
    v97 = v7;
    if (*(_BYTE *)(v7 + 64))
    {
      v9 = (_QWORD *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0)
        v9 = (_QWORD *)*v9;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setLabel:", v10);

    }
    v11 = **(const void ***)a3;
    if (v11)
    else
      v12 = 0;
    v14 = *a4;
    v13 = a4[1];
    if (v13 == *a4)
    {
      LOBYTE(v16) = 0;
      v24 = (v13 - *a4) >> 4;
      v17 = 1;
      v14 = a4[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
      LOBYTE(v17) = 1;
      do
      {
        v18 = v14 + 16 * v15;
        v20 = *(std::__shared_weak_count **)(v18 + 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          v16 |= (v19[4] & 3) != 0;
          v17 = (v19[4] == 3) & v17;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          v16 |= (v19[4] & 3) != 0;
          v17 = (v19[4] == 3) & v17;
        }
        ++v15;
        v14 = *a4;
        v13 = a4[1];
        v24 = (v13 - *a4) >> 4;
      }
      while (v24 > v15);
    }
    v111 = 0;
    v112 = 0;
    v113 = 0;
    *(_QWORD *)&v109 = &v111;
    BYTE8(v109) = 0;
    if (v24)
    {
      if (v24 >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25 = (int32x2_t **)operator new(16 * v24);
      v111 = v25;
      v113 = &v25[2 * v24];
      v26 = 2 * v24;
      bzero(v25, v26 * 8);
      v112 = &v25[v26];
    }
    else
    {
      v25 = 0;
    }
    if (v14 != v13)
    {
      v27 = 0;
      do
      {
        v28 = 0uLL;
        if (*(_QWORD *)v14)
        {
          v28 = 0uLL;
          if (v29)
          {
            v30 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)&v28 = v29;
            *((_QWORD *)&v28 + 1) = v30;
            if (v30)
            {
              v31 = (unint64_t *)(v30 + 8);
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
          }
        }
        v33 = &v111[2 * v27];
        v34 = (std::__shared_weak_count *)v33[1];
        *(_OWORD *)v33 = v28;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        ++v27;
        v14 += 16;
      }
      while (v14 != v13);
      v25 = v111;
    }
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 280);
    v37 = *v25;
    v96 = a1 + 344;
    *(int32x2_t *)(a1 + 380) = (*v25)[1];
    *(_DWORD *)(a1 + 388) = v37[31].i32[1] / 4;
    *(_DWORD *)(a1 + 404) = *((_DWORD *)v12 + 62) / 4;
    *(_DWORD *)(a1 + 408) = *((_DWORD *)v12 + 63) / 4;
    if ((v16 & 1) != 0)
    {
      if (!v17 || a4[1] - *a4 != 32)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Not implemented");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v38 = *((id *)v12 + 20);
      objc_msgSend(*(id *)(v97 + 160), "kernelForFunction:cacheString:withConstants:", "v9_concat_2in_3ch", 0, 0);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setComputePipelineState:", v39);
      *(_DWORD *)(a1 + 344) = *((_DWORD *)v12 + 3) * *((_DWORD *)v12 + 2) * *((_DWORD *)v12 + 5) * *((_DWORD *)v12 + 6);
      v40 = *((_DWORD *)v12 + 4);
      v42 = v40 - 1;
      v41 = v40 < 1;
      v43 = v40 + 2;
      if (!v41)
        v43 = v42;
      *(_DWORD *)(a1 + 348) = (v43 >> 2) + 1;
      v44 = v111;
      v45 = *v111;
      v46 = (*v111)[2].i32[0];
      v47 = v46 - 1;
      v41 = v46 < 1;
      v48 = v46 + 2;
      if (!v41)
        v48 = v47;
      *(_DWORD *)(a1 + 356) = (v48 >> 2) + 1;
      v49 = v44[2][2].i32[0];
      v50 = v49 - 1;
      v41 = v49 < 1;
      v51 = v49 + 2;
      if (!v41)
        v51 = v50;
      *(_DWORD *)(a1 + 360) = (v51 >> 2) + 1;
      objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v45[20], 0, 1);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v111[2][20], 0, 2);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", v38, 0, 0);
      objc_msgSend(v8, "setBytes:length:atIndex:", v96, 68, 3);
      v52 = vadd_s32((*v111)[1], (int32x2_t)-1);
      v53 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v52, (uint32x2_t)vcltz_s32(v52), 0x1EuLL), 2uLL);
      *(_QWORD *)&v54 = v53.i32[0];
      *((_QWORD *)&v54 + 1) = v53.i32[1];
      v101 = v54;
      v102 = 1;
      v99 = vdupq_n_s64(4uLL);
      v100 = 1;
      objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v101, &v99);

    }
    else
    {
      v55 = *((id *)v12 + 20);
      v56 = (unint64_t)((char *)v112 - (char *)v25) >> 4;
      if ((int)v56 < 1)
      {
        v38 = v55;
      }
      else
      {
        v57 = 0;
        v58 = 0;
        v95 = xmmword_191A936C0;
        v38 = v55;
        do
        {
          if (v56 >= 4)
            v59 = 4;
          else
            v59 = v56;
          std::to_string(&v107, v59);
          v60 = std::string::insert(&v107, 0, "v9_concat_");
          v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v108.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          v62 = std::string::append(&v108, "in");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v110 = v62->__r_.__value_.__r.__words[2];
          v109 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          v98 = v38;
          if (v110 >= 0)
            v64 = &v109;
          else
            v64 = (__int128 *)v109;
          objc_msgSend(*(id *)(v97 + 160), "kernelForFunction:cacheString:withConstants:", v64, 0, 0, v95);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setComputePipelineState:", v65);
          *(_DWORD *)(a1 + 344) = *((_DWORD *)v12 + 3)
                                * *((_DWORD *)v12 + 2)
                                * *((_DWORD *)v12 + 5)
                                * *((_DWORD *)v12 + 6);
          v66 = *((_DWORD *)v12 + 4);
          v67 = v66 - 1;
          v41 = v66 < 1;
          v68 = v66 + 2;
          if (!v41)
            v68 = v67;
          *(_DWORD *)(a1 + 348) = (v68 >> 2) + 1;
          *(_DWORD *)(a1 + 372) = v58;
          v69 = v57;
          v70 = v111;
          if (v57 >= (unint64_t)(((char *)v112 - (char *)v111) >> 4))
          {
            v72 = 0;
          }
          else
          {
            v71 = 0;
            v72 = 0;
            v73 = 2 * v57;
            do
            {
              v74 = v70[v73];
              v75 = v74[2].i32[0];
              v76 = v75 - 1;
              v41 = v75 < 1;
              v77 = v75 + 2;
              if (v41)
                v78 = v77;
              else
                v78 = v76;
              objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v74[20], 0, v71 + 2);
              v79 = (v78 >> 2) + 1;
              switch((int)v71)
              {
                case 0:
                  *(_DWORD *)(a1 + 356) = v79;
                  v70 = v111;
                  v80 = v111[v73];
                  *(_DWORD *)(a1 + 388) = v80[31].i32[1] / 4;
                  break;
                case 1:
                  *(_DWORD *)(a1 + 360) = v79;
                  v70 = v111;
                  v80 = v111[v73];
                  *(_DWORD *)(a1 + 392) = v80[31].i32[1] / 4;
                  break;
                case 2:
                  *(_DWORD *)(a1 + 364) = v79;
                  v70 = v111;
                  v80 = v111[v73];
                  *(_DWORD *)(a1 + 396) = v80[31].i32[1] / 4;
                  break;
                case 3:
                  *(_DWORD *)(a1 + 368) = v79;
                  v70 = v111;
                  v80 = v111[v73];
                  *(_DWORD *)(a1 + 400) = v80[31].i32[1] / 4;
                  break;
                default:
                  v70 = v111;
                  v80 = v111[v73];
                  break;
              }
              if (*((_DWORD *)v12 + 2) != v80[1].i32[0] || *((_DWORD *)v12 + 3) != v80[1].i32[1])
              {
                v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v93, "Concat: inconsistent shape");
                __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v72 += v79;
              v58 += v79;
              v81 = v69 + v71 + 1;
              if (v81 >= ((char *)v112 - (char *)v70) >> 4)
                break;
              v73 += 2;
            }
            while (v71++ < 3);
            v57 = v81;
          }
          *(_DWORD *)(a1 + 352) = v72;
          objc_msgSend(v8, "setBuffer:offset:atIndex:", v98, 0, 0);
          objc_msgSend(v8, "setBytes:length:atIndex:", v96, 68, 1);
          v83 = v72 - 1;
          v84 = *(_DWORD *)(a1 + 380) - 1;
          v85 = *(_DWORD *)(a1 + 384);
          v86 = v85 - 1;
          v41 = v85 < 1;
          v87 = v85 + 2;
          if (!v41)
            v87 = v86;
          v88 = (v87 >> 2) + 1;
          if (v72 < 4)
          {
            v92 = v83 / 2 + 1;
            if (v84 < 0)
              v84 = *(_DWORD *)(a1 + 380) + 6;
            v104[0] = v92;
            v104[1] = (v84 >> 3) + 1;
            v104[2] = v88;
            v103 = v95;
            v90 = (int64x2_t *)&v103;
            v91 = v104;
          }
          else
          {
            v89 = (v83 >> 2) + 1;
            if (v84 < 0)
              v84 = *(_DWORD *)(a1 + 380) + 2;
            v106[0] = v89;
            v106[1] = (v84 >> 2) + 1;
            v106[2] = v88;
            v105 = vdupq_n_s64(4uLL);
            v90 = &v105;
            v91 = v106;
          }
          v90[1].i64[0] = 4;
          objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v91);
          if (SHIBYTE(v110) < 0)
            operator delete((void *)v109);

          v38 = *((id *)v12 + 20);
          LODWORD(v56) = ((unint64_t)((char *)v112 - (char *)v111) >> 4) - v57;
        }
        while ((int)v56 >= 1);
      }
    }

    *(_QWORD *)&v109 = &v111;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v114);
  }
}

void sub_1914FFE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  uint64_t v42;

  *(_QWORD *)(v42 - 160) = v42 - 128;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v42 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_upsample_kernel::~v9_upsample_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_upsample_kernel::__launch(int32x2_t *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int32x2_t v7;
  id v8;
  int32x2_t *v9;
  void *v10;
  const void *v11;
  int32x2_t *v12;
  const void *v13;
  id *v14;
  id v15;
  id v16;
  _BOOL4 v17;
  int32x2_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int32x2_t v36;
  int32x2_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  int32x2_t v43;
  int32x2_t v44;
  __int128 v45;
  std::runtime_error *exception;
  id v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int16 v54;
  id v55[2];

  v7 = a1[1];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v55, *a2);
  v8 = v55[0];
  if (*(_BYTE *)(*(_QWORD *)&v7 + 64))
  {
    v9 = a1 + 22;
    if (a1[24].i8[7] < 0)
      v9 = (int32x2_t *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  if (a1[36].i32[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v14[20];
  v16 = *(id *)&v12[20];
  if (v14[21])
    v17 = *(_QWORD *)&v12[21] != 0;
  else
    v17 = 0;
  v18 = a1[44];
  if (!*(_QWORD *)&v18)
  {
    v47 = v15;
    v19 = (void *)objc_opt_new();
    v20 = (void *)objc_opt_new();
    v21 = a1[35].u32[1];
    v54 = a1[35].i32[1];
    objc_msgSend(v20, "appendFormat:", CFSTR("%d:%d_"), 0, v21);
    objc_msgSend(v19, "setConstantValue:type:atIndex:", &v54, 41, 0);
    v22 = a1[36].u32[0];
    v54 = a1[36].i32[0];
    objc_msgSend(v20, "appendFormat:", CFSTR("%d:%d_"), 1, v22);
    objc_msgSend(v19, "setConstantValue:type:atIndex:", &v54, 41, 1);
    v23 = objc_retainAutorelease(v20);
    v24 = objc_msgSend(v23, "UTF8String");
    if (v17)
      v25 = "v9_upsample_tex_nearest";
    else
      v25 = "v9_upsample_nearest";
    objc_msgSend(*(id *)(*(_QWORD *)&v7 + 160), "kernelForFunction:cacheString:withConstants:", v25, v24, v19);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)a1[44];
    a1[44] = (int32x2_t)v26;

    v18 = a1[44];
    v15 = v47;
  }
  objc_msgSend(v8, "setComputePipelineState:", *(_QWORD *)&v18);
  v28 = v12[2].i32[0];
  v30 = v28 - 1;
  v29 = v28 < 1;
  v31 = v28 + 2;
  if (!v29)
    v31 = v30;
  v32 = (v31 >> 2) + 1;
  a1[45] = v12[1];
  a1[46].i32[0] = v32;
  a1[46].i32[1] = v12[2].i32[1];
  a1[47].i32[0] = *((_DWORD *)v14 + 62) / 4;
  a1[47].i32[1] = *((_DWORD *)v14 + 63) / 4;
  a1[48].i32[0] = *((_DWORD *)v14 + 65) / 4;
  a1[48].i32[1] = v12[31].i32[0] / 4;
  a1[49].i32[0] = v12[31].i32[1] / 4;
  a1[49].i32[1] = v12[32].i32[1] / 4;
  if (v17)
  {
    objc_msgSend(v8, "setTexture:atIndex:", v14[21], 0);
    objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)&v12[21], 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", &a1[45], 52, 0);
    v33 = v12[2].i32[1] * v32 * v12[3].i32[0];
    v34 = v33 - 1;
    v29 = v33 < 1;
    v35 = v33 + 2;
    if (!v29)
      v35 = v34;
    v52 = (v35 >> 2) + 1;
    v36 = vadd_s32(v12[1], (int32x2_t)-1);
    v37 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v36, (uint32x2_t)vcltz_s32(v36), 0x1EuLL), 2uLL);
    *(_QWORD *)&v38 = v37.i32[0];
    *((_QWORD *)&v38 + 1) = v37.i32[1];
    v53 = v38;
    v39 = 4;
    v51 = 4;
    v40 = &v52;
    v41 = &v51;
  }
  else
  {
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v15, 0, 0);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v16, 0, 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", &a1[45], 52, 2);
    v42 = v12[2].i32[1] * v32 * v12[3].i32[0];
    if (v42 >= 1)
      --v42;
    v43 = vadd_s32(v12[1], (int32x2_t)-1);
    v44 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v43, (uint32x2_t)vcltz_s32(v43), 0x1EuLL), 2uLL);
    *(_QWORD *)&v45 = v44.i32[0];
    *((_QWORD *)&v45 + 1) = v44.i32[1];
    v49 = v45;
    v50 = (v42 >> 1) + 1;
    v48 = 4;
    v40 = (uint64_t *)&v49;
    v41 = &v48;
    v39 = 2;
  }
  v41[1] = 4;
  v41[2] = v39;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v40);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v55);
}

void sub_191500430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 96));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_batchnorm_kernel::~v9_batchnorm_kernel(id *this)
{
  *this = &off_1E2DA5C78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 63));

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)this);
}

{
  *this = &off_1E2DA5C78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 63));

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_batchnorm_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  unsigned int *v12;
  const void *v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  _BOOL4 v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  std::runtime_error *exception;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  id v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  size_t v74;
  void *p_p;
  const void *v76;
  void *v77;
  void *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  int v87;
  BOOL v88;
  int v89;
  int v90;
  uint64_t v91;
  _BOOL4 v92;
  void *__p;
  std::__shared_weak_count *v94;
  char v95;
  id v96[2];
  _QWORD v97[3];
  _QWORD v98[3];
  id v99;
  char v100;

  v7 = *(_QWORD *)(a1 + 8);
  v91 = *a2;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v99, *a2);
  v8 = v99;
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = v12[4];
  if (v15 >= 1)
    v16 = v15 - 1;
  else
    v16 = v15 + 2;
  if (*(_DWORD *)(a1 + 308) && *(_DWORD *)(a1 + 312))
  {
    if (v14[33] && (v14[2] & 7) == 0)
    {
      v17 = 1;
      if (*((_QWORD *)v12 + 33))
        v19 = (v12[4] & 7) == 0;
      else
        v19 = 0;
      v92 = v19;
    }
    else
    {
      v17 = 0;
      v92 = 0;
    }
    v18 = (uint64_t *)(a1 + 472);
    if (!*(_QWORD *)(a1 + 472))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 4 * v15, 1, 1, 1);
      v20 = v12[4];
      v21 = (int *)__p;
      v22 = *((_QWORD *)__p + 2);
      if ((int)v20 >= 1)
      {
        v23 = (_OWORD *)*((_QWORD *)__p + 2);
        do
        {
          *v23++ = xmmword_191A932D0;
          --v20;
        }
        while (v20);
      }
      v24 = objc_msgSend(*(id *)(v7 + 144), "newBufferWithBytes:length:options:", v22, 4 * v21[2], 0);
      v25 = (void *)*v18;
      *v18 = v24;

      v26 = v94;
      if (v94)
      {
        p_shared_owners = (unint64_t *)&v94->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v15 = v12[4];
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 472))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected null pointer: bn_params");
LABEL_131:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v92 = 0;
    v17 = 0;
    v18 = (uint64_t *)(a1 + 472);
  }
  if (v15 != *((_DWORD *)v14 + 4))
  {
LABEL_126:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (k)");
    goto LABEL_131;
  }
  v29 = v12[5];
  if (v29 != *((_DWORD *)v14 + 5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (n)");
    goto LABEL_131;
  }
  v30 = v12[2];
  if (v30 != *((_DWORD *)v14 + 2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (w)");
    goto LABEL_131;
  }
  v31 = v12[3];
  if (v31 != *((_DWORD *)v14 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (h)");
    goto LABEL_131;
  }
  v32 = *(_DWORD *)(a1 + 308);
  v33 = *(_DWORD *)(a1 + 312);
  if (!v32)
  {
    if (v33)
      goto LABEL_46;
    if (*(_DWORD *)(a1 + 304) == v15)
    {
      v33 = 0;
      goto LABEL_46;
    }
    goto LABEL_126;
  }
  if (v29 != 1 && !v33)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented: only instance norm was implemented");
    goto LABEL_131;
  }
LABEL_46:
  v35 = (v16 >> 2) + 1;
  if (*(_DWORD *)(a1 + 344) != v30
    || *(_DWORD *)(a1 + 348) != v31
    || *(_DWORD *)(a1 + 304) != v15
    || *(_DWORD *)(a1 + 352) != v35
    || *(_DWORD *)(a1 + 356) != v29)
  {
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 344) = v30;
    *(_DWORD *)(a1 + 348) = v31;
    *(_DWORD *)(a1 + 304) = v15;
    *(_DWORD *)(a1 + 352) = v35;
    *(_DWORD *)(a1 + 356) = v29;
  }
  *(_DWORD *)(a1 + 400) = v30;
  *(_DWORD *)(a1 + 404) = v31;
  if (v17)
    v36 = 8;
  else
    v36 = 4;
  *(_DWORD *)(a1 + 408) = (v15 - 1) / v36 + 1;
  *(_DWORD *)(a1 + 420) = *((_DWORD *)v14 + 62) / v36;
  *(_DWORD *)(a1 + 424) = *((_DWORD *)v14 + 63) / v36;
  *(_DWORD *)(a1 + 428) = *((_DWORD *)v14 + 65) / v36;
  v37 = *((_DWORD *)v14 + 6) * v29;
  *(_DWORD *)(a1 + 412) = v37;
  *(_DWORD *)(a1 + 416) = v31 * v30 * v37;
  *(_DWORD *)(a1 + 432) = v33;
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 332);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a1 + 340);
  v38 = *(_DWORD *)(v7 + 232);
  if ((v38 & 0x80000000) == 0 && *(_DWORD *)(a1 + 364) != v38)
  {
    *(_DWORD *)(a1 + 364) = v38;
    v39 = *(void **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = 0;

    v32 = *(_DWORD *)(a1 + 308);
  }
  v40 = *(void **)(a1 + 456);
  if (!v32)
  {
    if (!v40)
    {
      objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_batchnorm_inference_kernel", 0, 0);
      v47 = objc_claimAutoreleasedReturnValue();
      v48 = *(void **)(a1 + 456);
      *(_QWORD *)(a1 + 456) = v47;

      v40 = *(void **)(a1 + 456);
    }
    objc_msgSend(v8, "setComputePipelineState:", v40);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v14[20], 0, 0);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", a1 + 400, 52, 2);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *v18, 0, 3);
    dispatch_auto_threadgroupsize(v8, v12[2], v12[3], v35, v12[6] * v12[5]);
    goto LABEL_94;
  }
  if (!v40)
  {
    v41 = (void *)objc_opt_new();
    v42 = (void *)objc_opt_new();
    v43 = objc_msgSend(*(id *)(v7 + 144), "supportsFeatureSet:", 11);
    LOWORD(__p) = v43;
    objc_msgSend(v42, "appendFormat:", CFSTR("%d:%d_"), 0, v43);
    objc_msgSend(v41, "setConstantValue:type:atIndex:", &__p, 37, 0);
    LOWORD(__p) = *(_DWORD *)(a1 + 364);
    objc_msgSend(v42, "appendFormat:", CFSTR("%d:%d_"), 1, (unsigned __int16)__p);
    objc_msgSend(v41, "setConstantValue:type:atIndex:", &__p, 41, 1);
    v44 = objc_retainAutorelease(v42);
    v45 = objc_msgSend(v44, "UTF8String");
    if (v17)
      v46 = "v9_batchnorm_training_kernel_tex8";
    else
      v46 = "v9_batchnorm_training_kernel";
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v46, v45, v41);
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = *(void **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = v49;

    v40 = *(void **)(a1 + 456);
  }
  v51 = objc_msgSend(v40, "maxTotalThreadsPerThreadgroup");
  v52 = *(_DWORD *)(a1 + 408);
  v53 = objc_msgSend(*(id *)(v7 + 144), "supportsFeatureSet:", 11);
  v54 = v53;
  if (v53)
  {
    v55 = *(_DWORD *)(a1 + 408) - 1;
    v56 = 512;
  }
  else
  {
    v55 = v52 - 2;
    v56 = 256;
  }
  v57 = v56 >> (v92 & ~(_BYTE)v53);
  if (v55 <= 1)
    v55 = 1;
  v58 = v57 / v55;
  if (v58 >= v51)
    v59 = v51;
  else
    v59 = v58;
  v60 = objc_msgSend(*(id *)(a1 + 456), "threadExecutionWidth");
  v61 = v59 / (int)objc_msgSend(*(id *)(a1 + 456), "threadExecutionWidth") * v60;
  LODWORD(v62) = v61 >> 2;
  while ((int)v62 > *(_DWORD *)(a1 + 344))
    LODWORD(v62) = v62 - objc_msgSend(*(id *)(a1 + 456), "threadExecutionWidth");
  if (v54)
    v63 = 4;
  else
    v63 = 1;
  if (v63 <= (int)v62)
    v62 = v62;
  else
    v62 = v63;
  v64 = v61 / (int)v62;
  if ((v61 / (int)v62) >= *(_DWORD *)(a1 + 348))
    v64 = *(_DWORD *)(a1 + 348);
  if (v64 <= 1)
    v65 = 1;
  else
    v65 = v64;
  objc_msgSend(v8, "setComputePipelineState:", *(_QWORD *)(a1 + 456));
  v66 = 21;
  if (v17)
    v66 = 33;
  objc_msgSend(v8, "setTexture:atIndex:", v14[v66], 0);
  objc_msgSend(v8, "setBytes:length:atIndex:", a1 + 400, 52, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 488), 0, 1);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 480), 0, 2);
  v67 = (v65 * v62);
  v68 = 4;
  if (v17)
    v68 = 5;
  v69 = v67 << v68;
  objc_msgSend(v8, "setThreadgroupMemoryLength:atIndex:", v67 << v68, 0);
  objc_msgSend(v8, "setThreadgroupMemoryLength:atIndex:", v69, 1);
  v70 = (int)v12[6] * (uint64_t)(int)v12[5];
  v98[0] = *(int *)(a1 + 408);
  v98[1] = v70;
  v98[2] = 1;
  v97[0] = v62;
  v97[1] = v65;
  v97[2] = 1;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v98, v97);
  if (*(_BYTE *)(a1 + 520))
  {
LABEL_94:
    v71 = v8;
    goto LABEL_125;
  }
  v100 = 0;
  objc_msgSend(v99, "endEncoding");
  v72 = *(void **)(v91 + 152);
  *(_QWORD *)(v91 + 152) = 0;

  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v96, v91);
  v71 = v96[0];

  if (*(_BYTE *)(v7 + 64))
  {
    v73 = (void *)MEMORY[0x1E0CB3940];
    if (*(char *)(a1 + 199) >= 0)
      v74 = *(unsigned __int8 *)(a1 + 199);
    else
      v74 = *(_QWORD *)(a1 + 184);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v74 + 10);
    if (v95 < 0)
      p_p = __p;
    if (v74)
    {
      if (*(char *)(a1 + 199) >= 0)
        v76 = (const void *)(a1 + 176);
      else
        v76 = *(const void **)(a1 + 176);
      memmove(p_p, v76, v74);
    }
    strcpy((char *)p_p + v74, "_inference");
    if (v95 >= 0)
      v77 = &__p;
    else
      v77 = __p;
    objc_msgSend(v73, "stringWithUTF8String:", v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "setLabel:", v78);

    if (v95 < 0)
      operator delete(__p);
  }
  v79 = *((_DWORD *)v14 + 4) - 1;
  if (v92)
  {
    if (v79 < 0)
      v79 = *((_DWORD *)v14 + 4) + 6;
    *(_DWORD *)(a1 + 408) = (v79 >> 3) + 1;
    v80 = *(_QWORD *)(a1 + 464);
    if (!v80)
    {
      objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_instancenorm_inference_kernel_tex8", 0, 0);
      v81 = objc_claimAutoreleasedReturnValue();
      v82 = *(void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v81;

      v80 = *(_QWORD *)(a1 + 464);
    }
    objc_msgSend(v71, "setComputePipelineState:", v80);
    objc_msgSend(v71, "setBytes:length:atIndex:", a1 + 400, 52, 0);
    objc_msgSend(v71, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 488), 0, 1);
    objc_msgSend(v71, "setTexture:atIndex:", v14[33], 0);
    v83 = v12 + 66;
  }
  else
  {
    if (v79 < 0)
      v79 = *((_DWORD *)v14 + 4) + 2;
    *(_DWORD *)(a1 + 408) = (v79 >> 2) + 1;
    v84 = *(_QWORD *)(a1 + 464);
    if (!v84)
    {
      objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_instancenorm_inference_kernel", 0, 0);
      v85 = objc_claimAutoreleasedReturnValue();
      v86 = *(void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v85;

      v84 = *(_QWORD *)(a1 + 464);
    }
    objc_msgSend(v71, "setComputePipelineState:", v84);
    objc_msgSend(v71, "setBytes:length:atIndex:", a1 + 400, 52, 0);
    objc_msgSend(v71, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 488), 0, 1);
    objc_msgSend(v71, "setTexture:atIndex:", v14[21], 0);
    v83 = v12 + 42;
  }
  objc_msgSend(v71, "setTexture:atIndex:", *v83, 1);
  v87 = v12[5] * v12[3] * v12[6];
  v89 = v87 - 1;
  v88 = v87 < 1;
  v90 = v87 + 2;
  if (!v88)
    v90 = v89;
  dispatch_auto_threadgroupsize(v71, *(_DWORD *)(a1 + 408) * v12[2], (v90 >> 2) + 1, 1u, 1);
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v96);
LABEL_125:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&v99);
}

void sub_191500FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  __cxa_free_exception(v21);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v22 - 96));
  _Unwind_Resume(a1);
}

_QWORD *Espresso::V9Engine::v9_batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _WORD *v10;
  int v11;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;

  if (*a2)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v41, *(_DWORD *)(*a2 + 8), 1, 1, 1);
    v6 = v41;
    v7 = *(_QWORD *)(v41 + 16);
    v8 = *(int *)(*a2 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(int **)(*a2 + 16);
      v10 = *(_WORD **)(v41 + 16);
      do
      {
        v11 = *v9++;
        _S0 = v11;
        __asm { FCVT            H0, S0 }
        *v10++ = _S0;
        --v8;
      }
      while (v8);
    }
    v17 = objc_msgSend(*(id *)(v4 + 144), "newBufferWithBytes:length:options:", v7, 2 * *(int *)(v6 + 8), 0);
    v18 = *(void **)(a1 + 472);
    *(_QWORD *)(a1 + 472) = v17;

    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v39, *(_DWORD *)(*a2 + 8) / 2, 1, 1, 1);
    v19 = *(_DWORD *)(*a2 + 8);
    v20 = v39;
    if (v19 <= 3)
    {
      v23 = *(_QWORD *)(v39 + 16);
    }
    else
    {
      v21 = 0;
      v22 = *(_QWORD *)(v6 + 16);
      v23 = *(_QWORD *)(v39 + 16);
      v24 = v19 & 0xFFFFFFFC;
      do
      {
        v25 = (_WORD *)(v22 + 2 * v21);
        v26 = (_WORD *)(v23 + v21);
        *v26 = *v25;
        v26[1] = v25[1];
        v21 += 4;
      }
      while (v24 != v21);
    }
    v28 = objc_msgSend(*(id *)(v4 + 144), "newBufferWithBytes:length:options:", v23, 2 * *(int *)(v20 + 8), 0);
    v29 = *(void **)(a1 + 480);
    *(_QWORD *)(a1 + 480) = v28;

    v30 = objc_msgSend(*(id *)(v4 + 144), "newBufferWithLength:options:", 4 * *(int *)(a1 + 304), 0);
    v31 = *(void **)(a1 + 488);
    *(_QWORD *)(a1 + 488) = v30;

    v32 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v42;
    if (v42)
    {
      v36 = (unint64_t *)&v42->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v27 = *a2;
  }
  else
  {
    v27 = 0;
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), v27, a2[1]);
}

void sub_1915012A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 512);
  *a2 = *(_QWORD *)(this + 504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void sub_191501468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_pool_kernel::~v9_pool_kernel(id *this)
{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_pool_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  int32x2_t *v12;
  const void *v13;
  int32x2_t *v14;
  _BOOL4 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int32x2_t v33;
  int32x2_t v34;
  __int128 v35;
  uint64_t v36;
  int32x2_t v37;
  int v38;
  int32x2_t v39;
  int8x8_t v40;
  int8x8_t v41;
  __int32 v42;
  __int32 v43;
  uint64_t v44;
  __int32 v45;
  int v46;
  id v47;
  id v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int64x2_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  int64x2_t v62;
  _QWORD v63[3];
  __int16 v64;
  id v65[2];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v65, *a2);
  v8 = v65[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = *(_QWORD *)&v12[21] && *(_QWORD *)&v14[21] && v14[3].i32[0] * v14[2].i32[1] == 1;
  v16 = *(_QWORD *)(a1 + 432);
  if (!v16)
  {
    v17 = (void *)objc_opt_new();
    v18 = (void *)objc_opt_new();
    v19 = *(unsigned int *)(a1 + 308);
    v64 = *(_DWORD *)(a1 + 308);
    objc_msgSend(v18, "appendFormat:", CFSTR("%d:%d_"), 0, v19);
    objc_msgSend(v17, "setConstantValue:type:atIndex:", &v64, 41, 0);
    v20 = *(unsigned int *)(a1 + 312);
    v64 = *(_DWORD *)(a1 + 312);
    objc_msgSend(v18, "appendFormat:", CFSTR("%d:%d_"), 1, v20);
    objc_msgSend(v17, "setConstantValue:type:atIndex:", &v64, 41, 1);
    v21 = *(unsigned int *)(a1 + 304);
    v64 = *(_DWORD *)(a1 + 304);
    objc_msgSend(v18, "appendFormat:", CFSTR("%d:%d_"), 2, v21);
    objc_msgSend(v17, "setConstantValue:type:atIndex:", &v64, 41, 2);
    v22 = *(unsigned int *)(a1 + 332);
    v64 = *(_DWORD *)(a1 + 332);
    objc_msgSend(v18, "appendFormat:", CFSTR("%d:%d_"), 3, v22);
    objc_msgSend(v17, "setConstantValue:type:atIndex:", &v64, 41, 3);
    v23 = objc_retainAutorelease(v18);
    v24 = objc_msgSend(v23, "UTF8String");
    if (v15)
      v25 = "v9_pool";
    else
      v25 = "v9_pool_buff";
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v25, v24, v17);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v26;

    v16 = *(_QWORD *)(a1 + 432);
  }
  objc_msgSend(v8, "setComputePipelineState:", v16);
  v28 = v12[2].i32[0];
  v30 = v28 - 1;
  v29 = v28 < 1;
  v31 = v28 + 2;
  if (!v29)
    v31 = v30;
  v32 = (v31 >> 2) + 1;
  v33 = v14[1];
  v34 = v12[1];
  *(int32x2_t *)&v35 = v33;
  *((int32x2_t *)&v35 + 1) = v34;
  *(_OWORD *)(a1 + 440) = v35;
  v36 = a1 + 440;
  *(_DWORD *)(a1 + 456) = v32;
  *(_DWORD *)(a1 + 460) = v12[2].i32[1];
  v37 = *(int32x2_t *)(a1 + 320);
  *(int32x2_t *)(a1 + 464) = v37;
  v38 = *(__int16 *)(a1 + 340);
  switch(v38)
  {
    case 4:
      goto LABEL_25;
    case 2:
      v41 = 0;
      break;
    case 1:
LABEL_25:
      v39 = vmax_s32(vadd_s32(vmla_s32(vneg_s32(v33), v37, vadd_s32(v34, (int32x2_t)-1)), *(int32x2_t *)(a1 + 308)), 0);
      v40 = (int8x8_t)vshr_n_u32((uint32x2_t)v39, 1uLL);
      v41 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), v40, (int8x8_t)vsub_s32(v39, (int32x2_t)v40));
      break;
    default:
      v33.i16[0] = *(_WORD *)(a1 + 348);
      v33.i16[2] = *(_WORD *)(a1 + 352);
      v41 = (int8x8_t)vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL);
      break;
  }
  *(int8x8_t *)(a1 + 472) = v41;
  *(_DWORD *)(a1 + 480) = v14[31].i32[0] / 4;
  *(_DWORD *)(a1 + 484) = v14[31].i32[1] / 4;
  *(_DWORD *)(a1 + 488) = v14[32].i32[1] / 4;
  *(_DWORD *)(a1 + 492) = v12[31].i32[0] / 4;
  *(_DWORD *)(a1 + 496) = v12[31].i32[1] / 4;
  *(_DWORD *)(a1 + 500) = v12[32].i32[1] / 4;
  if (v15)
  {
    objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)&v14[21], 0);
    objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)&v12[21], 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", v36, 64, 0);
    v42 = v12[1].i32[0];
    v43 = v12[1].i32[1];
    v45 = v12[2].i32[1];
    v44 = v12[3].i32[0];
    v46 = objc_msgSend(*(id *)(a1 + 432), "threadExecutionWidth");
    v63[0] = (v42 * v32 - 1) / v46 + 1;
    v63[1] = v45 * (uint64_t)v43 * v44;
    v63[2] = 1;
    v61 = v46;
    v62 = vdupq_n_s64(1uLL);
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v63, &v61);
  }
  else
  {
    v47 = *(id *)&v14[20];
    v48 = *(id *)&v12[20];
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v47, 0, 0);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", v48, 0, 1);
    objc_msgSend(v8, "setBytes:length:atIndex:", v36, 64, 2);
    v49 = v14[1].i32[0];
    v50 = v49 - 1;
    v29 = v49 < 1;
    v51 = v49 + 2;
    if (!v29)
      v51 = v50;
    v52 = (v51 >> 2) + 1;
    v53 = v12[1].i32[1];
    v54 = v53 - 1;
    v29 = v53 < 1;
    v55 = v53 + 2;
    if (!v29)
      v55 = v54;
    v56 = (v55 >> 2) + 1;
    v57 = v12[2].i32[1] * v32 * v12[3].i32[0];
    if (v57 >= 1)
      --v57;
    v60[0] = v52;
    v60[1] = v56;
    v60[2] = (v57 >> 1) + 1;
    v58 = vdupq_n_s64(4uLL);
    v59 = 2;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v60, &v58);

  }
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v65);
}

void sub_191501A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_pool_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::V9Engine::v9_inner_product_kernel::~v9_inner_product_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 68));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 68));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_inner_product_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  _DWORD *v12;
  const void *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  _WORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v33;
  int v34;
  std::runtime_error *exception;
  int v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  void *v45;
  const __CFString *v46;
  unsigned __int16 v47;
  void *v48;
  MTLFunctionConstantValues *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  id v65[2];
  unsigned __int16 v66;

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v65, *a2);
  v8 = v65[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  if (!*(_QWORD *)(a1 + 560))
  {
    v15 = *(_QWORD *)(a1 + 544);
    v16 = *(int *)(v15 + 8);
    v17 = *(int *)(v15 + 12);
    v18 = *(id *)(v7 + 144);
    v19 = objc_msgSend(v18, "newBufferWithLength:options:", 2 * v17 * (((v16 - 1) & 0x7FFFFFFFFFFFFFF8) + 8), 0);
    v20 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v19;

    v21 = objc_msgSend(*(id *)(a1 + 560), "contents");
    if ((_DWORD)v17)
    {
      v22 = 0;
      v23 = *(int **)(*(_QWORD *)(a1 + 544) + 16);
      do
      {
        if ((_DWORD)v16)
        {
          v24 = v23;
          v25 = (_WORD *)v21;
          v26 = v16;
          do
          {
            v27 = *v24++;
            _S0 = v27;
            __asm { FCVT            H0, S0 }
            *v25++ = _S0;
            --v26;
          }
          while (v26);
        }
        ++v22;
        v21 += ((2 * (v16 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
        v23 += v16;
      }
      while (v22 != v17);
    }

  }
  v33 = *(_QWORD *)(a1 + 688);
  v34 = v14[61];
  if (!v33)
  {
    *(_DWORD *)(a1 + 672) = v34;
    v36 = v12[61];
    *(_DWORD *)(a1 + 676) = v36;
    *(_DWORD *)(a1 + 584) = v14[5];
    *(_DWORD *)(a1 + 588) = v12[4];
    v37 = v14[4];
    if (v37 >= 0)
      v38 = v14[4];
    else
      v38 = v37 + 7;
    v39 = v38 >> 3;
    *(_DWORD *)(a1 + 604) = v38 >> 3;
    v40 = v37 - (v38 & 0xFFF8);
    *(_WORD *)(a1 + 608) = v40;
    v41 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 8);
    v43 = v41 - 1;
    v42 = v41 < 1;
    v44 = v41 + 6;
    if (!v42)
      v44 = v43;
    *(_DWORD *)(a1 + 592) = (v44 >> 3) + 1;
    if (v40 == 4)
    {
      if (((v34 | v36) & 7) == 0)
      {
        *(_DWORD *)(a1 + 596) = v34 / 8;
        *(_DWORD *)(a1 + 600) = v36 / 2;
        v45 = *(void **)(a1 + 680);
        v46 = CFSTR("v9_inner_product_kernel_width_aligned_8");
        goto LABEL_37;
      }
    }
    else if (v40)
    {
      if (((v34 | v36) & 7) == 0)
      {
        *(_DWORD *)(a1 + 604) = v39 - 1;
        *(_DWORD *)(a1 + 596) = v34 / 8;
        *(_DWORD *)(a1 + 600) = v36 / 2;
        v45 = *(void **)(a1 + 680);
        v46 = CFSTR("v9_inner_product_kernel_generic");
        goto LABEL_37;
      }
    }
    else if (!(v34 & 0xF | v36 & 7))
    {
      *(_DWORD *)(a1 + 596) = v34 / 16;
      *(_DWORD *)(a1 + 600) = v36 / 2;
      v45 = *(void **)(a1 + 680);
      v46 = CFSTR("v9_inner_product_kernel_width_aligned_16");
LABEL_37:
      *(_QWORD *)(a1 + 680) = v46;

      if (*(_DWORD *)(a1 + 316))
      {
        v47 = 0;
      }
      else if (*(_DWORD *)(a1 + 320))
      {
        v47 = 1;
      }
      else
      {
        v47 = -1;
      }
      v48 = (void *)objc_opt_new();
      objc_msgSend(v48, "appendString:", *(_QWORD *)(a1 + 680));
      v49 = (MTLFunctionConstantValues *)objc_opt_new();
      v66 = v47;
      objc_msgSend(v48, "appendFormat:", CFSTR("%d:%d_"), 0, v47);
      -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v49, "setConstantValue:type:atIndex:", &v66, 41, 0);
      v50 = *(unsigned int *)(a1 + 312);
      v66 = *(_DWORD *)(a1 + 312);
      objc_msgSend(v48, "appendFormat:", CFSTR("%d:%d_"), 1, v50);
      -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v49, "setConstantValue:type:atIndex:", &v66, 41, 1);
      v51 = *(unsigned int *)(a1 + 348);
      v66 = *(_DWORD *)(a1 + 348);
      objc_msgSend(v48, "appendFormat:", CFSTR("%d:%d_"), 2, v51);
      -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v49, "setConstantValue:type:atIndex:", &v66, 41, 2);
      v52 = *(id *)(v7 + 144);
      v53 = objc_msgSend(v52, "newBufferWithBytes:length:options:", a1 + 584, 28, 0);
      v54 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v53;

      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, *(NSString **)(a1 + 680), (NSString *)v48, v49);
      v55 = objc_claimAutoreleasedReturnValue();
      v56 = *(void **)(a1 + 688);
      *(_QWORD *)(a1 + 688) = v55;

      LODWORD(v57) = *(_DWORD *)(a1 + 584);
      if (v57 >= 8)
        v57 = 8;
      else
        v57 = v57;
      *(_QWORD *)(a1 + 632) = v57;
      v58 = objc_msgSend(*(id *)(a1 + 688), "threadExecutionWidth");
      v59 = *(_QWORD *)(a1 + 632);
      v60 = (v58 - 1) / v59 + 1;
      *(_QWORD *)(a1 + 624) = v60;
      *(_QWORD *)(a1 + 648) = ((unint64_t)*(unsigned int *)(a1 + 588) - 1) / v60 + 1;
      *(_QWORD *)(a1 + 656) = ((unint64_t)*(unsigned int *)(a1 + 584) - 1) / v59 + 1;

      v33 = *(_QWORD *)(a1 + 688);
      goto LABEL_46;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid alignment in inner product.");
LABEL_23:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v34 != *(_DWORD *)(a1 + 672) || v12[61] != *(_DWORD *)(a1 + 676))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Stride changed between invokations of inner product.");
    goto LABEL_23;
  }
LABEL_46:
  objc_msgSend(v8, "setComputePipelineState:", v33);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 560), 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v14 + 20), 0, 1);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 576), 0, 2);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 3);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 616), 0, 4);
  v64 = *(_QWORD *)(a1 + 664);
  v63 = *(_OWORD *)(a1 + 648);
  v61 = *(_OWORD *)(a1 + 624);
  v62 = *(_QWORD *)(a1 + 640);
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v63, &v61);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v65);
}

void sub_19150214C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;

  __cxa_free_exception(v19);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a18);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_inner_product_kernel::clear_weights(Espresso::V9Engine::v9_inner_product_kernel *this)
{
  void *v2;

  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 68);
  v2 = (void *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;

}

void Espresso::V9Engine::v9_inner_product_kernel::on_resized(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;

  v3 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;

}

void Espresso::V9Engine::v9_inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v6;
  id *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  std::runtime_error *exception;
  id v17;
  id v18;

  v3 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  if (v3)
  {
    v4 = *(const void **)(a1 + 8);
    if (!v4
      || (v6 = *(int *)(v3 + 8),
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = v7[18];
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        v17 = v11;
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v11 = v17;
      }
    }
    else
    {
      v11 = v7[18];
    }
    *(_QWORD *)(a1 + 568) = v6;
    v18 = v11;
    v14 = objc_msgSend(v11, "newBufferWithLength:options:", (4 * v6 + 12) & 0xFFFFFFFFFFFFFFF0, 0);
    v15 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = v14;

    memcpy((void *)objc_msgSend(*(id *)(a1 + 576), "contents"), *(const void **)(*a2 + 16), 4 * v6);
    v13 = v18;
  }
  else
  {
    *(_QWORD *)(a1 + 568) = -1;
    v13 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;
  }

}

void sub_191502394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  __int128 v8;

  v3 = *a2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v8, (int *)(*a2 + 8));
  memcpy(*(void **)(v8 + 16), *(const void **)(v3 + 16), 4 * *(int *)(v3 + 8) * (uint64_t)*(int *)(v3 + 12));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 544, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

}

char *Espresso::V9Engine::v9_inner_product_kernel::get_biases@<X0>(id *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  id v6;
  char *result;

  v4 = objc_msgSend(this[72], "contents");
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DBEC00;
  v6 = this[71];
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_DWORD *)v5 + 8) = (_DWORD)v6;
  *((_QWORD *)v5 + 5) = v4;
  v5[48] = 0;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &off_1E2DA1190;
  result = v5 + 24;
  *a2 = result;
  return result;
}

uint64_t Espresso::V9Engine::v9_inner_product_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 552);
  *a2 = *(_QWORD *)(this + 544);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::V9Engine::v9_softmax_kernel::~v9_softmax_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_softmax_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  _DWORD *v12;
  const void *v13;
  _DWORD *v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  id v36[2];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v36, *a2);
  v8 = v36[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_softmax_4", 0, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setComputePipelineState:", v15);
  v16 = v12[4];
  v17 = v16 - 1;
  if (v16 < 1)
    v17 = v16 + 2;
  v35 = 1065353216;
  v18 = *((_QWORD *)v12 + 1);
  v19 = v12[5];
  v26 = (v17 >> 2) + 1;
  v27 = v19;
  v34 = v16;
  v20 = v14[63];
  v28 = v14[62] / 4;
  v29 = v20 / 4;
  v21 = v14[65];
  v22 = v12[62];
  v23 = v12[63];
  v25 = v18;
  v30 = v21 / 4;
  v31 = v22 / 4;
  v24 = v12[65];
  v32 = v23 / 4;
  v33 = v24 / 4;
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v14 + 20), 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", &v25, 52, 2);
  dispatch_auto_threadgroupsize(v8, v12[2], v12[3], v26, v12[6] * v12[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v36);
}

void sub_1915027A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_softmax_kernel::force_high_precision_output_f32(Espresso::V9Engine::v9_softmax_kernel *this)
{
  return 0;
}

void Espresso::V9Engine::v9_flatten_kernel::~v9_flatten_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_flatten_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  _DWORD *v12;
  const void *v13;
  _DWORD *v14;
  const char *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  _DWORD v42[2];
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  id v54[2];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v54, *a2);
  v8 = v54[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  if (*(_DWORD *)(a1 + 280))
    v15 = "v9_flatten_nhwc";
  else
    v15 = "v9_flatten_nchw";
  objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v15, 0, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setComputePipelineState:", v16);
  v17 = v14[2];
  v18 = v14[3];
  v42[0] = v17;
  v42[1] = v18;
  v43 = *((_QWORD *)v14 + 2);
  v19 = v43 + 2;
  if ((int)v43 >= 1)
    v19 = v43 - 1;
  v44 = (v19 >> 2) + 1;
  v45 = v18 * v17;
  v20 = v12[4];
  v21 = v20 - 1;
  if (v20 < 1)
    v21 = v20 + 2;
  v52 = (v21 >> 2) + 1;
  v53 = v12[6] * v20 * v12[5] * v12[2] * v12[3];
  v22 = v14[63];
  v46 = v14[62] / 4;
  v47 = v22 / 4;
  v23 = v12[62];
  v24 = v12[63];
  v48 = v14[65] / 4;
  v49 = v23 / 4;
  v25 = v12[65];
  v50 = v24 / 4;
  v51 = v25 / 4;
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v14 + 20), 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", v42, 56, 2);
  if (*(_DWORD *)(a1 + 280))
  {
    v26 = v53 + 62;
    if (v53 >= 1)
      v26 = v53 - 1;
    v27 = (v26 >> 6) + 1;
    v28 = 1;
    v35 = v27;
    v36 = vdupq_n_s64(1uLL);
    v34 = 64;
    v29 = &v35;
    v30 = &v34;
LABEL_30:
    v30[1] = v28;
    v30[2] = 1;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v29);
    goto LABEL_31;
  }
  if (HIDWORD(v43) == 1)
  {
    v31 = v52 + 62;
    if (v52 >= 1)
      v31 = v52 - 1;
    v32 = (v31 >> 6) + 1;
    v28 = 1;
    v40 = v32;
    v41 = vdupq_n_s64(1uLL);
    v39 = 64;
    v29 = &v40;
    v30 = &v39;
    goto LABEL_30;
  }
  if (SHIDWORD(v43) >= 2)
  {
    v33 = v52 + 30;
    if (v52 >= 1)
      v33 = v52 - 1;
    v38[0] = (v33 >> 5) + 1;
    v38[1] = ((HIDWORD(v43) - 1) >> 1) + 1;
    v38[2] = 1;
    v37 = 32;
    v29 = v38;
    v30 = &v37;
    v28 = 2;
    goto LABEL_30;
  }
LABEL_31:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v54);
}

void sub_191502BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_activation_kernel::~v9_activation_kernel(id *this)
{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_activation_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  int32x2_t *v12;
  const void *v13;
  id *v14;
  id v15;
  id v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int32x2_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int32x2_t v31;
  int32x2_t v32;
  __int128 v33;
  std::runtime_error *exception;
  int64x2_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int32x2_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48[2];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v48, *a2);
  v8 = v48[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = v14[20];
  v16 = *(id *)&v12[20];
  v17 = *(_QWORD *)(a1 + 392);
  if (!v17)
  {
    v18 = *(_DWORD *)(a1 + 304) + 1;
    if (v18 >= 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", off_1E2DD3D68[v18], 0, 0);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(void **)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v19;

    v17 = *(_QWORD *)(a1 + 392);
  }
  objc_msgSend(v8, "setComputePipelineState:", v17);
  v46 = 0;
  v45 = 0;
  v21 = v12[2].i32[0];
  v23 = v21 - 1;
  v22 = v21 < 1;
  v24 = v21 + 2;
  if (!v22)
    v24 = v23;
  v25 = (v24 >> 2) + 1;
  v26 = v12[1];
  v27 = v12[3].i32[0] * v12[2].i32[1];
  v40 = v25;
  v41 = v27;
  v28 = *((_DWORD *)v14 + 62);
  v29 = *((_DWORD *)v14 + 63);
  v39 = v26;
  v42 = v28 / 4;
  v43 = v29 / 4;
  v44 = *((_DWORD *)v14 + 65) / 4;
  v47 = *(_QWORD *)(a1 + 308);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v15, 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v16, 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", &v39, 52, 2);
  v30 = v12[2].i32[1] * v25 * v12[3].i32[0];
  if (v30 >= 1)
    --v30;
  v31 = vadd_s32(v12[1], (int32x2_t)-1);
  v32 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v31, (uint32x2_t)vcltz_s32(v31), 0x1EuLL), 2uLL);
  *(_QWORD *)&v33 = v32.i32[0];
  *((_QWORD *)&v33 + 1) = v32.i32[1];
  v37 = v33;
  v38 = (v30 >> 1) + 1;
  v35 = vdupq_n_s64(4uLL);
  v36 = 2;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v37, &v35);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v48);
}

void sub_191502F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  __cxa_free_exception(v4);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v5 - 80));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_general_padding_kernel::~v9_general_padding_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_general_padding_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  int32x2_t *v12;
  const void *v13;
  id *v14;
  id v15;
  id v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  __int32 v28;
  int v29;
  int v30;
  __int32 v31;
  int v32;
  int v33;
  int v34;
  int32x2_t v35;
  int32x2_t v36;
  __int128 v37;
  id v38;
  id v39;
  int64x2_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int32x2_t v44;
  int v45;
  __int32 v46;
  id v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  id v55[3];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v55, *a2);
  v8 = v55[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = v14[20];
  v16 = *(id *)&v12[20];
  v17 = v16;
  v18 = v12[2].i32[0] & 7;
  if (v18)
    v19 = 4;
  else
    v19 = 8;
  v20 = *(_QWORD *)(a1 + 360);
  if (!v20)
  {
    v38 = v16;
    v39 = v15;
    v21 = (void *)objc_opt_new();
    v22 = (void *)objc_opt_new();
    v44.i16[0] = *(_WORD *)(a1 + 282);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 0, v44.i16[0]);
    objc_msgSend(v21, "setConstantValue:type:atIndex:", &v44, 37, 0);
    v44.i16[0] = *(_WORD *)(a1 + 288);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 1, v44.i16[0]);
    objc_msgSend(v21, "setConstantValue:type:atIndex:", &v44, 37, 1);
    v44.i16[0] = *(_WORD *)(a1 + 292);
    objc_msgSend(v22, "appendFormat:", CFSTR("%d:%d_"), 2, v44.i16[0]);
    objc_msgSend(v21, "setConstantValue:type:atIndex:", &v44, 37, 2);
    v23 = objc_retainAutorelease(v22);
    v24 = objc_msgSend(v23, "UTF8String");
    if (v18)
      v25 = "v9_general_padding_4";
    else
      v25 = "v9_general_padding_8";
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v25, v24, v21);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v26;

    v20 = *(_QWORD *)(a1 + 360);
    v17 = v38;
    v15 = v39;
  }
  objc_msgSend(v8, "setComputePipelineState:", v20);
  v28 = v12[2].i32[1];
  v29 = (v12[2].i32[0] - 1) / v19 + 1;
  v44 = v12[1];
  v45 = v29;
  v46 = v28;
  v47 = v14[1];
  v30 = *((_DWORD *)v14 + 63) / v19;
  v48 = *((_DWORD *)v14 + 62) / v19;
  v49 = v30;
  v31 = v12[31].i32[1];
  v32 = v12[31].i32[0] / v19;
  v50 = *((_DWORD *)v14 + 65) / v19;
  v51 = v32;
  v33 = v12[32].i32[1] / v19;
  v52 = v31 / v19;
  v53 = v33;
  v54 = *(_DWORD *)(a1 + 284);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v15, 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v17, 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", &v44, 52, 2);
  v34 = v12[2].i32[1] * v29 * v12[3].i32[0];
  if (v34 >= 1)
    --v34;
  v35 = vadd_s32(v12[1], (int32x2_t)-1);
  v36 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v35, (uint32x2_t)vcltz_s32(v35), 0x1EuLL), 2uLL);
  *(_QWORD *)&v37 = v36.i32[0];
  *((_QWORD *)&v37 + 1) = v36.i32[1];
  v42 = v37;
  v43 = (v34 >> 1) + 1;
  v40 = vdupq_n_s64(4uLL);
  v41 = 2;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v42, &v40);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v55);
}

void sub_191503348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  uint64_t v14;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_lrn_kernel::~v9_lrn_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_lrn_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  void *v14;
  const void *v15;
  _DWORD *v16;
  const void *v17;
  _DWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  std::runtime_error *exception;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  id v47[2];

  v4 = *(_DWORD *)(a1 + 288);
  v5 = v4 > 7;
  v6 = (1 << v4) & 0xA8;
  if (v5 || v6 == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LRN with size!=(3,5,7) not implemented");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v47, *a2);
  v12 = v47[0];
  if (*(_BYTE *)(v11 + 64))
  {
    v13 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v13 = (_QWORD *)*v13;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setLabel:", v14);

  }
  v15 = **a3;
  if (v15)
  else
    v16 = 0;
  v17 = **a4;
  if (v17)
  else
    v18 = 0;
  v19 = *(_QWORD *)(a1 + 312);
  if (!v19)
  {
    v20 = (void *)objc_opt_new();
    v21 = (void *)objc_opt_new();
    v22 = *(unsigned int *)(a1 + 288);
    LOWORD(v35) = *(_DWORD *)(a1 + 288);
    objc_msgSend(v21, "appendFormat:", CFSTR("%d:%d_"), 0, v22);
    objc_msgSend(v20, "setConstantValue:type:atIndex:", &v35, 37, 0);
    v23 = objc_retainAutorelease(v21);
    objc_msgSend(*(id *)(v11 + 160), "kernelForFunction:cacheString:withConstants:", "v9_lrn_anysize_4", objc_msgSend(v23, "UTF8String"), v20);
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v24;

    v19 = *(_QWORD *)(a1 + 312);
  }
  objc_msgSend(v12, "setComputePipelineState:", v19);
  v26 = v16[4];
  v27 = v26 - 1;
  if (v26 < 1)
    v27 = v26 + 2;
  v45 = *(_QWORD *)(a1 + 280);
  v35 = *((_QWORD *)v16 + 1);
  v28 = v16[5];
  v36 = (v27 >> 2) + 1;
  v37 = v28;
  v29 = *(_DWORD *)(a1 + 288);
  v44 = v26;
  v46 = v29;
  v30 = v18[63];
  v38 = v18[62] / 4;
  v39 = v30 / 4;
  v31 = v16[62];
  v32 = v16[63];
  v40 = v18[65] / 4;
  v41 = v31 / 4;
  v33 = v16[65];
  v42 = v32 / 4;
  v43 = v33 / 4;
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 0);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v16 + 21), 1);
  objc_msgSend(v12, "setBytes:length:atIndex:", &v35, 56, 0);
  dispatch_auto_threadgroupsize(v12, v36 * v16[2], v16[5] * v16[3] * v16[6], 1u, 1);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v47);
}

void sub_191503724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_split_kernel::~v9_split_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_crop_kernel::~v9_crop_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_noise_kernel::~v9_noise_kernel(id *this)
{

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
}

{

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_noise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  const void *v9;
  id *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  __int128 v32;
  id v33[2];

  v5 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v33, *a2);
  v6 = v33[0];
  if (*(_BYTE *)(v5 + 64))
  {
    v7 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v7 = (_QWORD *)*v7;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setLabel:", v8);

  }
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = v10[21];
  v12 = *(_QWORD *)(a1 + 384);
  if (!v12)
  {
    objc_msgSend(*(id *)(v5 + 160), "kernelForFunction:cacheString:withConstants:", "image2image_noise_f", 0, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(void **)(a1 + 384);
    *(_QWORD *)(a1 + 384) = v13;

    v12 = *(_QWORD *)(a1 + 384);
  }
  objc_msgSend(v6, "setComputePipelineState:", v12);
  v32 = *(_OWORD *)(a1 + 392);
  v15 = *((_DWORD *)v10 + 4);
  v17 = v15 - 1;
  v16 = v15 < 1;
  v18 = v15 + 2;
  if (v16)
    v19 = v18;
  else
    v19 = v17;
  *(_QWORD *)&v32 = v10[1];
  objc_msgSend(v6, "setTexture:atIndex:", v11, 0);
  objc_msgSend(v6, "setBytes:length:atIndex:", &v32, 16, 0);
  v20 = *((_DWORD *)v10 + 2);
  v21 = *((_DWORD *)v10 + 3);
  v22 = v20 - 1;
  v16 = v20 < 1;
  v23 = v20 + 6;
  if (!v16)
    v23 = v22;
  v24 = (v23 >> 3) + 1;
  v25 = v21 - 1;
  v16 = v21 < 1;
  v26 = v21 + 2;
  if (!v16)
    v26 = v25;
  v27 = *((_DWORD *)v10 + 5);
  v28 = *((int *)v10 + 6);
  v31[0] = v24;
  v31[1] = (v26 >> 2) + 1;
  v31[2] = v27 * (uint64_t)((v19 >> 2) + 1) * v28;
  v29 = xmmword_191A935C0;
  v30 = 1;
  objc_msgSend(v6, "dispatchThreadgroups:threadsPerThreadgroup:", v31, &v29);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v33);
}

void sub_191503A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void sub_191503D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191503E1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191504558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1915045D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::mps_convolution_kernel::~mps_convolution_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::mps_convolution_kernel::__launch(int32x2_t *a1, uint64_t a2, uint64_t **a3, const void ***a4)
{
  uint64_t v8;
  const void **v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void **v19;
  int32x2_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  id v29;
  id v30;
  EspressoTrainingConvolutionWeightsForMPS *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  EspressoTrainingConvolutionWeightsForMPS *v40;
  int v41;
  int v42;
  void *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t **v53;
  id *v54;
  _BOOL8 v55;
  id v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  const void *v72;
  int32x2_t *v73;
  int32x2_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  const void **v78;
  const void *v79;
  int32x2_t *v80;
  int32x2_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int32x2_t v87;
  int v88;
  int32x2_t v89;
  int32x2_t v90;
  int8x8_t v91;
  int8x8_t v92;
  int v93;
  int v94;
  void *v95;
  uint64_t v96;
  __int32 v97;
  int v98;
  void *v99;
  std::__shared_weak_count *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  const void *v107;
  _BYTE *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int32x2_t *v112;
  unint64_t v113;
  int32x2_t *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  int32x2_t *v118;
  uint64_t v119;
  uint64_t i;
  void *v121;
  uint64_t v122;
  int32x2_t *v123;
  void *v124;
  void *v125;
  int32x2_t *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  id v130;
  int32x2_t *v131;
  id v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  id v137;
  int32x2_t v138;
  id v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  const void **v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::runtime_error *v155;
  std::runtime_error *exception;
  int8x8_t v157;
  std::__shared_weak_count *v158;
  _QWORD v159[3];
  _BYTE *v160;
  std::__shared_weak_count *v161;
  int v162;
  void *__p;
  void *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  int32x2_t *v176;
  std::__shared_weak_count *v177;
  id *v178;
  std::__shared_weak_count *v179;

  if (!*(_QWORD *)&a1[74] || *(_DWORD *)(*(_QWORD *)&a1[73] + 68) != a1[45].i32[1])
    (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 624))(a1);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11)
  {
    v8 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 384))(a1);
    v178 = 0;
    v179 = 0;
    v176 = 0;
    v177 = 0;
    {
      v9 = *a4;
      v10 = (id *)(*a4)[2];
      if (v10)
      {
        if (v10)
        {
          v11 = (std::__shared_weak_count *)v9[3];
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
            v178 = v10;
            v179 = v11;
LABEL_41:
            v28 = 0;
            goto LABEL_42;
          }
        }
      }
      goto LABEL_34;
    }
    {
      {
        v24 = *a4;
        v10 = (id *)(*a4)[4];
        if (v10)
        {
          if (v10)
          {
            v25 = (std::__shared_weak_count *)v24[5];
            if (v25)
            {
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
              v178 = v10;
              v179 = v25;
              goto LABEL_41;
            }
          }
        }
LABEL_34:
        v28 = 0;
        v178 = v10;
        v179 = 0;
        if (!v10)
          goto LABEL_40;
LABEL_42:
        v29 = v10[21];
        goto LABEL_43;
      }
      {
        v151 = *a4;
        v10 = (id *)(*a4)[2];
        if (v10)
        {
          if (v10)
          {
            v152 = (std::__shared_weak_count *)v151[3];
            if (v152)
            {
              v153 = (unint64_t *)&v152->__shared_owners_;
              do
                v154 = __ldxr(v153);
              while (__stxr(v154 + 1, v153));
              v178 = v10;
              v179 = v152;
              v28 = 1;
              goto LABEL_42;
            }
          }
        }
        v178 = v10;
        v179 = 0;
        v28 = 1;
        if (v10)
          goto LABEL_42;
LABEL_40:
        v29 = 0;
LABEL_43:
        if (v176)
          v30 = *(id *)&v176[21];
        else
          v30 = 0;
        if (!*(_QWORD *)&a1[74] || a1[76].i8[0])
        {
          v31 = [EspressoTrainingConvolutionWeightsForMPS alloc];
          v32 = *(_OWORD *)v8;
          v33 = *(_OWORD *)(v8 + 32);
          v166 = *(_OWORD *)(v8 + 16);
          v167 = v33;
          v165 = v32;
          v34 = *(_OWORD *)(v8 + 48);
          v35 = *(_OWORD *)(v8 + 64);
          v36 = *(_OWORD *)(v8 + 96);
          v170 = *(_OWORD *)(v8 + 80);
          v171 = v36;
          v168 = v34;
          v169 = v35;
          v37 = *(_OWORD *)(v8 + 112);
          v38 = *(_OWORD *)(v8 + 128);
          v39 = *(_OWORD *)(v8 + 144);
          v175 = *(_QWORD *)(v8 + 160);
          v173 = v38;
          v174 = v39;
          v172 = v37;
          v40 = -[EspressoTrainingConvolutionWeightsForMPS initWithParams:forMode:](v31, "initWithParams:forMode:", &v165, *(unsigned __int8 *)(*(_QWORD *)&a1[1] + 114));
          -[EspressoTrainingConvolutionWeightsForMPS setWeightsBuffer:](v40, "setWeightsBuffer:", v29);
          -[EspressoTrainingConvolutionWeightsForMPS setBiasesBuffer:](v40, "setBiasesBuffer:", v30);
          if (v178)
          {
            v41 = (*((uint64_t (**)(id *))*v178 + 4))(v178);
            v42 = 268435472;
            if (v41 != 1)
              v42 = 268435488;
          }
          else
          {
            v42 = 268435488;
          }
          v40->super.data_type = v42;
          objc_storeStrong((id *)&a1[73], v40);
          (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 624))(a1);
          a1[76].i8[0] = 0;

        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
        if (!v30)
        {
          v43 = (void *)a1[75];
          if (!v43)
          {
            Espresso::abstract_blob_container::shape((char *)&v160, **a3);
            v44 = v162 > 3 || v162 == -1;
            v45 = 8;
            if (v44)
              v45 = 16;
            v46 = *(int *)(**a3 + v45);
            if (__p)
            {
              v164 = __p;
              operator delete(__p);
            }
            objc_msgSend(v29, "device");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = objc_msgSend(v47, "newBufferWithLength:options:", 4 * v46, 0);
            v49 = (void *)a1[75];
            a1[75] = (int32x2_t)v48;

            v43 = (void *)a1[75];
          }
          v30 = v43;
        }
        v50 = objc_alloc(MEMORY[0x1E0CC6CD8]);
        v51 = v50;
        if ((v28 & 1) != 0)
        {
          v52 = a2;
          v53 = a3;
          v54 = v178;
          v55 = *((_BYTE *)v178[9] + 114) == 0;
          v56 = v50;
          if ((*((unsigned int (**)(id *))*v54 + 4))(v54) == 1)
            v57 = 268435472;
          else
            v57 = 268435488;
          v58 = (void *)objc_msgSend(v56, "initWithWeights:biases:weightsDataType:weightsLayout:", v29, v30, v57, v55);
          a3 = v53;
          a2 = v52;
        }
        else
        {
          v58 = (void *)objc_msgSend(v50, "initWithWeights:biases:", v29, v30);
        }

        v60 = *(std::__shared_weak_count **)(a2 + 8);
        v160 = v59;
        v161 = v60;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        objc_msgSend(*(id *)&a1[74], "reloadWeightsAndBiasesWithCommandBuffer:state:", v59[18], v58);
        if (v60)
        {
          v63 = (unint64_t *)&v60->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }

        v65 = v177;
        if (v177)
        {
          v66 = (unint64_t *)&v177->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = v179;
        if (v179)
        {
          v69 = (unint64_t *)&v179->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        goto LABEL_89;
      }
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v165, (void *)(*a4)[2], (uint64_t)(*a4)[3]);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v178, &v165);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v165);
      if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x21)
        v165 = 0uLL;
      else
        std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v165, (void *)(*a4)[4], (uint64_t)(*a4)[5]);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v176, &v165);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v165);
      v28 = 1;
LABEL_39:
      v10 = v178;
      if (v178)
        goto LABEL_42;
      goto LABEL_40;
    }
    v14 = *a4;
    v15 = (id *)(*a4)[2];
    if (v15
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v178 = v15;
      v179 = v16;
    }
    else
    {
      v178 = v15;
      v179 = 0;
    }
    v19 = *a4;
    if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x21)
    {
      v20 = 0;
    }
    else
    {
      v20 = (int32x2_t *)v19[4];
      if (v20)
      {
        if (v20)
        {
          v21 = (std::__shared_weak_count *)v19[5];
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          goto LABEL_38;
        }
      }
    }
    v21 = 0;
LABEL_38:
    v176 = v20;
    v177 = v21;
    v28 = 0;
    goto LABEL_39;
  }
LABEL_89:
  if (!*(_QWORD *)&a1[74])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v71 = *a3;
  v72 = (const void *)**a3;
  if (v72
  {
    v74 = v73;
    v75 = v71[1];
    v178 = (id *)v73;
    v179 = (std::__shared_weak_count *)v75;
    if (v75)
    {
      v76 = (unint64_t *)(v75 + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
  }
  else
  {
    v74 = 0;
    v178 = 0;
    v179 = 0;
  }
  v78 = *a4;
  v79 = **a4;
  if (v79
  {
    v81 = v80;
    v82 = (std::__shared_weak_count *)v78[1];
    v176 = v80;
    v177 = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
  }
  else
  {
    v81 = 0;
    v176 = 0;
    v177 = 0;
  }
  v85.i32[0] = a1[50].i16[0];
  v85.i32[1] = a1[50].i16[1];
  v86 = vmax_s32(v85, (int32x2_t)0x100000001);
  v87 = vmla_s32((int32x2_t)0x100000001, vadd_s32(a1[44], (int32x2_t)-1), v86);
  v88 = a1[47].i16[0];
  switch(v88)
  {
    case 4:
      goto LABEL_107;
    case 2:
      v92 = 0;
      break;
    case 1:
LABEL_107:
      v89.i32[0] = a1[49].i16[2];
      v89.i32[1] = a1[49].i16[3];
      v90 = vmax_s32(vsub_s32(vmla_s32(v87, vadd_s32(v74[1], (int32x2_t)-1), v89), v81[1]), 0);
      v91 = (int8x8_t)vshr_n_u32((uint32x2_t)v90, 1uLL);
      v92 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[47].u16[0] == 1), 0x1FuLL)), v91, (int8x8_t)vsub_s32(v90, (int32x2_t)v91));
      break;
    default:
      v86.i16[0] = a1[48].i16[0];
      v86.i16[2] = a1[48].i16[2];
      v92 = (int8x8_t)vshr_n_s32(vshl_n_s32(v86, 0x10uLL), 0x10uLL);
      break;
  }
  v157 = v92;
  if (v87.i32[0] >= 0)
    v93 = v87.i32[0];
  else
    v93 = v87.i32[0] + 1;
  if (v87.i32[1] >= 0)
    v94 = v87.i32[1];
  else
    v94 = v87.i32[1] + 1;
  v95 = (void *)a1[74];
  if (v95)
  {
    objc_msgSend(v95, "offset");
    v96 = v165;
  }
  else
  {
    v96 = 0;
    v165 = 0uLL;
    *(_QWORD *)&v166 = 0;
  }
  v97 = (v93 >> 1) - v157.i32[0];
  v98 = (v94 >> 1) - v157.i32[1];
  if (v96 != v97
    || ((v99 = (void *)a1[74]) == 0 ? (v100 = 0) : (objc_msgSend(v99, "offset"), v100 = v161),
        v100 != (std::__shared_weak_count *)v98))
  {
    v101 = (void *)a1[74];
    v159[0] = v97;
    v159[1] = v98;
    v159[2] = 0;
    objc_msgSend(v101, "setOffset:", v159, *(_QWORD *)&v157);
  }
  if (*(_QWORD *)a2
  {
    v103 = v102;
    v104 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v165 = v102;
    *((_QWORD *)&v165 + 1) = v104;
    if (v104)
    {
      v105 = (unint64_t *)(v104 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
  }
  else
  {
    v103 = 0;
    v165 = 0uLL;
  }
  v107 = (const void *)a1[1];
  if (!v107
  {
    v160 = 0;
    v161 = 0;
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "Espresso: wrong_context_type");
    v155->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v109 = (std::__shared_weak_count *)a1[2];
  v160 = v108;
  v161 = v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v158 = v109;
  v112 = a1;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11)
  {
    v113 = objc_msgSend(*(id *)&v74[32], "count");
    v114 = v81;
    v115 = (void *)a1[74];
    if (v113 >= 2)
    {
      objc_msgSend(*(id *)&a1[74], "resultStateBatchForSourceImage:sourceStates:destinationImage:", *(_QWORD *)&v114[32], 0, *(_QWORD *)&v74[32]);
      v116 = objc_claimAutoreleasedReturnValue();
      v117 = (void *)a1[78];
      a1[78] = (int32x2_t)v116;

      objc_msgSend(*(id *)&a1[74], "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationImages:", v103[18], *(_QWORD *)&v114[32], *(_QWORD *)&a1[78], *(_QWORD *)&v74[32]);
      goto LABEL_151;
    }
    v130 = *(id *)&v114[30];
    v131 = v74;
    v132 = *(id *)&v74[30];
    objc_msgSend(v115, "resultStateForSourceImage:sourceStates:destinationImage:", v130, 0, v132);
    v133 = objc_claimAutoreleasedReturnValue();
    v134 = (void *)a1[77];
    a1[77] = (int32x2_t)v133;

    v135 = (void *)a1[74];
    v136 = v103[18];
    v137 = *(id *)&v114[30];
    v138 = a1[77];
    v139 = *(id *)&v131[30];
    objc_msgSend(v135, "encodeToCommandBuffer:sourceImage:destinationState:destinationImage:", v136, v137, *(_QWORD *)&v138, v139);
LABEL_150:

    goto LABEL_151;
  }
  if (!v108[113] || !v81[29].i8[4])
  {
    v126 = v74;
    v127 = objc_msgSend(*(id *)&v74[32], "count", v109);
    v128 = (void *)a1[74];
    v129 = v103[18];
    if (v127 >= 2)
    {
      objc_msgSend(*(id *)&v112[74], "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v103[18], *(_QWORD *)&v81[32], *(_QWORD *)&v126[32]);
      goto LABEL_151;
    }
    v137 = *(id *)&v81[30];
    v139 = *(id *)&v126[30];
    objc_msgSend(v128, "encodeToCommandBuffer:sourceImage:destinationImage:", v129, v137, v139);
    goto LABEL_150;
  }
  v118 = v74;
  v119 = objc_msgSend(*(id *)&v81[32], "count");
  if (v119)
  {
    for (i = 0; i != v119; ++i)
    {
      v121 = (void *)v112[74];
      v122 = v103[18];
      v123 = v81;
      objc_msgSend(*(id *)&v81[32], "objectAtIndexedSubscript:", i, v158);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)&v118[32], "objectAtIndexedSubscript:", i);
      v125 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "encodeToCommandBuffer:sourceImage:destinationImage:", v122, v124, v125);

      v81 = v123;
    }
  }
LABEL_151:
  ++*((_DWORD *)v103 + 65);
  if (v158)
  {
    v140 = (unint64_t *)&v158->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v177;
  if (v177)
  {
    v146 = (unint64_t *)&v177->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v179;
  if (v179)
  {
    v149 = (unint64_t *)&v179->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
}

void sub_19150579C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::mps_convolution_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  id *v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(_QWORD *)a2)
  {
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(a2 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = (const void *)v4[75];
      if (v8)
      {
        if (v9)
          objc_storeStrong((id *)(a1 + 592), v9[74]);
      }
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 192));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 208));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 176));
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;

  v29 = 0uLL;
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v28, *(_DWORD *)(a1 + 344), 1, 1, 1);
    v4 = v28;
    v28 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    v29 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v28, *(_DWORD *)(a1 + 344));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 272, &v28);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(a1 + 584);
    v15 = *(_QWORD *)(v14 + 272);
    if (!v15)
      Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
    v16 = *(unsigned int *)(a1 + 344);
    if ((int)v16 >= 1)
    {
      v17 = *(float **)(v15 + 16);
      v18 = *(float **)(v29 + 16);
      v19 = (float *)(*(_QWORD *)(*a2 + 16) + 8);
      do
      {
        v20 = *(v19 - 2);
        v21 = *(v19 - 1);
        v22 = *v19;
        v23 = v19[1];
        v19 += 4;
        v24 = 1.0 / v23;
        *v17++ = v20 * v24;
        *v18++ = v21 + (float)((float)-(float)(v22 * v24) * v20);
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v29, *a2, a2[1]);
    v14 = *(_QWORD *)(a1 + 584);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14 + 224, &v29);
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_191505BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v71;
  __int128 v72;

  v72 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v72);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v71 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(int **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<float,4>::copy(&v72, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v72, v16, v18, v19, v17);
    v24 = *(_DWORD **)(v72 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v54 = 0;
          v55 = 0;
          v56 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v57 = 0;
              v58 = v54;
              v59 = v56;
              do
              {
                if ((int)v19 >= 1)
                {
                  v60 = 0;
                  v61 = v59;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v62 = &v24[v61];
                      v63 = v58;
                      v64 = v17;
                      do
                      {
                        *v62++ = _X24[v60 + v63];
                        v63 += v18 * v19 * v23;
                        --v64;
                      }
                      while (v64);
                    }
                    ++v60;
                    v61 -= v17;
                  }
                  while (v60 != v19);
                }
                ++v57;
                v59 -= v17 * v19;
                v58 += v19;
              }
              while (v57 != v18);
            }
            ++v55;
            v56 += v18 * v19 * v17;
            v54 += v18 * v19;
          }
          while (v55 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = v31 * v30;
          v33 = (int)v29 / v26;
          v34 = v27 / v26;
          v35 = (int)v29 / v26 * (v31 * v30 - 1);
          v36 = (int)v29 / v26 * v30;
          v37 = v36 * v31;
          v38 = v32 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v39 = 0;
              v40 = 0;
              v41 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v42 = 0;
                  v43 = v41;
                  v44 = v39;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v45 = 0;
                      v46 = v44 + v32 * (v28 % v34);
                      do
                      {
                        if ((int)v45 / v33 == v28 / v34)
                          v24[v43 - v28 / v34 * v33 + (int)v45] = _X24[v46];
                        ++v45;
                        v46 += v38;
                      }
                      while (v29 != v45);
                    }
                    ++v42;
                    ++v44;
                    v43 -= v33;
                  }
                  while (v42 != (_DWORD)v19);
                }
                ++v40;
                v39 += v30;
                v41 -= v36;
              }
              while (v40 != v18);
            }
            ++v28;
            v35 += v37;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v47) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v47 = 1;
      else
        v47 = v47;
      if ((int)v23 <= 1)
        v48 = 1;
      else
        v48 = v23;
      do
      {
        v49 = 0;
        v50 = v24;
        do
        {
          v51 = v50;
          v52 = v47;
          do
          {
            v53 = *_X24++;
            *v51 = v53;
            v51 += v23;
            --v52;
          }
          while (v52);
          ++v49;
          ++v50;
        }
        while (v49 != v48);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 192, &v72);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v71)
  {
    v68 = (unint64_t *)&v71->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 268435488;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_191505FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191506004(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _WORD *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _WORD *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v71;
  __int128 v72;

  v72 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v72);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v71 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(__int16 **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<unsigned short,4>::copy(&v72, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v72, v16, v18, v19, v17);
    v24 = *(_WORD **)(v72 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v54 = 0;
          v55 = 0;
          v56 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v57 = 0;
              v58 = v54;
              v59 = v56;
              do
              {
                if ((int)v19 >= 1)
                {
                  v60 = 0;
                  v61 = v59;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v62 = &v24[v61];
                      v63 = v58;
                      v64 = v17;
                      do
                      {
                        *v62++ = _X24[v60 + v63];
                        v63 += v18 * v19 * v23;
                        --v64;
                      }
                      while (v64);
                    }
                    ++v60;
                    v61 -= v17;
                  }
                  while (v60 != v19);
                }
                ++v57;
                v59 -= v17 * v19;
                v58 += v19;
              }
              while (v57 != v18);
            }
            ++v55;
            v56 += v18 * v19 * v17;
            v54 += v18 * v19;
          }
          while (v55 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = v31 * v30;
          v33 = (int)v29 / v26;
          v34 = v27 / v26;
          v35 = (int)v29 / v26 * (v31 * v30 - 1);
          v36 = (int)v29 / v26 * v30;
          v37 = v36 * v31;
          v38 = v32 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v39 = 0;
              v40 = 0;
              v41 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v42 = 0;
                  v43 = v41;
                  v44 = v39;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v45 = 0;
                      v46 = v44 + v32 * (v28 % v34);
                      do
                      {
                        if ((int)v45 / v33 == v28 / v34)
                          v24[v43 - v28 / v34 * v33 + (int)v45] = _X24[v46];
                        ++v45;
                        v46 += v38;
                      }
                      while (v29 != v45);
                    }
                    ++v42;
                    ++v44;
                    v43 -= v33;
                  }
                  while (v42 != (_DWORD)v19);
                }
                ++v40;
                v39 += v30;
                v41 -= v36;
              }
              while (v40 != v18);
            }
            ++v28;
            v35 += v37;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v47) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v47 = 1;
      else
        v47 = v47;
      if ((int)v23 <= 1)
        v48 = 1;
      else
        v48 = v23;
      do
      {
        v49 = 0;
        v50 = v24;
        do
        {
          v51 = v50;
          v52 = v47;
          do
          {
            v53 = *_X24++;
            *v51 = v53;
            v51 += v23;
            --v52;
          }
          while (v52);
          ++v49;
          ++v50;
        }
        while (v49 != v48);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 208, &v72);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v71)
  {
    v68 = (unint64_t *)&v71->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 268435472;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_1915063E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  char v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v69;
  __int128 v70;

  v70 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 192, &v70);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v69 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(char **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<unsigned char,4>::copy(&v70, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v70, v16, v18, v19, v17);
    v24 = *(_BYTE **)(v70 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v52 = 0;
          v53 = 0;
          v54 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v55 = 0;
              v56 = v52;
              v57 = v54;
              do
              {
                if ((int)v19 >= 1)
                {
                  v58 = 0;
                  v59 = v57;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v60 = &v24[v59];
                      v61 = v56;
                      v62 = v17;
                      do
                      {
                        *v60++ = _X24[v58 + v61];
                        v61 += v18 * v19 * v23;
                        --v62;
                      }
                      while (v62);
                    }
                    ++v58;
                    v59 -= v17;
                  }
                  while (v58 != v19);
                }
                ++v55;
                v57 -= v17 * v19;
                v56 += v19;
              }
              while (v55 != v18);
            }
            ++v53;
            v54 += v18 * v19 * v17;
            v52 += v18 * v19;
          }
          while (v53 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = (int)v29 / v26;
          v33 = v27 / v26;
          v34 = -((int)v29 / v26);
          v35 = -1;
          v36 = v31 * v30 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v37 = 0;
              v38 = 0;
              v39 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v40 = 0;
                  v41 = -1;
                  v42 = v37;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v43 = 0;
                      v44 = v42 + v31 * v30 * (v28 % v33);
                      do
                      {
                        if ((int)v43 / v32 == v28 / v33)
                          v24[v34 * (v28 / v33)
                            + (int)v43
                            + v32 * (v41 + *(_DWORD *)(a1 + 352) + v30 * (v39 + *(_DWORD *)(a1 + 356)))] = _X24[v44];
                        ++v43;
                        v44 += v36;
                      }
                      while (v29 != v43);
                    }
                    ++v40;
                    ++v42;
                    --v41;
                  }
                  while (v40 != (_DWORD)v19);
                }
                ++v38;
                v37 += v30;
                --v39;
              }
              while (v38 != v18);
            }
            ++v28;
            v35 += v31;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v45) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v45 = 1;
      else
        v45 = v45;
      if ((int)v23 <= 1)
        v46 = 1;
      else
        v46 = v23;
      do
      {
        v47 = 0;
        v48 = v24;
        do
        {
          v49 = v48;
          v50 = v45;
          do
          {
            v51 = *_X24++;
            *v49 = v51;
            v49 += v23;
            --v50;
          }
          while (v50);
          ++v47;
          ++v48;
        }
        while (v47 != v46);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v70);
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v69)
  {
    v66 = (unint64_t *)&v69->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 8;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_1915067D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantization_lut_blob(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v12, 256, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1[73] + 256, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(a1[73] + 256);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v10 = *(_QWORD *)(v7 + 16);
  do
  {
    *(_DWORD *)(v10 + v8) = *(_DWORD *)(v9 + v8);
    v8 += 4;
  }
  while (v8 != 1024);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 624))(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  __int128 v12;

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12, *(_DWORD *)(a1 + 344));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 240, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 240);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  if (*(int *)(a1 + 344) >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD **)(v7 + 16);
    do
    {
      LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 4 * v8);
      *v9 = v10;
      HIDWORD(v10) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 4 * (v8 + *(int *)(a1 + 344)));
      *(_QWORD *)v9 = v10;
      v9 += 2;
      ++v8;
    }
    while (v8 < *(int *)(a1 + 344));
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void Espresso::MPSEngine::mps_convolution_kernel::recreate_kernel(Espresso::MPSEngine::mps_convolution_kernel *this)
{
  const void *v2;
  id *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::string *v28;
  __int128 v29;
  std::runtime_error *v30;
  id v31;
  id v32;
  std::string v33;
  std::string v34;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (!v2
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
  v34.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v31 = v3[18];
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v31 = v3[18];
  }
  if (!*((_DWORD *)this + 84) && !*((_DWORD *)this + 104) && !*(_QWORD *)(*((_QWORD *)this + 73) + 224))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v34, *((_DWORD *)this + 86), 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)this + 73) + 224, (__int128 *)&v34);
    size = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  if (objc_msgSend(*((id *)this + 73), "ready", v31))
  {
    v8 = *((_QWORD *)this + 73);
    v9 = *((_OWORD *)this + 19);
    v10 = *((_OWORD *)this + 20);
    *(_OWORD *)(v8 + 40) = *((_OWORD *)this + 21);
    *(_OWORD *)(v8 + 24) = v10;
    *(_OWORD *)(v8 + 8) = v9;
    v11 = *((_OWORD *)this + 22);
    v12 = *((_OWORD *)this + 23);
    v13 = *((_OWORD *)this + 24);
    *(_OWORD *)(v8 + 104) = *((_OWORD *)this + 25);
    *(_OWORD *)(v8 + 88) = v13;
    *(_OWORD *)(v8 + 72) = v12;
    *(_OWORD *)(v8 + 56) = v11;
    v14 = *((_OWORD *)this + 26);
    v15 = *((_OWORD *)this + 27);
    v16 = *((_OWORD *)this + 28);
    *(_QWORD *)(v8 + 165) = *(_QWORD *)((char *)this + 461);
    *(_OWORD *)(v8 + 152) = v16;
    *(_OWORD *)(v8 + 136) = v15;
    *(_OWORD *)(v8 + 120) = v14;
    v17 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6CA8]), "initWithDevice:weights:", v32, *((_QWORD *)this + 73));
    v18 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v17;

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 68))
        v19 = 1;
      else
        v19 = *((_DWORD *)this + 112) != 0;
      objc_msgSend(*((id *)this + 74), "setAccumulatorPrecisionOption:", !v19);
    }
    v20 = (void *)*((_QWORD *)this + 74);
    if (!v20)
    {
      v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v33, *(_QWORD *)(*((_QWORD *)this + 73) + 176) != 0);
      v28 = std::string::insert(&v33, 0, "Error creating mps kernel: q=");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v27, &v34);
      __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
    {
      v21 = (_QWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
        v21 = (_QWORD *)*v21;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*((id *)this + 74), "setLabel:", v22);

      v20 = (void *)*((_QWORD *)this + 74);
    }
    objc_msgSend(v20, "setEdgeMode:", 0);
    switch(*((_WORD *)this + 189))
    {
      case 0:
        objc_msgSend(*((id *)this + 74), "setEdgeMode:", 0);
        if (fabsf(*((float *)this + 95)) > 0.00001)
          goto LABEL_37;
        break;
      case 1:
        objc_msgSend(*((id *)this + 74), "setEdgeMode:", 1);
        break;
      case 2:
      case 3:
LABEL_37:
        v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v30, "Not supported by MPS");
        __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      default:
        break;
    }
  }
  objc_msgSend(*((id *)this + 74), "setDestinationFeatureChannelOffset:", *((unsigned __int16 *)this + 215));

}

void sub_191506DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{

  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::conv_transposed_weights()
{
  return 0;
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1, int a2)
{
  char *v4;
  Espresso *v5;
  void *v6;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBEA78;
  *((_QWORD *)v4 + 3) = &off_1E2DA10B0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = (Espresso *)(8 * a2);
  *((_DWORD *)v4 + 8) = a2;
  v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((_QWORD *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_191506F04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  std::runtime_error *exception;

  result = objc_msgSend(*(id *)(a1 + 584), "ready");
  if ((_DWORD)result)
  {
    v3 = *(_QWORD **)(a1 + 584);
    v4 = v3[34];
    if (v4)
    {
      if (v3[24])
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
        v5 = *(_QWORD *)(a1 + 584);
        v6 = *(_QWORD *)(v5 + 192);
        if ((_DWORD)result)
        {
          v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12);
          v8 = *(_DWORD *)(v6 + 20);
        }
        else
        {
          v7 = *(_DWORD *)(v6 + 12) * *(_DWORD *)(v6 + 8);
          v8 = *(_DWORD *)(v6 + 16);
        }
        v15 = v7 * v8;
        v16 = *(unsigned int *)(a1 + 344);
        if ((int)v16 >= 1)
        {
          v17 = 0;
          v18 = *(_QWORD *)(*(_QWORD *)(v5 + 272) + 16);
          v19 = *(float **)(v6 + 24);
          do
          {
            v20 = v19;
            v21 = v15;
            if (v15 >= 1)
            {
              do
              {
                *v20 = *(float *)(v18 + 4 * v17) * *v20;
                ++v20;
                --v21;
              }
              while (v21);
            }
            ++v17;
            v19 += v15;
          }
          while (v17 != v16);
        }
      }
      else
      {
        if (v3[26])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "not implemented, BN should have been baked");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v9 = v3[30];
        if (v9 && *(int *)(a1 + 344) >= 1)
        {
          v10 = 0;
          v11 = *(float32x2_t **)(v9 + 16);
          v12 = *(_QWORD *)(v4 + 16);
          do
          {
            v13 = *v11;
            v14.f32[0] = *(float *)(v12 + 4 * v10) * COERCE_FLOAT(*v11);
            v11->i32[0] = v14.i32[0];
            v14.i32[1] = vmuls_lane_f32(*(float *)(v12 + 4 * v10), v13, 1);
            *v11++ = v14;
            ++v10;
          }
          while (v10 < *(int *)(a1 + 344));
        }
      }
    }
  }
  return result;
}

void sub_19150708C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN8Espresso4blobIDv2_fLi1EED1Ev(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA10B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void _ZN8Espresso4blobIDv2_fLi1EED0Ev(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA10B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEE16__on_zero_sharedEv(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *Espresso::blob<unsigned char,4>::copy(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;

  v4 = a2 + 8;
  v5 = operator new(0x60uLL);
  v6 = v5;
  v7 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2DBEDF8;
  v5[3] = &off_1E2DA12B0;
  v8 = (char *)(v5 + 3);
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  v9 = 1;
  do
  {
    v10 = *(int *)(v4 + v7);
    *(_DWORD *)((char *)v5 + v7 + 32) = v10;
    v9 *= v10;
    v7 += 4;
  }
  while (v7 != 16);
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)v9);
  bzero(v11, v9);
  v12 = 0;
  v6[6] = v11;
  *((_BYTE *)v6 + 56) = 1;
  *a1 = v8;
  a1[1] = v6;
  v13 = *(int *)(a2 + 8);
  do
  {
    v13 *= *(int *)(a2 + 12 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  return memcpy(v11, *(const void **)(a2 + 24), v13);
}

void sub_1915072A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  void *result;

  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DBEDF8;
  v10[3] = &off_1E2DA12B0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(a3 * (uint64_t)a2 * a4 * a5));
  v10[6] = result;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_191507380(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<unsigned char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12B0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<unsigned char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12B0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  void *result;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBF060;
  v10[1] = 0;
  v10[3] = &off_1E2DA1410;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_19150757C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::~convolution_kernel_proxy(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DABD70;
  v2 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DABD70;
  v2 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v8 = a1 + 304;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v11 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v9 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = v10;
  v12 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v9 + 96) = v12;
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v13;
  v16 = *(_OWORD *)(a1 + 432);
  v15 = *(_OWORD *)(a1 + 448);
  v17 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v9 + 157) = *(_QWORD *)(v8 + 157);
  *(_OWORD *)(v9 + 128) = v16;
  *(_OWORD *)(v9 + 144) = v15;
  *(_OWORD *)(v9 + 112) = v17;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), a2, a3, a4);
}

void Espresso::MPSEngine::convolution_kernel_proxy::blob_options(Espresso::MPSEngine::convolution_kernel_proxy *this@<X0>, char a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;

  *a4 = 0;
  a4[1] = 0;
  if (a3 >= 1 && (a2 & 1) == 0)
  {
    v5 = (const void *)*((_QWORD *)this + 1);
    if (v5)
    {
      if (v7)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v19 = v7;
        v20 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v18 = v11 + 3;
        *((_QWORD *)&v18 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v18);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v19[28], v19[29]);
        v15 = v20;
        if (v20)
        {
          v16 = (unint64_t *)&v20->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
  }
}

void sub_191507864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::share_weights(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 48))(*(_QWORD *)(a1 + 600));
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::clear_weights(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 75) + 56))(*((_QWORD *)this + 75));
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = a1 + 304;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v9 = *(_OWORD *)(a1 + 320);
  v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v8;
  v10 = *(_OWORD *)(a1 + 400);
  v12 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 64) = v11;
  v14 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 448);
  v15 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v7 + 157) = *(_QWORD *)(v6 + 157);
  *(_OWORD *)(v7 + 128) = v14;
  *(_OWORD *)(v7 + 144) = v13;
  *(_OWORD *)(v7 + 112) = v15;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 80))(*(_QWORD *)(a1 + 600), a2, a3);
}

void Espresso::MPSEngine::convolution_kernel_proxy::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  _QWORD *v12;
  double v13;
  double v14;
  int32x2_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23[2];
  void *__p;
  void *v25;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  v11 = (uint64_t)(a1 + 73);
  v12 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v23, a1);
  v16 = a1[1];
  v17 = (std::__shared_weak_count *)a1[2];
  v22[0] = v16;
  v22[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, (uint64_t)v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, v11, v23, v22, 0, 0);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_191507A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::__set_weights_finalize(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  char *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  _QWORD v108[2];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  _OWORD v112[2];
  void *__p;
  void *v114;
  _QWORD v115[2];
  _QWORD v116[2];
  uint64_t v117[2];
  uint64_t v118[2];
  char *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v3 = *(_QWORD *)(a1 + 584);
  if (!v3)
    return;
  if (!*(_QWORD *)v3)
    return;
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5 && !*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && !*(_QWORD *)(v3 + 80))
    return;
  v6 = *(_DWORD *)(a1 + 420);
  v7 = v6 >= 2 && v6 == *(_DWORD *)(a1 + 348);
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76) && !v7)
  {
    v8 = *(_DWORD *)(v3 + 156);
    if (v8 == 8)
    {
      if (*(_BYTE *)(v3 + 164) && !v5)
      {
        if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && *(_QWORD *)(v3 + 80))
        {
          Espresso::quantized_weights_helper::cast_int8_linear_to_uint8_linear((Espresso::quantized_weights_helper *)v3, &v121);
          v118[0] = v123;
          v118[1] = v124;
          if (v124)
          {
            v9 = (unint64_t *)(v124 + 8);
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 1, v9));
          }
          v117[0] = v125;
          v117[1] = v126;
          if (v126)
          {
            v11 = (unint64_t *)(v126 + 8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }
          Espresso::quantized_weights_helper::get_per_ch_ranges_uint8(v118, v117, *(_DWORD *)(v123 + 8), &v119);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v117);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v118);
          v13 = *(_QWORD *)(a1 + 600);
          v116[0] = v119;
          v116[1] = v120;
          if (v120)
          {
            p_shared_owners = (unint64_t *)&v120->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          v16 = a2[1];
          v115[0] = *a2;
          v115[1] = v16;
          if (v16)
          {
            v17 = (unint64_t *)(v16 + 8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v13 + 592))(v13, v116, v115);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v115);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v116);
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 464))(v112, a1);
          v91 = v112[0];
          v19 = v121;
          v111[0] = v121;
          v111[1] = v122;
          if (v122)
          {
            v20 = (unint64_t *)&v122->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = operator new(0x60uLL);
          v22[1] = 0;
          v23 = v22 + 1;
          v22[2] = 0;
          *v22 = &off_1E2DBEDF8;
          v24 = *(_QWORD *)(v19 + 16);
          v22[3] = &off_1E2DA12B0;
          *((_OWORD *)v22 + 4) = 0u;
          *((_OWORD *)v22 + 5) = 0u;
          *((_OWORD *)v22 + 2) = v91;
          v22[6] = v24;
          *((_BYTE *)v22 + 56) = 0;
          v110[0] = v22 + 3;
          v110[1] = v22;
          v25 = *(_QWORD *)(a1 + 600);
          v109[0] = v22 + 3;
          v109[1] = v22;
          do
            v26 = __ldxr(v23);
          while (__stxr(v26 + 1, v23));
          v27 = a2[1];
          v108[0] = *a2;
          v108[1] = v27;
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v25 + 560))(v25, v109, v108);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v108);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v109);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v110);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v111);
          if (__p)
          {
            v114 = __p;
            operator delete(__p);
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v119);
          Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&v121);
          return;
        }
LABEL_57:
        if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && *(_QWORD *)(v3 + 80))
        {
          Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, v112);
          v78 = *(_QWORD *)(a1 + 600);
          v107 = v112[0];
          if (*((_QWORD *)&v112[0] + 1))
          {
            v79 = (unint64_t *)(*((_QWORD *)&v112[0] + 1) + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = (std::__shared_weak_count *)a2[1];
          v105 = *a2;
          v106 = v81;
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v78 + 592))(v78, &v107, &v105);
          v84 = v106;
          if (v106)
          {
            v85 = (unint64_t *)&v106->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
          if (*((_QWORD *)&v107 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v112[0] + 1);
          if (!*((_QWORD *)&v112[0] + 1))
            goto LABEL_75;
          v90 = (unint64_t *)(*((_QWORD *)&v112[0] + 1) + 8);
          do
            v52 = __ldaxr(v90);
          while (__stlxr(v52 - 1, v90));
LABEL_73:
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
LABEL_75:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 464))(v112, a1);
          v92 = v112[0];
          v53 = *(int **)(a1 + 584);
          if (v53[40] >= 1 && (v54 = *((_QWORD *)v53 + 2)) != 0)
          {
            v55 = (std::__shared_weak_count *)*((_QWORD *)v53 + 3);
          }
          else
          {
            v54 = *(_QWORD *)v53;
            v55 = (std::__shared_weak_count *)*((_QWORD *)v53 + 1);
          }
          v121 = v54;
          v122 = v55;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = operator new(0x60uLL);
          v58[1] = 0;
          v59 = v58 + 1;
          v58[2] = 0;
          *v58 = &off_1E2DBEDF8;
          v60 = *(_QWORD *)(v54 + 16);
          v58[3] = &off_1E2DA12B0;
          *((_OWORD *)v58 + 4) = 0u;
          *((_OWORD *)v58 + 5) = 0u;
          *((_OWORD *)v58 + 2) = v92;
          v58[6] = v60;
          *((_BYTE *)v58 + 56) = 0;
          v119 = (char *)(v58 + 3);
          v120 = (std::__shared_weak_count *)v58;
          v61 = *(_QWORD *)(a1 + 600);
          v99 = (char *)(v58 + 3);
          v100 = (std::__shared_weak_count *)v58;
          do
            v62 = __ldxr(v59);
          while (__stxr(v62 + 1, v59));
          v63 = (std::__shared_weak_count *)a2[1];
          v97 = *a2;
          v98 = v63;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          (*(void (**)(uint64_t, char **, uint64_t *))(*(_QWORD *)v61 + 560))(v61, &v99, &v97);
          v66 = v98;
          if (v98)
          {
            v67 = (unint64_t *)&v98->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = v100;
          if (v100)
          {
            v70 = (unint64_t *)&v100->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v72 = v120;
          if (v120)
          {
            v73 = (unint64_t *)&v120->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = v122;
          if (v122)
          {
            v76 = (unint64_t *)&v122->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (__p)
          {
            v114 = __p;
            operator delete(__p);
          }
          return;
        }
LABEL_59:
        v40 = *(_QWORD *)(a1 + 600);
        v41 = *(std::__shared_weak_count **)(v3 + 40);
        v103 = v5;
        v104 = v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = (std::__shared_weak_count *)a2[1];
        v101 = *a2;
        v102 = v44;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 576))(v40, &v103, &v101);
        v47 = v102;
        if (v102)
        {
          v48 = (unint64_t *)&v102->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v104;
        if (!v104)
          goto LABEL_75;
        v51 = (unint64_t *)&v104->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        goto LABEL_73;
      }
    }
    else if (v8 <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
      v3 = *(_QWORD *)(a1 + 584);
      v5 = *(_QWORD *)(v3 + 32);
    }
    if (v5)
      goto LABEL_59;
    goto LABEL_57;
  }
  v30 = *(_QWORD *)(a1 + 600);
  Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v95);
  v31 = (std::__shared_weak_count *)a2[1];
  v93 = *a2;
  v94 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v30 + 424))(v30, &v95, &v93);
  v34 = v94;
  if (v94)
  {
    v35 = (unint64_t *)&v94->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v96;
  if (v96)
  {
    v38 = (unint64_t *)&v96->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_191508184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 96);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)(v41 - 80));
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::convolution_kernel_proxy::is_valid_for_engine(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v3;

  v3 = a1[105];
  if (v3 >= 2 && v3 != a1[87])
    return ((a1[86] / v3) & 3) == 0;
  return a3[1] - *a3 != 128 || a1[84] != 1;
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = a1 + 304;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v7 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  v12 = *(_OWORD *)(a1 + 432);
  v11 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v5 + 157) = *(_QWORD *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  v14 = *(_QWORD *)(a1 + 600);
  v15 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 392))(v14, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1915083D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = a1 + 304;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v7 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  v12 = *(_OWORD *)(a1 + 432);
  v11 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v5 + 157) = *(_QWORD *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  v14 = *(_QWORD *)(a1 + 600);
  v15 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 400))(v14, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = a1 + 304;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v7 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  v12 = *(_OWORD *)(a1 + 432);
  v11 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v5 + 157) = *(_QWORD *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  v14 = *(_QWORD *)(a1 + 600);
  v15 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 408))(v14, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1915084D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1915085D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantized_weights_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v6 = a1 + 304;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v9 = *(_OWORD *)(a1 + 320);
  v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v8;
  v10 = *(_OWORD *)(a1 + 400);
  v12 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 64) = v11;
  v14 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 448);
  v15 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v7 + 157) = *(_QWORD *)(v6 + 157);
  *(_OWORD *)(v7 + 128) = v14;
  *(_OWORD *)(v7 + 144) = v13;
  *(_OWORD *)(v7 + 112) = v15;
  v16 = *(_QWORD *)(a1 + 600);
  v17 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (std::__shared_weak_count *)a3[1];
  v29 = *a3;
  v30 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v16 + 560))(v16, &v31, &v29);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19150872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantization_lut_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = *(_QWORD *)(a1 + 600);
  v4 = (std::__shared_weak_count *)a2[1];
  v18 = *a2;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v16 = *a3;
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 576))(v3, &v18, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_191508830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v6 = a1 + 304;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v9 = *(_OWORD *)(a1 + 320);
  v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v8;
  v10 = *(_OWORD *)(a1 + 400);
  v12 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 64) = v11;
  v14 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 448);
  v15 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(v7 + 157) = *(_QWORD *)(v6 + 157);
  *(_OWORD *)(v7 + 128) = v14;
  *(_OWORD *)(v7 + 144) = v13;
  *(_OWORD *)(v7 + 112) = v15;
  v16 = *(_QWORD *)(a1 + 600);
  v17 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (std::__shared_weak_count *)a3[1];
  v29 = *a3;
  v30 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v16 + 592))(v16, &v31, &v29);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191508994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::update_fused_neuron(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  _QWORD *v13;
  double v14;
  double v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel *v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v23;

  v2 = (char *)this + 304;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 75) + 384))(*((_QWORD *)this + 75));
  v5 = *((_OWORD *)this + 20);
  v4 = *((_OWORD *)this + 21);
  *(_OWORD *)v3 = *((_OWORD *)this + 19);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v4;
  v6 = *((_OWORD *)this + 25);
  v8 = *((_OWORD *)this + 22);
  v7 = *((_OWORD *)this + 23);
  *(_OWORD *)(v3 + 80) = *((_OWORD *)this + 24);
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 48) = v8;
  *(_OWORD *)(v3 + 64) = v7;
  v10 = *((_OWORD *)this + 27);
  v9 = *((_OWORD *)this + 28);
  v11 = *((_OWORD *)this + 26);
  *(_QWORD *)(v3 + 157) = *(_QWORD *)(v2 + 157);
  *(_OWORD *)(v3 + 128) = v10;
  *(_OWORD *)(v3 + 144) = v9;
  *(_OWORD *)(v3 + 112) = v11;
  v12 = (const void *)*((_QWORD *)this + 75);
  if (v12)
  {
    if (v13)
    {
      v16 = v13;
      if (!v13[74])
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot update fused neuron on nil kernel.");
      v17 = *((_DWORD *)v13 + 91);
      if (v17 != -1)
      {
        if (v17 == 2)
        {
          v18 = 1;
        }
        else
        {
          if (v17 != 24)
            goto LABEL_15;
          v18 = 11;
        }
        LODWORD(v14) = *((_DWORD *)v13 + 92);
        LODWORD(v15) = *((_DWORD *)v13 + 93);
        objc_msgSend(MEMORY[0x1E0CC71E8], "cnnNeuronDescriptorWithType:a:b:", v18, v14, v15);
        v20 = objc_claimAutoreleasedReturnValue();
        if (v20)
        {
          v23 = (void *)v20;
          v21 = objc_opt_respondsToSelector();
          v22 = v23;
          if ((v21 & 1) != 0)
          {
            objc_msgSend((id)v16[74], "setFusedNeuronDescriptor:", v23);
            v22 = v23;
          }
          goto LABEL_16;
        }
LABEL_15:
        v22 = 0;
LABEL_16:

      }
    }
    else
    {
      if (v19)
        Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(v19);
    }
  }
}

void sub_191508B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::deconvolution_kernel::~deconvolution_kernel(id *this)
{
  *this = &off_1E2DA8D10;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  *this = &off_1E2DA8D10;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::deconvolution_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v8;
  const void *v9;
  _DWORD *v10;
  _DWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  uint64_t v32;
  signed int v33;
  int v34;
  unsigned int v35;
  signed int v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  id *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::runtime_error *exception;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  int v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;

  if (!*(_QWORD *)(a1 + 592))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
    if (!*(_QWORD *)(a1 + 592))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "The mps kernel was not created");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v8 = *a3;
  v9 = **a3;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v60 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v60 = 0;
  }
  v15 = *a4;
  v16 = **a4;
  v56 = a2;
  if (v16
  {
    v18 = (std::__shared_weak_count *)v15[1];
    v59 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v59 = 0;
  }
  v21 = *(_DWORD *)(a1 + 352);
  v22 = *(__int16 *)(a1 + 400);
  v23 = *(__int16 *)(a1 + 402);
  if (v23 > 1)
    v24 = (*(_DWORD *)(a1 + 356) - 1) * v23 + 1;
  else
    v24 = *(_DWORD *)(a1 + 356);
  v25 = *(__int16 *)(a1 + 398);
  v27 = v17[2];
  v26 = v17[3];
  v58 = *(__int16 *)(a1 + 396);
  v57 = (id *)v11;
  v30 = (char *)(v11 + 2);
  v29 = v11[2];
  v28 = *((_DWORD *)v30 + 1);
  if (v24 >= 1)
    v31 = v24 - 1;
  else
    v31 = v24;
  v32 = objc_msgSend(*(id *)(a1 + 592), "kernelOffsetX", v17);
  v33 = (((v24 + (v26 - 1) * v25 - v28) & ~((v24 + (v26 - 1) * v25 - v28) >> 31)) >> 1) - (v31 >> 1);
  if (v22 > 1)
    v34 = (v21 - 1) * v22 + 1;
  else
    v34 = v21;
  v35 = ((v34 - v29 + (v27 - 1) * v58) & ~((v34 - v29 + (v27 - 1) * v58) >> 31)) >> 1;
  if (v34 >= 1)
    --v34;
  v36 = v35 - (v34 >> 1);
  if (v32 != v36 || objc_msgSend(*(id *)(a1 + 592), "kernelOffsetY") != v33)
  {
    objc_msgSend(*(id *)(a1 + 592), "setKernelOffsetX:", v36);
    objc_msgSend(*(id *)(a1 + 592), "setKernelOffsetY:", v33);
  }
  if (*(_QWORD *)v56
  {
    v38 = v37;
    v39 = *(std::__shared_weak_count **)(v56 + 8);
    v40 = v57;
    if (v39)
    {
      v41 = (unint64_t *)&v39->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
  }
  else
  {
    v39 = 0;
    v38 = 0;
    v40 = v57;
  }
  v43 = objc_msgSend(v40[32], "count");
  v44 = *(void **)(a1 + 592);
  v45 = v38[18];
  if (v43 < 2)
  {
    v46 = *(id *)(v55 + 240);
    v47 = v40[30];
    objc_msgSend(v44, "encodeToCommandBuffer:sourceImage:destinationImage:", v45, v46, v47);

    if (!v39)
      goto LABEL_46;
  }
  else
  {
    objc_msgSend(v44, "encodeBatchToCommandBuffer:sourceImages:convolutionGradientStates:destinationImages:", v45, *(_QWORD *)(v55 + 256), 0, v40[32]);
    if (!v39)
      goto LABEL_46;
  }
  v48 = (unint64_t *)&v39->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
LABEL_46:
  if (v59)
  {
    v50 = (unint64_t *)&v59->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v60)
  {
    v52 = (unint64_t *)&v60->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191508F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::deconvolution_kernel::clear_weights(Espresso::MPSEngine::deconvolution_kernel *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 75);
  if (v2 && *v2 && (v2[4] || v2[6] || v2[8] || v2[10]))
  {
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v2);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 75) + 16));
  }
}

void Espresso::MPSEngine::deconvolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  _QWORD *v12;
  double v13;
  double v14;
  int32x2_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23[2];
  void *__p;
  void *v25;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  v11 = (uint64_t)(a1 + 75);
  v12 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v23, a1);
  v16 = a1[1];
  v17 = (std::__shared_weak_count *)a1[2];
  v22[0] = v16;
  v22[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, (uint64_t)v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, v11, v23, v22, 1, 0);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_191509138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::deconvolution_kernel::__set_weights_finalize(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  char *v62;
  std::__shared_weak_count *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _OWORD v68[2];
  void *__p;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;

  v3 = a1[75];
  if (!v3)
    return;
  if (!*(_QWORD *)v3)
    return;
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5 && !*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && !*(_QWORD *)(v3 + 80))
    return;
  if (*(_DWORD *)(a1[1] + 76))
  {
    Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v58);
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 400))(a1, &v58);
    v6 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return;
  }
  if (*(int *)(v3 + 156) <= 7)
  {
    Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
    v3 = a1[75];
    v5 = *(_QWORD *)(v3 + 32);
  }
  if (v5 || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 64) || !*(_QWORD *)(v3 + 80))
  {
    v9 = *(std::__shared_weak_count **)(v3 + 40);
    v73 = v5;
    v74 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)a2[1];
    v71 = *a2;
    v72 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*a1 + 576))(a1, &v73, &v71);
    v15 = v72;
    if (v72)
    {
      v16 = (unint64_t *)&v72->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v74;
    if (!v74)
      goto LABEL_34;
    v19 = (unint64_t *)&v74->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  else
  {
    Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, v68);
    v77 = v68[0];
    if (*((_QWORD *)&v68[0] + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = (std::__shared_weak_count *)a2[1];
    v75 = *a2;
    v76 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    (*(void (**)(_QWORD *, __int128 *, uint64_t *))(*a1 + 592))(a1, &v77, &v75);
    v50 = v76;
    if (v76)
    {
      v51 = (unint64_t *)&v76->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v68[0] + 1);
    if (!*((_QWORD *)&v68[0] + 1))
      goto LABEL_34;
    v56 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
    do
      v20 = __ldaxr(v56);
    while (__stlxr(v20 - 1, v56));
  }
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_34:
  (*(void (**)(_OWORD *__return_ptr, _QWORD *))(*a1 + 464))(v68, a1);
  v57 = v68[0];
  v21 = (int *)a1[75];
  if (v21[40] >= 1 && (v22 = *((_QWORD *)v21 + 2)) != 0)
  {
    v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
  }
  else
  {
    v22 = *(_QWORD *)v21;
    v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
  }
  v66 = v22;
  v67 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = operator new(0x60uLL);
  v26[1] = 0;
  v27 = v26 + 1;
  v26[2] = 0;
  *v26 = &off_1E2DBEDF8;
  v28 = *(_QWORD *)(v22 + 16);
  v26[3] = &off_1E2DA12B0;
  *((_OWORD *)v26 + 4) = 0u;
  *((_OWORD *)v26 + 5) = 0u;
  *((_OWORD *)v26 + 2) = v57;
  v26[6] = v28;
  *((_BYTE *)v26 + 56) = 0;
  v64 = (char *)(v26 + 3);
  v65 = (std::__shared_weak_count *)v26;
  v62 = (char *)(v26 + 3);
  v63 = (std::__shared_weak_count *)v26;
  do
    v29 = __ldxr(v27);
  while (__stxr(v29 + 1, v27));
  v30 = (std::__shared_weak_count *)a2[1];
  v60 = *a2;
  v61 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (*(void (**)(_QWORD *, char **, uint64_t *))(*a1 + 560))(a1, &v62, &v60);
  v33 = v61;
  if (v61)
  {
    v34 = (unint64_t *)&v61->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v63;
  if (v63)
  {
    v37 = (unint64_t *)&v63->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v67;
  if (v67)
  {
    v43 = (unint64_t *)&v67->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
}

void sub_1915095F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;

  v29 = 0uLL;
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v28, *(_DWORD *)(a1 + 344), 1, 1, 1);
    v4 = v28;
    v28 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    v29 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v28, *(_DWORD *)(a1 + 344));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 272, &v28);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(a1 + 584);
    v15 = *(_QWORD *)(v14 + 272);
    if (!v15)
      Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
    v16 = *(unsigned int *)(a1 + 344);
    if ((int)v16 >= 1)
    {
      v17 = *(float **)(v15 + 16);
      v18 = *(float **)(v29 + 16);
      v19 = (float *)(*(_QWORD *)(*a2 + 16) + 8);
      do
      {
        v20 = *(v19 - 2);
        v21 = *(v19 - 1);
        v22 = *v19;
        v23 = v19[1];
        v19 += 4;
        v24 = 1.0 / v23;
        *v17++ = v20 * v24;
        *v18++ = v21 + (float)((float)-(float)(v22 * v24) * v20);
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v29, *a2, a2[1]);
    v14 = *(_QWORD *)(a1 + 584);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14 + 224, &v29);
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19150987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v71;
  __int128 v72;

  v72 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v72);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v71 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(int **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<float,4>::copy(&v72, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v72, v16, v18, v19, v17);
    v24 = *(_DWORD **)(v72 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v54 = 0;
          v55 = 0;
          v56 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v57 = 0;
              v58 = v54;
              v59 = v56;
              do
              {
                if ((int)v19 >= 1)
                {
                  v60 = 0;
                  v61 = v59;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v62 = &v24[v61];
                      v63 = v58;
                      v64 = v17;
                      do
                      {
                        *v62++ = _X24[v60 + v63];
                        v63 += v18 * v19 * v23;
                        --v64;
                      }
                      while (v64);
                    }
                    ++v60;
                    v61 -= v17;
                  }
                  while (v60 != v19);
                }
                ++v57;
                v59 -= v17 * v19;
                v58 += v19;
              }
              while (v57 != v18);
            }
            ++v55;
            v56 += v18 * v19 * v17;
            v54 += v18 * v19;
          }
          while (v55 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = v31 * v30;
          v33 = (int)v29 / v26;
          v34 = v27 / v26;
          v35 = (int)v29 / v26 * (v31 * v30 - 1);
          v36 = (int)v29 / v26 * v30;
          v37 = v36 * v31;
          v38 = v32 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v39 = 0;
              v40 = 0;
              v41 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v42 = 0;
                  v43 = v41;
                  v44 = v39;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v45 = 0;
                      v46 = v44 + v32 * (v28 % v34);
                      do
                      {
                        if ((int)v45 / v33 == v28 / v34)
                          v24[v43 - v28 / v34 * v33 + (int)v45] = _X24[v46];
                        ++v45;
                        v46 += v38;
                      }
                      while (v29 != v45);
                    }
                    ++v42;
                    ++v44;
                    v43 -= v33;
                  }
                  while (v42 != (_DWORD)v19);
                }
                ++v40;
                v39 += v30;
                v41 -= v36;
              }
              while (v40 != v18);
            }
            ++v28;
            v35 += v37;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v47) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v47 = 1;
      else
        v47 = v47;
      if ((int)v23 <= 1)
        v48 = 1;
      else
        v48 = v23;
      do
      {
        v49 = 0;
        v50 = v24;
        do
        {
          v51 = v50;
          v52 = v47;
          do
          {
            v53 = *_X24++;
            *v51 = v53;
            v51 += v23;
            --v52;
          }
          while (v52);
          ++v49;
          ++v50;
        }
        while (v49 != v48);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 192, &v72);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v71)
  {
    v68 = (unint64_t *)&v71->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 268435488;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_191509C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191509CC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _WORD *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _WORD *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v71;
  __int128 v72;

  v72 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v72);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v71 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(__int16 **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<unsigned short,4>::copy(&v72, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v72, v16, v18, v19, v17);
    v24 = *(_WORD **)(v72 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v54 = 0;
          v55 = 0;
          v56 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v57 = 0;
              v58 = v54;
              v59 = v56;
              do
              {
                if ((int)v19 >= 1)
                {
                  v60 = 0;
                  v61 = v59;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v62 = &v24[v61];
                      v63 = v58;
                      v64 = v17;
                      do
                      {
                        *v62++ = _X24[v60 + v63];
                        v63 += v18 * v19 * v23;
                        --v64;
                      }
                      while (v64);
                    }
                    ++v60;
                    v61 -= v17;
                  }
                  while (v60 != v19);
                }
                ++v57;
                v59 -= v17 * v19;
                v58 += v19;
              }
              while (v57 != v18);
            }
            ++v55;
            v56 += v18 * v19 * v17;
            v54 += v18 * v19;
          }
          while (v55 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = v31 * v30;
          v33 = (int)v29 / v26;
          v34 = v27 / v26;
          v35 = (int)v29 / v26 * (v31 * v30 - 1);
          v36 = (int)v29 / v26 * v30;
          v37 = v36 * v31;
          v38 = v32 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v39 = 0;
              v40 = 0;
              v41 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v42 = 0;
                  v43 = v41;
                  v44 = v39;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v45 = 0;
                      v46 = v44 + v32 * (v28 % v34);
                      do
                      {
                        if ((int)v45 / v33 == v28 / v34)
                          v24[v43 - v28 / v34 * v33 + (int)v45] = _X24[v46];
                        ++v45;
                        v46 += v38;
                      }
                      while (v29 != v45);
                    }
                    ++v42;
                    ++v44;
                    v43 -= v33;
                  }
                  while (v42 != (_DWORD)v19);
                }
                ++v40;
                v39 += v30;
                v41 -= v36;
              }
              while (v40 != v18);
            }
            ++v28;
            v35 += v37;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v47) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v47 = 1;
      else
        v47 = v47;
      if ((int)v23 <= 1)
        v48 = 1;
      else
        v48 = v23;
      do
      {
        v49 = 0;
        v50 = v24;
        do
        {
          v51 = v50;
          v52 = v47;
          do
          {
            v53 = *_X24++;
            *v51 = v53;
            v51 += v23;
            --v52;
          }
          while (v52);
          ++v49;
          ++v50;
        }
        while (v49 != v48);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 208, &v72);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v71)
  {
    v68 = (unint64_t *)&v71->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 268435472;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_19150A09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  char v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v69;
  __int128 v70;

  v70 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 192, &v70);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v69 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  _X24 = *(char **)(v7 + 24);
  __asm { PRFM            #1, [X24] }
  v16 = *(_DWORD *)(v7 + 16);
  v17 = *(unsigned int *)(v7 + 20);
  v19 = *(unsigned int *)(v7 + 8);
  v18 = *(_DWORD *)(v7 + 12);
  if ((_DWORD)v17)
    _ZF = v16 == 0;
  else
    _ZF = 1;
  if (_ZF || v18 == 0 || (_DWORD)v19 == 0)
  {
    Espresso::blob<unsigned char,4>::copy(&v70, v7);
  }
  else
  {
    v23 = v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v70, v16, v18, v19, v17);
    v24 = *(_BYTE **)(v70 + 24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    if ((v25 & 1) != 0)
    {
      v26 = *(_DWORD *)(a1 + 420);
      if (v26 <= 1)
      {
        if ((int)v23 >= 1)
        {
          v52 = 0;
          v53 = 0;
          v54 = v17 * (v18 * v19 - 1);
          do
          {
            if (v18 >= 1)
            {
              v55 = 0;
              v56 = v52;
              v57 = v54;
              do
              {
                if ((int)v19 >= 1)
                {
                  v58 = 0;
                  v59 = v57;
                  do
                  {
                    if ((int)v17 >= 1)
                    {
                      v60 = &v24[v59];
                      v61 = v56;
                      v62 = v17;
                      do
                      {
                        *v60++ = _X24[v58 + v61];
                        v61 += v18 * v19 * v23;
                        --v62;
                      }
                      while (v62);
                    }
                    ++v58;
                    v59 -= v17;
                  }
                  while (v58 != v19);
                }
                ++v55;
                v57 -= v17 * v19;
                v56 += v19;
              }
              while (v55 != v18);
            }
            ++v53;
            v54 += v18 * v19 * v17;
            v52 += v18 * v19;
          }
          while (v53 != (_DWORD)v23);
        }
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 344);
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = *(unsigned int *)(a1 + 348);
          v30 = *(_DWORD *)(a1 + 352);
          v31 = *(_DWORD *)(a1 + 356);
          v32 = (int)v29 / v26;
          v33 = v27 / v26;
          v34 = -((int)v29 / v26);
          v35 = -1;
          v36 = v31 * v30 * v27 / v26;
          do
          {
            if (v18 >= 1)
            {
              v37 = 0;
              v38 = 0;
              v39 = v35;
              do
              {
                if ((int)v19 >= 1)
                {
                  v40 = 0;
                  v41 = -1;
                  v42 = v37;
                  do
                  {
                    if ((int)v29 >= 1)
                    {
                      v43 = 0;
                      v44 = v42 + v31 * v30 * (v28 % v33);
                      do
                      {
                        if ((int)v43 / v32 == v28 / v33)
                          v24[v34 * (v28 / v33)
                            + (int)v43
                            + v32 * (v41 + *(_DWORD *)(a1 + 352) + v30 * (v39 + *(_DWORD *)(a1 + 356)))] = _X24[v44];
                        ++v43;
                        v44 += v36;
                      }
                      while (v29 != v43);
                    }
                    ++v40;
                    ++v42;
                    --v41;
                  }
                  while (v40 != (_DWORD)v19);
                }
                ++v38;
                v37 += v30;
                --v39;
              }
              while (v38 != v18);
            }
            ++v28;
            v35 += v31;
          }
          while (v28 != v27);
        }
      }
    }
    else
    {
      LODWORD(v45) = v19 * v18;
      if ((int)v19 * v18 <= 1)
        v45 = 1;
      else
        v45 = v45;
      if ((int)v23 <= 1)
        v46 = 1;
      else
        v46 = v23;
      do
      {
        v47 = 0;
        v48 = v24;
        do
        {
          v49 = v48;
          v50 = v45;
          do
          {
            v51 = *_X24++;
            *v49 = v51;
            v49 += v23;
            --v50;
          }
          while (v50);
          ++v47;
          ++v48;
        }
        while (v47 != v46);
        v24 += (int)v19 * v18 * (int)v23;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 176, &v70);
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v69)
  {
    v66 = (unint64_t *)&v69->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 584) + 288) = 8;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void sub_19150A490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantization_lut_blob(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v12, 256, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1[73] + 256, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(a1[73] + 256);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v10 = *(_QWORD *)(v7 + 16);
  do
  {
    *(_DWORD *)(v10 + v8) = *(_DWORD *)(v9 + v8);
    v8 += 4;
  }
  while (v8 != 1024);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 624))(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  __int128 v12;

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12, *(_DWORD *)(a1 + 344));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 584) + 240, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 240);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  if (*(int *)(a1 + 344) >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD **)(v7 + 16);
    do
    {
      LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 4 * v8);
      *v9 = v10;
      HIDWORD(v10) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 4 * (v8 + *(int *)(a1 + 344)));
      *(_QWORD *)v9 = v10;
      v9 += 2;
      ++v8;
    }
    while (v8 < *(int *)(a1 + 344));
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

void Espresso::MPSEngine::deconvolution_kernel::recreate_kernel(Espresso::MPSEngine::deconvolution_kernel *this)
{
  const void *v2;
  id *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::runtime_error *v18;
  id v19;
  __int128 v20;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (!v2
  {
    v20 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *(_QWORD *)&v20 = v3;
  *((_QWORD *)&v20 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v19 = v3[18];
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v19 = v3[18];
  }
  if (!*((_DWORD *)this + 84) && !*((_DWORD *)this + 104) && !*(_QWORD *)(*((_QWORD *)this + 73) + 224))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v20, *((_DWORD *)this + 86), 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)this + 73) + 224, &v20);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (objc_msgSend(*((id *)this + 73), "ready"))
  {
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6CC8]), "initWithDevice:weights:", v19, *((_QWORD *)this + 73));
    v9 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v8;

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 68))
        v10 = 0;
      else
        v10 = *((_DWORD *)this + 112) == 0;
      objc_msgSend(*((id *)this + 74), "setAccumulatorPrecisionOption:", v10);
    }
    v11 = (void *)*((_QWORD *)this + 74);
    if (v11)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
      {
        v12 = (_QWORD *)((char *)this + 176);
        if (*((char *)this + 199) < 0)
          v12 = (_QWORD *)*v12;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*((id *)this + 74), "setLabel:", v13);

        v11 = (void *)*((_QWORD *)this + 74);
      }
      objc_msgSend(v11, "setDestinationFeatureChannelOffset:", *((unsigned __int16 *)this + 215));
      objc_msgSend(*((id *)this + 74), "setEdgeMode:", 0);
      switch(*((_WORD *)this + 189))
      {
        case 0:
          objc_msgSend(*((id *)this + 74), "setEdgeMode:", 0);
          if (fabsf(*((float *)this + 95)) > 0.00001)
            goto LABEL_37;
          goto LABEL_29;
        case 1:
          objc_msgSend(*((id *)this + 74), "setEdgeMode:", 1);
          goto LABEL_29;
        case 2:
        case 3:
LABEL_37:
          v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v18, "Not supported by MPS");
          goto LABEL_38;
        default:
          goto LABEL_29;
      }
    }
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Error creating mps kernel");
LABEL_38:
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_29:

}

void sub_19150A9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{

  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::deconvolution_kernel::conv_transposed_weights(Espresso::MPSEngine::deconvolution_kernel *this)
{
  return 1;
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  std::runtime_error *exception;

  result = objc_msgSend(*(id *)(a1 + 584), "ready");
  if ((_DWORD)result)
  {
    v3 = *(_QWORD **)(a1 + 584);
    v4 = v3[34];
    if (v4)
    {
      if (v3[24])
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
        v5 = *(_QWORD *)(a1 + 584);
        v6 = *(_QWORD *)(v5 + 192);
        if ((_DWORD)result)
        {
          v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12);
          v8 = *(_DWORD *)(v6 + 20);
        }
        else
        {
          v7 = *(_DWORD *)(v6 + 12) * *(_DWORD *)(v6 + 8);
          v8 = *(_DWORD *)(v6 + 16);
        }
        v15 = v7 * v8;
        v16 = *(unsigned int *)(a1 + 344);
        if ((int)v16 >= 1)
        {
          v17 = 0;
          v18 = *(_QWORD *)(*(_QWORD *)(v5 + 272) + 16);
          v19 = *(float **)(v6 + 24);
          do
          {
            v20 = v19;
            v21 = v15;
            if (v15 >= 1)
            {
              do
              {
                *v20 = *(float *)(v18 + 4 * v17) * *v20;
                ++v20;
                --v21;
              }
              while (v21);
            }
            ++v17;
            v19 += v15;
          }
          while (v17 != v16);
        }
      }
      else
      {
        if (v3[26])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "not implemented, BN should have been baked");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v9 = v3[30];
        if (v9 && *(int *)(a1 + 344) >= 1)
        {
          v10 = 0;
          v11 = *(float32x2_t **)(v9 + 16);
          v12 = *(_QWORD *)(v4 + 16);
          do
          {
            v13 = *v11;
            v14.f32[0] = *(float *)(v12 + 4 * v10) * COERCE_FLOAT(*v11);
            v11->i32[0] = v14.i32[0];
            v14.i32[1] = vmuls_lane_f32(*(float *)(v12 + 4 * v10), v13, 1);
            *v11++ = v14;
            ++v10;
          }
          while (v10 < *(int *)(a1 + 344));
        }
      }
    }
  }
  return result;
}

void sub_19150AB84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::pool_kernel::~pool_kernel(id *this)
{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4, int32x2_t a5, __n128 a6)
{
  const void **v9;
  const void *v10;
  int32x2_t *v11;
  int32x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void **v16;
  const void *v17;
  int32x2_t *v18;
  int32x2_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int32x2_t v28;
  int v29;
  int32x2_t v30;
  id v31;
  void *v32;
  int32x2_t v33;
  void *v34;
  __int128 v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __n128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  int32x2_t *v54;
  std::__shared_weak_count *v55;
  int32x2_t *v56;
  std::__shared_weak_count *v57;

  v9 = *a3;
  v10 = **a3;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v56 = v11;
    v57 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v56 = 0;
    v57 = 0;
  }
  v16 = *a4;
  v17 = **a4;
  if (v17
  {
    v19 = v18;
    v20 = (std::__shared_weak_count *)v16[1];
    v54 = v18;
    v55 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v19 = 0;
    v54 = 0;
    v55 = 0;
  }
  if (*(_QWORD *)a2
  {
    v24 = v23;
    v25 = *(std::__shared_weak_count **)(a2 + 8);
    v52 = v23;
    v53 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v52 = 0;
    v53 = 0;
  }
  v28 = *(int32x2_t *)(a1 + 308);
  v29 = *(__int16 *)(a1 + 340);
  switch(v29)
  {
    case 4:
      goto LABEL_25;
    case 2:
      a6 = 0uLL;
      break;
    case 1:
LABEL_25:
      a6.n128_u8[8] = 0;
      a6.n128_u8[9] = 0;
      a6.n128_u8[10] = 0;
      a6.n128_u8[11] = 0;
      a6.n128_u8[12] = 0;
      a6.n128_u8[13] = 0;
      a6.n128_u8[14] = 0;
      a6.n128_u8[15] = 0;
      v30 = vmax_s32(vsub_s32(vmla_s32(v28, vadd_s32(v12[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 320)), v19[1]), 0);
      a6.n128_u64[0] = (unint64_t)vshr_n_u32((uint32x2_t)v30, 1uLL);
      a6.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), (int8x8_t)a6.n128_u64[0], (int8x8_t)vsub_s32(v30, (int32x2_t)a6.n128_u64[0]));
      break;
    default:
      a5.i16[0] = *(_WORD *)(a1 + 348);
      a5.i16[2] = *(_WORD *)(a1 + 352);
      a6.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(a5, 0x10uLL), 0x10uLL);
      break;
  }
  if (!*(_DWORD *)(a1 + 304))
  {
    v49 = a6;
    v31 = *(id *)(a1 + 432);
    v32 = v31;
    if (!*(_DWORD *)(a1 + 332))
    {
      objc_msgSend(v31, "setZeroPadSizeX:", v49.n128_i32[0]);
      objc_msgSend(v32, "setZeroPadSizeY:", v49.n128_i32[1]);
    }

    a6.n128_u64[0] = v49.n128_u64[0];
  }
  v33 = vsub_s32(vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)v28, (uint32x2_t)v28, 0x1FuLL), 1uLL), (int32x2_t)a6.n128_u64[0]);
  v34 = *(void **)(a1 + 432);
  *(_QWORD *)&v35 = v33.i32[0];
  *((_QWORD *)&v35 + 1) = v33.i32[1];
  v50 = v35;
  v51 = 0;
  objc_msgSend(v34, "setOffset:", &v50, *(_OWORD *)&v49);
  v36 = objc_msgSend(*(id *)&v12[32], "count");
  v37 = *(void **)(a1 + 432);
  v38 = v24[18];
  if (v36 < 2)
  {
    v39 = *(id *)&v19[30];
    v40 = *(id *)&v12[30];
    objc_msgSend(v37, "encodeToCommandBuffer:sourceImage:destinationImage:", v38, v39, v40);

    if (!v25)
      goto LABEL_40;
  }
  else
  {
    objc_msgSend(v37, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v38, *(_QWORD *)&v19[32], *(_QWORD *)&v12[32]);
    if (!v25)
      goto LABEL_40;
  }
  v41 = (unint64_t *)&v25->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_40:
  v43 = v55;
  if (v55)
  {
    v44 = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v57;
  if (v57)
  {
    v47 = (unint64_t *)&v57->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19150AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::pool_kernel::on_resized(Espresso::MPSEngine::pool_kernel *this, uint64_t a2, uint64_t a3)
{
  if (*((_DWORD *)this + 90))
    *(_QWORD *)((char *)this + 308) = *(_QWORD *)(**(_QWORD **)a3 + 8);
  Espresso::MPSEngine::pool_kernel::recreate_kernel(this);
}

void Espresso::MPSEngine::pool_kernel::recreate_kernel(Espresso::MPSEngine::pool_kernel *this)
{
  void *v2;
  id *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  std::runtime_error *exception;
  id v26;

  v2 = (void *)*((_QWORD *)this + 54);
  if (v2
    && objc_msgSend(v2, "kernelWidth") == *((_DWORD *)this + 77)
    && objc_msgSend(*((id *)this + 54), "kernelHeight") == *((_DWORD *)this + 78))
  {
    return;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v26 = v3[18];
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v26 = v3[18];
  }
  v8 = *((_DWORD *)this + 76);
  if (v8 == 2)
  {
    v9 = objc_alloc(MEMORY[0x1E0CC6DA0]);
    v10 = *((int *)this + 77);
    v11 = *((int *)this + 78);
    v18 = *((_DWORD *)this + 80);
    if (v18 <= 1)
      v13 = 1;
    else
      v13 = v18;
    v19 = *((_DWORD *)this + 81);
    if (v19 <= 1)
      v15 = 1;
    else
      v15 = v19;
  }
  else if (v8 == 1)
  {
    v9 = objc_alloc(MEMORY[0x1E0CC6DB0]);
    v10 = *((int *)this + 77);
    v11 = *((int *)this + 78);
    v16 = *((_DWORD *)this + 80);
    if (v16 <= 1)
      v13 = 1;
    else
      v13 = v16;
    v17 = *((_DWORD *)this + 81);
    if (v17 <= 1)
      v15 = 1;
    else
      v15 = v17;
  }
  else
  {
    if (v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid value");
LABEL_41:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = objc_alloc(MEMORY[0x1E0CC6D90]);
    v10 = *((int *)this + 77);
    v11 = *((int *)this + 78);
    v12 = *((_DWORD *)this + 80);
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    v14 = *((_DWORD *)this + 81);
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
  }
  v20 = objc_msgSend(v9, "initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:", v26, v10, v11, v13, v15);
  v21 = (void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = v20;

  v22 = (void *)*((_QWORD *)this + 54);
  if (!v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating mps kernel");
    goto LABEL_41;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
  {
    v23 = (_QWORD *)((char *)this + 176);
    if (*((char *)this + 199) < 0)
      v23 = (_QWORD *)*v23;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)this + 54), "setLabel:", v24);

    v22 = (void *)*((_QWORD *)this + 54);
  }
  objc_msgSend(v22, "setEdgeMode:", 1);

}

void sub_19150B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::lrn_kernel::~lrn_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::lrn_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  id *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v41 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v41 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v39 = v16;
    v40 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v39 = 0;
    v40 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = v21;
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v37 = v21;
    v38 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v37 = 0;
    v38 = 0;
  }
  v26 = objc_msgSend(v10[32], "count", v37, v38, v39);
  v27 = *(void **)(a1 + 312);
  v28 = v22[18];
  if (v26 < 2)
  {
    v29 = v17[30];
    v30 = v10[30];
    objc_msgSend(v27, "encodeToCommandBuffer:sourceImage:destinationImage:", v28, v29, v30);

    if (!v23)
      goto LABEL_30;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 312), "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v28, v17[32], v10[32]);
    if (!v23)
      goto LABEL_30;
  }
  v31 = (unint64_t *)&v23->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_30:
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_19150B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::softmax_kernel::~softmax_kernel(id *this)
{
  *this = &off_1E2DA8200;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  *this = &off_1E2DA8200;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::softmax_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  id v39;
  const void **v40;
  const void ***v41;
  const void **v42;
  const void *v43;
  id *v44;
  id *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const void *v49;
  id *v50;
  id *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  id v55;
  id *v56;
  int v57;
  int v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  int v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t i;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  _QWORD v97[5];
  int64x2_t v98;
  uint64_t v99;
  int64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  int64x2_t v103;
  int64x2_t v104;
  uint64_t v105;
  _BYTE v106[32];
  id v107[2];
  id *v108;
  std::__shared_weak_count *v109;
  id *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  id *v114;
  std::__shared_weak_count *v115;
  void *v116;
  std::__shared_weak_count *v117;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v116 = v9;
    v117 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v116 = 0;
    v117 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v114 = v16;
    v115 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v114 = 0;
    v115 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = v21;
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v112 = (uint64_t)v21;
    v113 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v22 = 0;
    v112 = 0;
    v113 = 0;
  }
  if (*((int *)v10 + 4) > 3)
  {
    v33 = (void *)*((_QWORD *)v10 + 32);
    if (*(_DWORD *)(a1 + 300))
    {
      v34 = objc_msgSend(v33, "count");
      v35 = *(void **)(a1 + 344);
      v36 = v22[18];
      if (v34 <= 1)
        goto LABEL_36;
    }
    else
    {
      v37 = objc_msgSend(v33, "count");
      v35 = *(void **)(a1 + 336);
      v36 = v22[18];
      if (v37 < 2)
      {
LABEL_36:
        v38 = v17[30];
        v39 = *((id *)v10 + 30);
        objc_msgSend(v35, "encodeToCommandBuffer:sourceImage:destinationImage:", v36, v38, v39);

        goto LABEL_37;
      }
    }
    objc_msgSend(v35, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v36, v17[32], *((_QWORD *)v10 + 32));
    goto LABEL_37;
  }
  v26 = *(_QWORD *)(a1 + 352);
  if (!v26)
  {
    v27 = (char *)operator new(0x1A8uLL);
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *(_QWORD *)v27 = &off_1E2DC1FD8;
    *(_OWORD *)v106 = *(_OWORD *)(a1 + 280);
    *(_OWORD *)&v106[12] = *(_OWORD *)(a1 + 292);
    v28 = Espresso::base_kernel::base_kernel((uint64_t)(v27 + 24), (_QWORD *)(a1 + 8));
    *((_DWORD *)v27 + 83) = 0;
    v27[336] = 0;
    *((_QWORD *)v27 + 43) = 0;
    *((_QWORD *)v27 + 44) = 0;
    *((_QWORD *)v27 + 45) = 0;
    *((_QWORD *)v27 + 46) = 0;
    *((_OWORD *)v27 + 19) = *(_OWORD *)v106;
    *(_OWORD *)(v27 + 316) = *(_OWORD *)&v106[12];
    *((_QWORD *)v27 + 3) = &off_1E2DAA608;
    *(_OWORD *)(v27 + 376) = 0u;
    *(_OWORD *)(v27 + 392) = 0u;
    *(_OWORD *)(v27 + 408) = 0u;
    *(_QWORD *)&v29 = v28;
    *((_QWORD *)&v29 + 1) = v27;
    v30 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = v29;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v26 = *(_QWORD *)(a1 + 352);
  }
  (*(void (**)(uint64_t, uint64_t, const void ***, const void ***))(*(_QWORD *)v26 + 16))(v26, a2, a3, a4);
LABEL_37:
  v41 = a4;
  v40 = *a4;
  if ((unint64_t)((char *)v41[1] - (char *)v40) >= 0x11)
  {
    v42 = *a3;
    if ((unint64_t)((char *)a3[1] - (char *)*a3) >= 0x11)
    {
      v43 = v40[2];
      if (v43
      {
        v45 = v44;
        v46 = (std::__shared_weak_count *)v40[3];
        v110 = v44;
        v111 = v46;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v42 = *a3;
        }
      }
      else
      {
        v45 = 0;
        v110 = 0;
        v111 = 0;
      }
      v49 = v42[2];
      if (v49
      {
        v51 = v50;
        v52 = (std::__shared_weak_count *)v42[3];
        v108 = v50;
        v109 = v52;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
      }
      else
      {
        v52 = 0;
        v51 = 0;
        v108 = 0;
        v109 = 0;
      }
      v95 = v112;
      Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v107, v112);
      v55 = v107[0];
      *(_QWORD *)&v106[8] = 0;
      *(_QWORD *)&v106[24] = 0;
      *(_DWORD *)&v106[16] = 0;
      v56 = (id *)v116;
      *(_QWORD *)v106 = *((_QWORD *)v116 + 1);
      v57 = *((_DWORD *)v116 + 4);
      v58 = *((_DWORD *)v116 + 6);
      if (v58 <= 1)
        v58 = 1;
      v59 = v58 * *((_DWORD *)v116 + 5);
      *(_DWORD *)&v106[8] = *((_DWORD *)v116 + 4);
      *(_DWORD *)&v106[12] = v59;
      v61 = v57 - 1;
      v60 = v57 < 1;
      v62 = v57 + 2;
      if (!v60)
        v62 = v61;
      *(_DWORD *)&v106[16] = (v62 >> 2) + 1;
      *(float *)&v106[20] = 1.0 / (float)v59;
      *(_DWORD *)&v106[24] = objc_msgSend(*((id *)v116 + 32), "count");
      v94 = v52;
      if (objc_msgSend(v56[32], "count") == 1)
      {
        objc_msgSend(v55, "setComputePipelineState:", *(_QWORD *)(a1 + 376));
        objc_msgSend(v56[32], "objectAtIndexedSubscript:", 0);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "texture");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "setTexture:atIndex:", v64, 0);

        objc_msgSend(v45[32], "objectAtIndexedSubscript:", 0);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "texture");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "setTexture:atIndex:", v66, 1);

        objc_msgSend(v51[32], "objectAtIndexedSubscript:", 0);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "texture");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "setTexture:atIndex:", v68, 2);

        objc_msgSend(v55, "setBytes:length:atIndex:", v106, 32, 0);
        v103 = vdupq_n_s64(1uLL);
        v104 = v103;
        v105 = 1;
        if (*(_DWORD *)&v106[12] >= 0x40u)
          v69 = 64;
        else
          v69 = *(unsigned int *)&v106[12];
        v102 = v69;
        objc_msgSend(v55, "dispatchThreadgroups:threadsPerThreadgroup:", &v104, &v102);
      }
      else
      {
        for (i = 0; i < ((objc_msgSend(v56[32], "count") - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4; i += 4)
        {
          objc_msgSend(v55, "setComputePipelineState:", *(_QWORD *)(a1 + 384));
          v86 = 0;
          v87 = i;
          do
          {
            if (v87 >= objc_msgSend(v56[32], "count"))
            {
              objc_msgSend(v55, "setTexture:atIndex:", 0, v86);
              objc_msgSend(v55, "setTexture:atIndex:", 0, v86 + 1);
            }
            else
            {
              objc_msgSend(v56[32], "objectAtIndexedSubscript:", v87);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v88, "texture");
              v89 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "setTexture:atIndex:", v89, v86);

              objc_msgSend(v45[32], "objectAtIndexedSubscript:", v87);
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v90, "texture");
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "setTexture:atIndex:", v91, v86 + 1);

            }
            v86 += 2;
            ++v87;
          }
          while (v86 != 8);
          *(_DWORD *)&v106[28] = i;
          objc_msgSend(v51[32], "objectAtIndexedSubscript:", 0);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v92, "texture");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "setTexture:atIndex:", v93, 8);

          objc_msgSend(v55, "setBytes:length:atIndex:", v106, 32, 0);
          objc_msgSend(v55, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 392), 0, 1);
          v100 = vdupq_n_s64(1uLL);
          v101 = 1;
          v98 = v100;
          v99 = 1;
          objc_msgSend(v55, "dispatchThreadgroups:threadsPerThreadgroup:", &v100, &v98);
        }
      }

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v107);
      (*((void (**)(id *, uint64_t, uint64_t))*v51 + 5))(v51, a2, a1 + 400);
      v70 = *(void **)(v95 + 144);
      v97[0] = MEMORY[0x1E0C809B0];
      v97[1] = 3221225472;
      v97[2] = ___ZN8Espresso9MPSEngine14softmax_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke;
      v97[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
      v97[4] = a1;
      objc_msgSend(v70, "addCompletedHandler:", v97);
      if (v94)
      {
        v71 = (unint64_t *)&v94->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v73 = v111;
      if (v111)
      {
        v74 = (unint64_t *)&v111->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }
  }
  v76 = v113;
  if (v113)
  {
    v77 = (unint64_t *)&v113->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v115;
  if (v115)
  {
    v80 = (unint64_t *)&v115->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v117;
  if (v117)
  {
    v83 = (unint64_t *)&v117->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_19150BE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::softmax_kernel::on_resized(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  const void *v4;
  id *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  id *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  const void *v22;
  id *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  __int128 v37;

  if (a3[1] - *a3 >= 0x11uLL && a2[1] - *a2 >= 0x11uLL)
  {
    v4 = (const void *)a1[1];
    if (!v4
    {
      v37 = 0uLL;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v6 = a1[2];
    *(_QWORD *)&v37 = v5;
    *((_QWORD *)&v37 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    objc_msgSend(v5[20], "kernelForFunction:cacheString:withConstants:", "softmax_loss_index_single_tex", 0, 0, (_QWORD)v37);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)a1[47];
    a1[47] = v9;

    if (*((_QWORD *)&v37 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    v13 = (const void *)a1[1];
    if (!v13
    {
      v37 = 0uLL;
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Espresso: wrong_context_type");
      v35->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v15 = a1[2];
    *(_QWORD *)&v37 = v14;
    *((_QWORD *)&v37 + 1) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    objc_msgSend(v14[20], "kernelForFunction:cacheString:withConstants:", "softmax_loss_index_batch", 0, 0, (_QWORD)v37);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)a1[48];
    a1[48] = v18;

    if (*((_QWORD *)&v37 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    v22 = (const void *)a1[1];
    if (!v22
    {
      v37 = 0uLL;
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Espresso: wrong_context_type");
      v36->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v24 = a1[2];
    *(_QWORD *)&v37 = v23;
    *((_QWORD *)&v37 + 1) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = objc_msgSend(v23[18], "newBufferWithLength:options:", 16, 0, (_QWORD)v37);
    v28 = (void *)a1[49];
    a1[49] = v27;

    if (*((_QWORD *)&v37 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    v37 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 50), &v37);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_19150C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = *a3;
  if (*a3 == a3[1])
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1)
        v4 = 4;
      else
        v4 = 5;
    }
    v5 = v4 > 3;
  }
  return !*(_BYTE *)(a1 + 307) && v5;
}

float ___ZN8Espresso9MPSEngine14softmax_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  float result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 400);
  if (v2)
  {
    v3 = *(float **)(v2 + 24);
    result = *v3;
    *(float *)(v1 + 308) = *v3;
  }
  return result;
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA608;
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA608;
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 312) || *(_QWORD *)(a1 + 320)))
  {
    v13 = *(_QWORD *)(a1 + 352);
    v14 = *(_QWORD *)(a1 + 360);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 352);
      v14 = *(_QWORD *)(a1 + 360);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::softmax_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 376) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 352);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 360) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::softmax_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19150C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 312) && !*(_QWORD *)(a1 + 320))
    {
      v11 = *(void ***)(a1 + 352);
      v12 = *(void ***)(a1 + 360);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 360) = v11;
      v13 = *(void ***)(a1 + 376);
      v14 = *(void ***)(a1 + 384);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 384) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 352));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 376));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19150C7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::resize_meta_layer_data(const void *a1, uint64_t a2, const void ***a3, _QWORD *a4)
{
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  int v18;
  const void **v19;
  const void **v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  const void **v33;
  _DWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  const void **v41;
  const void **v42;
  std::vector<int>::pointer end;
  int v44;
  int v45;
  int *v46;
  std::vector<int>::pointer begin;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  __int128 v72;
  char *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  __int128 v96;
  int64x2_t v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::runtime_error *exception;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  unint64_t v133;
  __int128 v134;
  __int128 __p;
  uint64_t v136;
  char *v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  int64x2_t v140;
  char *v141;
  std::vector<int> v142;
  char *v143;
  std::__shared_weak_count *v144;
  id *v145;
  std::__shared_weak_count *v146;
  id *v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  uint64_t v150;
  int64x2_t v151;
  char *v152;
  char **v153;

  if (!a1
  {
    v149 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  *(_QWORD *)&v149 = v7;
  *((_QWORD *)&v149 + 1) = a2;
  if (a2)
  {
    v8 = (unint64_t *)(a2 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *a4;
  v10 = a4[1];
  if (*a4 != v10)
  {
    while (v10 != v11)
    {
      v10 -= 24;
      *(_QWORD *)&v132 = v10;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    }
    a4[1] = v11;
  }
  v12 = *a3;
  if (a3[1] != *a3)
  {
    if (*v12)
    {
      if (v13)
      {
        v14 = (std::__shared_weak_count *)v12[1];
        v147 = v13;
        v148 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          v146 = v14;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        else
        {
          v146 = 0;
        }
        v145 = v13;
        v18 = objc_msgSend(v13[23], "count");
        v19 = *a3;
        v20 = a3[1];
        if (*a3 != v20)
        {
          do
          {
            v22 = (std::__shared_weak_count *)v19[1];
            *(_QWORD *)&v132 = v21;
            *((_QWORD *)&v132 + 1) = v22;
            if (v22)
            {
              v23 = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            v25 = objc_msgSend(v21[23], "count");
            if (v18 <= v25)
              v18 = v25;
            if (v22)
            {
              v26 = (unint64_t *)&v22->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v19 += 2;
          }
          while (v19 != v20);
        }
        v28 = v18;
        v128 = a4 + 2;
        v29 = *a4;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - *a4) >> 3) < v18)
        {
          if (v18 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v30 = a4[1];
          *((_QWORD *)&v134 + 1) = a4 + 2;
          *(_QWORD *)&v132 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v28);
          *((_QWORD *)&v132 + 1) = v132 + v30 - v29;
          v133 = *((_QWORD *)&v132 + 1);
          *(_QWORD *)&v134 = v132 + 24 * v31;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a4, &v132);
          std::__split_buffer<Espresso::layer_data>::~__split_buffer((uint64_t)&v132);
        }
        v32 = operator new(0xA0uLL);
        v32[1] = 0;
        v32[2] = 0;
        *v32 = &off_1E2DC2358;
        *((_OWORD *)v32 + 4) = 0u;
        *((_OWORD *)v32 + 5) = 0u;
        *((_OWORD *)v32 + 7) = 0u;
        *((_OWORD *)v32 + 8) = 0u;
        v32[17] = 0;
        v32[18] = 0;
        *((_OWORD *)v32 + 2) = 0u;
        *((_OWORD *)v32 + 3) = 0u;
        *((_OWORD *)v32 + 6) = 0u;
        *((_DWORD *)v32 + 12) = 1065353216;
        v32[7] = 0x1FFFFFFFFLL;
        v32[8] = 0;
        v32[9] = 0;
        *((_BYTE *)v32 + 88) = 0;
        v32[10] = 0;
        v32[15] = 0;
        v32[16] = 0;
        *((_BYTE *)v32 + 144) = 0;
        v32[12] = 0;
        v32[13] = 0;
        *((_BYTE *)v32 + 112) = 0;
        v32[3] = &off_1E2DAB038;
        v143 = (char *)(v32 + 3);
        v144 = (std::__shared_weak_count *)v32;
        *((_BYTE *)v32 + 145) = 1;
        v32[19] = 0;
        v33 = *a3;
        v35 = (std::__shared_weak_count *)v33[1];
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          v38 = v34[50];
          do
            v39 = __ldaxr(v36);
          while (__stlxr(v39 - 1, v36));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        else
        {
          v38 = v34[50];
        }
        memset(&v142, 0, sizeof(v142));
        std::vector<int>::reserve(&v142, ((char *)a3[1] - (char *)*a3) >> 4);
        v129 = a4;
        if (*((_BYTE *)v145 + 236))
          v40 = *((_DWORD *)v145 + 58);
        else
          v40 = 1;
        v41 = *a3;
        v42 = a3[1];
        if (*a3 != v42)
        {
          end = v142.__end_;
          do
          {
            v44 = *((_DWORD *)*v41 + 6);
            if (v44 <= 1)
              v44 = 1;
            v45 = v44 * *((_DWORD *)*v41 + 5);
            if (end >= v142.__end_cap_.__value_)
            {
              begin = v142.__begin_;
              v48 = end - v142.__begin_;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v50 = (char *)v142.__end_cap_.__value_ - (char *)v142.__begin_;
              if (((char *)v142.__end_cap_.__value_ - (char *)v142.__begin_) >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
                begin = v142.__begin_;
                end = v142.__end_;
              }
              else
              {
                v52 = 0;
              }
              v53 = (int *)(v51 + 4 * v48);
              *v53 = v45;
              v46 = v53 + 1;
              while (end != begin)
              {
                v54 = *--end;
                *--v53 = v54;
              }
              v142.__begin_ = v53;
              v142.__end_ = v46;
              v142.__end_cap_.__value_ = (int *)(v51 + 4 * v52);
              if (begin)
                operator delete(begin);
            }
            else
            {
              *end = v45;
              v46 = end + 1;
            }
            v142.__end_ = v46;
            v41 += 2;
            end = v46;
          }
          while (v41 != v42);
        }
        if ((int)v28 >= 1)
        {
          v55 = 0;
          do
          {
            v140 = 0uLL;
            v141 = 0;
            if (a3[1] != *a3)
            {
              v56 = 0;
              do
              {
                v57 = operator new(0x130uLL);
                v58 = v57;
                v57[1] = 0;
                v57[2] = 0;
                *v57 = &off_1E2DC1CC8;
                v59 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                v132 = v149;
                if (*((_QWORD *)&v149 + 1))
                {
                  v60 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                }
                Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v57 + 3), &v132, v38);
                v58[3] = &off_1E2DA8120;
                *((_DWORD *)v58 + 64) = 1;
                *((_BYTE *)v58 + 260) = 0;
                *(_OWORD *)(v58 + 33) = 0u;
                *(_OWORD *)(v58 + 35) = 0u;
                v58[37] = 0;
                if (v59)
                {
                  v62 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                *(_QWORD *)&v139 = v58 + 3;
                *((_QWORD *)&v139 + 1) = v58;
                *((_DWORD *)v58 + 64) = v40;
                *((_BYTE *)v58 + 260) = *((_BYTE *)v145 + 236);
                v64 = v142.__begin_[v56];
                v65 = v55;
                if (v55 >= v64)
                {
                  if (v64 >= 2)
                    Espresso::throw_exception_selector<Espresso::generic_error>("must be broadcastable across n*s if there is n*s mismatch.");
                  v65 = 0;
                }
                v66 = (uint64_t)&(*a3)[2 * v56];
                v137 = v67;
                v68 = *(std::__shared_weak_count **)(v66 + 8);
                v138 = v68;
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldxr(v69);
                  while (__stxr(v70 + 1, v69));
                }
                v71 = *((_DWORD *)v67 + 6);
                v72 = *(_OWORD *)(v67 + 8);
                v136 = 0;
                v134 = 0u;
                __p = 0u;
                v132 = v72;
                v133 = v71 | 0xFFFFFFFF00000000;
                v73 = v143;
                *((_QWORD *)v143 + 16) = v65;
                if (v68)
                {
                  v74 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v75 = __ldxr(v74);
                  while (__stxr(v75 + 1, v74));
                }
                v76 = (std::__shared_weak_count *)*((_QWORD *)v73 + 14);
                *((_QWORD *)v73 + 13) = v67;
                *((_QWORD *)v73 + 14) = v68;
                if (v76)
                {
                  v77 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v79 = v139;
                v130 = v73;
                v131 = v144;
                if (v144)
                {
                  v80 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v81 = __ldxr(v80);
                  while (__stxr(v81 + 1, v80));
                }
                (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v79 + 16))(v79, &v132, &v130);
                v82 = v131;
                if (v131)
                {
                  v83 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                v85 = v140.i64[1];
                if (v140.i64[1] >= (unint64_t)v141)
                {
                  v87 = (v140.i64[1] - v140.i64[0]) >> 4;
                  if ((unint64_t)(v87 + 1) >> 60)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v88 = (uint64_t)&v141[-v140.i64[0]] >> 3;
                  if (v88 <= v87 + 1)
                    v88 = v87 + 1;
                  if ((unint64_t)&v141[-v140.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
                    v89 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v89 = v88;
                  v153 = &v141;
                  v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v89);
                  v92 = &v90[16 * v87];
                  *(_OWORD *)v92 = v139;
                  v139 = 0uLL;
                  v93 = (_QWORD *)v140.i64[1];
                  v94 = (_QWORD *)v140.i64[0];
                  if (v140.i64[1] == v140.i64[0])
                  {
                    v97 = vdupq_n_s64(v140.u64[1]);
                    v95 = &v90[16 * v87];
                  }
                  else
                  {
                    v95 = &v90[16 * v87];
                    do
                    {
                      v96 = *((_OWORD *)v93 - 1);
                      v93 -= 2;
                      *((_OWORD *)v95 - 1) = v96;
                      v95 -= 16;
                      *v93 = 0;
                      v93[1] = 0;
                    }
                    while (v93 != v94);
                    v97 = v140;
                  }
                  v86 = v92 + 16;
                  v140.i64[0] = (uint64_t)v95;
                  v140.i64[1] = (uint64_t)(v92 + 16);
                  v151 = v97;
                  v98 = v141;
                  v141 = &v90[16 * v91];
                  v152 = v98;
                  v150 = v97.i64[0];
                  std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v150);
                }
                else
                {
                  *(_OWORD *)v140.i64[1] = v139;
                  v86 = (_OWORD *)(v85 + 16);
                  v139 = 0uLL;
                }
                v140.i64[1] = (uint64_t)v86;
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                v99 = v138;
                if (v138)
                {
                  v100 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                v102 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
                if (*((_QWORD *)&v139 + 1))
                {
                  v103 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                ++v56;
              }
              while (v56 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            v106 = v129[1];
            v105 = v129[2];
            if (v106 >= v105)
            {
              v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - *v129) >> 3);
              v110 = v109 + 1;
              if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - *v129) >> 3);
              if (2 * v111 > v110)
                v110 = 2 * v111;
              if (v111 >= 0x555555555555555)
                v112 = 0xAAAAAAAAAAAAAAALL;
              else
                v112 = v110;
              *((_QWORD *)&v134 + 1) = v128;
              if (v112)
                v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v112);
              else
                v113 = 0;
              v114 = v112 + 24 * v109;
              *(_QWORD *)&v132 = v112;
              *((_QWORD *)&v132 + 1) = v114;
              v133 = v114;
              *(_QWORD *)&v134 = v112 + 24 * v113;
              *(_QWORD *)v114 = 0;
              *(_QWORD *)(v114 + 8) = 0;
              *(_QWORD *)(v114 + 16) = 0;
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v114, v140.i64[0], (_QWORD *)v140.i64[1], (v140.i64[1] - v140.i64[0]) >> 4);
              v133 += 24;
              v108 = v129;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v129, &v132);
              v107 = v129[1];
              std::__split_buffer<Espresso::layer_data>::~__split_buffer((uint64_t)&v132);
            }
            else
            {
              *(_QWORD *)v106 = 0;
              *(_QWORD *)(v106 + 8) = 0;
              *(_QWORD *)(v106 + 16) = 0;
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v106, v140.i64[0], (_QWORD *)v140.i64[1], (v140.i64[1] - v140.i64[0]) >> 4);
              v107 = v106 + 24;
              v108 = v129;
              v129[1] = v107;
            }
            v108[1] = v107;
            *(_QWORD *)&v132 = &v140;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
            ++v55;
          }
          while (v55 != (_DWORD)v28);
        }
        if (v142.__begin_)
        {
          v142.__end_ = v142.__begin_;
          operator delete(v142.__begin_);
        }
        v115 = v144;
        if (v144)
        {
          v116 = (unint64_t *)&v144->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v118 = v146;
        if (v146)
        {
          v119 = (unint64_t *)&v146->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = v148;
        if (v148)
        {
          v122 = (unint64_t *)&v148->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
      }
    }
  }
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
}

void sub_19150D2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 144);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::blob_container(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  id *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const __CFAllocator *v16;
  id v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)a1 = off_1E2D8F108;
  *(_DWORD *)(a1 + 28) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 80) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 124) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 128) = 0uLL;
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_QWORD *)a1 = &off_1E2D7E008;
  *(_OWORD *)(a1 + 160) = 0uLL;
  *(_OWORD *)(a1 + 176) = 0uLL;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = a3;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v7 = (char *)operator new(0x88uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E2DBAC90;
  v8 = *(const void **)(a1 + 72);
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *((_OWORD *)v7 + 7) = 0u;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 3) = v7 + 32;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *((_QWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 11) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 9) = v7 + 80;
  *((_OWORD *)v7 + 6) = 0u;
  if (!v8
  {
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Not a metal context.");
  }
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
  }
  *((_QWORD *)v7 + 14) = v12;
  *((_QWORD *)v7 + 15) = v9;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = v12[18];
  CVMetalTextureCacheCreate(v16, 0, v17, 0, (CVMetalTextureCacheRef *)v7 + 16);
  if (!*((_QWORD *)v7 + 16))
    Espresso::throw_exception_selector<Espresso::memory_error>("Failed to create metal texture cache.");

  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v9)
  {
    v20 = (unint64_t *)&v9->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 216) = v7 + 24;
  *(_QWORD *)(a1 + 224) = v7;
  return a1;
}

void sub_19150D67C(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::__on_zero_shared(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 128);
  if (v2)
    CFRelease(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 96);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(_QWORD **)(a1 + 56));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19150D884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::layer_data>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::inner_product_kernel::~inner_product_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::inner_product_kernel::__launch(Espresso::MPSEngine::inner_product_kernel *this, uint64_t a2, uint64_t **a3, const void ***a4)
{
  const void **v8;
  unint64_t v9;
  const void *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  EspressoTrainingInnerProductWeightsForMPS *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  EspressoTrainingInnerProductWeightsForMPS *v26;
  int v27;
  void *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  const void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  const void **v56;
  const void *v57;
  void *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  id v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::runtime_error *exception;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  int v101;
  void *__p;
  void *v103;
  _OWORD v104[8];
  int v105;
  id *v106;
  std::__shared_weak_count *v107;
  id *v108;
  std::__shared_weak_count *v109;

  if (!*((_QWORD *)this + 68))
  {
    if (!*(_QWORD *)(*((_QWORD *)this + 69) + 192))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v104, *((_DWORD *)this + 76), 1, 1, 1);
      v93 = *(_QWORD *)&v104[0];
      v94 = *(int *)(*(_QWORD *)&v104[0] + 8);
      if ((_DWORD)v94)
        bzero(*(void **)(*(_QWORD *)&v104[0] + 16), 4 * v94);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v104[0] + 1);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 192), v93, *((uint64_t *)&v104[0] + 1));
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(p_shared_owners);
        while (__stlxr(v97 - 1, p_shared_owners));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
    Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
  }
  v8 = *a4;
  v9 = (char *)a4[1] - (char *)*a4;
  if (v9 >= 0x11)
  {
    v10 = v8[2];
    if (v10)
    {
      if (v11)
      {
        v12 = (std::__shared_weak_count *)v8[3];
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v8 = *a4;
          v9 = (char *)a4[1] - (char *)*a4;
        }
LABEL_13:
        v108 = v11;
        v109 = v12;
        if (v9 >= 0x21 && (v15 = v8[4]) != 0)
        {
          if (v16)
          {
            v17 = (std::__shared_weak_count *)v8[5];
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
LABEL_22:
            v106 = v16;
            v107 = v17;
            if (v11)
            {
              v20 = v11[21];
              if (!v16)
                goto LABEL_25;
            }
            else
            {
              v20 = 0;
              if (!v16)
              {
LABEL_25:
                if (!*((_QWORD *)this + 68) || *((_BYTE *)this + 600))
                {
                  v21 = [EspressoTrainingInnerProductWeightsForMPS alloc];
                  v105 = *((_DWORD *)this + 108);
                  v22 = *((_OWORD *)this + 26);
                  v104[6] = *((_OWORD *)this + 25);
                  v104[7] = v22;
                  v23 = *((_OWORD *)this + 22);
                  v104[2] = *((_OWORD *)this + 21);
                  v104[3] = v23;
                  v24 = *((_OWORD *)this + 24);
                  v104[4] = *((_OWORD *)this + 23);
                  v104[5] = v24;
                  v25 = *((_OWORD *)this + 20);
                  v104[0] = *((_OWORD *)this + 19);
                  v104[1] = v25;
                  v26 = -[EspressoTrainingInnerProductWeightsForMPS initWithParams:forMode:](v21, "initWithParams:forMode:", v104, *(unsigned __int8 *)(*((_QWORD *)this + 1) + 114));
                  -[EspressoTrainingInnerProductWeightsForMPS setWeightsBuffer:](v26, "setWeightsBuffer:", v20);
                  -[EspressoTrainingInnerProductWeightsForMPS setBiasesBuffer:](v26, "setBiasesBuffer:", v16);
                  v27 = 268435488;
                  if (v11)
                  {
                    if ((*((unsigned int (**)(id *))*v11 + 4))(v11) == 1)
                      v27 = 268435472;
                    else
                      v27 = 268435488;
                  }
                  v26->super.data_type = v27;
                  objc_storeStrong((id *)this + 69, v26);
                  Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
                  *((_BYTE *)this + 600) = 0;

                }
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
                if (!v16)
                {
                  v28 = (void *)*((_QWORD *)this + 74);
                  if (!v28)
                  {
                    Espresso::abstract_blob_container::shape((char *)&v99, **a3);
                    v29 = v101 > 3 || v101 == -1;
                    v30 = 8;
                    if (v29)
                      v30 = 16;
                    v31 = *(int *)(**a3 + v30);
                    if (__p)
                    {
                      v103 = __p;
                      operator delete(__p);
                    }
                    objc_msgSend(v20, "device");
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    v33 = objc_msgSend(v32, "newBufferWithLength:options:", 4 * v31, 0);
                    v34 = (void *)*((_QWORD *)this + 74);
                    *((_QWORD *)this + 74) = v33;

                    v28 = (void *)*((_QWORD *)this + 74);
                  }
                  v16 = v28;
                }
                v35 = objc_alloc(MEMORY[0x1E0CC6CD8]);
                v36 = (void *)objc_msgSend(v35, "initWithWeights:biases:", v20, v16);

                v38 = *(std::__shared_weak_count **)(a2 + 8);
                v99 = v37;
                v100 = v38;
                if (v38)
                {
                  v39 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v40 = __ldxr(v39);
                  while (__stxr(v40 + 1, v39));
                }
                objc_msgSend(*((id *)this + 68), "reloadWeightsAndBiasesWithCommandBuffer:state:", v37[18], v36, v99, v100);
                if (v38)
                {
                  v41 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v42 = __ldaxr(v41);
                  while (__stlxr(v42 - 1, v41));
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }

                v43 = v107;
                if (v107)
                {
                  v44 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 - 1, v44));
                  if (!v45)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                v46 = v109;
                if (v109)
                {
                  v47 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                goto LABEL_62;
              }
            }
            v16 = (id *)v16[21];
            goto LABEL_25;
          }
        }
        else
        {
          v16 = 0;
        }
        v17 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 0;
    goto LABEL_13;
  }
LABEL_62:
  if (!*((_QWORD *)this + 68))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = *a3;
  v50 = (const void *)**a3;
  if (v50
  {
    v52 = v51;
    v53 = v49[1];
    *(_QWORD *)&v104[0] = v51;
    *((_QWORD *)&v104[0] + 1) = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
  }
  else
  {
    v52 = 0;
    v104[0] = 0uLL;
  }
  v56 = *a4;
  v57 = **a4;
  if (v57
  {
    v59 = v58;
    v60 = (std::__shared_weak_count *)v56[1];
    v99 = v58;
    v100 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
  }
  else
  {
    v59 = 0;
    v99 = 0;
    v100 = 0;
  }
  if (*(_QWORD *)a2
  {
    v64 = v63;
    v65 = *(std::__shared_weak_count **)(a2 + 8);
    v108 = (id *)v63;
    v109 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
  }
  else
  {
    v65 = 0;
    v64 = 0;
    v108 = 0;
    v109 = 0;
  }
  v68 = (void *)*((_QWORD *)v52 + 32);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x11)
  {
    v73 = objc_msgSend(v68, "count", v99);
    v74 = (void *)*((_QWORD *)this + 68);
    v75 = v64[18];
    if (v73 >= 2)
    {
      objc_msgSend(v74, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v75, *((_QWORD *)v59 + 32), *((_QWORD *)v52 + 32));
      goto LABEL_92;
    }
    v82 = *((id *)v59 + 30);
    v84 = *((id *)v52 + 30);
    objc_msgSend(v74, "encodeToCommandBuffer:sourceImage:destinationImage:", v75, v82, v84);
LABEL_91:

    goto LABEL_92;
  }
  v69 = objc_msgSend(v68, "count", v99);
  v70 = (void *)*((_QWORD *)this + 68);
  if (v69 < 2)
  {
    v76 = *((id *)v59 + 30);
    v77 = *((id *)v52 + 30);
    objc_msgSend(v70, "resultStateForSourceImage:sourceStates:destinationImage:", v76, 0, v77);
    v78 = objc_claimAutoreleasedReturnValue();
    v79 = (void *)*((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = v78;

    v80 = (void *)*((_QWORD *)this + 68);
    v81 = v64[18];
    v82 = *((id *)v59 + 30);
    v83 = *((_QWORD *)this + 72);
    v84 = *((id *)v52 + 30);
    objc_msgSend(v80, "encodeToCommandBuffer:sourceImage:destinationState:destinationImage:", v81, v82, v83, v84);
    goto LABEL_91;
  }
  objc_msgSend(*((id *)this + 68), "resultStateBatchForSourceImage:sourceStates:destinationImage:", *((_QWORD *)v59 + 32), 0, *((_QWORD *)v52 + 32));
  v71 = objc_claimAutoreleasedReturnValue();
  v72 = (void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v71;

  objc_msgSend(*((id *)this + 68), "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationImages:", v64[18], *((_QWORD *)v59 + 32), *((_QWORD *)this + 73), *((_QWORD *)v52 + 32));
LABEL_92:
  if (v65)
  {
    v85 = (unint64_t *)&v65->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v87 = v100;
  if (v100)
  {
    v88 = (unint64_t *)&v100->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v104[0] + 1);
  if (*((_QWORD *)&v104[0] + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v104[0] + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_19150E26C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::blob_options(Espresso::MPSEngine::inner_product_kernel *this@<X0>, char a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;

  *a4 = 0;
  a4[1] = 0;
  if (a3 >= 1 && (a2 & 1) == 0)
  {
    v5 = (const void *)*((_QWORD *)this + 1);
    if (v5)
    {
      if (v7)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v19 = v7;
        v20 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v18 = v11 + 3;
        *((_QWORD *)&v18 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v18);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v19[28], v19[29]);
        v15 = v20;
        if (v20)
        {
          v16 = (unint64_t *)&v20->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
  }
}

void sub_19150E484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::share_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v2 = *a2;
  if (*a2 && *(void (***)(Espresso::MPSEngine::inner_product_kernel *__hidden))v2 == &off_1E2DA90F8)
  {
    v3 = (std::__shared_weak_count *)a2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      objc_storeStrong((id *)(a1 + 544), *(id *)(v2 + 544));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      objc_storeStrong((id *)(a1 + 544), *(id *)(v2 + 544));
    }
  }
}

void Espresso::MPSEngine::inner_product_kernel::clear_weights(Espresso::MPSEngine::inner_product_kernel *this)
{
  char *v2;
  _QWORD *v3;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 62);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 144));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 160));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 176));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 192));
  v3 = (_QWORD *)*((_QWORD *)this + 70);
  if (v3)
  {
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v3);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 70) + 16));
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 70);
}

void Espresso::MPSEngine::inner_product_kernel::on_resized(Espresso::MPSEngine::inner_product_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (!*((_QWORD *)this + 68))
  {
    if (!*(_QWORD *)(*((_QWORD *)this + 69) + 192))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v9, *((_DWORD *)this + 76), 1, 1, 1);
      v4 = v9;
      v5 = *(int *)(v9 + 8);
      if ((_DWORD)v5)
        bzero(*(void **)(v9 + 16), 4 * v5);
      v6 = v10;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 69) + 192), v4, (uint64_t)v10);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
  }
}

void Espresso::MPSEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6, double a7, double a8, int32x2_t a9)
{
  int v14;
  BOOL v15;
  int *v16;
  int v17;
  int v18;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _WORD *v80;
  uint64_t v81;
  _WORD *v82;
  _WORD *v83;
  _WORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  __int128 v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113[2];
  __int128 v114;
  __int128 v115;
  uint64_t v116[2];
  uint64_t v117[2];
  uint64_t v118[2];
  uint64_t v119[2];
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v121 = 0;
  v122 = 0;
  if (a6)
  {
    a2 = *a6;
    if (*a6)
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v121, a2, a6[1]);
  }
  if (((char)a3[23] & 0x80000000) == 0)
  {
    v14 = a3[23];
    if (v14 != 1)
    {
      if (v14 != 5)
      {
        if (v14 == 7)
        {
          v15 = *(_DWORD *)a3 == 828792695 && *(_DWORD *)(a3 + 3) == 1952396849;
          v16 = (int *)a3;
          if (!v15)
            goto LABEL_12;
          goto LABEL_42;
        }
LABEL_89:
        v58 = *(_QWORD *)(a1 + 560);
        if (!v58)
        {
          LODWORD(v115) = 1;
          v109 = 1;
          std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (int *)&v115, &v109, (int *)(a1 + 308), (int *)(a1 + 304));
          v59 = (uint64_t *)(a1 + 560);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v59, &v120);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
          if (*((_QWORD *)&v120 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v58 = *v59;
        }
        Espresso::quantized_weights_helper::__set_weight_raw_blob(v58, a7, a8, a9, a2, (uint64_t)a3, a4, a5, a6);
        goto LABEL_173;
      }
      if (*(_DWORD *)a3 != 828792663 || a3[4] != 54)
        goto LABEL_89;
      goto LABEL_97;
    }
    v45 = *a3;
    if (v45 != 98)
    {
      if (v45 != 87)
        goto LABEL_89;
      goto LABEL_109;
    }
    goto LABEL_70;
  }
  v32 = *((_QWORD *)a3 + 1);
  if (v32 == 1)
  {
    v47 = **(unsigned __int8 **)a3;
    if (v47 == 87)
    {
LABEL_109:
      v71 = (std::__shared_weak_count *)v122;
      v119[0] = v121;
      v119[1] = v122;
      if (v122)
      {
        v72 = (unint64_t *)(v122 + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v119, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v71)
      {
        p_shared_owners = (unint64_t *)&v71->__shared_owners_;
        do
          v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v76 = v120;
      if (*((_QWORD *)&v120 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 144), v76, *((uint64_t *)&v76 + 1));
        *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435488;
        do
          v79 = __ldaxr(v77);
        while (__stlxr(v79 - 1, v77));
        if (!v79)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v76 + 1));
        }
      }
      else
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 144), v120, 0);
        *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435488;
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      if (!*((_QWORD *)&v120 + 1))
        goto LABEL_173;
      v93 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v70 = __ldaxr(v93);
      while (__stlxr(v70 - 1, v93));
      goto LABEL_171;
    }
    if (v47 != 98)
      goto LABEL_89;
LABEL_70:
    v48 = (std::__shared_weak_count *)v122;
    v117[0] = v121;
    v117[1] = v122;
    if (v122)
    {
      v49 = (unint64_t *)(v122 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v117, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    if (v48)
    {
      v51 = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v53 = v120;
    if (*((_QWORD *)&v120 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 192), v53, *((uint64_t *)&v53 + 1));
      do
        v56 = __ldaxr(v54);
      while (__stlxr(v56 - 1, v54));
      if (!v56)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 192), v120, 0);
    }
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    if (!*((_QWORD *)&v120 + 1))
      goto LABEL_173;
    v92 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v70 = __ldaxr(v92);
    while (__stlxr(v70 - 1, v92));
LABEL_171:
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    goto LABEL_173;
  }
  if (v32 == 5)
  {
    if (**(_DWORD **)a3 != 828792663 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 54)
      goto LABEL_89;
LABEL_97:
    v63 = (std::__shared_weak_count *)v122;
    v118[0] = v121;
    v118[1] = v122;
    if (v122)
    {
      v64 = (unint64_t *)(v122 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v118, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    if (v63)
    {
      v66 = (unint64_t *)&v63->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 160), v120, *((uint64_t *)&v120 + 1));
    *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435472;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    if (!*((_QWORD *)&v120 + 1))
      goto LABEL_173;
    v69 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    goto LABEL_171;
  }
  if (v32 != 7)
    goto LABEL_89;
  v16 = *(int **)a3;
  if (**(_DWORD **)a3 == 828792695 && *(_DWORD *)(*(_QWORD *)a3 + 3) == 1952396849)
  {
LABEL_42:
    *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435472;
    v34 = (std::__shared_weak_count *)v122;
    v116[0] = v121;
    v116[1] = v122;
    if (v122)
    {
      v35 = (unint64_t *)(v122 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v116, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    if (v34)
    {
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v39 = v120;
    v114 = v120;
    if (*((_QWORD *)&v120 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(unsigned int *)(v39 + 8);
    v43 = *(int *)(v39 + 12);
    if ((_DWORD)v43)
      v44 = (_DWORD)v42 == 0;
    else
      v44 = 1;
    if (v44)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v115, (int *)(v39 + 8));
      memcpy(*(void **)(v115 + 16), *(const void **)(v39 + 16), 2 * *(int *)(v39 + 8) * (uint64_t)*(int *)(v39 + 12));
    }
    else
    {
      v80 = *(_WORD **)(v39 + 16);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,Espresso::blob<unsigned short,2>::UnitializedBlobType,void>(&v115, *(_DWORD *)(v39 + 8), v43, 1, 1);
      if ((int)v42 >= 1)
      {
        v81 = 0;
        v82 = *(_WORD **)(v115 + 16);
        do
        {
          v83 = v80;
          v84 = v82;
          v85 = v43;
          if ((int)v43 >= 1)
          {
            do
            {
              *v84++ = *v83;
              v83 += v42;
              --v85;
            }
            while (v85);
          }
          ++v81;
          v82 += v43;
          ++v80;
        }
        while (v81 != v42);
      }
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 552) + 160, &v115);
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (*((_QWORD *)&v114 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v114 + 1) + 16))(*((_QWORD *)&v114 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v114 + 1));
      }
    }
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    if (!*((_QWORD *)&v120 + 1))
      goto LABEL_173;
    v91 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v70 = __ldaxr(v91);
    while (__stlxr(v70 - 1, v91));
    goto LABEL_171;
  }
LABEL_12:
  v17 = *v16;
  v18 = *(int *)((char *)v16 + 3);
  if (v17 != 862347127 || v18 != 1952395827)
    goto LABEL_89;
  v20 = (std::__shared_weak_count *)v122;
  v113[0] = v121;
  v113[1] = v122;
  if (v122)
  {
    v21 = (unint64_t *)(v122 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v120, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v113, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = v120;
  v110 = v120;
  if (*((_QWORD *)&v120 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(unsigned int *)(v25 + 8);
  v29 = *(int *)(v25 + 12);
  if ((_DWORD)v29)
    v30 = (_DWORD)v28 == 0;
  else
    v30 = 1;
  if (v30)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v111, (int *)(v25 + 8));
    v31 = v111;
    memcpy(*(void **)(v111 + 16), *(const void **)(v25 + 16), 4 * *(int *)(v25 + 8) * (uint64_t)*(int *)(v25 + 12));
  }
  else
  {
    v94 = *(_DWORD **)(v25 + 16);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v111, *(_DWORD *)(v25 + 8), v29, 1, 1);
    v31 = v111;
    if ((int)v28 >= 1)
    {
      v95 = 0;
      v96 = *(_DWORD **)(v111 + 16);
      do
      {
        v97 = v94;
        v98 = v96;
        v99 = v29;
        if ((int)v29 >= 1)
        {
          do
          {
            *v98++ = *v97;
            v97 += v28;
            --v99;
          }
          while (v99);
        }
        ++v95;
        v96 += v29;
        ++v94;
      }
      while (v95 != v28);
    }
  }
  v100 = v112;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 144), v31, (uint64_t)v112);
  *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435488;
  if (v100)
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (*((_QWORD *)&v110 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 16))(*((_QWORD *)&v110 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v70 = __ldaxr(v105);
    while (__stlxr(v70 - 1, v105));
    goto LABEL_171;
  }
LABEL_173:
  v106 = (std::__shared_weak_count *)v122;
  if (v122)
  {
    v107 = (unint64_t *)(v122 + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

void sub_19150F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::__set_weights_finalize(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int32x2_t v21;
  int *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v3 = a1[70];
  if (!v3)
    return;
  if (!*(_QWORD *)v3)
    return;
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5 && !*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && !*(_QWORD *)(v3 + 80))
    return;
  if (*(_DWORD *)(a1[1] + 76))
  {
    Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v3, &v51);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1[69] + 144), v51, (uint64_t)v52);
    *(_DWORD *)(a1[69] + 240) = 268435488;
    v6 = v52;
    if (!v52)
      return;
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    goto LABEL_61;
  }
  if (*(int *)(v3 + 156) <= 7)
  {
    Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
    v3 = a1[70];
    v5 = *(_QWORD *)(v3 + 32);
  }
  if (v5 || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 64) || !*(_QWORD *)(v3 + 80))
  {
    v9 = *(std::__shared_weak_count **)(v3 + 40);
    v57 = v5;
    v58 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)a2[1];
    v55 = *a2;
    v56 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15.n128_f32[0] = Espresso::MPSEngine::inner_product_kernel::set_quantization_lut_blob((uint64_t)a1, (uint64_t)&v57);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v15);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v18 = v58;
    if (v58)
    {
      v19 = (unint64_t *)&v58->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_31;
    }
  }
  else
  {
    Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, &v63);
    v61 = v63;
    v62 = v64;
    if (v64)
    {
      v40 = (unint64_t *)&v64->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (std::__shared_weak_count *)a2[1];
    v59 = *a2;
    v60 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v15.n128_u64[0] = Espresso::MPSEngine::inner_product_kernel::set_quantization_ranges_blob((uint64_t)a1, (uint64_t)&v61).n64_u64[0];
    if (v42)
    {
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v15);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v47 = v62;
    if (v62)
    {
      v48 = (unint64_t *)&v62->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v15);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v18 = v64;
    if (v64)
    {
      v50 = (unint64_t *)&v64->__shared_owners_;
      do
        v20 = __ldaxr(v50);
      while (__stlxr(v20 - 1, v50));
LABEL_31:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v15);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = (int32x2_t)a1[38];
  v22 = (int *)a1[70];
  if (v22[40] >= 1 && (v23 = *((_QWORD *)v22 + 2)) != 0)
  {
    v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 3);
  }
  else
  {
    v23 = *(_QWORD *)v22;
    v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
  }
  v63 = v23;
  v64 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)operator new(0x58uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED88;
  v29 = *(_QWORD *)(v23 + 16);
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1270;
  v27[3].std::__shared_count = 0u;
  *(_OWORD *)&v27[2].__shared_owners_ = 0u;
  v27[1].__shared_owners_ = (uint64_t)vrev64_s32(v21);
  v27[1].__shared_weak_owners_ = v29;
  LOBYTE(v27[2].__vftable) = 0;
  v53 = v27 + 1;
  v54 = v27;
  do
    v30 = __ldxr(v28);
  while (__stxr(v30 + 1, v28));
  v31 = (std::__shared_weak_count *)a2[1];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob((uint64_t)a1, (uint64_t *)&v53);
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  else
  {
    Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob((uint64_t)a1, (uint64_t *)&v53);
  }
  v35 = v54;
  if (v54)
  {
    v36 = (unint64_t *)&v54->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  do
    v38 = __ldaxr(v28);
  while (__stlxr(v38 - 1, v28));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v6 = v64;
  if (v64)
  {
    v39 = (unint64_t *)&v64->__shared_owners_;
    do
      v8 = __ldaxr(v39);
    while (__stlxr(v8 - 1, v39));
LABEL_61:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19150F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 80);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MPSEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 192), *a2, a2[1]);
}

_QWORD *Espresso::MPSEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 144), *a2, a2[1]);
  *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 268435488;
  return result;
}

void Espresso::MPSEngine::inner_product_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSEngine::inner_product_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 552) + 176), *a2, a2[1]);
  v6 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 552) + 144, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 552) + 240) = 8;
}

__n64 Espresso::MPSEngine::inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  __n64 result;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n64 *v14;
  __int128 v15;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBEA78;
  *((_QWORD *)v4 + 3) = &off_1E2DA10B0;
  v5 = *(int *)(a1 + 304);
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 8) = v5;
  v6 = 8 * v5;
  v7 = Espresso::kern_alloc_uninitialized((Espresso *)(8 * v5));
  bzero(v7, v6);
  *((_QWORD *)v4 + 5) = v7;
  v4[48] = 1;
  *(_QWORD *)&v15 = v4 + 24;
  *((_QWORD *)&v15 + 1) = v4;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 552) + 208, &v15);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 208);
  if (!v12)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  if (*(_DWORD *)(a1 + 304))
  {
    v13 = 0;
    v14 = *(__n64 **)(v12 + 16);
    do
    {
      result.n64_u32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 4 * v13);
      v14->n64_u32[0] = result.n64_u32[0];
      result.n64_u32[1] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16)
                                    + 4 * (v13 + *(_DWORD *)(a1 + 304)));
      v14->n64_u64[0] = result.n64_u64[0];
      ++v14;
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 304));
  }
  return result;
}

void sub_19150F788(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

float Espresso::MPSEngine::inner_product_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;
  __int128 v12;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v12, 256, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 552) + 224, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 224);
  if (!v7)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v10 = *(_QWORD *)(v7 + 16);
  do
  {
    result = *(float *)(v9 + v8);
    *(float *)(v10 + v8) = result;
    v8 += 4;
  }
  while (v8 != 1024);
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,Espresso::blob<unsigned short,2>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  void *result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEFF0;
  *((_QWORD *)v10 + 3) = &off_1E2DA13D0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19150F92C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::recreate_kernel(Espresso::MPSEngine::inner_product_kernel *this)
{
  const void *v2;
  id *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  std::runtime_error *exception;
  std::runtime_error *v19;
  id v20;
  __int128 v21;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (!v2
  {
    v21 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *(_QWORD *)&v21 = v3;
  *((_QWORD *)&v21 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v20 = v3[18];
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v20 = v3[18];
  }
  v8 = (_QWORD *)*((_QWORD *)this + 69);
  if (!*((_DWORD *)this + 78) && !v8[24])
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v21, *((_DWORD *)this + 76), 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)this + 69) + 192, &v21);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v8 = (_QWORD *)*((_QWORD *)this + 69);
    v12 = v8[24];
    v13 = *(int *)(v12 + 8);
    if ((_DWORD)v13)
      bzero(*(void **)(v12 + 16), 4 * v13);
  }
  if (objc_msgSend(v8, "ready"))
  {
    v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D00]), "initWithDevice:weights:", v20, *((_QWORD *)this + 69));
    v15 = (void *)*((_QWORD *)this + 68);
    *((_QWORD *)this + 68) = v14;

    if (!*((_QWORD *)this + 68))
    {
      v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v19, "Error creating mps kernel");
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
    {
      v16 = (_QWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
        v16 = (_QWORD *)*v16;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*((id *)this + 68), "setLabel:", v17);

    }
  }

}

void sub_19150FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::upsample_kernel::~upsample_kernel(id *this)
{
  *this = &off_1E2DA84B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  *this = &off_1E2DA84B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::upsample_kernel::__launch(_QWORD *a1, uint64_t a2, const void ***a3, const void ***a4)
{
  uint64_t v8;
  const void **v9;
  const void *v10;
  id *v11;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void **v16;
  const void *v17;
  id *v18;
  id *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  void *v40;
  std::__shared_weak_count *v41;
  id *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;

  v8 = a1[48];
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, const void ***, const void ***))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
    return;
  }
  if (!a1[47])
  {
    (*(void (**)(_QWORD *, const void ***, const void ***))(*a1 + 80))(a1, a3, a4);
    if (!a1[47])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "The mps kernel was not created");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v9 = *a3;
  v10 = **a3;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v44 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v44 = 0;
  }
  v16 = *a4;
  v17 = **a4;
  if (v17
  {
    v19 = v18;
    v20 = (std::__shared_weak_count *)v16[1];
    v42 = v18;
    v43 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v19 = 0;
    v42 = 0;
    v43 = 0;
  }
  if (*(_QWORD *)a2
  {
    v24 = v23;
    v25 = *(std::__shared_weak_count **)(a2 + 8);
    v40 = v23;
    v41 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v40 = 0;
    v41 = 0;
  }
  v28 = objc_msgSend(v12[32], "count", v40, v41, v42);
  v29 = (void *)a1[47];
  v30 = v24[18];
  if (v28 < 2)
  {
    v31 = v19[30];
    v32 = v12[30];
    objc_msgSend(v29, "encodeToCommandBuffer:sourceImage:destinationImage:", v30, v31, v32);

    if (!v25)
      goto LABEL_34;
LABEL_30:
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_34;
  }
  objc_msgSend(v29, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v30, v19[32], v12[32]);
  if (v25)
    goto LABEL_30;
LABEL_34:
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19150FF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::upsample_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  void *v29;
  std::__shared_weak_count *v30;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    if (*(_QWORD *)v3)
    {
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v3 + 8);
        v29 = v7;
        v30 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = *(const void **)(a1 + 8);
        if (!v11
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
        }
        v13 = *(std::__shared_weak_count **)(a1 + 16);
        v27 = v12;
        v28 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(_DWORD *)(a1 + 292);
        if (v16 == 1)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 384) + 80))(*(_QWORD *)(a1 + 384), a2, a3);
        }
        else
        {
          if (!v16)
          {
            v17 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6DC8]), "initWithDevice:integerScaleFactorX:integerScaleFactorY:", v12[18], *(int *)(a1 + 284), *(int *)(a1 + 288), v12, v13, v29);
            v18 = *(void **)(a1 + 376);
            *(_QWORD *)(a1 + 376) = v17;

          }
          if (!*(_QWORD *)(a1 + 376))
          {
            v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Error creating mps kernel");
            __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
          {
            v19 = (_QWORD *)(a1 + 176);
            if (*(char *)(a1 + 199) < 0)
              v19 = (_QWORD *)*v19;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19, v27, v28);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 376), "setLabel:", v20);

          }
        }
        if (v13)
        {
          v21 = (unint64_t *)&v13->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v30)
        {
          v23 = (unint64_t *)&v30->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
  }
}

void sub_19151020C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::upsample_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 304) || *(_DWORD *)(a1 + 292) != 0;
}

void Espresso::MPSEngine::crop_and_resize_kernel::~crop_and_resize_kernel(Espresso::MPSEngine::crop_and_resize_kernel *this)
{
  *(_QWORD *)this = &off_1E2DAB058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2DAB058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::crop_and_resize_kernel::__launch(uint64_t a1)
{
  uint64_t v1;
  std::runtime_error *exception;

  v1 = *(_QWORD *)(a1 + 384);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Metal kernel for crop_and_resize not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

void sub_191510350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 384);
  if (!v2)
    return 0;
  v3 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 200))(v2, &v11);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_191510404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::activation_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  const void **v8;
  const void *v9;
  id *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  id *v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  void *v39;
  std::__shared_weak_count *v40;
  id *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;

  v7 = *(_QWORD *)(a1 + 424);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, const void ***, const void ***))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4);
    return;
  }
  if (!*(_QWORD *)(a1 + 416))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *a3;
  v9 = **a3;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v43 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v43 = 0;
  }
  v15 = *a4;
  v16 = **a4;
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v15[1];
    v41 = v17;
    v42 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v41 = 0;
    v42 = 0;
  }
  if (*(_QWORD *)a2
  {
    v23 = v22;
    v24 = *(std::__shared_weak_count **)(a2 + 8);
    v39 = v22;
    v40 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v39 = 0;
    v40 = 0;
  }
  v27 = objc_msgSend(v11[32], "count", v39, v40, v41);
  v28 = *(void **)(a1 + 416);
  v29 = v23[18];
  if (v27 < 2)
  {
    v30 = v18[30];
    v31 = v11[30];
    objc_msgSend(v28, "encodeToCommandBuffer:sourceImage:destinationImage:", v29, v30, v31);

    if (!v24)
      goto LABEL_33;
LABEL_29:
    v32 = (unint64_t *)&v24->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_33;
  }
  objc_msgSend(v28, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v29, v18[32], v11[32]);
  if (v24)
    goto LABEL_29;
LABEL_33:
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_19151070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 424);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  return result;
}

void Espresso::MPSEngine::activation_kernel::re_initialize(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  const void *v7;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  id v23;
  id v24;
  __int128 v25;

  v5 = *(_OWORD *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 304) = v5;
  *(_OWORD *)(a1 + 320) = v6;
  v7 = *(const void **)(a1 + 8);
  if (!v7
  {
    v25 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)&v25 = v11;
  *((_QWORD *)&v25 + 1) = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v23 = v11[18];
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v23;
  }
  else
  {
    v16 = v11[18];
  }
  v24 = v16;
  create_mps_neuron(v16, *(_DWORD *)(a1 + 304), *(float *)(a1 + 308), *(float *)(a1 + 312));
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v17;

  if (!*(_QWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v25, a2, a3, a4);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 424, &v25);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

}

void sub_191510914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  __int128 v9;
  _QWORD *result;
  __int128 v11[2];
  int v12;

  v8 = operator new(0x1D0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBADA8;
  v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  v12 = *(_DWORD *)(a4 + 32);
  result = Espresso::MetalLowmemEngine::activation_kernel::activation_kernel(v8 + 3, a2, a3, v11);
  *a1 = result;
  a1[1] = v8;
  return result;
}

void sub_1915109CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBADA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBADA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::general_padding_kernel::~general_padding_kernel(id *this)
{
  *this = &off_1E2DAB1B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 49));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  *this = &off_1E2DAB1B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 49));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::general_padding_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  const void **v8;
  const void *v9;
  id *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  id *v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  void *v39;
  std::__shared_weak_count *v40;
  id *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;

  v7 = *(_QWORD *)(a1 + 392);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, const void ***, const void ***))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4);
    return;
  }
  if (!*(_QWORD *)(a1 + 384))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *a3;
  v9 = **a3;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v43 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v43 = 0;
  }
  v15 = *a4;
  v16 = **a4;
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v15[1];
    v41 = v17;
    v42 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v41 = 0;
    v42 = 0;
  }
  if (*(_QWORD *)a2
  {
    v23 = v22;
    v24 = *(std::__shared_weak_count **)(a2 + 8);
    v39 = v22;
    v40 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v39 = 0;
    v40 = 0;
  }
  v27 = objc_msgSend(v11[32], "count", v39, v40, v41);
  v28 = *(void **)(a1 + 384);
  v29 = v23[18];
  if (v27 < 2)
  {
    v30 = v18[30];
    v31 = v11[30];
    objc_msgSend(v28, "encodeToCommandBuffer:sourceImage:destinationImage:", v29, v30, v31);

    if (!v24)
      goto LABEL_33;
LABEL_29:
    v32 = (unint64_t *)&v24->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_33;
  }
  objc_msgSend(v28, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v29, v18[32], v11[32]);
  if (v24)
    goto LABEL_29;
LABEL_33:
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_191510D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::crop_kernel::~crop_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::crop_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  void *v38;
  std::__shared_weak_count *v39;
  id *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;

  if (!*(_QWORD *)(a1 + 296))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v42 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v42 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v40 = v16;
    v41 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v40 = 0;
    v41 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = v21;
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v38 = v21;
    v39 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v38 = 0;
    v39 = 0;
  }
  v26 = objc_msgSend(v10[32], "count", v38, v39, v40);
  v27 = *(void **)(a1 + 296);
  v28 = v22[18];
  if (v26 < 2)
  {
    v29 = v17[30];
    v30 = v10[30];
    objc_msgSend(v27, "encodeToCommandBuffer:sourceImage:destinationImage:", v28, v29, v30);

    if (!v23)
      goto LABEL_31;
  }
  else
  {
    objc_msgSend(v27, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v28, v17[32], v10[32]);
    if (!v23)
      goto LABEL_31;
  }
  v31 = (unint64_t *)&v23->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_31:
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1915110E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::reduce_kernel::~reduce_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::reduce_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v8;
  id *v9;
  const void **v10;
  const void *v11;
  id *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void **v17;
  const void *v18;
  id *v19;
  id *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  const void *v40;
  id *v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  id v46;
  id v47;
  std::__shared_weak_count *v48;
  id *v49;
  int v50;
  uint64_t v51;
  int v52;
  id *v53;
  int v54;
  void *v55;
  std::__shared_weak_count *v56;
  id *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  id *v60;
  std::__shared_weak_count *v61;
  int v62;
  int v63;
  int v64;
  id v65[2];

  if (*(_QWORD *)(a1 + 352) && *(_DWORD *)(a1 + 280) == 11 && *(_DWORD *)(a1 + 288) == 4)
  {
    v8 = **a4;
    if (v8)
    else
      v9 = 0;
    v40 = **a3;
    if (v40)
    else
      v41 = 0;
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v65, *a2);
    v42 = v65[0];
    v43 = (uint64_t)**a4;
    v44 = *(_DWORD *)(v43 + 20);
    LODWORD(v43) = *(_DWORD *)(v43 + 24);
    if ((int)v43 <= 1)
      v43 = 1;
    else
      v43 = v43;
    v45 = v43 * v44;
    v46 = v9[21];
    v47 = v41[21];
    v49 = (id *)*((int *)v9 + 2);
    v48 = (std::__shared_weak_count *)*((int *)v9 + 3);
    v50 = *((_DWORD *)v9 + 4);
    v64 = 256;
    v61 = (std::__shared_weak_count *)__PAIR64__(v48, v49);
    v62 = v45;
    v63 = 0;
    LODWORD(v60) = ((v50 - 1) >> 2) + 1;
    HIDWORD(v60) = v50;
    objc_msgSend(v42, "setComputePipelineState:", *(_QWORD *)(a1 + 352));
    objc_msgSend(v42, "setTexture:atIndex:", v47, 0);
    objc_msgSend(v42, "setTexture:atIndex:", v46, 1);
    objc_msgSend(v42, "setBytes:length:atIndex:", &v60, 28, 0);
    if ((int)v49 > 3 || (int)v48 > 3)
    {
      v52 = (_DWORD)v49 - 1;
      if ((int)v49 < 1)
        v52 = (_DWORD)v49 + 2;
      v53 = (id *)((v52 >> 2) + 1);
      v54 = (_DWORD)v48 - 1;
      if ((int)v48 < 1)
        v54 = (_DWORD)v48 + 2;
      v57 = v53;
      v58 = (std::__shared_weak_count *)((v54 >> 2) + 1);
      v59 = (int)v45;
      v51 = 4;
    }
    else
    {
      v57 = v49;
      v58 = v48;
      v59 = v45;
      v51 = 1;
    }
    objc_msgSend(v42, "dispatchThreadgroups:threadsPerThreadgroup:", &v57, v51, v51, 1);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v65);
    return;
  }
  if (!*(_QWORD *)(a1 + 360))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
  v10 = *a3;
  v11 = **a3;
  if (v11
  {
    v13 = v12;
    v14 = (std::__shared_weak_count *)v10[1];
    v60 = v12;
    v61 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v60 = 0;
    v61 = 0;
  }
  v17 = *a4;
  v18 = **a4;
  if (v18
  {
    v20 = v19;
    v21 = (std::__shared_weak_count *)v17[1];
    v57 = v19;
    v58 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v20 = 0;
    v57 = 0;
    v58 = 0;
  }
  if (*a2
  {
    v25 = v24;
    v26 = (std::__shared_weak_count *)a2[1];
    v55 = v24;
    v56 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v55 = 0;
    v56 = 0;
  }
  v29 = objc_msgSend(v13[32], "count", v55, v56);
  v30 = *(void **)(a1 + 360);
  v31 = v25[18];
  if (v29 < 2)
  {
    v32 = v20[30];
    v33 = v13[30];
    objc_msgSend(v30, "encodeToCommandBuffer:sourceImage:destinationImage:", v31, v32, v33);

    if (!v26)
      goto LABEL_36;
LABEL_32:
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    goto LABEL_36;
  }
  objc_msgSend(v30, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v31, v20[32], v13[32]);
  if (v26)
    goto LABEL_32;
LABEL_36:
  if (v58)
  {
    v36 = &v58->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v61)
  {
    v38 = &v61->__shared_owners_;
    do
      v39 = __ldaxr((unint64_t *)v38);
    while (__stlxr(v39 - 1, (unint64_t *)v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1915115E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::reduce_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*(_DWORD *)(a1 + 280) == 11 && a3[1] != *a3 && *(int *)(*a3 + 8) > 256)
    return 0;
  if (*(_QWORD *)(a1 + 360))
    return 1;
  return *(_QWORD *)(a1 + 352) != 0;
}

void Espresso::MPSEngine::copy_kernel::~copy_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::copy_kernel::__launch(_QWORD *a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  double v14;
  double v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const void **v20;
  const void *v21;
  id *v22;
  id *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const void **v27;
  const void *v28;
  id *v29;
  id *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  void *v51;
  std::__shared_weak_count *v52;
  id *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;

  if (!a1[36])
  {
    v8 = (const void *)a1[1];
    if (!v8
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = (std::__shared_weak_count *)a1[2];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = v9[18];
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v13 = v9[18];
    }
    LODWORD(v14) = 1.0;
    LODWORD(v15) = 0;
    objc_msgSend(MEMORY[0x1E0CC71E8], "cnnNeuronDescriptorWithType:a:b:", 2, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D30]), "initWithDevice:neuronDescriptor:", v13, v17);
    v19 = (void *)a1[36];
    a1[36] = v18;

  }
  v20 = *a3;
  v21 = **a3;
  if (v21
  {
    v23 = v22;
    v24 = (std::__shared_weak_count *)v20[1];
    v55 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v23 = 0;
    v55 = 0;
  }
  v27 = *a4;
  v28 = **a4;
  if (v28
  {
    v30 = v29;
    v31 = (std::__shared_weak_count *)v27[1];
    v53 = v29;
    v54 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v30 = 0;
    v53 = 0;
    v54 = 0;
  }
  if (*(_QWORD *)a2
  {
    v35 = v34;
    v36 = *(std::__shared_weak_count **)(a2 + 8);
    v51 = v34;
    v52 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
  }
  else
  {
    v36 = 0;
    v35 = 0;
    v51 = 0;
    v52 = 0;
  }
  v39 = objc_msgSend(v23[32], "count", v51, v52, v53);
  v40 = (void *)a1[36];
  v41 = v35[18];
  if (v39 < 2)
  {
    v42 = v30[30];
    v43 = v23[30];
    objc_msgSend(v40, "encodeToCommandBuffer:sourceImage:destinationImage:", v41, v42, v43);

    if (!v36)
      goto LABEL_42;
  }
  else
  {
    objc_msgSend(v40, "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v41, v30[32], v23[32]);
    if (!v36)
      goto LABEL_42;
  }
  v44 = (unint64_t *)&v36->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_42:
  if (v54)
  {
    v46 = (unint64_t *)&v54->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
  {
    v48 = (unint64_t *)&v55->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_191511A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::sgd_kernel::~sgd_kernel(Espresso::MPSEngine::sgd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::sgd_kernel::__launch()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("sgd_kernel not implemented on MPS engine. It should fallback to MPSBuffers engine");
}

void Espresso::MPSEngine::adam_kernel::~adam_kernel(Espresso::MPSEngine::adam_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::adam_kernel::__launch()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("adam_kernel not implemented on MPS engine. It should fallback to MPSBuffers engine");
}

void Espresso::MPSEngine::grid_sampling_kernel::~grid_sampling_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::grid_sampling_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id v8;
  const void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void *v30;
  id *v31;
  id *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  id *v39;
  unint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  std::runtime_error *exception;
  uint64_t v70;
  _QWORD *v71;
  id *v72;
  id *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  std::__shared_weak_count *v79;
  id *v80;
  std::__shared_weak_count *v81;
  void *v82;
  std::__shared_weak_count *v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 288))
  {
    v8 = objc_alloc(MEMORY[0x1E0CC71C8]);
    v9 = *(const void **)(a1 + 8);
    if (!v9
    {
      v84 = 0;
      v85 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v84 = v10;
    v85 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = objc_msgSend(v8, "initWithDevice:", v10[18]);
    v15 = *(void **)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v14;

    if (v85)
    {
      v16 = &v85->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    objc_msgSend(*(id *)(a1 + 288), "setUseGridValueAsInputCoordinate:", *(unsigned __int8 *)(a1 + 284));
    if (!*(_QWORD *)(a1 + 288))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
  }
  v18 = *a3;
  v19 = **a3;
  if (v19
  {
    v21 = (std::__shared_weak_count *)v18[1];
    v84 = v20;
    v85 = v21;
    v73 = (id *)v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v73 = 0;
    v84 = 0;
    v85 = 0;
  }
  v24 = *a4;
  v25 = **a4;
  if (v25
  {
    v27 = (std::__shared_weak_count *)v24[1];
    v82 = v26;
    v83 = v27;
    v72 = (id *)v26;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v24 = *a4;
    }
  }
  else
  {
    v72 = 0;
    v82 = 0;
    v83 = 0;
  }
  v30 = v24[2];
  if (v30
  {
    v32 = v31;
    v33 = (std::__shared_weak_count *)v24[3];
    v80 = v31;
    v81 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  else
  {
    v32 = 0;
    v80 = 0;
    v81 = 0;
  }
  if (!*(_QWORD *)a2
  {
    v37 = 0;
    v71 = 0;
    v78 = 0;
    v79 = 0;
    goto LABEL_41;
  }
  v37 = *(std::__shared_weak_count **)(a2 + 8);
  v78 = v36;
  v79 = v37;
  v71 = v36;
  if (!v37)
  {
LABEL_41:
    v39 = v73;
    goto LABEL_42;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  v39 = v73;
  do
    v40 = __ldxr(v38);
  while (__stxr(v40 + 1, v38));
LABEL_42:
  v70 = a1;
  if ((unint64_t)objc_msgSend(v39[32], "count") < 2)
  {
    v50 = v32[30];
    v51 = objc_alloc(MEMORY[0x1E0CC6DF0]);
    objc_msgSend(v50, "texture");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = (void *)objc_msgSend(v51, "initWithParentImage:sliceRange:featureChannels:", v50, 0, objc_msgSend(v52, "arrayLength"), 2);

    v54 = *(void **)(v70 + 288);
    v55 = v71[18];
    v56 = v72[30];
    v57 = v73[30];
    objc_msgSend(v54, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v55, v56, v53, v57);

    if (!v37)
      goto LABEL_57;
    goto LABEL_53;
  }
  v41 = (void *)objc_opt_new();
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v42 = v32[32];
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
  if (v43)
  {
    v44 = *(_QWORD *)v75;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v75 != v44)
          objc_enumerationMutation(v42);
        v46 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
        v47 = objc_alloc(MEMORY[0x1E0CC6DF0]);
        objc_msgSend(v46, "texture");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = (void *)objc_msgSend(v47, "initWithParentImage:sliceRange:featureChannels:", v46, 0, objc_msgSend(v48, "arrayLength"), 2);

        objc_msgSend(v41, "addObject:", v49);
      }
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
    }
    while (v43);
  }

  objc_msgSend(*(id *)(v70 + 288), "encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:", v71[18], v72[32], v41, v73[32]);
  if (v37)
  {
LABEL_53:
    v58 = (unint64_t *)&v37->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_57:
  v60 = v81;
  if (v81)
  {
    v61 = (unint64_t *)&v81->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v83;
  if (v83)
  {
    v64 = (unint64_t *)&v83->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v85;
  if (v85)
  {
    v67 = &v85->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_19151216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::grid_sampling_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_BYTE *)(a1 + 285) == 0;
}

void Espresso::MPSEngine::local_correlation_kernel::~local_correlation_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::local_correlation_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id v8;
  const void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  id *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void **v25;
  const void *v26;
  id *v27;
  id *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const void *v32;
  id *v33;
  id *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error *exception;
  void *v58;
  std::__shared_weak_count *v59;
  id *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;

  if (!*(_QWORD *)(a1 + 296))
  {
    v8 = objc_alloc(MEMORY[0x1E0CC71D8]);
    v9 = *(const void **)(a1 + 8);
    if (!v9
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v63 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = objc_msgSend(v8, "initWithDevice:windowInX:windowInY:strideInX:strideInY:", v10[18], *(int *)(a1 + 280), *(int *)(a1 + 284), *(int *)(a1 + 288), *(int *)(a1 + 292));
    v15 = *(void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v14;

    if (v63)
    {
      v16 = (unint64_t *)&v63->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (!*(_QWORD *)(a1 + 296))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
  }
  v18 = *a3;
  v19 = **a3;
  if (v19
  {
    v21 = v20;
    v22 = (std::__shared_weak_count *)v18[1];
    v64 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v64 = 0;
  }
  v25 = *a4;
  v26 = **a4;
  if (v26
  {
    v28 = v27;
    v29 = (std::__shared_weak_count *)v25[1];
    v62 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v25 = *a4;
    }
  }
  else
  {
    v28 = 0;
    v62 = 0;
  }
  v32 = v25[2];
  if (v32
  {
    v34 = v33;
    v35 = (std::__shared_weak_count *)v25[3];
    v60 = v33;
    v61 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
  }
  else
  {
    v34 = 0;
    v60 = 0;
    v61 = 0;
  }
  if (*(_QWORD *)a2
  {
    v39 = v38;
    v40 = *(std::__shared_weak_count **)(a2 + 8);
    v58 = v38;
    v59 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
  }
  else
  {
    v40 = 0;
    v39 = 0;
    v58 = 0;
    v59 = 0;
  }
  v43 = objc_msgSend(v21[32], "count", v58, v59, v60);
  v44 = *(void **)(a1 + 296);
  v45 = v39[18];
  if (v43 < 2)
  {
    v46 = v28[30];
    v47 = v34[30];
    v48 = v21[30];
    objc_msgSend(v44, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v45, v46, v47, v48);

    if (!v40)
      goto LABEL_49;
  }
  else
  {
    objc_msgSend(v44, "encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:", v45, v28[32], v34[32], v21[32]);
    if (!v40)
      goto LABEL_49;
  }
  v49 = (unint64_t *)&v40->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_49:
  if (v61)
  {
    v51 = (unint64_t *)&v61->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v62)
  {
    v53 = (unint64_t *)&v62->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v64)
  {
    v55 = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1915126C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSEngine::softmax_nd_kernel *this)
{
  *(_QWORD *)this = &off_1E2DA8A60;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2DA8A60;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::softmax_nd_kernel::__launch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = a1[43];
  if (!v8)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    v8 = a1[43];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
}

uint64_t Espresso::MPSEngine::softmax_nd_kernel::on_resized(Espresso::MPSEngine::softmax_nd_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v16[2];

  v6 = *((_QWORD *)this + 43);
  if (!v6)
  {
    v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)a2 + 32))(**(_QWORD **)a2);
    v8 = operator new(0x1B8uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E2DC1D00;
    v16[0] = *(_OWORD *)((char *)this + 312);
    *(__int128 *)((char *)v16 + 12) = *(_OWORD *)((char *)this + 324);
    v9 = Espresso::MPSEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 3), (_QWORD *)this + 1, v7, v16);
    v10 = (_OWORD *)((char *)this + 344);
    *(_QWORD *)&v11 = v9;
    *((_QWORD *)&v11 + 1) = v8;
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    *v10 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for softmax_nd");
  }
  return (*(uint64_t (**)(uint64_t, Espresso::layer_data *, Espresso::layer_data *))(*(_QWORD *)v6 + 80))(v6, a2, a3);
}

void sub_191512934(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::softmax_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v5;
  _BYTE v7[20];
  int v8;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
  if (v5 >= 0 && v5 < v8)
    return v8 + ~v5 == 2 && v8 > 3;
  return result;
}

uint64_t Espresso::MPSEngine::softmax_kernel::softmax_kernel(uint64_t a1, _QWORD *a2, int a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  const void *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  id *v24;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v7 + 304) = 256;
  *(_OWORD *)(v7 + 280) = xmmword_191A93370;
  *(_QWORD *)(v7 + 296) = 1;
  *(_DWORD *)(v7 + 308) = 0;
  *(_BYTE *)(v7 + 312) = 1;
  *(_QWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)v7 = &off_1E2DA8200;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_QWORD *)(v7 + 408) = 0;
  v8 = *a4;
  *(_OWORD *)(v7 + 292) = *(__int128 *)((char *)a4 + 12);
  *(_OWORD *)(v7 + 280) = v8;
  *(_DWORD *)(v7 + 368) = a3;
  v9 = *(const void **)(v7 + 8);
  if (!v9
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  v24 = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v10[18];
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v14 = v10[18];
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v16 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D60]), "initWithDevice:", v14, v24, v11);
    v17 = *(void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v16;
LABEL_18:

    goto LABEL_19;
  }
  v18 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6DC0]), "initWithDevice:", v14, v24, v11);
  v19 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v18;

  if (!*(_QWORD *)(a1 + 336))
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Error creating mps kernel");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
  {
    v20 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v20 = (_QWORD *)*v20;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 336), "setLabel:", v17);
    goto LABEL_18;
  }
LABEL_19:

  return a1;
}

void sub_191512C08(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  __cxa_free_exception(v3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 50));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 44));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::general_concat_kernel::~general_concat_kernel(Espresso::MPSEngine::general_concat_kernel *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
}

{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::general_concat_kernel::__launch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = a1[37];
  if (!v8)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    v8 = a1[37];
    if (!v8)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for general_concat_kernel");
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
}

uint64_t Espresso::MPSEngine::general_concat_kernel::on_resized(uint64_t this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];

  v3 = *(_QWORD **)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2 && *((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    v6 = this;
    v7 = *(_QWORD *)(this + 296);
    if (!v7)
    {
      *(_DWORD *)(v6 + 312) = 0;
      *(_WORD *)(v6 + 352) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
      v8 = (char *)operator new(0x1A0uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = &off_1E2DBAC58;
      v15 = *(_OWORD *)(v6 + 312);
      v16 = *(_OWORD *)(v6 + 328);
      *(_OWORD *)v17 = *(_OWORD *)(v6 + 344);
      *(_OWORD *)&v17[16] = *(_OWORD *)(v6 + 360);
      v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), (_QWORD *)(v6 + 8));
      v10 = (_OWORD *)(v6 + 296);
      v8[368] = 0;
      *((_QWORD *)v8 + 47) = 0;
      *((_QWORD *)v8 + 48) = 0;
      *((_QWORD *)v8 + 3) = &off_1E2D7DEB0;
      *((_QWORD *)v8 + 50) = 0;
      *((_QWORD *)v8 + 51) = 0;
      *((_QWORD *)v8 + 49) = 0;
      *((_OWORD *)v8 + 19) = v15;
      *((_OWORD *)v8 + 20) = v16;
      *((_OWORD *)v8 + 21) = *(_OWORD *)v17;
      *(_OWORD *)(v8 + 349) = *(_OWORD *)&v17[13];
      *(_QWORD *)&v11 = v9;
      *((_QWORD *)&v11 + 1) = v8;
      v12 = *(std::__shared_weak_count **)(v6 + 304);
      *v10 = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v7 = *(_QWORD *)v10;
      if (!*(_QWORD *)v10)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for general_concat_kernel");
    }
    return (*(uint64_t (**)(uint64_t, Espresso::layer_data *, Espresso::layer_data *))(*(_QWORD *)v7 + 80))(v7, a2, a3);
  }
  return this;
}

void sub_191512F40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::split_nd_kernel::~split_nd_kernel(Espresso::MPSEngine::split_nd_kernel *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  Espresso::base_kernel::~base_kernel(this);
}

{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::split_nd_kernel::__launch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = a1[101];
  if (!v8)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    v8 = a1[101];
    if (!v8)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to create split kernel");
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
}

void Espresso::MPSEngine::split_nd_kernel::on_resized(Espresso::MPSEngine::split_nd_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v27 = 0uLL;
  v6 = (uint64_t *)((char *)this + 808);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 808, &v27);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2 && *((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    if (*(_QWORD *)v10)
    {
      if (v11)
      {
        v12 = *(std::__shared_weak_count **)(v10 + 8);
        v26 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = *v6;
        if (!*v6)
        {
          (*(void (**)(void *))(*(_QWORD *)v11 + 32))(v11);
          *((_DWORD *)this + 206) = *((_DWORD *)this + 71);
          *((_DWORD *)this + 207) = 2;
          v16 = operator new(0x1A0uLL);
          v16[1] = 0;
          v16[2] = 0;
          *v16 = &off_1E2DBAC20;
          v17 = *(_OWORD *)((char *)this + 840);
          v27 = *(_OWORD *)((char *)this + 824);
          v28 = v17;
          v29 = *(_OWORD *)((char *)this + 856);
          v30 = *((_DWORD *)this + 218);
          v18 = Espresso::base_kernel::base_kernel((uint64_t)(v16 + 3), (_QWORD *)this + 1);
          *((_BYTE *)v16 + 360) = 0;
          v16[46] = 0;
          v16[47] = 0;
          v16[3] = &off_1E2D7DD58;
          *((_OWORD *)v16 + 24) = 0u;
          *((_OWORD *)v16 + 25) = 0u;
          v19 = v28;
          *((_OWORD *)v16 + 19) = v27;
          *((_OWORD *)v16 + 20) = v19;
          *((_OWORD *)v16 + 21) = v29;
          *((_DWORD *)v16 + 88) = v30;
          *(_QWORD *)&v20 = v18;
          *((_QWORD *)&v20 + 1) = v16;
          v21 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
          *(_OWORD *)v6 = v20;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v15 = *v6;
        }
        (*(void (**)(uint64_t, Espresso::layer_data *, Espresso::layer_data *))(*(_QWORD *)v15 + 80))(v15, a2, a3);
        if (v26)
        {
          v24 = (unint64_t *)&v26->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
    }
  }
}

void sub_191513298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Espresso::DummyMPSEngine::mps_split_nd_dispatch(*(const Espresso::layer_shape **)a3, *(_QWORD *)(a3 + 8), a1 + 280);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

void sub_191513350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAC20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::dummy_kernel::~dummy_kernel(Espresso::MPSEngine::dummy_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::dummy_kernel,std::allocator<Espresso::MPSEngine::dummy_kernel>,std::shared_ptr<Espresso::MPSEngine::context> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];

  v6 = operator new(0x130uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1C90;
  v8 = v6 + 3;
  v13[0] = a2;
  v13[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), v13);
  *v8 = &off_1E2DA7E78;
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1915134B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 192));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 208));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(v1[53] + 176));
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::conv_transposed_weights()
{
  return 0;
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAFD8;
  v11 = a3[2];
  *(_OWORD *)v12 = a3[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a3 + 60);
  v9 = *a3;
  v10 = a3[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D7F310;
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result = *(__n128 *)&v12[12];
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1915136D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso9MPSEngine13reduce_kernel12used_versionEv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v3 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("espresso.reduce_mps"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("espresso.reduce_mps"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    Espresso::MPSEngine::reduce_kernel::used_version(void)::override_version = objc_msgSend(v2, "intValue");

  }
}

void sub_1915137D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values(float *a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  float *v22;
  void *v28;
  void *v30;
  void *v31;
  void *v32;
  void *v34;
  void *v36;
  void *v38;
  void *v40;
  void *v42;
  void *v44;
  void *v45;
  void *v46;
  float v48;
  void *v49;

  _S10 = a8;
  _S12 = a7;
  _S8 = a6;
  _S11 = a5;
  _S13 = a4;
  _S14 = a3;
  v18 = (void *)objc_opt_new();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDBB0, CFSTR("Version"));
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 33);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 32);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  v22 = a1;
  do
  {
    _S0 = *v22;
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:atIndexedSubscript:", v28, v21);

    if (v21)
    {
      _S0 = *v22 - *(v22 - 1);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:atIndexedSubscript:", v30, v21 - 1);

    }
    ++v21;
    ++v22;
  }
  while (v21 != 33);
  v31 = (void *)objc_msgSend(v19, "copy");
  v32 = (void *)objc_msgSend(v20, "copy");
  __asm { FCVT            H0, S14 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v34, CFSTR("XSatLeft"));

  __asm { FCVT            H0, S13 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v36, CFSTR("YSatLeft"));

  __asm { FCVT            H0, S11 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v38, CFSTR("XSatRight"));

  __asm { FCVT            H0, S8 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v40, CFSTR("YSatRight"));

  __asm { FCVT            H0, S12 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v42, CFSTR("XLeft"));

  __asm { FCVT            H0, S10 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v44, CFSTR("XRight"));

  objc_msgSend(v18, "setObject:forKeyedSubscript:", v31, CFSTR("YIntercept"));
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v32, CFSTR("Slope"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v45, CFSTR("AntiSymmetric"));

  if (vabds_f32(_S12, _S14) >= a9)
  {
    _S0 = (float)(*a1 - _S13) / (float)(_S12 - _S14);
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  }
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v46, CFSTR("SlopeLeft"));
  v48 = _S11 - _S10;

  if (fabsf(v48) >= a9)
  {
    _S0 = (float)(_S8 - a1[32]) / v48;
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  }
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v49, CFSTR("SlopeRight"));

  return v18;
}

void sub_191513C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_custom_neuron_params(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16;
  float v17;
  float v18;
  _OWORD v20[8];
  int v21;
  _OWORD v22[8];
  int v23;

  v16 = 0;
  v17 = (float)(a4 - a3) * 0.03125;
  v18 = a3;
  do
  {
    *(float *)((char *)v22 + v16) = (*(float (**)(uint64_t, float))(a2 + 16))(a2, v18);
    v18 = v17 + v18;
    v16 += 4;
  }
  while (v16 != 132);
  v20[6] = v22[6];
  v20[7] = v22[7];
  v21 = v23;
  v20[2] = v22[2];
  v20[3] = v22[3];
  v20[4] = v22[4];
  v20[5] = v22[5];
  v20[0] = v22[0];
  v20[1] = v22[1];
  Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v20, a1, a5, a7, a6, a8, a3, a4, 0.0001);
  return (id)objc_claimAutoreleasedReturnValue();
}

id Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(uint64_t a1, int a2, uint64_t a3, int a4, void *a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  float (**v22)(_QWORD, float);
  void *v23;
  void *v24;
  float v25;
  void *v26;
  uint64_t i;
  float v28;
  void *v34;
  void *v36;
  void *v38;
  void *v40;
  void *v42;
  void *v44;
  void *v46;
  void *v48;
  void *v50;
  void *v51;

  _S11 = a10;
  _S12 = a9;
  _S14 = a8;
  _S13 = a7;
  _S15 = a6;
  v22 = a5;
  v23 = (void *)objc_opt_new();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E2DEDBC8, CFSTR("Version"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v24, CFSTR("InAbs"));

  if (a2 == 1)
  {
    v25 = -16.0;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", CFSTR("SplitLut"), CFSTR("Mode"));
  }
  else
  {
    if (a2)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported Custom LUT Mode");
    v25 = 0.0;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", CFSTR("Lut"), CFSTR("Mode"));
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", off_1E2DD4078[a4], CFSTR("CopySign"));
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 33);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 33; ++i)
  {
    v28 = ldexp(1.0, -(int)a1) * v25;
    _S0 = v22[2](v22, v28);
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:atIndexedSubscript:", v34, i);

    v25 = v25 + 1.0;
  }
  __asm { FCVT            H0, S15 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v36, CFSTR("XSatLeft"));

  __asm { FCVT            H0, S14 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v38, CFSTR("YSatLeft"));

  __asm { FCVT            H0, S13 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v40, CFSTR("XSatRight"));

  __asm { FCVT            H0, S12 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v42, CFSTR("YSatRight"));

  __asm { FCVT            H0, S11 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v44, CFSTR("SlopeLeft"));

  _S0 = a11;
  __asm { FCVT            H0, S0 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v46, CFSTR("SlopeRight"));

  _S0 = a12;
  __asm { FCVT            H0, S0 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v48, CFSTR("InterceptLeft"));

  _S0 = a13;
  __asm { FCVT            H0, S0 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v50, CFSTR("InterceptRight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", a1);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v51, CFSTR("R"));

  objc_msgSend(v23, "setObject:forKeyedSubscript:", v26, CFSTR("YIntercept"));
  return v23;
}

void sub_19151418C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  void *v23;
  void *v24;
  _QWORD v26[5];

  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN8Espresso17ANECompilerEngine33generate_mix_custom_neuron_paramsEffffffffsNS0_15custom_lut_typeEmbNS0_14copy_sign_typeEPFffE_block_invoke;
  v26[3] = &__block_descriptor_40_e8_f12__0f8l;
  v26[4] = a5;
  v23 = (void *)MEMORY[0x19401D648](v26);
  Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(a1, a2, a3, a4, v23, a6, a7, 0.0, a8, a9, a10, a11, a12);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

void sub_191514304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17ANECompilerEngine33generate_mix_custom_neuron_paramsEffffffffsNS0_15custom_lut_typeEmbNS0_14copy_sign_typeEPFffE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel::~crop_and_resize_kernel(Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  int v41;
  float v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  int64x2_t *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  int64x2_t *v56;
  unint64_t *v57;
  unint64_t v58;
  int64x2_t **v59;
  float v60;
  int64x2_t *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  int64x2_t *v66;
  std::__shared_weak_count *v67;
  int64x2_t *v68[2];
  int64x2_t *v69[2];
  int64x2_t *v70[2];
  int64x2_t *v71;
  std::__shared_weak_count *v72;
  int64x2_t *v73;
  std::__shared_weak_count *v74;
  int64x2_t *v75;
  std::__shared_weak_count *v76;
  std::string v77;
  std::string v78;
  std::string __p;
  _BYTE v80[24];
  _BYTE v81[32];
  std::__shared_weak_count *v82;
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  void **v85;

  v4 = a3[1] - *a3;
  v5 = v4 >> 6;
  if ((unint64_t)v4 >= 0x81)
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v83 = *a2;
    v84 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v5 = (uint64_t)(a3[1] - *a3) >> 6;
    }
    std::to_string(&v77, v5);
    v9 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: number of inputs must be <= 2, received ");
    v78 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v10 = v82;
    if (v82)
    {
      v11 = (unint64_t *)&v82->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v85 = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
    v85 = (void **)v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    v13 = v84;
    if (!v84)
      return 0;
    v14 = (unint64_t *)&v84->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    goto LABEL_102;
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v16 = (std::__shared_weak_count *)a2[1];
    v75 = *a2;
    v76 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(&v78, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: position_sensitive");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v19 = v82;
    if (v82)
    {
      v20 = (unint64_t *)&v82->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    v13 = v76;
    if (!v76)
      return 0;
    v22 = (unint64_t *)&v76->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_102;
  }
  v23 = *(_DWORD *)(a1 + 316);
  if (v23 != 2)
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v73 = *a2;
    v74 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v23 = *(_DWORD *)(a1 + 316);
    }
    std::to_string(&v77, v23);
    v36 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: sample_ratio must be 2, received ");
    v78 = *v36;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v73, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v37 = v82;
    if (v82)
    {
      v38 = (unint64_t *)&v82->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v85 = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
    v85 = (void **)v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    v13 = v74;
    if (!v74)
      return 0;
    v40 = (unint64_t *)&v74->__shared_owners_;
    do
      v15 = __ldaxr(v40);
    while (__stlxr(v15 - 1, v40));
    goto LABEL_102;
  }
  if (v5 == 2)
  {
    v41 = *(_DWORD *)(a1 + 280);
    if (v41 != 3 && v41)
      return 0;
    if (*(_DWORD *)(*a3 + 16) != 1)
    {
      v56 = a2[1];
      v68[0] = *a2;
      v68[1] = v56;
      if (v56)
      {
        v57 = &v56->u64[1];
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      std::string::basic_string[abi:ne180100]<0>(&v78, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: seq > 1 for first input");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v59 = v68;
      goto LABEL_134;
    }
  }
  else if (v5 == 1)
  {
    v24 = *(_DWORD *)(a1 + 304);
    if (v24)
    {
      v25 = (std::__shared_weak_count *)a2[1];
      v71 = *a2;
      v72 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v24 = *(_DWORD *)(a1 + 304);
      }
      std::to_string(&v77, v24);
      v28 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: crop_index_mode ");
      v78 = *v28;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v71, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v29 = v82;
      if (v82)
      {
        v30 = (unint64_t *)&v82->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v85 = (void **)v81;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
      v85 = (void **)v80;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v13 = v72;
      if (!v72)
        return 0;
      v32 = (unint64_t *)&v72->__shared_owners_;
      do
        v15 = __ldaxr(v32);
      while (__stlxr(v15 - 1, v32));
      goto LABEL_102;
    }
    if (*(_BYTE *)(a1 + 296))
    {
      v52 = a2[1];
      v70[0] = *a2;
      v70[1] = v52;
      if (v52)
      {
        v53 = &v52->u64[1];
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
        v55 = *(unsigned __int8 *)(a1 + 296);
      }
      else
      {
        v55 = 1;
      }
      std::to_string(&v77, v55);
      v65 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: normalized_crop_indices ");
      v78 = *v65;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v59 = v70;
LABEL_134:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v59);
      return 0;
    }
    v60 = *(float *)(a1 + 308);
    if (v60 != 1.0)
    {
      v61 = a2[1];
      v69[0] = *a2;
      v69[1] = v61;
      if (v61)
      {
        v62 = &v61->u64[1];
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v60 = *(float *)(a1 + 308);
      }
      std::to_string(&v77, v60);
      v64 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: spatial_scale must be 1.f, received ");
      v78 = *v64;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v59 = v69;
      goto LABEL_134;
    }
  }
  v42 = *(float *)(a1 + 320);
  if (v42 == 0.0)
    return 1;
  v43 = (std::__shared_weak_count *)a2[1];
  v66 = *a2;
  v67 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v42 = *(float *)(a1 + 320);
  }
  std::to_string(&v77, v42);
  v46 = std::string::insert(&v77, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: pad_value must be 0.0f, received ");
  v78 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v78, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v66, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v47 = v82;
  if (v82)
  {
    v48 = (unint64_t *)&v82->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v85 = (void **)v81;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
  v85 = (void **)v80;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v13 = v67;
  if (v67)
  {
    v50 = (unint64_t *)&v67->__shared_owners_;
    do
      v15 = __ldaxr(v50);
    while (__stlxr(v15 - 1, v50));
LABEL_102:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_191514B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a36);
  if (a35 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void Espresso::rule_convolution_groups::~rule_convolution_groups(Espresso::rule_convolution_groups *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::rule_convolution_groups::match_at_layer(Espresso::rule_convolution_groups *this@<X0>, int a2@<W1>, __int128 *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  uint64_t **v13;
  int *v14;
  int *v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int64x2_t *v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  _OWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  __int128 v56;
  int64x2_t v57;
  _OWORD *v58;
  uint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  uint64_t **v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  void *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  int v115;
  int v116;
  __int128 v117;
  void *v118;
  std::__shared_weak_count *v119;
  int v120;
  _BYTE v121[24];
  uint64_t v122;
  int64x2_t *v123;

  v120 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2);
  v7 = *(const void **)(v6 + 64);
  if (v7
  {
    v9 = *(std::__shared_weak_count **)(v6 + 72);
    v118 = v8;
    v119 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (char *)operator new(0x160uLL);
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_1E2DBD070;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *((_OWORD *)v12 + 10) = 0u;
    *((_OWORD *)v12 + 11) = 0u;
    *((_OWORD *)v12 + 12) = 0u;
    *((_OWORD *)v12 + 13) = 0u;
    *((_OWORD *)v12 + 14) = 0u;
    *((_OWORD *)v12 + 15) = 0u;
    *((_OWORD *)v12 + 16) = 0u;
    *((_OWORD *)v12 + 17) = 0u;
    *((_OWORD *)v12 + 18) = 0u;
    *((_OWORD *)v12 + 19) = 0u;
    *((_OWORD *)v12 + 20) = 0u;
    *((_OWORD *)v12 + 21) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_DWORD *)v12 + 8) = -1;
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 5) = v12 + 48;
    *((_QWORD *)v12 + 10) = 0;
    *((_QWORD *)v12 + 9) = 0;
    *((_QWORD *)v12 + 7) = 0;
    *((_QWORD *)v12 + 8) = v12 + 72;
    *((_QWORD *)v12 + 3) = &off_1E2D905A0;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v12 + 184));
    *(_QWORD *)&v117 = v12 + 24;
    *((_QWORD *)&v117 + 1) = v12;
    v116 = -1;
    v13 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), a2, &v120);
    v14 = (int *)v13[5];
    v15 = (int *)v13[6];
    if (v14 == v15)
    {
LABEL_74:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
    }
    else
    {
      while (1)
      {
        v115 = *v14;
        v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v115);
        v17 = *(const void **)(v16 + 64);
        if (!v17
        {
          v113 = 0;
          v114 = 0;
          goto LABEL_74;
        }
        v19 = *(std::__shared_weak_count **)(v16 + 72);
        v113 = (unint64_t)v18;
        v114 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = (int64x2_t *)v117;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v18 + 456))(&v112);
        v23 = v22[5].u64[0];
        v24 = (_OWORD *)v22[4].i64[1];
        if ((unint64_t)v24 >= v23)
        {
          v25 = v22[4].i64[0];
          v26 = ((uint64_t)v24 - v25) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v28 = v23 - v25;
          if (v28 >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          v123 = v22 + 5;
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v29);
          v32 = &v30[16 * v26];
          *(_OWORD *)v32 = v112;
          v112 = 0uLL;
          v34 = (_QWORD *)v22[4].i64[0];
          v33 = (_QWORD *)v22[4].i64[1];
          if (v33 == v34)
          {
            v37 = vdupq_n_s64((unint64_t)v33);
            v35 = &v30[16 * v26];
          }
          else
          {
            v35 = &v30[16 * v26];
            do
            {
              v36 = *((_OWORD *)v33 - 1);
              v33 -= 2;
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 16;
              *v33 = 0;
              v33[1] = 0;
            }
            while (v33 != v34);
            v37 = v22[4];
          }
          v38 = v32 + 16;
          v22[4].i64[0] = (uint64_t)v35;
          v22[4].i64[1] = (uint64_t)(v32 + 16);
          *(int64x2_t *)&v121[8] = v37;
          v39 = v22[5].i64[0];
          v22[5].i64[0] = (uint64_t)&v30[16 * v31];
          v122 = v39;
          *(_QWORD *)v121 = v37.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v121);
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
          v22[4].i64[1] = (uint64_t)v38;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
        else
        {
          *v24 = v112;
          v22[4].i64[1] = (uint64_t)(v24 + 1);
        }
        v43 = (_QWORD *)v117;
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v113 + 448))(v121);
        v45 = (_OWORD *)v43[12];
        v44 = v43[13];
        if ((unint64_t)v45 >= v44)
        {
          v46 = v43[11];
          v47 = ((uint64_t)v45 - v46) >> 4;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v49 = v44 - v46;
          if (v49 >> 3 > v48)
            v48 = v49 >> 3;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
            v50 = 0xFFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = (char *)operator new(16 * v50);
          v52 = &v51[16 * v47];
          *(_OWORD *)v52 = *(_OWORD *)v121;
          *(_OWORD *)v121 = 0uLL;
          v54 = (_QWORD *)v43[11];
          v53 = (_QWORD *)v43[12];
          if (v53 == v54)
          {
            v57 = vdupq_n_s64((unint64_t)v53);
            v55 = &v51[16 * v47];
          }
          else
          {
            v55 = &v51[16 * v47];
            do
            {
              v56 = *((_OWORD *)v53 - 1);
              v53 -= 2;
              *((_OWORD *)v55 - 1) = v56;
              v55 -= 16;
              *v53 = 0;
              v53[1] = 0;
            }
            while (v53 != v54);
            v57 = *(int64x2_t *)(v43 + 11);
          }
          v58 = v52 + 16;
          v43[11] = v55;
          v43[12] = v52 + 16;
          v43[13] = &v51[16 * v50];
          v59 = v57.i64[1];
          v60 = (void *)v57.i64[0];
          while ((void *)v59 != v60)
            v59 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 16);
          if (v60)
            operator delete(v60);
          v61 = *(std::__shared_weak_count **)&v121[8];
          v43[12] = v58;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        else
        {
          *v45 = *(_OWORD *)v121;
          v43[12] = v45 + 1;
        }
        v64 = v115;
        v65 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), v115, &v115);
        if ((char *)v65[6] - (char *)v65[5] != 4)
          break;
        v66 = v116;
        if (v116 == -1)
        {
          v68 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v113 + 384))(v113);
          v67 = v117;
          v69 = v117 + 160;
          v71 = *(_OWORD *)(v68 + 16);
          v70 = *(_OWORD *)(v68 + 32);
          *(_OWORD *)(v117 + 160) = *(_OWORD *)v68;
          *(_OWORD *)(v67 + 176) = v71;
          *(_OWORD *)(v67 + 192) = v70;
          v72 = *(_OWORD *)(v68 + 96);
          v74 = *(_OWORD *)(v68 + 48);
          v73 = *(_OWORD *)(v68 + 64);
          *(_OWORD *)(v67 + 240) = *(_OWORD *)(v68 + 80);
          *(_OWORD *)(v67 + 256) = v72;
          *(_OWORD *)(v67 + 208) = v74;
          *(_OWORD *)(v67 + 224) = v73;
          v76 = *(_OWORD *)(v68 + 128);
          v75 = *(_OWORD *)(v68 + 144);
          v77 = *(_OWORD *)(v68 + 112);
          *(_QWORD *)(v69 + 157) = *(_QWORD *)(v68 + 157);
          *(_OWORD *)(v67 + 288) = v76;
          *(_OWORD *)(v67 + 304) = v75;
          *(_OWORD *)(v67 + 272) = v77;
          v116 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), v64, &v115)[5];
        }
        else
        {
          if (*(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), v64, &v115)[5] != v66)break;
          v67 = v117;
        }
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v67 + 16), v64, &v115)+ 32) = 1;
        v78 = v114;
        if (v114)
        {
          v79 = (unint64_t *)&v114->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (++v14 == v15)
        {
          if (v116 == -1)
            goto LABEL_74;
          v81 = *((_QWORD *)this + 3);
          v82 = *(_QWORD *)(*(_QWORD *)(v81 + 32) + 16 * v116);
          v83 = *(const void **)(v82 + 64);
          if (v83
          {
            v85 = *(_QWORD *)(v82 + 72);
            *(_QWORD *)v121 = v84;
            *(_QWORD *)&v121[8] = v85;
            if (v85)
            {
              v86 = (unint64_t *)(v85 + 8);
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
              v81 = *((_QWORD *)this + 3);
            }
          }
          else
          {
            *(_OWORD *)v121 = 0uLL;
          }
          v113 = v120;
          v98 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v81 + 56, v120, &v113);
          if (v98[4] - v98[3] == 24)
          {
            v99 = *((_QWORD *)this + 3) + 96;
            v100 = v116;
            v113 = v116;
            v101 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v99, v116, &v113);
            if (v101[4] - v101[3] == 24)
            {
              v102 = *((_QWORD *)this + 3) + 56;
              v103 = v120;
              v113 = v120;
              v104 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v102, v120, &v113);
              v105 = v117;
              std::string::operator=((std::string *)(v117 + 112), (const std::string *)v104[3]);
              v106 = *((_QWORD *)this + 3) + 96;
              v113 = v100;
              v107 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v106, v100, &v113);
              std::string::operator=((std::string *)(v105 + 136), (const std::string *)v107[3]);
              *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v105 + 16), v103, &v120)+ 32) = 1;
              *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v105 + 16), v100, &v116)+ 32) = 1;
              v108 = v117;
              *(_DWORD *)(v117 + 8) = v103;
              *a3 = v108;
              a3 = &v117;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v109 = *(std::__shared_weak_count **)&v121[8];
          if (*(_QWORD *)&v121[8])
          {
            v110 = (unint64_t *)(*(_QWORD *)&v121[8] + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              v97 = v109;
              goto LABEL_100;
            }
          }
          goto LABEL_75;
        }
      }
      v94 = v114;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          v97 = v94;
LABEL_100:
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
LABEL_75:
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v119;
    if (v119)
    {
      v92 = (unint64_t *)&v119->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
  }
}

void sub_191515604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::rule_convolution_groups::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  size_t v20;
  void *p_p;
  const void *v22;
  void *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *size;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *exception;
  std::runtime_error *v74;
  __int128 v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  void *__p;
  std::__shared_weak_count *v85;
  char v86;
  void *v87;
  std::__shared_weak_count *v88;
  char v89;
  void *lpsrc;
  std::__shared_weak_count *v91;
  _OWORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD *v102;
  std::__shared_weak_count *v103;
  std::string **v104;
  char v105;
  std::string v106;
  uint64_t v107;
  std::string v108;
  __int128 v109;

  *(_QWORD *)&v109 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a3
  {
    v102 = 0;
    v103 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 8);
  v102 = v8;
  v103 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v8[15];
  v95 = v8[14];
  v96 = v13;
  v101 = *((_QWORD *)v8 + 40);
  v14 = v8[19];
  v99 = v8[18];
  v100 = v14;
  v15 = v8[17];
  v97 = v8[16];
  v98 = v15;
  v16 = v8[11];
  v92[0] = v8[10];
  v92[1] = v16;
  v17 = v8[13];
  v93 = v8[12];
  v94 = v17;
  DWORD1(v98) = (*((_QWORD *)v8 + 9) - *((_QWORD *)v8 + 8)) >> 4;
  *((int32x2_t *)&v93 + 1) = vmul_s32(*(int32x2_t *)((char *)&v93 + 8), vdup_n_s32(DWORD1(v98)));
  v18 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v87, "convolution");
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16 * *((int *)v9 + 2));
  if (*(char *)(v19 + 39) >= 0)
    v20 = *(unsigned __int8 *)(v19 + 39);
  else
    v20 = *(_QWORD *)(v19 + 24);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v20 + 11);
  if (v86 < 0)
    p_p = __p;
  if (v20)
  {
    if (*(char *)(v19 + 39) >= 0)
      v22 = (const void *)(v19 + 16);
    else
      v22 = *(const void **)(v19 + 16);
    memmove(p_p, v22, v20);
  }
  strcpy((char *)p_p + v20, "_conv_group");
  if (*((char *)v9 + 135) < 0)
    std::string::__init_copy_ctor_external(&v108, *((const std::string::value_type **)v9 + 14), *((_QWORD *)v9 + 15));
  else
    v108 = *(std::string *)(v9 + 7);
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  v106.__r_.__value_.__s.__data_[8] = 0;
  v81 = (std::string *)operator new(0x18uLL);
  v82 = v81;
  v83 = v81 + 1;
  v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (__int128 *)&v108, &v109, v81);
  if (*((char *)v9 + 159) < 0)
    std::string::__init_copy_ctor_external(&v106, *((const std::string::value_type **)v9 + 17), *((_QWORD *)v9 + 18));
  else
    v106 = *(std::string *)((char *)v9 + 136);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v104 = &v78;
  v105 = 0;
  v78 = (std::string *)operator new(0x18uLL);
  v79 = v78;
  v80 = v78 + 1;
  v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (__int128 *)&v106, (__int128 *)&v107, v78);
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v18, (uint64_t)&v87, (uint64_t)&__p, (uint64_t)v92, (uint64_t)v81, (uint64_t)v82, (uint64_t *)&v78);
  v104 = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (v86 < 0)
    operator delete(__p);
  if (v89 < 0)
    operator delete(v87);
  if (!lpsrc
  {
    v87 = 0;
    v88 = 0;
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Inconsistent status");
    __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v24 = v23;
  v87 = v23;
  v88 = v91;
  if (v91)
  {
    v25 = (unint64_t *)&v91->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v23 + 472))(&__p, v23);
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v24 + 488))(&v108, v24);
  v27 = *((_QWORD *)v9 + 8);
  v28 = *((_QWORD *)v9 + 9);
  v29 = v28 - v27;
  if (v28 != v27)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    LODWORD(i) = 0;
    v33 = v29 >> 4;
    v34 = *((_QWORD *)v9 + 11);
    v35 = v108.__r_.__value_.__r.__words[0];
    if (v33 <= 1)
      v33 = 1;
    do
    {
      v36 = 0;
      v37 = *(_QWORD *)(v27 + 16 * v30);
      v38 = *(int *)(v37 + 8);
      v39 = __p;
      for (i = (int)i; ; ++i)
      {
        v40 = 0;
        v41 = v38;
        do
        {
          v41 *= *(int *)(v37 + 12 + v40);
          v40 += 4;
        }
        while (v40 != 12);
        if (v41 <= v36)
          break;
        *(_DWORD *)(v39[3] + 4 * i) = *(_DWORD *)(*(_QWORD *)(v37 + 24) + 4 * v36++);
      }
      v42 = *(_QWORD *)(v34 + 16 * v30);
      v43 = *(unsigned int *)(v42 + 8);
      if ((_DWORD)v43)
      {
        v44 = *(int **)(v42 + 16);
        v45 = *(_QWORD *)(v35 + 16);
        v31 = (int)v31;
        do
        {
          v46 = *v44++;
          *(_DWORD *)(v45 + 4 * v31++) = v46;
          --v43;
        }
        while (v43);
      }
      ++v30;
    }
    while (v30 != v33);
  }
  v76 = __p;
  v77 = v85;
  if (v85)
  {
    v47 = (unint64_t *)&v85->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  (*(void (**)(void *, void **))(*(_QWORD *)v24 + 400))(v24, &v76);
  v49 = v77;
  if (v77)
  {
    v50 = (unint64_t *)&v77->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v87;
  v75 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
  if (v108.__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  (*(void (**)(void *, __int128 *))(*(_QWORD *)v52 + 392))(v52, &v75);
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  std::map<int,BOOL>::map[abi:ne180100](a4, (_QWORD *)v102 + 2);
  size = (std::__shared_weak_count *)v108.__r_.__value_.__l.__size_;
  if (v108.__r_.__value_.__l.__size_)
  {
    v59 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v61 = v85;
  if (v85)
  {
    v62 = (unint64_t *)&v85->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v88;
  if (v88)
  {
    v65 = (unint64_t *)&v88->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v91;
  if (v91)
  {
    v68 = (unint64_t *)&v91->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v103;
  if (v103)
  {
    v71 = (unint64_t *)&v103->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_191515D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  *(_QWORD *)(v31 - 128) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 128));
  if (*(char *)(v31 - 73) < 0)
    operator delete(*(void **)(v31 - 96));
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 160);
  _Unwind_Resume(a1);
}

void Espresso::rule_convolution_groups::status_t::~status_t(void **this)
{
  Espresso::rule_convolution_groups::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  void **v5;

  *this = &off_1E2D905A0;
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  v2 = this[11];
  if (v2)
  {
    v3 = (uint64_t)this[12];
    v4 = this[11];
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = this[11];
    }
    this[12] = v2;
    operator delete(v4);
  }
  v5 = this + 8;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::graph_optimization_rule_status::~graph_optimization_rule_status(Espresso::graph_optimization_rule_status *this)
{
  *(_QWORD *)this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<int>::destroy(*((_QWORD **)this + 3));
}

{
  *(_QWORD *)this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<int>::destroy(*((_QWORD **)this + 3));
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<int>::destroy(*((_QWORD **)this + 3));
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::rule_inception_block::~rule_inception_block(Espresso::rule_inception_block *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::rule_inception_block::match_at_layer(Espresso::rule_inception_block *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t **v10;
  int *v11;
  int v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  int *v21;
  unint64_t v22;
  _DWORD *v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t **v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t **v40;
  uint64_t *v41;
  int *v42;
  int v43;
  uint64_t v44;
  const void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t **v55;
  int v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t **v59;
  int *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  int *v81;
  __int128 v82;
  int v83;
  void *v84;
  std::__shared_weak_count *v85;
  int v86;
  char *v87;
  std::__shared_weak_count *v88;
  int v89;

  v89 = a2;
  v6 = (char *)operator new(0xF0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBC2A8;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_DWORD *)v6 + 8) = -1;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D87928;
  v7 = v6 + 24;
  *((_QWORD *)v6 + 5) = v6 + 48;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = v6 + 72;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 11) = 0;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 13) = 0;
  *((_QWORD *)v6 + 15) = 0;
  *((_QWORD *)v6 + 14) = v6 + 120;
  *((_QWORD *)v6 + 18) = 0;
  *((_QWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 17) = v6 + 144;
  *((_QWORD *)v6 + 22) = 0;
  *((_QWORD *)v6 + 21) = 0;
  *((_QWORD *)v6 + 19) = 0;
  *((_QWORD *)v6 + 20) = v6 + 168;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  v87 = v6 + 24;
  v88 = (std::__shared_weak_count *)v6;
  v8 = *((_QWORD *)this + 3) + 96;
  v84 = (void *)a2;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, a2, &v84);
  std::string::operator=((std::string *)(v6 + 208), (const std::string *)v9[3]);
  *((_DWORD *)v6 + 8) = a2;
  v10 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), a2, &v89);
  v11 = (int *)v10[5];
  v81 = (int *)v10[6];
  if (v11 != v81)
  {
    v80 = a3;
    do
    {
      v86 = *v11;
      v12 = v86;
      v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v86);
      v14 = *(const void **)(v13 + 64);
      if (v14
      {
        v16 = v15;
        v17 = *(std::__shared_weak_count **)(v13 + 72);
        v84 = v15;
        v85 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
      }
      else
      {
        v17 = 0;
        v16 = 0;
        v84 = 0;
        v85 = 0;
      }
      v20 = v87;
      v21 = (int *)*((_QWORD *)v87 + 9);
      v22 = *((_QWORD *)v87 + 10);
      if ((unint64_t)v21 >= v22)
      {
        v24 = (int *)*((_QWORD *)v87 + 8);
        v25 = v21 - v24;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v22 - (_QWORD)v24;
        v27 = (uint64_t)(v22 - (_QWORD)v24) >> 1;
        if (v27 <= v25 + 1)
          v27 = v25 + 1;
        v28 = v26 >= 0x7FFFFFFFFFFFFFFCLL;
        v29 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v28)
          v29 = v27;
        if (v29)
        {
          v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
          v24 = (int *)v20[8];
          v21 = (int *)v20[9];
        }
        else
        {
          v30 = 0;
        }
        v31 = (int *)(v29 + 4 * v25);
        *v31 = v12;
        v23 = v31 + 1;
        while (v21 != v24)
        {
          v32 = *--v21;
          *--v31 = v32;
        }
        v20[8] = v31;
        v20[9] = v23;
        v20[10] = v29 + 4 * v30;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v21 = v12;
        v23 = v21 + 1;
      }
      v20[9] = v23;
      v33 = (uint64_t **)(v20 + 2);
      v34 = v86;
      *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v33, v86, &v86)+ 32) = 1;
      if (v16)
      {
        v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 384))(v16);
        v36 = *(_DWORD *)(v35 + 48) == 1 && *(_DWORD *)(v35 + 52) == 1;
        v37 = v36 && *(_WORD *)(v35 + 92) == 1;
        v38 = v37 && *(_WORD *)(v35 + 94) == 1;
        if (v38 && *(_DWORD *)(v35 + 116) == 1)
        {
          std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), v34, &v86);
          v40 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), v34, &v86);
          v42 = (int *)v40[5];
          v41 = v40[6];
          if (v42 != (int *)v41)
          {
            while (1)
            {
              v83 = *v42;
              v43 = v83;
              v44 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v83);
              v45 = *(const void **)(v44 + 64);
              if (v45
              {
                v47 = v46;
                v48 = *(_QWORD *)(v44 + 72);
                *(_QWORD *)&v82 = v46;
                *((_QWORD *)&v82 + 1) = v48;
                if (v48)
                {
                  v49 = (unint64_t *)(v48 + 8);
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                  v44 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v43);
                  v45 = *(const void **)(v44 + 64);
                  if (!v45)
                    goto LABEL_56;
                }
              }
              else
              {
                v47 = 0;
                v82 = 0uLL;
                if (!v45)
                  goto LABEL_56;
              }
              {
                v51 = *(std::__shared_weak_count **)(v44 + 72);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                  do
                    v54 = __ldaxr(v52);
                  while (__stlxr(v54 - 1, v52));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                goto LABEL_73;
              }
LABEL_56:
              if (v47)
              {
                v55 = (uint64_t **)v87;
                *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v87 + 2, v43, &v83)+ 32) = 1;
                v56 = v86;
                *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v55 + 11, v86, &v86)+ 32) = 1;
                v57 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v55 + 17, v56, &v86);
                std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100]((char **)v57 + 5, &v82);
                v58 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v55 + 14, v56, &v86);
                v59 = v58;
                v60 = (int *)v58[6];
                v61 = v58[7];
                if (v60 >= (int *)v61)
                {
                  v63 = v58[5];
                  v64 = ((char *)v60 - (char *)v63) >> 2;
                  if ((unint64_t)(v64 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v65 = (char *)v61 - (char *)v63;
                  v66 = ((char *)v61 - (char *)v63) >> 1;
                  if (v66 <= v64 + 1)
                    v66 = v64 + 1;
                  v28 = v65 >= 0x7FFFFFFFFFFFFFFCLL;
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v28)
                    v67 = v66;
                  if (v67)
                  {
                    v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v67);
                    v63 = v59[5];
                    v60 = (int *)v59[6];
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = (int *)(v67 + 4 * v64);
                  *v69 = v43;
                  v62 = (uint64_t *)(v69 + 1);
                  while (v60 != (int *)v63)
                  {
                    v70 = *--v60;
                    *--v69 = v70;
                  }
                  v59[5] = (uint64_t *)v69;
                  v59[6] = v62;
                  v59[7] = (uint64_t *)(v67 + 4 * v68);
                  if (v63)
                    operator delete(v63);
                }
                else
                {
                  *v60 = v43;
                  v62 = (uint64_t *)(v60 + 1);
                }
                v59[6] = v62;
              }
LABEL_73:
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
              if (*((_QWORD *)&v82 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              if (++v42 == (int *)v41)
              {
                v17 = v85;
                break;
              }
            }
          }
        }
      }
      if (v17)
      {
        v74 = (unint64_t *)&v17->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v11;
    }
    while (v11 != v81);
    v7 = v87;
    a3 = v80;
  }
  if (*((_QWORD *)v7 + 13) >= 2uLL)
  {
    v79 = v88;
    *a3 = v7;
    a3[1] = v79;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v76 = v88;
    if (v88)
    {
      v77 = (unint64_t *)&v88->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
  }
}

void sub_191516718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rule_inception_block::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  char v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t *v90;
  size_t v91;
  void *p_p;
  void **v93;
  size_t v94;
  __int128 *v95;
  uint64_t *v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const void *v110;
  void *v111;
  void *v112;
  std::string::size_type v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *size;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  int v155;
  uint64_t **v156;
  uint64_t **v157;
  int *v158;
  int *v159;
  uint64_t v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t **v167;
  size_t v168;
  __int128 *v169;
  uint64_t *v170;
  uint64_t v171;
  _QWORD *v172;
  void *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t **v180;
  int v181;
  uint64_t **v182;
  uint64_t **v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::runtime_error *exception;
  uint64_t v219;
  uint64_t *v220;
  int *v221;
  uint64_t *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  int v228;
  uint64_t v229;
  void **v230;
  std::__shared_weak_count *v231;
  void *v232;
  std::__shared_weak_count *v233;
  uint64_t v234[3];
  std::string *v235;
  std::string *v236;
  std::string *v237;
  std::string *v238[3];
  std::string *v239[3];
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::__shared_weak_count *v243;
  __int128 v244;
  std::string *v245;
  std::string *v246;
  std::string *v247;
  std::string *v248;
  std::string *v249;
  std::string *v250;
  void *__p;
  std::__shared_weak_count *v252;
  char v253;
  void *lpsrc;
  std::__shared_weak_count *v255;
  void *v256;
  std::__shared_weak_count *v257;
  _BYTE __str[32];
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _OWORD v263[4];
  uint64_t v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  int v267;
  void *v268[2];
  unsigned __int8 v269;
  uint64_t *v270;
  _QWORD *v271[2];
  uint64_t **v272;
  std::__shared_weak_count *v273;
  std::string **v274;
  std::__shared_weak_count *v275;
  __int128 v276;
  char v277;
  std::string v278;
  uint64_t v279;
  __int128 v280;
  _BYTE v281[26];
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a3
  {
    v272 = 0;
    v273 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = v7;
  v9 = *(std::__shared_weak_count **)(a3 + 8);
  v272 = v7;
  v273 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v271[1] = 0;
  v271[0] = 0;
  v270 = (uint64_t *)v271;
  std::operator+<char>();
  v12 = (int *)v8[8];
  v221 = (int *)v8[9];
  if (v12 != v221)
  {
    v219 = a4;
    v228 = 0;
    v225 = *(_QWORD *)(a1 + 24);
    v226 = a1;
    do
    {
      v13 = *v12;
      LODWORD(v278.__r_.__value_.__l.__data_) = v13;
      if (*((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 11, v13, &v278)+ 32))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 16 * v13);
        v16 = *(std::__shared_weak_count **)(v14 + 72);
        *(_QWORD *)__str = v15;
        *(_QWORD *)&__str[8] = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v223 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v15 + 384))(v15) + 40);
        if (v16)
        {
          v19 = (unint64_t *)&v16->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v21 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 17, (int)v278.__r_.__value_.__l.__data_, &v278);
        v22 = v21[5];
        v23 = v21[6];
        while (v22 != v23)
        {
          v24 = (void *)*v22;
          v25 = (std::__shared_weak_count *)v22[1];
          __p = (void *)*v22;
          v252 = v25;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = (_OWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 384))(v24);
          v261 = v28[4];
          v262 = v28[5];
          v263[0] = v28[6];
          *(_OWORD *)((char *)v263 + 12) = *(_OWORD *)((char *)v28 + 108);
          *(_OWORD *)__str = *v28;
          *(_OWORD *)&__str[16] = v28[1];
          v259 = v28[2];
          v260 = v28[3];
          v29 = *(_OWORD *)((char *)v28 + 126);
          v30 = *(_OWORD *)((char *)v28 + 142);
          *(_OWORD *)&v281[10] = *(_OWORD *)((char *)v28 + 152);
          v280 = v29;
          *(_OWORD *)v281 = v30;
          v31 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v270, (int)v278.__r_.__value_.__l.__data_, &v278);
          v32 = v31;
          v33 = v31[6];
          v34 = v31[7];
          if (v33 >= v34)
          {
            v37 = v31[5];
            v38 = 0xCF3CF3CF3CF3CF3DLL * (v33 - v37);
            v39 = v38 + 1;
            if (v38 + 1 > 0x186186186186186)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v40 = 0xCF3CF3CF3CF3CF3DLL * (v34 - v37);
            if (2 * v40 > v39)
              v39 = 2 * v40;
            if (v40 >= 0xC30C30C30C30C3)
              v41 = 0x186186186186186;
            else
              v41 = v39;
            if (v41)
              v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(v41);
            else
              v42 = 0;
            v43 = v41 + 168 * v38;
            *(_OWORD *)(v43 + 64) = v261;
            *(_OWORD *)(v43 + 80) = v262;
            *(_OWORD *)(v43 + 96) = v263[0];
            *(_OWORD *)(v43 + 108) = *(_OWORD *)((char *)v263 + 12);
            *(_OWORD *)v43 = *(_OWORD *)__str;
            *(_OWORD *)(v43 + 16) = *(_OWORD *)&__str[16];
            *(_OWORD *)(v43 + 32) = v259;
            *(_OWORD *)(v43 + 48) = v260;
            *(_WORD *)(v43 + 124) = v228;
            *(_OWORD *)(v43 + 152) = *(_OWORD *)&v281[10];
            *(_OWORD *)(v43 + 142) = *(_OWORD *)v281;
            *(_OWORD *)(v43 + 126) = v280;
            v45 = v32[5];
            v44 = v32[6];
            v46 = (uint64_t *)v43;
            if (v44 != v45)
            {
              do
              {
                v47 = *(_OWORD *)(v44 - 21);
                v48 = *(_OWORD *)(v44 - 19);
                *(_OWORD *)(v46 - 17) = *(_OWORD *)(v44 - 17);
                *(_OWORD *)(v46 - 19) = v48;
                *(_OWORD *)(v46 - 21) = v47;
                v49 = *(_OWORD *)(v44 - 15);
                v50 = *(_OWORD *)(v44 - 13);
                v51 = *(_OWORD *)(v44 - 11);
                *(_OWORD *)(v46 - 9) = *(_OWORD *)(v44 - 9);
                *(_OWORD *)(v46 - 11) = v51;
                *(_OWORD *)(v46 - 13) = v50;
                *(_OWORD *)(v46 - 15) = v49;
                v52 = *(_OWORD *)(v44 - 7);
                v53 = *(_OWORD *)(v44 - 5);
                v54 = *(_OWORD *)(v44 - 3);
                *(uint64_t *)((char *)v46 - 11) = *(uint64_t *)((char *)v44 - 11);
                *(_OWORD *)(v46 - 3) = v54;
                *(_OWORD *)(v46 - 5) = v53;
                *(_OWORD *)(v46 - 7) = v52;
                v46 -= 21;
                v44 -= 21;
              }
              while (v44 != v45);
              v44 = v32[5];
            }
            v36 = (uint64_t *)(v43 + 168);
            v32[5] = v46;
            v32[6] = (uint64_t *)(v43 + 168);
            v32[7] = (uint64_t *)(v41 + 168 * v42);
            if (v44)
              operator delete(v44);
          }
          else
          {
            *((_OWORD *)v33 + 4) = v261;
            *((_OWORD *)v33 + 5) = v262;
            *((_OWORD *)v33 + 6) = v263[0];
            *(_OWORD *)((char *)v33 + 108) = *(_OWORD *)((char *)v263 + 12);
            *(_OWORD *)v33 = *(_OWORD *)__str;
            *((_OWORD *)v33 + 1) = *(_OWORD *)&__str[16];
            *((_OWORD *)v33 + 2) = v259;
            *((_OWORD *)v33 + 3) = v260;
            *(_OWORD *)(v33 + 19) = *(_OWORD *)&v281[10];
            v35 = v280;
            *(_OWORD *)((char *)v33 + 142) = *(_OWORD *)v281;
            *((_WORD *)v33 + 62) = v228;
            *(_OWORD *)((char *)v33 + 126) = v35;
            v36 = v33 + 21;
          }
          v32[6] = v36;
          if (v25)
          {
            v55 = (unint64_t *)&v25->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v22 += 2;
        }
        v228 += v223;
      }
      ++v12;
    }
    while (v12 != v221);
    v8 = v272;
    v57 = v272[8];
    v224 = v272[9];
    if (v57 != v224)
    {
      v58 = 0;
      while (1)
      {
        v267 = *(_DWORD *)v57;
        v59 = v267;
        v60 = *a2;
        v61 = 16 * v267;
        v62 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + v61);
        if (*(char *)(v62 + 223) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v62 + 200), *(_QWORD *)(v62 + 208));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)(v62 + 200);
          *(_QWORD *)&__str[16] = *(_QWORD *)(v62 + 216);
        }
        std::string::operator=((std::string *)(v60 + 7), (const std::string *)__str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v63 = v272;
        if (!*((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 11, v59, &v267)+ 32))break;
        if ((v58 & 1) == 0)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + v61);
          v78 = *(std::__shared_weak_count **)(v76 + 72);
          v265 = (unint64_t)v77;
          v266 = v78;
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 384))(v77);
          v82 = *(_OWORD *)v81;
          v83 = *(_OWORD *)(v81 + 32);
          *(_OWORD *)&__str[16] = *(_OWORD *)(v81 + 16);
          v259 = v83;
          *(_OWORD *)__str = v82;
          v84 = *(_OWORD *)(v81 + 48);
          v85 = *(_OWORD *)(v81 + 64);
          v86 = *(_OWORD *)(v81 + 96);
          v262 = *(_OWORD *)(v81 + 80);
          v263[0] = v86;
          v260 = v84;
          v261 = v85;
          v87 = *(_OWORD *)(v81 + 112);
          v88 = *(_OWORD *)(v81 + 128);
          v89 = *(_OWORD *)(v81 + 144);
          v264 = *(_QWORD *)(v81 + 160);
          v263[2] = v88;
          v263[3] = v89;
          v263[1] = v87;
          DWORD2(v259) = v228;
          v90 = *a2;
          std::string::basic_string[abi:ne180100]<0>(&v280, "convolution");
          if ((v269 & 0x80u) == 0)
            v91 = v269;
          else
            v91 = (size_t)v268[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v91 + 6);
          if (v253 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v91)
          {
            if ((v269 & 0x80u) == 0)
              v93 = v268;
            else
              v93 = (void **)v268[0];
            memmove(p_p, v93, v91);
          }
          strcpy((char *)p_p + v91, "_fused");
          if (*((char *)v63 + 207) < 0)
            std::string::__init_copy_ctor_external(&v278, (const std::string::value_type *)v63[23], (std::string::size_type)v63[24]);
          else
            v278 = *(std::string *)(v63 + 23);
          v248 = 0;
          v249 = 0;
          v250 = 0;
          *(_QWORD *)&v276 = &v248;
          BYTE8(v276) = 0;
          v248 = (std::string *)operator new(0x18uLL);
          v249 = v248;
          v250 = v248 + 1;
          v249 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v250, (__int128 *)&v278, (__int128 *)&v279, v248);
          if (*((char *)v63 + 207) >= 0)
            v94 = *((unsigned __int8 *)v63 + 207);
          else
            v94 = (size_t)v63[24];
          std::string::basic_string[abi:ne180100]((uint64_t)&v276, v94 + 6);
          if (v277 >= 0)
            v95 = &v276;
          else
            v95 = (__int128 *)v276;
          if (v94)
          {
            if (*((char *)v63 + 207) >= 0)
              v96 = (uint64_t *)(v63 + 23);
            else
              v96 = v63[23];
            memmove(v95, v96, v94);
          }
          strcpy((char *)v95 + v94, "_fused");
          v245 = 0;
          v246 = 0;
          v247 = 0;
          v274 = &v245;
          LOBYTE(v275) = 0;
          v245 = (std::string *)operator new(0x18uLL);
          v246 = v245;
          v247 = v245 + 1;
          v246 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v247, &v276, (__int128 *)&v278, v245);
          Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v90, (uint64_t)&v280, (uint64_t)&__p, (uint64_t)__str, (uint64_t)v248, (uint64_t)v249, (uint64_t *)&v245);
          if (lpsrc
          {
            v256 = v97;
            v257 = v255;
            if (v255)
            {
              v98 = (unint64_t *)&v255->__shared_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
              goto LABEL_100;
            }
          }
          else
          {
            v256 = 0;
            v257 = 0;
LABEL_100:
            v100 = v255;
            if (v255)
            {
              v101 = (unint64_t *)&v255->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
          }
          v274 = &v245;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
          if (v277 < 0)
            operator delete((void *)v276);
          *(_QWORD *)&v276 = &v248;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          if (v253 < 0)
            operator delete(__p);
          if ((v281[7] & 0x80000000) != 0)
            operator delete((void *)v280);
          v103 = v256;
          (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v256 + 472))(&v280, v256);
          (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v103 + 488))(&__p, v103);
          v104 = v272[8];
          v105 = v272[9];
          if (v104 != v105)
          {
            v106 = 0;
            v107 = 0;
            do
            {
              LODWORD(lpsrc) = *(_DWORD *)v104;
              v108 = (int)lpsrc;
              if (*((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 11, (int)lpsrc, &lpsrc)+ 32))
              {
                v109 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 16 * v108);
                v110 = *(const void **)(v109 + 64);
                if (v110
                {
                  v112 = v111;
                  v113 = *(_QWORD *)(v109 + 72);
                  v278.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
                  v278.__r_.__value_.__l.__size_ = v113;
                  if (v113)
                  {
                    v114 = (unint64_t *)(v113 + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                }
                else
                {
                  v112 = 0;
                  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = 0uLL;
                }
                (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v112 + 456))(&v276, v112);
                (*(void (**)(std::string ***__return_ptr, void *))(*(_QWORD *)v112 + 448))(&v274, v112);
                v116 = 0;
                v117 = *(int *)(v276 + 8);
                do
                {
                  v117 *= *(int *)(v276 + 12 + v116);
                  v116 += 4;
                }
                while (v116 != 12);
                memcpy((void *)(*(_QWORD *)(v280 + 24) + 4 * v106), *(const void **)(v276 + 24), 4 * v117);
                memcpy((void *)(*((_QWORD *)__p + 2) + 4 * v107), v274[2], 4 * *((int *)v274 + 2));
                v118 = 0;
                v119 = *(int *)(v276 + 8);
                do
                {
                  v119 *= *(int *)(v276 + 12 + v118);
                  v118 += 4;
                }
                while (v118 != 12);
                v120 = v275;
                v121 = *((int *)v274 + 2);
                if (v275)
                {
                  v122 = (unint64_t *)&v275->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                v124 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
                if (*((_QWORD *)&v276 + 1))
                {
                  v125 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                size = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
                if (v278.__r_.__value_.__l.__size_)
                {
                  v128 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v106 += v119;
                v107 += v121;
              }
              v104 = (uint64_t *)((char *)v104 + 4);
            }
            while (v104 != v105);
            v103 = v256;
            a1 = v226;
          }
          v244 = v280;
          if (*((_QWORD *)&v280 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          (*(void (**)(void *, __int128 *))(*(_QWORD *)v103 + 400))(v103, &v244);
          v132 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
          if (*((_QWORD *)&v244 + 1))
          {
            v133 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v135 = v256;
          v242 = __p;
          v243 = v252;
          if (v252)
          {
            v136 = (unint64_t *)&v252->__shared_owners_;
            do
              v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }
          (*(void (**)(void *, void **))(*(_QWORD *)v135 + 392))(v135, &v242);
          v138 = v243;
          if (v243)
          {
            v139 = (unint64_t *)&v243->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v141 = v252;
          if (v252)
          {
            v142 = (unint64_t *)&v252->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v144 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
          if (*((_QWORD *)&v280 + 1))
          {
            v145 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = v257;
          if (v257)
          {
            v148 = (unint64_t *)&v257->__shared_owners_;
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          v150 = v266;
          if (v266)
          {
            v151 = (unint64_t *)&v266->__shared_owners_;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          v58 = 1;
LABEL_182:
          v153 = *a2;
          if (*((char *)*a2 + 79) < 0)
          {
            *(_BYTE *)v153[7] = 0;
            v153[8] = 0;
          }
          else
          {
            *((_BYTE *)v153 + 56) = 0;
            *((_BYTE *)v153 + 79) = 0;
          }
          goto LABEL_185;
        }
        v58 = 1;
LABEL_185:
        v57 = (uint64_t *)((char *)v57 + 4);
        if (v57 == v224)
        {
          v8 = v272;
          v154 = v272[8];
          v220 = v272[9];
          if (v154 == v220)
            goto LABEL_271;
          while (1)
          {
            v222 = v154;
            LODWORD(v256) = *(_DWORD *)v154;
            v155 = (int)v256;
            v156 = v272;
            if (*((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 11, (int)v256, &v256)+ 32))
            {
              v157 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v156 + 14, v155, &v256);
              v158 = (int *)v157[5];
              v159 = (int *)v157[6];
              if (v158 != v159)
                break;
            }
LABEL_269:
            v154 = (uint64_t *)((char *)v222 + 4);
            if ((uint64_t *)((char *)v222 + 4) == v220)
            {
              v8 = v272;
              goto LABEL_271;
            }
          }
          v160 = 0;
          while (2)
          {
            v161 = *v158;
            v162 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16 * v161);
            *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v162;
            v229 = v162;
            if (*((_QWORD *)&v162 + 1))
            {
              v163 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
              do
                v164 = __ldxr(v163);
              while (__stxr(v164 + 1, v163));
            }
            v165 = *a2;
            std::string::basic_string[abi:ne180100]<0>(__str, "convolution");
            v166 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v270, (int)v256, &v256)[5];
            v167 = v272;
            if (*((char *)v272 + 207) >= 0)
              v168 = *((unsigned __int8 *)v272 + 207);
            else
              v168 = (size_t)v272[24];
            std::string::basic_string[abi:ne180100]((uint64_t)&v280, v168 + 6);
            if (v281[7] >= 0)
              v169 = &v280;
            else
              v169 = (__int128 *)v280;
            if (v168)
            {
              if (*((char *)v167 + 207) >= 0)
                v170 = (uint64_t *)(v167 + 23);
              else
                v170 = v167[23];
              memmove(v169, v170, v168);
            }
            strcpy((char *)v169 + v168, "_fused");
            v235 = 0;
            v236 = 0;
            v237 = 0;
            __p = &v235;
            LOBYTE(v252) = 0;
            v235 = (std::string *)operator new(0x18uLL);
            v236 = v235;
            v237 = v235 + 1;
            a1 = v226;
            v236 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v237, &v280, (__int128 *)&v281[8], v235);
            v171 = *(_QWORD *)(v226 + 24) + 96;
            v265 = v161;
            v172 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v171, v161, &v265);
            memset(v234, 0, sizeof(v234));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v234, v172[3], v172[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172[4] - v172[3]) >> 3));
            Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v274, v165, (uint64_t)__str, v229 + 16, (uint64_t)&v166[21 * v160], (uint64_t)v235, (uint64_t)v236, v234);
            if (v274
            {
              *(_QWORD *)&v276 = v173;
              *((_QWORD *)&v276 + 1) = v275;
              if (v275)
              {
                v174 = (unint64_t *)&v275->__shared_owners_;
                do
                  v175 = __ldxr(v174);
                while (__stxr(v175 + 1, v174));
                goto LABEL_211;
              }
            }
            else
            {
              v276 = 0uLL;
LABEL_211:
              v176 = v275;
              if (v275)
              {
                v177 = (unint64_t *)&v275->__shared_owners_;
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
            }
            __p = v234;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            __p = &v235;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            if ((v281[7] & 0x80000000) != 0)
              operator delete((void *)v280);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            v179 = v276;
            (*(void (**)(_BYTE *__return_ptr, _QWORD))(*(_QWORD *)v276 + 472))(__str, v276);
            (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v179 + 488))(&v280, v179);
            v180 = v272 + 17;
            v181 = (int)v256;
            v182 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v272 + 17, (int)v256, &v256);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v182[5][2 * v160] + 456))(&__p);
            v183 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v180, v181, &v256);
            (*(void (**)(std::string ***__return_ptr))(*(_QWORD *)v183[5][2 * v160] + 448))(&v274);
            v184 = 0;
            v185 = *((int *)__p + 2);
            do
            {
              v185 *= *(int *)((char *)__p + v184 + 12);
              v184 += 4;
            }
            while (v184 != 12);
            memcpy(*(void **)(*(_QWORD *)__str + 24), *((const void **)__p + 3), 4 * v185);
            memcpy(*(void **)(v280 + 16), v274[2], 4 * *((int *)v274 + 2));
            v232 = __p;
            v233 = v252;
            if (v252)
            {
              v186 = (unint64_t *)&v252->__shared_owners_;
              do
                v187 = __ldxr(v186);
              while (__stxr(v187 + 1, v186));
            }
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v179 + 400))(v179, &v232);
            v188 = v233;
            if (v233)
            {
              v189 = (unint64_t *)&v233->__shared_owners_;
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v188);
              }
            }
            v191 = v276;
            v230 = (void **)v274;
            v231 = v275;
            if (v275)
            {
              v192 = (unint64_t *)&v275->__shared_owners_;
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
            }
            (*(void (**)(uint64_t, void ***))(*(_QWORD *)v191 + 392))(v191, &v230);
            v194 = v231;
            if (v231)
            {
              v195 = (unint64_t *)&v231->__shared_owners_;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            v197 = v275;
            if (v275)
            {
              v198 = (unint64_t *)&v275->__shared_owners_;
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            v200 = v252;
            if (v252)
            {
              v201 = (unint64_t *)&v252->__shared_owners_;
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 - 1, v201));
              if (!v202)
              {
                ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                std::__shared_weak_count::__release_weak(v200);
              }
            }
            v203 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
            if (*((_QWORD *)&v280 + 1))
            {
              v204 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 - 1, v204));
              if (!v205)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
            }
            v206 = *(std::__shared_weak_count **)&__str[8];
            if (*(_QWORD *)&__str[8])
            {
              v207 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
              }
            }
            v209 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
            if (*((_QWORD *)&v276 + 1))
            {
              v210 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
              }
            }
            v212 = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
            if (v278.__r_.__value_.__l.__size_)
            {
              v213 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 - 1, v213));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                std::__shared_weak_count::__release_weak(v212);
              }
            }
            ++v160;
            if (++v158 == v159)
              goto LABEL_269;
            continue;
          }
        }
      }
      v64 = (uint64_t)*a2;
      v65 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + v61);
      v66 = *(std::__shared_weak_count **)(v65 + 72);
      v240 = *(_QWORD *)(v65 + 64);
      v241 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
        v65 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + v61);
      }
      v69 = *(_QWORD *)(a1 + 24) + 56;
      *(_QWORD *)&v280 = v59;
      v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v69, v59, &v280);
      memset(v239, 0, sizeof(v239));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v239, v70[3], v70[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70[4] - v70[3]) >> 3));
      v71 = *(_QWORD *)(a1 + 24) + 96;
      __p = (void *)v59;
      v72 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v71, v59, &__p);
      memset(v238, 0, sizeof(v238));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v238, v72[3], v72[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72[4] - v72[3]) >> 3));
      Espresso::sequential_builder::add_kernel(v64, &v240, v65 + 40, v65 + 16, v239, v238);
      *(_QWORD *)__str = v238;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(_QWORD *)__str = v239;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      v73 = v241;
      if (v241)
      {
        v74 = (unint64_t *)&v241->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      goto LABEL_182;
    }
LABEL_271:
    a4 = v219;
  }
  std::map<int,BOOL>::map[abi:ne180100](a4, v8 + 2);
  if ((char)v269 < 0)
    operator delete(v268[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v271[0]);
  v215 = v273;
  if (v273)
  {
    v216 = (unint64_t *)&v273->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
}

void sub_191517C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)STACK[0x268]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 248);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a1);
}

void std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

void Espresso::rule_inception_block::status_t::~status_t(Espresso::rule_inception_block::status_t *this)
{
  Espresso::rule_inception_block::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2D87928;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  v3 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*((char **)this + 18));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)this + 15));
  std::__tree<int>::destroy(*((_QWORD **)this + 12));
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<int>::destroy(*((_QWORD **)this + 3));
}

void std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::rule_1x1_inceptionlike::~rule_1x1_inceptionlike(Espresso::rule_1x1_inceptionlike *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::rule_1x1_inceptionlike::match_at_layer(Espresso::rule_1x1_inceptionlike *this@<X0>, int a2@<W1>, uint64_t ***a3@<X8>)
{
  char *v6;
  uint64_t **v7;
  uint64_t **v8;
  int *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  char **v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  int v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  int v33;

  v33 = a2;
  v6 = (char *)operator new(0x148uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBCCB8;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_QWORD *)v6 + 40) = 0;
  *((_OWORD *)v6 + 3) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D8F0B8;
  v7 = (uint64_t **)(v6 + 24);
  *((_DWORD *)v6 + 8) = -1;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 5) = v6 + 48;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = v6 + 72;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *((_QWORD *)v6 + 19) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 160));
  v31 = (uint64_t **)(v6 + 24);
  v32 = (std::__shared_weak_count *)v6;
  v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 16), a2, &v33);
  v9 = (int *)v8[5];
  v10 = v8[6];
  if (v9 != (int *)v10)
  {
    do
    {
      v30 = *v9;
      v11 = v30;
      v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v30);
      v13 = *(const void **)(v12 + 64);
      if (v13
      {
        v15 = *(std::__shared_weak_count **)(v12 + 72);
        *(_QWORD *)&v29 = v14;
        *((_QWORD *)&v29 + 1) = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 384))(v14);
        if (*(_DWORD *)(v18 + 48) == 1
          && *(_DWORD *)(v18 + 52) == 1
          && *(_WORD *)(v18 + 92) == 1
          && *(_WORD *)(v18 + 94) == 1)
        {
          v22 = (char **)v31;
          *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v31 + 2, v11, &v30)+ 32) = 1;
          std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100](v22 + 8, &v29);
        }
        if (v15)
        {
          v23 = (unint64_t *)&v15->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else
      {
        v29 = 0uLL;
      }
      ++v9;
    }
    while (v9 != (int *)v10);
    v7 = v31;
  }
  if ((unint64_t)((char *)v7[9] - (char *)v7[8]) >= 0x20)
  {
    v28 = v32;
    *a3 = v7;
    a3[1] = (uint64_t **)v28;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_1915185F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rule_1x1_inceptionlike::transform_and_return_skip_layers(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(_QWORD *)a1
  {
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  std::map<int,BOOL>::map[abi:ne180100](a2, v4 + 2);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1915186E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::rule_1x1_inceptionlike::status_t::~status_t(void **this)
{
  Espresso::rule_1x1_inceptionlike::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  *this = &off_1E2D8F0B8;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this + 8;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::_rule_bake_batchnorm::~_rule_bake_batchnorm(Espresso::_rule_bake_batchnorm *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::_rule_bake_batchnorm::match_at_layer(Espresso::_rule_bake_batchnorm *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  int v28;

  v28 = a2;
  v6 = (char *)operator new(0x78uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBF28;
  *((_QWORD *)v6 + 4) = 0xFFFFFFFFLL;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = v6 + 72;
  *((_QWORD *)v6 + 3) = &off_1E2D85B38;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_QWORD *)&v27 = v6 + 24;
  *((_QWORD *)&v27 + 1) = v6;
  *((_DWORD *)v6 + 8) = a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 5) = v6 + 48;
  v7 = (uint64_t **)(v6 + 40);
  *(_OWORD *)(v6 + 88) = 0u;
  v8 = v6 + 88;
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2);
  v10 = *(const void **)(v9 + 64);
  if (v10)
  {
    if (v11)
    {
      v12 = (uint64_t)v11;
      v13 = *(std::__shared_weak_count **)(v9 + 72);
      v26 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v11 + 384))(v11) + 112))
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v12, (uint64_t)v13);
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, a2, &v28)+ 32) = 1;
        if (v13)
        {
          v16 = (unint64_t *)&v13->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        *(_OWORD *)a3 = v27;
        return;
      }
    }
    else
    {
      v26 = 0;
      {
        v22 = *(std::__shared_weak_count **)(v9 + 72);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          do
            v25 = __ldaxr(v23);
          while (__stlxr(v25 - 1, v23));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v26 = 0;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_15:
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (*((_QWORD *)&v27 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    }
  }
}

void sub_191518B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::_rule_bake_batchnorm::transform_and_return_skip_layers(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int *v6;
  std::runtime_error *exception;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  std::runtime_error *v39;
  _QWORD v40[2];
  void **v41[2];
  unint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *__p[2];
  char v48;
  void *v49[2];
  uint64_t v50;
  _OWORD v51[7];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  if (!*(_QWORD *)a3
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = v6[2];
  v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16 * v11);
  v14 = *v12;
  v13 = v12[1];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = *((_QWORD *)v6 + 8);
  v17 = *((_QWORD *)v6 + 9);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (!v18)
  {
    v21 = *((_QWORD *)v6 + 9);
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Inconsistent state");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 384))(v18);
  v27 = *(_OWORD *)(v25 + 128);
  v26 = *(_OWORD *)(v25 + 144);
  v28 = *(_QWORD *)(v25 + 160);
  v52 = *(_OWORD *)(v25 + 112);
  v29 = *(_OWORD *)v25;
  v30 = *(_OWORD *)(v25 + 32);
  v51[1] = *(_OWORD *)(v25 + 16);
  v51[2] = v30;
  v51[0] = v29;
  v31 = *(_OWORD *)(v25 + 48);
  v32 = *(_OWORD *)(v25 + 64);
  v33 = *(_OWORD *)(v25 + 96);
  v51[5] = *(_OWORD *)(v25 + 80);
  v51[6] = v33;
  v51[3] = v31;
  v51[4] = v32;
  v55 = v28;
  v53 = v27;
  v54 = v26;
  LODWORD(v52) = 0;
  v34 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  v35 = *(_QWORD *)(a1 + 24) + 56;
  v40[0] = v11;
  v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, v11, v40);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, v36[3], v36[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[4] - v36[3]) >> 3));
  v37 = *(_QWORD *)(a1 + 24) + 96;
  v42 = v11;
  v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v11, &v42);
  memset(v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v43, v38[3], v38[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38[4] - v38[3]) >> 3));
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)v49, v34, (uint64_t)__p, v14 + 16, (uint64_t)v51, v44, v45, v43);
  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_convolution_kernel,Espresso::base_kernel>(&v50, v49[0], (uint64_t)v49[1]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v49);
  v41[0] = (void **)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v41);
  v41[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v41);
  if (v48 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v18 + 472))(__p, v18);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v18 + 488))(v49, v18);
  (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)v18 + 456))(v41, v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v18 + 448))(v40, v18);
  v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v39, "not implemented!");
  __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191518E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v29)
  {
    v34 = (unint64_t *)&v29->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v28)
  {
    v36 = (unint64_t *)&v28->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_convolution_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::_rule_bake_batchnorm::status_t::~status_t(Espresso::_rule_bake_batchnorm::status_t *this)
{
  Espresso::_rule_bake_batchnorm::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D85B38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<int>::destroy(*((_QWORD **)this + 3));
}

void std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::graph_optimization_rule_simple::match_at_layer@<X0>(Espresso::graph_optimization_rule_simple *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x58uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE110;
  v6[6] = 0;
  v6[4] = 0xFFFFFFFFLL;
  v6[5] = v6 + 6;
  v6[10] = 0;
  v6[9] = 0;
  v6[7] = 0;
  v6[8] = v6 + 9;
  a3[1] = v6;
  v6[3] = &off_1E2D9B1A8;
  *a3 = v6 + 3;
  return (*(uint64_t (**)(Espresso::graph_optimization_rule_simple *, uint64_t, _QWORD *))(*(_QWORD *)this
                                                                                                  + 40))(this, a2, a3);
}

void sub_1915191C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::graph_optimization_rule_simple::transform_and_return_skip_layers@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v6 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  v19 = *a3;
  v20 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 32))(a1, &v21, &v19);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return std::map<int,BOOL>::map[abi:ne180100](a4, (_QWORD *)(*a3 + 16));
}

void sub_1915192E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *Espresso::rule_convolution_groups::rule_convolution_groups(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *(uint64_t **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = 0;
  }
  v9 = *v3;
  v8 = v3[1];
  a1[3] = v9;
  a1[4] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E2D905C0;
  return a1;
}

_QWORD *Espresso::rule_inception_block::rule_inception_block(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *(uint64_t **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = 0;
  }
  v9 = *v3;
  v8 = v3[1];
  a1[3] = v9;
  a1[4] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E2D87948;
  return a1;
}

_QWORD *Espresso::rule_1x1_inceptionlike::rule_1x1_inceptionlike(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *(uint64_t **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = 0;
  }
  v9 = *v3;
  v8 = v3[1];
  a1[3] = v9;
  a1[4] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E2D8F0D8;
  return a1;
}

_QWORD *Espresso::_rule_bake_batchnorm::_rule_bake_batchnorm(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *(uint64_t **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = off_1E2D901E0;
    a1[1] = v3;
    a1[2] = 0;
  }
  v9 = *v3;
  v8 = v3[1];
  a1[3] = v9;
  a1[4] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E2D85B58;
  return a1;
}

void Espresso::optimize_network(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  Espresso::net *v23;
  char **v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type *v29;
  std::string::size_type *v30;
  char v31;
  std::string::size_type v32;
  std::string::size_type v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  BOOL v42;
  _QWORD *i;
  int v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  std::string::size_type v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *size;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  void (**v117)(_QWORD *__return_ptr);
  _BYTE __str[32];
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  std::string v122;
  std::string v123;
  char v124;
  char **v125;
  char *v126[2];
  std::string *v127[3];
  std::string *v128[3];
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t *v131;
  char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  _QWORD v135[3];
  uint64_t v136;
  std::string *v137[3];
  std::string *v138[3];
  uint64_t v139;
  std::__shared_weak_count *v140;
  unsigned int v141;
  uint64_t *v142;
  _QWORD *v143[3];
  std::__shared_weak_count *v144;
  std::string::size_type *v145;
  std::string::size_type *v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 *v151[2];

  v117 = a4;
  v9 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v10 = v9;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBBE0;
  v11 = (uint64_t)&v9[1];
  v12 = *a1;
  v13 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)__str = v12;
  *(_QWORD *)&__str[8] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = 0uLL;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v9[1], (uint64_t *)__str, a2, (uint64_t *)&v123);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v149 = v11;
  v150 = v10;
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v147, *(Espresso::net **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v143[2] = v147;
  v144 = v148;
  if (v148)
  {
    v18 = (unint64_t *)&v148->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ((void (**)(std::string::size_type **__return_ptr))v117)[2](&v145);
  v20 = v144;
  if (v144)
  {
    v21 = (unint64_t *)&v144->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v116 = a5;
  v143[0] = 0;
  v143[1] = 0;
  v142 = (uint64_t *)v143;
  v141 = 0;
  v23 = *(Espresso::net **)a3;
  if (*(_QWORD *)(*(_QWORD *)a3 + 40) == *(_QWORD *)(*(_QWORD *)a3 + 32))
    goto LABEL_128;
  LODWORD(v24) = 0;
  do
  {
    v25 = v143[0];
    if (!v143[0])
      goto LABEL_24;
    while (1)
    {
      v26 = *((_DWORD *)v25 + 7);
      if ((int)v24 >= v26)
        break;
LABEL_23:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_24;
    }
    if (v26 < (int)v24)
    {
      ++v25;
      goto LABEL_23;
    }
    v81 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v142, (int)v24, &v141);
    v23 = *(Espresso::net **)a3;
    if (*((_BYTE *)v81 + 32))
      goto LABEL_127;
LABEL_24:
    v27 = *((_QWORD *)v23 + 4);
    v28 = *(_QWORD *)(v27 + 16 * (int)v24);
    if (!v28)
      goto LABEL_127;
    v29 = v145;
    v30 = v146;
    if (v145 == v146)
    {
      v80 = (int)v24;
LABEL_102:
      v123.__r_.__value_.__r.__words[0] = v28;
      v82 = *(_QWORD *)(v27 + 16 * v80 + 8);
      v123.__r_.__value_.__l.__size_ = v82;
      if (v82)
      {
        v83 = (unint64_t *)(v82 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v149;
      if (*(char *)(v28 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v28 + 200), *(_QWORD *)(v28 + 208));
      }
      else
      {
        *(_OWORD *)__str = *(_OWORD *)(v28 + 200);
        *(_QWORD *)&__str[16] = *(_QWORD *)(v28 + 216);
      }
      std::string::operator=((std::string *)(v85 + 56), (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v86 = *(std::__shared_weak_count **)(v28 + 72);
      v129 = *(_QWORD *)(v28 + 64);
      v130 = v86;
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = *(_QWORD *)a3 + 56;
      v24 = (char **)(int)v24;
      v125 = v24;
      v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v89, (int)v24, &v125);
      memset(v128, 0, sizeof(v128));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v128, v90[3], v90[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90[4] - v90[3]) >> 3));
      v91 = *(_QWORD *)a3 + 96;
      v122.__r_.__value_.__r.__words[0] = (int)v24;
      v92 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v91, (int)v24, &v122);
      memset(v127, 0, sizeof(v127));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v127, v92[3], v92[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92[4] - v92[3]) >> 3));
      Espresso::sequential_builder::add_kernel(v85, &v129, v28 + 40, v28 + 16, v128, v127);
      *(_QWORD *)__str = v127;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(_QWORD *)__str = v128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      v93 = v130;
      if (v130)
      {
        v94 = (unint64_t *)&v130->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = v149;
      if (*(char *)(v149 + 79) < 0)
      {
        **(_BYTE **)(v149 + 56) = 0;
        *(_QWORD *)(v96 + 64) = 0;
      }
      else
      {
        *(_BYTE *)(v149 + 56) = 0;
        *(_BYTE *)(v96 + 79) = 0;
      }
      size = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
      if (v123.__r_.__value_.__l.__size_)
      {
        v98 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      LODWORD(v24) = v141;
      v23 = *(Espresso::net **)a3;
    }
    else
    {
      v31 = 0;
      do
      {
        v33 = *v29;
        v32 = v29[1];
        v123.__r_.__value_.__r.__words[0] = *v29;
        v123.__r_.__value_.__l.__size_ = v32;
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = v141;
        (*(void (**)(char ***__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v33 + 16))(&v125, v33, v141);
        v37 = (uint64_t *)v125;
        if (v125)
        {
          v38 = (uint64_t *)v125[2];
          v39 = (uint64_t *)(v125 + 3);
          if (v38 != (uint64_t *)(v125 + 3))
          {
            do
            {
              *(_QWORD *)__str = *(uint64_t *)((char *)v38 + 28);
              *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v142, *(int *)__str, __str)+ 32) = 1;
              v40 = (uint64_t *)v38[1];
              if (v40)
              {
                do
                {
                  v41 = v40;
                  v40 = (uint64_t *)*v40;
                }
                while (v40);
              }
              else
              {
                do
                {
                  v41 = (uint64_t *)v38[2];
                  v42 = *v41 == (_QWORD)v38;
                  v38 = v41;
                }
                while (!v42);
              }
              v38 = v41;
            }
            while (v41 != v39);
          }
          for (i = v143[0]; i; i = (_QWORD *)*i)
          {
            v44 = *((_DWORD *)i + 7);
            if (v36 >= v44)
            {
              if (v44 >= v36)
                goto LABEL_68;
              ++i;
            }
          }
          v45 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 16 * v36);
          *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v45;
          if (*((_QWORD *)&v45 + 1))
          {
            v46 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = v149;
          v49 = v45;
          if (*(char *)(v45 + 223) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v45 + 200), *(_QWORD *)(v45 + 208));
          }
          else
          {
            *(_OWORD *)__str = *(_OWORD *)(v45 + 200);
            *(_QWORD *)&__str[16] = *(_QWORD *)(v45 + 216);
          }
          std::string::operator=((std::string *)(v48 + 56), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          v50 = *(std::__shared_weak_count **)(v49 + 72);
          v139 = *(_QWORD *)(v49 + 64);
          v140 = v50;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          v53 = *(_QWORD *)a3 + 56;
          v151[0] = (__int128 *)v36;
          v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v53, v36, v151);
          memset(v138, 0, sizeof(v138));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v138, v54[3], v54[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[4] - v54[3]) >> 3));
          v55 = *(_QWORD *)a3 + 96;
          v136 = v36;
          v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55, v36, &v136);
          memset(v137, 0, sizeof(v137));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v137, v56[3], v56[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[4] - v56[3]) >> 3));
          Espresso::sequential_builder::add_kernel(v48, &v139, v49 + 40, v49 + 16, v138, v137);
          *(_QWORD *)__str = v137;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          *(_QWORD *)__str = v138;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          v57 = v140;
          if (v140)
          {
            v58 = (unint64_t *)&v140->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = v149;
          if (*(char *)(v149 + 79) < 0)
          {
            **(_BYTE **)(v149 + 56) = 0;
            *(_QWORD *)(v60 + 64) = 0;
          }
          else
          {
            *(_BYTE *)(v149 + 56) = 0;
            *(_BYTE *)(v60 + 79) = 0;
          }
          v61 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
          if (v122.__r_.__value_.__l.__size_)
          {
            v62 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v33 = v123.__r_.__value_.__r.__words[0];
LABEL_68:
          v133 = v149;
          v134 = v150;
          if (v150)
          {
            v64 = (unint64_t *)&v150->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          v131 = (uint64_t *)v125;
          v132 = v126[0];
          if (v126[0])
          {
            v66 = (unint64_t *)(v126[0] + 8);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          (*(void (**)(_QWORD *__return_ptr, std::string::size_type, uint64_t *, uint64_t **))(*(_QWORD *)v33 + 24))(v135, v33, &v133, &v131);
          std::__tree<int>::destroy((_QWORD *)v135[1]);
          v68 = (std::__shared_weak_count *)v132;
          if (v132)
          {
            v69 = (unint64_t *)(v132 + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v71 = v134;
          if (v134)
          {
            v72 = (unint64_t *)&v134->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v31 = 1;
        }
        v74 = (std::__shared_weak_count *)v126[0];
        if (v126[0])
        {
          v75 = (unint64_t *)(v126[0] + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
        if (v123.__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v37)
          break;
        v29 += 2;
      }
      while (v29 != v30);
      LODWORD(v24) = v141;
      v23 = *(Espresso::net **)a3;
      if ((v31 & 1) == 0)
      {
        v80 = (int)v141;
        v27 = *((_QWORD *)v23 + 4);
        v28 = *(_QWORD *)(v27 + 16 * (int)v141);
        goto LABEL_102;
      }
    }
LABEL_127:
    LODWORD(v24) = (_DWORD)v24 + 1;
    v141 = v24;
  }
  while ((int)v24 < (unint64_t)((uint64_t)(*((_QWORD *)v23 + 5) - *((_QWORD *)v23 + 4)) >> 4));
LABEL_128:
  v126[0] = 0;
  v126[1] = 0;
  v125 = v126;
  v100 = (_QWORD *)*((_QWORD *)v23 + 29);
  v101 = (_QWORD *)((char *)v23 + 240);
  if (v100 != (_QWORD *)((char *)v23 + 240))
  {
    do
    {
      if (*((char *)v100 + 55) < 0)
        std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)v100[4], v100[5]);
      else
        v123 = *(std::string *)(v100 + 4);
      v124 = *((_BYTE *)v100 + 56);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v122, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
      else
        v122 = v123;
      v102 = *(_QWORD *)a3 + 136;
      v151[0] = (__int128 *)&v122;
      if (*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v102, (unsigned __int8 *)&v122, v151)+ 5))
      {
        v103 = *(_QWORD *)a3 + 136;
        v151[0] = (__int128 *)&v122;
        v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, (unsigned __int8 *)&v122, v151);
        Espresso::abstract_blob_container::shape(__str, *((_QWORD *)v104 + 5));
        v151[0] = (__int128 *)&v122;
        v105 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, &v122, v151);
        v106 = *(_OWORD *)&__str[16];
        *(_OWORD *)(v105 + 56) = *(_OWORD *)__str;
        *(_OWORD *)(v105 + 72) = v106;
        *((_QWORD *)v105 + 11) = v119;
        v107 = (void *)*((_QWORD *)v105 + 12);
        if (v107)
        {
          *((_QWORD *)v105 + 13) = v107;
          operator delete(v107);
          *((_QWORD *)v105 + 12) = 0;
          *((_QWORD *)v105 + 13) = 0;
          *((_QWORD *)v105 + 14) = 0;
        }
        *((_OWORD *)v105 + 6) = v120;
        *((_QWORD *)v105 + 14) = v121;
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v108 = (_QWORD *)v100[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (_QWORD *)*v108;
        }
        while (v108);
      }
      else
      {
        do
        {
          v109 = (_QWORD *)v100[2];
          v42 = *v109 == (_QWORD)v100;
          v100 = v109;
        }
        while (!v42);
      }
      v100 = v109;
    }
    while (v109 != v101);
    v23 = *(Espresso::net **)a3;
  }
  Espresso::net::copy_parameters_from(*(Espresso::net **)(v149 + 80), v23);
  Espresso::sequential_builder::build_from_shapes(v149, (uint64_t)&v125, v116);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v125, v126[0]);
  std::__tree<int>::destroy(v143[0]);
  *(_QWORD *)__str = &v145;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  v110 = v148;
  if (v148)
  {
    v111 = (unint64_t *)&v148->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v150;
  if (v150)
  {
    v114 = (unint64_t *)&v150->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }

}

void sub_19151A0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 112);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sequential_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBBE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sequential_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBBE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequential_builder>::__on_zero_shared(uint64_t a1)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](a1 + 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 104);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 24);
}

void Espresso::fold_transform_params(const Espresso::net **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  const Espresso::net *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const Espresso::net *v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  Espresso *v74;
  const char *v75;
  NSObject *v76;
  void *v77;
  _QWORD *v78;
  Espresso *v79;
  const char *v80;
  NSObject *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  void **v89;
  uint64_t v90;
  int *v91;
  _DWORD *v92;
  int v93;
  float *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  float *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float *v107;
  uint64_t v108;
  float v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  std::string *v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::runtime_error *exception;
  std::runtime_error *v159;
  std::runtime_error *v160;
  std::string *v162[3];
  std::string *v163[3];
  uint64_t v164;
  std::__shared_weak_count *v165;
  void *v166;
  std::__shared_weak_count *v167;
  void **v168;
  std::__shared_weak_count *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  void **v174;
  std::__shared_weak_count *v175;
  uint64_t v176[3];
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *lpsrc;
  std::__shared_weak_count *v181;
  void *v182;
  std::__shared_weak_count *v183;
  _BYTE __str[32];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  char *v197;
  std::string *v198;
  unint64_t v199;
  uint64_t v200[2];
  uint64_t v201[2];
  uint64_t v202;
  std::__shared_weak_count *v203;
  _QWORD *v204[5];
  std::string __p;
  Espresso::net *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  _BYTE buf[12];
  __int16 v212;
  double v213;
  __int16 v214;
  double v215;
  __int16 v216;
  double v217;
  __int16 v218;
  double v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)*((_QWORD *)*a1 + 3);
  v201[0] = *((_QWORD *)*a1 + 2);
  v201[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v200[0] = 0;
  v200[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v202, v201, 0, v200);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v10 = *a1;
  v11 = *((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 5) != v11)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_OWORD *)(v11 + 16 * v12);
      v196 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = v13;
      v17 = *(const void **)(v13 + 64);
      if (v17
      {
        v19 = v18;
        v20 = *(std::__shared_weak_count **)(v16 + 72);
        v194 = v18;
        v195 = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (!(***(unsigned int (****)(_QWORD))(v18[1] + 8))(*(_QWORD *)(v18[1] + 8))
            || (***(unsigned int (****)(_QWORD))(v19[1] + 8))(*(_QWORD *)(v19[1] + 8)) == 100)
           && *(_WORD *)((*(uint64_t (**)(_QWORD *))(*v19 + 384))(v19) + 72) != 2
           && *(_WORD *)((*(uint64_t (**)(_QWORD *))(*v19 + 384))(v19) + 72) != 3;
      }
      else
      {
        v19 = 0;
        v23 = 0;
        v194 = 0;
        v195 = 0;
      }
      if (*(char *)(v16 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
      }
      else
      {
        *(_OWORD *)__str = *(_OWORD *)(v16 + 200);
        *(_QWORD *)&__str[16] = *(_QWORD *)(v16 + 216);
      }
      std::string::operator=(&__p, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v24 = (uint64_t)*a1 + 56;
      *(_QWORD *)__str = v12;
      v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v12, __str);
      v27 = (__int128 *)v25[3];
      v26 = (__int128 *)v25[4];
      while (1)
      {
        if (v27 == v26)
          goto LABEL_43;
        if (*((char *)v27 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)&__str[16] = *((_QWORD *)v27 + 2);
          *(_OWORD *)__str = v28;
        }
        v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a1 + 42), __str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (v29)
          break;
        v27 = (__int128 *)((char *)v27 + 24);
      }
      if ((v23 | a2) == 1)
        break;
LABEL_43:
      v44 = *(std::__shared_weak_count **)(v16 + 72);
      v164 = *(_QWORD *)(v16 + 64);
      v165 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = (uint64_t)*a1 + 56;
      *(_QWORD *)buf = v12;
      v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v47, v12, buf);
      memset(v163, 0, sizeof(v163));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v163, v48[3], v48[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48[4] - v48[3]) >> 3));
      v49 = (uint64_t)*a1 + 96;
      v182 = (void *)v12;
      v50 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v49, v12, &v182);
      memset(v162, 0, sizeof(v162));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v162, v50[3], v50[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50[4] - v50[3]) >> 3));
      Espresso::sequential_builder::add_kernel((uint64_t)&v202, &v164, v16 + 40, v16 + 16, v163, v162);
      *(_QWORD *)__str = v162;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(_QWORD *)__str = v163;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      v51 = v165;
      if (v165)
      {
        v52 = (unint64_t *)&v165->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
LABEL_49:
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
LABEL_142:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
      v134 = v195;
      if (v195)
      {
        v135 = (unint64_t *)&v195->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
      if (*((_QWORD *)&v196 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      ++v12;
      v10 = *a1;
      v11 = *((_QWORD *)*a1 + 4);
      if (v12 >= (*((_QWORD *)*a1 + 5) - v11) >> 4)
        goto LABEL_156;
    }
    v30 = (uint64_t)*a1 + 56;
    *(_QWORD *)__str = v12;
    v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30, v12, __str);
    if (v31[4] - v31[3] != 24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Not supported");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v32 = *a1;
    v33 = (uint64_t)*a1 + 56;
    *(_QWORD *)__str = v12;
    *(_QWORD *)buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, v12, __str)[3];
    v34 = (float *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v32 + 41, *(_QWORD **)buf, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    v35 = v34[14];
    v36 = v34[18];
    v37 = v34[19];
    v38 = v34[20];
    v39 = v34[21];
    v40 = (uint64_t)*a1 + 56;
    *(_QWORD *)__str = v12;
    v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v12, __str)[3];
    v42 = v198;
    if ((unint64_t)v198 >= v199)
    {
      v54 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v197, v41);
    }
    else
    {
      if (*(char *)(v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v198, *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
      }
      else
      {
        v43 = *(_OWORD *)v41;
        v198->__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 16);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
      }
      v54 = v42 + 1;
    }
    v198 = v54;
    v55 = (*(uint64_t (**)(_QWORD *))(*v19 + 384))(v19);
    v56 = *(_OWORD *)v55;
    v57 = *(_OWORD *)(v55 + 32);
    *(_OWORD *)&__str[16] = *(_OWORD *)(v55 + 16);
    v185 = v57;
    *(_OWORD *)__str = v56;
    v58 = *(_OWORD *)(v55 + 48);
    v59 = *(_OWORD *)(v55 + 64);
    v60 = *(_OWORD *)(v55 + 96);
    v188 = *(_OWORD *)(v55 + 80);
    v189 = v60;
    v186 = v58;
    v187 = v59;
    v61 = *(_OWORD *)(v55 + 112);
    v62 = *(_OWORD *)(v55 + 128);
    v63 = *(_OWORD *)(v55 + 144);
    v193 = *(_QWORD *)(v55 + 160);
    v191 = v62;
    v192 = v63;
    v190 = v61;
    if ((_DWORD)v61)
    {
      v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v159, "Invalid kernel: use fold_batchnorm first");
      __cxa_throw(v159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "convolution");
    v64 = (uint64_t)*a1 + 56;
    v172 = v12;
    v65 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v64, v12, &v172);
    v177 = 0;
    v178 = 0;
    v179 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v177, v65[3], v65[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65[4] - v65[3]) >> 3));
    v66 = (uint64_t)*a1 + 96;
    v170 = v12;
    v67 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v66, v12, &v170);
    memset(v176, 0, sizeof(v176));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v176, v67[3], v67[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67[4] - v67[3]) >> 3));
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v202, (uint64_t)buf, v16 + 16, (uint64_t)__str, v177, v178, v176);
    if (lpsrc
    {
      v182 = v68;
      v183 = v181;
      if (!v181)
        goto LABEL_68;
      v69 = (unint64_t *)&v181->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    else
    {
      v182 = 0;
      v183 = 0;
    }
    v71 = v181;
    if (v181)
    {
      v72 = (unint64_t *)&v181->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
LABEL_68:
    v174 = (void **)v176;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v174);
    v174 = (void **)&v177;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v174);
    if (SHIBYTE(v214) < 0)
    {
      operator delete(*(void **)buf);
      if (!v23)
        goto LABEL_76;
    }
    else if (!v23)
    {
      goto LABEL_76;
    }
    if (a2)
    {
      v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v160, "fold_transform_params: Only available for VALID convolutions");
      __cxa_throw(v160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Espresso::espresso_os_log_subsystem(v74, v75);
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_190DAF000, v76, OS_LOG_TYPE_ERROR, "fold_transform_params should only be used for VALID convolutions", buf, 2u);
    }

LABEL_76:
    v77 = v182;
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v182 + 472))(&lpsrc, v182);
    (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v77 + 488))(&v174, v77);
    v78 = v194;
    (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v194 + 456))(&v172, v194);
    v79 = (Espresso *)(*(_QWORD *(**)(unint64_t *__return_ptr, _QWORD *))(*v78 + 448))(&v170, v78);
    Espresso::espresso_os_log_subsystem(v79, v80);
    v81 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v35;
      v212 = 2048;
      v213 = v36;
      v214 = 2048;
      v215 = v37;
      v216 = 2048;
      v217 = v38;
      v218 = 2048;
      v219 = v39;
      _os_log_debug_impl(&dword_190DAF000, v81, OS_LOG_TYPE_DEBUG, "[Espresso::fold_transform_params] %f %f %f %f %f\n", buf, 0x34u);
    }

    v82 = 0;
    v83 = lpsrc;
    v84 = *((int *)lpsrc + 2);
    v85 = v172;
    v86 = (char *)lpsrc + 12;
    while (1)
    {
      v87 = 0;
      v88 = v84;
      do
      {
        v88 *= *(int *)&v86[v87];
        v87 += 4;
      }
      while (v87 != 12);
      if (v88 <= v82)
        break;
      *(float *)(v83[3] + 4 * v82) = v35 * *(float *)(*(_QWORD *)(v85 + 24) + 4 * v82);
      ++v82;
    }
    v89 = v174;
    v90 = *((unsigned int *)v174 + 2);
    if ((_DWORD)v90)
    {
      v91 = *(int **)(v170 + 16);
      v92 = v174[2];
      do
      {
        v93 = *v91++;
        *v92++ = v93;
        --v90;
      }
      while (v90);
    }
    v94 = (float *)operator new(0x10uLL);
    *v94 = v36;
    v94[1] = v37;
    v94[2] = v38;
    v94[3] = v39;
    v95 = DWORD2(v185);
    if (SDWORD2(v185) >= 1)
    {
      v96 = 0;
      v97 = HIDWORD(v185);
      if (SHIDWORD(v185) >= 4)
        LODWORD(v98) = 4;
      else
        LODWORD(v98) = HIDWORD(v185);
      v99 = v172;
      v100 = *(_QWORD *)(v170 + 16);
      v101 = (float *)v89[2];
      if ((int)v98 <= 1)
        v98 = 1;
      else
        v98 = v98;
      do
      {
        if (v97 < 1)
        {
          v106 = 0.0;
        }
        else
        {
          v102 = 0;
          v103 = *(_DWORD *)(v99 + 12) * *(_DWORD *)(v99 + 8);
          v104 = *(_QWORD *)(v99 + 24) + 4 * v103 * *(_DWORD *)(v99 + 16) * (int)v96;
          v105 = 4 * v103;
          v106 = 0.0;
          do
          {
            if (*((_DWORD *)v83 + 3) * *((_DWORD *)v83 + 2) >= 1)
            {
              v107 = (float *)v104;
              v108 = (*((_DWORD *)v83 + 3) * *((_DWORD *)v83 + 2));
              do
              {
                v109 = *v107++;
                v106 = v106 + (float)(v109 * v94[v102]);
                --v108;
              }
              while (v108);
            }
            ++v102;
            v104 += v105;
          }
          while (v102 != v98);
        }
        v101[v96] = v106 + *(float *)(v100 + 4 * v96);
        ++v96;
      }
      while (v96 != v95);
    }
    v168 = v89;
    v169 = v175;
    if (v175)
    {
      v110 = (unint64_t *)&v175->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    (*(void (**)(void *, void ***))(*(_QWORD *)v77 + 392))(v77, &v168);
    v112 = v169;
    if (v169)
    {
      v113 = (unint64_t *)&v169->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = v182;
    v166 = lpsrc;
    v167 = v181;
    if (v181)
    {
      v116 = (unint64_t *)&v181->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    (*(void (**)(void *, void **))(*(_QWORD *)v115 + 400))(v115, &v166);
    v118 = v167;
    if (v167)
    {
      v119 = (unint64_t *)&v167->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    operator delete(v94);
    v121 = v171;
    if (v171)
    {
      v122 = (unint64_t *)&v171->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = v173;
    if (v173)
    {
      v125 = (unint64_t *)&v173->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = v175;
    if (v175)
    {
      v128 = (unint64_t *)&v175->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v181;
    if (v181)
    {
      v131 = (unint64_t *)&v181->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v51 = v183;
    if (v183)
    {
      v133 = (unint64_t *)&v183->__shared_owners_;
      do
        v53 = __ldaxr(v133);
      while (__stlxr(v53 - 1, v133));
      goto LABEL_49;
    }
    goto LABEL_142;
  }
LABEL_156:
  Espresso::net::copy_parameters_from(v206, v10);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v202, (const Espresso::net *)((char *)*a1 + 184), a3);
  v140 = v197;
  v141 = v198;
  while (v140 != (char *)v141)
  {
    if (v140[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v140, *((_QWORD *)v140 + 1));
    }
    else
    {
      v142 = *(_OWORD *)v140;
      *(_QWORD *)&__str[16] = *((_QWORD *)v140 + 2);
      *(_OWORD *)__str = v142;
    }
    v143 = *a3;
    v144 = (_QWORD *)(*a3 + 328);
    v145 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v144, __str);
    if ((_QWORD *)(v143 + 336) != v145)
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v144, (uint64_t)v145);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v140 += 24;
  }
  *(_QWORD *)__str = &v197;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v210);
  v146 = v209;
  if (v209)
  {
    v147 = (unint64_t *)&v209->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v208;
  if (v208)
  {
    v150 = (unint64_t *)&v208->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v207;
  if (v207)
  {
    v153 = (unint64_t *)&v207->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v204, v204[1]);
  v155 = v203;
  if (v203)
  {
    v156 = (unint64_t *)&v203->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
}

void sub_19151B17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  char a67;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  a41 = (void **)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a41);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void Espresso::fold_concat(Espresso::net **a1@<X0>, Espresso::net **a2@<X8>)
{
  Espresso::net *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t **v23;
  int *v24;
  int *v25;
  __int16 v26;
  unint64_t v27;
  Espresso::net *v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  Espresso::net *v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  int *v50;
  int *v51;
  uint64_t v52;
  __int16 v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  const void *v58;
  void *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  void *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _DWORD *v70;
  int v71;
  int v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *size;
  unint64_t *v78;
  unint64_t v79;
  uint64_t **v80;
  int *v81;
  int *v82;
  unint64_t v83;
  Espresso::net *v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  Espresso::net *v99;
  std::runtime_error *exception;
  std::runtime_error *v101;
  Espresso::net **v102;
  std::string v103;
  std::string v104;
  __int128 v105;
  void *__p;
  char *v107;
  unint64_t v108;
  Espresso::net *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  uint64_t *v114[3];
  __int128 v115;
  int v116[3];

  v116[0] = 0;
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 5) != v4)
  {
    v102 = a2;
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)(v4 + 16 * v5);
      v115 = v6;
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = v6;
      v11 = *(const void **)(v6 + 64);
      if (v11
      {
        v12 = *(std::__shared_weak_count **)(v10 + 72);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v17 = *a1;
        v16 = (std::__shared_weak_count *)a1[1];
        v109 = *a1;
        v110 = v16;
        if (v16)
        {
          v18 = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v111, v17);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v111, (uint64_t)v17, (uint64_t)v16);
        if (v16)
        {
          v20 = (unint64_t *)&v16->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        __p = 0;
        v107 = 0;
        v108 = 0;
        v22 = v116[0];
        v23 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v114, v116[0], v116);
        v24 = (int *)v23[5];
        v25 = (int *)v23[6];
        if (v24 == v25)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          do
          {
            v27 = *v24;
            v28 = *a1;
            v29 = *(_OWORD *)(*((_QWORD *)*a1 + 4) + 16 * v27);
            v105 = v29;
            if (*((_QWORD *)&v29 + 1))
            {
              v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
              v28 = *a1;
            }
            v103.__r_.__value_.__r.__words[0] = v27;
            v32 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v28 + 96, v27, &v103)[3];
            if (*((char *)v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
            }
            else
            {
              v33 = *v32;
              v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
              *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v33;
            }
            v34 = *a1;
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a1 + 24), &v104))
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(exception, &v103);
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
            v35 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v34 + 23, &v104, (__int128 **)&v103)+ 16);
            v36 = v107;
            if ((unint64_t)v107 >= v108)
            {
              v38 = (char *)__p;
              v39 = (v107 - (_BYTE *)__p) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v41 = v108 - (_QWORD)__p;
              if ((uint64_t)(v108 - (_QWORD)__p) >> 1 > v40)
                v40 = v41 >> 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
                v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
              else
                v43 = 0;
              v44 = (char *)(v42 + 4 * v39);
              *(_DWORD *)v44 = v35;
              v37 = v44 + 4;
              while (v36 != v38)
              {
                v45 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              __p = v44;
              v108 = v42 + 4 * v43;
              if (v38)
                operator delete(v38);
            }
            else
            {
              *(_DWORD *)v107 = v35;
              v37 = v36 + 4;
            }
            v107 = v37;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
            if (*((_QWORD *)&v105 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v26 += v35;
            ++v24;
          }
          while (v24 != v25);
          v22 = v116[0];
        }
        v49 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v114, v22, v116);
        v51 = (int *)v49[5];
        v50 = (int *)v49[6];
        if (v51 != v50)
        {
          v52 = 0;
          v53 = 0;
          while (1)
          {
            v54 = *(_OWORD *)(*((_QWORD *)*a1 + 4) + 16 * *v51);
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v54;
            if (*((_QWORD *)&v54 + 1))
            {
              v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            v57 = v54;
            v58 = *(const void **)(v54 + 64);
            if (!v58)
            {
              v105 = 0uLL;
LABEL_123:
              v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v101, &v104);
              __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            if (v59)
            {
              v60 = v59;
              v61 = *(std::__shared_weak_count **)(v57 + 72);
              *(_QWORD *)&v105 = v59;
              *((_QWORD *)&v105 + 1) = v61;
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
              *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v59 + 384))(v59) + 130) = v26;
              *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v60 + 384))(v60) + 126) = v53;
              v64 = *((_DWORD *)__p + v52);
              if (!v61)
                goto LABEL_84;
            }
            else
            {
              v105 = 0uLL;
              if (!v65)
                goto LABEL_123;
              v66 = v65;
              v67 = *(std::__shared_weak_count **)(v57 + 72);
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldxr(v68);
                while (__stxr(v69 + 1, v68));
              }
              *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65) + 66) = v26;
              *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v66 + 384))(v66) + 62) = v53;
              v70 = __p;
              v71 = *((_DWORD *)__p + v52);
              *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v66 + 384))(v66) + 68) = v71;
              v72 = v70[v52];
              *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v66 + 384))(v66) + 104) = v72;
              v64 = v70[v52];
              if (v67)
              {
                v73 = (unint64_t *)&v67->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              v61 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
              if (!*((_QWORD *)&v105 + 1))
                goto LABEL_84;
            }
            v75 = (unint64_t *)&v61->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
LABEL_84:
            size = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
            if (v103.__r_.__value_.__l.__size_)
            {
              v78 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v53 += v64;
            ++v52;
            if (++v51 == v50)
            {
              v22 = v116[0];
              break;
            }
          }
        }
        v80 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v114, v22, v116);
        v81 = (int *)v80[5];
        v82 = (int *)v80[6];
        if (v81 != v82)
        {
          do
          {
            v83 = *v81;
            v84 = *a1;
            v85 = *(_OWORD *)(*((_QWORD *)*a1 + 4) + 16 * v83);
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v85;
            if (*((_QWORD *)&v85 + 1))
            {
              v86 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
              v84 = *a1;
            }
            v103.__r_.__value_.__r.__words[0] = v116[0];
            v88 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v84 + 96, v116[0], &v103);
            v89 = (uint64_t)*a1 + 96;
            *(_QWORD *)&v105 = v83;
            v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v89, v83, &v105);
            if (v90 != v88)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v90 + 3), (std::string *)v88[3], (std::string *)v88[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88[4] - v88[3]) >> 3));
            v91 = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
            if (v104.__r_.__value_.__l.__size_)
            {
              v92 = (unint64_t *)(v104.__r_.__value_.__l.__size_ + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            ++v81;
          }
          while (v81 != v82);
          v22 = v116[0];
        }
        Espresso::net::remove_layer(*a1, v22);
        v116[0] = v22 - 1;
        if (__p)
          operator delete(__p);
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v114[1]);
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v113);
        v94 = v112;
        if (v112)
        {
          v95 = (unint64_t *)&v112->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      }
      if (v7)
      {
        v97 = (unint64_t *)&v7->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = ++v116[0];
      v3 = *a1;
      v4 = *((_QWORD *)*a1 + 4);
    }
    while (v5 < (*((_QWORD *)*a1 + 5) - v4) >> 4);
    a2 = v102;
  }
  v99 = a1[1];
  *a2 = v3;
  a2[1] = v99;
  *a1 = 0;
  a1[1] = 0;
}

void sub_19151BB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 112);
  _Unwind_Resume(a1);
}

void Espresso::auto_add_auto_temporal_smoothing_before_softmaxes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  std::vector<std::string> *v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  std::string *begin;
  uint64_t v20;
  unint64_t v21;
  const void **p_data;
  size_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  void **v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  Espresso *v80;
  Espresso::net *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *lpsrc;
  std::__shared_weak_count *v87;
  void *v88;
  std::__shared_weak_count *v89;
  void *__p[2];
  int64_t v91;
  std::vector<std::string> v92;
  int64x2_t *v93;
  __int128 v94;
  _OWORD v95[3];
  void *v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  int64x2_t v99;
  unint64_t v100;
  uint64_t v101;

  v3 = a1;
  v100 = 0;
  v101 = a2;
  v99 = 0uLL;
  v5 = *a1;
  v6 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v5 + 40) != v6)
  {
    v83 = a3;
    v7 = 0;
    while (1)
    {
      v8 = *(_OWORD *)(v6 + 16 * v7);
      v98 = v8;
      if (*((_QWORD *)&v8 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v5 = *v3;
      }
      v93 = (int64x2_t *)v7;
      v11 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5 + 56, v7, &v93);
      v12 = v98;
      v13 = *(const void **)(v98 + 64);
      if (!v13)
        goto LABEL_107;
      if (!v14)
        goto LABEL_107;
      v15 = *(std::__shared_weak_count **)(v12 + 72);
      v96 = v14;
      v97 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = v3;
      LODWORD(v93) = 0;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      std::vector<std::string>::vector(&v92, 0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)v11[1].__begin_) >> 3));
      begin = v11[1].__begin_;
      if (v11[1].__end_ != begin)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          p_data = (const void **)&begin[v20].__r_.__value_.__l.__data_;
          v23 = HIBYTE(begin[v20].__r_.__value_.__r.__words[2]);
          if ((v23 & 0x80u) == 0)
            v24 = v23;
          else
            v24 = (size_t)p_data[1];
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v24 + 12);
          if (v91 >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          if (v24)
          {
            if (*((char *)p_data + 23) >= 0)
              v26 = p_data;
            else
              v26 = *p_data;
            memmove(v25, v26, v24);
          }
          strcpy((char *)v25 + v24, "__tx__smooth");
          v27 = &v92.__begin_[v20];
          if (SHIBYTE(v92.__begin_[v20].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27->__r_.__value_.__l.__data_);
          v28 = *(_OWORD *)__p;
          v27->__r_.__value_.__r.__words[2] = v91;
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          ++v21;
          begin = v11[1].__begin_;
          ++v20;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)begin) >> 3) > v21);
      }
      v3 = v18;
      if (!v7)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(*v18 + 32) + 16 * (v7 - 1));
      v30 = *(const void **)(v29 + 64);
      if (!v30
      {
        break;
      }
      v31 = *(std::__shared_weak_count **)(v29 + 72);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      __p[0] = &v92;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_97:
      v92.__begin_ = (std::vector<std::string>::pointer)((char *)&v95[1] + 8);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      v92.__begin_ = (std::vector<std::string>::pointer)v95;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v97;
      if (v97)
      {
        v75 = (unint64_t *)&v97->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
LABEL_107:
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      ++v7;
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 32);
      if (v7 >= (*(_QWORD *)(*v3 + 40) - v6) >> 4)
      {
        if (v99.i64[1] == v99.i64[0])
        {
          a3 = v83;
        }
        else
        {
          Espresso::net::insert_layers(v5, v99.i64);
          a3 = v83;
          v80 = (Espresso *)*v3;
          v81 = (Espresso::net *)(*v3 + 184);
          *((_BYTE *)v80 + 180) = 0;
          Espresso::shape_network_recursive(v80, v81, 0, 0);
          v5 = *v3;
        }
        goto LABEL_116;
      }
    }
    v88 = 0;
    v89 = 0;
    Espresso::abstract_engine_factory::shared(&v84);
    v35 = v84;
    v36 = *v18;
    std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
    Espresso::abstract_engine_factory::make_kernel_priv(v35, v36 + 16, (uint64_t)__p, (uint64_t)&v101, (int *)(v12 + 8));
    v37 = lpsrc;
    if (lpsrc
    {
      v38 = v87;
      if (!v87)
      {
        v88 = v37;
        v89 = 0;
LABEL_51:
        if (SHIBYTE(v91) < 0)
          operator delete(__p[0]);
        v44 = v85;
        if (v85)
        {
          v45 = (unint64_t *)&v85->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 2) = 0;
        *(_QWORD *)v47 = &off_1E2DBF0D0;
        *((_QWORD *)v47 + 3) = &off_1E2DA1A38;
        *(_OWORD *)(v47 + 40) = 0u;
        *(_OWORD *)(v47 + 56) = 0u;
        *(_OWORD *)(v47 + 72) = 0u;
        *(_OWORD *)(v47 + 88) = 0u;
        *(_OWORD *)(v47 + 104) = 0u;
        *(_OWORD *)(v47 + 120) = 0u;
        *(_OWORD *)(v47 + 136) = 0u;
        *(_OWORD *)(v47 + 152) = 0u;
        *(_OWORD *)(v47 + 161) = 0u;
        *((_OWORD *)v47 + 13) = 0u;
        *((_OWORD *)v47 + 14) = 0u;
        *((_QWORD *)v47 + 30) = 0;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        *(_QWORD *)&v94 = v47 + 24;
        *((_QWORD *)&v94 + 1) = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = v94;
        v53 = v88;
        v52 = v89;
        if (v89)
        {
          v54 = (unint64_t *)&v89->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v56 = *(std::__shared_weak_count **)(v51 + 72);
        *(_QWORD *)(v51 + 64) = v53;
        *(_QWORD *)(v51 + 72) = v52;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v98;
        if (*(char *)(v98 + 39) >= 0)
          v60 = *(unsigned __int8 *)(v98 + 39);
        else
          v60 = *(_QWORD *)(v98 + 24);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v60 + 12);
        if (v91 >= 0)
          v61 = __p;
        else
          v61 = (void **)__p[0];
        if (v60)
        {
          if (*(char *)(v59 + 39) >= 0)
            v62 = (const void *)(v59 + 16);
          else
            v62 = *(const void **)(v59 + 16);
          memmove(v61, v62, v60);
        }
        strcpy((char *)v61 + v60, "__tx__smooth");
        v63 = v94;
        v64 = v94 + 16;
        if (*(char *)(v94 + 39) < 0)
        {
          operator delete(*(void **)v64);
          v63 = v94;
        }
        v65 = v91;
        *(_OWORD *)v64 = *(_OWORD *)__p;
        *(_QWORD *)(v64 + 16) = v65;
        MEMORY[0x19401C808](v63 + 40, "prediction_smoothing");
        *(_QWORD *)(v94 + 8) = *(_QWORD *)(v98 + 8);
        LODWORD(v93) = v7 - 1;
        if (v95 != (_OWORD *)&v11[1])
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v95, v11[1].__begin_, v11[1].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)v11[1].__begin_) >> 3));
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v95[1] + 8, v92.__begin_, v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
        if (&v11[1] != &v92)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v11[1], v92.__begin_, v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
        v66 = v89;
        if (v89)
        {
          v67 = (unint64_t *)&v89->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        __p[0] = &v92;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v69 = v99.i64[1];
        if (v99.i64[1] >= v100)
        {
          v70 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v99, (uint64_t)&v93);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v99.i64[1], (uint64_t)&v93);
          v70 = v69 + 72;
        }
        v99.i64[1] = v70;
        goto LABEL_97;
      }
      v39 = (unint64_t *)&v87->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    else
    {
      v38 = 0;
    }
    v41 = v87;
    v88 = v37;
    v89 = v38;
    if (v87)
    {
      v42 = (unint64_t *)&v87->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    goto LABEL_51;
  }
LABEL_116:
  v82 = v3[1];
  *a3 = v5;
  a3[1] = v82;
  *v3 = 0;
  v3[1] = 0;
  v93 = &v99;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
}

void sub_19151C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  a29 = v29 - 120;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void Espresso::add_context_transfer_before(const Espresso::net **a1@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  const Espresso::net *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const Espresso::net *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  size_t size;
  void **v23;
  std::string *v24;
  size_t v25;
  __int128 *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  const Espresso::net *v55;
  unint64_t *v56;
  unint64_t v57;
  size_t v58;
  __int128 *v59;
  std::string *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  const Espresso::net *v66;
  const Espresso::net *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  std::string *v72;
  std::string *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::runtime_error *exception;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::string *v99;
  std::string *v100;
  std::string *v101;
  std::string *v102;
  std::string *v103;
  std::string *v104;
  void *__p[2];
  char v106;
  void *v107;
  char v108;
  char v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  std::string v113;
  uint64_t v114[2];
  uint64_t v115[2];
  uint64_t v116;
  std::__shared_weak_count *v117;
  _QWORD *v118[7];
  char v119;
  Espresso::net *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  const void *v132;
  std::__shared_weak_count *v133;
  std::string *v134;
  __int128 v135;
  std::string v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  char v140;
  std::string v141;
  __int128 v142;

  *((_QWORD *)&v142 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)*a1 + 3);
  v115[0] = *((_QWORD *)*a1 + 2);
  v115[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v6 = *a1;
  }
  v10 = *(_DWORD *)(**((_QWORD **)v6 + 4) + 12);
  v114[0] = 0;
  v114[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v116, v115, v10, v114);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = (uint64_t)*a1 + 56;
  *(_QWORD *)&v135 = (int)a2;
  v14 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, (int)a2, &v135)[3];
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v15;
  }
  v16 = *a1;
  v17 = *((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 5) != v17)
  {
    v18 = 0;
    v96 = a2;
    do
    {
      v19 = *(_OWORD *)(v17 + 16 * v18);
      v112 = v19;
      if (*((_QWORD *)&v19 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v18 == v96)
      {
        v135 = 0u;
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v107, "context_transfer");
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
        else
          size = v113.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 4);
        if (v106 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        if (size)
        {
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v113;
          else
            v24 = (std::string *)v113.__r_.__value_.__r.__words[0];
          memmove(v23, v24, size);
        }
        strcpy((char *)v23 + size, "_cpu");
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v141, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
        else
          v141 = v113;
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
        v131.__r_.__value_.__s.__data_[8] = 0;
        v102 = (std::string *)operator new(0x18uLL);
        v103 = v102;
        v104 = v102 + 1;
        v103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v104, (__int128 *)&v141, &v142, v102);
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
        else
          v25 = v113.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v139, v25 + 4);
        if (v140 >= 0)
          v26 = &v139;
        else
          v26 = (__int128 *)v139;
        if (v25)
        {
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v113;
          else
            v27 = (std::string *)v113.__r_.__value_.__r.__words[0];
          memmove(v26, v27, v25);
        }
        strcpy((char *)v26 + v25, "_cpu");
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
        v131.__r_.__value_.__s.__data_[8] = 0;
        v99 = (std::string *)operator new(0x18uLL);
        v100 = v99;
        v101 = v99 + 1;
        v100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v101, &v139, (__int128 *)&v141, v99);
        v28 = v122;
        LODWORD(v131.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v124 + 8))(*(_QWORD *)(v124 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v28, (uint64_t)&v124, (uint64_t)&v107, (uint64_t)&v135, (int *)&v131);
        v29 = (uint64_t)v132;
        if (!v132
        {
          v110 = 0;
          v111 = 0;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v131);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v110 = v30;
        v111 = v133;
        if (v133)
        {
          v31 = (unint64_t *)&v133->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          v33 = v133;
          v129 = v29;
          v130 = v133;
          if (v133)
          {
            v34 = (unint64_t *)&v133->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
        }
        else
        {
          v33 = 0;
          v129 = v29;
          v130 = 0;
        }
        memset(&v131, 0, sizeof(v131));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (uint64_t)v102, (uint64_t)v103, 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3));
        v127 = 0uLL;
        v128 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, (uint64_t)v99, (uint64_t)v100, 0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (char *)v99) >> 3));
        Espresso::sequential_builder::add_kernel((uint64_t)&v116, &v129, (uint64_t)&v107, (uint64_t)__p, (std::string **)&v131, (std::string **)&v127);
        v134 = (std::string *)&v127;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        v134 = &v131;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        if (v33)
        {
          v36 = (unint64_t *)&v33->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v116)
          Espresso::sequential_builder::add_shape_from_kernel(&v116, (uint64_t)v132, (__int128 **)&v102, (uint64_t *)&v99);
        v38 = v133;
        if (v133)
        {
          v39 = (unint64_t *)&v133->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        if (v140 < 0)
          operator delete((void *)v139);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (v106 < 0)
          operator delete(__p[0]);
        if (v109 < 0)
          operator delete(v107);
        LODWORD(v127) = 0;
        Espresso::create_context((int *)&v127, &v131);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v110 + 39), (__int128 *)&v131);
        v41 = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
        if (v131.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v110[39];
        v45 = (std::__shared_weak_count *)*((_QWORD *)*a1 + 3);
        v97 = *((_QWORD *)*a1 + 2);
        v98 = v45;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 112))(v44, &v97);
        v48 = v98;
        if (v98)
        {
          v49 = (unint64_t *)&v98->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v110 + 41, *((_QWORD *)*a1 + 2), *((_QWORD *)*a1 + 3));
        v51 = v111;
        if (v111)
        {
          v52 = (unint64_t *)&v111->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      v55 = *a1;
      v54 = (std::__shared_weak_count *)a1[1];
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
      else
        v58 = v113.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v127, v58 + 4);
      if (v128 >= 0)
        v59 = &v127;
      else
        v59 = (__int128 *)v127;
      if (v58)
      {
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v113;
        else
          v60 = (std::string *)v113.__r_.__value_.__r.__words[0];
        memmove(v59, v60, v58);
      }
      strcpy((char *)v59 + v58, "_cpu");
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v135, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
      }
      else
      {
        v135 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[0] = v113.__r_.__value_.__r.__words[2];
      }
      *(_OWORD *)&v136.__r_.__value_.__r.__words[1] = v127;
      v137 = v128;
      v128 = 0;
      v127 = 0uLL;
      memset(&v131, 0, sizeof(v131));
      v107 = &v131;
      v108 = 0;
      v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
      v131.__r_.__value_.__r.__words[2] = v131.__r_.__value_.__r.__words[0] + 48;
      v131.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v131.__r_.__value_.__r.__words[2], (uint64_t)&v135, (uint64_t)&v138, (uint64_t)v131.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)&v116, v55, (int)v18, (const std::string **)&v131);
      v107 = &v131;
      std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      if (SHIBYTE(v137) < 0)
        operator delete((void *)v136.__r_.__value_.__l.__size_);
      if (v136.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v135);
      if (SHIBYTE(v128) < 0)
      {
        operator delete((void *)v127);
        if (v54)
        {
LABEL_117:
          v61 = (unint64_t *)&v54->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      else if (v54)
      {
        goto LABEL_117;
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      ++v18;
      v16 = *a1;
      v17 = *((_QWORD *)*a1 + 4);
    }
    while (v18 < (*((_QWORD *)*a1 + 5) - v17) >> 4);
  }
  v66 = a1[1];
  *(_QWORD *)&v127 = v16;
  *((_QWORD *)&v127 + 1) = v66;
  v67 = v16;
  if (v66)
  {
    v68 = (unint64_t *)((char *)v66 + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    v67 = *a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v135, (__int128 **)v67 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v136.__r_.__value_.__l.__size_, (__int128 **)v67 + 26);
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  v70 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v135, &v113, (__int128 **)&v131);
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
  else
    v71 = v113.__r_.__value_.__l.__size_;
  v72 = &v131;
  std::string::basic_string[abi:ne180100]((uint64_t)&v131, v71 + 4);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = (std::string *)v131.__r_.__value_.__r.__words[0];
  if (v71)
  {
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v113;
    else
      v73 = (std::string *)v113.__r_.__value_.__r.__words[0];
    memmove(v72, v73, v71);
  }
  strcpy((char *)v72 + v71, "_cpu");
  v107 = &v131;
  v74 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v135, &v131, (_OWORD **)&v107);
  v75 = *(_OWORD *)(v70 + 56);
  v76 = *(_OWORD *)(v70 + 72);
  *((_QWORD *)v74 + 11) = *((_QWORD *)v70 + 11);
  *(_OWORD *)((char *)v74 + 72) = v76;
  *(_OWORD *)((char *)v74 + 56) = v75;
  if (v74 != (_OWORD *)v70)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v74 + 96, *((char **)v70 + 12), *((_QWORD *)v70 + 13), (uint64_t)(*((_QWORD *)v70 + 13) - *((_QWORD *)v70 + 12)) >> 2);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  Espresso::net::copy_parameters_from(v120, v16);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v116, (const Espresso::network_shape *)&v135, &v131);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v131);
  v77 = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
  if (v131.__r_.__value_.__l.__size_)
  {
    v78 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *a3 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v136.__r_.__value_.__l.__size_, (char *)v136.__r_.__value_.__r.__words[2]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v135, *((char **)&v135 + 1));
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v126);
  v83 = v125;
  if (v125)
  {
    v84 = (unint64_t *)&v125->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v123;
  if (v123)
  {
    v87 = (unint64_t *)&v123->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v121;
  if (v121)
  {
    v90 = (unint64_t *)&v121->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v119 < 0)
    operator delete(v118[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v118, v118[1]);
  v92 = v117;
  if (v117)
  {
    v93 = (unint64_t *)&v117->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_19151D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  uint64_t v72;

  Espresso::network_shape::~network_shape((char **)(v72 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  if (a42 < 0)
    operator delete(__p);
  Espresso::sequential_builder::~sequential_builder(&a48);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (std::string *)(a4 + v7 + 24);
      v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_19151D3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::graph_optimization_rule::~graph_optimization_rule(Espresso::graph_optimization_rule *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

void Espresso::graph_optimization_rule_simple::~graph_optimization_rule_simple(Espresso::graph_optimization_rule_simple *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

void ReadOnlyFile::readOneString(uint64_t a1, std::string *this)
{
  uint64_t v2;
  unsigned int *v3;
  std::string::size_type v5;
  std::string *v7;
  uint64_t v8;
  std::string::value_type *v9;
  std::string::value_type v10;

  v2 = *(int *)(a1 + 72);
  v3 = (unsigned int *)(*(_QWORD *)a1 + v2);
  if ((unint64_t)v3 > *(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - 4
    || (v5 = *v3, *(_DWORD *)(a1 + 72) = v2 + 4, v5 >= 0x2711)
    || !(_DWORD)v5)
  {
    exitFramework(24);
  }
  std::string::resize(this, v5, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = this;
  else
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  do
  {
    v8 = *(int *)(a1 + 72);
    v9 = (std::string::value_type *)(*(_QWORD *)a1 + v8);
    if ((unint64_t)v9 > *(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - 1)
      exitFramework(23);
    v10 = *v9;
    *(_DWORD *)(a1 + 72) = v8 + 1;
    v7->__r_.__value_.__s.__data_[0] = v10;
    v7 = (std::string *)((char *)v7 + 1);
    --v5;
  }
  while (v5);
}

float *onlineStdMeanVar(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, int *a7, int a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  float v13;
  double v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  if (a8 <= 0)
  {
    v9 = 0;
    *a5 = 3.4028e38;
    *a6 = 1.1755e-38;
    v19 = 0.0;
    v20 = -0.0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = a8;
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      v13 = result[v8++];
      v14 = v13 - v11;
      v11 = v11 + v14 / (double)(int)v8;
      v12 = v12 + v14 * (v13 - v11);
      v15 = v13 >= -0.0078125;
      if (v13 > 0.0078125)
        v15 = 0;
      v9 += v15;
    }
    while (a8 != v8);
    *a5 = 3.4028e38;
    *a6 = 1.1755e-38;
    v16 = *a5;
    v17 = 1.1755e-38;
    do
    {
      v18 = *result;
      if (*result < v16)
      {
        *a5 = v18;
        v16 = v18;
        v18 = *result;
        v17 = *a6;
      }
      if (v18 > v17)
      {
        *a6 = v18;
        v16 = *a5;
        v17 = v18;
      }
      ++result;
      --v10;
    }
    while (v10);
    v19 = v11;
    v20 = v12 / (double)(a8 - 1);
  }
  *a4 = v20;
  *a3 = sqrtf(v20);
  *a2 = v19;
  *a7 = v9;
  return result;
}

void applyForwardActivation(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  int v27;

  if (a3 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v25 = a4;
    v11 = a4;
    v12 = 4 * a4;
    v13 = a3;
    do
    {
      v14 = *a1;
      v15 = (float *)(*a1 + 4 * v10 * v11);
      v26 = v15;
      v16 = *a2;
      v17 = (void *)(*a2 + 4 * v10 * v11);
      switch(a5)
      {
        case 0:
          memmove(v15, v17, v12);
          break;
        case 1:
          VVector<float>::ffuncV(v15, (float *)v17, a4);
          break;
        case 2:
          v27 = a4;
          vvtanhf(v15, (const float *)v17, &v27);
          break;
        case 3:
          VVector<float>::gfunc2V(&v26, (const float *)v17, a4);
          break;
        case 4:
          if (a4 >= 1)
          {
            v18 = v25;
            do
            {
              v19 = *(float *)(v16 + v9);
              if (v19 < 0.0)
                v19 = 0.0;
              *(float *)(v14 + v9) = v19;
              v14 += 4;
              v16 += 4;
              --v18;
            }
            while (v18);
          }
          break;
        case 5:
          if (a4 >= 1)
          {
            v20 = (float *)(v14 + v9);
            v21 = (float *)(v16 + v9);
            v22 = v25;
            do
            {
              v23 = *v21 * 0.2 + 0.5;
              *v20 = v23;
              v24 = 0.0;
              if (v23 < 0.0 || (v24 = 1.0, v23 > 1.0))
                *v20 = v24;
              ++v20;
              ++v21;
              --v22;
            }
            while (v22);
          }
          break;
        default:
          exitFramework(41);
      }
      ++v10;
      v9 += v12;
    }
    while (v10 != v13);
  }
}

void VVector<float>::ffuncV(float *a1, float *a2, int a3)
{
  float *v4;
  uint64_t v5;
  float v6;
  int v7;
  int v8;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  v4 = a1;
  if ((a1 & 0xF) != 0)
  {
    if (a3 >= 1)
    {
      v5 = a3;
      do
      {
        v6 = *a2++;
        *v4++ = 1.0 / (float)(expf(-v6) + 1.0);
        --v5;
      }
      while (v5);
    }
  }
  else if (a3 >= -2)
  {
    v7 = a3 - 1;
    if (a3 < 1)
      v7 = a3 + 2;
    v8 = (v7 >> 2) + 1;
    __asm { FMOV            V0.4S, #1.0 }
    v16 = _Q0;
    do
    {
      v14 = *(float32x4_t *)a2;
      a2 += 4;
      *(double *)v15.i64 = MEMORY[0x19401DDB0]((__n128)vnegq_f32(v14));
      *(float32x4_t *)v4 = vdivq_f32(v16, vaddq_f32(v15, v16));
      v4 += 4;
      --v8;
    }
    while (v8);
  }
}

void VVector<float>::gfunc2V(float **a1, const float *__A, int a3)
{
  float v4;
  float __B;
  vDSP_Length __N;

  __B = 0.66667;
  LODWORD(__N) = a3;
  v4 = 1.7159;
  vDSP_vsmul(__A, 1, &__B, *a1, 1, a3);
  vvtanhf(*a1, *a1, (const int *)&__N);
  vDSP_vsmul(*a1, 1, &v4, *a1, 1, (int)__N);
}

size_t SentenceFileHeader::read(SentenceFileHeader *this, __sFILE *__stream)
{
  size_t v4;
  size_t v5;
  size_t v6;
  int *v7;
  size_t v8;
  size_t v9;
  size_t result;
  int v11;
  unsigned int v12;
  int __ptr;

  __ptr = 0;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  v4 = fread(this, 4uLL, 1uLL, __stream);
  v5 = fread((char *)this + 4, 4uLL, 1uLL, __stream) + v4;
  v6 = fread((char *)this + 8, 4uLL, 1uLL, __stream);
  v7 = (int *)((char *)this + 12);
  v8 = v5 + v6 + fread((char *)this + 12, 4uLL, 1uLL, __stream);
  v9 = fread((char *)this + 16, 4uLL, 1uLL, __stream);
  result = fread((char *)this + 20, 4uLL, 1uLL, __stream);
  if (v8 + v9 + result != 6)
    exitFramework(67);
  v11 = *v7 & 3;
  if (!v11)
    goto LABEL_8;
  v12 = *v7 & 0xFFFFFFFC;
  if (!v12)
    v12 = 32;
  *((_DWORD *)this + 6) = v12;
  if (v12 > 0x20 || ((1 << v12) & 0x100010100) == 0)
LABEL_8:
    exitFramework(25);
  *v7 = v11;
  return result;
}

void std::vector<VVector<float>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  v12 = a1[1];
  v13 = &v11[8 * v5];
  v15 = &v11[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v17 = *a1;
  if (v12 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v13 - 1) = v18;
      v13 -= 8;
    }
    while (v12 != v17);
    v12 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v12)
    operator delete(v12);
}

uint64_t SentenceRecognizer::SentenceRecognizer(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4;

  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = xmmword_191A936D0;
  *(_QWORD *)(a1 + 80) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 32;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 48) = a2[4];
  *(_DWORD *)(a1 + 32) = a2[17];
  v4 = a2[12];
  if (v4 == 8)
  {
    SentenceRecognizer::init<signed char>(a1, (uint64_t)a2, a3);
  }
  else if (v4 == 16)
  {
    SentenceRecognizer::init<short>(a1, (uint64_t)a2, a3);
  }
  else
  {
    SentenceRecognizer::init<float>(a1, (uint64_t)a2, a3);
  }
  return a1;
}

void sub_19151DC40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void SentenceRecognizer::init<short>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  uint64_t *v93;
  void **v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char **v130;
  unint64_t v131;
  char ***v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  int v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  char v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  _DWORD *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  void *v232;
  char **v233;
  unint64_t v234;
  char ***v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char ***v243;
  char *v244;
  char *v245;
  char **v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  _QWORD *v273;
  uint64_t v274;
  int v275;
  int v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  int v288;
  unint64_t v289;
  uint64_t *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  _QWORD *v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t *v310;
  _QWORD *v311;
  uint64_t v312;
  int v313;
  int v314;
  unint64_t v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  uint64_t *v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  uint64_t v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  unint64_t v338;
  uint64_t *v339;
  _QWORD *v340;
  uint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  unint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  char **v371;
  unint64_t v372;
  char ***v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char ***v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char **v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  unint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  unint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  char **v427;
  unint64_t v428;
  char ***v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  char ***v437;
  unint64_t v438;
  char *v439;
  char *v440;
  char **v441;
  _QWORD *v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  void **v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  void **v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  int v666;
  _QWORD *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  _QWORD *v686;
  _QWORD *v687;
  char **v688;
  unint64_t v689;
  char ***v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  char **v738;
  unint64_t v739;
  char ***v740;
  _QWORD *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  unint64_t v749;
  char *v750;
  char *v751;
  uint64_t v752;
  _QWORD *v753;
  uint64_t *v754;
  unint64_t v755;
  _QWORD *v756;
  char *v757;
  char *v758;
  uint64_t v759;
  uint64_t *v760;
  unint64_t v761;
  char *v762;
  char *v763;
  uint64_t v764;
  _QWORD *v765;
  uint64_t *v766;
  unint64_t v767;
  char *v768;
  char *v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  unint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t *v781;
  unint64_t v782;
  char *v783;
  char *v784;
  uint64_t v785;
  _QWORD *v786;
  char *v787;
  uint64_t v788;
  uint64_t *v789;
  unint64_t v790;
  char *v791;
  char *v792;
  uint64_t v793;
  _QWORD *v794;
  uint64_t *v795;
  unint64_t v796;
  char *v797;
  char *v798;
  uint64_t v799;
  _QWORD *v800;
  uint64_t *v801;
  unint64_t v802;
  char *v803;
  char *v804;
  uint64_t v805;
  _QWORD *v806;
  uint64_t *v807;
  unint64_t v808;
  char *v809;
  char *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t *v813;
  unint64_t v814;
  char *v815;
  char *v816;
  uint64_t v817;
  _QWORD *v818;
  uint64_t *v819;
  unint64_t v820;
  char *v821;
  char *v822;
  uint64_t v823;
  _QWORD *v824;
  uint64_t *v825;
  unint64_t v826;
  char *v827;
  char *v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t *v831;
  unint64_t v832;
  char *v833;
  char *v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t *v837;
  unint64_t v838;
  char *v839;
  char *v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  int v844;
  unint64_t v845;
  uint64_t *v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  int v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  unint64_t v864;
  uint64_t *v865;
  _QWORD *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  unint64_t v875;
  uint64_t *v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  unint64_t v886;
  uint64_t *v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  unint64_t v897;
  uint64_t *v898;
  _QWORD *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  unint64_t v908;
  uint64_t *v909;
  _QWORD *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  int v919;
  _QWORD *v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  _QWORD *v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t *v931;
  _QWORD *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  unint64_t v941;
  uint64_t *v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  _QWORD *v952;
  uint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  _QWORD *v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int v962;
  unint64_t v963;
  uint64_t *v964;
  _QWORD *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  uint64_t v971;
  uint64_t *v972;
  unint64_t v973;
  char *v974;
  char *v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t *v978;
  unint64_t v979;
  char *v980;
  char *v981;
  uint64_t v982;
  _QWORD *v983;
  uint64_t *v984;
  unint64_t v985;
  char *v986;
  char *v987;
  uint64_t v988;
  _QWORD *v989;
  uint64_t *v990;
  unint64_t v991;
  char *v992;
  char *v993;
  uint64_t v994;
  _QWORD *v995;
  uint64_t *v996;
  unint64_t v997;
  char *v998;
  char *v999;
  uint64_t v1000;
  _QWORD *v1001;
  uint64_t *v1002;
  unint64_t v1003;
  char *v1004;
  char *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t *v1008;
  unint64_t v1009;
  char *v1010;
  char *v1011;
  uint64_t v1012;
  _QWORD *v1013;
  uint64_t *v1014;
  unint64_t v1015;
  char *v1016;
  char *v1017;
  uint64_t v1018;
  _DWORD *v1019;
  void **v1020;
  uint64_t *v1021;
  unint64_t v1022;
  char *v1023;
  char *v1024;
  uint64_t v1025;
  _QWORD *v1026;
  uint64_t *v1027;
  unint64_t v1028;
  char *v1029;
  char *v1030;
  uint64_t v1031;
  _QWORD *v1032;
  uint64_t *v1033;
  unint64_t v1034;
  char *v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t *v1038;
  unint64_t v1039;
  char *v1040;
  char *v1041;
  uint64_t v1042;
  _QWORD *v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t *v1046;
  _QWORD *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t *v1056;
  _QWORD *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  unint64_t v1066;
  uint64_t *v1067;
  _QWORD *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  unint64_t v1077;
  uint64_t *v1078;
  _QWORD *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  unint64_t v1088;
  uint64_t *v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  unint64_t v1099;
  uint64_t *v1100;
  _QWORD *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  int v1110;
  unint64_t v1111;
  uint64_t *v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  unint64_t v1122;
  uint64_t *v1123;
  _QWORD *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int v1132;
  int v1133;
  unint64_t v1134;
  uint64_t *v1135;
  _QWORD *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  unint64_t v1146;
  uint64_t *v1147;
  _QWORD *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t *v1155;
  unint64_t v1156;
  char *v1157;
  char *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  char ***v1161;
  unint64_t v1162;
  char *v1163;
  char *v1164;
  char **v1165;
  _QWORD *v1166;
  uint64_t v1167;
  int v1168;
  int v1169;
  unint64_t v1170;
  uint64_t *v1171;
  _QWORD *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t *v1179;
  unint64_t v1180;
  char *v1181;
  char *v1182;
  uint64_t v1183;
  _QWORD *v1184;
  uint64_t *v1185;
  unint64_t v1186;
  char *v1187;
  char *v1188;
  uint64_t v1189;
  _QWORD *v1190;
  uint64_t *v1191;
  unint64_t v1192;
  char *v1193;
  char *v1194;
  uint64_t v1195;
  _QWORD *v1196;
  char *v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t *v1200;
  unint64_t v1201;
  char *v1202;
  char *v1203;
  uint64_t v1204;
  _QWORD *v1205;
  uint64_t *v1206;
  unint64_t v1207;
  char *v1208;
  char *v1209;
  uint64_t v1210;
  _QWORD *v1211;
  uint64_t *v1212;
  unint64_t v1213;
  char *v1214;
  char *v1215;
  uint64_t v1216;
  _QWORD *v1217;
  uint64_t *v1218;
  unint64_t v1219;
  char *v1220;
  char *v1221;
  uint64_t v1222;
  _QWORD *v1223;
  uint64_t *v1224;
  unint64_t v1225;
  char *v1226;
  char *v1227;
  uint64_t v1228;
  _QWORD *v1229;
  uint64_t *v1230;
  unint64_t v1231;
  char *v1232;
  char *v1233;
  uint64_t v1234;
  _QWORD *v1235;
  uint64_t *v1236;
  unint64_t v1237;
  char *v1238;
  char *v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  uint64_t *v1243;
  uint64_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  uint64_t *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t *v1259;
  uint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  int v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  char **v1271;
  unint64_t v1272;
  char ***v1273;
  _QWORD *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  int v1282;
  unint64_t v1283;
  uint64_t *v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  int v1298;
  _QWORD *v1299;
  _QWORD *v1300;
  _QWORD *v1301;
  char **v1302;
  unint64_t v1303;
  char ***v1304;
  _QWORD *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  int v1314;
  unint64_t v1315;
  uint64_t *v1316;
  _QWORD *v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  uint64_t *v1324;
  uint64_t v1325;
  int v1326;
  unint64_t v1327;
  uint64_t *v1328;
  _QWORD *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  unint64_t v1338;
  uint64_t *v1339;
  _QWORD *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  unint64_t v1349;
  uint64_t *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  char *v1360;
  char *v1361;
  uint64_t v1362;
  _QWORD *v1363;
  uint64_t *v1364;
  unint64_t v1365;
  char *v1366;
  char *v1367;
  uint64_t v1368;
  _QWORD *v1369;
  uint64_t *v1370;
  unint64_t v1371;
  char *v1372;
  char *v1373;
  uint64_t v1374;
  uint64_t *v1375;
  unint64_t v1376;
  char *v1377;
  char *v1378;
  uint64_t v1379;
  _QWORD *v1380;
  uint64_t *v1381;
  unint64_t v1382;
  char *v1383;
  char *v1384;
  uint64_t v1385;
  _QWORD *v1386;
  uint64_t *v1387;
  unint64_t v1388;
  char *v1389;
  char *v1390;
  uint64_t v1391;
  _QWORD *v1392;
  uint64_t *v1393;
  unint64_t v1394;
  char *v1395;
  char *v1396;
  uint64_t v1397;
  _QWORD *v1398;
  uint64_t *v1399;
  unint64_t v1400;
  char *v1401;
  char *v1402;
  uint64_t v1403;
  _QWORD *v1404;
  uint64_t *v1405;
  unint64_t v1406;
  char *v1407;
  char *v1408;
  uint64_t v1409;
  _QWORD *v1410;
  uint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  void *v1414;
  char **v1415;
  unint64_t v1416;
  char ***v1417;
  _QWORD *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  unint64_t v1427;
  uint64_t *v1428;
  _QWORD *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  int v1437;
  unint64_t v1438;
  uint64_t *v1439;
  _QWORD *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  int v1448;
  unint64_t v1449;
  uint64_t *v1450;
  _QWORD *v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  unint64_t v1460;
  uint64_t *v1461;
  _QWORD *v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  int v1470;
  unint64_t v1471;
  uint64_t *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  unint64_t v1482;
  uint64_t *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t *v1491;
  unint64_t v1492;
  char *v1493;
  char *v1494;
  uint64_t v1495;
  _QWORD *v1496;
  uint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  void *v1500;
  char **v1501;
  unint64_t v1502;
  char ***v1503;
  _QWORD *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  void *v1514;
  char **v1515;
  char *v1516;
  char ***v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  void *v1524;
  char **v1525;
  unint64_t v1526;
  char ***v1527;
  _QWORD *v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  uint64_t *v1535;
  unint64_t v1536;
  char *v1537;
  char *v1538;
  uint64_t v1539;
  _QWORD *v1540;
  uint64_t *v1541;
  unint64_t v1542;
  char *v1543;
  char *v1544;
  uint64_t v1545;
  _QWORD *v1546;
  uint64_t *v1547;
  unint64_t v1548;
  char *v1549;
  char *v1550;
  uint64_t v1551;
  _QWORD *v1552;
  uint64_t *v1553;
  unint64_t v1554;
  char *v1555;
  char *v1556;
  uint64_t v1557;
  _QWORD *v1558;
  char ***v1559;
  unint64_t v1560;
  char *v1561;
  char *v1562;
  char **v1563;
  _QWORD *v1564;
  uint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  void *v1568;
  char **v1569;
  unint64_t v1570;
  char ***v1571;
  _QWORD *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  int v1580;
  unint64_t v1581;
  uint64_t *v1582;
  _QWORD *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  int v1591;
  unint64_t v1592;
  uint64_t *v1593;
  _QWORD *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  int v1602;
  unint64_t v1603;
  uint64_t *v1604;
  _QWORD *v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  uint64_t *v1612;
  unint64_t v1613;
  char *v1614;
  char *v1615;
  uint64_t v1616;
  _QWORD *v1617;
  uint64_t *v1618;
  unint64_t v1619;
  char *v1620;
  char *v1621;
  uint64_t v1622;
  _QWORD *v1623;
  uint64_t *v1624;
  unint64_t v1625;
  char *v1626;
  char *v1627;
  uint64_t v1628;
  _QWORD *v1629;
  uint64_t *v1630;
  unint64_t v1631;
  char *v1632;
  char *v1633;
  uint64_t v1634;
  _QWORD *v1635;
  uint64_t *v1636;
  unint64_t v1637;
  char *v1638;
  char *v1639;
  uint64_t v1640;
  _QWORD *v1641;
  uint64_t *v1642;
  unint64_t v1643;
  char *v1644;
  char *v1645;
  uint64_t v1646;
  _QWORD *v1647;
  uint64_t *v1648;
  unint64_t v1649;
  char *v1650;
  char *v1651;
  uint64_t v1652;
  _QWORD *v1653;
  uint64_t v1654;
  int v1655;
  unint64_t v1656;
  uint64_t *v1657;
  _QWORD *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  int v1666;
  unint64_t v1667;
  uint64_t *v1668;
  _QWORD *v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  int v1677;
  unint64_t v1678;
  uint64_t *v1679;
  _QWORD *v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  unint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  int v1688;
  unint64_t v1689;
  uint64_t *v1690;
  _QWORD *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  char ***v1698;
  unint64_t v1699;
  char *v1700;
  char *v1701;
  char **v1702;
  _QWORD *v1703;
  uint64_t v1704;
  uint64_t *v1705;
  int v1706;
  uint64_t v1707;
  _QWORD *v1708;
  uint64_t v1709;
  uint64_t v1710;
  char *v1711;
  uint64_t v1712;
  _QWORD *v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  char ***v1717;
  unint64_t v1718;
  char *v1719;
  char *v1720;
  char **v1721;
  _QWORD *v1722;
  int v1723;
  uint64_t v1724;
  _QWORD *v1725;
  uint64_t v1726;
  uint64_t v1727;
  char *v1728;
  uint64_t v1729;
  _QWORD *v1730;
  uint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  char ***v1734;
  unint64_t v1735;
  char *v1736;
  char *v1737;
  char **v1738;
  _QWORD *v1739;
  int v1740;
  uint64_t v1741;
  int v1742;
  _QWORD *v1743;
  uint64_t v1744;
  uint64_t v1745;
  char *v1746;
  uint64_t v1747;
  _QWORD *v1748;
  uint64_t v1749;
  unint64_t v1750;
  uint64_t v1751;
  uint64_t *v1752;
  unint64_t v1753;
  char *v1754;
  char *v1755;
  uint64_t v1756;
  _QWORD *v1757;
  uint64_t *v1758;
  unint64_t v1759;
  char *v1760;
  char *v1761;
  uint64_t v1762;
  _QWORD *v1763;
  uint64_t *v1764;
  unint64_t v1765;
  char *v1766;
  char *v1767;
  uint64_t v1768;
  _QWORD *v1769;
  uint64_t v1770;
  int v1771;
  unint64_t v1772;
  uint64_t *v1773;
  _QWORD *v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  int v1782;
  unint64_t v1783;
  uint64_t *v1784;
  _QWORD *v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t *v1792;
  unint64_t v1793;
  char *v1794;
  char *v1795;
  uint64_t v1796;
  _QWORD *v1797;
  uint64_t *v1798;
  unint64_t v1799;
  char *v1800;
  char *v1801;
  uint64_t v1802;
  _QWORD *v1803;
  uint64_t *v1804;
  unint64_t v1805;
  char *v1806;
  char *v1807;
  uint64_t v1808;
  _QWORD *v1809;
  uint64_t *v1810;
  unint64_t v1811;
  char *v1812;
  char *v1813;
  uint64_t v1814;
  _QWORD *v1815;
  uint64_t v1816;
  int v1817;
  unint64_t v1818;
  uint64_t *v1819;
  _QWORD *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  uint64_t *v1827;
  unint64_t v1828;
  char *v1829;
  char *v1830;
  uint64_t v1831;
  _QWORD *v1832;
  uint64_t *v1833;
  unint64_t v1834;
  char *v1835;
  char *v1836;
  uint64_t v1837;
  _QWORD *v1838;
  uint64_t *v1839;
  unint64_t v1840;
  char *v1841;
  char *v1842;
  uint64_t v1843;
  _QWORD *v1844;
  uint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  void *v1848;
  char **v1849;
  unint64_t v1850;
  char ***v1851;
  _QWORD *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  unint64_t v1857;
  uint64_t v1858;
  char ***v1859;
  unint64_t v1860;
  char *v1861;
  char *v1862;
  char **v1863;
  _QWORD *v1864;
  char ***v1865;
  unint64_t v1866;
  char *v1867;
  char *v1868;
  char **v1869;
  _QWORD *v1870;
  uint64_t v1871;
  unint64_t v1872;
  unint64_t v1873;
  void *v1874;
  char **v1875;
  char ***v1876;
  uint64_t v1877;
  unint64_t v1878;
  unint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  unint64_t v1882;
  uint64_t *v1883;
  _QWORD *v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t *v1893;
  _QWORD *v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t *v1902;
  uint64_t v1903;
  int v1904;
  uint64_t v1905;
  uint64_t v1906;
  unint64_t v1907;
  unint64_t v1908;
  uint64_t *v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  _QWORD *v1913;
  _QWORD *v1914;
  _QWORD *v1915;
  unint64_t v1916;
  _QWORD *v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  unint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  unint64_t v1926;
  void *v1927;
  char **v1928;
  unint64_t v1929;
  char ***v1930;
  _QWORD *v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  char ***v1938;
  unint64_t v1939;
  char *v1940;
  char *v1941;
  char **v1942;
  _QWORD *v1943;
  uint64_t *v1944;
  unint64_t v1945;
  char *v1946;
  char *v1947;
  uint64_t v1948;
  _QWORD *v1949;
  uint64_t *v1950;
  unint64_t v1951;
  char *v1952;
  char *v1953;
  uint64_t v1954;
  _QWORD *v1955;
  char ***v1956;
  char **v1957;
  int v1958;
  uint64_t v1959;
  _QWORD *v1960;
  uint64_t v1961;
  uint64_t v1962;
  char *v1963;
  uint64_t v1964;
  _QWORD *v1965;
  uint64_t v1966;
  unint64_t v1967;
  uint64_t v1968;
  int v1969;
  uint64_t v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  char *v1974;
  uint64_t v1975;
  _QWORD *v1976;
  uint64_t v1977;
  unint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  unint64_t v1981;
  uint64_t *v1982;
  _QWORD *v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  uint64_t v1989;
  char ***v1990;
  unint64_t v1991;
  char *v1992;
  char *v1993;
  char **v1994;
  _QWORD *v1995;
  int v1996;
  uint64_t v1997;
  int v1998;
  _QWORD *v1999;
  uint64_t v2000;
  uint64_t v2001;
  char *v2002;
  uint64_t v2003;
  _QWORD *v2004;
  uint64_t v2005;
  unint64_t v2006;
  uint64_t v2007;
  uint64_t *v2008;
  unint64_t v2009;
  char *v2010;
  char *v2011;
  uint64_t v2012;
  _QWORD *v2013;
  uint64_t v2014;
  int v2015;
  uint64_t v2016;
  uint64_t v2017;
  int v2018;
  _QWORD *v2019;
  _QWORD *v2020;
  _QWORD *v2021;
  char **v2022;
  unint64_t v2023;
  char ***v2024;
  _QWORD *v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  unint64_t v2030;
  uint64_t v2031;
  char ***v2032;
  unint64_t v2033;
  char *v2034;
  char *v2035;
  char **v2036;
  char *v2037;
  char **v2038;
  char *v2039;
  char **v2040;
  char ***v2041;
  unint64_t v2042;
  char *v2043;
  char *v2044;
  char **v2045;
  _QWORD *v2046;
  uint64_t v2047;
  unint64_t v2048;
  unint64_t v2049;
  void *v2050;
  char **v2051;
  unint64_t v2052;
  char ***v2053;
  _QWORD *v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  unint64_t v2062;
  unint64_t v2063;
  void *v2064;
  char **v2065;
  uint64_t *v2066;
  uint64_t v2067;
  unint64_t v2068;
  unint64_t v2069;
  uint64_t v2070;
  void *v2071;
  char ***v2072;
  unint64_t v2073;
  char *v2074;
  char *v2075;
  char **v2076;
  _QWORD *v2077;
  char ***v2078;
  char **v2079;
  int v2080;
  uint64_t v2081;
  int v2082;
  uint64_t v2083;
  uint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  uint64_t *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  char ***v2091;
  uint64_t v2092;
  uint64_t v2093;
  int v2094;
  uint64_t v2095;
  _QWORD *v2096;
  uint64_t v2097;
  uint64_t v2098;
  char *v2099;
  uint64_t v2100;
  _QWORD *v2101;
  uint64_t v2102;
  unint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  unint64_t v2106;
  unint64_t v2107;
  void *v2108;
  char **v2109;
  unint64_t v2110;
  char ***v2111;
  _QWORD *v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  unint64_t v2117;
  uint64_t v2118;
  int v2119;
  uint64_t v2120;
  int v2121;
  unint64_t v2122;
  uint64_t *v2123;
  _QWORD *v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  unint64_t v2129;
  uint64_t v2130;
  char *v2131;
  char **v2132;
  _QWORD *v2133;
  char ***v2134;
  unint64_t v2135;
  char *v2136;
  char *v2137;
  char **v2138;
  _QWORD *v2139;
  int v2140;
  uint64_t v2141;
  int v2142;
  unint64_t v2143;
  uint64_t *v2144;
  _QWORD *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  uint64_t v2151;
  uint64_t *v2152;
  unint64_t v2153;
  char *v2154;
  char *v2155;
  uint64_t v2156;
  _QWORD *v2157;
  _DWORD *v2158;
  char ***v2159;
  unint64_t v2160;
  char *v2161;
  char *v2162;
  char **v2163;
  _QWORD *v2164;
  unint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  unint64_t v2170;
  uint64_t v2171;
  uint64_t *v2172;
  unint64_t v2173;
  char *v2174;
  char *v2175;
  uint64_t v2176;
  _QWORD *v2177;
  char *v2178;
  uint64_t v2179;
  _QWORD *v2180;
  uint64_t v2181;
  int v2182;
  int v2183;
  uint64_t v2184;
  char *v2185;
  uint64_t v2186;
  char *v2187;
  uint64_t v2188;
  uint64_t v2189;
  char *v2190;
  char *v2191;
  uint64_t v2192;
  char v2193;
  int v2194;
  uint64_t v2195;
  uint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  uint64_t v2199;
  uint64_t *v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  void **v2204;
  uint64_t v2205;
  unint64_t v2206;
  void **v2207;
  int v2208;
  int v2209;
  unint64_t v2210;
  char *v2211;
  _DWORD *v2212;
  char *v2213;
  uint64_t v2214;
  unint64_t v2215;
  uint64_t v2216;
  unint64_t v2217;
  uint64_t v2218;
  _DWORD *v2219;
  int v2220;
  unint64_t v2221;
  char *v2222;
  _DWORD *v2223;
  char *v2224;
  uint64_t v2225;
  unint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  uint64_t v2229;
  _DWORD *v2230;
  int v2231;
  unint64_t v2232;
  uint64_t *v2233;
  _QWORD *v2234;
  int v2235;
  uint64_t v2236;
  unint64_t v2237;
  uint64_t *v2238;
  _QWORD *v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  unint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  unint64_t v2250;
  uint64_t v2251;
  uint64_t *v2252;
  unint64_t v2253;
  char *v2254;
  char *v2255;
  uint64_t v2256;
  _QWORD *v2257;
  uint64_t *v2258;
  unint64_t v2259;
  char *v2260;
  char *v2261;
  uint64_t v2262;
  _QWORD *v2263;
  uint64_t v2264;
  unint64_t v2265;
  unint64_t v2266;
  void *v2267;
  char **v2268;
  char *v2269;
  char ***v2270;
  uint64_t v2271;
  unint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  char ***v2275;
  int v2276;
  uint64_t v2277;
  _QWORD *v2278;
  uint64_t v2279;
  uint64_t v2280;
  char *v2281;
  uint64_t v2282;
  _QWORD *v2283;
  uint64_t v2284;
  unint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  unint64_t v2288;
  unint64_t v2289;
  void *v2290;
  char **v2291;
  char ***v2292;
  uint64_t v2293;
  unint64_t v2294;
  unint64_t v2295;
  uint64_t v2296;
  char ***v2297;
  char **v2298;
  int v2299;
  uint64_t v2300;
  _QWORD *v2301;
  uint64_t v2302;
  uint64_t v2303;
  char *v2304;
  uint64_t v2305;
  _QWORD *v2306;
  uint64_t v2307;
  unint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  unint64_t v2311;
  unint64_t v2312;
  void *v2313;
  char **v2314;
  uint64_t *v2315;
  uint64_t v2316;
  unint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  char ***v2320;
  char **v2321;
  int v2322;
  uint64_t v2323;
  int v2324;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  unint64_t v2328;
  uint64_t *v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  _QWORD *v2333;
  _QWORD *v2334;
  void *v2335;
  char **v2336;
  unint64_t v2337;
  char ***v2338;
  _QWORD *v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  unint64_t v2344;
  uint64_t v2345;
  char ***v2346;
  unint64_t v2347;
  char *v2348;
  char *v2349;
  char **v2350;
  _QWORD *v2351;
  _QWORD *v2352;
  int v2353;
  uint64_t v2354;
  int v2355;
  std::vector<int> *v2356;
  int v2357;
  int v2358;
  int v2359;
  void *v2360;
  std::vector<int> *v2361;
  _DWORD *v2362;
  int v2365;
  uint64_t v2366;
  void *v2367[3];
  void *v2368;
  void *v2369;
  uint64_t v2370;
  void *v2371;
  void *v2372;
  uint64_t v2373;
  void *v2374;
  void *v2375;
  uint64_t v2376;
  void *v2377;
  void *v2378;
  uint64_t v2379;
  void *v2380;
  void *v2381;
  uint64_t v2382;
  void *v2383;
  void *v2384;
  uint64_t v2385;
  void *v2386;
  void *v2387;
  uint64_t v2388;
  void *v2389;
  void *v2390;
  uint64_t v2391;
  void *v2392;
  void *v2393;
  uint64_t v2394;
  void *v2395;
  void *v2396;
  uint64_t v2397;
  void *v2398;
  void *v2399;
  uint64_t v2400;
  void *v2401;
  void *v2402;
  uint64_t v2403;
  void *v2404;
  void *v2405;
  uint64_t v2406;
  void *v2407;
  void *v2408;
  uint64_t v2409;
  void *v2410;
  void *v2411;
  uint64_t v2412;
  void *__p;
  void *v2414;
  uint64_t v2415;
  void *v2416[3];
  void *v2417;
  void *v2418;
  uint64_t v2419;
  void *v2420;
  void *v2421;
  uint64_t v2422;
  void *v2423;
  _QWORD *v2424;
  char *v2425;
  void *v2426;
  _QWORD *v2427;
  char *v2428;
  void *v2429;
  _QWORD *v2430;
  char *v2431;
  void *v2432;
  void *v2433;
  uint64_t v2434;
  void *v2435;
  void *v2436;
  uint64_t v2437;
  _DWORD *v2438;
  _DWORD *v2439;
  uint64_t v2440;
  void *v2441;
  void *v2442;
  uint64_t v2443;
  void *v2444;
  void *v2445;
  uint64_t v2446;
  void *v2447;
  _QWORD *v2448;
  char *v2449;
  void *v2450;
  void *v2451;
  uint64_t v2452;
  void *v2453;
  _QWORD *v2454;
  char *v2455;
  void *v2456;
  void *v2457;
  uint64_t v2458;
  uint64_t *v2459;
  uint64_t *v2460;
  uint64_t v2461;
  void *v2462;
  void *v2463;
  uint64_t v2464;
  void *v2465;
  void *v2466;
  uint64_t v2467;
  void *v2468;
  void *v2469;
  uint64_t v2470;
  void *v2471;
  void *v2472;
  uint64_t v2473;
  void *v2474;
  void *v2475;
  uint64_t v2476;
  void *v2477;
  void *v2478;
  uint64_t v2479;
  void *v2480;
  void *v2481;
  uint64_t v2482;
  void *v2483;
  void *v2484;
  uint64_t v2485;
  void *v2486;
  void *v2487;
  uint64_t v2488;
  uint64_t *v2489;
  uint64_t *v2490;
  uint64_t v2491;
  _DWORD *v2492[3];
  uint64_t *v2493;
  uint64_t *v2494;
  uint64_t v2495;
  void *v2496;
  void *v2497;
  uint64_t v2498;
  void *v2499;
  void *v2500;
  uint64_t v2501;
  void *v2502;
  void *v2503;
  uint64_t v2504;
  uint64_t *v2505;
  uint64_t *v2506;
  uint64_t v2507;
  void *v2508;
  void *v2509;
  uint64_t v2510;
  void *v2511;
  void *v2512;
  uint64_t v2513;
  void *v2514;
  void *v2515;
  uint64_t v2516;
  uint64_t *v2517;
  uint64_t *v2518;
  uint64_t v2519;
  void *v2520;
  void *v2521;
  uint64_t v2522;
  void *v2523;
  void *v2524;
  uint64_t v2525;
  uint64_t *v2526;
  uint64_t *v2527;
  uint64_t v2528;
  void *v2529;
  void *v2530;
  uint64_t v2531;
  void *v2532;
  void *v2533;
  uint64_t v2534;
  void *v2535;
  void *v2536;
  uint64_t v2537;
  uint64_t *v2538;
  uint64_t *v2539;
  uint64_t v2540;
  void *v2541;
  void *v2542;
  uint64_t v2543;
  void *v2544;
  void *v2545;
  uint64_t v2546;
  uint64_t *v2547;
  uint64_t *v2548;
  uint64_t v2549;
  void *v2550;
  void *v2551;
  uint64_t v2552;
  uint64_t *v2553;
  uint64_t *v2554;
  uint64_t v2555;
  void *v2556;
  void *v2557;
  uint64_t v2558;
  void *v2559;
  void *v2560;
  uint64_t v2561;
  void *v2562;
  void *v2563;
  uint64_t v2564;
  void *v2565;
  void *v2566;
  uint64_t v2567;
  uint64_t *v2568;
  uint64_t *v2569;
  uint64_t v2570;
  void *v2571;
  void *v2572;
  uint64_t v2573;
  void *v2574;
  void *v2575;
  uint64_t v2576;
  void *v2577;
  void *v2578;
  uint64_t v2579;
  uint64_t *v2580;
  uint64_t *v2581;
  uint64_t v2582;
  void *v2583;
  void *v2584;
  uint64_t v2585;
  void *v2586;
  void *v2587;
  uint64_t v2588;
  uint64_t *v2589;
  uint64_t *v2590;
  uint64_t v2591;
  void *v2592;
  void *v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  uint64_t v2597;
  void *v2598;
  void *v2599;
  uint64_t v2600;
  void *v2601;
  void *v2602;
  uint64_t v2603;
  _DWORD *v2604;
  _DWORD *v2605;
  uint64_t v2606;
  _DWORD *v2607;
  _DWORD *v2608;
  uint64_t v2609;
  void *v2610;
  void *v2611;
  uint64_t v2612;
  void *v2613[3];
  void *v2614;
  void *v2615;
  uint64_t v2616;
  void *v2617;
  void *v2618;
  uint64_t v2619;
  void *v2620;
  void *v2621;
  uint64_t v2622;
  void *v2623;
  void *v2624;
  uint64_t v2625;
  void *v2626;
  void *v2627;
  uint64_t v2628;
  void *v2629;
  void *v2630;
  uint64_t v2631;
  uint64_t *v2632;
  uint64_t *v2633;
  uint64_t v2634;
  void *v2635;
  void *v2636;
  uint64_t v2637;
  void *v2638;
  void *v2639;
  uint64_t v2640;
  void *v2641;
  void *v2642;
  uint64_t v2643;
  void *v2644;
  void *v2645;
  uint64_t v2646;
  void *v2647;
  void *v2648;
  uint64_t v2649;
  uint64_t *v2650;
  uint64_t *v2651;
  uint64_t v2652;
  uint64_t *v2653;
  uint64_t *v2654;
  uint64_t v2655;
  void *v2656;
  void *v2657;
  uint64_t v2658;
  void *v2659;
  void *v2660;
  uint64_t v2661;
  void *v2662;
  void *v2663;
  uint64_t v2664;
  void *v2665;
  void *v2666;
  uint64_t v2667;
  _DWORD *v2668;
  _DWORD *v2669;
  uint64_t v2670;
  _DWORD *v2671;
  _DWORD *v2672;
  uint64_t v2673;
  _DWORD *v2674;
  _DWORD *v2675;
  uint64_t v2676;
  _DWORD *v2677;
  _DWORD *v2678;
  uint64_t v2679;
  _DWORD *v2680[3];
  void *v2681;
  _QWORD *v2682;
  _QWORD *v2683;

  if ((*(_BYTE *)(a2 + 48) & 7) != 0)
    exitFramework(345);
  v2359 = *(unsigned __int8 *)(a2 + 44);
  v2355 = *(unsigned __int8 *)(a2 + 46);
  v4 = *(unsigned __int8 *)(a2 + 45);
  v5 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
  v2353 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 8);
  v2365 = *(_QWORD *)(a2 + 36);
  *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 36));
  *(_QWORD *)(a1 + 96) = 0;
  v6 = operator new(0xCuLL);
  *(_QWORD *)v6 = 0x300000001;
  v2362 = v6;
  v6[2] = 3;
  v7 = operator new(0xCuLL);
  *(_QWORD *)v7 = 0x100000001;
  v7[2] = 3;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_DWORD *)(a3 + 8);
  if (v4)
    v9 = 4;
  else
    v9 = 1;
  *(_BYTE *)(a1 + 16) = v8 != 0;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v2357 = v10;
  v2358 = v4;
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v5;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v2365;
  v2366 = a1;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  v11 = 5;
  v2360 = v7;
  v2361 = (std::vector<int> *)(v2362 + 3);
  v12 = (uint64_t)(v7 + 3);
  v13 = 300;
  switch(v5)
  {
    case 2:
      v286 = operator new();
      v287 = *(_DWORD *)a1;
      v288 = *(_DWORD *)(a1 + 4);
      memset(v2680, 0, sizeof(v2680));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2680, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v286, v287, v288, v2680, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v290 = *(uint64_t **)(a1 + 112);
      v289 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v290 >= v289)
      {
        v578 = (void **)(v2366 + 104);
        v577 = *(_QWORD *)(v2366 + 104);
        v579 = ((uint64_t)v290 - v577) >> 3;
        if ((unint64_t)(v579 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v580 = v289 - v577;
        v581 = v580 >> 2;
        if (v580 >> 2 <= (unint64_t)(v579 + 1))
          v581 = v579 + 1;
        if ((unint64_t)v580 >= 0x7FFFFFFFFFFFFFF8)
          v582 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v582 = v581;
        if (v582)
          v582 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v582);
        else
          v583 = 0;
        v1014 = (uint64_t *)(v582 + 8 * v579);
        v1015 = v582 + 8 * v583;
        *v1014 = v286;
        v291 = v1014 + 1;
        v1016 = (char *)*v94;
        v1017 = (char *)*v578;
        if (*v94 != *v578)
        {
          do
          {
            v1018 = *((_QWORD *)v1016 - 1);
            v1016 -= 8;
            *--v1014 = v1018;
          }
          while (v1016 != v1017);
          v1016 = (char *)*v578;
        }
        *(_QWORD *)(v2366 + 104) = v1014;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1015;
        if (v1016)
          operator delete(v1016);
      }
      else
      {
        *v290 = v286;
        v291 = v290 + 1;
      }
      *v94 = v291;
      v1019 = v2680[0];
      if (!v2680[0])
        goto LABEL_1450;
      v1020 = (void **)v2680;
      goto LABEL_1449;
    case 3:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v274 = operator new();
      v275 = *(_DWORD *)a1;
      v276 = *(_DWORD *)(a1 + 4);
      v2678 = 0;
      v2679 = 0;
      v2677 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2677, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v274, v275, v276, &v2677, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v277 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v279 = v278;
      v280 = &v277[v278];
      *v277 = v274;
      v2682 = v277 + 1;
      v2683 = v280;
      v2681 = v277;
      if (v2677)
      {
        v2678 = v2677;
        operator delete(v2677);
      }
      v281 = operator new();
      v282 = operator new();
      v283 = *(_DWORD *)v2366;
      v284 = *(_DWORD *)(v2366 + 4);
      v2675 = 0;
      v2676 = 0;
      v2674 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2674, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v282, v283, v284, &v2674, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      Reverse::Reverse(v281, v282, *(_DWORD *)(v2366 + 20));
      if (v279 < 2)
      {
        v676 = 2;
        if ((unint64_t)(((char *)v280 - (char *)v277) >> 2) > 2)
          v676 = ((char *)v280 - (char *)v277) >> 2;
        if ((unint64_t)((char *)v280 - (char *)v277) >= 0x7FFFFFFFFFFFFFF8)
          v677 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v677 = v676;
        if (v677)
          v677 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v677);
        else
          v678 = 0;
        v1521 = 0;
        v1522 = v677 + 8;
        v1523 = v677 + 8 * v678;
        *(_QWORD *)(v677 + 8) = v281;
        v285 = (_QWORD *)(v677 + 16);
        do
        {
          *(_QWORD *)(v677 + v1521 * 8) = v277[v1521];
          --v1521;
        }
        while (v1521 != -1);
        v1524 = v2681;
        v2681 = (void *)(v1522 - 8);
        v2683 = (_QWORD *)v1523;
        if (v1524)
          operator delete(v1524);
      }
      else
      {
        v277[1] = v281;
        v285 = v277 + 2;
      }
      v2682 = v285;
      if (v2674)
      {
        v2675 = v2674;
        operator delete(v2674);
      }
      v1525 = (char **)operator new();
      Parallel::Parallel(v1525, (uint64_t)&v2681);
      v1527 = *(char ****)(v2366 + 112);
      v1526 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1527 >= v1526)
      {
        v1529 = *(_QWORD *)(v2366 + 104);
        v1530 = ((uint64_t)v1527 - v1529) >> 3;
        if ((unint64_t)(v1530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1531 = v1526 - v1529;
        v1532 = v1531 >> 2;
        if (v1531 >> 2 <= (unint64_t)(v1530 + 1))
          v1532 = v1530 + 1;
        if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
          v1533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1533 = v1532;
        if (v1533)
          v1533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1533);
        else
          v1534 = 0;
        v1717 = (char ***)(v1533 + 8 * v1530);
        v1718 = v1533 + 8 * v1534;
        *v1717 = v1525;
        v1528 = v1717 + 1;
        v1720 = *(char **)(v2366 + 104);
        v1719 = *(char **)(v2366 + 112);
        if (v1719 == v1720)
        {
          v1722 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1721 = (char **)*((_QWORD *)v1719 - 1);
            v1719 -= 8;
            *--v1717 = v1721;
          }
          while (v1719 != v1720);
          v1722 = (_QWORD *)v2366;
          v1719 = *(char **)(v2366 + 104);
        }
        v1722[13] = v1717;
        v1722[14] = v1528;
        v1722[15] = v1718;
        if (v1719)
          operator delete(v1719);
      }
      else
      {
        *v1527 = v1525;
        v1528 = v1527 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1528;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1528 - 1) + 8))(*(v1528 - 1));
      goto LABEL_2408;
    case 4:
      v140 = operator new();
      FullLayer<short>::FullLayer(v140, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v142 = *(uint64_t **)(a1 + 112);
      v141 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v142 >= v141)
      {
        v481 = *(_QWORD *)(a1 + 104);
        v482 = ((uint64_t)v142 - v481) >> 3;
        if ((unint64_t)(v482 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v483 = v141 - v481;
        v484 = v483 >> 2;
        if (v483 >> 2 <= (unint64_t)(v482 + 1))
          v484 = v482 + 1;
        if ((unint64_t)v483 >= 0x7FFFFFFFFFFFFFF8)
          v485 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v485 = v484;
        if (v485)
          v485 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v485);
        else
          v486 = 0;
        v789 = (uint64_t *)(v485 + 8 * v482);
        v790 = v485 + 8 * v486;
        *v789 = v140;
        v143 = v789 + 1;
        v792 = *(char **)(a1 + 104);
        v791 = *(char **)(a1 + 112);
        if (v791 == v792)
        {
          v794 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v793 = *((_QWORD *)v791 - 1);
            v791 -= 8;
            *--v789 = v793;
          }
          while (v791 != v792);
          v794 = (_QWORD *)a1;
          v791 = *(char **)(a1 + 104);
        }
        v794[13] = v789;
        v794[14] = v143;
        v794[15] = v790;
        if (v791)
          operator delete(v791);
      }
      else
      {
        *v142 = v140;
        v143 = v142 + 1;
      }
      *(_QWORD *)(a1 + 112) = v143;
      v873 = operator new();
      v874 = *(_DWORD *)(a1 + 4);
      v2655 = 0;
      v2653 = 0;
      v2654 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2653, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v873, v874, v874, (_DWORD **)&v2653, 0, a2, 1, 0, 0);
      v876 = *(uint64_t **)(a1 + 112);
      v875 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v876 >= v875)
      {
        v878 = *(_QWORD *)(a1 + 104);
        v879 = ((uint64_t)v876 - v878) >> 3;
        if ((unint64_t)(v879 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v880 = v875 - v878;
        v881 = v880 >> 2;
        if (v880 >> 2 <= (unint64_t)(v879 + 1))
          v881 = v879 + 1;
        if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFF8)
          v882 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v882 = v881;
        if (v882)
          v882 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v882);
        else
          v883 = 0;
        v1206 = (uint64_t *)(v882 + 8 * v879);
        v1207 = v882 + 8 * v883;
        *v1206 = v873;
        v877 = v1206 + 1;
        v1209 = *(char **)(a1 + 104);
        v1208 = *(char **)(a1 + 112);
        if (v1208 == v1209)
        {
          v1211 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1210 = *((_QWORD *)v1208 - 1);
            v1208 -= 8;
            *--v1206 = v1210;
          }
          while (v1208 != v1209);
          v1211 = (_QWORD *)a1;
          v1208 = *(char **)(a1 + 104);
        }
        v1211[13] = v1206;
        v1211[14] = v877;
        v1211[15] = v1207;
        if (v1208)
          operator delete(v1208);
      }
      else
      {
        *v876 = v873;
        v877 = v876 + 1;
      }
      *(_QWORD *)(a1 + 112) = v877;
      v1324 = v2653;
      if (!v2653)
        goto LABEL_2421;
      v2654 = v2653;
      goto LABEL_2420;
    case 5:
      v116 = operator new();
      FullLayer<short>::FullLayer(v116, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v118 = *(uint64_t **)(a1 + 112);
      v117 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v118 >= v117)
      {
        v475 = *(_QWORD *)(a1 + 104);
        v476 = ((uint64_t)v118 - v475) >> 3;
        if ((unint64_t)(v476 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v477 = v117 - v475;
        v478 = v477 >> 2;
        if (v477 >> 2 <= (unint64_t)(v476 + 1))
          v478 = v476 + 1;
        if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
          v479 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v479 = v478;
        if (v479)
          v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v479);
        else
          v480 = 0;
        v781 = (uint64_t *)(v479 + 8 * v476);
        v782 = v479 + 8 * v480;
        *v781 = v116;
        v119 = v781 + 1;
        v784 = *(char **)(a1 + 104);
        v783 = *(char **)(a1 + 112);
        if (v783 == v784)
        {
          v786 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v785 = *((_QWORD *)v783 - 1);
            v783 -= 8;
            *--v781 = v785;
          }
          while (v783 != v784);
          v786 = (_QWORD *)a1;
          v783 = *(char **)(a1 + 104);
        }
        v786[13] = v781;
        v786[14] = v119;
        v786[15] = v782;
        if (v783)
          operator delete(v783);
      }
      else
      {
        *v118 = v116;
        v119 = v118 + 1;
      }
      *(_QWORD *)(a1 + 112) = v119;
      v862 = operator new();
      v863 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<short>::FullLayer(v862, v863, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v865 = *(uint64_t **)(a1 + 112);
      v864 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v865 >= v864)
      {
        v867 = *(_QWORD *)(a1 + 104);
        v868 = ((uint64_t)v865 - v867) >> 3;
        if ((unint64_t)(v868 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v869 = v864 - v867;
        v870 = v869 >> 2;
        if (v869 >> 2 <= (unint64_t)(v868 + 1))
          v870 = v868 + 1;
        if ((unint64_t)v869 >= 0x7FFFFFFFFFFFFFF8)
          v871 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v871 = v870;
        if (v871)
          v871 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v871);
        else
          v872 = 0;
        v1200 = (uint64_t *)(v871 + 8 * v868);
        v1201 = v871 + 8 * v872;
        *v1200 = v862;
        v866 = v1200 + 1;
        v1203 = *(char **)(a1 + 104);
        v1202 = *(char **)(a1 + 112);
        if (v1202 == v1203)
        {
          v1205 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1204 = *((_QWORD *)v1202 - 1);
            v1202 -= 8;
            *--v1200 = v1204;
          }
          while (v1202 != v1203);
          v1205 = (_QWORD *)a1;
          v1202 = *(char **)(a1 + 104);
        }
        v1205[13] = v1200;
        v1205[14] = v866;
        v1205[15] = v1201;
        if (v1202)
          operator delete(v1202);
      }
      else
      {
        *v865 = v862;
        v866 = v865 + 1;
      }
      *(_QWORD *)(a1 + 112) = v866;
      v1312 = operator new();
      v1313 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      v1314 = *(_DWORD *)(a1 + 4);
      v2652 = 0;
      v2650 = 0;
      v2651 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2650, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1312, v1313, v1314, (_DWORD **)&v2650, 0, a2, 1, 0, 0);
      v1316 = *(uint64_t **)(a1 + 112);
      v1315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1316 >= v1315)
      {
        v1318 = *(_QWORD *)(a1 + 104);
        v1319 = ((uint64_t)v1316 - v1318) >> 3;
        if ((unint64_t)(v1319 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1320 = v1315 - v1318;
        v1321 = v1320 >> 2;
        if (v1320 >> 2 <= (unint64_t)(v1319 + 1))
          v1321 = v1319 + 1;
        if ((unint64_t)v1320 >= 0x7FFFFFFFFFFFFFF8)
          v1322 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1322 = v1321;
        if (v1322)
          v1322 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1322);
        else
          v1323 = 0;
        v1624 = (uint64_t *)(v1322 + 8 * v1319);
        v1625 = v1322 + 8 * v1323;
        *v1624 = v1312;
        v1317 = v1624 + 1;
        v1627 = *(char **)(a1 + 104);
        v1626 = *(char **)(a1 + 112);
        if (v1626 == v1627)
        {
          v1629 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1628 = *((_QWORD *)v1626 - 1);
            v1626 -= 8;
            *--v1624 = v1628;
          }
          while (v1626 != v1627);
          v1629 = (_QWORD *)a1;
          v1626 = *(char **)(a1 + 104);
        }
        v1629[13] = v1624;
        v1629[14] = v1317;
        v1629[15] = v1625;
        if (v1626)
          operator delete(v1626);
      }
      else
      {
        *v1316 = v1312;
        v1317 = v1316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1317;
      v1324 = v2650;
      if (!v2650)
        goto LABEL_2421;
      v2651 = v2650;
      goto LABEL_2420;
    case 6:
      v96 = operator new();
      FullLayer<short>::FullLayer(v96, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v98 = v97;
      *v40 = v96;
      v99 = operator new();
      v100 = *(_DWORD *)(a1 + 4);
      v2649 = 0;
      v2647 = 0;
      v2648 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2647, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v99, v100, v100, (_DWORD **)&v2647, 0, a2, 1, 0, 0);
      if (v98 < 2)
      {
        v615 = 2;
        if ((unint64_t)((8 * v98) >> 2) > 2)
          v615 = (8 * v98) >> 2;
        if ((unint64_t)(8 * v98) >= 0x7FFFFFFFFFFFFFF8)
          v616 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v616 = v615;
        if (v616)
          v616 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v616);
        v617 = 0;
        *(_QWORD *)(v616 + 8) = v99;
        v101 = v616 + 16;
        do
        {
          *(_QWORD *)(v616 + v617 * 8) = v40[v617];
          --v617;
        }
        while (v617 != -1);
        v618 = (uint64_t *)v616;
        operator delete(v40);
        v40 = v618;
      }
      else
      {
        v40[1] = v99;
        v101 = (uint64_t)(v40 + 2);
      }
      if (v2647)
      {
        v2648 = v2647;
        operator delete(v2647);
      }
      v619 = operator new();
      v2645 = 0;
      v2644 = 0;
      v2646 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2644, v40, v101, (v101 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v619, (uint64_t)&v2644);
      if (v2644)
      {
        v2645 = v2644;
        operator delete(v2644);
      }
      v620 = operator new();
      FullLayer<short>::FullLayer(v620, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v623 = v622;
      *v621 = v620;
      v624 = operator new();
      v625 = *(_DWORD *)(a1 + 4);
      v2643 = 0;
      v2641 = 0;
      v2642 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2641, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v624, v625, v625, (_DWORD **)&v2641, 0, a2, 1, 0, 0);
      if (v623 < 2)
      {
        v679 = 2;
        if ((unint64_t)((8 * v623) >> 2) > 2)
          v679 = (8 * v623) >> 2;
        if ((unint64_t)(8 * v623) >= 0x7FFFFFFFFFFFFFF8)
          v680 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v680 = v679;
        if (v680)
          v680 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v680);
        v681 = 0;
        *(_QWORD *)(v680 + 8) = v624;
        v626 = v680 + 16;
        do
        {
          *(_QWORD *)(v680 + v681 * 8) = v621[v681];
          --v681;
        }
        while (v681 != -1);
        v682 = (uint64_t *)v680;
        operator delete(v621);
        v621 = v682;
      }
      else
      {
        v621[1] = v624;
        v626 = (uint64_t)(v621 + 2);
      }
      if (v2641)
      {
        v2642 = v2641;
        operator delete(v2641);
      }
      v683 = operator new();
      v684 = operator new();
      v2639 = 0;
      v2638 = 0;
      v2640 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2638, v621, v626, (v626 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v684, (uint64_t)&v2638);
      Reverse::Reverse(v683, v684, *(_DWORD *)(a1 + 20));
      if (v2638)
      {
        v2639 = v2638;
        operator delete(v2638);
      }
      v685 = operator new(8uLL);
      *v685 = v619;
      v686 = operator new(0x10uLL);
      v687 = v686 + 2;
      *v686 = *v685;
      v686[1] = v683;
      v2681 = v686;
      v2683 = v686 + 2;
      operator delete(v685);
      v2682 = v687;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v689)
        goto LABEL_2104;
      v691 = *(_QWORD *)(v2366 + 104);
      v692 = ((uint64_t)v690 - v691) >> 3;
      if ((unint64_t)(v692 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v693 = v689 - v691;
      v694 = v693 >> 2;
      if (v693 >> 2 <= (unint64_t)(v692 + 1))
        v694 = v692 + 1;
      if ((unint64_t)v693 >= 0x7FFFFFFFFFFFFFF8)
        v695 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v695 = v694;
      if (v695)
        v695 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v695);
      else
        v696 = 0;
      v2032 = (char ***)(v695 + 8 * v692);
      v2033 = v695 + 8 * v696;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2035 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2035)
        goto LABEL_2344;
      do
      {
        v2036 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2036;
      }
      while (v2034 != v2035);
      goto LABEL_2343;
    case 7:
      v60 = operator new();
      RecurrentLayer<short>::RecurrentLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v61 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v61)
        goto LABEL_855;
      v63 = *(_QWORD *)(a1 + 104);
      v64 = ((uint64_t)v62 - v63) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v65 = v61 - v63;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
      else
        v68 = 0;
      v754 = (uint64_t *)(v67 + 8 * v64);
      v755 = v67 + 8 * v68;
      *v754 = v60;
      v756 = v754 + 1;
      v758 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v758)
        goto LABEL_1246;
      do
      {
        v759 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v759;
      }
      while (v757 != v758);
      goto LABEL_1245;
    case 8:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v108 = operator new();
      RecurrentLayer<short>::RecurrentLayer(v108, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      v109 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v111 = v110;
      *v109 = v108;
      v112 = &v109[v110];
      v2682 = v109 + 1;
      v2683 = v112;
      v2681 = v109;
      v113 = operator new();
      v114 = operator new();
      RecurrentLayer<short>::RecurrentLayer(v114, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, v4 != 0, v2355 != 0, 1, 0);
      Reverse::Reverse(v113, v114, 0);
      if (v111 < 2)
      {
        v656 = 2;
        if ((unint64_t)(((char *)v112 - (char *)v109) >> 2) > 2)
          v656 = ((char *)v112 - (char *)v109) >> 2;
        if ((unint64_t)((char *)v112 - (char *)v109) >= 0x7FFFFFFFFFFFFFF8)
          v657 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v657 = v656;
        if (v657)
          v657 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v657);
        else
          v658 = 0;
        v1411 = 0;
        v1412 = v657 + 8;
        v1413 = v657 + 8 * v658;
        *(_QWORD *)(v657 + 8) = v113;
        v115 = (_QWORD *)(v657 + 16);
        do
        {
          *(_QWORD *)(v657 + v1411 * 8) = v109[v1411];
          --v1411;
        }
        while (v1411 != -1);
        v1414 = v2681;
        v2681 = (void *)(v1412 - 8);
        v2683 = (_QWORD *)v1413;
        if (v1414)
          operator delete(v1414);
      }
      else
      {
        v109[1] = v113;
        v115 = v109 + 2;
      }
      v2682 = v115;
      v1415 = (char **)operator new();
      Parallel::Parallel(v1415, (uint64_t)&v2681);
      v1417 = *(char ****)(v2366 + 112);
      v1416 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1417 >= v1416)
      {
        v1419 = *(_QWORD *)(v2366 + 104);
        v1420 = ((uint64_t)v1417 - v1419) >> 3;
        if ((unint64_t)(v1420 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1421 = v1416 - v1419;
        v1422 = v1421 >> 2;
        if (v1421 >> 2 <= (unint64_t)(v1420 + 1))
          v1422 = v1420 + 1;
        if ((unint64_t)v1421 >= 0x7FFFFFFFFFFFFFF8)
          v1423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1423 = v1422;
        if (v1423)
          v1423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1423);
        else
          v1424 = 0;
        v1559 = (char ***)(v1423 + 8 * v1420);
        v1560 = v1423 + 8 * v1424;
        *v1559 = v1415;
        v1418 = v1559 + 1;
        v1562 = *(char **)(v2366 + 104);
        v1561 = *(char **)(v2366 + 112);
        if (v1561 == v1562)
        {
          v1564 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1563 = (char **)*((_QWORD *)v1561 - 1);
            v1561 -= 8;
            *--v1559 = v1563;
          }
          while (v1561 != v1562);
          v1564 = (_QWORD *)v2366;
          v1561 = *(char **)(v2366 + 104);
        }
        v1564[13] = v1559;
        v1564[14] = v1418;
        v1564[15] = v1560;
        if (v1561)
          operator delete(v1561);
      }
      else
      {
        *v1417 = v1415;
        v1418 = v1417 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1418;
      goto LABEL_2408;
    case 9:
      v292 = operator new();
      FullLayer<short>::FullLayer(v292, *(_DWORD *)a1, 2 * v2353, 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v294 = *(uint64_t **)(a1 + 112);
      v293 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v294 >= v293)
      {
        v511 = *(_QWORD *)(v2366 + 104);
        v512 = ((uint64_t)v294 - v511) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v513 = v293 - v511;
        v514 = v513 >> 2;
        if (v513 >> 2 <= (unint64_t)(v512 + 1))
          v514 = v512 + 1;
        if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
          v515 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v515);
        else
          v516 = 0;
        v819 = (uint64_t *)(v515 + 8 * v512);
        v820 = v515 + 8 * v516;
        *v819 = v292;
        v295 = v819 + 1;
        v822 = *(char **)(v2366 + 104);
        v821 = *(char **)(v2366 + 112);
        if (v821 == v822)
        {
          v824 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v823 = *((_QWORD *)v821 - 1);
            v821 -= 8;
            *--v819 = v823;
          }
          while (v821 != v822);
          v824 = (_QWORD *)v2366;
          v821 = *(char **)(v2366 + 104);
        }
        v824[13] = v819;
        v824[14] = v295;
        v824[15] = v820;
        if (v821)
          operator delete(v821);
      }
      else
      {
        *v294 = v292;
        v295 = v294 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v295;
      v929 = operator new();
      RecurrentLayer<short>::RecurrentLayer(v929, v2353, v2353, 3, v4 != 0, v2355 != 0, 1, 0);
      v931 = *(uint64_t **)(v2366 + 112);
      v930 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v931 >= v930)
      {
        v933 = *(_QWORD *)(v2366 + 104);
        v934 = ((uint64_t)v931 - v933) >> 3;
        if ((unint64_t)(v934 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v935 = v930 - v933;
        v936 = v935 >> 2;
        if (v935 >> 2 <= (unint64_t)(v934 + 1))
          v936 = v934 + 1;
        if ((unint64_t)v935 >= 0x7FFFFFFFFFFFFFF8)
          v937 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v937 = v936;
        if (v937)
          v937 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v937);
        else
          v938 = 0;
        v1155 = (uint64_t *)(v937 + 8 * v934);
        v1156 = v937 + 8 * v938;
        *v1155 = v929;
        v932 = v1155 + 1;
        v1158 = *(char **)(v2366 + 104);
        v1157 = *(char **)(v2366 + 112);
        if (v1157 == v1158)
        {
          v1160 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1159 = *((_QWORD *)v1157 - 1);
            v1157 -= 8;
            *--v1155 = v1159;
          }
          while (v1157 != v1158);
          v1160 = (_QWORD *)v2366;
          v1157 = *(char **)(v2366 + 104);
        }
        v1160[13] = v1155;
        v1160[14] = v932;
        v1160[15] = v1156;
        if (v1157)
          operator delete(v1157);
      }
      else
      {
        *v931 = v929;
        v932 = v931 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v932;
      goto LABEL_2421;
    case 10:
      v60 = operator new();
      FullLayer<short>::FullLayer(v60, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v120 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 < v120)
        goto LABEL_855;
      v121 = *(_QWORD *)(a1 + 104);
      v122 = ((uint64_t)v62 - v121) >> 3;
      if ((unint64_t)(v122 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v123 = v120 - v121;
      v124 = v123 >> 2;
      if (v123 >> 2 <= (unint64_t)(v122 + 1))
        v124 = v122 + 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v124;
      if (v125)
        v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v125);
      else
        v126 = 0;
      v754 = (uint64_t *)(v125 + 8 * v122);
      v755 = v125 + 8 * v126;
      *v754 = v60;
      v756 = v754 + 1;
      v787 = *(char **)(a1 + 104);
      v757 = *(char **)(a1 + 112);
      if (v757 == v787)
        goto LABEL_1246;
      do
      {
        v788 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v754 = v788;
      }
      while (v757 != v787);
      goto LABEL_1245;
    case 11:
      v69 = operator new();
      FullLayer<short>::FullLayer(v69, *(_DWORD *)a1, 2 * *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v71 = *(uint64_t **)(a1 + 112);
      v70 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v71 >= v70)
      {
        v464 = *(_QWORD *)(a1 + 104);
        v465 = ((uint64_t)v71 - v464) >> 3;
        if ((unint64_t)(v465 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v466 = v70 - v464;
        v467 = v466 >> 2;
        if (v466 >> 2 <= (unint64_t)(v465 + 1))
          v467 = v465 + 1;
        if ((unint64_t)v466 >= 0x7FFFFFFFFFFFFFF8)
          v468 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v468 = v467;
        if (v468)
          v468 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v468);
        else
          v469 = 0;
        v760 = (uint64_t *)(v468 + 8 * v465);
        v761 = v468 + 8 * v469;
        *v760 = v69;
        v72 = v760 + 1;
        v763 = *(char **)(a1 + 104);
        v762 = *(char **)(a1 + 112);
        if (v762 == v763)
        {
          v765 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v764 = *((_QWORD *)v762 - 1);
            v762 -= 8;
            *--v760 = v764;
          }
          while (v762 != v763);
          v765 = (_QWORD *)a1;
          v762 = *(char **)(a1 + 104);
        }
        v765[13] = v760;
        v765[14] = v72;
        v765[15] = v761;
        if (v762)
          operator delete(v762);
      }
      else
      {
        *v71 = v69;
        v72 = v71 + 1;
      }
      *(_QWORD *)(a1 + 112) = v72;
      v60 = operator new();
      v854 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8));
      FullLayer<short>::FullLayer(v60, v854, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v62 = *(uint64_t **)(a1 + 112);
      v855 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v62 >= v855)
      {
        v856 = *(_QWORD *)(a1 + 104);
        v857 = ((uint64_t)v62 - v856) >> 3;
        if ((unint64_t)(v857 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v858 = v855 - v856;
        v859 = v858 >> 2;
        if (v858 >> 2 <= (unint64_t)(v857 + 1))
          v859 = v857 + 1;
        if ((unint64_t)v858 >= 0x7FFFFFFFFFFFFFF8)
          v860 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v860 = v859;
        if (v860)
          v860 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v860);
        else
          v861 = 0;
        v754 = (uint64_t *)(v860 + 8 * v857);
        v755 = v860 + 8 * v861;
        *v754 = v60;
        v756 = v754 + 1;
        v1197 = *(char **)(a1 + 104);
        v757 = *(char **)(a1 + 112);
        if (v757 == v1197)
        {
LABEL_1246:
          v1199 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1198 = *((_QWORD *)v757 - 1);
            v757 -= 8;
            *--v754 = v1198;
          }
          while (v757 != v1197);
LABEL_1245:
          v1199 = (_QWORD *)a1;
          v757 = *(char **)(a1 + 104);
        }
        v1199[13] = v754;
        v1199[14] = v756;
        v1199[15] = v755;
        if (v757)
          operator delete(v757);
      }
      else
      {
LABEL_855:
        *v62 = v60;
        v756 = v62 + 1;
      }
      *(_QWORD *)(a1 + 112) = v756;
      goto LABEL_2421;
    case 12:
      v102 = operator new();
      v103 = *(_DWORD *)a1;
      v104 = *(_DWORD *)(a1 + 4);
      v2637 = 0;
      v2635 = 0;
      v2636 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2635, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v102, v103, v104, (_DWORD **)&v2635, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v106 = *(uint64_t **)(a1 + 112);
      v105 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v106 >= v105)
      {
        v559 = *(_QWORD *)(a1 + 104);
        v560 = ((uint64_t)v106 - v559) >> 3;
        if ((unint64_t)(v560 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v561 = v105 - v559;
        v562 = v561 >> 2;
        if (v561 >> 2 <= (unint64_t)(v560 + 1))
          v562 = v560 + 1;
        if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFF8)
          v563 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v563 = v562;
        if (v563)
          v563 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v563);
        else
          v564 = 0;
        v996 = (uint64_t *)(v563 + 8 * v560);
        v997 = v563 + 8 * v564;
        *v996 = v102;
        v107 = v996 + 1;
        v999 = *(char **)(a1 + 104);
        v998 = *(char **)(a1 + 112);
        if (v998 == v999)
        {
          v1001 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1000 = *((_QWORD *)v998 - 1);
            v998 -= 8;
            *--v996 = v1000;
          }
          while (v998 != v999);
          v1001 = (_QWORD *)a1;
          v998 = *(char **)(a1 + 104);
        }
        v1001[13] = v996;
        v1001[14] = v107;
        v1001[15] = v997;
        if (v998)
          operator delete(v998);
      }
      else
      {
        *v106 = v102;
        v107 = v106 + 1;
      }
      *(_QWORD *)(a1 + 112) = v107;
      if (v2635)
      {
        v2636 = v2635;
        operator delete(v2635);
      }
      v1086 = operator new();
      v1087 = *(_DWORD *)(a1 + 4);
      v2634 = 0;
      v2632 = 0;
      v2633 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2632, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1086, v1087, v1087, (_DWORD **)&v2632, 0, a2, 1, 0, 0);
      v1089 = *(uint64_t **)(a1 + 112);
      v1088 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1089 >= v1088)
      {
        v1091 = *(_QWORD *)(a1 + 104);
        v1092 = ((uint64_t)v1089 - v1091) >> 3;
        if ((unint64_t)(v1092 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1093 = v1088 - v1091;
        v1094 = v1093 >> 2;
        if (v1093 >> 2 <= (unint64_t)(v1092 + 1))
          v1094 = v1092 + 1;
        if ((unint64_t)v1093 >= 0x7FFFFFFFFFFFFFF8)
          v1095 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1095 = v1094;
        if (v1095)
          v1095 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1095);
        else
          v1096 = 0;
        v1375 = (uint64_t *)(v1095 + 8 * v1092);
        v1376 = v1095 + 8 * v1096;
        *v1375 = v1086;
        v1090 = v1375 + 1;
        v1378 = *(char **)(a1 + 104);
        v1377 = *(char **)(a1 + 112);
        if (v1377 == v1378)
        {
          v1380 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1379 = *((_QWORD *)v1377 - 1);
            v1377 -= 8;
            *--v1375 = v1379;
          }
          while (v1377 != v1378);
          v1380 = (_QWORD *)a1;
          v1377 = *(char **)(a1 + 104);
        }
        v1380[13] = v1375;
        v1380[14] = v1090;
        v1380[15] = v1376;
        if (v1377)
          operator delete(v1377);
      }
      else
      {
        *v1089 = v1086;
        v1090 = v1089 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1090;
      v1324 = v2632;
      if (!v2632)
        goto LABEL_2421;
      v2633 = v2632;
      goto LABEL_2420;
    case 13:
      v46 = operator new();
      v47 = *(_DWORD *)a1;
      v48 = *(_DWORD *)(a1 + 4);
      v2631 = 0;
      v2629 = 0;
      v2630 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2629, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v46, v47, v48, (_DWORD **)&v2629, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v50 = v49;
      *v40 = v46;
      if (v2629)
      {
        v2630 = v2629;
        operator delete(v2629);
      }
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 4);
      v2628 = 0;
      v2626 = 0;
      v2627 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2626, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v51, v52, v52, (_DWORD **)&v2626, 0, a2, 1, 0, 0);
      if (v50 < 2)
      {
        v643 = 2;
        if ((unint64_t)((8 * v50) >> 2) > 2)
          v643 = (8 * v50) >> 2;
        if ((unint64_t)(8 * v50) >= 0x7FFFFFFFFFFFFFF8)
          v644 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v644 = v643;
        if (v644)
          v644 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v644);
        v645 = 0;
        *(_QWORD *)(v644 + 8) = v51;
        v53 = v644 + 16;
        do
        {
          *(_QWORD *)(v644 + v645 * 8) = v40[v645];
          --v645;
        }
        while (v645 != -1);
        v646 = (uint64_t *)v644;
        operator delete(v40);
        v40 = v646;
      }
      else
      {
        v40[1] = v51;
        v53 = (uint64_t)(v40 + 2);
      }
      if (v2626)
      {
        v2627 = v2626;
        operator delete(v2626);
      }
      v647 = operator new();
      v2624 = 0;
      v2623 = 0;
      v2625 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2623, v40, v53, (v53 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v647, (uint64_t)&v2623);
      if (v2623)
      {
        v2624 = v2623;
        operator delete(v2623);
      }
      v648 = operator new();
      v649 = *(_DWORD *)a1;
      v650 = *(_DWORD *)(a1 + 4);
      v2622 = 0;
      v2620 = 0;
      v2621 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2620, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v648, v649, v650, (_DWORD **)&v2620, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v652 = v651;
      *v621 = v648;
      if (v2620)
      {
        v2621 = v2620;
        operator delete(v2620);
      }
      v653 = operator new();
      v654 = *(_DWORD *)(a1 + 4);
      v2619 = 0;
      v2617 = 0;
      v2618 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2617, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v653, v654, v654, (_DWORD **)&v2617, 0, a2, 1, 0, 0);
      if (v652 < 2)
      {
        v713 = 2;
        if ((unint64_t)((8 * v652) >> 2) > 2)
          v713 = (8 * v652) >> 2;
        if ((unint64_t)(8 * v652) >= 0x7FFFFFFFFFFFFFF8)
          v714 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v714 = v713;
        if (v714)
          v714 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v714);
        v715 = 0;
        *(_QWORD *)(v714 + 8) = v653;
        v655 = v714 + 16;
        do
        {
          *(_QWORD *)(v714 + v715 * 8) = v621[v715];
          --v715;
        }
        while (v715 != -1);
        v716 = (uint64_t *)v714;
        operator delete(v621);
        v621 = v716;
      }
      else
      {
        v621[1] = v653;
        v655 = (uint64_t)(v621 + 2);
      }
      if (v2617)
      {
        v2618 = v2617;
        operator delete(v2617);
      }
      v717 = operator new();
      v718 = operator new();
      v2615 = 0;
      v2614 = 0;
      v2616 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2614, v621, v655, (v655 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v718, (uint64_t)&v2614);
      Reverse::Reverse(v717, v718, *(_DWORD *)(a1 + 20));
      if (v2614)
      {
        v2615 = v2614;
        operator delete(v2614);
      }
      v719 = operator new(8uLL);
      *v719 = v647;
      v720 = operator new(0x10uLL);
      v721 = v720 + 2;
      *v720 = *v719;
      v720[1] = v717;
      v2681 = v720;
      v2683 = v720 + 2;
      operator delete(v719);
      v2682 = v721;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v722 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v722)
        goto LABEL_2104;
      v723 = *(_QWORD *)(v2366 + 104);
      v724 = ((uint64_t)v690 - v723) >> 3;
      if ((unint64_t)(v724 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v725 = v722 - v723;
      v726 = v725 >> 2;
      if (v725 >> 2 <= (unint64_t)(v724 + 1))
        v726 = v724 + 1;
      if ((unint64_t)v725 >= 0x7FFFFFFFFFFFFFF8)
        v727 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v727 = v726;
      if (v727)
        v727 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v727);
      else
        v728 = 0;
      v2032 = (char ***)(v727 + 8 * v724);
      v2033 = v727 + 8 * v728;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2039 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2039)
        goto LABEL_2344;
      do
      {
        v2040 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2040;
      }
      while (v2034 != v2039);
      goto LABEL_2343;
    case 14:
      v90 = operator new();
      Direct::Direct(v90, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v91 = (void **)(a1 + 104);
      v93 = *(uint64_t **)(a1 + 112);
      v92 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v93 >= v92)
      {
        v470 = ((char *)v93 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v470 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v471 = v92 - (_QWORD)*v91;
        v472 = v471 >> 2;
        if (v471 >> 2 <= (unint64_t)(v470 + 1))
          v472 = v470 + 1;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
          v473 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v473 = v472;
        if (v473)
          v473 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v473);
        else
          v474 = 0;
        v766 = (uint64_t *)(v473 + 8 * v470);
        v767 = v473 + 8 * v474;
        *v766 = v90;
        v95 = v766 + 1;
        v768 = (char *)*v94;
        v769 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v770 = *((_QWORD *)v768 - 1);
            v768 -= 8;
            *--v766 = v770;
          }
          while (v768 != v769);
          v768 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v766;
        *(_QWORD *)(v2366 + 112) = v95;
        *(_QWORD *)(v2366 + 120) = v767;
        if (v768)
          operator delete(v768);
      }
      else
      {
        *v93 = v90;
        v95 = v93 + 1;
      }
      *v94 = v95;
      (*(void (**)(_QWORD))(*(_QWORD *)*(v95 - 1) + 8))(*(v95 - 1));
      v771 = operator new();
      v772 = *(_DWORD *)v2366;
      v773 = *(_DWORD *)(v2366 + 4);
      memset(v2613, 0, sizeof(v2613));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2613, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v771, v772, v773, (_DWORD **)v2613, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v775 = *(uint64_t **)(v2366 + 112);
      v774 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v775 >= v774)
      {
        v776 = ((char *)v775 - (_BYTE *)*v91) >> 3;
        if ((unint64_t)(v776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v777 = v774 - (_QWORD)*v91;
        v778 = v777 >> 2;
        if (v777 >> 2 <= (unint64_t)(v776 + 1))
          v778 = v776 + 1;
        if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFF8)
          v779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v779 = v778;
        if (v779)
          v779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v779);
        else
          v780 = 0;
        v1370 = (uint64_t *)(v779 + 8 * v776);
        v1371 = v779 + 8 * v780;
        *v1370 = v771;
        v291 = v1370 + 1;
        v1372 = (char *)*v94;
        v1373 = (char *)*v91;
        if (*v94 != *v91)
        {
          do
          {
            v1374 = *((_QWORD *)v1372 - 1);
            v1372 -= 8;
            *--v1370 = v1374;
          }
          while (v1372 != v1373);
          v1372 = (char *)*v91;
        }
        *(_QWORD *)(v2366 + 104) = v1370;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1371;
        if (v1372)
          operator delete(v1372);
      }
      else
      {
        *v775 = v771;
        v291 = v775 + 1;
      }
      *v94 = v291;
      v1019 = v2613[0];
      if (!v2613[0])
        goto LABEL_1450;
      v1020 = v2613;
      goto LABEL_1449;
    case 15:
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v127 = operator new();
      Direct::Direct(v127, *(_DWORD *)a1, *(_DWORD *)a1, *(_DWORD *)(a1 + 20));
      v128 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      *v128 = v127;
      v2682 = v128 + 1;
      v2683 = &v128[v129];
      v2681 = v128;
      v130 = (char **)operator new();
      Parallel::Parallel(v130, (uint64_t)&v2681);
      v132 = *(char ****)(a1 + 112);
      v131 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v132 >= v131)
      {
        v609 = *(_QWORD *)(a1 + 104);
        v610 = ((uint64_t)v132 - v609) >> 3;
        if ((unint64_t)(v610 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v611 = v131 - v609;
        v612 = v611 >> 2;
        if (v611 >> 2 <= (unint64_t)(v610 + 1))
          v612 = v610 + 1;
        if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFF8)
          v613 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v613 = v612;
        if (v613)
          v613 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v613);
        else
          v614 = 0;
        v1161 = (char ***)(v613 + 8 * v610);
        v1162 = v613 + 8 * v614;
        *v1161 = v130;
        v133 = v1161 + 1;
        v1164 = *(char **)(a1 + 104);
        v1163 = *(char **)(a1 + 112);
        if (v1163 == v1164)
        {
          v1166 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1165 = (char **)*((_QWORD *)v1163 - 1);
            v1163 -= 8;
            *--v1161 = v1165;
          }
          while (v1163 != v1164);
          v1166 = (_QWORD *)a1;
          v1163 = *(char **)(a1 + 104);
        }
        v1166[13] = v1161;
        v1166[14] = v133;
        v1166[15] = v1162;
        if (v1163)
          operator delete(v1163);
      }
      else
      {
        *v132 = v130;
        v133 = v132 + 1;
      }
      *(_QWORD *)(a1 + 112) = v133;
      v1167 = operator new();
      v1168 = *(_DWORD *)a1;
      v1169 = *(_DWORD *)(a1 + 4);
      v2612 = 0;
      v2610 = 0;
      v2611 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2610, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1167, v1168, v1169, (_DWORD **)&v2610, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v1171 = *(uint64_t **)(a1 + 112);
      v1170 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1171 >= v1170)
      {
        v1173 = *(_QWORD *)(a1 + 104);
        v1174 = ((uint64_t)v1171 - v1173) >> 3;
        if ((unint64_t)(v1174 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1175 = v1170 - v1173;
        v1176 = v1175 >> 2;
        if (v1175 >> 2 <= (unint64_t)(v1174 + 1))
          v1176 = v1174 + 1;
        if ((unint64_t)v1175 >= 0x7FFFFFFFFFFFFFF8)
          v1177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1177 = v1176;
        if (v1177)
          v1177 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1177);
        else
          v1178 = 0;
        v1491 = (uint64_t *)(v1177 + 8 * v1174);
        v1492 = v1177 + 8 * v1178;
        *v1491 = v1167;
        v1172 = v1491 + 1;
        v1494 = *(char **)(a1 + 104);
        v1493 = *(char **)(a1 + 112);
        if (v1493 == v1494)
        {
          v1496 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1495 = *((_QWORD *)v1493 - 1);
            v1493 -= 8;
            *--v1491 = v1495;
          }
          while (v1493 != v1494);
          v1496 = (_QWORD *)a1;
          v1493 = *(char **)(a1 + 104);
        }
        v1496[13] = v1491;
        v1496[14] = v1172;
        v1496[15] = v1492;
        if (v1493)
          operator delete(v1493);
      }
      else
      {
        *v1171 = v1167;
        v1172 = v1171 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1172;
      if (v2610)
      {
        v2611 = v2610;
        operator delete(v2610);
        v1172 = *(_QWORD **)(a1 + 112);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)*(v1172 - 1) + 8))(*(v1172 - 1));
      goto LABEL_2408;
    case 16:
      if (*(int *)(a2 + 64) >= 1)
      {
        v148 = 0;
        while (2)
        {
          v149 = *(_QWORD *)(a2 + 56);
          v150 = v149 + 632 * v148;
          if (*(_BYTE *)(v150 + 20))
            v151 = *(_DWORD *)(v2366 + 20);
          else
            v151 = 0;
          v152 = v149 + 632 * v148;
          v153 = *(unsigned __int8 *)(v152 + 512);
          v154 = *(_BYTE *)(v152 + 512) != 0;
          v156 = *(_DWORD *)(v150 + 12);
          v155 = *(_DWORD *)(v150 + 16);
          switch(*(_DWORD *)(v152 + 8))
          {
            case 0:
              v157 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v157 + 576);
              v2362[2] = *(_DWORD *)(v157 + 584);
              v158 = operator new();
              v2608 = 0;
              v2607 = 0;
              v2609 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2607, v2362, (uint64_t)v2361);
              LSTM<short>::LSTM(v158, v156, v155, &v2607, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v160 = *(uint64_t **)(v2366 + 112);
              v159 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v160 >= v159)
              {
                v200 = *(_QWORD *)(v2366 + 104);
                v201 = ((uint64_t)v160 - v200) >> 3;
                if ((unint64_t)(v201 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v202 = v159 - v200;
                v203 = v202 >> 2;
                if (v202 >> 2 <= (unint64_t)(v201 + 1))
                  v203 = v201 + 1;
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                  v204 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v204 = v203;
                if (v204)
                  v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
                else
                  v205 = 0;
                v223 = (uint64_t *)(v204 + 8 * v201);
                *v223 = v158;
                v161 = v223 + 1;
                v225 = *(char **)(v2366 + 104);
                v224 = *(char **)(v2366 + 112);
                if (v224 == v225)
                {
                  v227 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v226 = *((_QWORD *)v224 - 1);
                    v224 -= 8;
                    *--v223 = v226;
                  }
                  while (v224 != v225);
                  v227 = (_QWORD *)v2366;
                  v224 = *(char **)(v2366 + 104);
                }
                v227[13] = v223;
                v227[14] = v161;
                v227[15] = v204 + 8 * v205;
                if (v224)
                  operator delete(v224);
              }
              else
              {
                *v160 = v158;
                v161 = v160 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v161;
              v228 = v2607;
              if (!v2607)
                goto LABEL_205;
              v2608 = v2607;
              goto LABEL_204;
            case 1:
              v167 = operator new();
              RecurrentLayer<short>::RecurrentLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v2358 != 0, v2355 != 0, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v168 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v168)
                goto LABEL_113;
              v170 = *(_QWORD *)(v2366 + 104);
              v171 = ((uint64_t)v169 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v172 = v168 - v170;
              v173 = v172 >> 2;
              if (v172 >> 2 <= (unint64_t)(v171 + 1))
                v173 = v171 + 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v171);
              *v209 = v167;
              v189 = v209 + 1;
              v211 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v211)
                goto LABEL_157;
              do
              {
                v212 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v212;
              }
              while (v210 != v211);
              goto LABEL_156;
            case 3:
              v167 = operator new();
              FullLayer<short>::FullLayer(v167, v156, v155, *(_DWORD *)(v149 + 632 * v148 + 576), v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v183 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 < v183)
                goto LABEL_113;
              v184 = *(_QWORD *)(v2366 + 104);
              v185 = ((uint64_t)v169 - v184) >> 3;
              if ((unint64_t)(v185 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v186 = v183 - v184;
              v187 = v186 >> 2;
              if (v186 >> 2 <= (unint64_t)(v185 + 1))
                v187 = v185 + 1;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v187;
              if (v174)
                v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
              else
                v175 = 0;
              v209 = (uint64_t *)(v174 + 8 * v185);
              *v209 = v167;
              v189 = v209 + 1;
              v213 = *(char **)(v2366 + 104);
              v210 = *(char **)(v2366 + 112);
              if (v210 == v213)
                goto LABEL_157;
              do
              {
                v214 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *--v209 = v214;
              }
              while (v210 != v213);
              goto LABEL_156;
            case 4:
              v167 = operator new();
              SoftMax<short>::SoftMax(v167, v156, v155, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v169 = *(uint64_t **)(v2366 + 112);
              v188 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v169 >= v188)
              {
                v190 = *(_QWORD *)(v2366 + 104);
                v191 = ((uint64_t)v169 - v190) >> 3;
                if ((unint64_t)(v191 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v192 = v188 - v190;
                v193 = v192 >> 2;
                if (v192 >> 2 <= (unint64_t)(v191 + 1))
                  v193 = v191 + 1;
                if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
                  v174 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v174 = v193;
                if (v174)
                  v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
                else
                  v175 = 0;
                v209 = (uint64_t *)(v174 + 8 * v191);
                *v209 = v167;
                v189 = v209 + 1;
                v215 = *(char **)(v2366 + 104);
                v210 = *(char **)(v2366 + 112);
                if (v210 == v215)
                {
LABEL_157:
                  v217 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v216 = *((_QWORD *)v210 - 1);
                    v210 -= 8;
                    *--v209 = v216;
                  }
                  while (v210 != v215);
LABEL_156:
                  v217 = (_QWORD *)v2366;
                  v210 = *(char **)(v2366 + 104);
                }
                v217[13] = v209;
                v217[14] = v189;
                v217[15] = v174 + 8 * v175;
                if (v210)
                  operator delete(v210);
              }
              else
              {
LABEL_113:
                *v169 = v167;
                v189 = v169 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v189;
LABEL_205:
              if (++v148 >= *(int *)(a2 + 64))
                goto LABEL_2422;
              continue;
            case 5:
              v162 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v162 + 576);
              v2362[2] = *(_DWORD *)(v162 + 584);
              v163 = operator new();
              v2605 = 0;
              v2604 = 0;
              v2606 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2604, v2362, (uint64_t)v2361);
              GRU<short>::GRU(v163, v156, v155, &v2604, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148);
              v165 = *(uint64_t **)(v2366 + 112);
              v164 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v165 >= v164)
              {
                v194 = *(_QWORD *)(v2366 + 104);
                v195 = ((uint64_t)v165 - v194) >> 3;
                if ((unint64_t)(v195 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v196 = v164 - v194;
                v197 = v196 >> 2;
                if (v196 >> 2 <= (unint64_t)(v195 + 1))
                  v197 = v195 + 1;
                if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
                  v198 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v198 = v197;
                if (v198)
                  v198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v198);
                else
                  v199 = 0;
                v218 = (uint64_t *)(v198 + 8 * v195);
                *v218 = v163;
                v166 = v218 + 1;
                v220 = *(char **)(v2366 + 104);
                v219 = *(char **)(v2366 + 112);
                if (v219 == v220)
                {
                  v222 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v221 = *((_QWORD *)v219 - 1);
                    v219 -= 8;
                    *--v218 = v221;
                  }
                  while (v219 != v220);
                  v222 = (_QWORD *)v2366;
                  v219 = *(char **)(v2366 + 104);
                }
                v222[13] = v218;
                v222[14] = v166;
                v222[15] = v198 + 8 * v199;
                if (v219)
                  operator delete(v219);
              }
              else
              {
                *v165 = v163;
                v166 = v165 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v166;
              v228 = v2604;
              if (!v2604)
                goto LABEL_205;
              v2605 = v2604;
LABEL_204:
              operator delete(v228);
              goto LABEL_205;
            case 7:
              v176 = v149 + 632 * v148;
              *(_QWORD *)v2362 = *(_QWORD *)(v176 + 576);
              v2362[2] = *(_DWORD *)(v176 + 584);
              v2681 = 0;
              v2682 = 0;
              v2683 = 0;
              v177 = operator new();
              v2602 = 0;
              v2601 = 0;
              v2603 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2601, v2362, (uint64_t)v2361);
              LSTM<short>::LSTM(v177, v156, v155, (_DWORD **)&v2601, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 0);
              v178 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
              v180 = v179;
              *v178 = v177;
              v2352 = &v178[v179];
              v2682 = v178 + 1;
              v2683 = v2352;
              v2681 = v178;
              if (v2601)
              {
                v2602 = v2601;
                operator delete(v2601);
              }
              v2354 = operator new();
              v181 = operator new();
              v2599 = 0;
              v2598 = 0;
              v2600 = 0;
              std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2598, v2362, (uint64_t)v2361);
              LSTM<short>::LSTM(v181, v156, v155, (_DWORD **)&v2598, v151, a2, v153 != 0, *(_QWORD *)(a2 + 56) + 632 * v148, 1);
              Reverse::Reverse(v2354, v181, v151);
              if (v180 < 2)
              {
                v206 = 2;
                if ((unint64_t)(((char *)v2352 - (char *)v178) >> 2) > 2)
                  v206 = ((char *)v2352 - (char *)v178) >> 2;
                if ((unint64_t)((char *)v2352 - (char *)v178) >= 0x7FFFFFFFFFFFFFF8)
                  v207 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v207 = v206;
                if (v207)
                  v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v207);
                else
                  v208 = 0;
                v229 = 0;
                v230 = v207 + 8;
                v231 = v207 + 8 * v208;
                *(_QWORD *)(v207 + 8) = v2354;
                v182 = (_QWORD *)(v207 + 16);
                do
                {
                  *(_QWORD *)(v207 + v229 * 8) = v178[v229];
                  --v229;
                }
                while (v229 != -1);
                v232 = v2681;
                v2681 = (void *)(v230 - 8);
                v2683 = (_QWORD *)v231;
                if (v232)
                  operator delete(v232);
              }
              else
              {
                v178[1] = v2354;
                v182 = v178 + 2;
              }
              v2682 = v182;
              if (v2598)
              {
                v2599 = v2598;
                operator delete(v2598);
              }
              v233 = (char **)operator new();
              Parallel::Parallel(v233, (uint64_t)&v2681);
              v235 = *(char ****)(v2366 + 112);
              v234 = *(_QWORD *)(v2366 + 120);
              if ((unint64_t)v235 >= v234)
              {
                v237 = *(_QWORD *)(v2366 + 104);
                v238 = ((uint64_t)v235 - v237) >> 3;
                if ((unint64_t)(v238 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v239 = v234 - v237;
                v240 = v239 >> 2;
                if (v239 >> 2 <= (unint64_t)(v238 + 1))
                  v240 = v238 + 1;
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                  v241 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                if (v241)
                  v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v241);
                else
                  v242 = 0;
                v243 = (char ***)(v241 + 8 * v238);
                *v243 = v233;
                v236 = v243 + 1;
                v245 = *(char **)(v2366 + 104);
                v244 = *(char **)(v2366 + 112);
                if (v244 == v245)
                {
                  v247 = (_QWORD *)v2366;
                }
                else
                {
                  do
                  {
                    v246 = (char **)*((_QWORD *)v244 - 1);
                    v244 -= 8;
                    *--v243 = v246;
                  }
                  while (v244 != v245);
                  v247 = (_QWORD *)v2366;
                  v244 = *(char **)(v2366 + 104);
                }
                v247[13] = v243;
                v247[14] = v236;
                v247[15] = v241 + 8 * v242;
                if (v244)
                  operator delete(v244);
              }
              else
              {
                *v235 = v233;
                v236 = v235 + 1;
              }
              *(_QWORD *)(v2366 + 112) = v236;
              v228 = v2681;
              if (v2681)
                goto LABEL_204;
              goto LABEL_205;
            default:
              exitFramework(89);
          }
        }
      }
      goto LABEL_2421;
    case 17:
      v252 = operator new();
      FullLayer<short>::FullLayer(v252, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v254 = v253;
      *v40 = v252;
      v255 = operator new();
      v256 = *(_DWORD *)(a1 + 4);
      v2672 = 0;
      v2673 = 0;
      v2671 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2671, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v255, v256, v256, &v2671, 0, a2, 1, 0, 0);
      v257 = &v40[v254];
      if (v254 < 2)
      {
        v627 = 2;
        if ((unint64_t)((8 * v254) >> 2) > 2)
          v627 = (8 * v254) >> 2;
        if ((unint64_t)(8 * v254) >= 0x7FFFFFFFFFFFFFF8)
          v628 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v628 = v627;
        if (v628)
          v628 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v628);
        else
          v629 = 0;
        v1242 = 0;
        v257 = (uint64_t *)(v628 + 8 * v629);
        *(_QWORD *)(v628 + 8) = v255;
        v258 = (uint64_t *)(v628 + 16);
        do
        {
          *(_QWORD *)(v628 + v1242 * 8) = v40[v1242];
          --v1242;
        }
        while (v1242 != -1);
        v1243 = (uint64_t *)v628;
        operator delete(v40);
        v40 = v1243;
      }
      else
      {
        v40[1] = v255;
        v258 = v40 + 2;
      }
      if (v2671)
      {
        v2672 = v2671;
        operator delete(v2671);
      }
      v1244 = operator new();
      v1245 = *(_DWORD *)(v2366 + 4);
      v2669 = 0;
      v2670 = 0;
      v2668 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2668, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1244, v1245, v1245, &v2668, 0, a2, 1, 0, 0);
      if (v258 >= v257)
      {
        v1247 = v258 - v40;
        v1248 = v1247 + 1;
        if ((unint64_t)(v1247 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v257 - (char *)v40) >> 2 > v1248)
          v1248 = ((char *)v257 - (char *)v40) >> 2;
        if ((unint64_t)((char *)v257 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1249 = v1248;
        if (v1249)
          v1249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1249);
        v1250 = (uint64_t *)(v1249 + 8 * v1247);
        *v1250 = v1244;
        v1246 = (uint64_t)(v1250 + 1);
        while (v258 != v40)
        {
          v1251 = *--v258;
          *--v1250 = v1251;
        }
        operator delete(v40);
        v40 = v1250;
      }
      else
      {
        *v258 = v1244;
        v1246 = (uint64_t)(v258 + 1);
      }
      if (v2668)
      {
        v2669 = v2668;
        operator delete(v2668);
      }
      v1252 = operator new();
      v2665 = 0;
      v2666 = 0;
      v2667 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2665, v40, v1246, (v1246 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v1252, (uint64_t)&v2665);
      if (v2665)
      {
        v2666 = v2665;
        operator delete(v2665);
      }
      v1253 = operator new();
      FullLayer<short>::FullLayer(v1253, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1255 = v1254;
      *v621 = v1253;
      v1256 = operator new();
      v1257 = *(_DWORD *)(v2366 + 4);
      v2664 = 0;
      v2662 = 0;
      v2663 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2662, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1256, v1257, v1257, (_DWORD **)&v2662, 0, a2, 1, 0, 0);
      v1258 = &v621[v1255];
      if (v1255 < 2)
      {
        v1260 = 2;
        if ((unint64_t)((8 * v1255) >> 2) > 2)
          v1260 = (8 * v1255) >> 2;
        if ((unint64_t)(8 * v1255) >= 0x7FFFFFFFFFFFFFF8)
          v1261 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1261 = v1260;
        if (v1261)
          v1261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1261);
        else
          v1262 = 0;
        v1901 = 0;
        v1258 = (uint64_t *)(v1261 + 8 * v1262);
        *(_QWORD *)(v1261 + 8) = v1256;
        v1259 = (uint64_t *)(v1261 + 16);
        do
        {
          *(_QWORD *)(v1261 + v1901 * 8) = v621[v1901];
          --v1901;
        }
        while (v1901 != -1);
        v1902 = (uint64_t *)v1261;
        operator delete(v621);
        v621 = v1902;
      }
      else
      {
        v621[1] = v1256;
        v1259 = v621 + 2;
      }
      if (v2662)
      {
        v2663 = v2662;
        operator delete(v2662);
      }
      v1903 = operator new();
      v1904 = *(_DWORD *)(v2366 + 4);
      v2661 = 0;
      v2659 = 0;
      v2660 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2659, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1903, v1904, v1904, (_DWORD **)&v2659, 0, a2, 1, 0, 0);
      if (v1259 >= v1258)
      {
        v1906 = v1259 - v621;
        v1907 = v1906 + 1;
        if ((unint64_t)(v1906 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (((char *)v1258 - (char *)v621) >> 2 > v1907)
          v1907 = ((char *)v1258 - (char *)v621) >> 2;
        if ((unint64_t)((char *)v1258 - (char *)v621) >= 0x7FFFFFFFFFFFFFF8)
          v1908 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1908 = v1907;
        if (v1908)
          v1908 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1908);
        v1909 = (uint64_t *)(v1908 + 8 * v1906);
        *v1909 = v1903;
        v1905 = (uint64_t)(v1909 + 1);
        while (v1259 != v621)
        {
          v1910 = *--v1259;
          *--v1909 = v1910;
        }
        operator delete(v621);
        v621 = v1909;
      }
      else
      {
        *v1259 = v1903;
        v1905 = (uint64_t)(v1259 + 1);
      }
      if (v2659)
      {
        v2660 = v2659;
        operator delete(v2659);
      }
      v1911 = operator new();
      v1912 = operator new();
      v2657 = 0;
      v2656 = 0;
      v2658 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2656, v621, v1905, (v1905 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v1912, (uint64_t)&v2656);
      Reverse::Reverse(v1911, v1912, *(_DWORD *)(v2366 + 20));
      if (v2656)
      {
        v2657 = v2656;
        operator delete(v2656);
      }
      v1913 = operator new(8uLL);
      *v1913 = v1252;
      v1914 = operator new(0x10uLL);
      v1915 = v1914 + 2;
      *v1914 = *v1913;
      v1914[1] = v1911;
      v2681 = v1914;
      v2683 = v1914 + 2;
      operator delete(v1913);
      v2682 = v1915;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v1916 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v1916)
        goto LABEL_2104;
      v1918 = *(_QWORD *)(v2366 + 104);
      v1919 = ((uint64_t)v690 - v1918) >> 3;
      if ((unint64_t)(v1919 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v1920 = v1916 - v1918;
      v1921 = v1920 >> 2;
      if (v1920 >> 2 <= (unint64_t)(v1919 + 1))
        v1921 = v1919 + 1;
      if ((unint64_t)v1920 >= 0x7FFFFFFFFFFFFFF8)
        v1922 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1922 = v1921;
      if (v1922)
        v1922 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1922);
      else
        v1923 = 0;
      v2032 = (char ***)(v1922 + 8 * v1919);
      v2033 = v1922 + 8 * v1923;
      *v2032 = v688;
      v1917 = v2032 + 1;
      v2131 = *(char **)(v2366 + 104);
      v2034 = *(char **)(v2366 + 112);
      if (v2034 == v2131)
        goto LABEL_2344;
      do
      {
        v2132 = (char **)*((_QWORD *)v2034 - 1);
        v2034 -= 8;
        *--v2032 = v2132;
      }
      while (v2034 != v2131);
      goto LABEL_2343;
    case 19:
      v248 = operator new();
      FullLayer<short>::FullLayer(v248, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v250 = *(uint64_t **)(a1 + 112);
      v249 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v250 >= v249)
      {
        v493 = *(_QWORD *)(a1 + 104);
        v494 = ((uint64_t)v250 - v493) >> 3;
        if ((unint64_t)(v494 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v495 = v249 - v493;
        v496 = v495 >> 2;
        if (v495 >> 2 <= (unint64_t)(v494 + 1))
          v496 = v494 + 1;
        if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFF8)
          v497 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v497 = v496;
        if (v497)
          v497 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v497);
        else
          v498 = 0;
        v801 = (uint64_t *)(v497 + 8 * v494);
        v802 = v497 + 8 * v498;
        *v801 = v248;
        v251 = v801 + 1;
        v804 = *(char **)(a1 + 104);
        v803 = *(char **)(a1 + 112);
        if (v803 == v804)
        {
          v806 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v805 = *((_QWORD *)v803 - 1);
            v803 -= 8;
            *--v801 = v805;
          }
          while (v803 != v804);
          v806 = (_QWORD *)a1;
          v803 = *(char **)(a1 + 104);
        }
        v806[13] = v801;
        v806[14] = v251;
        v806[15] = v802;
        if (v803)
          operator delete(v803);
      }
      else
      {
        *v250 = v248;
        v251 = v250 + 1;
      }
      *(_QWORD *)(a1 + 112) = v251;
      v895 = operator new();
      v896 = *(_DWORD *)(a1 + 4);
      v2597 = 0;
      v2595 = 0;
      v2596 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2595, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v895, v896, v896, (_DWORD **)&v2595, 0, a2, 1, 0, 0);
      v898 = *(uint64_t **)(a1 + 112);
      v897 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v898 >= v897)
      {
        v900 = *(_QWORD *)(a1 + 104);
        v901 = ((uint64_t)v898 - v900) >> 3;
        if ((unint64_t)(v901 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v902 = v897 - v900;
        v903 = v902 >> 2;
        if (v902 >> 2 <= (unint64_t)(v901 + 1))
          v903 = v901 + 1;
        if ((unint64_t)v902 >= 0x7FFFFFFFFFFFFFF8)
          v904 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v904 = v903;
        if (v904)
          v904 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v904);
        else
          v905 = 0;
        v1218 = (uint64_t *)(v904 + 8 * v901);
        v1219 = v904 + 8 * v905;
        *v1218 = v895;
        v899 = v1218 + 1;
        v1221 = *(char **)(a1 + 104);
        v1220 = *(char **)(a1 + 112);
        if (v1220 == v1221)
        {
          v1223 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1222 = *((_QWORD *)v1220 - 1);
            v1220 -= 8;
            *--v1218 = v1222;
          }
          while (v1220 != v1221);
          v1223 = (_QWORD *)a1;
          v1220 = *(char **)(a1 + 104);
        }
        v1223[13] = v1218;
        v1223[14] = v899;
        v1223[15] = v1219;
        if (v1220)
          operator delete(v1220);
      }
      else
      {
        *v898 = v895;
        v899 = v898 + 1;
      }
      *(_QWORD *)(a1 + 112) = v899;
      v1324 = v2595;
      if (!v2595)
        goto LABEL_2421;
      v2596 = v2595;
      goto LABEL_2420;
    case 20:
      v134 = operator new();
      v135 = *(_DWORD *)a1;
      v136 = *(_DWORD *)(a1 + 4);
      v2594 = 0;
      v2592 = 0;
      v2593 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2592, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v134, v135, v136, (_DWORD **)&v2592, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v138 = *(uint64_t **)(a1 + 112);
      v137 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v138 >= v137)
      {
        v565 = *(_QWORD *)(a1 + 104);
        v566 = ((uint64_t)v138 - v565) >> 3;
        if ((unint64_t)(v566 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v567 = v137 - v565;
        v568 = v567 >> 2;
        if (v567 >> 2 <= (unint64_t)(v566 + 1))
          v568 = v566 + 1;
        if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF8)
          v569 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v569 = v568;
        if (v569)
          v569 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v569);
        else
          v570 = 0;
        v1002 = (uint64_t *)(v569 + 8 * v566);
        v1003 = v569 + 8 * v570;
        *v1002 = v134;
        v139 = v1002 + 1;
        v1005 = *(char **)(a1 + 104);
        v1004 = *(char **)(a1 + 112);
        if (v1004 == v1005)
        {
          v1007 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1006 = *((_QWORD *)v1004 - 1);
            v1004 -= 8;
            *--v1002 = v1006;
          }
          while (v1004 != v1005);
          v1007 = (_QWORD *)a1;
          v1004 = *(char **)(a1 + 104);
        }
        v1007[13] = v1002;
        v1007[14] = v139;
        v1007[15] = v1003;
        if (v1004)
          operator delete(v1004);
      }
      else
      {
        *v138 = v134;
        v139 = v138 + 1;
      }
      *(_QWORD *)(a1 + 112) = v139;
      if (v2592)
      {
        v2593 = v2592;
        operator delete(v2592);
      }
      v1097 = operator new();
      v1098 = *(_DWORD *)(a1 + 4);
      v2591 = 0;
      v2589 = 0;
      v2590 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2589, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1097, v1098, v1098, (_DWORD **)&v2589, 0, a2, 1, 0, 0);
      v1100 = *(uint64_t **)(a1 + 112);
      v1099 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1100 >= v1099)
      {
        v1102 = *(_QWORD *)(a1 + 104);
        v1103 = ((uint64_t)v1100 - v1102) >> 3;
        if ((unint64_t)(v1103 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1104 = v1099 - v1102;
        v1105 = v1104 >> 2;
        if (v1104 >> 2 <= (unint64_t)(v1103 + 1))
          v1105 = v1103 + 1;
        if ((unint64_t)v1104 >= 0x7FFFFFFFFFFFFFF8)
          v1106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1106 = v1105;
        if (v1106)
          v1106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1106);
        else
          v1107 = 0;
        v1381 = (uint64_t *)(v1106 + 8 * v1103);
        v1382 = v1106 + 8 * v1107;
        *v1381 = v1097;
        v1101 = v1381 + 1;
        v1384 = *(char **)(a1 + 104);
        v1383 = *(char **)(a1 + 112);
        if (v1383 == v1384)
        {
          v1386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1385 = *((_QWORD *)v1383 - 1);
            v1383 -= 8;
            *--v1381 = v1385;
          }
          while (v1383 != v1384);
          v1386 = (_QWORD *)a1;
          v1383 = *(char **)(a1 + 104);
        }
        v1386[13] = v1381;
        v1386[14] = v1101;
        v1386[15] = v1382;
        if (v1383)
          operator delete(v1383);
      }
      else
      {
        *v1100 = v1097;
        v1101 = v1100 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1101;
      v1324 = v2589;
      if (!v2589)
        goto LABEL_2421;
      v2590 = v2589;
      goto LABEL_2420;
    case 21:
      v312 = operator new();
      v313 = *(_DWORD *)a1;
      v314 = *(_DWORD *)(a1 + 4);
      v2588 = 0;
      v2586 = 0;
      v2587 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2586, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v312, v313, v314, (_DWORD **)&v2586, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v316 = *(uint64_t **)(a1 + 112);
      v315 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v316 >= v315)
      {
        v584 = *(_QWORD *)(a1 + 104);
        v585 = ((uint64_t)v316 - v584) >> 3;
        if ((unint64_t)(v585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v586 = v315 - v584;
        v587 = v586 >> 2;
        if (v586 >> 2 <= (unint64_t)(v585 + 1))
          v587 = v585 + 1;
        if ((unint64_t)v586 >= 0x7FFFFFFFFFFFFFF8)
          v588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v588 = v587;
        if (v588)
          v588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v588);
        else
          v589 = 0;
        v1021 = (uint64_t *)(v588 + 8 * v585);
        v1022 = v588 + 8 * v589;
        *v1021 = v312;
        v317 = v1021 + 1;
        v1024 = *(char **)(a1 + 104);
        v1023 = *(char **)(a1 + 112);
        if (v1023 == v1024)
        {
          v1026 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1025 = *((_QWORD *)v1023 - 1);
            v1023 -= 8;
            *--v1021 = v1025;
          }
          while (v1023 != v1024);
          v1026 = (_QWORD *)a1;
          v1023 = *(char **)(a1 + 104);
        }
        v1026[13] = v1021;
        v1026[14] = v317;
        v1026[15] = v1022;
        if (v1023)
          operator delete(v1023);
      }
      else
      {
        *v316 = v312;
        v317 = v316 + 1;
      }
      *(_QWORD *)(a1 + 112) = v317;
      if (v2586)
      {
        v2587 = v2586;
        operator delete(v2586);
      }
      v1120 = operator new();
      v1121 = *(_DWORD *)(a1 + 4);
      v2585 = 0;
      v2583 = 0;
      v2584 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2583, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1120, v1121, v1121, (_DWORD **)&v2583, 0, a2, 1, 0, 0);
      v1123 = *(uint64_t **)(a1 + 112);
      v1122 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1123 >= v1122)
      {
        v1125 = *(_QWORD *)(a1 + 104);
        v1126 = ((uint64_t)v1123 - v1125) >> 3;
        if ((unint64_t)(v1126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1127 = v1122 - v1125;
        v1128 = v1127 >> 2;
        if (v1127 >> 2 <= (unint64_t)(v1126 + 1))
          v1128 = v1126 + 1;
        if ((unint64_t)v1127 >= 0x7FFFFFFFFFFFFFF8)
          v1129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1129 = v1128;
        if (v1129)
          v1129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1129);
        else
          v1130 = 0;
        v1393 = (uint64_t *)(v1129 + 8 * v1126);
        v1394 = v1129 + 8 * v1130;
        *v1393 = v1120;
        v1124 = v1393 + 1;
        v1396 = *(char **)(a1 + 104);
        v1395 = *(char **)(a1 + 112);
        if (v1395 == v1396)
        {
          v1398 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1397 = *((_QWORD *)v1395 - 1);
            v1395 -= 8;
            *--v1393 = v1397;
          }
          while (v1395 != v1396);
          v1398 = (_QWORD *)a1;
          v1395 = *(char **)(a1 + 104);
        }
        v1398[13] = v1393;
        v1398[14] = v1124;
        v1398[15] = v1394;
        if (v1395)
          operator delete(v1395);
      }
      else
      {
        *v1123 = v1120;
        v1124 = v1123 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1124;
      if (v2583)
      {
        v2584 = v2583;
        operator delete(v2583);
      }
      v1458 = operator new();
      v1459 = *(_DWORD *)(a1 + 4);
      v2582 = 0;
      v2580 = 0;
      v2581 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2580, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1458, v1459, v1459, (_DWORD **)&v2580, 0, a2, 1, 0, 0);
      v1461 = *(uint64_t **)(a1 + 112);
      v1460 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1461 >= v1460)
      {
        v1463 = *(_QWORD *)(a1 + 104);
        v1464 = ((uint64_t)v1461 - v1463) >> 3;
        if ((unint64_t)(v1464 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1465 = v1460 - v1463;
        v1466 = v1465 >> 2;
        if (v1465 >> 2 <= (unint64_t)(v1464 + 1))
          v1466 = v1464 + 1;
        if ((unint64_t)v1465 >= 0x7FFFFFFFFFFFFFF8)
          v1467 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1467 = v1466;
        if (v1467)
          v1467 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1467);
        else
          v1468 = 0;
        v1636 = (uint64_t *)(v1467 + 8 * v1464);
        v1637 = v1467 + 8 * v1468;
        *v1636 = v1458;
        v1462 = v1636 + 1;
        v1639 = *(char **)(a1 + 104);
        v1638 = *(char **)(a1 + 112);
        if (v1638 == v1639)
        {
          v1641 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1640 = *((_QWORD *)v1638 - 1);
            v1638 -= 8;
            *--v1636 = v1640;
          }
          while (v1638 != v1639);
          v1641 = (_QWORD *)a1;
          v1638 = *(char **)(a1 + 104);
        }
        v1641[13] = v1636;
        v1641[14] = v1462;
        v1641[15] = v1637;
        if (v1638)
          operator delete(v1638);
      }
      else
      {
        *v1461 = v1458;
        v1462 = v1461 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1462;
      v1324 = v2580;
      if (!v2580)
        goto LABEL_2421;
      v2581 = v2580;
      goto LABEL_2420;
    case 22:
      v84 = operator new();
      v85 = *(_DWORD *)a1;
      v86 = *(_DWORD *)(a1 + 4);
      v2579 = 0;
      v2577 = 0;
      v2578 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2577, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v84, v85, v86, (_DWORD **)&v2577, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v88 = *(uint64_t **)(a1 + 112);
      v87 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v88 >= v87)
      {
        v553 = *(_QWORD *)(a1 + 104);
        v554 = ((uint64_t)v88 - v553) >> 3;
        if ((unint64_t)(v554 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v555 = v87 - v553;
        v556 = v555 >> 2;
        if (v555 >> 2 <= (unint64_t)(v554 + 1))
          v556 = v554 + 1;
        if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8)
          v557 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v557 = v556;
        if (v557)
          v557 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v557);
        else
          v558 = 0;
        v990 = (uint64_t *)(v557 + 8 * v554);
        v991 = v557 + 8 * v558;
        *v990 = v84;
        v89 = v990 + 1;
        v993 = *(char **)(a1 + 104);
        v992 = *(char **)(a1 + 112);
        if (v992 == v993)
        {
          v995 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v994 = *((_QWORD *)v992 - 1);
            v992 -= 8;
            *--v990 = v994;
          }
          while (v992 != v993);
          v995 = (_QWORD *)a1;
          v992 = *(char **)(a1 + 104);
        }
        v995[13] = v990;
        v995[14] = v89;
        v995[15] = v991;
        if (v992)
          operator delete(v992);
      }
      else
      {
        *v88 = v84;
        v89 = v88 + 1;
      }
      *(_QWORD *)(a1 + 112) = v89;
      if (v2577)
      {
        v2578 = v2577;
        operator delete(v2577);
      }
      v1075 = operator new();
      v1076 = *(_DWORD *)(a1 + 4);
      v2576 = 0;
      v2574 = 0;
      v2575 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2574, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1075, v1076, v1076, (_DWORD **)&v2574, 0, a2, 1, 0, 0);
      v1078 = *(uint64_t **)(a1 + 112);
      v1077 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1078 >= v1077)
      {
        v1080 = *(_QWORD *)(a1 + 104);
        v1081 = ((uint64_t)v1078 - v1080) >> 3;
        if ((unint64_t)(v1081 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1082 = v1077 - v1080;
        v1083 = v1082 >> 2;
        if (v1082 >> 2 <= (unint64_t)(v1081 + 1))
          v1083 = v1081 + 1;
        if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFF8)
          v1084 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1084 = v1083;
        if (v1084)
          v1084 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1084);
        else
          v1085 = 0;
        v1364 = (uint64_t *)(v1084 + 8 * v1081);
        v1365 = v1084 + 8 * v1085;
        *v1364 = v1075;
        v1079 = v1364 + 1;
        v1367 = *(char **)(a1 + 104);
        v1366 = *(char **)(a1 + 112);
        if (v1366 == v1367)
        {
          v1369 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1368 = *((_QWORD *)v1366 - 1);
            v1366 -= 8;
            *--v1364 = v1368;
          }
          while (v1366 != v1367);
          v1369 = (_QWORD *)a1;
          v1366 = *(char **)(a1 + 104);
        }
        v1369[13] = v1364;
        v1369[14] = v1079;
        v1369[15] = v1365;
        if (v1366)
          operator delete(v1366);
      }
      else
      {
        *v1078 = v1075;
        v1079 = v1078 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1079;
      if (v2574)
      {
        v2575 = v2574;
        operator delete(v2574);
      }
      v1436 = operator new();
      v1437 = *(_DWORD *)(a1 + 4);
      v2573 = 0;
      v2571 = 0;
      v2572 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2571, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1436, v1437, v1437, (_DWORD **)&v2571, 0, a2, 1, 0, 0);
      v1439 = *(uint64_t **)(a1 + 112);
      v1438 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1439 >= v1438)
      {
        v1441 = *(_QWORD *)(a1 + 104);
        v1442 = ((uint64_t)v1439 - v1441) >> 3;
        if ((unint64_t)(v1442 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1443 = v1438 - v1441;
        v1444 = v1443 >> 2;
        if (v1443 >> 2 <= (unint64_t)(v1442 + 1))
          v1444 = v1442 + 1;
        if ((unint64_t)v1443 >= 0x7FFFFFFFFFFFFFF8)
          v1445 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1445 = v1444;
        if (v1445)
          v1445 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1445);
        else
          v1446 = 0;
        v1618 = (uint64_t *)(v1445 + 8 * v1442);
        v1619 = v1445 + 8 * v1446;
        *v1618 = v1436;
        v1440 = v1618 + 1;
        v1621 = *(char **)(a1 + 104);
        v1620 = *(char **)(a1 + 112);
        if (v1620 == v1621)
        {
          v1623 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1622 = *((_QWORD *)v1620 - 1);
            v1620 -= 8;
            *--v1618 = v1622;
          }
          while (v1620 != v1621);
          v1623 = (_QWORD *)a1;
          v1620 = *(char **)(a1 + 104);
        }
        v1623[13] = v1618;
        v1623[14] = v1440;
        v1623[15] = v1619;
        if (v1620)
          operator delete(v1620);
      }
      else
      {
        *v1439 = v1436;
        v1440 = v1439 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1440;
      if (v2571)
      {
        v2572 = v2571;
        operator delete(v2571);
      }
      v1665 = operator new();
      v1666 = *(_DWORD *)(a1 + 4);
      v2570 = 0;
      v2568 = 0;
      v2569 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2568, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1665, v1666, v1666, (_DWORD **)&v2568, 0, a2, 1, 0, 0);
      v1668 = *(uint64_t **)(a1 + 112);
      v1667 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1668 >= v1667)
      {
        v1670 = *(_QWORD *)(a1 + 104);
        v1671 = ((uint64_t)v1668 - v1670) >> 3;
        if ((unint64_t)(v1671 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1672 = v1667 - v1670;
        v1673 = v1672 >> 2;
        if (v1672 >> 2 <= (unint64_t)(v1671 + 1))
          v1673 = v1671 + 1;
        if ((unint64_t)v1672 >= 0x7FFFFFFFFFFFFFF8)
          v1674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1674 = v1673;
        if (v1674)
          v1674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1674);
        else
          v1675 = 0;
        v1798 = (uint64_t *)(v1674 + 8 * v1671);
        v1799 = v1674 + 8 * v1675;
        *v1798 = v1665;
        v1669 = v1798 + 1;
        v1801 = *(char **)(a1 + 104);
        v1800 = *(char **)(a1 + 112);
        if (v1800 == v1801)
        {
          v1803 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1802 = *((_QWORD *)v1800 - 1);
            v1800 -= 8;
            *--v1798 = v1802;
          }
          while (v1800 != v1801);
          v1803 = (_QWORD *)a1;
          v1800 = *(char **)(a1 + 104);
        }
        v1803[13] = v1798;
        v1803[14] = v1669;
        v1803[15] = v1799;
        if (v1800)
          operator delete(v1800);
      }
      else
      {
        *v1668 = v1665;
        v1669 = v1668 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1669;
      v1324 = v2568;
      if (!v2568)
        goto LABEL_2421;
      v2569 = v2568;
      goto LABEL_2420;
    case 23:
      v54 = operator new();
      v55 = *(_DWORD *)a1;
      v56 = *(_DWORD *)(a1 + 4);
      v2567 = 0;
      v2565 = 0;
      v2566 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2565, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v54, v55, v56, (_DWORD **)&v2565, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v58 = *(uint64_t **)(a1 + 112);
      v57 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v58 >= v57)
      {
        v547 = *(_QWORD *)(a1 + 104);
        v548 = ((uint64_t)v58 - v547) >> 3;
        if ((unint64_t)(v548 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v549 = v57 - v547;
        v550 = v549 >> 2;
        if (v549 >> 2 <= (unint64_t)(v548 + 1))
          v550 = v548 + 1;
        if ((unint64_t)v549 >= 0x7FFFFFFFFFFFFFF8)
          v551 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v551 = v550;
        if (v551)
          v551 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v551);
        else
          v552 = 0;
        v984 = (uint64_t *)(v551 + 8 * v548);
        v985 = v551 + 8 * v552;
        *v984 = v54;
        v59 = v984 + 1;
        v987 = *(char **)(a1 + 104);
        v986 = *(char **)(a1 + 112);
        if (v986 == v987)
        {
          v989 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v988 = *((_QWORD *)v986 - 1);
            v986 -= 8;
            *--v984 = v988;
          }
          while (v986 != v987);
          v989 = (_QWORD *)a1;
          v986 = *(char **)(a1 + 104);
        }
        v989[13] = v984;
        v989[14] = v59;
        v989[15] = v985;
        if (v986)
          operator delete(v986);
      }
      else
      {
        *v58 = v54;
        v59 = v58 + 1;
      }
      *(_QWORD *)(a1 + 112) = v59;
      if (v2565)
      {
        v2566 = v2565;
        operator delete(v2565);
      }
      v1064 = operator new();
      v1065 = *(_DWORD *)(a1 + 4);
      v2564 = 0;
      v2562 = 0;
      v2563 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2562, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1064, v1065, v1065, (_DWORD **)&v2562, 0, a2, 1, 0, 0);
      v1067 = *(uint64_t **)(a1 + 112);
      v1066 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1067 >= v1066)
      {
        v1069 = *(_QWORD *)(a1 + 104);
        v1070 = ((uint64_t)v1067 - v1069) >> 3;
        if ((unint64_t)(v1070 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1071 = v1066 - v1069;
        v1072 = v1071 >> 2;
        if (v1071 >> 2 <= (unint64_t)(v1070 + 1))
          v1072 = v1070 + 1;
        if ((unint64_t)v1071 >= 0x7FFFFFFFFFFFFFF8)
          v1073 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1073 = v1072;
        if (v1073)
          v1073 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1073);
        else
          v1074 = 0;
        v1358 = (uint64_t *)(v1073 + 8 * v1070);
        v1359 = v1073 + 8 * v1074;
        *v1358 = v1064;
        v1068 = v1358 + 1;
        v1361 = *(char **)(a1 + 104);
        v1360 = *(char **)(a1 + 112);
        if (v1360 == v1361)
        {
          v1363 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1362 = *((_QWORD *)v1360 - 1);
            v1360 -= 8;
            *--v1358 = v1362;
          }
          while (v1360 != v1361);
          v1363 = (_QWORD *)a1;
          v1360 = *(char **)(a1 + 104);
        }
        v1363[13] = v1358;
        v1363[14] = v1068;
        v1363[15] = v1359;
        if (v1360)
          operator delete(v1360);
      }
      else
      {
        *v1067 = v1064;
        v1068 = v1067 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1068;
      if (v2562)
      {
        v2563 = v2562;
        operator delete(v2562);
      }
      v1425 = operator new();
      v1426 = *(_DWORD *)(a1 + 4);
      v2561 = 0;
      v2559 = 0;
      v2560 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2559, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1425, v1426, v1426, (_DWORD **)&v2559, 0, a2, 1, 0, 0);
      v1428 = *(uint64_t **)(a1 + 112);
      v1427 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1428 >= v1427)
      {
        v1430 = *(_QWORD *)(a1 + 104);
        v1431 = ((uint64_t)v1428 - v1430) >> 3;
        if ((unint64_t)(v1431 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1432 = v1427 - v1430;
        v1433 = v1432 >> 2;
        if (v1432 >> 2 <= (unint64_t)(v1431 + 1))
          v1433 = v1431 + 1;
        if ((unint64_t)v1432 >= 0x7FFFFFFFFFFFFFF8)
          v1434 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1434 = v1433;
        if (v1434)
          v1434 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1434);
        else
          v1435 = 0;
        v1612 = (uint64_t *)(v1434 + 8 * v1431);
        v1613 = v1434 + 8 * v1435;
        *v1612 = v1425;
        v1429 = v1612 + 1;
        v1615 = *(char **)(a1 + 104);
        v1614 = *(char **)(a1 + 112);
        if (v1614 == v1615)
        {
          v1617 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1616 = *((_QWORD *)v1614 - 1);
            v1614 -= 8;
            *--v1612 = v1616;
          }
          while (v1614 != v1615);
          v1617 = (_QWORD *)a1;
          v1614 = *(char **)(a1 + 104);
        }
        v1617[13] = v1612;
        v1617[14] = v1429;
        v1617[15] = v1613;
        if (v1614)
          operator delete(v1614);
      }
      else
      {
        *v1428 = v1425;
        v1429 = v1428 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1429;
      if (v2559)
      {
        v2560 = v2559;
        operator delete(v2559);
      }
      v1654 = operator new();
      v1655 = *(_DWORD *)(a1 + 4);
      v2558 = 0;
      v2556 = 0;
      v2557 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2556, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1654, v1655, v1655, (_DWORD **)&v2556, 0, a2, 1, 0, 0);
      v1657 = *(uint64_t **)(a1 + 112);
      v1656 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1657 >= v1656)
      {
        v1659 = *(_QWORD *)(a1 + 104);
        v1660 = ((uint64_t)v1657 - v1659) >> 3;
        if ((unint64_t)(v1660 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1661 = v1656 - v1659;
        v1662 = v1661 >> 2;
        if (v1661 >> 2 <= (unint64_t)(v1660 + 1))
          v1662 = v1660 + 1;
        if ((unint64_t)v1661 >= 0x7FFFFFFFFFFFFFF8)
          v1663 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1663 = v1662;
        if (v1663)
          v1663 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1663);
        else
          v1664 = 0;
        v1792 = (uint64_t *)(v1663 + 8 * v1660);
        v1793 = v1663 + 8 * v1664;
        *v1792 = v1654;
        v1658 = v1792 + 1;
        v1795 = *(char **)(a1 + 104);
        v1794 = *(char **)(a1 + 112);
        if (v1794 == v1795)
        {
          v1797 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1796 = *((_QWORD *)v1794 - 1);
            v1794 -= 8;
            *--v1792 = v1796;
          }
          while (v1794 != v1795);
          v1797 = (_QWORD *)a1;
          v1794 = *(char **)(a1 + 104);
        }
        v1797[13] = v1792;
        v1797[14] = v1658;
        v1797[15] = v1793;
        if (v1794)
          operator delete(v1794);
      }
      else
      {
        *v1657 = v1654;
        v1658 = v1657 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1658;
      if (v2556)
      {
        v2557 = v2556;
        operator delete(v2556);
      }
      v1816 = operator new();
      v1817 = *(_DWORD *)(a1 + 4);
      v2555 = 0;
      v2553 = 0;
      v2554 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2553, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1816, v1817, v1817, (_DWORD **)&v2553, 0, a2, 1, 0, 0);
      v1819 = *(uint64_t **)(a1 + 112);
      v1818 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1819 >= v1818)
      {
        v1821 = *(_QWORD *)(a1 + 104);
        v1822 = ((uint64_t)v1819 - v1821) >> 3;
        if ((unint64_t)(v1822 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1823 = v1818 - v1821;
        v1824 = v1823 >> 2;
        if (v1823 >> 2 <= (unint64_t)(v1822 + 1))
          v1824 = v1822 + 1;
        if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFF8)
          v1825 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1825 = v1824;
        if (v1825)
          v1825 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1825);
        else
          v1826 = 0;
        v1839 = (uint64_t *)(v1825 + 8 * v1822);
        v1840 = v1825 + 8 * v1826;
        *v1839 = v1816;
        v1820 = v1839 + 1;
        v1842 = *(char **)(a1 + 104);
        v1841 = *(char **)(a1 + 112);
        if (v1841 == v1842)
        {
          v1844 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1843 = *((_QWORD *)v1841 - 1);
            v1841 -= 8;
            *--v1839 = v1843;
          }
          while (v1841 != v1842);
          v1844 = (_QWORD *)a1;
          v1841 = *(char **)(a1 + 104);
        }
        v1844[13] = v1839;
        v1844[14] = v1820;
        v1844[15] = v1840;
        if (v1841)
          operator delete(v1841);
      }
      else
      {
        *v1819 = v1816;
        v1820 = v1819 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1820;
      v1324 = v2553;
      if (!v2553)
        goto LABEL_2421;
      v2554 = v2553;
      goto LABEL_2420;
    case 24:
      v144 = operator new();
      FullLayer<short>::FullLayer(v144, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v146 = *(uint64_t **)(a1 + 112);
      v145 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v146 >= v145)
      {
        v487 = *(_QWORD *)(a1 + 104);
        v488 = ((uint64_t)v146 - v487) >> 3;
        if ((unint64_t)(v488 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v489 = v145 - v487;
        v490 = v489 >> 2;
        if (v489 >> 2 <= (unint64_t)(v488 + 1))
          v490 = v488 + 1;
        if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8)
          v491 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v491 = v490;
        if (v491)
          v491 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v491);
        else
          v492 = 0;
        v795 = (uint64_t *)(v491 + 8 * v488);
        v796 = v491 + 8 * v492;
        *v795 = v144;
        v147 = v795 + 1;
        v798 = *(char **)(a1 + 104);
        v797 = *(char **)(a1 + 112);
        if (v797 == v798)
        {
          v800 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v799 = *((_QWORD *)v797 - 1);
            v797 -= 8;
            *--v795 = v799;
          }
          while (v797 != v798);
          v800 = (_QWORD *)a1;
          v797 = *(char **)(a1 + 104);
        }
        v800[13] = v795;
        v800[14] = v147;
        v800[15] = v796;
        if (v797)
          operator delete(v797);
      }
      else
      {
        *v146 = v144;
        v147 = v146 + 1;
      }
      *(_QWORD *)(a1 + 112) = v147;
      v884 = operator new();
      v885 = *(_DWORD *)(a1 + 4);
      v2552 = 0;
      v2550 = 0;
      v2551 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2550, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v884, v885, v885, (_DWORD **)&v2550, 0, a2, 1, 0, 0);
      v887 = *(uint64_t **)(a1 + 112);
      v886 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v887 >= v886)
      {
        v889 = *(_QWORD *)(a1 + 104);
        v890 = ((uint64_t)v887 - v889) >> 3;
        if ((unint64_t)(v890 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v891 = v886 - v889;
        v892 = v891 >> 2;
        if (v891 >> 2 <= (unint64_t)(v890 + 1))
          v892 = v890 + 1;
        if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFF8)
          v893 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v893 = v892;
        if (v893)
          v893 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v893);
        else
          v894 = 0;
        v1212 = (uint64_t *)(v893 + 8 * v890);
        v1213 = v893 + 8 * v894;
        *v1212 = v884;
        v888 = v1212 + 1;
        v1215 = *(char **)(a1 + 104);
        v1214 = *(char **)(a1 + 112);
        if (v1214 == v1215)
        {
          v1217 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1216 = *((_QWORD *)v1214 - 1);
            v1214 -= 8;
            *--v1212 = v1216;
          }
          while (v1214 != v1215);
          v1217 = (_QWORD *)a1;
          v1214 = *(char **)(a1 + 104);
        }
        v1217[13] = v1212;
        v1217[14] = v888;
        v1217[15] = v1213;
        if (v1214)
          operator delete(v1214);
      }
      else
      {
        *v887 = v884;
        v888 = v887 + 1;
      }
      *(_QWORD *)(a1 + 112) = v888;
      if (v2550)
      {
        v2551 = v2550;
        operator delete(v2550);
      }
      v1325 = operator new();
      v1326 = *(_DWORD *)(a1 + 4);
      v2549 = 0;
      v2547 = 0;
      v2548 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2547, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1325, v1326, v1326, (_DWORD **)&v2547, 0, a2, 1, 0, 0);
      v1328 = *(uint64_t **)(a1 + 112);
      v1327 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1328 >= v1327)
      {
        v1330 = *(_QWORD *)(a1 + 104);
        v1331 = ((uint64_t)v1328 - v1330) >> 3;
        if ((unint64_t)(v1331 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1332 = v1327 - v1330;
        v1333 = v1332 >> 2;
        if (v1332 >> 2 <= (unint64_t)(v1331 + 1))
          v1333 = v1331 + 1;
        if ((unint64_t)v1332 >= 0x7FFFFFFFFFFFFFF8)
          v1334 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1334 = v1333;
        if (v1334)
          v1334 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1334);
        else
          v1335 = 0;
        v1541 = (uint64_t *)(v1334 + 8 * v1331);
        v1542 = v1334 + 8 * v1335;
        *v1541 = v1325;
        v1329 = v1541 + 1;
        v1544 = *(char **)(a1 + 104);
        v1543 = *(char **)(a1 + 112);
        if (v1543 == v1544)
        {
          v1546 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1545 = *((_QWORD *)v1543 - 1);
            v1543 -= 8;
            *--v1541 = v1545;
          }
          while (v1543 != v1544);
          v1546 = (_QWORD *)a1;
          v1543 = *(char **)(a1 + 104);
        }
        v1546[13] = v1541;
        v1546[14] = v1329;
        v1546[15] = v1542;
        if (v1543)
          operator delete(v1543);
      }
      else
      {
        *v1328 = v1325;
        v1329 = v1328 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1329;
      v1324 = v2547;
      if (!v2547)
        goto LABEL_2421;
      v2548 = v2547;
      goto LABEL_2420;
    case 25:
      v325 = operator new();
      FullLayer<short>::FullLayer(v325, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 4, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v327 = *(uint64_t **)(a1 + 112);
      v326 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v327 >= v326)
      {
        v529 = *(_QWORD *)(a1 + 104);
        v530 = ((uint64_t)v327 - v529) >> 3;
        if ((unint64_t)(v530 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v531 = v326 - v529;
        v532 = v531 >> 2;
        if (v531 >> 2 <= (unint64_t)(v530 + 1))
          v532 = v530 + 1;
        if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFF8)
          v533 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v533 = v532;
        if (v533)
          v533 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v533);
        else
          v534 = 0;
        v837 = (uint64_t *)(v533 + 8 * v530);
        v838 = v533 + 8 * v534;
        *v837 = v325;
        v328 = v837 + 1;
        v840 = *(char **)(a1 + 104);
        v839 = *(char **)(a1 + 112);
        if (v839 == v840)
        {
          v842 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v841 = *((_QWORD *)v839 - 1);
            v839 -= 8;
            *--v837 = v841;
          }
          while (v839 != v840);
          v842 = (_QWORD *)a1;
          v839 = *(char **)(a1 + 104);
        }
        v842[13] = v837;
        v842[14] = v328;
        v842[15] = v838;
        if (v839)
          operator delete(v839);
      }
      else
      {
        *v327 = v325;
        v328 = v327 + 1;
      }
      *(_QWORD *)(a1 + 112) = v328;
      v961 = operator new();
      v962 = *(_DWORD *)(a1 + 4);
      v2546 = 0;
      v2544 = 0;
      v2545 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2544, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v961, v962, v962, (_DWORD **)&v2544, 0, a2, 1, 0, 0);
      v964 = *(uint64_t **)(a1 + 112);
      v963 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v964 >= v963)
      {
        v966 = *(_QWORD *)(a1 + 104);
        v967 = ((uint64_t)v964 - v966) >> 3;
        if ((unint64_t)(v967 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v968 = v963 - v966;
        v969 = v968 >> 2;
        if (v968 >> 2 <= (unint64_t)(v967 + 1))
          v969 = v967 + 1;
        if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFF8)
          v970 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v970 = v969;
        if (v970)
          v970 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v970);
        else
          v971 = 0;
        v1236 = (uint64_t *)(v970 + 8 * v967);
        v1237 = v970 + 8 * v971;
        *v1236 = v961;
        v965 = v1236 + 1;
        v1239 = *(char **)(a1 + 104);
        v1238 = *(char **)(a1 + 112);
        if (v1238 == v1239)
        {
          v1241 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1240 = *((_QWORD *)v1238 - 1);
            v1238 -= 8;
            *--v1236 = v1240;
          }
          while (v1238 != v1239);
          v1241 = (_QWORD *)a1;
          v1238 = *(char **)(a1 + 104);
        }
        v1241[13] = v1236;
        v1241[14] = v965;
        v1241[15] = v1237;
        if (v1238)
          operator delete(v1238);
      }
      else
      {
        *v964 = v961;
        v965 = v964 + 1;
      }
      *(_QWORD *)(a1 + 112) = v965;
      if (v2544)
      {
        v2545 = v2544;
        operator delete(v2544);
      }
      v1347 = operator new();
      v1348 = *(_DWORD *)(a1 + 4);
      v2543 = 0;
      v2541 = 0;
      v2542 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2541, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1347, v1348, v1348, (_DWORD **)&v2541, 0, a2, 1, 0, 0);
      v1350 = *(uint64_t **)(a1 + 112);
      v1349 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1350 >= v1349)
      {
        v1352 = *(_QWORD *)(a1 + 104);
        v1353 = ((uint64_t)v1350 - v1352) >> 3;
        if ((unint64_t)(v1353 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1354 = v1349 - v1352;
        v1355 = v1354 >> 2;
        if (v1354 >> 2 <= (unint64_t)(v1353 + 1))
          v1355 = v1353 + 1;
        if ((unint64_t)v1354 >= 0x7FFFFFFFFFFFFFF8)
          v1356 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1356 = v1355;
        if (v1356)
          v1356 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1356);
        else
          v1357 = 0;
        v1553 = (uint64_t *)(v1356 + 8 * v1353);
        v1554 = v1356 + 8 * v1357;
        *v1553 = v1347;
        v1351 = v1553 + 1;
        v1556 = *(char **)(a1 + 104);
        v1555 = *(char **)(a1 + 112);
        if (v1555 == v1556)
        {
          v1558 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1557 = *((_QWORD *)v1555 - 1);
            v1555 -= 8;
            *--v1553 = v1557;
          }
          while (v1555 != v1556);
          v1558 = (_QWORD *)a1;
          v1555 = *(char **)(a1 + 104);
        }
        v1558[13] = v1553;
        v1558[14] = v1351;
        v1558[15] = v1554;
        if (v1555)
          operator delete(v1555);
      }
      else
      {
        *v1350 = v1347;
        v1351 = v1350 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1351;
      if (v2541)
      {
        v2542 = v2541;
        operator delete(v2541);
      }
      v1601 = operator new();
      v1602 = *(_DWORD *)(a1 + 4);
      v2540 = 0;
      v2538 = 0;
      v2539 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2538, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1601, v1602, v1602, (_DWORD **)&v2538, 0, a2, 1, 0, 0);
      v1604 = *(uint64_t **)(a1 + 112);
      v1603 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1604 >= v1603)
      {
        v1606 = *(_QWORD *)(a1 + 104);
        v1607 = ((uint64_t)v1604 - v1606) >> 3;
        if ((unint64_t)(v1607 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1608 = v1603 - v1606;
        v1609 = v1608 >> 2;
        if (v1608 >> 2 <= (unint64_t)(v1607 + 1))
          v1609 = v1607 + 1;
        if ((unint64_t)v1608 >= 0x7FFFFFFFFFFFFFF8)
          v1610 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1610 = v1609;
        if (v1610)
          v1610 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1610);
        else
          v1611 = 0;
        v1764 = (uint64_t *)(v1610 + 8 * v1607);
        v1765 = v1610 + 8 * v1611;
        *v1764 = v1601;
        v1605 = v1764 + 1;
        v1767 = *(char **)(a1 + 104);
        v1766 = *(char **)(a1 + 112);
        if (v1766 == v1767)
        {
          v1769 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1768 = *((_QWORD *)v1766 - 1);
            v1766 -= 8;
            *--v1764 = v1768;
          }
          while (v1766 != v1767);
          v1769 = (_QWORD *)a1;
          v1766 = *(char **)(a1 + 104);
        }
        v1769[13] = v1764;
        v1769[14] = v1605;
        v1769[15] = v1765;
        if (v1766)
          operator delete(v1766);
      }
      else
      {
        *v1604 = v1601;
        v1605 = v1604 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1605;
      v1324 = v2538;
      if (!v2538)
        goto LABEL_2421;
      v2539 = v2538;
      goto LABEL_2420;
    case 26:
      v29 = operator new();
      FullLayer<short>::FullLayer(v29, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v31 = *(uint64_t **)(a1 + 112);
      v30 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v31 >= v30)
      {
        v458 = *(_QWORD *)(a1 + 104);
        v459 = ((uint64_t)v31 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v460 = v30 - v458;
        v461 = v460 >> 2;
        if (v460 >> 2 <= (unint64_t)(v459 + 1))
          v461 = v459 + 1;
        if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
          v462 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
          v462 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v462);
        else
          v463 = 0;
        v748 = (uint64_t *)(v462 + 8 * v459);
        v749 = v462 + 8 * v463;
        *v748 = v29;
        v32 = v748 + 1;
        v751 = *(char **)(a1 + 104);
        v750 = *(char **)(a1 + 112);
        if (v750 == v751)
        {
          v753 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v752 = *((_QWORD *)v750 - 1);
            v750 -= 8;
            *--v748 = v752;
          }
          while (v750 != v751);
          v753 = (_QWORD *)a1;
          v750 = *(char **)(a1 + 104);
        }
        v753[13] = v748;
        v753[14] = v32;
        v753[15] = v749;
        if (v750)
          operator delete(v750);
      }
      else
      {
        *v31 = v29;
        v32 = v31 + 1;
      }
      *(_QWORD *)(a1 + 112) = v32;
      v843 = operator new();
      v844 = *(_DWORD *)(a1 + 4);
      v2537 = 0;
      v2535 = 0;
      v2536 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2535, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v843, v844, v844, (_DWORD **)&v2535, 0, a2, 1, 0, 0);
      v846 = *(uint64_t **)(a1 + 112);
      v845 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v846 >= v845)
      {
        v848 = *(_QWORD *)(a1 + 104);
        v849 = ((uint64_t)v846 - v848) >> 3;
        if ((unint64_t)(v849 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v850 = v845 - v848;
        v851 = v850 >> 2;
        if (v850 >> 2 <= (unint64_t)(v849 + 1))
          v851 = v849 + 1;
        if ((unint64_t)v850 >= 0x7FFFFFFFFFFFFFF8)
          v852 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v852 = v851;
        if (v852)
          v852 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v852);
        else
          v853 = 0;
        v1185 = (uint64_t *)(v852 + 8 * v849);
        v1186 = v852 + 8 * v853;
        *v1185 = v843;
        v847 = v1185 + 1;
        v1188 = *(char **)(a1 + 104);
        v1187 = *(char **)(a1 + 112);
        if (v1187 == v1188)
        {
          v1190 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1189 = *((_QWORD *)v1187 - 1);
            v1187 -= 8;
            *--v1185 = v1189;
          }
          while (v1187 != v1188);
          v1190 = (_QWORD *)a1;
          v1187 = *(char **)(a1 + 104);
        }
        v1190[13] = v1185;
        v1190[14] = v847;
        v1190[15] = v1186;
        if (v1187)
          operator delete(v1187);
      }
      else
      {
        *v846 = v843;
        v847 = v846 + 1;
      }
      *(_QWORD *)(a1 + 112) = v847;
      if (v2535)
      {
        v2536 = v2535;
        operator delete(v2535);
      }
      v1281 = operator new();
      v1282 = *(_DWORD *)(a1 + 4);
      v2534 = 0;
      v2532 = 0;
      v2533 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2532, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1281, v1282, v1282, (_DWORD **)&v2532, 0, a2, 1, 0, 0);
      v1284 = *(uint64_t **)(a1 + 112);
      v1283 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1284 >= v1283)
      {
        v1286 = *(_QWORD *)(a1 + 104);
        v1287 = ((uint64_t)v1284 - v1286) >> 3;
        if ((unint64_t)(v1287 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1288 = v1283 - v1286;
        v1289 = v1288 >> 2;
        if (v1288 >> 2 <= (unint64_t)(v1287 + 1))
          v1289 = v1287 + 1;
        if ((unint64_t)v1288 >= 0x7FFFFFFFFFFFFFF8)
          v1290 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1290 = v1289;
        if (v1290)
          v1290 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1290);
        else
          v1291 = 0;
        v1535 = (uint64_t *)(v1290 + 8 * v1287);
        v1536 = v1290 + 8 * v1291;
        *v1535 = v1281;
        v1285 = v1535 + 1;
        v1538 = *(char **)(a1 + 104);
        v1537 = *(char **)(a1 + 112);
        if (v1537 == v1538)
        {
          v1540 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1539 = *((_QWORD *)v1537 - 1);
            v1537 -= 8;
            *--v1535 = v1539;
          }
          while (v1537 != v1538);
          v1540 = (_QWORD *)a1;
          v1537 = *(char **)(a1 + 104);
        }
        v1540[13] = v1535;
        v1540[14] = v1285;
        v1540[15] = v1536;
        if (v1537)
          operator delete(v1537);
      }
      else
      {
        *v1284 = v1281;
        v1285 = v1284 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1285;
      if (v2532)
      {
        v2533 = v2532;
        operator delete(v2532);
      }
      v1579 = operator new();
      v1580 = *(_DWORD *)(a1 + 4);
      v2531 = 0;
      v2529 = 0;
      v2530 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2529, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1579, v1580, v1580, (_DWORD **)&v2529, 0, a2, 1, 0, 0);
      v1582 = *(uint64_t **)(a1 + 112);
      v1581 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1582 >= v1581)
      {
        v1584 = *(_QWORD *)(a1 + 104);
        v1585 = ((uint64_t)v1582 - v1584) >> 3;
        if ((unint64_t)(v1585 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1586 = v1581 - v1584;
        v1587 = v1586 >> 2;
        if (v1586 >> 2 <= (unint64_t)(v1585 + 1))
          v1587 = v1585 + 1;
        if ((unint64_t)v1586 >= 0x7FFFFFFFFFFFFFF8)
          v1588 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1588 = v1587;
        if (v1588)
          v1588 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1588);
        else
          v1589 = 0;
        v1752 = (uint64_t *)(v1588 + 8 * v1585);
        v1753 = v1588 + 8 * v1589;
        *v1752 = v1579;
        v1583 = v1752 + 1;
        v1755 = *(char **)(a1 + 104);
        v1754 = *(char **)(a1 + 112);
        if (v1754 == v1755)
        {
          v1757 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1756 = *((_QWORD *)v1754 - 1);
            v1754 -= 8;
            *--v1752 = v1756;
          }
          while (v1754 != v1755);
          v1757 = (_QWORD *)a1;
          v1754 = *(char **)(a1 + 104);
        }
        v1757[13] = v1752;
        v1757[14] = v1583;
        v1757[15] = v1753;
        if (v1754)
          operator delete(v1754);
      }
      else
      {
        *v1582 = v1579;
        v1583 = v1582 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1583;
      if (v2529)
      {
        v2530 = v2529;
        operator delete(v2529);
      }
      v1770 = operator new();
      v1771 = *(_DWORD *)(a1 + 4);
      v2528 = 0;
      v2526 = 0;
      v2527 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2526, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1770, v1771, v1771, (_DWORD **)&v2526, 0, a2, 1, 0, 0);
      v1773 = *(uint64_t **)(a1 + 112);
      v1772 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1773 >= v1772)
      {
        v1775 = *(_QWORD *)(a1 + 104);
        v1776 = ((uint64_t)v1773 - v1775) >> 3;
        if ((unint64_t)(v1776 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1777 = v1772 - v1775;
        v1778 = v1777 >> 2;
        if (v1777 >> 2 <= (unint64_t)(v1776 + 1))
          v1778 = v1776 + 1;
        if ((unint64_t)v1777 >= 0x7FFFFFFFFFFFFFF8)
          v1779 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1779 = v1778;
        if (v1779)
          v1779 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1779);
        else
          v1780 = 0;
        v1827 = (uint64_t *)(v1779 + 8 * v1776);
        v1828 = v1779 + 8 * v1780;
        *v1827 = v1770;
        v1774 = v1827 + 1;
        v1830 = *(char **)(a1 + 104);
        v1829 = *(char **)(a1 + 112);
        if (v1829 == v1830)
        {
          v1832 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1831 = *((_QWORD *)v1829 - 1);
            v1829 -= 8;
            *--v1827 = v1831;
          }
          while (v1829 != v1830);
          v1832 = (_QWORD *)a1;
          v1829 = *(char **)(a1 + 104);
        }
        v1832[13] = v1827;
        v1832[14] = v1774;
        v1832[15] = v1828;
        if (v1829)
          operator delete(v1829);
      }
      else
      {
        *v1773 = v1770;
        v1774 = v1773 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1774;
      v1324 = v2526;
      if (!v2526)
        goto LABEL_2421;
      v2527 = v2526;
      goto LABEL_2420;
    case 27:
      v318 = operator new();
      v319 = *(_DWORD *)a1;
      v320 = *(_DWORD *)(a1 + 4);
      v2525 = 0;
      v2523 = 0;
      v2524 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2523, v2362, (uint64_t)v2361);
      if (v320 >= 0)
        v321 = v320;
      else
        v321 = v320 + 1;
      LSTM<short>::LSTM(v318, v319, v321 >> 1, (_DWORD **)&v2523, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v323 = *(uint64_t **)(v2366 + 112);
      v322 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v323 >= v322)
      {
        v590 = *(_QWORD *)(v2366 + 104);
        v591 = ((uint64_t)v323 - v590) >> 3;
        if ((unint64_t)(v591 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v592 = v322 - v590;
        v593 = v592 >> 2;
        if (v592 >> 2 <= (unint64_t)(v591 + 1))
          v593 = v591 + 1;
        if ((unint64_t)v592 >= 0x7FFFFFFFFFFFFFF8)
          v594 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v594 = v593;
        if (v594)
          v594 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v594);
        else
          v595 = 0;
        v1027 = (uint64_t *)(v594 + 8 * v591);
        v1028 = v594 + 8 * v595;
        *v1027 = v318;
        v324 = v1027 + 1;
        v1030 = *(char **)(v2366 + 104);
        v1029 = *(char **)(v2366 + 112);
        if (v1029 == v1030)
        {
          v1032 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1031 = *((_QWORD *)v1029 - 1);
            v1029 -= 8;
            *--v1027 = v1031;
          }
          while (v1029 != v1030);
          v1032 = (_QWORD *)v2366;
          v1029 = *(char **)(v2366 + 104);
        }
        v1032[13] = v1027;
        v1032[14] = v324;
        v1032[15] = v1028;
        if (v1029)
          operator delete(v1029);
      }
      else
      {
        *v323 = v318;
        v324 = v323 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v324;
      if (v2523)
      {
        v2524 = v2523;
        operator delete(v2523);
      }
      v1131 = operator new();
      v1132 = *(_DWORD *)(v2366 + 4);
      v2522 = 0;
      v2520 = 0;
      v2521 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2520, v2362, (uint64_t)v2361);
      if (v1132 >= 0)
        v1133 = v1132;
      else
        v1133 = v1132 + 1;
      LSTM<short>::LSTM(v1131, v1133 >> 1, v1132, (_DWORD **)&v2520, 0, a2, 1, 0, 0);
      v1135 = *(uint64_t **)(v2366 + 112);
      v1134 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1135 >= v1134)
      {
        v1137 = *(_QWORD *)(v2366 + 104);
        v1138 = ((uint64_t)v1135 - v1137) >> 3;
        if ((unint64_t)(v1138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1139 = v1134 - v1137;
        v1140 = v1139 >> 2;
        if (v1139 >> 2 <= (unint64_t)(v1138 + 1))
          v1140 = v1138 + 1;
        if ((unint64_t)v1139 >= 0x7FFFFFFFFFFFFFF8)
          v1141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1141 = v1140;
        if (v1141)
          v1141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1141);
        else
          v1142 = 0;
        v1399 = (uint64_t *)(v1141 + 8 * v1138);
        v1400 = v1141 + 8 * v1142;
        *v1399 = v1131;
        v1136 = v1399 + 1;
        v1402 = *(char **)(v2366 + 104);
        v1401 = *(char **)(v2366 + 112);
        if (v1401 == v1402)
        {
          v1404 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1403 = *((_QWORD *)v1401 - 1);
            v1401 -= 8;
            *--v1399 = v1403;
          }
          while (v1401 != v1402);
          v1404 = (_QWORD *)v2366;
          v1401 = *(char **)(v2366 + 104);
        }
        v1404[13] = v1399;
        v1404[14] = v1136;
        v1404[15] = v1400;
        if (v1401)
          operator delete(v1401);
      }
      else
      {
        *v1135 = v1131;
        v1136 = v1135 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1136;
      if (v2520)
      {
        v2521 = v2520;
        operator delete(v2520);
      }
      v1469 = operator new();
      v1470 = *(_DWORD *)(v2366 + 4);
      v2519 = 0;
      v2517 = 0;
      v2518 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2517, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1469, v1470, v1470, (_DWORD **)&v2517, 0, a2, 1, 0, 0);
      v1472 = *(uint64_t **)(v2366 + 112);
      v1471 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1472 >= v1471)
      {
        v1474 = *(_QWORD *)(v2366 + 104);
        v1475 = ((uint64_t)v1472 - v1474) >> 3;
        if ((unint64_t)(v1475 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1476 = v1471 - v1474;
        v1477 = v1476 >> 2;
        if (v1476 >> 2 <= (unint64_t)(v1475 + 1))
          v1477 = v1475 + 1;
        if ((unint64_t)v1476 >= 0x7FFFFFFFFFFFFFF8)
          v1478 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1478 = v1477;
        if (v1478)
          v1478 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1478);
        else
          v1479 = 0;
        v1642 = (uint64_t *)(v1478 + 8 * v1475);
        v1643 = v1478 + 8 * v1479;
        *v1642 = v1469;
        v1473 = v1642 + 1;
        v1645 = *(char **)(v2366 + 104);
        v1644 = *(char **)(v2366 + 112);
        if (v1644 == v1645)
        {
          v1647 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1646 = *((_QWORD *)v1644 - 1);
            v1644 -= 8;
            *--v1642 = v1646;
          }
          while (v1644 != v1645);
          v1647 = (_QWORD *)v2366;
          v1644 = *(char **)(v2366 + 104);
        }
        v1647[13] = v1642;
        v1647[14] = v1473;
        v1647[15] = v1643;
        if (v1644)
          operator delete(v1644);
      }
      else
      {
        *v1472 = v1469;
        v1473 = v1472 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1473;
      v1324 = v2517;
      if (!v2517)
        goto LABEL_2421;
      v2518 = v2517;
      goto LABEL_2420;
    case 28:
      v334 = operator new();
      v335 = *(_DWORD *)a1;
      v336 = *(_DWORD *)(a1 + 4);
      v2516 = 0;
      v2514 = 0;
      v2515 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2514, v2362, (uint64_t)v2361);
      if (v336 >= 0)
        v337 = v336;
      else
        v337 = v336 + 1;
      LSTM<short>::LSTM(v334, v335, v337 >> 1, (_DWORD **)&v2514, *(_DWORD *)(v2366 + 20), a2, 1, 0, 0);
      v339 = *(uint64_t **)(v2366 + 112);
      v338 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v339 >= v338)
      {
        v603 = *(_QWORD *)(v2366 + 104);
        v604 = ((uint64_t)v339 - v603) >> 3;
        if ((unint64_t)(v604 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v605 = v338 - v603;
        v606 = v605 >> 2;
        if (v605 >> 2 <= (unint64_t)(v604 + 1))
          v606 = v604 + 1;
        if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFF8)
          v607 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v607 = v606;
        if (v607)
          v607 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v607);
        else
          v608 = 0;
        v1038 = (uint64_t *)(v607 + 8 * v604);
        v1039 = v607 + 8 * v608;
        *v1038 = v334;
        v340 = v1038 + 1;
        v1041 = *(char **)(v2366 + 104);
        v1040 = *(char **)(v2366 + 112);
        if (v1040 == v1041)
        {
          v1043 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1042 = *((_QWORD *)v1040 - 1);
            v1040 -= 8;
            *--v1038 = v1042;
          }
          while (v1040 != v1041);
          v1043 = (_QWORD *)v2366;
          v1040 = *(char **)(v2366 + 104);
        }
        v1043[13] = v1038;
        v1043[14] = v340;
        v1043[15] = v1039;
        if (v1040)
          operator delete(v1040);
      }
      else
      {
        *v339 = v334;
        v340 = v339 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v340;
      if (v2514)
      {
        v2515 = v2514;
        operator delete(v2514);
      }
      v1143 = operator new();
      v1144 = *(_DWORD *)(v2366 + 4);
      v2513 = 0;
      v2511 = 0;
      v2512 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2511, v2362, (uint64_t)v2361);
      if (v1144 >= 0)
        v1145 = v1144;
      else
        v1145 = v1144 + 1;
      LSTM<short>::LSTM(v1143, v1145 >> 1, v1144, (_DWORD **)&v2511, 0, a2, 1, 0, 0);
      v1147 = *(uint64_t **)(v2366 + 112);
      v1146 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1147 >= v1146)
      {
        v1149 = *(_QWORD *)(v2366 + 104);
        v1150 = ((uint64_t)v1147 - v1149) >> 3;
        if ((unint64_t)(v1150 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1151 = v1146 - v1149;
        v1152 = v1151 >> 2;
        if (v1151 >> 2 <= (unint64_t)(v1150 + 1))
          v1152 = v1150 + 1;
        if ((unint64_t)v1151 >= 0x7FFFFFFFFFFFFFF8)
          v1153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1153 = v1152;
        if (v1153)
          v1153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1153);
        else
          v1154 = 0;
        v1405 = (uint64_t *)(v1153 + 8 * v1150);
        v1406 = v1153 + 8 * v1154;
        *v1405 = v1143;
        v1148 = v1405 + 1;
        v1408 = *(char **)(v2366 + 104);
        v1407 = *(char **)(v2366 + 112);
        if (v1407 == v1408)
        {
          v1410 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1409 = *((_QWORD *)v1407 - 1);
            v1407 -= 8;
            *--v1405 = v1409;
          }
          while (v1407 != v1408);
          v1410 = (_QWORD *)v2366;
          v1407 = *(char **)(v2366 + 104);
        }
        v1410[13] = v1405;
        v1410[14] = v1148;
        v1410[15] = v1406;
        if (v1407)
          operator delete(v1407);
      }
      else
      {
        *v1147 = v1143;
        v1148 = v1147 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1148;
      if (v2511)
      {
        v2512 = v2511;
        operator delete(v2511);
      }
      v1480 = operator new();
      v1481 = *(_DWORD *)(v2366 + 4);
      v2510 = 0;
      v2508 = 0;
      v2509 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2508, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1480, v1481, v1481, (_DWORD **)&v2508, 0, a2, 1, 0, 0);
      v1483 = *(uint64_t **)(v2366 + 112);
      v1482 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1483 >= v1482)
      {
        v1485 = *(_QWORD *)(v2366 + 104);
        v1486 = ((uint64_t)v1483 - v1485) >> 3;
        if ((unint64_t)(v1486 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1487 = v1482 - v1485;
        v1488 = v1487 >> 2;
        if (v1487 >> 2 <= (unint64_t)(v1486 + 1))
          v1488 = v1486 + 1;
        if ((unint64_t)v1487 >= 0x7FFFFFFFFFFFFFF8)
          v1489 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1489 = v1488;
        if (v1489)
          v1489 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1489);
        else
          v1490 = 0;
        v1648 = (uint64_t *)(v1489 + 8 * v1486);
        v1649 = v1489 + 8 * v1490;
        *v1648 = v1480;
        v1484 = v1648 + 1;
        v1651 = *(char **)(v2366 + 104);
        v1650 = *(char **)(v2366 + 112);
        if (v1650 == v1651)
        {
          v1653 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1652 = *((_QWORD *)v1650 - 1);
            v1650 -= 8;
            *--v1648 = v1652;
          }
          while (v1650 != v1651);
          v1653 = (_QWORD *)v2366;
          v1650 = *(char **)(v2366 + 104);
        }
        v1653[13] = v1648;
        v1653[14] = v1484;
        v1653[15] = v1649;
        if (v1650)
          operator delete(v1650);
      }
      else
      {
        *v1483 = v1480;
        v1484 = v1483 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1484;
      if (v2508)
      {
        v2509 = v2508;
        operator delete(v2508);
      }
      v1687 = operator new();
      v1688 = *(_DWORD *)(v2366 + 4);
      v2507 = 0;
      v2505 = 0;
      v2506 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2505, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1687, v1688, v1688, (_DWORD **)&v2505, 0, a2, 1, 0, 0);
      v1690 = *(uint64_t **)(v2366 + 112);
      v1689 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1690 >= v1689)
      {
        v1692 = *(_QWORD *)(v2366 + 104);
        v1693 = ((uint64_t)v1690 - v1692) >> 3;
        if ((unint64_t)(v1693 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1694 = v1689 - v1692;
        v1695 = v1694 >> 2;
        if (v1694 >> 2 <= (unint64_t)(v1693 + 1))
          v1695 = v1693 + 1;
        if ((unint64_t)v1694 >= 0x7FFFFFFFFFFFFFF8)
          v1696 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1696 = v1695;
        if (v1696)
          v1696 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1696);
        else
          v1697 = 0;
        v1810 = (uint64_t *)(v1696 + 8 * v1693);
        v1811 = v1696 + 8 * v1697;
        *v1810 = v1687;
        v1691 = v1810 + 1;
        v1813 = *(char **)(v2366 + 104);
        v1812 = *(char **)(v2366 + 112);
        if (v1812 == v1813)
        {
          v1815 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1814 = *((_QWORD *)v1812 - 1);
            v1812 -= 8;
            *--v1810 = v1814;
          }
          while (v1812 != v1813);
          v1815 = (_QWORD *)v2366;
          v1812 = *(char **)(v2366 + 104);
        }
        v1815[13] = v1810;
        v1815[14] = v1691;
        v1815[15] = v1811;
        if (v1812)
          operator delete(v1812);
      }
      else
      {
        *v1690 = v1687;
        v1691 = v1690 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1691;
      v1324 = v2505;
      if (!v2505)
        goto LABEL_2421;
      v2506 = v2505;
      goto LABEL_2420;
    case 29:
      v259 = operator new();
      v260 = *(_DWORD *)a1;
      v261 = *(_DWORD *)(a1 + 4);
      v2504 = 0;
      v2502 = 0;
      v2503 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2502, v2360, v12);
      if (v261 >= 0)
        v262 = v261;
      else
        v262 = v261 + 1;
      GRU<short>::GRU(v259, v260, v262 >> 1, (_DWORD **)&v2502, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v264 = *(uint64_t **)(v2366 + 112);
      v263 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v264 >= v263)
      {
        v571 = *(_QWORD *)(v2366 + 104);
        v572 = ((uint64_t)v264 - v571) >> 3;
        if ((unint64_t)(v572 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v573 = v263 - v571;
        v574 = v573 >> 2;
        if (v573 >> 2 <= (unint64_t)(v572 + 1))
          v574 = v572 + 1;
        if ((unint64_t)v573 >= 0x7FFFFFFFFFFFFFF8)
          v575 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v575 = v574;
        if (v575)
          v575 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v575);
        else
          v576 = 0;
        v1008 = (uint64_t *)(v575 + 8 * v572);
        v1009 = v575 + 8 * v576;
        *v1008 = v259;
        v265 = v1008 + 1;
        v1011 = *(char **)(v2366 + 104);
        v1010 = *(char **)(v2366 + 112);
        if (v1010 == v1011)
        {
          v1013 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1012 = *((_QWORD *)v1010 - 1);
            v1010 -= 8;
            *--v1008 = v1012;
          }
          while (v1010 != v1011);
          v1013 = (_QWORD *)v2366;
          v1010 = *(char **)(v2366 + 104);
        }
        v1013[13] = v1008;
        v1013[14] = v265;
        v1013[15] = v1009;
        if (v1010)
          operator delete(v1010);
      }
      else
      {
        *v264 = v259;
        v265 = v264 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v265;
      if (v2502)
      {
        v2503 = v2502;
        operator delete(v2502);
      }
      v1108 = operator new();
      v1109 = *(_DWORD *)(v2366 + 4);
      v2501 = 0;
      v2499 = 0;
      v2500 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2499, v2360, v12);
      if (v1109 >= 0)
        v1110 = v1109;
      else
        v1110 = v1109 + 1;
      GRU<short>::GRU(v1108, v1110 >> 1, v1109, (_DWORD **)&v2499, 0, a2, 1, 0);
      v1112 = *(uint64_t **)(v2366 + 112);
      v1111 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1112 >= v1111)
      {
        v1114 = *(_QWORD *)(v2366 + 104);
        v1115 = ((uint64_t)v1112 - v1114) >> 3;
        if ((unint64_t)(v1115 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1116 = v1111 - v1114;
        v1117 = v1116 >> 2;
        if (v1116 >> 2 <= (unint64_t)(v1115 + 1))
          v1117 = v1115 + 1;
        if ((unint64_t)v1116 >= 0x7FFFFFFFFFFFFFF8)
          v1118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1118 = v1117;
        if (v1118)
          v1118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1118);
        else
          v1119 = 0;
        v1387 = (uint64_t *)(v1118 + 8 * v1115);
        v1388 = v1118 + 8 * v1119;
        *v1387 = v1108;
        v1113 = v1387 + 1;
        v1390 = *(char **)(v2366 + 104);
        v1389 = *(char **)(v2366 + 112);
        if (v1389 == v1390)
        {
          v1392 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1391 = *((_QWORD *)v1389 - 1);
            v1389 -= 8;
            *--v1387 = v1391;
          }
          while (v1389 != v1390);
          v1392 = (_QWORD *)v2366;
          v1389 = *(char **)(v2366 + 104);
        }
        v1392[13] = v1387;
        v1392[14] = v1113;
        v1392[15] = v1388;
        if (v1389)
          operator delete(v1389);
      }
      else
      {
        *v1112 = v1108;
        v1113 = v1112 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1113;
      if (v2499)
      {
        v2500 = v2499;
        operator delete(v2499);
      }
      v1447 = operator new();
      v1448 = *(_DWORD *)(v2366 + 4);
      v2498 = 0;
      v2496 = 0;
      v2497 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2496, v2360, v12);
      GRU<short>::GRU(v1447, v1448, v1448, (_DWORD **)&v2496, 0, a2, 1, 0);
      v1450 = *(uint64_t **)(v2366 + 112);
      v1449 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1450 >= v1449)
      {
        v1452 = *(_QWORD *)(v2366 + 104);
        v1453 = ((uint64_t)v1450 - v1452) >> 3;
        if ((unint64_t)(v1453 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1454 = v1449 - v1452;
        v1455 = v1454 >> 2;
        if (v1454 >> 2 <= (unint64_t)(v1453 + 1))
          v1455 = v1453 + 1;
        if ((unint64_t)v1454 >= 0x7FFFFFFFFFFFFFF8)
          v1456 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1456 = v1455;
        if (v1456)
          v1456 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1456);
        else
          v1457 = 0;
        v1630 = (uint64_t *)(v1456 + 8 * v1453);
        v1631 = v1456 + 8 * v1457;
        *v1630 = v1447;
        v1451 = v1630 + 1;
        v1633 = *(char **)(v2366 + 104);
        v1632 = *(char **)(v2366 + 112);
        if (v1632 == v1633)
        {
          v1635 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1634 = *((_QWORD *)v1632 - 1);
            v1632 -= 8;
            *--v1630 = v1634;
          }
          while (v1632 != v1633);
          v1635 = (_QWORD *)v2366;
          v1632 = *(char **)(v2366 + 104);
        }
        v1635[13] = v1630;
        v1635[14] = v1451;
        v1635[15] = v1631;
        if (v1632)
          operator delete(v1632);
      }
      else
      {
        *v1450 = v1447;
        v1451 = v1450 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1451;
      if (v2496)
      {
        v2497 = v2496;
        operator delete(v2496);
      }
      v1676 = operator new();
      v1677 = *(_DWORD *)(v2366 + 4);
      v2495 = 0;
      v2493 = 0;
      v2494 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2493, v2360, v12);
      GRU<short>::GRU(v1676, v1677, v1677, (_DWORD **)&v2493, 0, a2, 1, 0);
      v1679 = *(uint64_t **)(v2366 + 112);
      v1678 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1679 >= v1678)
      {
        v1681 = *(_QWORD *)(v2366 + 104);
        v1682 = ((uint64_t)v1679 - v1681) >> 3;
        if ((unint64_t)(v1682 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1683 = v1678 - v1681;
        v1684 = v1683 >> 2;
        if (v1683 >> 2 <= (unint64_t)(v1682 + 1))
          v1684 = v1682 + 1;
        if ((unint64_t)v1683 >= 0x7FFFFFFFFFFFFFF8)
          v1685 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1685 = v1684;
        if (v1685)
          v1685 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1685);
        else
          v1686 = 0;
        v1804 = (uint64_t *)(v1685 + 8 * v1682);
        v1805 = v1685 + 8 * v1686;
        *v1804 = v1676;
        v1680 = v1804 + 1;
        v1807 = *(char **)(v2366 + 104);
        v1806 = *(char **)(v2366 + 112);
        if (v1806 == v1807)
        {
          v1809 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1808 = *((_QWORD *)v1806 - 1);
            v1806 -= 8;
            *--v1804 = v1808;
          }
          while (v1806 != v1807);
          v1809 = (_QWORD *)v2366;
          v1806 = *(char **)(v2366 + 104);
        }
        v1809[13] = v1804;
        v1809[14] = v1680;
        v1809[15] = v1805;
        if (v1806)
          operator delete(v1806);
      }
      else
      {
        *v1679 = v1676;
        v1680 = v1679 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1680;
      v1324 = v2493;
      if (!v2493)
        goto LABEL_2421;
      v2494 = v2493;
      goto LABEL_2420;
    case 30:
      v329 = operator new();
      v330 = *(_DWORD *)a1;
      v331 = *(_DWORD *)(a1 + 4);
      memset(v2492, 0, sizeof(v2492));
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(v2492, v2360, v12);
      GRU<short>::GRU(v329, v330, v331, v2492, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v333 = *(uint64_t **)(a1 + 112);
      v332 = *(_QWORD *)(a1 + 120);
      v94 = (void **)(a1 + 112);
      if ((unint64_t)v333 >= v332)
      {
        v597 = (void **)(v2366 + 104);
        v596 = *(_QWORD *)(v2366 + 104);
        v598 = ((uint64_t)v333 - v596) >> 3;
        if ((unint64_t)(v598 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v599 = v332 - v596;
        v600 = v599 >> 2;
        if (v599 >> 2 <= (unint64_t)(v598 + 1))
          v600 = v598 + 1;
        if ((unint64_t)v599 >= 0x7FFFFFFFFFFFFFF8)
          v601 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v601 = v600;
        if (v601)
          v601 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v601);
        else
          v602 = 0;
        v1033 = (uint64_t *)(v601 + 8 * v598);
        v1034 = v601 + 8 * v602;
        *v1033 = v329;
        v291 = v1033 + 1;
        v1035 = (char *)*v94;
        v1036 = (char *)*v597;
        if (*v94 != *v597)
        {
          do
          {
            v1037 = *((_QWORD *)v1035 - 1);
            v1035 -= 8;
            *--v1033 = v1037;
          }
          while (v1035 != v1036);
          v1035 = (char *)*v597;
        }
        *(_QWORD *)(v2366 + 104) = v1033;
        *(_QWORD *)(v2366 + 112) = v291;
        *(_QWORD *)(v2366 + 120) = v1034;
        if (v1035)
          operator delete(v1035);
      }
      else
      {
        *v333 = v329;
        v291 = v333 + 1;
      }
      *v94 = v291;
      v1019 = v2492[0];
      if (!v2492[0])
        goto LABEL_1450;
      v1020 = (void **)v2492;
LABEL_1449:
      v1020[1] = v1019;
      operator delete(v1019);
      v291 = *v94;
LABEL_1450:
      (*(void (**)(_QWORD))(*(_QWORD *)*(v291 - 1) + 8))(*(v291 - 1));
      goto LABEL_2421;
    case 31:
      v296 = operator new();
      FullLayer<short>::FullLayer(v296, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v298 = *(uint64_t **)(a1 + 112);
      v297 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v298 >= v297)
      {
        v517 = *(_QWORD *)(a1 + 104);
        v518 = ((uint64_t)v298 - v517) >> 3;
        if ((unint64_t)(v518 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v519 = v297 - v517;
        v520 = v519 >> 2;
        if (v519 >> 2 <= (unint64_t)(v518 + 1))
          v520 = v518 + 1;
        if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFF8)
          v521 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v521 = v520;
        if (v521)
          v521 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v521);
        else
          v522 = 0;
        v825 = (uint64_t *)(v521 + 8 * v518);
        v826 = v521 + 8 * v522;
        *v825 = v296;
        v299 = v825 + 1;
        v828 = *(char **)(a1 + 104);
        v827 = *(char **)(a1 + 112);
        if (v827 == v828)
        {
          v830 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v829 = *((_QWORD *)v827 - 1);
            v827 -= 8;
            *--v825 = v829;
          }
          while (v827 != v828);
          v830 = (_QWORD *)a1;
          v827 = *(char **)(a1 + 104);
        }
        v830[13] = v825;
        v830[14] = v299;
        v830[15] = v826;
        if (v827)
          operator delete(v827);
      }
      else
      {
        *v298 = v296;
        v299 = v298 + 1;
      }
      *(_QWORD *)(a1 + 112) = v299;
      v939 = operator new();
      v940 = *(_DWORD *)(a1 + 4);
      v2491 = 0;
      v2489 = 0;
      v2490 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2489, v2360, v12);
      GRU<short>::GRU(v939, v940, v940, (_DWORD **)&v2489, 0, a2, 1, 0);
      v942 = *(uint64_t **)(a1 + 112);
      v941 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v942 >= v941)
      {
        v944 = *(_QWORD *)(a1 + 104);
        v945 = ((uint64_t)v942 - v944) >> 3;
        if ((unint64_t)(v945 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v946 = v941 - v944;
        v947 = v946 >> 2;
        if (v946 >> 2 <= (unint64_t)(v945 + 1))
          v947 = v945 + 1;
        if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFF8)
          v948 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v948 = v947;
        if (v948)
          v948 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v948);
        else
          v949 = 0;
        v1230 = (uint64_t *)(v948 + 8 * v945);
        v1231 = v948 + 8 * v949;
        *v1230 = v939;
        v943 = v1230 + 1;
        v1233 = *(char **)(a1 + 104);
        v1232 = *(char **)(a1 + 112);
        if (v1232 == v1233)
        {
          v1235 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1234 = *((_QWORD *)v1232 - 1);
            v1232 -= 8;
            *--v1230 = v1234;
          }
          while (v1232 != v1233);
          v1235 = (_QWORD *)a1;
          v1232 = *(char **)(a1 + 104);
        }
        v1235[13] = v1230;
        v1235[14] = v943;
        v1235[15] = v1231;
        if (v1232)
          operator delete(v1232);
      }
      else
      {
        *v942 = v939;
        v943 = v942 + 1;
      }
      *(_QWORD *)(a1 + 112) = v943;
      v1324 = v2489;
      if (!v2489)
        goto LABEL_2421;
      v2490 = v2489;
      goto LABEL_2420;
    case 32:
      v300 = operator new();
      v301 = *(_DWORD *)a1;
      v302 = *(_DWORD *)(a1 + 4);
      v2488 = 0;
      v2486 = 0;
      v2487 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2486, v2360, v12);
      GRU<short>::GRU(v300, v301, v302, (_DWORD **)&v2486, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v304 = v303;
      *v14 = v300;
      if (v2486)
      {
        v2487 = v2486;
        operator delete(v2486);
      }
      v305 = operator new();
      v306 = *(_DWORD *)(a1 + 4);
      v2485 = 0;
      v2483 = 0;
      v2484 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2483, v2360, v12);
      GRU<short>::GRU(v305, v306, v306, (_DWORD **)&v2483, 0, a2, 1, 0);
      if (v304 < 2)
      {
        v659 = 2;
        if ((unint64_t)((8 * v304) >> 2) > 2)
          v659 = (8 * v304) >> 2;
        if ((unint64_t)(8 * v304) >= 0x7FFFFFFFFFFFFFF8)
          v660 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v660 = v659;
        if (v660)
          v660 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v660);
        v661 = 0;
        *(_QWORD *)(v660 + 8) = v305;
        v307 = v660 + 16;
        do
        {
          *(_QWORD *)(v660 + v661 * 8) = v14[v661];
          --v661;
        }
        while (v661 != -1);
        v662 = (_QWORD *)v660;
        operator delete(v14);
        v14 = v662;
      }
      else
      {
        v14[1] = v305;
        v307 = (uint64_t)(v14 + 2);
      }
      if (v2483)
      {
        v2484 = v2483;
        operator delete(v2483);
      }
      v663 = operator new();
      v2481 = 0;
      v2480 = 0;
      v2482 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2480, v14, v307, (v307 - (uint64_t)v14) >> 3);
      Stacked::Stacked(v663, (uint64_t)&v2480);
      if (v2480)
      {
        v2481 = v2480;
        operator delete(v2480);
      }
      v664 = operator new();
      v665 = *(_DWORD *)a1;
      v666 = *(_DWORD *)(a1 + 4);
      v2479 = 0;
      v2477 = 0;
      v2478 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2477, v2360, v12);
      GRU<short>::GRU(v664, v665, v666, (_DWORD **)&v2477, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v667 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v669 = v668;
      *v667 = v664;
      if (v2477)
      {
        v2478 = v2477;
        operator delete(v2477);
      }
      v670 = operator new();
      v671 = *(_DWORD *)(a1 + 4);
      v2476 = 0;
      v2474 = 0;
      v2475 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2474, v2360, v12);
      GRU<short>::GRU(v670, v671, v671, (_DWORD **)&v2474, 0, a2, 1, 0);
      if (v669 < 2)
      {
        v729 = 2;
        if ((unint64_t)((8 * v669) >> 2) > 2)
          v729 = (8 * v669) >> 2;
        if ((unint64_t)(8 * v669) >= 0x7FFFFFFFFFFFFFF8)
          v730 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v730 = v729;
        if (v730)
          v730 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v730);
        v731 = 0;
        *(_QWORD *)(v730 + 8) = v670;
        v672 = v730 + 16;
        do
        {
          *(_QWORD *)(v730 + v731 * 8) = v667[v731];
          --v731;
        }
        while (v731 != -1);
        v732 = (_QWORD *)v730;
        operator delete(v667);
        v667 = v732;
      }
      else
      {
        v667[1] = v670;
        v672 = (uint64_t)(v667 + 2);
      }
      if (v2474)
      {
        v2475 = v2474;
        operator delete(v2474);
      }
      v733 = operator new();
      v734 = operator new();
      v2472 = 0;
      v2471 = 0;
      v2473 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2471, v667, v672, (v672 - (uint64_t)v667) >> 3);
      Stacked::Stacked(v734, (uint64_t)&v2471);
      Reverse::Reverse(v733, v734, *(_DWORD *)(a1 + 20));
      if (v2471)
      {
        v2472 = v2471;
        operator delete(v2471);
      }
      v735 = operator new(8uLL);
      *v735 = v663;
      v736 = operator new(0x10uLL);
      v737 = v736 + 2;
      *v736 = *v735;
      v736[1] = v733;
      v2681 = v736;
      v2683 = v736 + 2;
      operator delete(v735);
      v2682 = v737;
      v738 = (char **)operator new();
      Parallel::Parallel(v738, (uint64_t)&v2681);
      v740 = *(char ****)(v2366 + 112);
      v739 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v740 >= v739)
      {
        v742 = *(_QWORD *)(v2366 + 104);
        v743 = ((uint64_t)v740 - v742) >> 3;
        if ((unint64_t)(v743 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v744 = v739 - v742;
        v745 = v744 >> 2;
        if (v744 >> 2 <= (unint64_t)(v743 + 1))
          v745 = v743 + 1;
        if ((unint64_t)v744 >= 0x7FFFFFFFFFFFFFF8)
          v746 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v746 = v745;
        if (v746)
          v746 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v746);
        else
          v747 = 0;
        v2041 = (char ***)(v746 + 8 * v743);
        v2042 = v746 + 8 * v747;
        *v2041 = v738;
        v741 = v2041 + 1;
        v2044 = *(char **)(v2366 + 104);
        v2043 = *(char **)(v2366 + 112);
        if (v2043 == v2044)
        {
          v2046 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2045 = (char **)*((_QWORD *)v2043 - 1);
            v2043 -= 8;
            *--v2041 = v2045;
          }
          while (v2043 != v2044);
          v2046 = (_QWORD *)v2366;
          v2043 = *(char **)(v2366 + 104);
        }
        v2046[13] = v2041;
        v2046[14] = v741;
        v2046[15] = v2042;
        if (v2043)
          operator delete(v2043);
      }
      else
      {
        *v740 = v738;
        v741 = v740 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v741;
      if (v2681)
        operator delete(v2681);
      v2071 = v667;
      goto LABEL_2418;
    case 33:
      v266 = operator new();
      FullLayer<short>::FullLayer(v266, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v268 = *(uint64_t **)(a1 + 112);
      v267 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v268 >= v267)
      {
        v499 = *(_QWORD *)(a1 + 104);
        v500 = ((uint64_t)v268 - v499) >> 3;
        if ((unint64_t)(v500 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v501 = v267 - v499;
        v502 = v501 >> 2;
        if (v501 >> 2 <= (unint64_t)(v500 + 1))
          v502 = v500 + 1;
        if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
          v503 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v503 = v502;
        if (v503)
          v503 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v503);
        else
          v504 = 0;
        v807 = (uint64_t *)(v503 + 8 * v500);
        v808 = v503 + 8 * v504;
        *v807 = v266;
        v269 = v807 + 1;
        v810 = *(char **)(a1 + 104);
        v809 = *(char **)(a1 + 112);
        if (v809 == v810)
        {
          v812 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v811 = *((_QWORD *)v809 - 1);
            v809 -= 8;
            *--v807 = v811;
          }
          while (v809 != v810);
          v812 = (_QWORD *)a1;
          v809 = *(char **)(a1 + 104);
        }
        v812[13] = v807;
        v812[14] = v269;
        v812[15] = v808;
        if (v809)
          operator delete(v809);
      }
      else
      {
        *v268 = v266;
        v269 = v268 + 1;
      }
      *(_QWORD *)(a1 + 112) = v269;
      v906 = operator new();
      v907 = *(_DWORD *)(a1 + 4);
      v2470 = 0;
      v2468 = 0;
      v2469 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2468, v2360, v12);
      GRU<short>::GRU(v906, v907, v907, (_DWORD **)&v2468, 0, a2, 1, 0);
      v909 = *(uint64_t **)(a1 + 112);
      v908 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v909 >= v908)
      {
        v911 = *(_QWORD *)(a1 + 104);
        v912 = ((uint64_t)v909 - v911) >> 3;
        if ((unint64_t)(v912 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v913 = v908 - v911;
        v914 = v913 >> 2;
        if (v913 >> 2 <= (unint64_t)(v912 + 1))
          v914 = v912 + 1;
        if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFF8)
          v915 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v915 = v914;
        if (v915)
          v915 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v915);
        else
          v916 = 0;
        v1224 = (uint64_t *)(v915 + 8 * v912);
        v1225 = v915 + 8 * v916;
        *v1224 = v906;
        v910 = v1224 + 1;
        v1227 = *(char **)(a1 + 104);
        v1226 = *(char **)(a1 + 112);
        if (v1226 == v1227)
        {
          v1229 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1228 = *((_QWORD *)v1226 - 1);
            v1226 -= 8;
            *--v1224 = v1228;
          }
          while (v1226 != v1227);
          v1229 = (_QWORD *)a1;
          v1226 = *(char **)(a1 + 104);
        }
        v1229[13] = v1224;
        v1229[14] = v910;
        v1229[15] = v1225;
        if (v1226)
          operator delete(v1226);
      }
      else
      {
        *v909 = v906;
        v910 = v909 + 1;
      }
      *(_QWORD *)(a1 + 112) = v910;
      if (v2468)
      {
        v2469 = v2468;
        operator delete(v2468);
      }
      v1336 = operator new();
      v1337 = *(_DWORD *)(a1 + 4);
      v2467 = 0;
      v2465 = 0;
      v2466 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2465, v2360, v12);
      GRU<short>::GRU(v1336, v1337, v1337, (_DWORD **)&v2465, 0, a2, 1, 0);
      v1339 = *(uint64_t **)(a1 + 112);
      v1338 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1339 >= v1338)
      {
        v1341 = *(_QWORD *)(a1 + 104);
        v1342 = ((uint64_t)v1339 - v1341) >> 3;
        if ((unint64_t)(v1342 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1343 = v1338 - v1341;
        v1344 = v1343 >> 2;
        if (v1343 >> 2 <= (unint64_t)(v1342 + 1))
          v1344 = v1342 + 1;
        if ((unint64_t)v1343 >= 0x7FFFFFFFFFFFFFF8)
          v1345 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1345 = v1344;
        if (v1345)
          v1345 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1345);
        else
          v1346 = 0;
        v1547 = (uint64_t *)(v1345 + 8 * v1342);
        v1548 = v1345 + 8 * v1346;
        *v1547 = v1336;
        v1340 = v1547 + 1;
        v1550 = *(char **)(a1 + 104);
        v1549 = *(char **)(a1 + 112);
        if (v1549 == v1550)
        {
          v1552 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1551 = *((_QWORD *)v1549 - 1);
            v1549 -= 8;
            *--v1547 = v1551;
          }
          while (v1549 != v1550);
          v1552 = (_QWORD *)a1;
          v1549 = *(char **)(a1 + 104);
        }
        v1552[13] = v1547;
        v1552[14] = v1340;
        v1552[15] = v1548;
        if (v1549)
          operator delete(v1549);
      }
      else
      {
        *v1339 = v1336;
        v1340 = v1339 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1340;
      if (v2465)
      {
        v2466 = v2465;
        operator delete(v2465);
      }
      v1590 = operator new();
      v1591 = *(_DWORD *)(a1 + 4);
      v2464 = 0;
      v2462 = 0;
      v2463 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2462, v2360, v12);
      GRU<short>::GRU(v1590, v1591, v1591, (_DWORD **)&v2462, 0, a2, 1, 0);
      v1593 = *(uint64_t **)(a1 + 112);
      v1592 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1593 >= v1592)
      {
        v1595 = *(_QWORD *)(a1 + 104);
        v1596 = ((uint64_t)v1593 - v1595) >> 3;
        if ((unint64_t)(v1596 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1597 = v1592 - v1595;
        v1598 = v1597 >> 2;
        if (v1597 >> 2 <= (unint64_t)(v1596 + 1))
          v1598 = v1596 + 1;
        if ((unint64_t)v1597 >= 0x7FFFFFFFFFFFFFF8)
          v1599 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1599 = v1598;
        if (v1599)
          v1599 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1599);
        else
          v1600 = 0;
        v1758 = (uint64_t *)(v1599 + 8 * v1596);
        v1759 = v1599 + 8 * v1600;
        *v1758 = v1590;
        v1594 = v1758 + 1;
        v1761 = *(char **)(a1 + 104);
        v1760 = *(char **)(a1 + 112);
        if (v1760 == v1761)
        {
          v1763 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1762 = *((_QWORD *)v1760 - 1);
            v1760 -= 8;
            *--v1758 = v1762;
          }
          while (v1760 != v1761);
          v1763 = (_QWORD *)a1;
          v1760 = *(char **)(a1 + 104);
        }
        v1763[13] = v1758;
        v1763[14] = v1594;
        v1763[15] = v1759;
        if (v1760)
          operator delete(v1760);
      }
      else
      {
        *v1593 = v1590;
        v1594 = v1593 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1594;
      if (v2462)
      {
        v2463 = v2462;
        operator delete(v2462);
      }
      v1781 = operator new();
      v1782 = *(_DWORD *)(a1 + 4);
      v2461 = 0;
      v2459 = 0;
      v2460 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2459, v2360, v12);
      GRU<short>::GRU(v1781, v1782, v1782, (_DWORD **)&v2459, 0, a2, 1, 0);
      v1784 = *(uint64_t **)(a1 + 112);
      v1783 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1784 >= v1783)
      {
        v1786 = *(_QWORD *)(a1 + 104);
        v1787 = ((uint64_t)v1784 - v1786) >> 3;
        if ((unint64_t)(v1787 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1788 = v1783 - v1786;
        v1789 = v1788 >> 2;
        if (v1788 >> 2 <= (unint64_t)(v1787 + 1))
          v1789 = v1787 + 1;
        if ((unint64_t)v1788 >= 0x7FFFFFFFFFFFFFF8)
          v1790 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1790 = v1789;
        if (v1790)
          v1790 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1790);
        else
          v1791 = 0;
        v1833 = (uint64_t *)(v1790 + 8 * v1787);
        v1834 = v1790 + 8 * v1791;
        *v1833 = v1781;
        v1785 = v1833 + 1;
        v1836 = *(char **)(a1 + 104);
        v1835 = *(char **)(a1 + 112);
        if (v1835 == v1836)
        {
          v1838 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1837 = *((_QWORD *)v1835 - 1);
            v1835 -= 8;
            *--v1833 = v1837;
          }
          while (v1835 != v1836);
          v1838 = (_QWORD *)a1;
          v1835 = *(char **)(a1 + 104);
        }
        v1838[13] = v1833;
        v1838[14] = v1785;
        v1838[15] = v1834;
        if (v1835)
          operator delete(v1835);
      }
      else
      {
        *v1784 = v1781;
        v1785 = v1784 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1785;
      v1324 = v2459;
      if (!v2459)
        goto LABEL_2421;
      v2460 = v2459;
      goto LABEL_2420;
    case 39:
      v270 = operator new();
      FullLayer<short>::FullLayer(v270, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v272 = *(uint64_t **)(a1 + 112);
      v271 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v272 >= v271)
      {
        v505 = *(_QWORD *)(a1 + 104);
        v506 = ((uint64_t)v272 - v505) >> 3;
        if ((unint64_t)(v506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v507 = v271 - v505;
        v508 = v507 >> 2;
        if (v507 >> 2 <= (unint64_t)(v506 + 1))
          v508 = v506 + 1;
        if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFF8)
          v509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v509 = v508;
        if (v509)
          v509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v509);
        else
          v510 = 0;
        v813 = (uint64_t *)(v509 + 8 * v506);
        v814 = v509 + 8 * v510;
        *v813 = v270;
        v273 = v813 + 1;
        v816 = *(char **)(a1 + 104);
        v815 = *(char **)(a1 + 112);
        if (v815 == v816)
        {
          v818 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v817 = *((_QWORD *)v815 - 1);
            v815 -= 8;
            *--v813 = v817;
          }
          while (v815 != v816);
          v818 = (_QWORD *)a1;
          v815 = *(char **)(a1 + 104);
        }
        v818[13] = v813;
        v818[14] = v273;
        v818[15] = v814;
        if (v815)
          operator delete(v815);
      }
      else
      {
        *v272 = v270;
        v273 = v272 + 1;
      }
      *(_QWORD *)(a1 + 112) = v273;
      v917 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v273 - 1) + 272))(*(v273 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v918 = operator new();
      v919 = *(_DWORD *)(a1 + 4);
      v2458 = 0;
      v2456 = 0;
      v2457 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2456, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v918, v917, v919, (_DWORD **)&v2456, 0, a2, 1, 0, 0);
      v920 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v922 = v921;
      v923 = &v920[v921];
      *v920 = v918;
      v2682 = v920 + 1;
      v2683 = v923;
      v2681 = v920;
      if (v2456)
      {
        v2457 = v2456;
        operator delete(v2456);
      }
      v924 = operator new();
      Direct::Direct(v924, v917, v917, 0);
      if (v922 < 2)
      {
        v926 = 2;
        if ((unint64_t)(((char *)v923 - (char *)v920) >> 2) > 2)
          v926 = ((char *)v923 - (char *)v920) >> 2;
        if ((unint64_t)((char *)v923 - (char *)v920) >= 0x7FFFFFFFFFFFFFF8)
          v927 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v927 = v926;
        if (v927)
          v927 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v927);
        else
          v928 = 0;
        v1565 = 0;
        v1566 = v927 + 8;
        v1567 = v927 + 8 * v928;
        *(_QWORD *)(v927 + 8) = v924;
        v925 = (_QWORD *)(v927 + 16);
        do
        {
          *(_QWORD *)(v927 + v1565 * 8) = v920[v1565];
          --v1565;
        }
        while (v1565 != -1);
        v1568 = v2681;
        v2681 = (void *)(v1566 - 8);
        v2683 = (_QWORD *)v1567;
        if (v1568)
          operator delete(v1568);
      }
      else
      {
        v920[1] = v924;
        v925 = v920 + 2;
      }
      v2682 = v925;
      v1569 = (char **)operator new();
      Parallel::Parallel(v1569, (uint64_t)&v2681);
      v1571 = *(char ****)(v2366 + 112);
      v1570 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1571 >= v1570)
      {
        v1573 = *(_QWORD *)(v2366 + 104);
        v1574 = ((uint64_t)v1571 - v1573) >> 3;
        if ((unint64_t)(v1574 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1575 = v1570 - v1573;
        v1576 = v1575 >> 2;
        if (v1575 >> 2 <= (unint64_t)(v1574 + 1))
          v1576 = v1574 + 1;
        if ((unint64_t)v1575 >= 0x7FFFFFFFFFFFFFF8)
          v1577 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1577 = v1576;
        if (v1577)
          v1577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1577);
        else
          v1578 = 0;
        v1734 = (char ***)(v1577 + 8 * v1574);
        v1735 = v1577 + 8 * v1578;
        *v1734 = v1569;
        v1572 = v1734 + 1;
        v1737 = *(char **)(v2366 + 104);
        v1736 = *(char **)(v2366 + 112);
        if (v1736 == v1737)
        {
          v1739 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1738 = (char **)*((_QWORD *)v1736 - 1);
            v1736 -= 8;
            *--v1734 = v1738;
          }
          while (v1736 != v1737);
          v1739 = (_QWORD *)v2366;
          v1736 = *(char **)(v2366 + 104);
        }
        v1739[13] = v1734;
        v1739[14] = v1572;
        v1739[15] = v1735;
        if (v1736)
          operator delete(v1736);
      }
      else
      {
        *v1571 = v1569;
        v1572 = v1571 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1572;
      v1740 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1572 - 1) + 272))(*(v1572 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1741 = operator new();
      v1742 = *(_DWORD *)(v2366 + 4);
      v2452 = 0;
      v2450 = 0;
      v2451 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2450, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1741, v1740, v1742, (_DWORD **)&v2450, 0, a2, 1, 0, 0);
      v1743 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1745 = v1744;
      v1746 = (char *)&v1743[v1744];
      *v1743 = v1741;
      v2455 = v1746;
      v2453 = v1743;
      v2454 = v1743 + 1;
      if (v2450)
      {
        v2451 = v2450;
        operator delete(v2450);
      }
      v1747 = operator new();
      Direct::Direct(v1747, v1740, v1740, 0);
      if (v1745 < 2)
      {
        v1749 = 2;
        if ((unint64_t)((v1746 - (char *)v1743) >> 2) > 2)
          v1749 = (v1746 - (char *)v1743) >> 2;
        if ((unint64_t)(v1746 - (char *)v1743) >= 0x7FFFFFFFFFFFFFF8)
          v1750 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1750 = v1749;
        if (v1750)
          v1750 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1750);
        else
          v1751 = 0;
        v1924 = 0;
        v1925 = v1750 + 8;
        v1926 = v1750 + 8 * v1751;
        *(_QWORD *)(v1750 + 8) = v1747;
        v1748 = (_QWORD *)(v1750 + 16);
        do
        {
          *(_QWORD *)(v1750 + v1924 * 8) = v1743[v1924];
          --v1924;
        }
        while (v1924 != -1);
        v1927 = v2453;
        v2453 = (void *)(v1925 - 8);
        v2455 = (char *)v1926;
        if (v1927)
          operator delete(v1927);
      }
      else
      {
        v1743[1] = v1747;
        v1748 = v1743 + 2;
      }
      v2454 = v1748;
      v1928 = (char **)operator new();
      Parallel::Parallel(v1928, (uint64_t)&v2453);
      v1930 = *(char ****)(v2366 + 112);
      v1929 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1930 >= v1929)
      {
        v1932 = *(_QWORD *)(v2366 + 104);
        v1933 = ((uint64_t)v1930 - v1932) >> 3;
        if ((unint64_t)(v1933 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1934 = v1929 - v1932;
        v1935 = v1934 >> 2;
        if (v1934 >> 2 <= (unint64_t)(v1933 + 1))
          v1935 = v1933 + 1;
        if ((unint64_t)v1934 >= 0x7FFFFFFFFFFFFFF8)
          v1936 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1936 = v1935;
        if (v1936)
          v1936 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1936);
        else
          v1937 = 0;
        v1990 = (char ***)(v1936 + 8 * v1933);
        v1991 = v1936 + 8 * v1937;
        *v1990 = v1928;
        v1931 = v1990 + 1;
        v1993 = *(char **)(v2366 + 104);
        v1992 = *(char **)(v2366 + 112);
        if (v1992 == v1993)
        {
          v1995 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1994 = (char **)*((_QWORD *)v1992 - 1);
            v1992 -= 8;
            *--v1990 = v1994;
          }
          while (v1992 != v1993);
          v1995 = (_QWORD *)v2366;
          v1992 = *(char **)(v2366 + 104);
        }
        v1995[13] = v1990;
        v1995[14] = v1931;
        v1995[15] = v1991;
        if (v1992)
          operator delete(v1992);
      }
      else
      {
        *v1930 = v1928;
        v1931 = v1930 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1931;
      v1996 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1931 - 1) + 272))(*(v1931 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1997 = operator new();
      v1998 = *(_DWORD *)(v2366 + 4);
      v2446 = 0;
      v2444 = 0;
      v2445 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2444, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v1997, v1996, v1998, (_DWORD **)&v2444, 0, a2, 1, 0, 0);
      v1999 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2001 = v2000;
      v2002 = (char *)&v1999[v2000];
      *v1999 = v1997;
      v2449 = v2002;
      v2447 = v1999;
      v2448 = v1999 + 1;
      if (v2444)
      {
        v2445 = v2444;
        operator delete(v2444);
      }
      v2003 = operator new();
      Direct::Direct(v2003, v1996, v1996, 0);
      if (v2001 < 2)
      {
        v2005 = 2;
        if ((unint64_t)((v2002 - (char *)v1999) >> 2) > 2)
          v2005 = (v2002 - (char *)v1999) >> 2;
        if ((unint64_t)(v2002 - (char *)v1999) >= 0x7FFFFFFFFFFFFFF8)
          v2006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2006 = v2005;
        if (v2006)
          v2006 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2006);
        else
          v2007 = 0;
        v2105 = 0;
        v2106 = v2006 + 8;
        v2107 = v2006 + 8 * v2007;
        *(_QWORD *)(v2006 + 8) = v2003;
        v2004 = (_QWORD *)(v2006 + 16);
        do
        {
          *(_QWORD *)(v2006 + v2105 * 8) = v1999[v2105];
          --v2105;
        }
        while (v2105 != -1);
        v2108 = v2447;
        v2447 = (void *)(v2106 - 8);
        v2449 = (char *)v2107;
        if (v2108)
          operator delete(v2108);
      }
      else
      {
        v1999[1] = v2003;
        v2004 = v1999 + 2;
      }
      v2448 = v2004;
      v2109 = (char **)operator new();
      Parallel::Parallel(v2109, (uint64_t)&v2447);
      v2111 = *(char ****)(v2366 + 112);
      v2110 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2111 >= v2110)
      {
        v2113 = *(_QWORD *)(v2366 + 104);
        v2114 = ((uint64_t)v2111 - v2113) >> 3;
        if ((unint64_t)(v2114 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2115 = v2110 - v2113;
        v2116 = v2115 >> 2;
        if (v2115 >> 2 <= (unint64_t)(v2114 + 1))
          v2116 = v2114 + 1;
        if ((unint64_t)v2115 >= 0x7FFFFFFFFFFFFFF8)
          v2117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2117 = v2116;
        if (v2117)
          v2117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2117);
        else
          v2118 = 0;
        v2134 = (char ***)(v2117 + 8 * v2114);
        v2135 = v2117 + 8 * v2118;
        *v2134 = v2109;
        v2112 = v2134 + 1;
        v2137 = *(char **)(v2366 + 104);
        v2136 = *(char **)(v2366 + 112);
        if (v2136 == v2137)
        {
          v2139 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2138 = (char **)*((_QWORD *)v2136 - 1);
            v2136 -= 8;
            *--v2134 = v2138;
          }
          while (v2136 != v2137);
          v2139 = (_QWORD *)v2366;
          v2136 = *(char **)(v2366 + 104);
        }
        v2139[13] = v2134;
        v2139[14] = v2112;
        v2139[15] = v2135;
        if (v2136)
          operator delete(v2136);
      }
      else
      {
        *v2111 = v2109;
        v2112 = v2111 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2112;
      v2140 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2112 - 1) + 272))(*(v2112 - 1));
      v2141 = operator new();
      v2142 = *(_DWORD *)(v2366 + 4);
      v2443 = 0;
      v2441 = 0;
      v2442 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2441, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v2141, v2140, v2142, (_DWORD **)&v2441, 0, a2, 1, 0, 0);
      v2144 = *(uint64_t **)(v2366 + 112);
      v2143 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2144 >= v2143)
      {
        v2146 = *(_QWORD *)(v2366 + 104);
        v2147 = ((uint64_t)v2144 - v2146) >> 3;
        if ((unint64_t)(v2147 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2148 = v2143 - v2146;
        v2149 = v2148 >> 2;
        if (v2148 >> 2 <= (unint64_t)(v2147 + 1))
          v2149 = v2147 + 1;
        if ((unint64_t)v2148 >= 0x7FFFFFFFFFFFFFF8)
          v2150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2150 = v2149;
        if (v2150)
          v2150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2150);
        else
          v2151 = 0;
        v2172 = (uint64_t *)(v2150 + 8 * v2147);
        v2173 = v2150 + 8 * v2151;
        *v2172 = v2141;
        v2145 = v2172 + 1;
        v2175 = *(char **)(v2366 + 104);
        v2174 = *(char **)(v2366 + 112);
        if (v2174 == v2175)
        {
          v2177 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2176 = *((_QWORD *)v2174 - 1);
            v2174 -= 8;
            *--v2172 = v2176;
          }
          while (v2174 != v2175);
          v2177 = (_QWORD *)v2366;
          v2174 = *(char **)(v2366 + 104);
        }
        v2177[13] = v2172;
        v2177[14] = v2145;
        v2177[15] = v2173;
        if (v2174)
          operator delete(v2174);
      }
      else
      {
        *v2144 = v2141;
        v2145 = v2144 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2145;
      v2158 = v2441;
      if (!v2441)
        goto LABEL_2404;
      v2442 = v2441;
      goto LABEL_2403;
    case 40:
      v308 = operator new();
      FullLayer<short>::FullLayer(v308, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v310 = *(uint64_t **)(a1 + 112);
      v309 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v310 >= v309)
      {
        v523 = *(_QWORD *)(a1 + 104);
        v524 = ((uint64_t)v310 - v523) >> 3;
        if ((unint64_t)(v524 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v525 = v309 - v523;
        v526 = v525 >> 2;
        if (v525 >> 2 <= (unint64_t)(v524 + 1))
          v526 = v524 + 1;
        if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
          v527 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v527 = v526;
        if (v527)
          v527 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v527);
        else
          v528 = 0;
        v831 = (uint64_t *)(v527 + 8 * v524);
        v832 = v527 + 8 * v528;
        *v831 = v308;
        v311 = v831 + 1;
        v834 = *(char **)(a1 + 104);
        v833 = *(char **)(a1 + 112);
        if (v833 == v834)
        {
          v836 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v835 = *((_QWORD *)v833 - 1);
            v833 -= 8;
            *--v831 = v835;
          }
          while (v833 != v834);
          v836 = (_QWORD *)a1;
          v833 = *(char **)(a1 + 104);
        }
        v836[13] = v831;
        v836[14] = v311;
        v836[15] = v832;
        if (v833)
          operator delete(v833);
      }
      else
      {
        *v310 = v308;
        v311 = v310 + 1;
      }
      *(_QWORD *)(a1 + 112) = v311;
      v950 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v311 - 1) + 272))(*(v311 - 1));
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v951 = operator new();
      FullLayer<short>::FullLayer(v951, v950, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v952 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v954 = v953;
      *v952 = v951;
      v955 = &v952[v953];
      v2682 = v952 + 1;
      v2683 = v955;
      v2681 = v952;
      v956 = operator new();
      Direct::Direct(v956, v950, v950, 0);
      if (v954 < 2)
      {
        v958 = 2;
        if ((unint64_t)(((char *)v955 - (char *)v952) >> 2) > 2)
          v958 = ((char *)v955 - (char *)v952) >> 2;
        if ((unint64_t)((char *)v955 - (char *)v952) >= 0x7FFFFFFFFFFFFFF8)
          v959 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v959 = v958;
        if (v959)
          v959 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v959);
        else
          v960 = 0;
        v1497 = 0;
        v1498 = v959 + 8;
        v1499 = v959 + 8 * v960;
        *(_QWORD *)(v959 + 8) = v956;
        v957 = (_QWORD *)(v959 + 16);
        do
        {
          *(_QWORD *)(v959 + v1497 * 8) = v952[v1497];
          --v1497;
        }
        while (v1497 != -1);
        v1500 = v2681;
        v2681 = (void *)(v1498 - 8);
        v2683 = (_QWORD *)v1499;
        if (v1500)
          operator delete(v1500);
      }
      else
      {
        v952[1] = v956;
        v957 = v952 + 2;
      }
      v2682 = v957;
      v1501 = (char **)operator new();
      Parallel::Parallel(v1501, (uint64_t)&v2681);
      v1503 = *(char ****)(v2366 + 112);
      v1502 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1503 >= v1502)
      {
        v1505 = *(_QWORD *)(v2366 + 104);
        v1506 = ((uint64_t)v1503 - v1505) >> 3;
        if ((unint64_t)(v1506 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1507 = v1502 - v1505;
        v1508 = v1507 >> 2;
        if (v1507 >> 2 <= (unint64_t)(v1506 + 1))
          v1508 = v1506 + 1;
        if ((unint64_t)v1507 >= 0x7FFFFFFFFFFFFFF8)
          v1509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1509 = v1508;
        if (v1509)
          v1509 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1509);
        else
          v1510 = 0;
        v1698 = (char ***)(v1509 + 8 * v1506);
        v1699 = v1509 + 8 * v1510;
        *v1698 = v1501;
        v1504 = v1698 + 1;
        v1701 = *(char **)(v2366 + 104);
        v1700 = *(char **)(v2366 + 112);
        if (v1700 == v1701)
        {
          v1703 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1702 = (char **)*((_QWORD *)v1700 - 1);
            v1700 -= 8;
            *--v1698 = v1702;
          }
          while (v1700 != v1701);
          v1703 = (_QWORD *)v2366;
          v1700 = *(char **)(v2366 + 104);
        }
        v1703[13] = v1698;
        v1703[14] = v1504;
        v1703[15] = v1699;
        if (v1700)
          operator delete(v1700);
      }
      else
      {
        *v1503 = v1501;
        v1504 = v1503 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1504;
      v1723 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1504 - 1) + 272))(*(v1504 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1724 = operator new();
      FullLayer<short>::FullLayer(v1724, v1723, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1725 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1727 = v1726;
      *v1725 = v1724;
      v1728 = (char *)&v1725[v1726];
      v2455 = v1728;
      v2453 = v1725;
      v2454 = v1725 + 1;
      v1729 = operator new();
      Direct::Direct(v1729, v1723, v1723, 0);
      if (v1727 < 2)
      {
        v1731 = 2;
        if ((unint64_t)((v1728 - (char *)v1725) >> 2) > 2)
          v1731 = (v1728 - (char *)v1725) >> 2;
        if ((unint64_t)(v1728 - (char *)v1725) >= 0x7FFFFFFFFFFFFFF8)
          v1732 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1732 = v1731;
        if (v1732)
          v1732 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1732);
        else
          v1733 = 0;
        v1845 = 0;
        v1846 = v1732 + 8;
        v1847 = v1732 + 8 * v1733;
        *(_QWORD *)(v1732 + 8) = v1729;
        v1730 = (_QWORD *)(v1732 + 16);
        do
        {
          *(_QWORD *)(v1732 + v1845 * 8) = v1725[v1845];
          --v1845;
        }
        while (v1845 != -1);
        v1848 = v2453;
        v2453 = (void *)(v1846 - 8);
        v2455 = (char *)v1847;
        if (v1848)
          operator delete(v1848);
      }
      else
      {
        v1725[1] = v1729;
        v1730 = v1725 + 2;
      }
      v2454 = v1730;
      v1849 = (char **)operator new();
      Parallel::Parallel(v1849, (uint64_t)&v2453);
      v1851 = *(char ****)(v2366 + 112);
      v1850 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1851 >= v1850)
      {
        v1853 = *(_QWORD *)(v2366 + 104);
        v1854 = ((uint64_t)v1851 - v1853) >> 3;
        if ((unint64_t)(v1854 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1855 = v1850 - v1853;
        v1856 = v1855 >> 2;
        if (v1855 >> 2 <= (unint64_t)(v1854 + 1))
          v1856 = v1854 + 1;
        if ((unint64_t)v1855 >= 0x7FFFFFFFFFFFFFF8)
          v1857 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1857 = v1856;
        if (v1857)
          v1857 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1857);
        else
          v1858 = 0;
        v1938 = (char ***)(v1857 + 8 * v1854);
        v1939 = v1857 + 8 * v1858;
        *v1938 = v1849;
        v1852 = v1938 + 1;
        v1941 = *(char **)(v2366 + 104);
        v1940 = *(char **)(v2366 + 112);
        if (v1940 == v1941)
        {
          v1943 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1942 = (char **)*((_QWORD *)v1940 - 1);
            v1940 -= 8;
            *--v1938 = v1942;
          }
          while (v1940 != v1941);
          v1943 = (_QWORD *)v2366;
          v1940 = *(char **)(v2366 + 104);
        }
        v1943[13] = v1938;
        v1943[14] = v1852;
        v1943[15] = v1939;
        if (v1940)
          operator delete(v1940);
      }
      else
      {
        *v1851 = v1849;
        v1852 = v1851 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1852;
      v1969 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1852 - 1) + 272))(*(v1852 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1970 = operator new();
      FullLayer<short>::FullLayer(v1970, v1969, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1971 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1973 = v1972;
      *v1971 = v1970;
      v1974 = (char *)&v1971[v1972];
      v2449 = v1974;
      v2447 = v1971;
      v2448 = v1971 + 1;
      v1975 = operator new();
      Direct::Direct(v1975, v1969, v1969, 0);
      if (v1973 < 2)
      {
        v1977 = 2;
        if ((unint64_t)((v1974 - (char *)v1971) >> 2) > 2)
          v1977 = (v1974 - (char *)v1971) >> 2;
        if ((unint64_t)(v1974 - (char *)v1971) >= 0x7FFFFFFFFFFFFFF8)
          v1978 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1978 = v1977;
        if (v1978)
          v1978 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1978);
        else
          v1979 = 0;
        v2047 = 0;
        v2048 = v1978 + 8;
        v2049 = v1978 + 8 * v1979;
        *(_QWORD *)(v1978 + 8) = v1975;
        v1976 = (_QWORD *)(v1978 + 16);
        do
        {
          *(_QWORD *)(v1978 + v2047 * 8) = v1971[v2047];
          --v2047;
        }
        while (v2047 != -1);
        v2050 = v2447;
        v2447 = (void *)(v2048 - 8);
        v2449 = (char *)v2049;
        if (v2050)
          operator delete(v2050);
      }
      else
      {
        v1971[1] = v1975;
        v1976 = v1971 + 2;
      }
      v2448 = v1976;
      v2051 = (char **)operator new();
      Parallel::Parallel(v2051, (uint64_t)&v2447);
      v2053 = *(char ****)(v2366 + 112);
      v2052 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2053 >= v2052)
      {
        v2055 = *(_QWORD *)(v2366 + 104);
        v2056 = ((uint64_t)v2053 - v2055) >> 3;
        if ((unint64_t)(v2056 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2057 = v2052 - v2055;
        v2058 = v2057 >> 2;
        if (v2057 >> 2 <= (unint64_t)(v2056 + 1))
          v2058 = v2056 + 1;
        if ((unint64_t)v2057 >= 0x7FFFFFFFFFFFFFF8)
          v2059 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2059 = v2058;
        if (v2059)
          v2059 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2059);
        else
          v2060 = 0;
        v2072 = (char ***)(v2059 + 8 * v2056);
        v2073 = v2059 + 8 * v2060;
        *v2072 = v2051;
        v2054 = v2072 + 1;
        v2075 = *(char **)(v2366 + 104);
        v2074 = *(char **)(v2366 + 112);
        if (v2074 == v2075)
        {
          v2077 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2076 = (char **)*((_QWORD *)v2074 - 1);
            v2074 -= 8;
            *--v2072 = v2076;
          }
          while (v2074 != v2075);
          v2077 = (_QWORD *)v2366;
          v2074 = *(char **)(v2366 + 104);
        }
        v2077[13] = v2072;
        v2077[14] = v2054;
        v2077[15] = v2073;
        if (v2074)
          operator delete(v2074);
      }
      else
      {
        *v2053 = v2051;
        v2054 = v2053 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2054;
      v2119 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2054 - 1) + 272))(*(v2054 - 1));
      v2120 = operator new();
      v2121 = *(_DWORD *)(v2366 + 4);
      v2440 = 0;
      v2438 = 0;
      v2439 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2438, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v2120, v2119, v2121, &v2438, 0, a2, 1, 0, 0);
      v2123 = *(uint64_t **)(v2366 + 112);
      v2122 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2123 >= v2122)
      {
        v2125 = *(_QWORD *)(v2366 + 104);
        v2126 = ((uint64_t)v2123 - v2125) >> 3;
        if ((unint64_t)(v2126 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2127 = v2122 - v2125;
        v2128 = v2127 >> 2;
        if (v2127 >> 2 <= (unint64_t)(v2126 + 1))
          v2128 = v2126 + 1;
        if ((unint64_t)v2127 >= 0x7FFFFFFFFFFFFFF8)
          v2129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2129 = v2128;
        if (v2129)
          v2129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2129);
        else
          v2130 = 0;
        v2152 = (uint64_t *)(v2129 + 8 * v2126);
        v2153 = v2129 + 8 * v2130;
        *v2152 = v2120;
        v2124 = v2152 + 1;
        v2155 = *(char **)(v2366 + 104);
        v2154 = *(char **)(v2366 + 112);
        if (v2154 == v2155)
        {
          v2157 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2156 = *((_QWORD *)v2154 - 1);
            v2154 -= 8;
            *--v2152 = v2156;
          }
          while (v2154 != v2155);
          v2157 = (_QWORD *)v2366;
          v2154 = *(char **)(v2366 + 104);
        }
        v2157[13] = v2152;
        v2157[14] = v2124;
        v2157[15] = v2153;
        if (v2154)
          operator delete(v2154);
      }
      else
      {
        *v2123 = v2120;
        v2124 = v2123 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2124;
      v2158 = v2438;
      if (!v2438)
        goto LABEL_2404;
      v2439 = v2438;
LABEL_2403:
      operator delete(v2158);
LABEL_2404:
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
LABEL_2408:
      v1324 = (uint64_t *)v2681;
      if (!v2681)
        goto LABEL_2421;
      goto LABEL_2420;
    case 46:
      v73 = operator new();
      FullLayer<short>::FullLayer(v73, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 3, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v75 = v74;
      *v40 = v73;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 272))(v73);
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v77 = operator new();
      FullLayer<short>::FullLayer(v77, v76, *(_DWORD *)(a1 + 4), 3, 0, a2, 1, 0);
      v78 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v80 = v79;
      *v78 = v77;
      v81 = &v78[v79];
      v2682 = v78 + 1;
      v2683 = v81;
      v2681 = v78;
      v82 = operator new();
      Direct::Direct(v82, v76, v76, 0);
      if (v80 < 2)
      {
        v673 = 2;
        if ((unint64_t)(((char *)v81 - (char *)v78) >> 2) > 2)
          v673 = ((char *)v81 - (char *)v78) >> 2;
        if ((unint64_t)((char *)v81 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8)
          v674 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v674 = v673;
        if (v674)
          v674 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v674);
        else
          v675 = 0;
        v1511 = 0;
        v1512 = v674 + 8;
        v1513 = v674 + 8 * v675;
        *(_QWORD *)(v674 + 8) = v82;
        v83 = (_QWORD *)(v674 + 16);
        do
        {
          *(_QWORD *)(v674 + v1511 * 8) = v78[v1511];
          --v1511;
        }
        while (v1511 != -1);
        v1514 = v2681;
        v2681 = (void *)(v1512 - 8);
        v2683 = (_QWORD *)v1513;
        if (v1514)
          operator delete(v1514);
      }
      else
      {
        v78[1] = v82;
        v83 = v78 + 2;
      }
      v2682 = v83;
      v1515 = (char **)operator new();
      Parallel::Parallel(v1515, (uint64_t)&v2681);
      v1516 = (char *)&v40[v75];
      if (v75 < 2)
      {
        v1518 = 2;
        if ((unint64_t)((8 * v75) >> 2) > 2)
          v1518 = (8 * v75) >> 2;
        if ((unint64_t)(8 * v75) >= 0x7FFFFFFFFFFFFFF8)
          v1519 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1519 = v1518;
        if (v1519)
          v1519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1519);
        else
          v1520 = 0;
        v1704 = 0;
        v1516 = (char *)(v1519 + 8 * v1520);
        *(_QWORD *)(v1519 + 8) = v1515;
        v1517 = (char ***)(v1519 + 16);
        do
        {
          *(_QWORD *)(v1519 + v1704 * 8) = v40[v1704];
          --v1704;
        }
        while (v1704 != -1);
        v1705 = (uint64_t *)v1519;
        operator delete(v40);
        v40 = v1705;
      }
      else
      {
        v40[1] = (uint64_t)v1515;
        v1517 = (char ***)(v40 + 2);
      }
      v1706 = (*((uint64_t (**)(_QWORD))**(v1517 - 1) + 34))(*(v1517 - 1));
      v2454 = 0;
      v2453 = 0;
      v2455 = 0;
      v1707 = operator new();
      FullLayer<short>::FullLayer(v1707, v1706, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1708 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1710 = v1709;
      *v1708 = v1707;
      v1711 = (char *)&v1708[v1709];
      v2455 = v1711;
      v2453 = v1708;
      v2454 = v1708 + 1;
      v1712 = operator new();
      Direct::Direct(v1712, v1706, v1706, 0);
      if (v1710 < 2)
      {
        v1714 = 2;
        if ((unint64_t)((v1711 - (char *)v1708) >> 2) > 2)
          v1714 = (v1711 - (char *)v1708) >> 2;
        if ((unint64_t)(v1711 - (char *)v1708) >= 0x7FFFFFFFFFFFFFF8)
          v1715 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1715 = v1714;
        if (v1715)
          v1715 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1715);
        else
          v1716 = 0;
        v1871 = 0;
        v1872 = v1715 + 8;
        v1873 = v1715 + 8 * v1716;
        *(_QWORD *)(v1715 + 8) = v1712;
        v1713 = (_QWORD *)(v1715 + 16);
        do
        {
          *(_QWORD *)(v1715 + v1871 * 8) = v1708[v1871];
          --v1871;
        }
        while (v1871 != -1);
        v1874 = v2453;
        v2453 = (void *)(v1872 - 8);
        v2455 = (char *)v1873;
        if (v1874)
          operator delete(v1874);
      }
      else
      {
        v1708[1] = v1712;
        v1713 = v1708 + 2;
      }
      v2454 = v1713;
      v1875 = (char **)operator new();
      Parallel::Parallel(v1875, (uint64_t)&v2453);
      if (v1517 >= (char ***)v1516)
      {
        v1877 = ((char *)v1517 - (char *)v40) >> 3;
        v1878 = v1877 + 1;
        if ((unint64_t)(v1877 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v1878)
          v1878 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v1879 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1879 = v1878;
        if (v1879)
          v1879 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1879);
        else
          v1880 = 0;
        v1956 = (char ***)(v1879 + 8 * v1877);
        v1516 = (char *)(v1879 + 8 * v1880);
        *v1956 = v1875;
        v1876 = v1956 + 1;
        while (v1517 != (char ***)v40)
        {
          v1957 = *--v1517;
          *--v1956 = v1957;
        }
        operator delete(v40);
        v40 = (uint64_t *)v1956;
      }
      else
      {
        *v1517 = v1875;
        v1876 = v1517 + 1;
      }
      v1958 = (*((uint64_t (**)(_QWORD))**(v1876 - 1) + 34))(*(v1876 - 1));
      v2448 = 0;
      v2447 = 0;
      v2449 = 0;
      v1959 = operator new();
      FullLayer<short>::FullLayer(v1959, v1958, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v1960 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v1962 = v1961;
      *v1960 = v1959;
      v1963 = (char *)&v1960[v1961];
      v2449 = v1963;
      v2447 = v1960;
      v2448 = v1960 + 1;
      v1964 = operator new();
      Direct::Direct(v1964, v1958, v1958, 0);
      if (v1962 < 2)
      {
        v1966 = 2;
        if ((unint64_t)((v1963 - (char *)v1960) >> 2) > 2)
          v1966 = (v1963 - (char *)v1960) >> 2;
        if ((unint64_t)(v1963 - (char *)v1960) >= 0x7FFFFFFFFFFFFFF8)
          v1967 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1967 = v1966;
        if (v1967)
          v1967 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1967);
        else
          v1968 = 0;
        v2061 = 0;
        v2062 = v1967 + 8;
        v2063 = v1967 + 8 * v1968;
        *(_QWORD *)(v1967 + 8) = v1964;
        v1965 = (_QWORD *)(v1967 + 16);
        do
        {
          *(_QWORD *)(v1967 + v2061 * 8) = v1960[v2061];
          --v2061;
        }
        while (v2061 != -1);
        v2064 = v2447;
        v2447 = (void *)(v2062 - 8);
        v2449 = (char *)v2063;
        if (v2064)
          operator delete(v2064);
      }
      else
      {
        v1960[1] = v1964;
        v1965 = v1960 + 2;
      }
      v2448 = v1965;
      v2065 = (char **)operator new();
      Parallel::Parallel(v2065, (uint64_t)&v2447);
      if (v1876 >= (char ***)v1516)
      {
        v2067 = ((char *)v1876 - (char *)v40) >> 3;
        v2068 = v2067 + 1;
        if ((unint64_t)(v2067 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2068)
          v2068 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2069 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2069 = v2068;
        if (v2069)
          v2069 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2069);
        else
          v2070 = 0;
        v2078 = (char ***)(v2069 + 8 * v2067);
        v1516 = (char *)(v2069 + 8 * v2070);
        *v2078 = v2065;
        v2066 = (uint64_t *)(v2078 + 1);
        while (v1876 != (char ***)v40)
        {
          v2079 = *--v1876;
          *--v2078 = v2079;
        }
        operator delete(v40);
        v40 = (uint64_t *)v2078;
      }
      else
      {
        *v1876 = v2065;
        v2066 = (uint64_t *)(v1876 + 1);
      }
      v2080 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2066 - 1) + 272))(*(v2066 - 1));
      v2081 = operator new();
      v2082 = *(_DWORD *)(v2366 + 4);
      v2437 = 0;
      v2435 = 0;
      v2436 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2435, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v2081, v2080, v2082, (_DWORD **)&v2435, 0, a2, 1, 0, 0);
      if (v2066 >= (uint64_t *)v1516)
      {
        v2084 = v2066 - v40;
        v2085 = v2084 + 1;
        if ((unint64_t)(v2084 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v1516 - (char *)v40) >> 2 > v2085)
          v2085 = (v1516 - (char *)v40) >> 2;
        if ((unint64_t)(v1516 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v2086 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2086 = v2085;
        if (v2086)
          v2086 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2086);
        v2087 = (uint64_t *)(v2086 + 8 * v2084);
        *v2087 = v2081;
        v2083 = (uint64_t)(v2087 + 1);
        while (v2066 != v40)
        {
          v2088 = *--v2066;
          *--v2087 = v2088;
        }
        operator delete(v40);
        v40 = v2087;
      }
      else
      {
        *v2066 = v2081;
        v2083 = (uint64_t)(v2066 + 1);
      }
      if (v2435)
      {
        v2436 = v2435;
        operator delete(v2435);
      }
      v2089 = operator new();
      v2433 = 0;
      v2432 = 0;
      v2434 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2432, v40, v2083, (v2083 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v2089, (uint64_t)&v2432);
      if (v2432)
      {
        v2433 = v2432;
        operator delete(v2432);
      }
      v2090 = operator new();
      FullLayer<short>::FullLayer(v2090, *(_DWORD *)v2366, *(_DWORD *)(v2366 + 4), 3, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v2091 = (char ***)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2093 = v2092;
      *v2091 = (char **)v2090;
      v2094 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2090 + 272))(v2090);
      v2430 = 0;
      v2429 = 0;
      v2431 = 0;
      v2095 = operator new();
      FullLayer<short>::FullLayer(v2095, v2094, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2096 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2098 = v2097;
      *v2096 = v2095;
      v2099 = (char *)&v2096[v2097];
      v2431 = v2099;
      v2429 = v2096;
      v2430 = v2096 + 1;
      v2100 = operator new();
      Direct::Direct(v2100, v2094, v2094, 0);
      if (v2098 < 2)
      {
        v2102 = 2;
        if ((unint64_t)((v2099 - (char *)v2096) >> 2) > 2)
          v2102 = (v2099 - (char *)v2096) >> 2;
        if ((unint64_t)(v2099 - (char *)v2096) >= 0x7FFFFFFFFFFFFFF8)
          v2103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2103 = v2102;
        if (v2103)
          v2103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2103);
        else
          v2104 = 0;
        v2264 = 0;
        v2265 = v2103 + 8;
        v2266 = v2103 + 8 * v2104;
        *(_QWORD *)(v2103 + 8) = v2100;
        v2101 = (_QWORD *)(v2103 + 16);
        do
        {
          *(_QWORD *)(v2103 + v2264 * 8) = v2096[v2264];
          --v2264;
        }
        while (v2264 != -1);
        v2267 = v2429;
        v2429 = (void *)(v2265 - 8);
        v2431 = (char *)v2266;
        if (v2267)
          operator delete(v2267);
      }
      else
      {
        v2096[1] = v2100;
        v2101 = v2096 + 2;
      }
      v2430 = v2101;
      v2268 = (char **)operator new();
      Parallel::Parallel(v2268, (uint64_t)&v2429);
      v2269 = (char *)&v2091[v2093];
      if (v2093 < 2)
      {
        v2271 = 2;
        if ((unint64_t)((8 * v2093) >> 2) > 2)
          v2271 = (8 * v2093) >> 2;
        if ((unint64_t)(8 * v2093) >= 0x7FFFFFFFFFFFFFF8)
          v2272 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2272 = v2271;
        if (v2272)
          v2272 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2272);
        else
          v2273 = 0;
        v2274 = 0;
        v2269 = (char *)(v2272 + 8 * v2273);
        *(_QWORD *)(v2272 + 8) = v2268;
        v2270 = (char ***)(v2272 + 16);
        do
        {
          *(_QWORD *)(v2272 + v2274 * 8) = v2091[v2274];
          --v2274;
        }
        while (v2274 != -1);
        v2275 = (char ***)v2272;
        operator delete(v2091);
        v2091 = v2275;
      }
      else
      {
        v2091[1] = v2268;
        v2270 = v2091 + 2;
      }
      v2276 = (*((uint64_t (**)(_QWORD))**(v2270 - 1) + 34))(*(v2270 - 1));
      v2427 = 0;
      v2426 = 0;
      v2428 = 0;
      v2277 = operator new();
      FullLayer<short>::FullLayer(v2277, v2276, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2278 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2280 = v2279;
      v2356 = (std::vector<int> *)v2089;
      *v2278 = v2277;
      v2281 = (char *)&v2278[v2279];
      v2428 = v2281;
      v2426 = v2278;
      v2427 = v2278 + 1;
      v2282 = operator new();
      Direct::Direct(v2282, v2276, v2276, 0);
      if (v2280 < 2)
      {
        v2284 = 2;
        if ((unint64_t)((v2281 - (char *)v2278) >> 2) > 2)
          v2284 = (v2281 - (char *)v2278) >> 2;
        if ((unint64_t)(v2281 - (char *)v2278) >= 0x7FFFFFFFFFFFFFF8)
          v2285 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2285 = v2284;
        if (v2285)
          v2285 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2285);
        else
          v2286 = 0;
        v2287 = 0;
        v2288 = v2285 + 8;
        v2289 = v2285 + 8 * v2286;
        *(_QWORD *)(v2285 + 8) = v2282;
        v2283 = (_QWORD *)(v2285 + 16);
        do
        {
          *(_QWORD *)(v2285 + v2287 * 8) = v2278[v2287];
          --v2287;
        }
        while (v2287 != -1);
        v2290 = v2426;
        v2426 = (void *)(v2288 - 8);
        v2428 = (char *)v2289;
        if (v2290)
          operator delete(v2290);
      }
      else
      {
        v2278[1] = v2282;
        v2283 = v2278 + 2;
      }
      v2427 = v2283;
      v2291 = (char **)operator new();
      Parallel::Parallel(v2291, (uint64_t)&v2426);
      if (v2270 >= (char ***)v2269)
      {
        v2293 = v2270 - v2091;
        v2294 = v2293 + 1;
        if ((unint64_t)(v2293 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2294)
          v2294 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2295 = v2294;
        if (v2295)
          v2295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2295);
        else
          v2296 = 0;
        v2297 = (char ***)(v2295 + 8 * v2293);
        v2269 = (char *)(v2295 + 8 * v2296);
        *v2297 = v2291;
        v2292 = v2297 + 1;
        while (v2270 != v2091)
        {
          v2298 = *--v2270;
          *--v2297 = v2298;
        }
        operator delete(v2091);
        v2091 = v2297;
      }
      else
      {
        *v2270 = v2291;
        v2292 = v2270 + 1;
      }
      v2299 = (*((uint64_t (**)(_QWORD))**(v2292 - 1) + 34))(*(v2292 - 1));
      v2424 = 0;
      v2423 = 0;
      v2425 = 0;
      v2300 = operator new();
      FullLayer<short>::FullLayer(v2300, v2299, *(_DWORD *)(v2366 + 4), 3, 0, a2, 1, 0);
      v2301 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v2303 = v2302;
      *v2301 = v2300;
      v2304 = (char *)&v2301[v2302];
      v2425 = v2304;
      v2423 = v2301;
      v2424 = v2301 + 1;
      v2305 = operator new();
      Direct::Direct(v2305, v2299, v2299, 0);
      if (v2303 < 2)
      {
        v2307 = 2;
        if ((unint64_t)((v2304 - (char *)v2301) >> 2) > 2)
          v2307 = (v2304 - (char *)v2301) >> 2;
        if ((unint64_t)(v2304 - (char *)v2301) >= 0x7FFFFFFFFFFFFFF8)
          v2308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2308 = v2307;
        if (v2308)
          v2308 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2308);
        else
          v2309 = 0;
        v2310 = 0;
        v2311 = v2308 + 8;
        v2312 = v2308 + 8 * v2309;
        *(_QWORD *)(v2308 + 8) = v2305;
        v2306 = (_QWORD *)(v2308 + 16);
        do
        {
          *(_QWORD *)(v2308 + v2310 * 8) = v2301[v2310];
          --v2310;
        }
        while (v2310 != -1);
        v2313 = v2423;
        v2423 = (void *)(v2311 - 8);
        v2425 = (char *)v2312;
        if (v2313)
          operator delete(v2313);
      }
      else
      {
        v2301[1] = v2305;
        v2306 = v2301 + 2;
      }
      v2424 = v2306;
      v2314 = (char **)operator new();
      Parallel::Parallel(v2314, (uint64_t)&v2423);
      if (v2292 >= (char ***)v2269)
      {
        v2316 = v2292 - v2091;
        v2317 = v2316 + 1;
        if ((unint64_t)(v2316 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2317)
          v2317 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2318 = v2317;
        if (v2318)
          v2318 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2318);
        else
          v2319 = 0;
        v2320 = (char ***)(v2318 + 8 * v2316);
        v2269 = (char *)(v2318 + 8 * v2319);
        *v2320 = v2314;
        v2315 = (uint64_t *)(v2320 + 1);
        while (v2292 != v2091)
        {
          v2321 = *--v2292;
          *--v2320 = v2321;
        }
        operator delete(v2091);
        v2091 = v2320;
      }
      else
      {
        *v2292 = v2314;
        v2315 = (uint64_t *)(v2292 + 1);
      }
      v2322 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v2315 - 1) + 272))(*(v2315 - 1));
      v2323 = operator new();
      v2324 = *(_DWORD *)(v2366 + 4);
      v2422 = 0;
      v2420 = 0;
      v2421 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2420, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v2323, v2322, v2324, (_DWORD **)&v2420, 0, a2, 1, 0, 0);
      if (v2315 >= (uint64_t *)v2269)
      {
        v2326 = ((char *)v2315 - (char *)v2091) >> 3;
        v2327 = v2326 + 1;
        if ((unint64_t)(v2326 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v2269 - (char *)v2091) >> 2 > v2327)
          v2327 = (v2269 - (char *)v2091) >> 2;
        if ((unint64_t)(v2269 - (char *)v2091) >= 0x7FFFFFFFFFFFFFF8)
          v2328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2328 = v2327;
        if (v2328)
          v2328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2328);
        v2329 = (uint64_t *)(v2328 + 8 * v2326);
        *v2329 = v2323;
        v2325 = (uint64_t)(v2329 + 1);
        while (v2315 != (uint64_t *)v2091)
        {
          v2330 = *--v2315;
          *--v2329 = v2330;
        }
        operator delete(v2091);
        v2091 = (char ***)v2329;
      }
      else
      {
        *v2315 = v2323;
        v2325 = (uint64_t)(v2315 + 1);
      }
      if (v2420)
      {
        v2421 = v2420;
        operator delete(v2420);
      }
      v2331 = operator new();
      v2332 = operator new();
      v2418 = 0;
      v2417 = 0;
      v2419 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2417, v2091, v2325, (v2325 - (uint64_t)v2091) >> 3);
      Stacked::Stacked(v2332, (uint64_t)&v2417);
      Reverse::Reverse(v2331, v2332, *(_DWORD *)(v2366 + 20));
      if (v2417)
      {
        v2418 = v2417;
        operator delete(v2417);
      }
      v2333 = operator new(8uLL);
      *v2333 = v2356;
      v2334 = operator new(0x10uLL);
      v2335 = v2334 + 2;
      *v2334 = *v2333;
      v2334[1] = v2331;
      v2416[0] = v2334;
      v2416[2] = v2334 + 2;
      operator delete(v2333);
      v2416[1] = v2335;
      v2336 = (char **)operator new();
      Parallel::Parallel(v2336, (uint64_t)v2416);
      v2338 = *(char ****)(v2366 + 112);
      v2337 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v2338 >= v2337)
      {
        v2340 = *(_QWORD *)(v2366 + 104);
        v2341 = ((uint64_t)v2338 - v2340) >> 3;
        if ((unint64_t)(v2341 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2342 = v2337 - v2340;
        v2343 = v2342 >> 2;
        if (v2342 >> 2 <= (unint64_t)(v2341 + 1))
          v2343 = v2341 + 1;
        if ((unint64_t)v2342 >= 0x7FFFFFFFFFFFFFF8)
          v2344 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2344 = v2343;
        if (v2344)
          v2344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2344);
        else
          v2345 = 0;
        v2346 = (char ***)(v2344 + 8 * v2341);
        v2347 = v2344 + 8 * v2345;
        *v2346 = v2336;
        v2339 = v2346 + 1;
        v2349 = *(char **)(v2366 + 104);
        v2348 = *(char **)(v2366 + 112);
        if (v2348 == v2349)
        {
          v2351 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2350 = (char **)*((_QWORD *)v2348 - 1);
            v2348 -= 8;
            *--v2346 = v2350;
          }
          while (v2348 != v2349);
          v2351 = (_QWORD *)v2366;
          v2348 = *(char **)(v2366 + 104);
        }
        v2351[13] = v2346;
        v2351[14] = v2339;
        v2351[15] = v2347;
        if (v2348)
          operator delete(v2348);
      }
      else
      {
        *v2338 = v2336;
        v2339 = v2338 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v2339;
      if (v2416[0])
        operator delete(v2416[0]);
      if (v2423)
        operator delete(v2423);
      if (v2426)
        operator delete(v2426);
      if (v2429)
        operator delete(v2429);
      if (v2447)
        operator delete(v2447);
      if (v2453)
        operator delete(v2453);
      if (v2681)
        operator delete(v2681);
      if (v2091)
        operator delete(v2091);
      if (!v40)
        goto LABEL_2421;
      goto LABEL_2350;
    case 47:
      v37 = operator new();
      v38 = *(_DWORD *)a1;
      v39 = *(_DWORD *)(a1 + 4);
      v2415 = 0;
      __p = 0;
      v2414 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&__p, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v37, v38, v39, (_DWORD **)&__p, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v42 = v41;
      *v40 = v37;
      if (__p)
      {
        v2414 = __p;
        operator delete(__p);
      }
      v43 = operator new();
      v44 = *(_DWORD *)(a1 + 4);
      v2411 = 0;
      v2412 = 0;
      v2410 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2410, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v43, v44, v44, (_DWORD **)&v2410, 0, a2, 1, 0, 0);
      if (v42 < 2)
      {
        v630 = 2;
        if ((unint64_t)((8 * v42) >> 2) > 2)
          v630 = (8 * v42) >> 2;
        if ((unint64_t)(8 * v42) >= 0x7FFFFFFFFFFFFFF8)
          v631 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v631 = v630;
        if (v631)
          v631 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v631);
        v632 = 0;
        *(_QWORD *)(v631 + 8) = v43;
        v45 = v631 + 16;
        do
        {
          *(_QWORD *)(v631 + v632 * 8) = v40[v632];
          --v632;
        }
        while (v632 != -1);
        v633 = (uint64_t *)v631;
        operator delete(v40);
        v40 = v633;
      }
      else
      {
        v40[1] = v43;
        v45 = (uint64_t)(v40 + 2);
      }
      if (v2410)
      {
        v2411 = v2410;
        operator delete(v2410);
      }
      v634 = operator new();
      v2407 = 0;
      v2408 = 0;
      v2409 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2407, v40, v45, (v45 - (uint64_t)v40) >> 3);
      Stacked::Stacked(v634, (uint64_t)&v2407);
      if (v2407)
      {
        v2408 = v2407;
        operator delete(v2407);
      }
      v635 = operator new();
      v636 = *(_DWORD *)a1;
      v637 = *(_DWORD *)(a1 + 4);
      v2405 = 0;
      v2406 = 0;
      v2404 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2404, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v635, v636, v637, (_DWORD **)&v2404, *(_DWORD *)(a1 + 20), a2, 1, 0, 0);
      v621 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v639 = v638;
      *v621 = v635;
      if (v2404)
      {
        v2405 = v2404;
        operator delete(v2404);
      }
      v640 = operator new();
      v641 = *(_DWORD *)(a1 + 4);
      v2402 = 0;
      v2403 = 0;
      v2401 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2401, v2362, (uint64_t)v2361);
      LSTM<short>::LSTM(v640, v641, v641, (_DWORD **)&v2401, 0, a2, 1, 0, 0);
      if (v639 < 2)
      {
        v697 = 2;
        if ((unint64_t)((8 * v639) >> 2) > 2)
          v697 = (8 * v639) >> 2;
        if ((unint64_t)(8 * v639) >= 0x7FFFFFFFFFFFFFF8)
          v698 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v698 = v697;
        if (v698)
          v698 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v698);
        v699 = 0;
        *(_QWORD *)(v698 + 8) = v640;
        v642 = v698 + 16;
        do
        {
          *(_QWORD *)(v698 + v699 * 8) = v621[v699];
          --v699;
        }
        while (v699 != -1);
        v700 = (uint64_t *)v698;
        operator delete(v621);
        v621 = v700;
      }
      else
      {
        v621[1] = v640;
        v642 = (uint64_t)(v621 + 2);
      }
      if (v2401)
      {
        v2402 = v2401;
        operator delete(v2401);
      }
      v701 = operator new();
      v702 = operator new();
      v2398 = 0;
      v2399 = 0;
      v2400 = 0;
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(&v2398, v621, v642, (v642 - (uint64_t)v621) >> 3);
      Stacked::Stacked(v702, (uint64_t)&v2398);
      Reverse::Reverse(v701, v702, *(_DWORD *)(a1 + 20));
      if (v2398)
      {
        v2399 = v2398;
        operator delete(v2398);
      }
      v703 = operator new(8uLL);
      *v703 = v634;
      v704 = operator new(0x10uLL);
      v705 = v704 + 2;
      *v704 = *v703;
      v704[1] = v701;
      v2681 = v704;
      v2683 = v704 + 2;
      operator delete(v703);
      v2682 = v705;
      v688 = (char **)operator new();
      Parallel::Parallel(v688, (uint64_t)&v2681);
      v690 = *(char ****)(v2366 + 112);
      v706 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v690 < v706)
      {
LABEL_2104:
        *v690 = v688;
        v1917 = v690 + 1;
      }
      else
      {
        v707 = *(_QWORD *)(v2366 + 104);
        v708 = ((uint64_t)v690 - v707) >> 3;
        if ((unint64_t)(v708 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v709 = v706 - v707;
        v710 = v709 >> 2;
        if (v709 >> 2 <= (unint64_t)(v708 + 1))
          v710 = v708 + 1;
        if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFF8)
          v711 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v711 = v710;
        if (v711)
          v711 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v711);
        else
          v712 = 0;
        v2032 = (char ***)(v711 + 8 * v708);
        v2033 = v711 + 8 * v712;
        *v2032 = v688;
        v1917 = v2032 + 1;
        v2037 = *(char **)(v2366 + 104);
        v2034 = *(char **)(v2366 + 112);
        if (v2034 == v2037)
        {
LABEL_2344:
          v2133 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v2038 = (char **)*((_QWORD *)v2034 - 1);
            v2034 -= 8;
            *--v2032 = v2038;
          }
          while (v2034 != v2037);
LABEL_2343:
          v2133 = (_QWORD *)v2366;
          v2034 = *(char **)(v2366 + 104);
        }
        v2133[13] = v2032;
        v2133[14] = v1917;
        v2133[15] = v2033;
        if (v2034)
          operator delete(v2034);
      }
      *(_QWORD *)(v2366 + 112) = v1917;
      if (v2681)
        operator delete(v2681);
      operator delete(v621);
LABEL_2350:
      v1324 = v40;
      goto LABEL_2420;
    case 48:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v33 = operator new();
      FullLayer<short>::FullLayer(v33, *(_DWORD *)a1, *(_DWORD *)a1, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v35 = *(uint64_t **)(a1 + 112);
      v34 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v35 >= v34)
      {
        v541 = *(_QWORD *)(a1 + 104);
        v542 = ((uint64_t)v35 - v541) >> 3;
        if ((unint64_t)(v542 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v543 = v34 - v541;
        v544 = v543 >> 2;
        if (v543 >> 2 <= (unint64_t)(v542 + 1))
          v544 = v542 + 1;
        if ((unint64_t)v543 >= 0x7FFFFFFFFFFFFFF8)
          v545 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v545 = v544;
        if (v545)
          v545 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v545);
        else
          v546 = 0;
        v978 = (uint64_t *)(v545 + 8 * v542);
        v979 = v545 + 8 * v546;
        *v978 = v33;
        v36 = v978 + 1;
        v981 = *(char **)(a1 + 104);
        v980 = *(char **)(a1 + 112);
        if (v980 == v981)
        {
          v983 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v982 = *((_QWORD *)v980 - 1);
            v980 -= 8;
            *--v978 = v982;
          }
          while (v980 != v981);
          v983 = (_QWORD *)a1;
          v980 = *(char **)(a1 + 104);
        }
        v983[13] = v978;
        v983[14] = v36;
        v983[15] = v979;
        if (v980)
          operator delete(v980);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      *(_QWORD *)(a1 + 112) = v36;
      v1054 = operator new();
      BatchNormalization<short>::BatchNormalization(v1054, *(_DWORD *)a1, (__int128 *)a2);
      v1056 = *(uint64_t **)(a1 + 112);
      v1055 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1056 >= v1055)
      {
        v1058 = *(_QWORD *)(a1 + 104);
        v1059 = ((uint64_t)v1056 - v1058) >> 3;
        if ((unint64_t)(v1059 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1060 = v1055 - v1058;
        v1061 = v1060 >> 2;
        if (v1060 >> 2 <= (unint64_t)(v1059 + 1))
          v1061 = v1059 + 1;
        if ((unint64_t)v1060 >= 0x7FFFFFFFFFFFFFF8)
          v1062 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1062 = v1061;
        if (v1062)
          v1062 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1062);
        else
          v1063 = 0;
        v1191 = (uint64_t *)(v1062 + 8 * v1059);
        v1192 = v1062 + 8 * v1063;
        *v1191 = v1054;
        v1057 = v1191 + 1;
        v1194 = *(char **)(a1 + 104);
        v1193 = *(char **)(a1 + 112);
        if (v1193 == v1194)
        {
          v1196 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1195 = *((_QWORD *)v1193 - 1);
            v1193 -= 8;
            *--v1191 = v1195;
          }
          while (v1193 != v1194);
          v1196 = (_QWORD *)a1;
          v1193 = *(char **)(a1 + 104);
        }
        v1196[13] = v1191;
        v1196[14] = v1057;
        v1196[15] = v1192;
        if (v1193)
          operator delete(v1193);
      }
      else
      {
        *v1056 = v1054;
        v1057 = v1056 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1057;
      v1292 = operator new();
      v1293 = *(_DWORD *)a1;
      v1294 = *(_DWORD *)(a1 + 4);
      v2396 = 0;
      v2397 = 0;
      v2395 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2395, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v1292, v1293, v1294, (_DWORD **)&v2395, 0, a2, 1, 0, 0);
      if (v2395)
      {
        v2396 = v2395;
        operator delete(v2395);
      }
      v1295 = operator new();
      v1296 = operator new();
      v1297 = *(_DWORD *)a1;
      v1298 = *(_DWORD *)(a1 + 4);
      v2393 = 0;
      v2394 = 0;
      v2392 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2392, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v1296, v1297, v1298, (_DWORD **)&v2392, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1295, v1296, *(_DWORD *)(a1 + 20));
      if (v2392)
      {
        v2393 = v2392;
        operator delete(v2392);
      }
      v1299 = operator new(8uLL);
      *v1299 = v1292;
      v1300 = operator new(0x10uLL);
      v1301 = v1300 + 2;
      *v1300 = *v1299;
      v1300[1] = v1295;
      v2681 = v1300;
      v2683 = v1300 + 2;
      operator delete(v1299);
      v2682 = v1301;
      v1302 = (char **)operator new();
      Parallel::Parallel(v1302, (uint64_t)&v2681);
      v1304 = *(char ****)(v2366 + 112);
      v1303 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1304 >= v1303)
      {
        v1306 = *(_QWORD *)(v2366 + 104);
        v1307 = ((uint64_t)v1304 - v1306) >> 3;
        if ((unint64_t)(v1307 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1308 = v1303 - v1306;
        v1309 = v1308 >> 2;
        if (v1308 >> 2 <= (unint64_t)(v1307 + 1))
          v1309 = v1307 + 1;
        if ((unint64_t)v1308 >= 0x7FFFFFFFFFFFFFF8)
          v1310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1310 = v1309;
        if (v1310)
          v1310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1310);
        else
          v1311 = 0;
        v1865 = (char ***)(v1310 + 8 * v1307);
        v1866 = v1310 + 8 * v1311;
        *v1865 = v1302;
        v1305 = v1865 + 1;
        v1868 = *(char **)(v2366 + 104);
        v1867 = *(char **)(v2366 + 112);
        if (v1867 == v1868)
        {
          v1870 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1869 = (char **)*((_QWORD *)v1867 - 1);
            v1867 -= 8;
            *--v1865 = v1869;
          }
          while (v1867 != v1868);
          v1870 = (_QWORD *)v2366;
          v1867 = *(char **)(v2366 + 104);
        }
        v1870[13] = v1865;
        v1870[14] = v1305;
        v1870[15] = v1866;
        if (v1867)
          operator delete(v1867);
      }
      else
      {
        *v1304 = v1302;
        v1305 = v1304 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1305;
      if (v2681)
        operator delete(v2681);
      v1891 = operator new();
      FullLayer<short>::FullLayer(v1891, 2 * *(_DWORD *)(v2366 + 4), *(_DWORD *)(v2366 + 4), 0, *(_DWORD *)(v2366 + 20), a2, 1, 0);
      v1893 = *(uint64_t **)(v2366 + 112);
      v1892 = *(_QWORD *)(v2366 + 120);
      if ((unint64_t)v1893 >= v1892)
      {
        v1895 = *(_QWORD *)(v2366 + 104);
        v1896 = ((uint64_t)v1893 - v1895) >> 3;
        if ((unint64_t)(v1896 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1897 = v1892 - v1895;
        v1898 = v1897 >> 2;
        if (v1897 >> 2 <= (unint64_t)(v1896 + 1))
          v1898 = v1896 + 1;
        if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFF8)
          v1899 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1899 = v1898;
        if (v1899)
          v1899 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1899);
        else
          v1900 = 0;
        v1950 = (uint64_t *)(v1899 + 8 * v1896);
        v1951 = v1899 + 8 * v1900;
        *v1950 = v1891;
        v1894 = v1950 + 1;
        v1953 = *(char **)(v2366 + 104);
        v1952 = *(char **)(v2366 + 112);
        if (v1952 == v1953)
        {
          v1955 = (_QWORD *)v2366;
        }
        else
        {
          do
          {
            v1954 = *((_QWORD *)v1952 - 1);
            v1952 -= 8;
            *--v1950 = v1954;
          }
          while (v1952 != v1953);
          v1955 = (_QWORD *)v2366;
          v1952 = *(char **)(v2366 + 104);
        }
        v1955[13] = v1950;
        v1955[14] = v1894;
        v1955[15] = v1951;
        if (v1952)
          operator delete(v1952);
      }
      else
      {
        *v1893 = v1891;
        v1894 = v1893 + 1;
      }
      *(_QWORD *)(v2366 + 112) = v1894;
      goto LABEL_2419;
    case 49:
      goto LABEL_12;
    case 50:
    case 52:
      if (v5 == 50)
        v13 = 27;
      else
        v13 = 101;
LABEL_12:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v15 = operator new();
      FullLayer<short>::FullLayer(v15, *(_DWORD *)a1, v13, 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v17 = *(uint64_t **)(a1 + 112);
      v16 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD *)(a1 + 104);
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
        else
          v24 = 0;
        v341 = (uint64_t *)(v23 + 8 * v20);
        v342 = v23 + 8 * v24;
        *v341 = v15;
        v18 = v341 + 1;
        v344 = *(char **)(a1 + 104);
        v343 = *(char **)(a1 + 112);
        if (v343 == v344)
        {
          v346 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v345 = *((_QWORD *)v343 - 1);
            v343 -= 8;
            *--v341 = v345;
          }
          while (v343 != v344);
          v346 = (_QWORD *)a1;
          v343 = *(char **)(a1 + 104);
        }
        v346[13] = v341;
        v346[14] = v18;
        v346[15] = v342;
        if (v343)
          operator delete(v343);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a1 + 112) = v18;
      v347 = operator new();
      BatchNormalization<short>::BatchNormalization(v347, v13, (__int128 *)a2);
      v349 = *(uint64_t **)(a1 + 112);
      v348 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v349 >= v348)
      {
        v351 = *(_QWORD *)(a1 + 104);
        v352 = ((uint64_t)v349 - v351) >> 3;
        if ((unint64_t)(v352 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v353 = v348 - v351;
        v354 = v353 >> 2;
        if (v353 >> 2 <= (unint64_t)(v352 + 1))
          v354 = v352 + 1;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v355 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v355 = v354;
        if (v355)
          v355 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v355);
        else
          v356 = 0;
        v357 = (uint64_t *)(v355 + 8 * v352);
        v358 = v355 + 8 * v356;
        *v357 = v347;
        v350 = v357 + 1;
        v360 = *(char **)(a1 + 104);
        v359 = *(char **)(a1 + 112);
        if (v359 == v360)
        {
          v362 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v361 = *((_QWORD *)v359 - 1);
            v359 -= 8;
            *--v357 = v361;
          }
          while (v359 != v360);
          v362 = (_QWORD *)a1;
          v359 = *(char **)(a1 + 104);
        }
        v362[13] = v357;
        v362[14] = v350;
        v362[15] = v358;
        if (v359)
          operator delete(v359);
      }
      else
      {
        *v349 = v347;
        v350 = v349 + 1;
      }
      *(_QWORD *)(a1 + 112) = v350;
      v363 = operator new();
      v364 = *(_DWORD *)(a1 + 4);
      v2390 = 0;
      v2391 = 0;
      v2389 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2389, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v363, v13, v364, (_DWORD **)&v2389, 0, a2, 1, 0, 0);
      if (v2389)
      {
        v2390 = v2389;
        operator delete(v2389);
      }
      v365 = operator new();
      v366 = operator new();
      v367 = *(_DWORD *)(a1 + 4);
      v2387 = 0;
      v2388 = 0;
      v2386 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2386, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v366, v13, v367, (_DWORD **)&v2386, 0, a2, 1, 0, 0);
      Reverse::Reverse(v365, v366, *(_DWORD *)(a1 + 20));
      if (v2386)
      {
        v2387 = v2386;
        operator delete(v2386);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v368 = operator new(8uLL);
      *v368 = v363;
      v2681 = v368;
      v369 = operator new(0x10uLL);
      v370 = v369 + 2;
      *v369 = *v368;
      v369[1] = v365;
      v2681 = v369;
      v2683 = v369 + 2;
      operator delete(v368);
      v2682 = v370;
      v371 = (char **)operator new();
      Parallel::Parallel(v371, (uint64_t)&v2681);
      v373 = *(char ****)(a1 + 112);
      v372 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v373 >= v372)
      {
        v375 = *(_QWORD *)(a1 + 104);
        v376 = ((uint64_t)v373 - v375) >> 3;
        if ((unint64_t)(v376 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v377 = v372 - v375;
        v378 = v377 >> 2;
        if (v377 >> 2 <= (unint64_t)(v376 + 1))
          v378 = v376 + 1;
        if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
          v379 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v379);
        else
          v380 = 0;
        v381 = (char ***)(v379 + 8 * v376);
        v382 = v379 + 8 * v380;
        *v381 = v371;
        v374 = v381 + 1;
        v384 = *(char **)(a1 + 104);
        v383 = *(char **)(a1 + 112);
        if (v383 == v384)
        {
          v386 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v385 = (char **)*((_QWORD *)v383 - 1);
            v383 -= 8;
            *--v381 = v385;
          }
          while (v383 != v384);
          v386 = (_QWORD *)a1;
          v383 = *(char **)(a1 + 104);
        }
        v386[13] = v381;
        v386[14] = v374;
        v386[15] = v382;
        if (v383)
          operator delete(v383);
      }
      else
      {
        *v373 = v371;
        v374 = v373 + 1;
      }
      *(_QWORD *)(a1 + 112) = v374;
      v387 = operator new();
      FullLayer<short>::FullLayer(v387, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v389 = *(uint64_t **)(a1 + 112);
      v388 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v389 >= v388)
      {
        v391 = *(_QWORD *)(a1 + 104);
        v392 = ((uint64_t)v389 - v391) >> 3;
        if ((unint64_t)(v392 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v393 = v388 - v391;
        v394 = v393 >> 2;
        if (v393 >> 2 <= (unint64_t)(v392 + 1))
          v394 = v392 + 1;
        if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF8)
          v395 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v395 = v394;
        if (v395)
          v395 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v395);
        else
          v396 = 0;
        v397 = (uint64_t *)(v395 + 8 * v392);
        v398 = v395 + 8 * v396;
        *v397 = v387;
        v390 = v397 + 1;
        v400 = *(char **)(a1 + 104);
        v399 = *(char **)(a1 + 112);
        if (v399 == v400)
        {
          v402 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v401 = *((_QWORD *)v399 - 1);
            v399 -= 8;
            *--v397 = v401;
          }
          while (v399 != v400);
          v402 = (_QWORD *)a1;
          v399 = *(char **)(a1 + 104);
        }
        v402[13] = v397;
        v402[14] = v390;
        v402[15] = v398;
        if (v399)
          operator delete(v399);
      }
      else
      {
        *v389 = v387;
        v390 = v389 + 1;
      }
      *(_QWORD *)(a1 + 112) = v390;
      if (v2681)
        operator delete(v2681);
      v403 = operator new();
      BatchNormalization<short>::BatchNormalization(v403, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v405 = *(uint64_t **)(a1 + 112);
      v404 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v405 >= v404)
      {
        v407 = *(_QWORD *)(a1 + 104);
        v408 = ((uint64_t)v405 - v407) >> 3;
        if ((unint64_t)(v408 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v409 = v404 - v407;
        v410 = v409 >> 2;
        if (v409 >> 2 <= (unint64_t)(v408 + 1))
          v410 = v408 + 1;
        if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF8)
          v411 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v411 = v410;
        if (v411)
          v411 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v411);
        else
          v412 = 0;
        v413 = (uint64_t *)(v411 + 8 * v408);
        v414 = v411 + 8 * v412;
        *v413 = v403;
        v406 = v413 + 1;
        v416 = *(char **)(a1 + 104);
        v415 = *(char **)(a1 + 112);
        if (v415 == v416)
        {
          v418 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v417 = *((_QWORD *)v415 - 1);
            v415 -= 8;
            *--v413 = v417;
          }
          while (v415 != v416);
          v418 = (_QWORD *)a1;
          v415 = *(char **)(a1 + 104);
        }
        v418[13] = v413;
        v418[14] = v406;
        v418[15] = v414;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *v405 = v403;
        v406 = v405 + 1;
      }
      *(_QWORD *)(a1 + 112) = v406;
      v419 = operator new();
      v420 = *(_DWORD *)(a1 + 4);
      v2384 = 0;
      v2385 = 0;
      v2383 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2383, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v419, v420, v420, (_DWORD **)&v2383, 0, a2, 1, 0, 0);
      if (v2383)
      {
        v2384 = v2383;
        operator delete(v2383);
      }
      v421 = operator new();
      v422 = operator new();
      v423 = *(_DWORD *)(a1 + 4);
      v2381 = 0;
      v2382 = 0;
      v2380 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2380, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v422, v423, v423, (_DWORD **)&v2380, 0, a2, 1, 0, 0);
      Reverse::Reverse(v421, v422, *(_DWORD *)(a1 + 20));
      if (v2380)
      {
        v2381 = v2380;
        operator delete(v2380);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v424 = operator new(8uLL);
      *v424 = v419;
      v2681 = v424;
      v425 = operator new(0x10uLL);
      v426 = v425 + 2;
      *v425 = *v424;
      v425[1] = v421;
      v2681 = v425;
      v2683 = v425 + 2;
      operator delete(v424);
      v2682 = v426;
      v427 = (char **)operator new();
      Parallel::Parallel(v427, (uint64_t)&v2681);
      v429 = *(char ****)(a1 + 112);
      v428 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v429 >= v428)
      {
        v431 = *(_QWORD *)(a1 + 104);
        v432 = ((uint64_t)v429 - v431) >> 3;
        if ((unint64_t)(v432 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v433 = v428 - v431;
        v434 = v433 >> 2;
        if (v433 >> 2 <= (unint64_t)(v432 + 1))
          v434 = v432 + 1;
        if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFF8)
          v435 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v435 = v434;
        if (v435)
          v435 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v435);
        else
          v436 = 0;
        v437 = (char ***)(v435 + 8 * v432);
        v438 = v435 + 8 * v436;
        *v437 = v427;
        v430 = v437 + 1;
        v440 = *(char **)(a1 + 104);
        v439 = *(char **)(a1 + 112);
        if (v439 == v440)
        {
          v442 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v441 = (char **)*((_QWORD *)v439 - 1);
            v439 -= 8;
            *--v437 = v441;
          }
          while (v439 != v440);
          v442 = (_QWORD *)a1;
          v439 = *(char **)(a1 + 104);
        }
        v442[13] = v437;
        v442[14] = v430;
        v442[15] = v438;
        if (v439)
          operator delete(v439);
      }
      else
      {
        *v429 = v427;
        v430 = v429 + 1;
      }
      *(_QWORD *)(a1 + 112) = v430;
      v443 = operator new();
      FullLayer<short>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v444 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 < v444)
        goto LABEL_2385;
      v446 = *(_QWORD *)(a1 + 104);
      v447 = ((uint64_t)v445 - v446) >> 3;
      if ((unint64_t)(v447 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v448 = v444 - v446;
      v449 = v448 >> 2;
      if (v448 >> 2 <= (unint64_t)(v447 + 1))
        v449 = v447 + 1;
      if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
        v450 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v450 = v449;
      if (v450)
        v450 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v450);
      else
        v451 = 0;
      v452 = (uint64_t *)(v450 + 8 * v447);
      v453 = v450 + 8 * v451;
      *v452 = v443;
      v454 = v452 + 1;
      v456 = *(char **)(a1 + 104);
      v455 = *(char **)(a1 + 112);
      if (v455 == v456)
        goto LABEL_2414;
      do
      {
        v457 = *((_QWORD *)v455 - 1);
        v455 -= 8;
        *--v452 = v457;
      }
      while (v455 != v456);
      goto LABEL_2413;
    case 51:
      v14 = operator new(0xCuLL);
      *v14 = 0x200000001;
      *((_DWORD *)v14 + 2) = 2;
      v25 = operator new();
      FullLayer<short>::FullLayer(v25, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 0, 0);
      v27 = *(uint64_t **)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v27 >= v26)
      {
        v535 = *(_QWORD *)(a1 + 104);
        v536 = ((uint64_t)v27 - v535) >> 3;
        if ((unint64_t)(v536 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v537 = v26 - v535;
        v538 = v537 >> 2;
        if (v537 >> 2 <= (unint64_t)(v536 + 1))
          v538 = v536 + 1;
        if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8)
          v539 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v539 = v538;
        if (v539)
          v539 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v539);
        else
          v540 = 0;
        v972 = (uint64_t *)(v539 + 8 * v536);
        v973 = v539 + 8 * v540;
        *v972 = v25;
        v28 = v972 + 1;
        v975 = *(char **)(a1 + 104);
        v974 = *(char **)(a1 + 112);
        if (v974 == v975)
        {
          v977 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v976 = *((_QWORD *)v974 - 1);
            v974 -= 8;
            *--v972 = v976;
          }
          while (v974 != v975);
          v977 = (_QWORD *)a1;
          v974 = *(char **)(a1 + 104);
        }
        v977[13] = v972;
        v977[14] = v28;
        v977[15] = v973;
        if (v974)
          operator delete(v974);
      }
      else
      {
        *v27 = v25;
        v28 = v27 + 1;
      }
      *(_QWORD *)(a1 + 112) = v28;
      v1044 = operator new();
      BatchNormalization<short>::BatchNormalization(v1044, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1046 = *(uint64_t **)(a1 + 112);
      v1045 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1046 >= v1045)
      {
        v1048 = *(_QWORD *)(a1 + 104);
        v1049 = ((uint64_t)v1046 - v1048) >> 3;
        if ((unint64_t)(v1049 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1050 = v1045 - v1048;
        v1051 = v1050 >> 2;
        if (v1050 >> 2 <= (unint64_t)(v1049 + 1))
          v1051 = v1049 + 1;
        if ((unint64_t)v1050 >= 0x7FFFFFFFFFFFFFF8)
          v1052 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1052 = v1051;
        if (v1052)
          v1052 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1052);
        else
          v1053 = 0;
        v1179 = (uint64_t *)(v1052 + 8 * v1049);
        v1180 = v1052 + 8 * v1053;
        *v1179 = v1044;
        v1047 = v1179 + 1;
        v1182 = *(char **)(a1 + 104);
        v1181 = *(char **)(a1 + 112);
        if (v1181 == v1182)
        {
          v1184 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1183 = *((_QWORD *)v1181 - 1);
            v1181 -= 8;
            *--v1179 = v1183;
          }
          while (v1181 != v1182);
          v1184 = (_QWORD *)a1;
          v1181 = *(char **)(a1 + 104);
        }
        v1184[13] = v1179;
        v1184[14] = v1047;
        v1184[15] = v1180;
        if (v1181)
          operator delete(v1181);
      }
      else
      {
        *v1046 = v1044;
        v1047 = v1046 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1047;
      v1263 = operator new();
      v1264 = *(_DWORD *)(a1 + 4);
      v2378 = 0;
      v2379 = 0;
      v2377 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2377, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v1263, v1264, v1264, (_DWORD **)&v2377, 0, a2, 1, 0, 0);
      if (v2377)
      {
        v2378 = v2377;
        operator delete(v2377);
      }
      v1265 = operator new();
      v1266 = operator new();
      v1267 = *(_DWORD *)(a1 + 4);
      v2375 = 0;
      v2376 = 0;
      v2374 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2374, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v1266, v1267, v1267, (_DWORD **)&v2374, 0, a2, 1, 0, 0);
      Reverse::Reverse(v1265, v1266, *(_DWORD *)(a1 + 20));
      if (v2374)
      {
        v2375 = v2374;
        operator delete(v2374);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v1268 = operator new(8uLL);
      *v1268 = v1263;
      v2681 = v1268;
      v1269 = operator new(0x10uLL);
      v1270 = v1269 + 2;
      *v1269 = *v1268;
      v1269[1] = v1265;
      v2681 = v1269;
      v2683 = v1269 + 2;
      operator delete(v1268);
      v2682 = v1270;
      v1271 = (char **)operator new();
      Parallel::Parallel(v1271, (uint64_t)&v2681);
      v1273 = *(char ****)(a1 + 112);
      v1272 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1273 >= v1272)
      {
        v1275 = *(_QWORD *)(a1 + 104);
        v1276 = ((uint64_t)v1273 - v1275) >> 3;
        if ((unint64_t)(v1276 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1277 = v1272 - v1275;
        v1278 = v1277 >> 2;
        if (v1277 >> 2 <= (unint64_t)(v1276 + 1))
          v1278 = v1276 + 1;
        if ((unint64_t)v1277 >= 0x7FFFFFFFFFFFFFF8)
          v1279 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1279 = v1278;
        if (v1279)
          v1279 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1279);
        else
          v1280 = 0;
        v1859 = (char ***)(v1279 + 8 * v1276);
        v1860 = v1279 + 8 * v1280;
        *v1859 = v1271;
        v1274 = v1859 + 1;
        v1862 = *(char **)(a1 + 104);
        v1861 = *(char **)(a1 + 112);
        if (v1861 == v1862)
        {
          v1864 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1863 = (char **)*((_QWORD *)v1861 - 1);
            v1861 -= 8;
            *--v1859 = v1863;
          }
          while (v1861 != v1862);
          v1864 = (_QWORD *)a1;
          v1861 = *(char **)(a1 + 104);
        }
        v1864[13] = v1859;
        v1864[14] = v1274;
        v1864[15] = v1860;
        if (v1861)
          operator delete(v1861);
      }
      else
      {
        *v1273 = v1271;
        v1274 = v1273 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1274;
      v1881 = operator new();
      FullLayer<short>::FullLayer(v1881, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v1883 = *(uint64_t **)(a1 + 112);
      v1882 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1883 >= v1882)
      {
        v1885 = *(_QWORD *)(a1 + 104);
        v1886 = ((uint64_t)v1883 - v1885) >> 3;
        if ((unint64_t)(v1886 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1887 = v1882 - v1885;
        v1888 = v1887 >> 2;
        if (v1887 >> 2 <= (unint64_t)(v1886 + 1))
          v1888 = v1886 + 1;
        if ((unint64_t)v1887 >= 0x7FFFFFFFFFFFFFF8)
          v1889 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1889 = v1888;
        if (v1889)
          v1889 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1889);
        else
          v1890 = 0;
        v1944 = (uint64_t *)(v1889 + 8 * v1886);
        v1945 = v1889 + 8 * v1890;
        *v1944 = v1881;
        v1884 = v1944 + 1;
        v1947 = *(char **)(a1 + 104);
        v1946 = *(char **)(a1 + 112);
        if (v1946 == v1947)
        {
          v1949 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v1948 = *((_QWORD *)v1946 - 1);
            v1946 -= 8;
            *--v1944 = v1948;
          }
          while (v1946 != v1947);
          v1949 = (_QWORD *)a1;
          v1946 = *(char **)(a1 + 104);
        }
        v1949[13] = v1944;
        v1949[14] = v1884;
        v1949[15] = v1945;
        if (v1946)
          operator delete(v1946);
      }
      else
      {
        *v1883 = v1881;
        v1884 = v1883 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1884;
      if (v2681)
        operator delete(v2681);
      v1980 = operator new();
      BatchNormalization<short>::BatchNormalization(v1980, *(_DWORD *)(a1 + 4), (__int128 *)a2);
      v1982 = *(uint64_t **)(a1 + 112);
      v1981 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v1982 >= v1981)
      {
        v1984 = *(_QWORD *)(a1 + 104);
        v1985 = ((uint64_t)v1982 - v1984) >> 3;
        if ((unint64_t)(v1985 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v1986 = v1981 - v1984;
        v1987 = v1986 >> 2;
        if (v1986 >> 2 <= (unint64_t)(v1985 + 1))
          v1987 = v1985 + 1;
        if ((unint64_t)v1986 >= 0x7FFFFFFFFFFFFFF8)
          v1988 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1988 = v1987;
        if (v1988)
          v1988 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1988);
        else
          v1989 = 0;
        v2008 = (uint64_t *)(v1988 + 8 * v1985);
        v2009 = v1988 + 8 * v1989;
        *v2008 = v1980;
        v1983 = v2008 + 1;
        v2011 = *(char **)(a1 + 104);
        v2010 = *(char **)(a1 + 112);
        if (v2010 == v2011)
        {
          v2013 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2012 = *((_QWORD *)v2010 - 1);
            v2010 -= 8;
            *--v2008 = v2012;
          }
          while (v2010 != v2011);
          v2013 = (_QWORD *)a1;
          v2010 = *(char **)(a1 + 104);
        }
        v2013[13] = v2008;
        v2013[14] = v1983;
        v2013[15] = v2009;
        if (v2010)
          operator delete(v2010);
      }
      else
      {
        *v1982 = v1980;
        v1983 = v1982 + 1;
      }
      *(_QWORD *)(a1 + 112) = v1983;
      v2014 = operator new();
      v2015 = *(_DWORD *)(a1 + 4);
      v2372 = 0;
      v2373 = 0;
      v2371 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2371, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v2014, v2015, v2015, (_DWORD **)&v2371, 0, a2, 1, 0, 0);
      if (v2371)
      {
        v2372 = v2371;
        operator delete(v2371);
      }
      v2016 = operator new();
      v2017 = operator new();
      v2018 = *(_DWORD *)(a1 + 4);
      v2369 = 0;
      v2370 = 0;
      v2368 = 0;
      std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(&v2368, v14, (uint64_t)v14 + 12);
      LSTM<short>::LSTM(v2017, v2018, v2018, (_DWORD **)&v2368, 0, a2, 1, 0, 0);
      Reverse::Reverse(v2016, v2017, *(_DWORD *)(a1 + 20));
      if (v2368)
      {
        v2369 = v2368;
        operator delete(v2368);
      }
      v2681 = 0;
      v2682 = 0;
      v2683 = 0;
      v2019 = operator new(8uLL);
      *v2019 = v2014;
      v2681 = v2019;
      v2020 = operator new(0x10uLL);
      v2021 = v2020 + 2;
      *v2020 = *v2019;
      v2020[1] = v2016;
      v2681 = v2020;
      v2683 = v2020 + 2;
      operator delete(v2019);
      v2682 = v2021;
      v2022 = (char **)operator new();
      Parallel::Parallel(v2022, (uint64_t)&v2681);
      v2024 = *(char ****)(a1 + 112);
      v2023 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v2024 >= v2023)
      {
        v2026 = *(_QWORD *)(a1 + 104);
        v2027 = ((uint64_t)v2024 - v2026) >> 3;
        if ((unint64_t)(v2027 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2028 = v2023 - v2026;
        v2029 = v2028 >> 2;
        if (v2028 >> 2 <= (unint64_t)(v2027 + 1))
          v2029 = v2027 + 1;
        if ((unint64_t)v2028 >= 0x7FFFFFFFFFFFFFF8)
          v2030 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2030 = v2029;
        if (v2030)
          v2030 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2030);
        else
          v2031 = 0;
        v2159 = (char ***)(v2030 + 8 * v2027);
        v2160 = v2030 + 8 * v2031;
        *v2159 = v2022;
        v2025 = v2159 + 1;
        v2162 = *(char **)(a1 + 104);
        v2161 = *(char **)(a1 + 112);
        if (v2161 == v2162)
        {
          v2164 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2163 = (char **)*((_QWORD *)v2161 - 1);
            v2161 -= 8;
            *--v2159 = v2163;
          }
          while (v2161 != v2162);
          v2164 = (_QWORD *)a1;
          v2161 = *(char **)(a1 + 104);
        }
        v2164[13] = v2159;
        v2164[14] = v2025;
        v2164[15] = v2160;
        if (v2161)
          operator delete(v2161);
      }
      else
      {
        *v2024 = v2022;
        v2025 = v2024 + 1;
      }
      *(_QWORD *)(a1 + 112) = v2025;
      v443 = operator new();
      FullLayer<short>::FullLayer(v443, 2 * *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 4), 0, *(_DWORD *)(a1 + 20), a2, 1, 0);
      v445 = *(uint64_t **)(a1 + 112);
      v2165 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v445 >= v2165)
      {
        v2166 = *(_QWORD *)(a1 + 104);
        v2167 = ((uint64_t)v445 - v2166) >> 3;
        if ((unint64_t)(v2167 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v2168 = v2165 - v2166;
        v2169 = v2168 >> 2;
        if (v2168 >> 2 <= (unint64_t)(v2167 + 1))
          v2169 = v2167 + 1;
        if ((unint64_t)v2168 >= 0x7FFFFFFFFFFFFFF8)
          v2170 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v2170 = v2169;
        if (v2170)
          v2170 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2170);
        else
          v2171 = 0;
        v452 = (uint64_t *)(v2170 + 8 * v2167);
        v453 = v2170 + 8 * v2171;
        *v452 = v443;
        v454 = v452 + 1;
        v2178 = *(char **)(a1 + 104);
        v455 = *(char **)(a1 + 112);
        if (v455 == v2178)
        {
LABEL_2414:
          v2180 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            v2179 = *((_QWORD *)v455 - 1);
            v455 -= 8;
            *--v452 = v2179;
          }
          while (v455 != v2178);
LABEL_2413:
          v2180 = (_QWORD *)a1;
          v455 = *(char **)(a1 + 104);
        }
        v2180[13] = v452;
        v2180[14] = v454;
        v2180[15] = v453;
        if (v455)
          operator delete(v455);
      }
      else
      {
LABEL_2385:
        *v445 = v443;
        v454 = v445 + 1;
      }
      *(_QWORD *)(a1 + 112) = v454;
      v2071 = v2681;
      if (v2681)
LABEL_2418:
        operator delete(v2071);
LABEL_2419:
      v1324 = v14;
LABEL_2420:
      operator delete(v1324);
LABEL_2421:
      v154 = 1;
LABEL_2422:
      if (*(_QWORD *)(a2 + 56))
        goto LABEL_2423;
      if (*(_BYTE *)(v2366 + 16))
      {
        v2182 = *(_DWORD *)(a3 + 8);
        v2183 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2184 = operator new();
        SoftMax<short>::SoftMax(v2184, v2183, v2182, a2, v154, 0);
        v2185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
        v2187 = v2185;
        *(_QWORD *)v2185 = v2184;
        v2188 = (uint64_t)(v2185 + 8);
        if (*(int *)(a3 + 8) >= 1)
        {
          v2189 = 0;
          v2190 = v2185 + 8;
          v2191 = &v2185[8 * v2186];
          v2192 = a3;
          v2193 = v154;
          do
          {
            v2194 = *(_DWORD *)(*(_QWORD *)(v2192 + 16) + 4 * v2189);
            v2195 = operator new();
            SoftMax<short>::SoftMax(v2195, v2183, v2194, a2, v154, 0);
            if (v2190 >= v2191)
            {
              v2196 = (v2190 - v2187) >> 3;
              v2197 = v2196 + 1;
              if ((unint64_t)(v2196 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((v2191 - v2187) >> 2 > v2197)
                v2197 = (v2191 - v2187) >> 2;
              if ((unint64_t)(v2191 - v2187) >= 0x7FFFFFFFFFFFFFF8)
                v2198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v2198 = v2197;
              if (v2198)
                v2198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2198);
              else
                v2199 = 0;
              v2200 = (uint64_t *)(v2198 + 8 * v2196);
              *v2200 = v2195;
              v2188 = (uint64_t)(v2200 + 1);
              while (v2190 != v2187)
              {
                v2201 = *((_QWORD *)v2190 - 1);
                v2190 -= 8;
                *--v2200 = v2201;
              }
              v2191 = (char *)(v2198 + 8 * v2199);
              if (v2187)
                operator delete(v2187);
              v2187 = (char *)v2200;
              v154 = v2193;
            }
            else
            {
              *(_QWORD *)v2190 = v2195;
              v2188 = (uint64_t)(v2190 + 8);
            }
            ++v2189;
            v2192 = a3;
            v2190 = (char *)v2188;
          }
          while (v2189 < *(int *)(a3 + 8));
        }
        v2202 = operator new();
        v2203 = *(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8);
        *(_OWORD *)(v2202 + 16) = 0u;
        *(_QWORD *)(v2202 + 48) = 0;
        *(_OWORD *)(v2202 + 56) = 0u;
        *(_DWORD *)(v2202 + 72) = 0;
        *(_OWORD *)(v2202 + 96) = 0u;
        *(_OWORD *)(v2202 + 112) = 0u;
        *(_OWORD *)(v2202 + 128) = 0u;
        *(_OWORD *)(v2202 + 144) = 0u;
        *(_OWORD *)(v2202 + 160) = 0u;
        *(_OWORD *)(v2202 + 176) = 0u;
        *(_OWORD *)(v2202 + 192) = 0u;
        *(_OWORD *)(v2202 + 208) = 0u;
        *(_OWORD *)(v2202 + 80) = 0u;
        *(_OWORD *)(v2202 + 248) = 0u;
        *(_OWORD *)(v2202 + 232) = 0u;
        *(_OWORD *)(v2202 + 264) = 0u;
        *(_QWORD *)v2202 = off_1E2D560B0;
        *(_QWORD *)(v2202 + 8) = 0;
        v2204 = (void **)(v2202 + 352);
        *(_OWORD *)(v2202 + 280) = 0u;
        *(_OWORD *)(v2202 + 296) = 0u;
        *(_OWORD *)(v2202 + 312) = 0u;
        *(_OWORD *)(v2202 + 352) = 0u;
        *(_OWORD *)(v2202 + 368) = 0u;
        *(_OWORD *)(v2202 + 384) = 0u;
        *(_OWORD *)(v2202 + 400) = 0u;
        *(_OWORD *)(v2202 + 416) = 0u;
        *(_OWORD *)(v2202 + 432) = 0u;
        *(_OWORD *)(v2202 + 448) = 0u;
        *(_OWORD *)(v2202 + 464) = 0u;
        *(_OWORD *)(v2202 + 480) = 0u;
        *(_QWORD *)(v2202 + 496) = a3;
        *(_QWORD *)(v2202 + 520) = 0;
        *(_OWORD *)(v2202 + 504) = 0u;
        *(_QWORD *)(v2202 + 552) = 0;
        *(_OWORD *)(v2202 + 536) = 0u;
        *(_BYTE *)(v2202 + 41) = 0;
        *(_BYTE *)(v2202 + 529) = v2358;
        *(_OWORD *)(v2202 + 332) = xmmword_191A936E0;
        *(_DWORD *)(v2202 + 328) = v2357;
        *(_BYTE *)(v2202 + 528) = 0;
        std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(v2202 + 80), v2187, v2188, (v2188 - (uint64_t)v2187) >> 3);
        *(_QWORD *)(v2202 + 224) = v2203;
        std::string::basic_string[abi:ne180100]<0>(&v2681, "From constructor");
        ParallelSelector<float>::init(v2202);
        if (SHIBYTE(v2683) < 0)
          operator delete(v2681);
        *(_QWORD *)(v2202 + 264) = *(_QWORD *)(v2202 + 256);
        *(_QWORD *)(v2202 + 240) = *(_QWORD *)(v2202 + 232);
        *(_QWORD *)(v2202 + 360) = *(_QWORD *)(v2202 + 352);
        v2205 = *(_QWORD *)(v2202 + 80);
        if (*(_QWORD *)(v2202 + 88) != v2205)
        {
          v2206 = 0;
          v2207 = (void **)(v2202 + 256);
          do
          {
            v2208 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2205 + 8 * v2206) + 272))(*(_QWORD *)(v2205 + 8 * v2206));
            v2209 = v2208;
            v2211 = *(char **)(v2202 + 264);
            v2210 = *(_QWORD *)(v2202 + 272);
            if ((unint64_t)v2211 >= v2210)
            {
              v2213 = (char *)*v2207;
              v2214 = (v2211 - (_BYTE *)*v2207) >> 2;
              v2215 = v2214 + 1;
              if ((unint64_t)(v2214 + 1) >> 62)
                goto LABEL_2653;
              v2216 = v2210 - (_QWORD)v2213;
              if (v2216 >> 1 > v2215)
                v2215 = v2216 >> 1;
              if ((unint64_t)v2216 >= 0x7FFFFFFFFFFFFFFCLL)
                v2217 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v2217 = v2215;
              if (v2217)
              {
                v2217 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2217);
                v2213 = *(char **)(v2202 + 256);
                v2211 = *(char **)(v2202 + 264);
              }
              else
              {
                v2218 = 0;
              }
              v2219 = (_DWORD *)(v2217 + 4 * v2214);
              *v2219 = v2209;
              v2212 = v2219 + 1;
              while (v2211 != v2213)
              {
                v2220 = *((_DWORD *)v2211 - 1);
                v2211 -= 4;
                *--v2219 = v2220;
              }
              *(_QWORD *)(v2202 + 256) = v2219;
              *(_QWORD *)(v2202 + 264) = v2212;
              *(_QWORD *)(v2202 + 272) = v2217 + 4 * v2218;
              if (v2213)
                operator delete(v2213);
            }
            else
            {
              *(_DWORD *)v2211 = v2208;
              v2212 = v2211 + 4;
            }
            *(_QWORD *)(v2202 + 264) = v2212;
            if (v2206)
            {
              v2222 = *(char **)(v2202 + 360);
              v2221 = *(_QWORD *)(v2202 + 368);
              if ((unint64_t)v2222 >= v2221)
              {
                v2224 = (char *)*v2204;
                v2225 = (v2222 - (_BYTE *)*v2204) >> 2;
                v2226 = v2225 + 1;
                if ((unint64_t)(v2225 + 1) >> 62)
LABEL_2653:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v2227 = v2221 - (_QWORD)v2224;
                if (v2227 >> 1 > v2226)
                  v2226 = v2227 >> 1;
                if ((unint64_t)v2227 >= 0x7FFFFFFFFFFFFFFCLL)
                  v2228 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v2228 = v2226;
                if (v2228)
                {
                  v2228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2228);
                  v2224 = *(char **)(v2202 + 352);
                  v2222 = *(char **)(v2202 + 360);
                }
                else
                {
                  v2229 = 0;
                }
                v2230 = (_DWORD *)(v2228 + 4 * v2225);
                *v2230 = v2206;
                v2223 = v2230 + 1;
                while (v2222 != v2224)
                {
                  v2231 = *((_DWORD *)v2222 - 1);
                  v2222 -= 4;
                  *--v2230 = v2231;
                }
                *(_QWORD *)(v2202 + 352) = v2230;
                *(_QWORD *)(v2202 + 360) = v2223;
                *(_QWORD *)(v2202 + 368) = v2228 + 4 * v2229;
                if (v2224)
                  operator delete(v2224);
              }
              else
              {
                *(_DWORD *)v2222 = v2206;
                v2223 = v2222 + 4;
              }
              *(_QWORD *)(v2202 + 360) = v2223;
            }
            ++v2206;
            v2205 = *(_QWORD *)(v2202 + 80);
          }
          while (v2206 < (*(_QWORD *)(v2202 + 88) - v2205) >> 3);
        }
        std::vector<int>::resize((std::vector<int> *)(v2202 + 376), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 400), maxFeatureVectors);
        std::vector<int>::resize((std::vector<int> *)(v2202 + 424), maxFeatureVectors);
        std::vector<std::vector<int>>::resize((uint64_t *)(v2202 + 536), (uint64_t)(*(_QWORD *)(v2202 + 88) - *(_QWORD *)(v2202 + 80)) >> 3);
        v2233 = *(uint64_t **)(v2366 + 112);
        v2232 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2233 >= v2232)
        {
          v2240 = *(_QWORD *)(v2366 + 104);
          v2241 = ((uint64_t)v2233 - v2240) >> 3;
          if ((unint64_t)(v2241 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2242 = v2232 - v2240;
          v2243 = v2242 >> 2;
          if (v2242 >> 2 <= (unint64_t)(v2241 + 1))
            v2243 = v2241 + 1;
          if ((unint64_t)v2242 >= 0x7FFFFFFFFFFFFFF8)
            v2244 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2244 = v2243;
          if (v2244)
            v2244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2244);
          else
            v2245 = 0;
          v2252 = (uint64_t *)(v2244 + 8 * v2241);
          v2253 = v2244 + 8 * v2245;
          *v2252 = v2202;
          v2234 = v2252 + 1;
          v2255 = *(char **)(v2366 + 104);
          v2254 = *(char **)(v2366 + 112);
          if (v2254 == v2255)
          {
            v2257 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2256 = *((_QWORD *)v2254 - 1);
              v2254 -= 8;
              *--v2252 = v2256;
            }
            while (v2254 != v2255);
            v2257 = (_QWORD *)v2366;
            v2254 = *(char **)(v2366 + 104);
          }
          v2257[13] = v2252;
          v2257[14] = v2234;
          v2257[15] = v2253;
          if (v2254)
            operator delete(v2254);
        }
        else
        {
          *v2233 = v2202;
          v2234 = v2233 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2234;
        if (v2187)
          operator delete(v2187);
      }
      else
      {
        v2235 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2366 + 112) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(v2366 + 112) - 8));
        v2236 = operator new();
        SoftMax<short>::SoftMax(v2236, v2235, *(_DWORD *)(v2366 + 8), a2, v154, 0);
        v2238 = *(uint64_t **)(v2366 + 112);
        v2237 = *(_QWORD *)(v2366 + 120);
        if ((unint64_t)v2238 >= v2237)
        {
          v2246 = *(_QWORD *)(v2366 + 104);
          v2247 = ((uint64_t)v2238 - v2246) >> 3;
          if ((unint64_t)(v2247 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v2248 = v2237 - v2246;
          v2249 = v2248 >> 2;
          if (v2248 >> 2 <= (unint64_t)(v2247 + 1))
            v2249 = v2247 + 1;
          if ((unint64_t)v2248 >= 0x7FFFFFFFFFFFFFF8)
            v2250 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2250 = v2249;
          if (v2250)
            v2250 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2250);
          else
            v2251 = 0;
          v2258 = (uint64_t *)(v2250 + 8 * v2247);
          v2259 = v2250 + 8 * v2251;
          *v2258 = v2236;
          v2239 = v2258 + 1;
          v2261 = *(char **)(v2366 + 104);
          v2260 = *(char **)(v2366 + 112);
          if (v2260 == v2261)
          {
            v2263 = (_QWORD *)v2366;
          }
          else
          {
            do
            {
              v2262 = *((_QWORD *)v2260 - 1);
              v2260 -= 8;
              *--v2258 = v2262;
            }
            while (v2260 != v2261);
            v2263 = (_QWORD *)v2366;
            v2260 = *(char **)(v2366 + 104);
          }
          v2263[13] = v2258;
          v2263[14] = v2239;
          v2263[15] = v2259;
          if (v2260)
            operator delete(v2260);
        }
        else
        {
          *v2238 = v2236;
          v2239 = v2238 + 1;
        }
        *(_QWORD *)(v2366 + 112) = v2239;
      }
LABEL_2423:
      v2181 = operator new();
      memset(v2367, 0, sizeof(v2367));
      std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v2367, *(const void **)(v2366 + 104), *(_QWORD *)(v2366 + 112), (uint64_t)(*(_QWORD *)(v2366 + 112) - *(_QWORD *)(v2366 + 104)) >> 3);
      Stacked::Stacked(v2181, (uint64_t)v2367);
      *(_QWORD *)(v2366 + 40) = v2181;
      if (v2367[0])
      {
        operator delete(v2367[0]);
        if (!*(_QWORD *)(v2366 + 40))
        {
          v11 = 4;
LABEL_2656:
          exitFramework(v11);
        }
      }
      (*(void (**)(_QWORD))(***(_QWORD ***)(v2366 + 104) + 8))(**(_QWORD **)(v2366 + 104));
      *(_BYTE *)(v2366 + 28) = v2359;
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v2366 + 40) + 280))(*(_QWORD *)(v2366 + 40), v2359 != 0);
      *(_QWORD *)(*(_QWORD *)(v2366 + 40) + 32) = *(_QWORD *)(a2 + 16);
      operator delete(v2360);
      operator delete(v2362);
      return;
    default:
      goto LABEL_2656;
  }
}

